import { TreeNode } from '../Tree';

export const transformConfig: TreeNode[] = [
  // 标记变转换
  {
    id: 'mark.transform',
    label: 'transform',
    type: 'Transform[]',
    description: '标记转换|标记转换配置',
    optional: true,
    children: [
      // 堆叠变换
      {
        id: 'mark.transform.stackY',
        label: 'stackY',
        type: 'StackYTransform',
        description: 'Y轴堆叠',
        children: [
          {
            id: 'mark.transform.stackY.type',
            label: 'type',
            type: "'stackY'",
            description: '转换类型',
            optional: true,
          },
          {
            id: 'mark.transform.stackY.groupBy',
            label: 'groupBy',
            type: 'string | string[]',
            description: '分组字段',
            optional: true,
          },
          {
            id: 'mark.transform.stackY.reverse',
            label: 'reverse',
            type: 'boolean',
            description: '是否反转',
            optional: true,
          },
          {
            id: 'mark.transform.stackY.orderBy',
            label: 'orderBy',
            type: 'TransformOrder',
            description: '排序方式',
            optional: true,
          },
          {
            id: 'mark.transform.stackY.y',
            label: 'y',
            type: "'y' | 'y1'",
            description: 'Y轴字段',
            optional: true,
          },
          {
            id: 'mark.transform.stackY.y1',
            label: 'y1',
            type: "'y' | 'y1'",
            description: 'Y1轴字段',
            optional: true,
          },
          {
            id: 'mark.transform.stackY.series',
            label: 'series',
            type: 'boolean',
            description: '是否系列化',
            optional: true,
          },
        ],
      },
      {
        id: 'mark.transform.stackEnter',
        label: 'stackEnter',
        type: 'StackEnterTransform',
        description: '堆叠入场动画',
        children: [
          {
            id: 'mark.transform.stackEnter.type',
            label: 'type',
            type: "'stackEnter'",
            description: '转换类型',
            optional: true,
          },
          {
            id: 'mark.transform.stackEnter.groupBy',
            label: 'groupBy',
            type: 'string | string[]',
            description: '分组字段',
            optional: true,
          },
          {
            id: 'mark.transform.stackEnter.orderBy',
            label: 'orderBy',
            type: 'string',
            description: '排序字段',
            optional: true,
          },
          {
            id: 'mark.transform.stackEnter.reverse',
            label: 'reverse',
            type: 'boolean',
            description: '是否反转',
            optional: true,
          },
          {
            id: 'mark.transform.stackEnter.duration',
            label: 'duration',
            type: 'number',
            description: '动画时长',
            optional: true,
          },
          {
            id: 'mark.transform.stackEnter.reducer',
            label: 'reducer',
            type: '(I: number[], V: any[]) => any',
            description: '聚合函数',
            optional: true,
          },
        ],
      },
      // 位置变换
      {
        id: 'mark.transform.dodgeX',
        label: 'dodgeX',
        type: 'DodgeXTransform',
        description: 'X轴分组',
        children: [
          {
            id: 'mark.transform.dodgeX.type',
            label: 'type',
            type: "'dodgeX'",
            description: '转换类型',
            optional: true,
          },
          {
            id: 'mark.transform.dodgeX.groupBy',
            label: 'groupBy',
            type: 'string | string[]',
            description: '分组字段',
            optional: true,
          },
          {
            id: 'mark.transform.dodgeX.reverse',
            label: 'reverse',
            type: 'boolean',
            description: '是否反转',
            optional: true,
          },
          {
            id: 'mark.transform.dodgeX.orderBy',
            label: 'orderBy',
            type: 'TransformOrder',
            description: '排序方式',
            optional: true,
          },
          {
            id: 'mark.transform.dodgeX.padding',
            label: 'padding',
            type: 'number',
            description: '间距',
            optional: true,
          },
        ],
      },
      {
        id: 'mark.transform.jitter',
        label: 'jitter',
        type: 'JitterTransform',
        description: '抖动',
        children: [
          {
            id: 'mark.transform.jitter.type',
            label: 'type',
            type: "'jitter'",
            description: '转换类型',
            optional: true,
          },
          {
            id: 'mark.transform.jitter.padding',
            label: 'padding',
            type: 'number',
            description: '抖动范围',
            optional: true,
          },
          {
            id: 'mark.transform.jitter.paddingX',
            label: 'paddingX',
            type: 'number',
            description: 'X轴抖动范围',
            optional: true,
          },
          {
            id: 'mark.transform.jitter.paddingY',
            label: 'paddingY',
            type: 'number',
            description: 'Y轴抖动范围',
            optional: true,
          },
          {
            id: 'mark.transform.jitter.random',
            label: 'random',
            type: '() => number',
            description: '随机函数',
            optional: true,
          },
        ],
      },
      {
        id: 'mark.transform.jitterX',
        label: 'jitterX',
        type: 'JitterXTransform',
        description: 'X轴抖动',
        children: [
          {
            id: 'mark.transform.jitterX.type',
            label: 'type',
            type: "'jitterX'",
            description: '转换类型',
            optional: true,
          },
          {
            id: 'mark.transform.jitterX.padding',
            label: 'padding',
            type: 'number',
            description: '抖动范围',
            optional: true,
          },
          {
            id: 'mark.transform.jitterX.random',
            label: 'random',
            type: '() => number',
            description: '随机函数',
            optional: true,
          },
        ],
      },
      {
        id: 'mark.transform.jitterY',
        label: 'jitterY',
        type: 'JitterYTransform',
        description: 'Y轴抖动',
        children: [
          {
            id: 'mark.transform.jitterY.type',
            label: 'type',
            type: "'jitterY'",
            description: '转换类型',
            optional: true,
          },
          {
            id: 'mark.transform.jitterY.padding',
            label: 'padding',
            type: 'number',
            description: '抖动范围',
            optional: true,
          },
          {
            id: 'mark.transform.jitterY.random',
            label: 'random',
            type: '() => number',
            description: '随机函数',
            optional: true,
          },
        ],
      },
      {
        id: 'mark.transform.pack',
        label: 'pack',
        type: 'PackTransform',
        description: '包装布局',
        children: [
          {
            id: 'mark.transform.pack.type',
            label: 'type',
            type: "'pack'",
            description: '转换类型',
            optional: true,
          },
          {
            id: 'mark.transform.pack.padding',
            label: 'padding',
            type: 'number',
            description: '间距',
            optional: true,
          },
          {
            id: 'mark.transform.pack.direction',
            label: 'direction',
            type: "'row' | 'col'",
            description: '排列方向',
            optional: true,
          },
        ],
      },
      {
        id: 'mark.transform.flexX',
        label: 'flexX',
        type: 'FlexXTransform',
        description: '弹性布局',
        children: [
          {
            id: 'mark.transform.flexX.type',
            label: 'type',
            type: "'flexX'",
            description: '转换类型',
            optional: true,
          },
          {
            id: 'mark.transform.flexX.field',
            label: 'field',
            type: 'string | ((d: any) => Primitive[])',
            description: '字段名或函数',
            optional: true,
          },
          {
            id: 'mark.transform.flexX.channel',
            label: 'channel',
            type: 'string',
            description: '通道名',
            optional: true,
          },
          {
            id: 'mark.transform.flexX.reducer',
            label: 'reducer',
            type: "'sum' | ((I: number[], V: Primitive[]) => Primitive)",
            description: '聚合函数',
            optional: true,
          },
        ],
      },
      // 统计变换
      {
        id: 'mark.transform.normalizeY',
        label: 'normalizeY',
        type: 'NormalizeYTransform',
        description: 'Y轴归一化',
        children: [
          {
            id: 'mark.transform.normalizeY.type',
            label: 'type',
            type: "'normalizeY'",
            description: '转换类型',
            optional: true,
          },
          {
            id: 'mark.transform.normalizeY.series',
            label: 'series',
            type: 'boolean',
            description: '是否按系列',
            optional: true,
          },
          {
            id: 'mark.transform.normalizeY.groupBy',
            label: 'groupBy',
            type: 'string | string[]',
            description: '分组字段',
            optional: true,
          },
          {
            id: 'mark.transform.normalizeY.basis',
            label: 'basis',
            type: "'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum'",
            description: '基准值',
            optional: true,
          },
        ],
      },
      {
        id: 'mark.transform.symmetryY',
        label: 'symmetryY',
        type: 'SymmetryYTransform',
        description: 'Y轴对称',
        children: [
          {
            id: 'mark.transform.symmetryY.type',
            label: 'type',
            type: "'symmetryY'",
            description: '转换类型',
            optional: true,
          },
          {
            id: 'mark.transform.symmetryY.groupBy',
            label: 'groupBy',
            type: 'string | string[]',
            description: '分组字段',
            optional: true,
          },
        ],
      },
      {
        id: 'mark.transform.diffY',
        label: 'diffY',
        type: 'DiffYTransform',
        description: 'Y轴差分',
        children: [
          {
            id: 'mark.transform.diffY.type',
            label: 'type',
            type: "'diffY'",
            description: '转换类型',
            optional: true,
          },
          {
            id: 'mark.transform.diffY.groupBy',
            label: 'groupBy',
            type: 'string | string[]',
            description: '分组字段',
            optional: true,
          },
        ],
      },
      // 选择变换
      {
        id: 'mark.transform.select',
        label: 'select',
        type: 'SelectTransform',
        description: '选择数据',
        children: [
          {
            id: 'mark.transform.select.type',
            label: 'type',
            type: "'select'",
            description: '转换类型',
            optional: true,
          },
          {
            id: 'mark.transform.select.groupBy',
            label: 'groupBy',
            type: 'string | string[]',
            description: '分组字段',
            optional: true,
          },
          {
            id: 'mark.transform.select.channel',
            label: 'channel',
            type: 'ChannelTypes',
            description: '选择通道',
            optional: true,
          },
          {
            id: 'mark.transform.select.selector',
            label: 'selector',
            type: "'min' | 'max' | 'first' | 'last' | 'mean' | 'median' | ((I: number[], V: number[]) => number[])",
            description: '选择器',
            optional: true,
          },
        ],
      },
      {
        id: 'mark.transform.selectX',
        label: 'selectX',
        type: 'SelectXTransform',
        description: 'X轴选择',
        children: [
          {
            id: 'mark.transform.selectX.type',
            label: 'type',
            type: "'selectX'",
            description: '转换类型',
            optional: true,
          },
          {
            id: 'mark.transform.selectX.groupBy',
            label: 'groupBy',
            type: 'string | string[]',
            description: '分组字段',
            optional: true,
          },
          {
            id: 'mark.transform.selectX.selector',
            label: 'selector',
            type: "'min' | 'max' | 'first' | 'last' | 'mean' | 'median' | ((I: number[], V: number[]) => number[])",
            description: '选择器',
            optional: true,
          },
        ],
      },
      {
        id: 'mark.transform.selectY',
        label: 'selectY',
        type: 'SelectYTransform',
        description: 'Y轴选择',
        children: [
          {
            id: 'mark.transform.selectY.type',
            label: 'type',
            type: "'selectY'",
            description: '转换类型',
            optional: true,
          },
          {
            id: 'mark.transform.selectY.groupBy',
            label: 'groupBy',
            type: 'string | string[]',
            description: '分组字段',
            optional: true,
          },
          {
            id: 'mark.transform.selectY.selector',
            label: 'selector',
            type: "'min' | 'max' | 'first' | 'last' | 'mean' | 'median' | ((I: number[], V: number[]) => number[])",
            description: '选择器',
            optional: true,
          },
        ],
      },
      // 分组变换
      {
        id: 'mark.transform.group',
        label: 'group',
        type: 'GroupTransform',
        description: '通用分组',
        children: [
          {
            id: 'mark.transform.group.type',
            label: 'type',
            type: "'group'",
            description: '转换类型',
            optional: true,
          },
          {
            id: 'mark.transform.group.channels',
            label: 'channels',
            type: 'string | string[]',
            description: '分组通道',
            optional: true,
          },
        ],
      },
      {
        id: 'mark.transform.groupX',
        label: 'groupX',
        type: 'GroupXTransform',
        description: 'X轴分组',
        children: [
          {
            id: 'mark.transform.groupX.type',
            label: 'type',
            type: "'groupX'",
            description: '转换类型',
            optional: true,
          },
        ],
      },
      {
        id: 'mark.transform.groupY',
        label: 'groupY',
        type: 'GroupYTransform',
        description: 'Y轴分组',
        children: [
          {
            id: 'mark.transform.groupY.type',
            label: 'type',
            type: "'groupY'",
            description: '转换类型',
            optional: true,
          },
        ],
      },
      {
        id: 'mark.transform.groupColor',
        label: 'groupColor',
        type: 'GroupColorTransform',
        description: '颜色分组',
        children: [
          {
            id: 'mark.transform.groupColor.type',
            label: 'type',
            type: "'groupColor'",
            description: '转换类型',
            optional: true,
          },
        ],
      },
      // 排序变换
      {
        id: 'mark.transform.sortX',
        label: 'sortX',
        type: 'SortXTransform',
        description: 'X轴排序',
        children: [
          {
            id: 'mark.transform.sortX.type',
            label: 'type',
            type: "'sortX'",
            description: '转换类型',
            optional: true,
          },
          {
            id: 'mark.transform.sortX.reverse',
            label: 'reverse',
            type: 'boolean',
            description: '是否反转',
            optional: true,
          },
          {
            id: 'mark.transform.sortX.by',
            label: 'by',
            type: 'string',
            description: '排序字段',
            optional: true,
          },
          {
            id: 'mark.transform.sortX.slice',
            label: 'slice',
            type: 'number | [number, number]',
            description: '切片范围',
            optional: true,
          },
          {
            id: 'mark.transform.sortX.ordinal',
            label: 'ordinal',
            type: 'boolean',
            description: '是否序数',
            optional: true,
          },
          {
            id: 'mark.transform.sortX.reducer',
            label: 'reducer',
            type: "'max' | 'min' | 'sum' | 'first' | 'last' | 'mean' | 'median' | ((I: number[], V: Primitive[]) => Primitive)",
            description: '聚合函数',
            optional: true,
          },
        ],
      },
      {
        id: 'mark.transform.sortY',
        label: 'sortY',
        type: 'SortYTransform',
        description: 'Y轴排序',
        children: [
          {
            id: 'mark.transform.sortY.type',
            label: 'type',
            type: "'sortY'",
            description: '转换类型',
            optional: true,
          },
          {
            id: 'mark.transform.sortY.reverse',
            label: 'reverse',
            type: 'boolean',
            description: '是否反转',
            optional: true,
          },
          {
            id: 'mark.transform.sortY.by',
            label: 'by',
            type: 'string',
            description: '排序字段',
            optional: true,
          },
          {
            id: 'mark.transform.sortY.slice',
            label: 'slice',
            type: 'number | [number, number]',
            description: '切片范围',
            optional: true,
          },
          {
            id: 'mark.transform.sortY.reducer',
            label: 'reducer',
            type: "'max' | 'min' | 'sum' | 'first' | 'last' | 'mean' | 'median' | ((I: number[], V: Primitive[]) => Primitive)",
            description: '聚合函数',
            optional: true,
          },
        ],
      },
      {
        id: 'mark.transform.sortColor',
        label: 'sortColor',
        type: 'SortColorTransform',
        description: '颜色排序',
        children: [
          {
            id: 'mark.transform.sortColor.type',
            label: 'type',
            type: "'sortColor'",
            description: '转换类型',
            optional: true,
          },
          {
            id: 'mark.transform.sortColor.reverse',
            label: 'reverse',
            type: 'boolean',
            description: '是否反转',
            optional: true,
          },
          {
            id: 'mark.transform.sortColor.by',
            label: 'by',
            type: 'string',
            description: '排序字段',
            optional: true,
          },
          {
            id: 'mark.transform.sortColor.slice',
            label: 'slice',
            type: 'number | [number, number]',
            description: '切片范围',
            optional: true,
          },
          {
            id: 'mark.transform.sortColor.reducer',
            label: 'reducer',
            type: "'max' | 'min' | 'sum' | 'first' | 'last' | 'mean' | 'median' | ((I: number[], V: Primitive[]) => Primitive)",
            description: '聚合函数',
            optional: true,
          },
        ],
      },
      // 分箱变换
      {
        id: 'mark.transform.bin',
        label: 'bin',
        type: 'BinTransform',
        description: '二维分箱',
        children: [
          {
            id: 'mark.transform.bin.type',
            label: 'type',
            type: "'bin'",
            description: '转换类型',
            optional: true,
          },
          {
            id: 'mark.transform.bin.thresholdsX',
            label: 'thresholdsX',
            type: 'number',
            description: 'X轴分箱数',
            optional: true,
          },
          {
            id: 'mark.transform.bin.thresholdsY',
            label: 'thresholdsY',
            type: 'number',
            description: 'Y轴分箱数',
            optional: true,
          },
        ],
      },
      {
        id: 'mark.transform.binX',
        label: 'binX',
        type: 'BinXTransform',
        description: 'X轴分箱',
        children: [
          {
            id: 'mark.transform.binX.type',
            label: 'type',
            type: "'binX'",
            description: '转换类型',
            optional: true,
          },
          {
            id: 'mark.transform.binX.thresholds',
            label: 'thresholds',
            type: 'number',
            description: '分箱数量',
            optional: true,
          },
        ],
      },
      // 采样变换
      {
        id: 'mark.transform.sample',
        label: 'sample',
        type: 'SampleTransform',
        description: '数据采样',
        children: [
          {
            id: 'mark.transform.sample.type',
            label: 'type',
            type: "'sample'",
            description: '转换类型',
            optional: true,
          },
          {
            id: 'mark.transform.sample.strategy',
            label: 'strategy',
            type: "'lttb' | 'median' | 'max' | 'min' | 'first' | 'last' | SampleFunction",
            description: '采样策略',
            optional: true,
          },
          {
            id: 'mark.transform.sample.thresholds',
            label: 'thresholds',
            type: 'number',
            description: '采样阈值（默认2000）',
            optional: true,
          },
          {
            id: 'mark.transform.sample.groupBy',
            label: 'groupBy',
            type: 'string | string[]',
            description: '分组字段（用于系列数据）',
            optional: true,
          },
        ],
      },
      // 过滤变换
      {
        id: 'mark.transform.filter',
        label: 'filter',
        type: 'FilterTransform',
        description: '数据过滤',
        children: [
          {
            id: 'mark.transform.filter.type',
            label: 'type',
            type: "'filter'",
            description: '转换类型',
            optional: true,
          },
        ],
      },
    ],
  },
];
