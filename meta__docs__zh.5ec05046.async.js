"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9600],{41807:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(27029),{"docs-charts-arcdiagram-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-arcdiagram-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},72408:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(60818),{"docs-charts-area-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-area-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},34725:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(45294),{"docs-charts-bar-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-bar-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},22119:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(26743),{"docs-charts-bi-directional-bar-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-bi-directional-bar-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},52502:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(68796),{"docs-charts-boxplot-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-boxplot-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},15262:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(95673),{"docs-charts-bubble-chart-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-bubble-chart-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},59604:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(24717),{"docs-charts-bubble-map-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-bubble-map-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},97421:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(53895),{"docs-charts-bullet-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-bullet-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},13355:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(85109),{"docs-charts-chord-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-chord-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},38222:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(19182),{"docs-charts-choropleth-map-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-choropleth-map-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},82687:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(66419),{"docs-charts-color-map-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-color-map-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},24525:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(76472),{"docs-charts-contourline-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-contourline-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},43103:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(94655),{"docs-charts-distributioncurve-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-distributioncurve-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},90856:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(12567),{"docs-charts-donut-chart-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-donut-chart-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},94930:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(80262),{"docs-charts-dot-map-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-dot-map-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},97698:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(67090),{"docs-charts-funnel-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-funnel-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},89769:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(5305),{"docs-charts-gantt-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-gantt-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},73278:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(96194),{"docs-charts-gauge-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-gauge-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},37766:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(18831),{"docs-charts-heatmap-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-heatmap-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},81730:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(82392),{"docs-charts-histogram-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-histogram-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},50731:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(77638),{"docs-charts-k-chart-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-k-chart-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},79318:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(88907),{"docs-charts-kagi-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-kagi-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},36717:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(7158),{"docs-charts-line-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-line-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},74458:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(59017),{"docs-charts-mosaic-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-mosaic-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},83982:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(95845),{"docs-charts-multi-set-bar-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-multi-set-bar-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},86331:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(37266),{"docs-charts-overview-demo-components-list":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,47962))}))),asset:null,context:void 0,renderOpts:void 0}})},91178:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(65529),{"docs-charts-pack-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-pack-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},53655:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(52107),{"docs-charts-parallel-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-parallel-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},50370:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(17646),{"docs-charts-pie-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-pie-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},36455:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(60766),{"docs-charts-radar-chart-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-radar-chart-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},65644:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(181),{"docs-charts-radial-bar-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-radial-bar-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},58498:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(85799),{"docs-charts-regressioncurve-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-regressioncurve-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},53559:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(2851),{"docs-charts-rose-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-rose-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},65550:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(76316),{"docs-charts-sankey-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-sankey-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},14931:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(49093),{"docs-charts-scatter-plot-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-scatter-plot-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},6321:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(67484),{"docs-charts-spiral-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-spiral-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},51288:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(20526),{"docs-charts-stacked-area-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-stacked-area-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},27137:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(88646),{"docs-charts-stacked-bar-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-stacked-bar-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},66110:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(10094),{"docs-charts-stem-leaf-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-stem-leaf-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},51595:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(59989),{"docs-charts-sunburst-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-sunburst-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},88837:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(66215),{"docs-charts-treemap-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-treemap-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},11838:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(34276),{"docs-charts-venn-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-venn-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},87114:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(62059),{"docs-charts-violin-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-violin-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},88440:function(a,e,n){n.r(e),n.d(e,{demos:function(){return d}});var t=n(67294),d=(n(61233),{"docs-charts-wordcloud-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-wordcloud-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},31268:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(96831);var t={}},72274:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(15755);var t={}},94265:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(87479);var t={}},74145:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(41552);var t={}},86172:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(80877);var t={}},40969:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(28264);var t={}},27131:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(97862);var t={}},50757:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(60820);var t={}},34150:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(22024);var t={}},77423:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(65490);var t={}},50330:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(70708);var t={}},7927:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(20882);var t={}},63855:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(49564);var t={}},17206:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(31347);var t={}},5475:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(98759);var t={}},15382:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(97206);var t={}},45047:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(9365);var t={}},70372:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(41704);var t={}},63927:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(19705);var t={}},41844:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(36552);var t={}},63820:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(35297);var t={}},33720:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(36197);var t={}},53121:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(62747);var t={}},1292:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(88351);var t={}},67054:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(5570);var t={}},14595:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(19999);var t={}},46133:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(32162);var t={}},92417:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(76827);var t={}},56191:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(33072);var t={}},9477:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(29051);var t={}},34634:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(80995);var t={}},76458:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(97646);var t={}},91188:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(79702);var t={}},42568:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(57599);var t={}},53708:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(54142);var t={}},3934:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(33662);var t={}},39122:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(71765);var t={}},10533:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(63873);var t={}},52925:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(24828);var t={}},58045:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(73479);var t={}},185:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(29018);var t={}},12659:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(19195);var t={}},65770:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(18610);var t={}},17849:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(99608);var t={}},82511:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(78711);var t={}},4710:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(83443);var t={}},88279:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(39605);var t={}},76941:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(37145);var t={}},99543:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(20228);var t={}},32430:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(36687);var t={}},46527:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(74254);var t={}},81851:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(82332);var t={}},85064:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(50565);var t={}},84433:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(68249);var t={}},15642:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(7341);var t={}},74890:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(25538);var t={}},33348:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(15849);var t={}},91972:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(15005);var t={}},90503:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(92485);var t={}},38090:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(52516);var t={}},97416:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(43132);var t={}},44827:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(33950);var t={}},3904:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(24287);var t={}},10678:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(60611);var t={}},73471:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(69360);var t={}},14583:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(61);var t={}},45222:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(90113);var t={}},70782:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(15547);var t={}},80833:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(19434);var t={}},28389:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(70482);var t={}},35783:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(99e3);var t={}},49574:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(38496);var t={}},70714:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(96347);var t={}},10273:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(59999);var t={}},81620:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(38836);var t={}},16750:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(37661);var t={}},45886:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(30256);var t={}},27182:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(26996);var t={}},93913:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(88848);var t={}},49848:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(30160);var t={}},4445:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(8712);var t={}},50072:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(71186);var t={}},49222:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(5566);var t={}},31723:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(62);var t={}},56465:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(63360);var t={}},44252:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(57784);var t={}},69977:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(11227);var t={}},19473:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(11462);var t={}},66350:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(30948);var t={}},70539:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(51747);var t={}},21941:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(97488);var t={}},93796:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(50861);var t={}},25883:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(92901);var t={}},1252:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(83299);var t={}},58014:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(55418);var t={}},96805:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(40106);var t={}},37662:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(62907);var t={}},9078:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(60200);var t={}},65659:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(14038);var t={}},40942:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(26307);var t={}},62856:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(18760);var t={}},2797:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(56803);var t={}},76039:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(92588);var t={}},88164:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(6668);var t={}},98478:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(97876);var t={}},8339:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(67739);var t={}},73556:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(87918);var t={}},57770:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(18841);var t={}},28787:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(71273);var t={}},88374:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(1830);var t={}},57638:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(84440);var t={}},93984:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(29557);var t={}},42690:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(48910);var t={}},33105:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(78769);var t={}},55669:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(27390);var t={}},37495:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(53502);var t={}},40934:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(30131);var t={}},63422:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(63122);var t={}},73866:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(2375);var t={}},18460:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(87931);var t={}},14910:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(38755);var t={}},64548:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(8657);var t={}},53906:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(15989);var t={}},21060:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(85192);var t={}},8951:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(86198);var t={}},87060:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(41702);var t={}},35602:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(74504);var t={}},36473:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(91179);var t={}},21284:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(31803);var t={}},18315:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(89058);var t={}},44289:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(14813);var t={}},44924:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(63016);var t={}},97375:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(1768);var t={}},36669:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(50056);var t={}},15956:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(11385);var t={}},78690:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(61076);var t={}},33500:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(56714);var t={}},92960:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(79182);var t={}},32604:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(29634);var t={}},45406:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(25569);var t={}},13910:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(88319);var t={}},29813:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(71695);var t={}},8311:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(49866);var t={}},66764:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(21668);var t={}},52784:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(92551);var t={}},8037:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(87335);var t={}},89662:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(14327);var t={}},89496:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(38096);var t={}},34013:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(87194);var t={}},56883:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(90026);var t={}},38142:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(47231);var t={}},65917:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(96641);var t={}},85673:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(12619);var t={}},29532:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(49054);var t={}},45926:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(36783);var t={}},46673:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(17653);var t={}},71039:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(55357);var t={}},68528:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(56692);var t={}},99809:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(81495);var t={}},5502:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(77023);var t={}},51068:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(18408);var t={}},73696:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(99395);var t={}},60710:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(20938);var t={}},96293:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(11181);var t={}},12329:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(88852);var t={}},98735:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(12658);var t={}},32370:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(21744);var t={}},28985:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(67114);var t={}},11633:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(57233);var t={}},72776:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(85677);var t={}},94245:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(62366);var t={}},64467:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(86218);var t={}},19821:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(39631);var t={}},37339:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(11928);var t={}},694:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(45223);var t={}},9282:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(34456);var t={}},15106:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(47870);var t={}},18035:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(86181);var t={}},44384:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(52771);var t={}},94721:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(13709);var t={}},51336:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(27029);const t=[{value:"弧长连接图是节点－链接法的一个变种，节点－链接法是指用节点表示对象，用线（或边）表示关系的节点－链接布局(node-link)的一种可视化布局表示。弧长连接图在此概念的基础上，采用一维布局方式，即节点沿某个线性轴或环状排列，用圆弧表达节点之间的链接关系。这种方法不能像二维布局那样表达图的全局结构，但在节点良好排序后可清晰的呈现环和桥的结构。",paraId:0,tocIndex:0},{value:"英文名",paraId:1,tocIndex:0},{value:"：Arc diagram",paraId:1,tocIndex:0},{value:"图表类型",paraId:2,tocIndex:2},{value:"线性弧长连接图",paraId:2,tocIndex:2},{value:"适合的数据",paraId:2,tocIndex:2},{value:"列表：一组节点数据（包含节点 id 字段）、一组链接数据（包含源节点字段和目标节点字段）",paraId:2,tocIndex:2},{value:"功能",paraId:2,tocIndex:2},{value:"表示数据之间的链接关系",paraId:2,tocIndex:2},{value:"数据与图形的映射",paraId:2,tocIndex:2},{value:"节点的坐标（自动计算）字段映射到节点的坐标轴的位置",paraId:2,tocIndex:2},{value:"链接的坐标（自动计算）映射到半圆弧的顶点坐标轴位置",paraId:2,tocIndex:2},{value:"节点中的分类数据也可以设置颜色增强区分度",paraId:2,tocIndex:2},{value:"适合的数据条数",paraId:2,tocIndex:2},{value:"不少于 2 条数据",paraId:2,tocIndex:2},{value:"图表类型",paraId:3,tocIndex:3},{value:"环形弧长连接图",paraId:3,tocIndex:3},{value:"适合的数据",paraId:3,tocIndex:3},{value:"列表：一组节点数据（包含节点 id 字段）、一组链接数据（包含源节点字段和目标节点字段）",paraId:3,tocIndex:3},{value:"功能",paraId:3,tocIndex:3},{value:"表示数据之间的链接关系",paraId:3,tocIndex:3},{value:"数据与图形的映射",paraId:3,tocIndex:3},{value:"节点的坐标（自动计算）字段映射到节点的坐标轴的位置",paraId:3,tocIndex:3},{value:"链接的坐标（自动计算）映射到以圆心为控制点的贝塞尔曲线的顶点坐标轴位置",paraId:3,tocIndex:3},{value:"节点中的分类数据也可以设置颜色增强区分度",paraId:3,tocIndex:3},{value:"适合的数据条数",paraId:3,tocIndex:3},{value:"不少于 5 条节点数据",paraId:3,tocIndex:3},{value:"例子 1: ",paraId:4,tocIndex:5},{value:"表达数据之间的关系，以及关系的重要性",paraId:4,tocIndex:5},{value:'下图这个网络代表了维克多·雨果的经典小说"Les Misérables"中的人物关系。',paraId:5,tocIndex:5},{value:"节点数据",paraId:6,tocIndex:5},{value:"：",paraId:6,tocIndex:5},{value:"name",paraId:7,tocIndex:5},{value:"group",paraId:7,tocIndex:5},{value:"id",paraId:7,tocIndex:5},{value:"Myriel",paraId:7,tocIndex:5},{value:"1",paraId:7,tocIndex:5},{value:"0",paraId:7,tocIndex:5},{value:"...",paraId:7,tocIndex:5},{value:"...",paraId:7,tocIndex:5},{value:"...",paraId:7,tocIndex:5},{value:"链接数据",paraId:8,tocIndex:5},{value:"：",paraId:8,tocIndex:5},{value:"source",paraId:9,tocIndex:5},{value:"target",paraId:9,tocIndex:5},{value:"value",paraId:9,tocIndex:5},{value:"1",paraId:9,tocIndex:5},{value:"0",paraId:9,tocIndex:5},{value:"1",paraId:9,tocIndex:5},{value:"...",paraId:9,tocIndex:5},{value:"...",paraId:9,tocIndex:5},{value:"...",paraId:9,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/antvdemo/assets/data/relationship.json',\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => {\n          const { nodes, links } = data;\n\n          const arcData = [];\n          links.forEach((link) => {\n            const sourceId = parseInt(link.source);\n            const targetId = parseInt(link.target);\n\n            const sourceIndex = nodes.findIndex((n) => n.id === sourceId);\n            const targetIndex = nodes.findIndex((n) => n.id === targetId);\n\n            if (sourceIndex !== -1 && targetIndex !== -1) {\n              const sourceX = sourceIndex * 15 + 50;\n              const targetX = targetIndex * 15 + 50;\n              const distance = Math.abs(targetX - sourceX);\n              const arcHeight = Math.min(150, distance * 0.1);\n\n              for (let i = 0; i <= 15; i++) {\n                const t = i / 15;\n                const x = sourceX + (targetX - sourceX) * t;\n                const y = 600 - arcHeight * Math.sin(Math.PI * t);\n\n                arcData.push({\n                  x: x,\n                  y: y,\n                  linkId: `${sourceId}-${targetId}`,\n                  sourceName: nodes[sourceIndex].label,\n                  targetName: nodes[targetIndex].label,\n                  type: 'link',\n                });\n              }\n            }\n          });\n\n          const nodeData = nodes.map((node, i) => ({\n            name: node.label,\n            group: node.modularity_class,\n            size: node.size,\n            displaySize: Math.sqrt(node.size) * 4,\n            x: i * 15 + 50,\n            y: 600,\n            type: 'node',\n          }));\n\n          return [...arcData, ...nodeData];\n        },\n      },\n    ],\n  },\n});\n\nchart\n  .line()\n  .data({ transform: [{ type: 'filter', callback: (d) => d.type === 'link' }] })\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('series', 'linkId')\n  .style('stroke', '#1890ff')\n  .style('strokeWidth', 0.8)\n  .style('strokeOpacity', 0.4);\n\nchart\n  .point()\n  .data({ transform: [{ type: 'filter', callback: (d) => d.type === 'node' }] })\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('color', 'group')\n  .scale('color', {\n    type: 'ordinal',\n    range: [\n      '#ff7875',\n      '#ffa940',\n      '#fadb14',\n      '#73d13d',\n      '#40a9ff',\n      '#b37feb',\n      '#ff85c0',\n      '#ffc069',\n      '#95de64',\n    ],\n  })\n  .style('r', 4)\n  .style('fill', (d) => {\n    const colors = [\n      '#ff7875',\n      '#ffa940',\n      '#fadb14',\n      '#73d13d',\n      '#40a9ff',\n      '#b37feb',\n      '#ff85c0',\n      '#ffc069',\n      '#95de64',\n    ];\n    return colors[parseInt(d.group)] || '#40a9ff';\n  })\n  .style('stroke', 'none')\n  .style('fillOpacity', 0.8);\n\nchart.render();\n",paraId:10,tocIndex:5},{value:"说明",paraId:11,tocIndex:5},{value:"：",paraId:11,tocIndex:5},{value:"group",paraId:12,tocIndex:5},{value:" 字段，使用了",paraId:12,tocIndex:5},{value:"颜色",paraId:12,tocIndex:5},{value:"用于区分不同的节点类型",paraId:12,tocIndex:5},{value:"value",paraId:12,tocIndex:5},{value:" 字段，使用",paraId:12,tocIndex:5},{value:"弧线粗细",paraId:12,tocIndex:5},{value:"表示关系的强度",paraId:12,tocIndex:5},{value:"例子 2: ",paraId:13,tocIndex:5},{value:"环形布局展示复杂关系网络",paraId:13,tocIndex:5},{value:"使用极坐标系可以将例 1 的数据绘制成环形弧长连接图，更适合展示具有大量节点和复杂关系的网络数据。",paraId:14,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  width: 600,\n  height: 600,\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/antvdemo/assets/data/relationship.json',\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => {\n          const { nodes, links } = data;\n\n          const centerX = 300;\n          const centerY = 300;\n          const radius = 200;\n          const nodeCount = nodes.length;\n\n          const nodePositions = nodes.map((node, i) => {\n            const angle = (i / nodeCount) * 2 * Math.PI - Math.PI / 2;\n            const x = centerX + radius * Math.cos(angle);\n            const y = centerY + radius * Math.sin(angle);\n            return {\n              ...node,\n              x: x,\n              y: y,\n              angle: angle,\n              index: i,\n            };\n          });\n\n          const arcData = [];\n          links.forEach((link) => {\n            const sourceId = parseInt(link.source);\n            const targetId = parseInt(link.target);\n\n            const sourceNode = nodePositions.find((n) => n.id === sourceId);\n            const targetNode = nodePositions.find((n) => n.id === targetId);\n\n            if (sourceNode && targetNode) {\n              const steps = 20;\n              for (let i = 0; i <= steps; i++) {\n                const t = i / steps;\n\n                const x =\n                  Math.pow(1 - t, 2) * sourceNode.x +\n                  2 * (1 - t) * t * centerX +\n                  Math.pow(t, 2) * targetNode.x;\n                const y =\n                  Math.pow(1 - t, 2) * sourceNode.y +\n                  2 * (1 - t) * t * centerY +\n                  Math.pow(t, 2) * targetNode.y;\n\n                arcData.push({\n                  x: x,\n                  y: y,\n                  linkId: `${sourceId}-${targetId}`,\n                  sourceName: sourceNode.label,\n                  targetName: targetNode.label,\n                  type: 'link',\n                });\n              }\n            }\n          });\n\n          const nodeData = nodePositions.map((node) => ({\n            name: node.label,\n            group: node.modularity_class,\n            size: node.size,\n            displaySize: Math.sqrt(node.size) * 4,\n            x: node.x,\n            y: node.y,\n            type: 'node',\n          }));\n\n          return [...arcData, ...nodeData];\n        },\n      },\n    ],\n  },\n});\n\nchart\n  .line()\n  .data({ transform: [{ type: 'filter', callback: (d) => d.type === 'link' }] })\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('series', 'linkId')\n  .style('stroke', '#1890ff')\n  .style('strokeWidth', 1.2)\n  .style('strokeOpacity', 0.3)\n  .style('lineCap', 'round');\n\nchart\n  .point()\n  .data({ transform: [{ type: 'filter', callback: (d) => d.type === 'node' }] })\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('color', 'group')\n  .scale('color', {\n    type: 'ordinal',\n    range: [\n      '#ff7875',\n      '#ffa940',\n      '#fadb14',\n      '#73d13d',\n      '#40a9ff',\n      '#b37feb',\n      '#ff85c0',\n      '#ffc069',\n      '#95de64',\n    ],\n  })\n  .style('r', 6)\n  .style('fill', (d) => {\n    const colors = [\n      '#ff7875',\n      '#ffa940',\n      '#fadb14',\n      '#73d13d',\n      '#40a9ff',\n      '#b37feb',\n      '#ff85c0',\n      '#ffc069',\n      '#95de64',\n    ];\n    return colors[parseInt(d.group)] || '#40a9ff';\n  })\n  .style('stroke', '#fff')\n  .style('strokeWidth', 2)\n  .style('fillOpacity', 0.9);\n\nchart\n  .text()\n  .data({ transform: [{ type: 'filter', callback: (d) => d.type === 'node' }] })\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('text', 'name')\n  .style('textAlign', 'center')\n  .style('textBaseline', 'middle')\n  .style('fontSize', 10)\n  .style('fill', '#333')\n  .style('fontWeight', 'bold')\n  .style('dy', -15);\n\nchart.render();\n",paraId:15,tocIndex:5},{value:"例子 1: ",paraId:16,tocIndex:6},{value:"不适合表示层次结构",paraId:16,tocIndex:6},{value:"弧长连接图采用线性或环形的一维布局，无法有效表达数据的层次关系，对于具有明显层级结构的数据，树形图或组织架构图更为合适。",paraId:17,tocIndex:6},{value:"例子 2: ",paraId:18,tocIndex:6},{value:"不适合处理过多节点",paraId:18,tocIndex:6},{value:"当节点数量过多时，弧长连接图会变得拥挤难读，连线重叠严重，影响可读性。此时应考虑使用力导向图或其他网络图布局。",paraId:19,tocIndex:6},{value:"和弦图",paraId:20,tocIndex:7},{value:"弧长连接图的节点使用标准线性布局，节点权重决定节点大小但不影响位置",paraId:21,tocIndex:8},{value:"弧长连接图的连线可以使用权重控制线宽，粗细均匀",paraId:21,tocIndex:8},{value:"弧长连接图的连线重叠绘制在节点上",paraId:21,tocIndex:8},{value:"和弦图的节点使用权重线性布局，节点权重即决定节点大小，又决定节点位置",paraId:21,tocIndex:8},{value:"和弦图的连线使用源权重和目标权重控制线宽，粗细非均匀",paraId:21,tocIndex:8},{value:"和弦图的节点宽度为连线宽度之和，节点处的连线平铺不重叠",paraId:21,tocIndex:8},{value:"桑基图",paraId:22,tocIndex:8},{value:"弧长连接图主要用于表示节点之间的关系连接，不体现流量或数据流向",paraId:23,tocIndex:9},{value:"桑基图专门用于表示数据流，连线宽度表示流量大小，具有明确的流向",paraId:23,tocIndex:9},{value:"弧长连接图采用弧形连线，视觉上更加优雅",paraId:23,tocIndex:9},{value:"桑基图采用直线或曲线连接，更直观地表达流向关系",paraId:23,tocIndex:9},{value:"和弦图",paraId:24,tocIndex:10},{value:" - 用于表示多个实体之间的关系和流向",paraId:25,tocIndex:10},{value:"桑基图",paraId:26,tocIndex:10},{value:" - 用于表示数据流和能量流转",paraId:25,tocIndex:10},{value:"网络图",paraId:27,tocIndex:10},{value:" - 用于表示复杂的网络关系结构",paraId:25,tocIndex:10}]},49450:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(60818);const t=[{value:"面积图是在折线图的基础上，将折线与坐标轴之间的区域进行填充，用于强调数量的变化趋势。面积图可以更好地展示趋势变化中的峰谷，使用填充区域的视觉效果，强调数量随时间变化的程度。",paraId:0,tocIndex:0},{value:"面积图特别适合展示连续的时间序列数据，可以直观地表达数据变化的趋势，同时通过面积的视觉效果，强调总量在某个区间内的变化情况。",paraId:1,tocIndex:0},{value:"当需要同时展示多个序列的数据时，可以使用堆叠面积图或者百分比堆叠面积图，用于比较各个类别的数据在总数中的占比及其随时间的变化。",paraId:2,tocIndex:0},{value:"英文名",paraId:3,tocIndex:0},{value:"：Area Chart, Area Graph",paraId:3,tocIndex:0},{value:"图表类型",paraId:4,tocIndex:2},{value:"基础面积图",paraId:4,tocIndex:2},{value:"适合的数据",paraId:4,tocIndex:2},{value:"时间序列数据：一个有序/连续数据字段（通常是时间）、一个连续数据字段",paraId:4,tocIndex:2},{value:"功能",paraId:4,tocIndex:2},{value:"展示数据随时间或有序维度的变化趋势",paraId:4,tocIndex:2},{value:"数据与图形的映射",paraId:4,tocIndex:2},{value:"时间字段映射到横轴的位置",paraId:4,tocIndex:2},{value:"数值字段映射到纵轴的高度",paraId:4,tocIndex:2},{value:"面积填充强调数据变化的程度",paraId:4,tocIndex:2},{value:"适合的场景",paraId:4,tocIndex:2},{value:"单一数据系列随时间的变化趋势",paraId:4,tocIndex:2},{value:"图表类型",paraId:5,tocIndex:3},{value:"堆叠面积图",paraId:5,tocIndex:3},{value:"适合的数据",paraId:5,tocIndex:3},{value:"多序列时间数据：一个有序/连续数据字段（通常是时间）、一个连续数据字段、一个分类数据字段",paraId:5,tocIndex:3},{value:"功能",paraId:5,tocIndex:3},{value:"展示多个数据系列随时间变化的趋势及其叠加总量",paraId:5,tocIndex:3},{value:"数据与图形的映射",paraId:5,tocIndex:3},{value:"时间字段映射到横轴的位置",paraId:5,tocIndex:3},{value:"数值字段映射到纵轴的高度",paraId:5,tocIndex:3},{value:"分类字段映射到不同的颜色和堆叠区域",paraId:5,tocIndex:3},{value:"适合的场景",paraId:5,tocIndex:3},{value:"多数据系列及其总量随时间的变化趋势对比",paraId:5,tocIndex:3},{value:"例子 1: ",paraId:6,tocIndex:5},{value:"适合展示连续时间序列的趋势",paraId:6,tocIndex:5},{value:"下图是一个股票价格走势的面积图，展示了某公司股票价格随时间的变化趋势。",paraId:7,tocIndex:5},{value:"date（日期）",paraId:8,tocIndex:5},{value:"close（收盘价）",paraId:8,tocIndex:5},{value:"2015/1/5",paraId:8,tocIndex:5},{value:"121.73",paraId:8,tocIndex:5},{value:"2015/1/6",paraId:8,tocIndex:5},{value:"115.07",paraId:8,tocIndex:5},{value:"2015/1/7",paraId:8,tocIndex:5},{value:"116.75",paraId:8,tocIndex:5},{value:"...",paraId:8,tocIndex:5},{value:"...",paraId:8,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/aapl.json',\n    transform: [\n      {\n        type: 'map',\n        callback: (d) => ({\n          ...d,\n          date: new Date(d.date),\n        }),\n      },\n    ],\n  },\n  encode: { x: 'date', y: 'close' },\n  axis: {\n    x: {\n      title: null,\n    },\n    y: {\n      title: null,\n    },\n  },\n  children: [\n    {\n      type: 'area',\n      style: {\n        fill: 'l(270) 0:#ffffff 0.5:#7ec2f3 1:#1890ff',\n        fillOpacity: 0.6,\n      },\n    },\n    {\n      type: 'line',\n      style: {\n        lineWidth: 2,\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:9,tocIndex:5},{value:"说明",paraId:10,tocIndex:5},{value:" ：",paraId:10,tocIndex:5},{value:"date",paraId:11,tocIndex:5},{value:" 字段，映射到横轴的位置，表示时间的先后顺序",paraId:11,tocIndex:5},{value:"close",paraId:11,tocIndex:5},{value:" 字段，映射到纵轴的高度和填充面积，展示了价格随时间的变化趋势",paraId:11,tocIndex:5},{value:"同时使用面积填充和线条，增强了视觉效果，方便观察变化趋势",paraId:11,tocIndex:5},{value:"例子 2: ",paraId:12,tocIndex:5},{value:"适合展示多个数据系列的堆叠趋势",paraId:12,tocIndex:5},{value:"堆叠面积图可以同时展示多个数据系列随时间的变化，以及它们的总和趋势。下图展示了不同行业失业人数的变化趋势。",paraId:13,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'area',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/unemployment-by-industry.json',\n  },\n  encode: {\n    x: (d) => new Date(d.date),\n    y: 'unemployed',\n    color: 'industry',\n  },\n  transform: [\n    {\n      type: 'stackY',\n    },\n  ],\n  axis: {\n    x: {\n      title: null,\n    },\n    y: {\n      title: null,\n    },\n  },\n});\n\nchart.render();\n",paraId:14,tocIndex:5},{value:"说明",paraId:15,tocIndex:5},{value:"：",paraId:15,tocIndex:5},{value:"date",paraId:16,tocIndex:5},{value:" 字段映射到横轴，表示时间维度",paraId:16,tocIndex:5},{value:"unemployed",paraId:16,tocIndex:5},{value:" 字段映射到纵轴，表示失业人数",paraId:16,tocIndex:5},{value:"industry",paraId:16,tocIndex:5},{value:" 字段映射到颜色，区分不同行业",paraId:16,tocIndex:5},{value:"使用 ",paraId:16,tocIndex:5},{value:"stackY",paraId:16,tocIndex:5},{value:" 转换将各系列数据堆叠显示",paraId:16,tocIndex:5},{value:"例子 3: ",paraId:17,tocIndex:5},{value:"百分比堆叠面积图展示占比变化",paraId:17,tocIndex:5},{value:"当需要展示各类别在总体中的占比随时间的变化时，百分比堆叠面积图是非常合适的选择。",paraId:18,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'area',\n  autoFit: true,\n  data: [\n    { country: 'Asia', year: '1750', value: 502 },\n    { country: 'Asia', year: '1800', value: 635 },\n    { country: 'Asia', year: '1850', value: 809 },\n    { country: 'Asia', year: '1900', value: 947 },\n    { country: 'Asia', year: '1950', value: 1402 },\n    { country: 'Asia', year: '1999', value: 3634 },\n    { country: 'Asia', year: '2050', value: 5268 },\n    { country: 'Africa', year: '1750', value: 106 },\n    { country: 'Africa', year: '1800', value: 107 },\n    { country: 'Africa', year: '1850', value: 111 },\n    { country: 'Africa', year: '1900', value: 133 },\n    { country: 'Africa', year: '1950', value: 221 },\n    { country: 'Africa', year: '1999', value: 767 },\n    { country: 'Africa', year: '2050', value: 1766 },\n    { country: 'Europe', year: '1750', value: 163 },\n    { country: 'Europe', year: '1800', value: 203 },\n    { country: 'Europe', year: '1850', value: 276 },\n    { country: 'Europe', year: '1900', value: 408 },\n    { country: 'Europe', year: '1950', value: 547 },\n    { country: 'Europe', year: '1999', value: 729 },\n    { country: 'Europe', year: '2050', value: 628 },\n  ],\n  encode: { x: 'year', y: 'value', color: 'country' },\n  transform: [{ type: 'stackY' }, { type: 'normalizeY' }],\n  axis: {\n    x: {\n      title: null,\n    },\n    y: {\n      title: null,\n      labelFormatter: '.0%',\n    },\n  },\n});\n\nchart.render();\n",paraId:19,tocIndex:5},{value:"说明",paraId:20,tocIndex:5},{value:"：",paraId:20,tocIndex:5},{value:"组合使用 ",paraId:21,tocIndex:5},{value:"stackY",paraId:21,tocIndex:5},{value:" 和 ",paraId:21,tocIndex:5},{value:"normalizeY",paraId:21,tocIndex:5},{value:" 转换，将堆叠数据标准化为百分比",paraId:21,tocIndex:5},{value:"纵轴格式化为百分比显示，更直观地表示各区域的占比变化",paraId:21,tocIndex:5},{value:"例子 1: ",paraId:22,tocIndex:6},{value:"不适合比较精确的单一数值",paraId:22,tocIndex:6},{value:"面积图通过填充区域的方式展示数据变化，不适合用于需要精确比较单一数值的场景。如果主要目的是比较不同类别的具体数值，柱状图或条形图会是更好的选择。",paraId:23,tocIndex:6},{value:"例子 2: ",paraId:24,tocIndex:6},{value:"数据波动剧烈时可能造成视觉混乱",paraId:24,tocIndex:6},{value:"当多个数据系列波动剧烈且交叉频繁时，使用堆叠面积图可能会导致视觉混乱，难以辨别各个系列的具体变化趋势。这种情况下，可以考虑使用多条折线图或小型多图表示。",paraId:25,tocIndex:6},{value:"区间面积图可以表示数据的上下限范围，通常用于表示数据的不确定性或波动范围。",paraId:26,tocIndex:8},{value:"/**\n * A recreation of this demo: https://www.anychart.com/zh/products/anychart/gallery/Combined_Charts/Range_Spline-Area,_Spline_and_Marker_Chart.php\n */\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/range-spline-area.json',\n    transform: [\n      {\n        type: 'map',\n        callback: ([x, low, high, v2, v3]) => ({\n          x,\n          low,\n          high,\n          v2,\n          v3,\n        }),\n      },\n    ],\n  },\n  scale: { x: { type: 'linear', tickCount: 10 } },\n  axis: { y: { title: false } },\n  children: [\n    {\n      type: 'area',\n      encode: { x: 'x', y: ['low', 'high'], shape: 'smooth' },\n      style: { fillOpacity: 0.65, fill: '#64b5f6', lineWidth: 1 },\n    },\n    {\n      type: 'point',\n      encode: { x: 'x', y: 'v2', size: 2, shape: 'point' },\n      tooltip: { items: ['v2'] },\n    },\n    {\n      type: 'line',\n      encode: { x: 'x', y: 'v3', color: '#FF6B3B', shape: 'smooth' },\n    },\n  ],\n});\n\nchart.render();\n",paraId:27,tocIndex:8},{value:"说明",paraId:28,tocIndex:8},{value:"：",paraId:28,tocIndex:8},{value:"使用 ",paraId:29,tocIndex:8},{value:"'y', ['low', 'high']",paraId:29,tocIndex:8},{value:" 指定区间的上下界",paraId:29,tocIndex:8},{value:"数据区间使用透明度较低的填充色，突出显示不确定性范围",paraId:29,tocIndex:8},{value:"差分面积图用于比较两个数据系列，突出它们之间的差异区域。",paraId:30,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'area',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/temperature-compare.json',\n    transform: [\n      {\n        type: 'fold',\n        fields: ['New York', 'San Francisco'],\n        key: 'city',\n        value: 'temperature',\n      },\n    ],\n  },\n  transform: [{ type: 'diffY' }],\n  encode: {\n    x: (d) => new Date(d.date),\n    y: 'temperature',\n    color: 'city',\n  },\n  scale: {\n    color: {\n      range: ['#67a9cf', '#ef8a62'],\n    },\n  },\n  axis: {\n    y: { title: null },\n    x: { title: null },\n  },\n});\n\nchart.render();\n",paraId:31,tocIndex:9},{value:"说明",paraId:32,tocIndex:9},{value:"：",paraId:32,tocIndex:9},{value:"使用 ",paraId:33,tocIndex:9},{value:"transform: [{ type: 'diffY' }]",paraId:33,tocIndex:9},{value:" 实现差分效果",paraId:33,tocIndex:9},{value:"颜色编码区分了两个数据系列，并突出了它们的差异区域",paraId:33,tocIndex:9},{value:"折线图",paraId:34,tocIndex:10},{value:"面积图和折线图都适合展示连续数据的变化趋势",paraId:35,tocIndex:11},{value:"面积图通过填充区域强调数量的视觉效果，更适合展示总量变化",paraId:35,tocIndex:11},{value:"折线图更适合展示准确的变化轨迹和多条数据线的比较",paraId:35,tocIndex:11},{value:"柱状图",paraId:36,tocIndex:11},{value:"饼图",paraId:37,tocIndex:11},{value:"面积图侧重展示随时间变化的趋势和总量，强调变化过程",paraId:38,tocIndex:12},{value:"柱状图侧重于不同分类之间数值大小的比较，强调对比关系",paraId:38,tocIndex:12},{value:"饼图侧重展示在特定时间点上的占比关系，而非随时间的变化",paraId:38,tocIndex:12},{value:"堆叠面积图",paraId:39,tocIndex:12},{value:"基础面积图适合单一数据系列的趋势展示",paraId:40,tocIndex:13},{value:"堆叠面积图适合多数据系列及其总和的展示",paraId:40,tocIndex:13}]},76979:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(45294);const t=[{value:"典型的柱状图（又名条形图），使用垂直或水平的柱子显示类别之间的数值比较。其中一个轴表示需要对比的分类维度，另一个轴代表相应的数值。",paraId:0,tocIndex:0},{value:"柱状图有别于",paraId:1,tocIndex:0},{value:"直方图",paraId:2,tocIndex:0},{value:"，柱状图无法显示数据在一个区间内的连续变化趋势。柱状图描述的是分类数据，回答的是每一个分类中“有多少？”这个问题。",paraId:1,tocIndex:0},{value:"需要注意的是，当柱状图显示的分类很多时会导致分类名层叠等显示问题，下面我们会举例说明。",paraId:3,tocIndex:0},{value:"英文名",paraId:4,tocIndex:0},{value:"：Column chart, Bar chart",paraId:4,tocIndex:0},{value:"图表类型",paraId:5,tocIndex:2},{value:"纵向柱状图",paraId:5,tocIndex:2},{value:"适合的数据",paraId:5,tocIndex:2},{value:"列表：一个分类数据字段、一个连续数据字段",paraId:5,tocIndex:2},{value:"功能",paraId:5,tocIndex:2},{value:"对比分类数据的数值大小",paraId:5,tocIndex:2},{value:"数据与图形的映射",paraId:5,tocIndex:2},{value:"分类数据字段映射到横轴的位置",paraId:5,tocIndex:2},{value:"连续数据字段映射到矩形的高度 ",paraId:5,tocIndex:2},{value:"分类数据也可以设置颜色增强分类的区分度",paraId:5,tocIndex:2},{value:"适合的数据条数",paraId:5,tocIndex:2},{value:"不超过 12 条数据",paraId:5,tocIndex:2},{value:"图表类型",paraId:6,tocIndex:3},{value:"横向柱状图",paraId:6,tocIndex:3},{value:"适合的数据",paraId:6,tocIndex:3},{value:"列表：一个分类数据字段、一个连续数据字段",paraId:6,tocIndex:3},{value:"功能",paraId:6,tocIndex:3},{value:"对比分类数据的数值大小",paraId:6,tocIndex:3},{value:"数据与图形的映射",paraId:6,tocIndex:3},{value:"分类数据字段映射到纵轴的位置",paraId:6,tocIndex:3},{value:"连续数据字段映射到矩形的宽度",paraId:6,tocIndex:3},{value:"适合的数据条数",paraId:6,tocIndex:3},{value:"不超过 30 条数据",paraId:6,tocIndex:3},{value:"例子 1: ",paraId:7,tocIndex:5},{value:"适合应用到分类数据对比",paraId:7,tocIndex:5},{value:"下图是一个游戏销量的图表，展示不同游戏类型的销量对比。",paraId:8,tocIndex:5},{value:"genre（游戏类型）",paraId:9,tocIndex:5},{value:"sold（销售量）",paraId:9,tocIndex:5},{value:"Sports",paraId:9,tocIndex:5},{value:"27,500",paraId:9,tocIndex:5},{value:"Strategy",paraId:9,tocIndex:5},{value:"11,500",paraId:9,tocIndex:5},{value:"Action",paraId:9,tocIndex:5},{value:"6,000",paraId:9,tocIndex:5},{value:"Shooter",paraId:9,tocIndex:5},{value:"3,500",paraId:9,tocIndex:5},{value:"Other",paraId:9,tocIndex:5},{value:"1,500",paraId:9,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n      region: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:10,tocIndex:5},{value:"说明",paraId:11,tocIndex:5},{value:" ：",paraId:11,tocIndex:5},{value:"genre",paraId:12,tocIndex:5},{value:" 字段，同时使用了",paraId:12,tocIndex:5},{value:"位置",paraId:12,tocIndex:5},{value:"和",paraId:12,tocIndex:5},{value:"颜色",paraId:12,tocIndex:5},{value:"用于区分不同的游戏类型",paraId:12,tocIndex:5},{value:"sold",paraId:12,tocIndex:5},{value:" 字段，使用矩形的",paraId:12,tocIndex:5},{value:"长度",paraId:12,tocIndex:5},{value:"，表示销售量的大小",paraId:12,tocIndex:5},{value:"例子 1: ",paraId:13,tocIndex:6},{value:"分类太多不适合使用纵向柱状图",paraId:13,tocIndex:6},{value:"如对比不同省份的人口数量。分类情况过多时，柱状图的文本为了排布合理，需要进行旋转，不利于阅读，相比于纵向柱状图，横向柱状图更适用于此类分类较多的场景。",paraId:14,tocIndex:6},{value:"province（省份）",paraId:15,tocIndex:6},{value:"population（人口数量）",paraId:15,tocIndex:6},{value:"北京市",paraId:15,tocIndex:6},{value:"19,612,368",paraId:15,tocIndex:6},{value:"天津市",paraId:15,tocIndex:6},{value:"12,938,693",paraId:15,tocIndex:6},{value:"河北省",paraId:15,tocIndex:6},{value:"71,854,210",paraId:15,tocIndex:6},{value:"...",paraId:15,tocIndex:6},{value:"...",paraId:15,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { province: '北京市', population: 19612368 },\n    { province: '天津市', population: 12938693 },\n    { province: '河北省', population: 71854210 },\n    { province: '山西省', population: 27500000 },\n    { province: '内蒙古自治区', population: 24706291 },\n    { province: '辽宁省', population: 43746323 },\n    { province: '吉林省', population: 27452815 },\n    { province: '黑龙江省', population: 38313991 },\n    { province: '上海市', population: 23019196 },\n    { province: '江苏省', population: 78660941 },\n    { province: '浙江省', population: 54426891 },\n    { province: '安徽省', population: 59500468 },\n    { province: '福建省', population: 36894217 },\n    { province: '江西省', population: 44567797 },\n    { province: '山东省', population: 95792719 },\n    { province: '河南省', population: 94029939 },\n    { province: '湖北省', population: 57237727 },\n    { province: '湖南省', population: 65700762 },\n    { province: '广东省', population: 104320459 },\n    { province: '广西壮族自治区', population: 46023761 },\n    { province: '海南省', population: 8671485 },\n    { province: '重庆市', population: 28846170 },\n    { province: '四川省', population: 80417528 },\n    { province: '贵州省', population: 34748556 },\n    { province: '云南省', population: 45966766 },\n    { province: '西藏自治区', population: 3002165 },\n    { province: '陕西省', population: 37327379 },\n    { province: '甘肃省', population: 25575263 },\n    { province: '青海省', population: 5626723 },\n  ],\n  encode: { x: 'province', y: 'population' },\n  axis: {\n    y: {\n      title: null,\n    },\n    x: {\n      title: null,\n      labelFontSize: 12,\n\n      size: 100, // 必须设置 size\n      labelAutoEllipsis: {\n        suffix: '..',\n        minLength: 8,\n        maxLength: 12,\n      },\n      labelAutoWrap: {\n        wordWrapWidth: 80,\n        maxLines: 2,\n        recoverWhenFailed: true,\n      },\n      labelAutoRotate: {\n        optionalAngles: [0, 45, 90], // 尝试旋转 0 度、45 度、90 度\n        recoverWhenFailed: true, // 如果旋转后无法解决问题，恢复到默认角度\n      },\n      labelAutoHide: {\n        keepHeader: true, // 保留第一个刻度值\n        keepTail: true, // 保留最后一个刻度值\n      },\n    },\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n      region: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:16,tocIndex:6},{value:"使用横向柱状图，文本可以横向排布，便于用户的阅读，效果如下：",paraId:17,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { province: '北京市', population: 19612368 },\n    { province: '天津市', population: 12938693 },\n    { province: '河北省', population: 71854210 },\n    { province: '山西省', population: 27500000 },\n    { province: '内蒙古自治区', population: 24706291 },\n    { province: '辽宁省', population: 43746323 },\n    { province: '吉林省', population: 27452815 },\n    { province: '黑龙江省', population: 38313991 },\n    { province: '上海市', population: 23019196 },\n    { province: '江苏省', population: 78660941 },\n    { province: '浙江省', population: 54426891 },\n    { province: '安徽省', population: 59500468 },\n    { province: '福建省', population: 36894217 },\n    { province: '江西省', population: 44567797 },\n    { province: '山东省', population: 95792719 },\n    { province: '河南省', population: 94029939 },\n    { province: '湖北省', population: 57237727 },\n    { province: '湖南省', population: 65700762 },\n    { province: '广东省', population: 104320459 },\n    { province: '广西壮族自治区', population: 46023761 },\n    { province: '海南省', population: 8671485 },\n    { province: '重庆市', population: 28846170 },\n    { province: '四川省', population: 80417528 },\n    { province: '贵州省', population: 34748556 },\n    { province: '云南省', population: 45966766 },\n    { province: '西藏自治区', population: 3002165 },\n    { province: '陕西省', population: 37327379 },\n    { province: '甘肃省', population: 25575263 },\n    { province: '青海省', population: 5626723 },\n  ],\n  encode: { x: 'province', y: 'population' },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  axis: {\n    y: {\n      title: null,\n    },\n    x: {\n      title: null,\n    },\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n      region: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:18,tocIndex:6},{value:"例子 2: ",paraId:19,tocIndex:6},{value:"不适合表示趋势",paraId:19,tocIndex:6},{value:"柱状图使用矩形的长度（宽度）来对比分类数据的大小，非常方便临近的数据进行大小的对比，不适合展示连续数据的趋势。下图本想展示 ACME 这只股票在 2015 年 9 月份整个月的每日的价格走势，但是效果不尽人意。",paraId:20,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { day: '2015/9/1', share: 10 },\n    { day: '2015/9/2', share: 12 },\n    { day: '2015/9/3', share: 11 },\n    { day: '2015/9/4', share: 15 },\n    { day: '2015/9/5', share: 20 },\n    { day: '2015/9/6', share: 22 },\n    { day: '2015/9/7', share: 21 },\n    { day: '2015/9/8', share: 25 },\n    { day: '2015/9/9', share: 31 },\n    { day: '2015/9/10', share: 32 },\n    { day: '2015/9/11', share: 28 },\n    { day: '2015/9/12', share: 29 },\n    { day: '2015/9/13', share: 40 },\n    { day: '2015/9/14', share: 41 },\n    { day: '2015/9/15', share: 45 },\n    { day: '2015/9/16', share: 50 },\n    { day: '2015/9/17', share: 65 },\n    { day: '2015/9/18', share: 45 },\n    { day: '2015/9/19', share: 50 },\n    { day: '2015/9/20', share: 51 },\n    { day: '2015/9/21', share: 65 },\n    { day: '2015/9/22', share: 60 },\n    { day: '2015/9/23', share: 62 },\n    { day: '2015/9/24', share: 65 },\n    { day: '2015/9/25', share: 45 },\n    { day: '2015/9/26', share: 55 },\n    { day: '2015/9/27', share: 59 },\n    { day: '2015/9/28', share: 52 },\n    { day: '2015/9/29', share: 53 },\n    { day: '2015/9/30', share: 40 },\n  ],\n  encode: { x: 'day', y: 'share' },\n  axis: {\n    y: {\n      title: null,\n    },\n    x: {\n      title: null,\n    },\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n      region: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:21,tocIndex:6},{value:"随着有序的时间变化的数值趋势，更适合使用",paraId:22,tocIndex:6},{value:"折线图",paraId:23,tocIndex:6},{value:"或者",paraId:22,tocIndex:6},{value:"面积图",paraId:24,tocIndex:6},{value:"。",paraId:22,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { day: '2015/9/1', share: 10 },\n    { day: '2015/9/2', share: 12 },\n    { day: '2015/9/3', share: 11 },\n    { day: '2015/9/4', share: 15 },\n    { day: '2015/9/5', share: 20 },\n    { day: '2015/9/6', share: 22 },\n    { day: '2015/9/7', share: 21 },\n    { day: '2015/9/8', share: 25 },\n    { day: '2015/9/9', share: 31 },\n    { day: '2015/9/10', share: 32 },\n    { day: '2015/9/11', share: 28 },\n    { day: '2015/9/12', share: 29 },\n    { day: '2015/9/13', share: 40 },\n    { day: '2015/9/14', share: 41 },\n    { day: '2015/9/15', share: 45 },\n    { day: '2015/9/16', share: 50 },\n    { day: '2015/9/17', share: 65 },\n    { day: '2015/9/18', share: 45 },\n    { day: '2015/9/19', share: 50 },\n    { day: '2015/9/20', share: 51 },\n    { day: '2015/9/21', share: 65 },\n    { day: '2015/9/22', share: 60 },\n    { day: '2015/9/23', share: 62 },\n    { day: '2015/9/24', share: 65 },\n    { day: '2015/9/25', share: 45 },\n    { day: '2015/9/26', share: 55 },\n    { day: '2015/9/27', share: 59 },\n    { day: '2015/9/28', share: 52 },\n    { day: '2015/9/29', share: 53 },\n    { day: '2015/9/30', share: 40 },\n  ],\n  encode: { x: 'day', y: 'share' },\n  axis: {\n    y: {\n      title: null,\n    },\n    x: {\n      title: null,\n      tickFilter: (_, i) => i % 2 !== 0, // 过滤 x 轴刻度线，只显示每隔 1 个刻度线\n    },\n  },\n  children: [\n    {\n      type: 'area',\n      style: {\n        opacity: 0.6,\n      },\n    },\n    {\n      type: 'line',\n      style: {\n        lineWidth: 3,\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:25,tocIndex:6},{value:"折线图",paraId:26,tocIndex:7},{value:"饼图",paraId:27,tocIndex:7},{value:"柱状图主要用于多个分类间的数据（大小、数值）的对比",paraId:28,tocIndex:8},{value:"折线图主要用于展示连续数值（例如时间）或者有序分类的变化趋势",paraId:28,tocIndex:8},{value:"饼图主要是展示分类之间的占比情况",paraId:28,tocIndex:8},{value:"南丁格尔图（玫瑰图）通过半径的大小来对比数据",paraId:29,tocIndex:9},{value:"柱状图根据矩形的长度来对比数据",paraId:29,tocIndex:9}]},60262:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(26743);const t=[{value:"双向柱状图（又名正负条形图），使用正向和反向的柱子显示类别之间的数值比较。其中分类轴表示需要对比的分类维度，连续轴代表相应的数值，分为两种情况，一种是正向刻度值与反向刻度值完全对称，另一种是正向刻度值与反向刻度值反向对称，即互为相反数。",paraId:0,tocIndex:0},{value:"英文名",paraId:1,tocIndex:0},{value:"：Bi-Directional Bar,Bi-Directional Column",paraId:1,tocIndex:0},{value:"图表类型",paraId:2,tocIndex:1},{value:"双向柱状图",paraId:2,tocIndex:1},{value:"适合的数据",paraId:2,tocIndex:1},{value:"列表：一个分类数据字段、两个连续数据字段",paraId:2,tocIndex:1},{value:"功能",paraId:2,tocIndex:1},{value:"对比分类数据的数值大小",paraId:2,tocIndex:1},{value:"数据与图形的映射",paraId:2,tocIndex:1},{value:"分类数据字段映射到分类轴的位置；一个连续数据字段映射到正向矩形的长度；另一个连续数据字段映射到反向矩形的长度；正反向数据可以设置颜色或形状(shape)增强区分度；分类数据可以设置颜色增强分类的区分度",paraId:2,tocIndex:1},{value:"适合的数据条数",paraId:2,tocIndex:1},{value:"横向不超过 30 条数据、纵向不超过 12 条数据",paraId:2,tocIndex:1},{value:"例子 1: ",paraId:3,tocIndex:3},{value:"正反分类数据对比",paraId:3,tocIndex:3},{value:"下图是模拟某个公司各个部门对某项任务的完成情况数据的对比图，完成人数使用正向柱状图表示、未完成人数使用反向柱状图表示。",paraId:4,tocIndex:3},{value:"部门",paraId:5,tocIndex:3},{value:"小组",paraId:5,tocIndex:3},{value:"完成人数",paraId:5,tocIndex:3},{value:"未完成人数",paraId:5,tocIndex:3},{value:"部门 0",paraId:5,tocIndex:3},{value:"组名 0",paraId:5,tocIndex:3},{value:"37",paraId:5,tocIndex:3},{value:"9",paraId:5,tocIndex:3},{value:"...",paraId:5,tocIndex:3},{value:"...",paraId:5,tocIndex:3},{value:"...",paraId:5,tocIndex:3},{value:"...",paraId:5,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  { department: '部门 0', group: '组名0', people: 37, type: 'completed' },\n  { department: '部门 0', group: '组名0', people: 9, type: 'uncompleted' },\n  { department: '部门 0', group: '组名1', people: 27, type: 'completed' },\n  { department: '部门 0', group: '组名1', people: 10, type: 'uncompleted' },\n  { department: '部门 1', group: '组名2', people: 37, type: 'completed' },\n  { department: '部门 1', group: '组名2', people: 19, type: 'uncompleted' },\n  { department: '部门 1', group: '组名3', people: 37, type: 'completed' },\n  { department: '部门 1', group: '组名3', people: 29, type: 'uncompleted' },\n  { department: '部门 2', group: '组名4', people: 20, type: 'completed' },\n  { department: '部门 2', group: '组名4', people: 2, type: 'uncompleted' },\n  { department: '部门 2', group: '组名5', people: 40, type: 'completed' },\n  { department: '部门 2', group: '组名5', people: 10, type: 'uncompleted' },\n  { department: '部门 3', group: '组名6', people: 25, type: 'completed' },\n  { department: '部门 3', group: '组名6', people: 3, type: 'uncompleted' },\n  { department: '部门 3', group: '组名7', people: 55, type: 'completed' },\n  { department: '部门 3', group: '组名7', people: 8, type: 'uncompleted' },\n];\n\nconst range = ['#7593ed', '#95e3b0', '#6c7893', '#e7c450', '#7460eb'];\n\nchart.options({\n  type: 'interval',\n  coordinate: { transform: [{ type: 'transpose' }] },\n  autoFit: true,\n  data: data,\n  encode: {\n    x: 'group',\n    y: (d) => (d.type === 'completed' ? d.people : -d.people),\n    color: 'department',\n  },\n\n  scale: {\n    x: { padding: 0.5 },\n    color: {\n      type: 'ordinal',\n      range,\n    },\n  },\n  axis: {\n    x: { title: '' },\n    y: {\n      labelFormatter: (d) => {\n        return Math.abs(d);\n      },\n    },\n  },\n  style: {\n    fill: ({ type }, i, data) => {\n      if (type === 'uncompleted') {\n        return 'transparent';\n      }\n    },\n    stroke: (d, i, data, ...re) => {\n      const { type } = d;\n      if (type === 'uncompleted') {\n        return range[i / 2];\n      }\n    },\n    lineWidth: 2,\n  },\n  tooltip: {\n    title: (d) => {\n      return `${d.department}-${d.group}`;\n    },\n    items: [\n      (d, i, data, column) => ({\n        name: d.type === 'completed' ? '完成' : '未完成',\n        value: d.people,\n      }),\n    ],\n  },\n});\n\nchart.render();\n",paraId:6,tocIndex:3},{value:"说明",paraId:7,tocIndex:3},{value:" ：",paraId:7,tocIndex:3},{value:"使用了",paraId:8,tocIndex:3},{value:"颜色",paraId:8,tocIndex:3},{value:"用于区分不同的部门",paraId:8,tocIndex:3},{value:"使用了",paraId:8,tocIndex:3},{value:"形状",paraId:8,tocIndex:3},{value:"（空心和实心）用于区分完成人数和未完成人数",paraId:8,tocIndex:3},{value:"使用了",paraId:8,tocIndex:3},{value:"位置",paraId:8,tocIndex:3},{value:"用于区分不同小组",paraId:8,tocIndex:3},{value:"双向柱状图不适合不含相反含义的数据",paraId:9,tocIndex:4},{value:"例子 1: ",paraId:10,tocIndex:5},{value:"层叠双向柱状图",paraId:10,tocIndex:5},{value:"下图展示了不同类型的人群对某个问题的同意程度的统计数据，分为非常不同意、不同意、没意见、同意和非常同意五种程度，其中非常不同意、不同意和没意见作为反向柱状图，不同程度用不同颜色来表示。",paraId:11,tocIndex:5},{value:"虚构数据",paraId:11,tocIndex:5},{value:"type",paraId:12,tocIndex:5},{value:"Strongly agree",paraId:12,tocIndex:5},{value:"Agree",paraId:12,tocIndex:5},{value:"Neither agree nor disagree",paraId:12,tocIndex:5},{value:"Disagree",paraId:12,tocIndex:5},{value:"Strongly disagree",paraId:12,tocIndex:5},{value:"Question 1",paraId:12,tocIndex:5},{value:"11.7",paraId:12,tocIndex:5},{value:"59.9",paraId:12,tocIndex:5},{value:"18.5",paraId:12,tocIndex:5},{value:"9.1",paraId:12,tocIndex:5},{value:"0.7",paraId:12,tocIndex:5},{value:"...",paraId:12,tocIndex:5},{value:"...",paraId:12,tocIndex:5},{value:"...",paraId:12,tocIndex:5},{value:"...",paraId:12,tocIndex:5},{value:"...",paraId:12,tocIndex:5},{value:"...",paraId:12,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst types = [\n  'Strongly disagree',\n  'Disagree',\n  'Neither agree nor disagree',\n  'Agree',\n  'Strongly agree',\n];\nconst colors = ['#c30d24', '#f3a583', '#cccccc', '#94c6da', '#1770ab'];\n\nchart.options({\n  type: 'interval',\n  coordinate: { transform: [{ type: 'transpose' }] },\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/82c97016-0f99-433b-ab21-9ecf14244610.csv',\n  },\n  transform: [{ type: 'stackY' }],\n  encode: {\n    x: 'question',\n    y: (d) =>\n      d.type === 'Disagree' || d.type === 'Strongly disagree'\n        ? -d.percentage\n        : d.type === 'Neither agree nor disagree'\n        ? -d.percentage / 2\n        : +d.percentage,\n    color: 'type',\n  },\n\n  scale: {\n    x: { padding: 0.5 },\n    color: { domain: types, range: colors },\n  },\n  axis: {\n    x: { title: '' },\n    y: {\n      labelFormatter: (d) => {\n        return Math.abs(d);\n      },\n    },\n  },\n\n  tooltip: {\n    items: [\n      (d, i, data, column) => ({\n        name: d.type,\n        value: d.percentage,\n      }),\n    ],\n  },\n});\n\nchart.render();\n",paraId:13,tocIndex:5},{value:"说明",paraId:14,tocIndex:5},{value:" ：",paraId:14,tocIndex:5},{value:"使用了",paraId:15,tocIndex:5},{value:"颜色",paraId:15,tocIndex:5},{value:"用于区分不同程度",paraId:15,tocIndex:5},{value:"使用了",paraId:15,tocIndex:5},{value:"位置",paraId:15,tocIndex:5},{value:"用于区分不同问题",paraId:15,tocIndex:5},{value:"柱状图",paraId:16,tocIndex:6},{value:"柱状图只能绘制在同一个坐标轴内，每个柱子只能表示一个数据",paraId:17,tocIndex:7},{value:"双向柱状图包含正向和反向两个坐标轴，每个柱子可以表示一个正向数据和一个反向数据",paraId:17,tocIndex:7}]},65964:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(68796);const t=[{value:"箱形图（Box Plot），又称盒须图、盒式图或箱线图，是一种用于展示一组数据分布情况的统计图表。它能够显示数据的五个重要统计量：最小值、下四分位数（Q1）、中位数（Q2）、上四分位数（Q3）和最大值，同时可以清楚地识别出数据中的异常值。",paraId:0,tocIndex:0},{value:"箱形图的设计简洁明了，通过箱体和须线的组合，可以快速了解数据的集中趋势、离散程度和偏态分布，是统计分析和数据探索中的重要工具。",paraId:1,tocIndex:0},{value:"英文名",paraId:2,tocIndex:0},{value:"：Box Plot, Box-and-Whisker Plot",paraId:2,tocIndex:0},{value:"其他名称",paraId:3,tocIndex:0},{value:"：盒须图、盒式图、箱线图",paraId:3,tocIndex:0},{value:"图表类型",paraId:4,tocIndex:2},{value:"箱形图",paraId:4,tocIndex:2},{value:"适合的数据",paraId:4,tocIndex:2},{value:"一个分类数据字段、一个连续数据字段",paraId:4,tocIndex:2},{value:"功能",paraId:4,tocIndex:2},{value:"展示数据分布情况，识别异常值，比较不同分组的数据分布",paraId:4,tocIndex:2},{value:"数据与图形的映射",paraId:4,tocIndex:2},{value:"分类数据字段映射到横轴位置",paraId:4,tocIndex:2},{value:"连续数据字段自动计算统计值映射到箱体各部分",paraId:4,tocIndex:2},{value:"异常值显示为散点",paraId:4,tocIndex:2},{value:"适合的数据条数",paraId:4,tocIndex:2},{value:"每个分组建议至少有 5-10 个数据点",paraId:4,tocIndex:2},{value:"箱形图的主要组成部分包括：",paraId:5,tocIndex:2},{value:"箱体",paraId:6,tocIndex:2},{value:"：从下四分位数（Q1）到上四分位数（Q3）的矩形区域，包含了中间 50%的数据",paraId:6,tocIndex:2},{value:"中位线",paraId:6,tocIndex:2},{value:"：箱体内部的水平线，表示数据的中位数（Q2）",paraId:6,tocIndex:2},{value:"须线",paraId:6,tocIndex:2},{value:"：从箱体延伸出的线段，通常延伸到 1.5 倍四分位距（IQR）范围内的最远数据点",paraId:6,tocIndex:2},{value:"异常值",paraId:6,tocIndex:2},{value:"：超出须线范围的数据点，以单独的点标记显示",paraId:6,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'boxplot',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/morley.json',\n  },\n  encode: {\n    x: 'Expt',\n    y: 'Speed',\n  },\n  style: {\n    boxFill: '#1890ff',\n    boxFillOpacity: 0.3,\n    pointStroke: '#f5222d',\n    pointR: 3,\n  },\n});\n\nchart.render();\n",paraId:7,tocIndex:2},{value:"场景 1：数据分布分析",paraId:8,tocIndex:4},{value:"箱形图是分析数据分布的理想工具，能够快速识别数据的集中趋势、离散程度和偏态分布。",paraId:9,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'boxplot',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n  },\n  encode: {\n    x: 'species',\n    y: 'flipper_length_mm',\n    color: 'species',\n  },\n  axis: {\n    y: {\n      title: '鳍长 (mm)',\n    },\n    x: {\n      title: '企鹅种类',\n    },\n  },\n});\n\nchart.render();\n",paraId:10,tocIndex:4},{value:"场景 2：异常值检测",paraId:11,tocIndex:4},{value:"箱形图能够直观地显示数据中的异常值，帮助识别需要进一步调查的数据点。",paraId:12,tocIndex:4},{value:"场景 3：多组数据比较",paraId:13,tocIndex:4},{value:"通过并排显示多个箱形图，可以有效地比较不同组别间的数据分布差异。",paraId:14,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'boxplot',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n  },\n  encode: {\n    x: 'species',\n    y: 'flipper_length_mm',\n    color: 'sex',\n    series: 'sex',\n  },\n  axis: {\n    y: {\n      title: '鳍长 (mm)',\n    },\n    x: {\n      title: '企鹅种类',\n    },\n  },\n});\n\nchart.render();\n",paraId:15,tocIndex:4},{value:"场景 1：数据量过少",paraId:16,tocIndex:5},{value:"当每个分组的数据点少于 5 个时，箱形图的统计意义不大，建议使用散点图或条形图。",paraId:17,tocIndex:5},{value:"场景 2：展示精确数值",paraId:18,tocIndex:5},{value:"箱形图侧重于显示数据分布的整体特征，不适合需要精确数值的场景，此时应使用表格或条形图。",paraId:19,tocIndex:5},{value:"场景 3：时间序列分析",paraId:20,tocIndex:5},{value:"对于时间序列数据的趋势分析，",paraId:21,tocIndex:5},{value:"折线图",paraId:22,tocIndex:5},{value:"或",paraId:21,tocIndex:5},{value:"面积图",paraId:23,tocIndex:5},{value:"更为合适。",paraId:21,tocIndex:5},{value:"通过设置不同的颜色和系列，可以在同一图表中比较多个维度的数据分布。",paraId:24,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'boxplot',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n  },\n  encode: {\n    x: 'species',\n    y: 'body_mass_g',\n    color: 'sex',\n    series: 'sex',\n  },\n  axis: {\n    y: {\n      title: '体重 (g)',\n    },\n    x: {\n      title: '企鹅种类',\n    },\n  },\n});\n\nchart.render();\n",paraId:25,tocIndex:7},{value:"当分类标签过长时，可以使用横向箱形图来提高可读性。",paraId:26,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'boxplot',\n  coordinate: { transform: [{ type: 'transpose' }] },\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/morley.json',\n    transform: [{ type: 'filter', callback: (d) => d.Expt <= 3 }],\n  },\n  encode: {\n    x: 'Expt',\n    y: 'Speed',\n    color: 'Expt',\n  },\n  axis: {\n    x: {\n      title: '光速测量值',\n    },\n    y: {\n      title: '实验编号',\n    },\n  },\n});\n\nchart.render();\n",paraId:27,tocIndex:8},{value:"在某些场景下，可以隐藏异常点，只关注数据的整体分布。",paraId:28,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'boxplot',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/morley.json',\n  },\n  encode: {\n    x: 'Expt',\n    y: 'Speed',\n  },\n  style: {\n    point: false,\n    boxFill: '#52c41a',\n    boxFillOpacity: 0.4,\n  },\n  axis: {\n    y: {\n      title: '光速测量值',\n    },\n    x: {\n      title: '实验编号',\n    },\n  },\n});\n\nchart.render();\n",paraId:29,tocIndex:9},{value:"直方图",paraId:30,tocIndex:10},{value:"箱形图主要展示数据的统计摘要（五数概括），适合快速比较多个分组",paraId:31,tocIndex:11},{value:"直方图展示数据的具体分布形状，适合单个变量的分布分析",paraId:31,tocIndex:11},{value:"柱状图",paraId:32,tocIndex:11},{value:"箱形图适合展示数据的分布情况和统计特征",paraId:33,tocIndex:12},{value:"柱状图主要用于比较不同分类的数值大小",paraId:33,tocIndex:12},{value:"散点图",paraId:34,tocIndex:12},{value:"箱形图适合展示分组数据的分布概览",paraId:35,tocIndex:13},{value:"散点图适合展示具体数据点的分布和相关关系",paraId:35,tocIndex:13}]},55784:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(95673);const t=[{value:"气泡图是一种多变量图表，是散点图的变体，也可以认为是散点图和百分比区域图的组合。",paraId:0,tocIndex:0},{value:"气泡图最基本的用法是使用三个值来确定每个数据序列，和散点图一样，气泡图将两个维度的数据值分别映射为笛卡尔坐标系上的坐标点，其中 X 和 Y 轴分别代表不同的两个维度的数据，但是不同于散点图的是，气泡图的每个气泡都有分类信息（他们显示在点旁边或者作为图例）。每一个气泡的面积代表第三个数值数据。另外还可以使用不同的颜色来区分分类数据或者其他的数值数据，或者使用亮度或者透明度。表示时间维度的数据时，可以将时间维度作为直角坐标系中的一个维度，或者结合动画来表现数据随着时间的变化情况。",paraId:1,tocIndex:0},{value:"气泡图通常用于比较和展示不同类别圆点（这里我们称为气泡）之间的关系，通过气泡的位置以及面积大小。从整体上看，气泡图可用于分析数据之间的相关性。",paraId:2,tocIndex:0},{value:"需要注意的是，气泡图的数据大小容量有限，气泡太多会使图表难以阅读。但是可以通过增加一些交互行为弥补：隐藏一些信息，当鼠标点击或者悬浮时显示，或者添加一个选项用于重组或者过滤分组类别。",paraId:3,tocIndex:0},{value:"另外，",paraId:4,tocIndex:0},{value:"气泡的大小是映射到面积而不是半径或者直径绘制的",paraId:4,tocIndex:0},{value:"。因为如果是基于半径或者直径的话，圆的大小不仅会呈指数级变化，而且还会导致视觉误差。",paraId:4,tocIndex:0},{value:"英文名",paraId:5,tocIndex:0},{value:"：Bubble Chart",paraId:5,tocIndex:0},{value:"图表类型",paraId:6,tocIndex:2},{value:"基础气泡图",paraId:6,tocIndex:2},{value:"适合的数据",paraId:6,tocIndex:2},{value:"多维度数据：至少两个连续型数据字段（X、Y 轴）和一个数值型数据字段（气泡大小）",paraId:6,tocIndex:2},{value:"功能",paraId:6,tocIndex:2},{value:"展示多个变量之间的关系，发现数据模式和相关性",paraId:6,tocIndex:2},{value:"数据与图形的映射",paraId:6,tocIndex:2},{value:"两个连续变量映射到 XY 坐标",paraId:6,tocIndex:2},{value:"第三个变量映射到气泡的大小",paraId:6,tocIndex:2},{value:"可选的分类型变量映射到气泡的颜色或形状",paraId:6,tocIndex:2},{value:"适合的数据条数",paraId:6,tocIndex:2},{value:"通常不超过 100 个数据点，过多会导致图表拥挤",paraId:6,tocIndex:2},{value:"视觉设计建议",paraId:6,tocIndex:2},{value:"使用半透明气泡避免重叠遮挡",paraId:6,tocIndex:2},{value:"气泡大小范围应适中，避免过大或过小",paraId:6,tocIndex:2},{value:"添加网格线辅助阅读坐标值",paraId:6,tocIndex:2},{value:"图表类型",paraId:7,tocIndex:3},{value:"对数气泡图",paraId:7,tocIndex:3},{value:"适合的数据",paraId:7,tocIndex:3},{value:"数值范围差异极大的数据集，需要对数变换来展示",paraId:7,tocIndex:3},{value:"功能",paraId:7,tocIndex:3},{value:"处理数据跨度很大的情况，如人口数据、GDP 数据等",paraId:7,tocIndex:3},{value:"数据与图形的映射",paraId:7,tocIndex:3},{value:"与基础气泡图相同，但采用对数比例尺",paraId:7,tocIndex:3},{value:"两个连续变量映射到 XY 坐标",paraId:7,tocIndex:3},{value:"第三个变量通过对数映射到气泡的大小",paraId:7,tocIndex:3},{value:"使用场景",paraId:7,tocIndex:3},{value:"当数据出现指数增长或数值范围跨越多个数量级时",paraId:7,tocIndex:3},{value:"实现方法",paraId:7,tocIndex:3},{value:"使用",paraId:7,tocIndex:3},{value:"scale: { size: { type: 'log', range: [4, 20] } }",paraId:7,tocIndex:3},{value:"配置对数比例尺",paraId:7,tocIndex:3},{value:"注意事项",paraId:7,tocIndex:3},{value:"应在图例或标签中明确指出使用了对数变换，避免误导读者",paraId:7,tocIndex:3},{value:"气泡图最适合用于以下几类场景：",paraId:8,tocIndex:5},{value:"多维数据分析",paraId:9,tocIndex:5},{value:" - 当需要同时分析三个或更多变量之间的关系",paraId:9,tocIndex:5},{value:"比较特征聚类",paraId:9,tocIndex:5},{value:" - 发现数据中的分组模式和异常值",paraId:9,tocIndex:5},{value:"资源分配可视化",paraId:9,tocIndex:5},{value:" - 展示多维度指标下的资源分布",paraId:9,tocIndex:5},{value:"风险与机会分析",paraId:9,tocIndex:5},{value:" - 同时考虑多个因素的决策辅助",paraId:9,tocIndex:5},{value:"经济与人口健康指标分析",paraId:10},{value:"下图展示了不同国家人均 GDP、预期寿命与人口数量的关系，同时用颜色区分了不同大洲，有效地在一个图表中展现了四个维度的数据。",paraId:11,tocIndex:6},{value:"country（国家）",paraId:12,tocIndex:6},{value:"GDP（人均 GDP）",paraId:12,tocIndex:6},{value:"lifeExpectancy（预期寿命）",paraId:12,tocIndex:6},{value:"population（人口）",paraId:12,tocIndex:6},{value:"continent（大洲）",paraId:12,tocIndex:6},{value:"China",paraId:12,tocIndex:6},{value:"12547",paraId:12,tocIndex:6},{value:"76.9",paraId:12,tocIndex:6},{value:"1403500365",paraId:12,tocIndex:6},{value:"Asia",paraId:12,tocIndex:6},{value:"United States",paraId:12,tocIndex:6},{value:"59532",paraId:12,tocIndex:6},{value:"78.5",paraId:12,tocIndex:6},{value:"321773631",paraId:12,tocIndex:6},{value:"Americas",paraId:12,tocIndex:6},{value:"India",paraId:12,tocIndex:6},{value:"6427",paraId:12,tocIndex:6},{value:"68.3",paraId:12,tocIndex:6},{value:"1324517249",paraId:12,tocIndex:6},{value:"Asia",paraId:12,tocIndex:6},{value:"Japan",paraId:12,tocIndex:6},{value:"38428",paraId:12,tocIndex:6},{value:"83.9",paraId:12,tocIndex:6},{value:"127141000",paraId:12,tocIndex:6},{value:"Asia",paraId:12,tocIndex:6},{value:"Germany",paraId:12,tocIndex:6},{value:"46136",paraId:12,tocIndex:6},{value:"81.0",paraId:12,tocIndex:6},{value:"82695000",paraId:12,tocIndex:6},{value:"Europe",paraId:12,tocIndex:6},{value:"...",paraId:12,tocIndex:6},{value:"...",paraId:12,tocIndex:6},{value:"...",paraId:12,tocIndex:6},{value:"...",paraId:12,tocIndex:6},{value:"...",paraId:12,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n  },\n  encode: {\n    x: 'GDP',\n    y: 'LifeExpectancy',\n    size: 'Population',\n    color: 'continent',\n    shape: 'point',\n  },\n  scale: {\n    size: { type: 'log', range: [4, 20] },\n  },\n  style: {\n    fillOpacity: 0.3,\n    lineWidth: 1,\n  },\n  legend: {\n    size: false,\n  },\n});\n\nchart.render();\n",paraId:13,tocIndex:6},{value:"分析",paraId:14,tocIndex:6},{value:" ：",paraId:14,tocIndex:6},{value:"GDP",paraId:15,tocIndex:6},{value:" 字段映射到 X 轴，表示国家人均 GDP，可以看出发达国家集中在右侧",paraId:15,tocIndex:6},{value:"LifeExpectancy",paraId:15,tocIndex:6},{value:" 字段映射到 Y 轴，表示国民预期寿命，能够观察到人均 GDP 与预期寿命有正相关性",paraId:15,tocIndex:6},{value:"Population",paraId:15,tocIndex:6},{value:" 字段映射到气泡大小，通过对数比例尺处理，使得中国、印度等人口大国清晰可见",paraId:15,tocIndex:6},{value:"continent",paraId:15,tocIndex:6},{value:" 字段映射到颜色，可以看出不同大洲国家的聚类分布",paraId:15,tocIndex:6},{value:"洞察",paraId:16,tocIndex:6},{value:"：通过此图，我们可以直观地观察到:",paraId:16,tocIndex:6},{value:"经济水平与健康水平的正相关关系",paraId:17,tocIndex:6},{value:"人口规模与经济发展之间并无必然联系",paraId:17,tocIndex:6},{value:"不同大洲国家的发展模式存在差异",paraId:17,tocIndex:6},{value:"例子 1: ",paraId:18,tocIndex:7},{value:"数据点过多或气泡重叠过度",paraId:18,tocIndex:7},{value:"当数据点超过 100 个或气泡严重重叠时，气泡图可能变得混乱难以阅读。在这种情况下，可以考虑使用热力图或分面图表。",paraId:19,tocIndex:7},{value:"以下是一个包含大量数据点的气泡图示例，可以看到随着数据点的增加，气泡之间的重叠让图表变得难以解读：",paraId:20,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\n// 生成200个随机数据点\nconst data = Array.from({ length: 200 }, () => ({\n  x: Math.random() * 100,\n  y: Math.random() * 100,\n  size: Math.random() * 20 + 5,\n  category: ['A', 'B', 'C', 'D'][Math.floor(Math.random() * 4)],\n}));\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data,\n  encode: {\n    x: 'x',\n    y: 'y',\n    size: 'size',\n    color: 'category',\n  },\n  style: {\n    fillOpacity: 0.3,\n    lineWidth: 1,\n  },\n});\n\nchart.render();\n",paraId:21,tocIndex:7},{value:"例子 2: ",paraId:22,tocIndex:7},{value:"只有两个变量需要比较",paraId:22,tocIndex:7},{value:"当只需比较两个变量之间的关系时，散点图比气泡图更简洁有效。气泡图的第三个变量（气泡大小）如果没有必要，反而会增加认知负担。",paraId:23,tocIndex:7},{value:"例子 3: ",paraId:24,tocIndex:7},{value:"展示趋势变化的时序数据",paraId:24,tocIndex:7},{value:"气泡图不适合展示时序趋势数据。对于需要展示随时间变化趋势的数据，折线图或面积图是更好的选择。",paraId:25,tocIndex:7},{value:"下面是一个不使用气泡图而使用折线图展示时序数据的例子：",paraId:26,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { day: '2015/9/1', share: 10, volume: 1200 },\n    { day: '2015/9/5', share: 20, volume: 2100 },\n    { day: '2015/9/10', share: 32, volume: 3400 },\n    { day: '2015/9/15', share: 45, volume: 2900 },\n    { day: '2015/9/20', share: 51, volume: 4100 },\n    { day: '2015/9/25', share: 45, volume: 3800 },\n    { day: '2015/9/30', share: 40, volume: 2700 },\n  ],\n  encode: { x: 'day', y: 'share' },\n  axis: {\n    y: {\n      title: '股价',\n    },\n    x: {\n      title: '日期',\n    },\n  },\n  children: [\n    {\n      type: 'line',\n      style: {\n        lineWidth: 3,\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:27,tocIndex:7},{value:"如果确实需要在时序数据中加入第三个维度的信息，可以使用带有大小编码的时间序列气泡图：",paraId:28,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: [\n    { day: '2015/9/1', share: 10, volume: 1200 },\n    { day: '2015/9/5', share: 20, volume: 2100 },\n    { day: '2015/9/10', share: 32, volume: 3400 },\n    { day: '2015/9/15', share: 45, volume: 2900 },\n    { day: '2015/9/20', share: 51, volume: 4100 },\n    { day: '2015/9/25', share: 45, volume: 3800 },\n    { day: '2015/9/30', share: 40, volume: 2700 },\n  ],\n  encode: {\n    x: 'day',\n    y: 'share',\n    size: 'volume',\n  },\n  scale: {\n    size: { range: [10, 40] },\n  },\n  style: {\n    fillOpacity: 0.6,\n    stroke: '#1890ff',\n    fill: '#1890ff',\n  },\n  axis: {\n    y: { title: '股价' },\n    x: { title: '日期' },\n  },\n});\n\nchart.render();\n",paraId:29,tocIndex:7},{value:"散点图",paraId:30,tocIndex:8},{value:"热力图",paraId:31,tocIndex:8},{value:"图表类型",paraId:32,tocIndex:9},{value:"主要特点",paraId:32,tocIndex:9},{value:"适用场景",paraId:32,tocIndex:9},{value:"数据维度",paraId:32,tocIndex:9},{value:"气泡图",paraId:32,tocIndex:9},{value:"通过点的大小编码额外维度",paraId:32,tocIndex:9},{value:"多变量关系分析",paraId:32,tocIndex:9},{value:"3-4 个变量(X、Y、大小、颜色)",paraId:32,tocIndex:9},{value:"散点图",paraId:32,tocIndex:9},{value:"仅展示点的位置",paraId:32,tocIndex:9},{value:"二维相关性分析",paraId:32,tocIndex:9},{value:"2-3 个变量(X、Y、颜色)",paraId:32,tocIndex:9},{value:"热力图",paraId:32,tocIndex:9},{value:"通过颜色深浅展示密度或量值",paraId:32,tocIndex:9},{value:"展示分布密度",paraId:32,tocIndex:9},{value:"3 个变量(X、Y、颜色强度)",paraId:32,tocIndex:9},{value:"散点地图",paraId:33,tocIndex:9},{value:"气泡地图",paraId:34,tocIndex:9},{value:"图表类型",paraId:35,tocIndex:10},{value:"坐标系统",paraId:35,tocIndex:10},{value:"数据约束",paraId:35,tocIndex:10},{value:"应用场景",paraId:35,tocIndex:10},{value:"气泡图",paraId:35,tocIndex:10},{value:"抽象坐标系",paraId:35,tocIndex:10},{value:"可使用任意数值作为 XY 坐标",paraId:35,tocIndex:10},{value:"多维数据关系可视化",paraId:35,tocIndex:10},{value:"气泡地图",paraId:35,tocIndex:10},{value:"地理坐标系",paraId:35,tocIndex:10},{value:"点位置受地理坐标约束",paraId:35,tocIndex:10},{value:"地理数据中多变量分析",paraId:35,tocIndex:10},{value:"散点地图",paraId:35,tocIndex:10},{value:"地理坐标系",paraId:35,tocIndex:10},{value:"点位置受地理坐标约束",paraId:35,tocIndex:10},{value:"地理位置的简单分布",paraId:35,tocIndex:10},{value:"气泡大小选择",paraId:36,tocIndex:12},{value:"设置合适的气泡大小范围，避免过大导致重叠，或过小导致难以辨认",paraId:37,tocIndex:12},{value:"使用半透明填充色，降低重叠区域的视觉干扰",paraId:37,tocIndex:12},{value:"数据处理",paraId:38,tocIndex:12},{value:"当气泡大小差异过大时，考虑使用对数比例尺",paraId:39,tocIndex:12},{value:"适当筛选数据，避免图表过于拥挤",paraId:39,tocIndex:12},{value:"标签和交互",paraId:40,tocIndex:12},{value:"添加悬停交互，显示详细数据信息",paraId:41,tocIndex:12},{value:"对重要数据点添加标签，但避免标签过多造成混乱",paraId:41,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: [\n    { x: 10, y: 20, size: 20, category: 'A', name: '项目1' },\n    { x: 20, y: 40, size: 35, category: 'A', name: '项目2' },\n    { x: 30, y: 30, size: 15, category: 'B', name: '项目3' },\n    { x: 40, y: 60, size: 40, category: 'B', name: '项目4' },\n    { x: 50, y: 50, size: 25, category: 'C', name: '项目5' },\n  ],\n  encode: {\n    x: 'x',\n    y: 'y',\n    size: 'size',\n    color: 'category',\n    shape: 'point',\n  },\n  style: {\n    fillOpacity: 0.6,\n    lineWidth: 1,\n  },\n  tooltip: {\n    items: [\n      { field: 'name', name: '项目名称' },\n      { field: 'x', name: 'X值' },\n      { field: 'y', name: 'Y值' },\n      { field: 'size', name: '大小' },\n    ],\n  },\n  interaction: [{ type: 'tooltip' }, { type: 'elementHighlight' }],\n});\n\nchart.render();\n",paraId:42,tocIndex:13}]},18876:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(24717);const t=[{value:"注意：G2 5.0 目前不直接支持完整的地图背景功能，本页面主要提供概念介绍。在实际应用中，需要额外引入地图组件和数据。",paraId:0},{value:"带气泡的地图（Bubble Map）是一种在地理地图上使用气泡（圆圈）来表示不同地理位置数据大小的可视化图表。气泡的大小通常表示数值的大小，位置表示地理坐标，颜色可以用来区分不同的分类或表示另一个数值维度。",paraId:1,tocIndex:0},{value:"带气泡的地图比",paraId:2,tocIndex:0},{value:"分级统计图",paraId:3,tocIndex:0},{value:"更适用于比较带地理信息的数据的大小。它的主要缺点是当地图上的气泡过多过大时，气泡间会相互遮盖而影响数据展示，所以在绘制时需要考虑这点。",paraId:2,tocIndex:0},{value:"英文名",paraId:4,tocIndex:0},{value:"：Bubble Map",paraId:4,tocIndex:0},{value:"其他名称",paraId:5,tocIndex:0},{value:"：气泡图地图、地理气泡图",paraId:5,tocIndex:0},{value:"图表类型",paraId:6,tocIndex:2},{value:"带气泡的地图",paraId:6,tocIndex:2},{value:"适合的数据",paraId:6,tocIndex:2},{value:"包含地理坐标（经纬度）的数据和一个或多个数值字段",paraId:6,tocIndex:2},{value:"功能",paraId:6,tocIndex:2},{value:"在地理背景上展示数据的地理分布和数值大小关系",paraId:6,tocIndex:2},{value:"数据与图形的映射",paraId:6,tocIndex:2},{value:"经纬度字段映射到地图位置",paraId:6,tocIndex:2},{value:"数值字段映射到气泡大小",paraId:6,tocIndex:2},{value:"分类字段可映射到颜色",paraId:6,tocIndex:2},{value:"其他数值可映射到颜色深度",paraId:6,tocIndex:2},{value:"适合的数据条数",paraId:6,tocIndex:2},{value:"建议不超过 100 个数据点，避免气泡重叠影响阅读",paraId:6,tocIndex:2},{value:"带气泡的地图的主要组成部分包括：",paraId:7,tocIndex:2},{value:"地理背景",paraId:8,tocIndex:2},{value:"：提供地理坐标系统的地图背景，如世界地图、国家地图等",paraId:8,tocIndex:2},{value:"气泡",paraId:8,tocIndex:2},{value:"：圆形标记，位置表示地理坐标，大小表示数值大小",paraId:8,tocIndex:2},{value:"颜色编码",paraId:8,tocIndex:2},{value:"：用不同颜色区分分类或表示数值范围",paraId:8,tocIndex:2},{value:"图例",paraId:8,tocIndex:2},{value:"：说明气泡大小和颜色的含义",paraId:8,tocIndex:2},{value:"场景 1：地理数据分布分析",paraId:9,tocIndex:4},{value:"带气泡的地图是分析具有地理属性数据的理想工具，能够直观展示数据在地理空间上的分布规律。",paraId:10,tocIndex:4},{value:"场景 2：区域对比分析",paraId:11,tocIndex:4},{value:"通过气泡大小和颜色的对比，可以有效地比较不同地区间的数据差异。",paraId:12,tocIndex:4},{value:"场景 3：多维地理数据展示",paraId:13,tocIndex:4},{value:"带气泡的地图可以同时展示位置、数值大小、分类等多个维度的信息。",paraId:14,tocIndex:4},{value:"场景 1：数据点过多导致重叠",paraId:15,tocIndex:5},{value:"当地图上的数据点过多时，气泡间会相互遮盖，影响数据的清晰展示，此时应考虑使用热力图或点密度图。",paraId:16,tocIndex:5},{value:"场景 2：缺乏地理坐标信息",paraId:17,tocIndex:5},{value:"对于没有经纬度信息的数据，需要先进行地理编码转换，或考虑使用其他图表类型。",paraId:18,tocIndex:5},{value:"场景 3：精确数值展示",paraId:19,tocIndex:5},{value:"带气泡的地图侧重于显示数据的地理分布趋势，不适合需要精确数值的场景，此时应使用表格或其他精确展示方式。",paraId:20,tocIndex:5},{value:"通过设置不同的层级和透明度，可以在同一地图上展示多个数据系列。",paraId:21,tocIndex:7},{value:"结合地理边界数据，提供更丰富的地理背景信息。",paraId:22,tocIndex:8},{value:"通过动画展示气泡随时间的变化。",paraId:23,tocIndex:9},{value:"散点图",paraId:24,tocIndex:10},{value:"带气泡的地图使用地理坐标系统，适合展示地理空间数据",paraId:25,tocIndex:11},{value:"散点图使用笛卡尔坐标系，适合展示两个连续变量的相关关系",paraId:25,tocIndex:11},{value:"分级统计图",paraId:26,tocIndex:11},{value:"带气泡的地图使用气泡大小表示数值，可以精确比较不同地区的数值大小",paraId:27,tocIndex:12},{value:"分级统计图使用颜色深浅表示数值范围，适合展示数据的整体分布模式",paraId:27,tocIndex:12},{value:"点图",paraId:28,tocIndex:12},{value:"带气泡的地图结合了地理信息，位置具有地理意义",paraId:29,tocIndex:13},{value:"普通点图位置仅表示数据维度，不具备地理属性",paraId:29,tocIndex:13},{value:"在 G2 5.0 中，我们可以通过在 ",paraId:30,tocIndex:14},{value:"geoView",paraId:30,tocIndex:14},{value:" 上绘制 ",paraId:30,tocIndex:14},{value:"point",paraId:30,tocIndex:14},{value:" 来实现带气泡的地图。以下是两个实际可用的示例：",paraId:30,tocIndex:14},{value:"基于伦敦地图数据，展示各区域的人口分布情况：",paraId:31,tocIndex:15},{value:"import { Chart } from '@antv/g2';\nimport { feature } from 'topojson-client';\n\nPromise.all([\n  fetch('https://assets.antv.antgroup.com/g2/londonBoroughs.json').then((res) =>\n    res.json(),\n  ),\n  fetch('https://assets.antv.antgroup.com/g2/londonCentroids.json').then(\n    (res) => res.json(),\n  ),\n]).then((values) => {\n  const [londonBoroughs, londonCentroids] = values;\n  const london = feature(\n    londonBoroughs,\n    londonBoroughs.objects.boroughs,\n  ).features;\n\n  // 为中心点数据添加模拟的人口和GDP数据\n  const bubbleData = londonCentroids.map((d, index) => ({\n    ...d,\n    name: d.name || `区域${index + 1}`, // 确保每个数据点都有名称\n    population: Math.floor(Math.random() * 500000) + 100000, // 10万-60万人口\n    gdp: Math.floor(Math.random() * 50000) + 20000, // 2万-7万GDP\n    category: ['商业区', '住宅区', '工业区', '混合区'][\n      Math.floor(Math.random() * 4)\n    ],\n  }));\n\n  const chart = new Chart({\n    container: 'container',\n    autoFit: true,\n  });\n\n  chart.options({\n    type: 'geoView',\n    children: [\n      {\n        type: 'geoPath',\n        data: london,\n        style: {\n          fill: 'lightgray',\n          stroke: 'white',\n          lineWidth: 1,\n        },\n      },\n      {\n        type: 'point',\n        data: bubbleData,\n        encode: {\n          x: 'cx',\n          y: 'cy',\n          size: 'population',\n          color: 'category',\n          shape: 'point',\n        },\n        style: {\n          opacity: 0.7,\n          stroke: 'white',\n          lineWidth: 1,\n        },\n        scale: {\n          size: {\n            range: [4, 30],\n          },\n          color: {\n            range: ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'],\n          },\n        },\n        tooltip: {\n          title: 'name',\n          items: [\n            {\n              name: '人口',\n              channel: 'size',\n              valueFormatter: (value) =>\n                `${value ? value.toLocaleString() : 'N/A'}人`,\n            },\n            {\n              name: 'GDP',\n              field: 'gdp',\n              valueFormatter: (value) =>\n                `${value ? value.toLocaleString() : 'N/A'}万元`,\n            },\n            { name: '类型', field: 'category' },\n          ],\n        },\n      },\n    ],\n  });\n\n  chart.render();\n});\n",paraId:32,tocIndex:15},{value:"展示世界主要城市的 GDP 分布：",paraId:33,tocIndex:16},{value:"import { Chart } from '@antv/g2';\n\n// 全球主要城市数据 - 确保数据完整性\nconst worldCities = [\n  {\n    name: '北京',\n    lng: 116.4074,\n    lat: 39.9042,\n    gdp: 4027,\n    population: 2154,\n    region: '亚洲',\n  },\n  {\n    name: '上海',\n    lng: 121.4737,\n    lat: 31.2304,\n    gdp: 4321,\n    population: 2424,\n    region: '亚洲',\n  },\n  {\n    name: '纽约',\n    lng: -74.0059,\n    lat: 40.7128,\n    gdp: 1700,\n    population: 851,\n    region: '北美',\n  },\n  {\n    name: '洛杉矶',\n    lng: -118.2437,\n    lat: 34.0522,\n    gdp: 710,\n    population: 397,\n    region: '北美',\n  },\n  {\n    name: '伦敦',\n    lng: -0.1276,\n    lat: 51.5074,\n    gdp: 653,\n    population: 898,\n    region: '欧洲',\n  },\n  {\n    name: '东京',\n    lng: 139.6917,\n    lat: 35.6895,\n    gdp: 1617,\n    population: 1396,\n    region: '亚洲',\n  },\n  {\n    name: '巴黎',\n    lng: 2.3522,\n    lat: 48.8566,\n    gdp: 709,\n    population: 1068,\n    region: '欧洲',\n  },\n  {\n    name: '柏林',\n    lng: 13.405,\n    lat: 52.52,\n    gdp: 147,\n    population: 367,\n    region: '欧洲',\n  },\n  {\n    name: '悉尼',\n    lng: 151.2093,\n    lat: -33.8688,\n    gdp: 337,\n    population: 518,\n    region: '大洋洲',\n  },\n  {\n    name: '多伦多',\n    lng: -79.3832,\n    lat: 43.6532,\n    gdp: 324,\n    population: 294,\n    region: '北美',\n  },\n  {\n    name: '首尔',\n    lng: 126.978,\n    lat: 37.5665,\n    gdp: 779,\n    population: 969,\n    region: '亚洲',\n  },\n  {\n    name: '新加坡',\n    lng: 103.8198,\n    lat: 1.3521,\n    gdp: 340,\n    population: 584,\n    region: '亚洲',\n  },\n  {\n    name: '芝加哥',\n    lng: -87.6298,\n    lat: 41.8781,\n    gdp: 689,\n    population: 271,\n    region: '北美',\n  },\n  {\n    name: '法兰克福',\n    lng: 8.6821,\n    lat: 50.1109,\n    gdp: 731,\n    population: 75,\n    region: '欧洲',\n  },\n  {\n    name: '香港',\n    lng: 114.1694,\n    lat: 22.3193,\n    gdp: 365,\n    population: 745,\n    region: '亚洲',\n  },\n  {\n    name: '孟买',\n    lng: 72.8777,\n    lat: 19.076,\n    gdp: 310,\n    population: 1284,\n    region: '亚洲',\n  },\n  {\n    name: '圣保罗',\n    lng: -46.6333,\n    lat: -23.5505,\n    gdp: 430,\n    population: 1252,\n    region: '南美',\n  },\n  {\n    name: '墨西哥城',\n    lng: -99.1332,\n    lat: 19.4326,\n    gdp: 411,\n    population: 912,\n    region: '北美',\n  },\n].map((city) => ({\n  ...city,\n  // 数据验证和格式化\n  name: city.name || '未知城市',\n  lng: typeof city.lng === 'number' ? city.lng : 0,\n  lat: typeof city.lat === 'number' ? city.lat : 0,\n  gdp: typeof city.gdp === 'number' ? city.gdp : 0,\n  population: typeof city.population === 'number' ? city.population : 0,\n  region: city.region || '未知地区',\n}));\n\n// 简化的全球地图轮廓数据\nconst worldOutline = [\n  {\n    type: 'Feature',\n    geometry: {\n      type: 'Polygon',\n      coordinates: [\n        [\n          [-180, -60],\n          [180, -60],\n          [180, 75],\n          [-180, 75],\n          [-180, -60],\n        ],\n      ],\n    },\n  },\n];\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'geoView',\n  children: [\n    {\n      type: 'geoPath',\n      data: worldOutline,\n      style: {\n        fill: '#f0f0f0',\n        stroke: '#d0d0d0',\n        lineWidth: 1,\n      },\n    },\n    {\n      type: 'point',\n      data: worldCities,\n      encode: {\n        x: 'lng',\n        y: 'lat',\n        size: 'gdp',\n        color: 'region',\n        shape: 'point',\n      },\n      style: {\n        opacity: 0.8,\n        stroke: 'white',\n        lineWidth: 2,\n      },\n      scale: {\n        size: {\n          range: [8, 40],\n        },\n        color: {\n          range: [\n            '#1f77b4',\n            '#ff7f0e',\n            '#2ca02c',\n            '#d62728',\n            '#9467bd',\n            '#8c564b',\n          ],\n        },\n      },\n      tooltip: {\n        title: 'name',\n        items: [\n          {\n            name: 'GDP',\n            channel: 'size',\n            valueFormatter: (value) => `${value || 0}亿美元`,\n          },\n          {\n            name: '人口',\n            field: 'population',\n            valueFormatter: (value) => `${value || 0}万人`,\n          },\n          { name: '地区', field: 'region' },\n        ],\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:34,tocIndex:16},{value:"使用 G2 5.0 创建带气泡的地图的关键要素：",paraId:35,tocIndex:17},{value:"使用 geoView",paraId:36,tocIndex:17},{value:": 通过 ",paraId:36,tocIndex:17},{value:"type: 'geoView'",paraId:36,tocIndex:17},{value:" 创建地理坐标系统的视图",paraId:36,tocIndex:17},{value:"point 标记",paraId:36,tocIndex:17},{value:": 在 children 中使用 ",paraId:36,tocIndex:17},{value:"type: 'point'",paraId:36,tocIndex:17},{value:" 来绘制气泡",paraId:36,tocIndex:17},{value:"编码映射",paraId:36,tocIndex:17},{value:":\n",paraId:36,tocIndex:17},{value:"在 ",paraId:37,tocIndex:17},{value:"encode",paraId:37,tocIndex:17},{value:" 对象中映射 ",paraId:37,tocIndex:17},{value:"x",paraId:37,tocIndex:17},{value:", ",paraId:37,tocIndex:17},{value:"y",paraId:37,tocIndex:17},{value:" 到经纬度坐标",paraId:37,tocIndex:17},{value:"size",paraId:37,tocIndex:17},{value:" 映射到数值大小",paraId:37,tocIndex:17},{value:"color",paraId:37,tocIndex:17},{value:" 映射到分类或数值",paraId:37,tocIndex:17},{value:"样式设置",paraId:36,tocIndex:17},{value:": 通过 ",paraId:36,tocIndex:17},{value:"style",paraId:36,tocIndex:17},{value:" 对象设置透明度、描边等",paraId:36,tocIndex:17},{value:"比例尺配置",paraId:36,tocIndex:17},{value:": 通过 ",paraId:36,tocIndex:17},{value:"scale",paraId:36,tocIndex:17},{value:" 对象控制气泡大小和颜色范围",paraId:36,tocIndex:17},{value:"交互功能",paraId:36,tocIndex:17},{value:": 添加 ",paraId:36,tocIndex:17},{value:"tooltip",paraId:36,tocIndex:17},{value:" 和 ",paraId:36,tocIndex:17},{value:"labels",paraId:36,tocIndex:17},{value:" 提升用户体验",paraId:36,tocIndex:17},{value:"多层结构",paraId:36,tocIndex:17},{value:": 使用 ",paraId:36,tocIndex:17},{value:"children",paraId:36,tocIndex:17},{value:" 数组可以同时绘制地图背景和气泡层",paraId:36,tocIndex:17},{value:"在实际应用中，要正确显示地图背景，需要：",paraId:38,tocIndex:21},{value:"引入地图投影组件",paraId:39,tocIndex:21},{value:"加载完整的 GeoJSON 地图数据",paraId:39,tocIndex:21},{value:"使用正确的 transform 配置",paraId:39,tocIndex:21}]},49648:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(53895);const t=[{value:"子弹图（Bullet Chart）是一种线性的图表类型，最初由数据可视化专家 Stephen Few 设计，旨在替代传统的仪表盘而提供更加紧凑和信息丰富的可视化形式。子弹图能够在有限的空间内同时展示实际值、目标值和表现区间，通过对比的方式清晰地显示指标的完成度和表现情况。",paraId:0,tocIndex:0},{value:"子弹图的设计理念是最大化数据墨水比（data-ink ratio），在最小的空间内展示最多的有用信息，特别适合用于仪表板和绩效监控场景。",paraId:1,tocIndex:0},{value:"英文名",paraId:2,tocIndex:0},{value:"：Bullet Chart",paraId:2,tocIndex:0},{value:"其他名称",paraId:3,tocIndex:0},{value:"：进度条图、目标比较图、弹丸图",paraId:3,tocIndex:0},{value:"图表类型",paraId:4,tocIndex:2},{value:"子弹图",paraId:4,tocIndex:2},{value:"适合的数据",paraId:4,tocIndex:2},{value:"一个分类数据字段、一个连续数据字段（实际值）、一个目标值、可选的表现区间",paraId:4,tocIndex:2},{value:"功能",paraId:4,tocIndex:2},{value:"展示实际值与目标值的对比，评估表现等级",paraId:4,tocIndex:2},{value:"数据与图形的映射",paraId:4,tocIndex:2},{value:"分类数据字段映射到纵轴位置",paraId:4,tocIndex:2},{value:"连续数据字段映射到条形长度",paraId:4,tocIndex:2},{value:"目标值映射到标记线",paraId:4,tocIndex:2},{value:"表现区间映射到背景色带",paraId:4,tocIndex:2},{value:"适合的数据条数",paraId:4,tocIndex:2},{value:"单个或多个指标，建议不超过 10 个",paraId:4,tocIndex:2},{value:"子弹图的主要组成部分包括：",paraId:5,tocIndex:2},{value:"实际值条形",paraId:6,tocIndex:2},{value:"：用短粗的深色条形表示，展示当前实际达到的数值",paraId:6,tocIndex:2},{value:"目标值标记",paraId:6,tocIndex:2},{value:"：用垂直线或其他标记表示，代表需要达成的目标",paraId:6,tocIndex:2},{value:"表现区间",paraId:6,tocIndex:2},{value:"：背景使用不同深浅的色带表示，通常分为差、良、优等区间",paraId:6,tocIndex:2},{value:"刻度轴",paraId:6,tocIndex:2},{value:"：提供数值参考，帮助读者理解具体的数值大小",paraId:6,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst data = [\n  {\n    title: '销售完成率',\n    ranges: 100,\n    measures: 80,\n    target: 85,\n  },\n];\n\nchart.options({\n  type: 'view',\n  coordinate: { transform: [{ type: 'transpose' }] },\n  children: [\n    {\n      type: 'interval',\n      data,\n      encode: { x: 'title', y: 'ranges', color: '#f0efff' },\n      style: { maxWidth: 30 },\n      axis: {\n        y: {\n          grid: true,\n          gridLineWidth: 2,\n          title: '完成率 (%)',\n        },\n        x: {\n          title: false,\n        },\n      },\n    },\n    {\n      type: 'interval',\n      data,\n      encode: { x: 'title', y: 'measures', color: '#5B8FF9' },\n      style: { maxWidth: 20 },\n      label: {\n        text: 'measures',\n        position: 'right',\n        textAlign: 'left',\n        dx: 5,\n        formatter: (d) => `${d}%`,\n      },\n    },\n    {\n      type: 'point',\n      data,\n      encode: {\n        x: 'title',\n        y: 'target',\n        shape: 'line',\n        color: '#3D76DD',\n        size: 8,\n      },\n      tooltip: {\n        title: false,\n        items: [\n          { channel: 'y', name: '目标值', valueFormatter: (d) => `${d}%` },\n        ],\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:7,tocIndex:2},{value:"场景 1：业绩指标监控",paraId:8,tocIndex:4},{value:"子弹图是展示业绩指标完成情况的理想工具，能够清晰地对比实际表现与目标要求。",paraId:9,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst colors = {\n  ranges: ['#ffebee', '#fff3e0', '#e8f5e8'],\n  measures: '#1890ff',\n  target: '#ff4d4f',\n};\n\n// 转换数据结构\nconst transformedData = [\n  { title: '项目进度', value: 40, level: '差' },\n  { title: '项目进度', value: 30, level: '良' },\n  { title: '项目进度', value: 30, level: '优' },\n];\n\nchart.options({\n  type: 'view',\n  coordinate: { transform: [{ type: 'transpose' }] },\n  children: [\n    {\n      type: 'interval',\n      data: transformedData,\n      encode: { x: 'title', y: 'value', color: 'level' },\n      transform: [{ type: 'stackY' }],\n      scale: {\n        color: {\n          domain: ['差', '良', '优'],\n          range: colors.ranges,\n        },\n      },\n      style: { maxWidth: 30 },\n    },\n    {\n      type: 'interval',\n      data: {\n        value: [\n          { title: '项目进度', value: 60, type: '实际进度' },\n          { title: '项目进度', value: 80, type: '目标进度' },\n        ],\n        transform: [{ type: 'filter', callback: (d) => d.type === '实际进度' }],\n      },\n      encode: { x: 'title', y: 'value', color: colors.measures },\n      style: { maxWidth: 16 },\n    },\n    {\n      type: 'point',\n      data: {\n        value: [\n          { title: '项目进度', value: 60, type: '实际进度' },\n          { title: '项目进度', value: 80, type: '目标进度' },\n        ],\n        transform: [{ type: 'filter', callback: (d) => d.type === '目标进度' }],\n      },\n      encode: {\n        x: 'title',\n        y: 'value',\n        shape: 'line',\n        color: colors.target,\n        size: 8,\n      },\n      axis: { y: { grid: true, title: '进度 (%)' }, x: { title: false } },\n    },\n  ],\n});\nchart.render();\n",paraId:10,tocIndex:4},{value:"场景 2：预算执行跟踪",paraId:11,tocIndex:4},{value:"子弹图能够有效地显示预算的执行情况，包括实际支出、预算目标和预警区间。",paraId:12,tocIndex:4},{value:"场景 3：资源利用率监控",paraId:13,tocIndex:4},{value:"通过子弹图可以直观地了解各类资源的使用情况，识别过度使用或利用不足的资源。",paraId:14,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst resourceData = [\n  {\n    resource: 'CPU使用率',\n    ranges: 100,\n    measures: 65,\n    target: 80,\n  },\n  {\n    resource: '内存使用率',\n    ranges: 100,\n    measures: 45,\n    target: 70,\n  },\n  {\n    resource: '磁盘使用率',\n    ranges: 100,\n    measures: 88,\n    target: 85,\n  },\n  {\n    resource: '网络带宽',\n    ranges: 100,\n    measures: 72,\n    target: 75,\n  },\n];\n\nchart.options({\n  type: 'view',\n  coordinate: { transform: [{ type: 'transpose' }] },\n  children: [\n    {\n      type: 'interval',\n      data: resourceData,\n      encode: { x: 'resource', y: 'ranges', color: '#f5f5f5' },\n      style: { maxWidth: 30 },\n    },\n    {\n      type: 'interval',\n      data: resourceData,\n      encode: {\n        x: 'resource',\n        y: 'measures',\n        color: (d) => (d.measures > d.target ? '#ff7875' : '#52c41a'),\n      },\n      style: { maxWidth: 20 },\n      label: {\n        text: 'measures',\n        position: 'right',\n        textAlign: 'left',\n        dx: 5,\n        formatter: (d) => `${d}%`,\n      },\n    },\n    {\n      type: 'point',\n      data: resourceData,\n      encode: {\n        x: 'resource',\n        y: 'target',\n        shape: 'line',\n        color: '#1890ff',\n        size: 6,\n      },\n      axis: {\n        y: {\n          grid: true,\n          title: '使用率 (%)',\n        },\n        x: {\n          title: '系统资源',\n        },\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:15,tocIndex:4},{value:"场景 1：时间趋势分析",paraId:16,tocIndex:5},{value:"子弹图主要展示某个时点的状态对比，不适合展示随时间变化的趋势，此时应使用折线图。",paraId:17,tocIndex:5},{value:"场景 2：部分与整体关系",paraId:18,tocIndex:5},{value:"如果需要展示各部分占整体的比例关系，饼图或环形图更为合适。",paraId:19,tocIndex:5},{value:"场景 3：数据量过大",paraId:20,tocIndex:5},{value:"当需要展示大量指标时，子弹图会导致视觉混乱，建议使用分组展示或其他图表类型。",paraId:21,tocIndex:5},{value:"通过分组显示多个相关指标的表现情况，便于横向对比。",paraId:22,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst multiData = [\n  {\n    department: '销售部',\n    indicator: '销售额',\n    ranges: 100,\n    measures: 85,\n    target: 90,\n  },\n  {\n    department: '销售部',\n    indicator: '客户数',\n    ranges: 100,\n    measures: 92,\n    target: 85,\n  },\n  {\n    department: '市场部',\n    indicator: '品牌知名度',\n    ranges: 100,\n    measures: 78,\n    target: 80,\n  },\n  {\n    department: '市场部',\n    indicator: '营销投入ROI',\n    ranges: 100,\n    measures: 88,\n    target: 85,\n  },\n];\n\nchart.options({\n  type: 'view',\n  coordinate: { transform: [{ type: 'transpose' }] },\n  children: [\n    {\n      type: 'interval',\n      data: multiData,\n      encode: { x: 'indicator', y: 'ranges', color: '#f0f0f0' },\n      style: { maxWidth: 30 },\n    },\n    {\n      type: 'interval',\n      data: multiData,\n      encode: { x: 'indicator', y: 'measures', color: 'department' },\n      style: { maxWidth: 20 },\n      label: {\n        text: 'measures',\n        position: 'right',\n        textAlign: 'left',\n        dx: 5,\n      },\n    },\n    {\n      type: 'point',\n      data: multiData,\n      encode: {\n        x: 'indicator',\n        y: 'target',\n        shape: 'line',\n        color: '#666',\n        size: 6,\n      },\n      axis: {\n        y: {\n          grid: true,\n          title: '完成度',\n        },\n        x: {\n          title: '关键指标',\n        },\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:23,tocIndex:7},{value:"通过不同颜色深浅的背景区间，提供更细致的表现评估标准。",paraId:24,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst colors = {\n  ranges: ['#ffebee', '#fff3e0', '#e8f5e8'],\n  measures: '#1890ff',\n  target: '#ff4d4f',\n};\n\n// 转换数据结构\nconst transformedData = [\n  { title: '项目进度', value: 40, level: '差' },\n  { title: '项目进度', value: 30, level: '良' },\n  { title: '项目进度', value: 30, level: '优' },\n];\n\nchart.options({\n  type: 'view',\n  coordinate: { transform: [{ type: 'transpose' }] },\n  children: [\n    {\n      type: 'interval',\n      data: transformedData,\n      encode: { x: 'title', y: 'value', color: 'level' },\n      transform: [{ type: 'stackY' }],\n      scale: {\n        color: {\n          domain: ['差', '良', '优'],\n          range: colors.ranges,\n        },\n      },\n      style: { maxWidth: 30 },\n    },\n    {\n      type: 'interval',\n      data: {\n        value: [\n          { title: '项目进度', value: 60, type: '实际进度' },\n          { title: '项目进度', value: 80, type: '目标进度' },\n        ],\n        transform: [{ type: 'filter', callback: (d) => d.type === '实际进度' }],\n      },\n      encode: { x: 'title', y: 'value', color: colors.measures },\n      style: { maxWidth: 16 },\n    },\n    {\n      type: 'point',\n      data: {\n        value: [\n          { title: '项目进度', value: 60, type: '实际进度' },\n          { title: '项目进度', value: 80, type: '目标进度' },\n        ],\n        transform: [{ type: 'filter', callback: (d) => d.type === '目标进度' }],\n      },\n      encode: {\n        x: 'title',\n        y: 'value',\n        shape: 'line',\n        color: colors.target,\n        size: 8,\n      },\n      axis: { y: { grid: true, title: '进度 (%)' }, x: { title: false } },\n    },\n  ],\n});\nchart.render();\n",paraId:25,tocIndex:8},{value:"在空间受限或需要特殊布局时，可以使用垂直方向的子弹图。",paraId:26,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst verticalData = [\n  {\n    metric: 'Q1销售',\n    ranges: 100,\n    measures: 80,\n    target: 85,\n  },\n  {\n    metric: 'Q2销售',\n    ranges: 100,\n    measures: 92,\n    target: 88,\n  },\n  {\n    metric: 'Q3销售',\n    ranges: 100,\n    measures: 76,\n    target: 90,\n  },\n];\n\nchart.options({\n  type: 'view',\n  children: [\n    {\n      type: 'interval',\n      data: verticalData,\n      encode: { x: 'metric', y: 'ranges', color: '#f0f0f0' },\n      style: { maxWidth: 30 },\n    },\n    {\n      type: 'interval',\n      data: verticalData,\n      encode: { x: 'metric', y: 'measures', color: '#52c41a' },\n      style: { maxWidth: 20 },\n      label: {\n        text: 'measures',\n        position: 'top',\n        textAlign: 'center',\n        dy: -5,\n      },\n    },\n    {\n      type: 'point',\n      data: verticalData,\n      encode: {\n        x: 'metric',\n        y: 'target',\n        shape: 'line',\n        color: '#ff4d4f',\n        size: 6,\n      },\n      axis: {\n        y: {\n          grid: true,\n          title: '销售额 (万元)',\n        },\n        x: {\n          title: '季度',\n        },\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:27,tocIndex:9},{value:"条形图",paraId:28,tocIndex:10},{value:"子弹图在条形图的基础上增加了目标值和表现区间，提供更丰富的对比维度",paraId:29,tocIndex:11},{value:"条形图主要用于比较不同分类的数值大小，而子弹图侧重于实际值与目标值的对比",paraId:29,tocIndex:11},{value:"仪表盘",paraId:30,tocIndex:11},{value:"子弹图比仪表盘更节省空间，能在相同空间内展示更多信息",paraId:31,tocIndex:12},{value:"仪表盘更直观地展示单个指标的状态，子弹图更适合多指标对比",paraId:31,tocIndex:12},{value:"进度条",paraId:32,tocIndex:12},{value:"子弹图提供了更多的上下文信息，包括目标值和表现区间",paraId:33,tocIndex:13},{value:"进度条主要展示完成进度，子弹图能展示表现的优劣程度",paraId:33,tocIndex:13}]},20761:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(85109);const t=[{value:"和弦图（Chord Diagram）是一种显示矩阵中数据间相互关系的可视化方法，节点数据沿圆周径向排列，节点之间使用带权重（有宽度）的弧线链接。特别适合展示多个实体之间的相互关系和流量。",paraId:0,tocIndex:0},{value:"和弦图能够直观地展示多个节点之间的复杂关系网络，特别适用于展示双向流动数据，如人口迁移、贸易流向、资金往来、软件依赖关系等场景。",paraId:1,tocIndex:0},{value:"英文名",paraId:2,tocIndex:0},{value:"：Chord Diagram",paraId:2,tocIndex:0},{value:"图表类型",paraId:3,tocIndex:1},{value:"和弦图",paraId:3,tocIndex:1},{value:"适合的数据",paraId:3,tocIndex:1},{value:"节点数据集（可选）、边数据集：源节点、目标节点、流量值",paraId:3,tocIndex:1},{value:"功能",paraId:3,tocIndex:1},{value:"观察节点关系，展示多个实体间的双向流动关系",paraId:3,tocIndex:1},{value:"数据与图形的映射",paraId:3,tocIndex:1},{value:"权重映射到节点和边的宽度",paraId:3,tocIndex:1},{value:"源节点和目标节点映射到圆周上的弧段位置",paraId:3,tocIndex:1},{value:"节点可以用颜色区分",paraId:3,tocIndex:1},{value:"适合的数据条数",paraId:3,tocIndex:1},{value:"节点数据两组以上，5-15 个节点效果最佳",paraId:3,tocIndex:1},{value:"外圆弧（Outer Arcs）",paraId:4,tocIndex:2},{value:"：圆周上的弧段，代表各个分类或节点，弧段长度反映节点的总流量",paraId:4,tocIndex:2},{value:"连接弧（Chords）",paraId:4,tocIndex:2},{value:"：连接不同外圆弧的曲线，表示节点间的关系，弧线粗细表示流量大小",paraId:4,tocIndex:2},{value:"标签（Labels）",paraId:4,tocIndex:2},{value:"：标识各个节点的文字说明",paraId:4,tocIndex:2},{value:"颜色（Colors）",paraId:4,tocIndex:2},{value:"：用于区分不同的节点或流向",paraId:4,tocIndex:2},{value:"例子 1: ",paraId:5,tocIndex:4},{value:"适合应用到流量关系展示",paraId:5,tocIndex:4},{value:"下图展示了不同城市之间的人口流动情况，通过和弦图可以清晰地看到各城市间的双向流动关系。",paraId:6,tocIndex:4},{value:"source（源城市）",paraId:7,tocIndex:4},{value:"target（目标城市）",paraId:7,tocIndex:4},{value:"value（流动人口）",paraId:7,tocIndex:4},{value:"北京",paraId:7,tocIndex:4},{value:"上海",paraId:7,tocIndex:4},{value:"100,000",paraId:7,tocIndex:4},{value:"北京",paraId:7,tocIndex:4},{value:"广州",paraId:7,tocIndex:4},{value:"80,000",paraId:7,tocIndex:4},{value:"上海",paraId:7,tocIndex:4},{value:"北京",paraId:7,tocIndex:4},{value:"70,000",paraId:7,tocIndex:4},{value:"上海",paraId:7,tocIndex:4},{value:"广州",paraId:7,tocIndex:4},{value:"90,000",paraId:7,tocIndex:4},{value:"广州",paraId:7,tocIndex:4},{value:"深圳",paraId:7,tocIndex:4},{value:"120,000",paraId:7,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'chord',\n  autoFit: true,\n  data: {\n    value: {\n      links: [\n        { source: '北京', target: '上海', value: 100 },\n        { source: '北京', target: '广州', value: 80 },\n        { source: '北京', target: '深圳', value: 60 },\n        { source: '上海', target: '北京', value: 70 },\n        { source: '上海', target: '广州', value: 90 },\n        { source: '上海', target: '深圳', value: 50 },\n        { source: '广州', target: '北京', value: 40 },\n        { source: '广州', target: '上海', value: 85 },\n        { source: '广州', target: '深圳', value: 120 },\n        { source: '深圳', target: '北京', value: 35 },\n        { source: '深圳', target: '上海', value: 45 },\n        { source: '深圳', target: '广州', value: 110 },\n      ],\n    },\n  },\n  layout: { nodeWidthRatio: 0.05 },\n  scale: {\n    color: {\n      type: 'ordinal',\n      range: ['#5B8FF9', '#5AD8A6', '#F6BD16', '#E86452'],\n    },\n  },\n  style: {\n    labelFontSize: 12,\n    labelFill: '#333',\n    linkFillOpacity: 0.6,\n  },\n  tooltip: {\n    items: [\n      { field: 'source', name: '源城市' },\n      { field: 'target', name: '目标城市' },\n      { field: 'value', name: '流动人口' },\n    ],\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:8,tocIndex:4},{value:"例子 2: ",paraId:9,tocIndex:4},{value:"展示软件依赖关系",paraId:9,tocIndex:4},{value:"下图展示了软件包之间的依赖关系，每个节点表示一个独立的包，每条边展示了包与包之间的依赖关系。边的粗细表示依赖的强度。",paraId:10,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'chord',\n  autoFit: true,\n  data: {\n    value: {\n      links: [\n        { source: 'vis.core', target: 'vis.data', value: 85 },\n        { source: 'vis.core', target: 'vis.event', value: 45 },\n        { source: 'vis.core', target: 'vis.util', value: 120 },\n        { source: 'vis.data', target: 'vis.core', value: 30 },\n        { source: 'vis.data', target: 'vis.util', value: 60 },\n        { source: 'vis.event', target: 'vis.core', value: 25 },\n        { source: 'vis.event', target: 'vis.data', value: 40 },\n        { source: 'vis.util', target: 'vis.core', value: 15 },\n        { source: 'vis.render', target: 'vis.core', value: 95 },\n        { source: 'vis.render', target: 'vis.util', value: 55 },\n        { source: 'vis.layout', target: 'vis.core', value: 75 },\n        { source: 'vis.layout', target: 'vis.util', value: 35 },\n      ],\n    },\n  },\n  layout: { nodeWidthRatio: 0.05 },\n  scale: {\n    color: {\n      type: 'ordinal',\n      range: ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd'],\n    },\n  },\n  style: {\n    labelFontSize: 11,\n    labelFill: '#333',\n    linkFillOpacity: 0.6,\n  },\n  tooltip: {\n    items: [\n      { field: 'source', name: '依赖包' },\n      { field: 'target', name: '目标包' },\n      { field: 'value', name: '依赖强度' },\n    ],\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:11,tocIndex:4},{value:"说明",paraId:12,tocIndex:4},{value:"：",paraId:12,tocIndex:4},{value:"节点表示不同的软件包模块",paraId:13,tocIndex:4},{value:"边的粗细表示依赖关系的强度",paraId:13,tocIndex:4},{value:"颜色用于区分不同的包，便于识别循环依赖",paraId:13,tocIndex:4},{value:"例子 1: ",paraId:14,tocIndex:5},{value:"节点过多导致可读性差",paraId:14,tocIndex:5},{value:"当节点数量超过 15 个时，和弦图会变得拥挤难读，连接线重叠严重。",paraId:15,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\n// 模拟20个省份的数据，节点过多导致可读性差\nconst provinces = [\n  '北京',\n  '上海',\n  '广州',\n  '深圳',\n  '杭州',\n  '南京',\n  '武汉',\n  '成都',\n  '西安',\n  '重庆',\n  '天津',\n  '苏州',\n  '青岛',\n  '大连',\n  '厦门',\n  '宁波',\n  '长沙',\n  '郑州',\n  '济南',\n  '福州',\n];\n\nconst data = [];\nprovinces.forEach((source, i) => {\n  provinces.forEach((target, j) => {\n    if (i !== j && Math.random() > 0.7) {\n      data.push({\n        source,\n        target,\n        value: Math.floor(Math.random() * 50) + 10,\n      });\n    }\n  });\n});\n\nchart.options({\n  type: 'chord',\n  autoFit: true,\n  data: {\n    value: {\n      links: data.slice(0, 40), // 只取前40条数据演示\n    },\n  },\n  layout: { nodeWidthRatio: 0.05 },\n  style: {\n    labelFontSize: 8, // 字体变小以适应更多标签\n    labelFill: '#666',\n    linkFillOpacity: 0.5,\n  },\n});\n\nchart.render();\n",paraId:16,tocIndex:5},{value:"例子 2: ",paraId:17,tocIndex:5},{value:"不适合展示层次关系",paraId:17,tocIndex:5},{value:"和弦图主要用于展示平等节点间的关系，不适合展示有明显层次结构的数据。",paraId:18,tocIndex:5},{value:"下图展示了某个时段用户使用 Uber 软件在美国旧金山各个城市之间乘车交通的情况。图中的节点表示城市，节点大小表示了交通流量的多少，从图中可以看出，交通行为主要发生在几个主要城市之间。",paraId:19,tocIndex:7},{value:"以下是使用自定义颜色和样式的和弦图示例：",paraId:20,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'chord',\n  autoFit: true,\n  data: {\n    value: {\n      links: [\n        { source: '中国', target: '美国', value: 4200 },\n        { source: '中国', target: '日本', value: 3200 },\n        { source: '中国', target: '韩国', value: 2800 },\n        { source: '美国', target: '中国', value: 1200 },\n        { source: '美国', target: '墨西哥', value: 6100 },\n        { source: '日本', target: '中国', value: 1400 },\n        { source: '日本', target: '韩国', value: 800 },\n        { source: '韩国', target: '中国', value: 1100 },\n      ],\n    },\n  },\n  layout: { nodeWidthRatio: 0.05 },\n  scale: {\n    color: {\n      type: 'ordinal',\n      range: ['#5B8FF9', '#5AD8A6', '#F6BD16', '#E86452'],\n    },\n  },\n  style: {\n    labelFontSize: 14,\n    labelFontWeight: 'bold',\n    labelFill: '#000',\n    linkFillOpacity: 0.7,\n  },\n  tooltip: {\n    items: [\n      { field: 'source', name: '出口国' },\n      { field: 'target', name: '进口国' },\n      { field: 'value', name: '贸易额（亿美元）' },\n    ],\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:21,tocIndex:7},{value:"和弦图主要用于展示节点间的双向流动关系，强调连接和流量",paraId:22,tocIndex:9},{value:"雷达图主要用于多维度数据比较，通过多边形展示各维度的值",paraId:22,tocIndex:9},{value:"和弦图通过圆形布局和连接弧展示关系网络，适合展示流动数据",paraId:23,tocIndex:10},{value:"面积图通过填充区域展示数值变化趋势，适合时间序列数据",paraId:23,tocIndex:10}]},80559:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(19182);const t=[{value:"分级统计地图是一种在地图分区上使用视觉符号（通常是颜色、阴影或者不同疏密的晕线）来表示一个范围值的分布情况的地图。在整个制图区域的若干个小的区划单元内（行政区划或者其他区划单位），根据各分区的数量（相对）指标进行分级，并用相应色级或不同疏密的晕线，反映各区现象的集中程度或发展水平的分布差别，最常见于选举和人口普查数据的可视化，这些数据以省、市等地理区域为单位。",paraId:0},{value:"此法因常用色级表示，所以也叫色级统计图法。地图上每个分区的数量使用不同的色级表示，较典型的方法有：（1）一个颜色到另一个颜色混合渐变；（2）单一的色调渐变；（3）透明到不透明；（4）明到暗；（5）用一个完整的色谱变化。Choropleth 地图依靠颜色等来表现数据内在的模式，因此选择合适的颜色非常重要，当数据的值域大或者数据的类型多样时，选择合适的颜色映射相当有挑战性。",paraId:1,tocIndex:0},{value:"Choropleth 地图最大的问题在于数据分布和地理区域大小的不对称。通常大量数据集中于人口密集的区域，而人口稀疏的地区却占有大多数的屏幕空间，用大量的屏幕空间来表示小部分数据的做法对空间的利用非常不经济，这种不对称还常常会造成用户对数据的错误理解，不能很好地帮助用户准确得区分和比较地图上各个分区的数据值。",paraId:2,tocIndex:0},{value:"\n  ",paraId:3},{value:"英文名",paraId:4,tocIndex:0},{value:"：Choropleth Map",paraId:4,tocIndex:0},{value:"图表类型",paraId:5,tocIndex:1},{value:"分级统计地图",paraId:5,tocIndex:1},{value:"适合的数据",paraId:5,tocIndex:1},{value:"一个分类字段，一个连续字段",paraId:5,tocIndex:1},{value:"功能",paraId:5,tocIndex:1},{value:"对比分类数据的数值大小",paraId:5,tocIndex:1},{value:"数据与图形的映射",paraId:5,tocIndex:1},{value:"一个分类字段映射到地图的地理位置",paraId:5,tocIndex:1},{value:"另一个连续字段映射到颜色",paraId:5,tocIndex:1},{value:"适合的数据条数",paraId:5,tocIndex:1},{value:"根据实际地理位置信息，暂无限制",paraId:5,tocIndex:1},{value:"分级统计地图较多的是反映呈面状但属分散分布的现象，如反映人口密度、某农作物播种面积的比、人均收入等。",paraId:6,tocIndex:3},{value:"例子 1: ",paraId:7,tocIndex:3},{value:"地理区域数据可视化",paraId:7,tocIndex:3},{value:"下图展示了美国各州的人口分布，通过颜色的深浅反映了人口的主要分布情况，能很明显看出 California、Texas 两大州人口最多。同时也展示了 2015 年全球人口性别比例分布，其中数值表示的是每 100 位女性对应的男性数量。可以看出在欧美国家，普遍是女性略多于男性，在前苏联地区这种现象尤为突出，而中东地区却是男多女少。",paraId:8,tocIndex:3},{value:"数据类型",paraId:9,tocIndex:3},{value:"地区/国家",paraId:9,tocIndex:3},{value:"数值",paraId:9,tocIndex:3},{value:"说明",paraId:9,tocIndex:3},{value:"人口数",paraId:9,tocIndex:3},{value:"California",paraId:9,tocIndex:3},{value:"38802500",paraId:9,tocIndex:3},{value:"CA",paraId:9,tocIndex:3},{value:"人口数",paraId:9,tocIndex:3},{value:"Texas",paraId:9,tocIndex:3},{value:"26956958",paraId:9,tocIndex:3},{value:"TX",paraId:9,tocIndex:3},{value:"人口数",paraId:9,tocIndex:3},{value:"Florida",paraId:9,tocIndex:3},{value:"19893297",paraId:9,tocIndex:3},{value:"FL",paraId:9,tocIndex:3},{value:"性别比例",paraId:9,tocIndex:3},{value:"Russia",paraId:9,tocIndex:3},{value:"86.8",paraId:9,tocIndex:3},{value:"每 100 女性对应的男性数",paraId:9,tocIndex:3},{value:"性别比例",paraId:9,tocIndex:3},{value:"China",paraId:9,tocIndex:3},{value:"106.3",paraId:9,tocIndex:3},{value:"每 100 女性对应的男性数",paraId:9,tocIndex:3},{value:"性别比例",paraId:9,tocIndex:3},{value:"Japan",paraId:9,tocIndex:3},{value:"94.7",paraId:9,tocIndex:3},{value:"每 100 女性对应的男性数",paraId:9,tocIndex:3},{value:"...",paraId:9,tocIndex:3},{value:"...",paraId:9,tocIndex:3},{value:"...",paraId:9,tocIndex:3},{value:"...",paraId:9,tocIndex:3},{value:"import { Chart } from '@antv/g2';\nimport { feature } from 'topojson-client';\n\n// 加载地图和数据\nPromise.all([\n  fetch('https://assets.antv.antgroup.com/g2/us-10m.json').then((res) =>\n    res.json(),\n  ),\n  fetch('https://assets.antv.antgroup.com/g2/unemployment2.json').then((res) =>\n    res.json(),\n  ),\n]).then(([us, unemployment]) => {\n  const counties = feature(us, us.objects.counties).features;\n\n  const chart = new Chart({\n    container: 'container',\n    autoFit: true,\n  });\n\n  chart.options({\n    type: 'geoPath',\n    coordinate: {\n      type: 'albersUsa', // 使用美国地图的专用投影\n    },\n    data: {\n      value: counties,\n      transform: [\n        {\n          type: 'join',\n          join: unemployment,\n          on: ['id', 'id'],\n          select: ['rate'],\n        },\n      ],\n    },\n    scale: {\n      color: {\n        palette: 'ylGnBu', // 使用从黄到蓝的渐变色板\n        unknown: '#fff', // 未知数据显示为白色\n      },\n    },\n    encode: {\n      color: 'rate', // 将失业率映射到颜色通道\n    },\n    legend: {\n      color: {\n        layout: { justifyContent: 'center' }, // 调整图例布局\n      },\n    },\n    style: {\n      stroke: '#666',\n      strokeWidth: 0.5,\n    },\n    tooltip: {\n      title: (d) => d.properties.name,\n      items: [{ field: 'rate', name: '失业率' }],\n    },\n  });\n\n  chart.render();\n});\n",paraId:10,tocIndex:3},{value:"说明",paraId:11,tocIndex:3},{value:"：",paraId:11,tocIndex:3},{value:"数值字段映射到颜色，表示数据的大小",paraId:12,tocIndex:3},{value:"地理区域名称决定了在其所在的地理位置绘制区域",paraId:12,tocIndex:3},{value:"对于面积较小的区块，因为数值也较小，所以渲染的颜色也浅，导致这些区块在图上很难被看见，这也是分级统计地图的局限性",paraId:12,tocIndex:3},{value:"展示精确数值",paraId:13,tocIndex:4},{value:"：分级统计地图主要用于展示数据的相对大小和分布趋势，不适合需要精确数值读取的场景。",paraId:13,tocIndex:4},{value:"区域面积差异过大",paraId:13,tocIndex:4},{value:"：当区域面积差异很大时，面积较大的区域在视觉上会占据主导地位，即使其对应的数值较小，也可能给用户带来误导。此时可以考虑使用气泡地图等其他类型的地图。",paraId:13,tocIndex:4},{value:"数据不具有地理相关性",paraId:13,tocIndex:4},{value:"：如果数据与地理位置没有直接关系，使用分级统计地图没有意义。",paraId:13,tocIndex:4},{value:"例子 1: ",paraId:14,tocIndex:4},{value:"2008 年美国总统大选结果",paraId:14,tocIndex:4},{value:"选举可视化很容易给用户造成数据分布和地理区域大小不对称的错觉。民主党候选人奥巴马和共和党候选人麦凯恩胜出的州分别用蓝色和红色表示。从图上看，共和党比民主党获得了更多的投票，因为红色的区域所占的面积更大。但是在美国总统大选中，最后的结果是看候选人获得的选举人票数，每个州拥有的选举人票数是不一样的，在一个州获胜的选举人将得到该州的全部选举人票。这个时候推荐使用点描法地图。",paraId:15,tocIndex:4},{value:"State（州）",paraId:16,tocIndex:4},{value:"选举人票数",paraId:16,tocIndex:4},{value:"奥巴马得票",paraId:16,tocIndex:4},{value:"麦凯恩得票",paraId:16,tocIndex:4},{value:"Alabama",paraId:16,tocIndex:4},{value:"9",paraId:16,tocIndex:4},{value:"813479",paraId:16,tocIndex:4},{value:"1266546",paraId:16,tocIndex:4},{value:"Arizona",paraId:16,tocIndex:4},{value:"10",paraId:16,tocIndex:4},{value:"1034707",paraId:16,tocIndex:4},{value:"638017",paraId:16,tocIndex:4},{value:"Arkansas",paraId:16,tocIndex:4},{value:"6",paraId:16,tocIndex:4},{value:"422310",paraId:16,tocIndex:4},{value:"638017",paraId:16,tocIndex:4},{value:"分级统计地图",paraId:17,tocIndex:6},{value:"：将数值映射到地图区域的颜色上，适合展示连续型数据的分布。",paraId:17,tocIndex:6},{value:"气泡地图",paraId:17,tocIndex:6},{value:"：在地图区域上显示一个气泡，气泡的大小表示数值的大小，适合展示离散点数据或在区域面积差异较大时避免误导。",paraId:17,tocIndex:6},{value:"分级统计地图经常会带来误判，面积大的区域可能数值（人口数、选举人票等）比较小。",paraId:18,tocIndex:6},{value:"点描法地图",paraId:19,tocIndex:7},{value:"：主要用于显示某个经纬度上的数据，而分级统计地图用于显示某个区域的统计值。",paraId:19,tocIndex:7},{value:"点描法地图",paraId:19,tocIndex:7},{value:"：可以显示大量的数据值，而分级统计地图受显示区域的限制。",paraId:19,tocIndex:7}]},28186:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(66419);const t=[{value:"典型的色块图，是一种使用颜色编码数值数据的可视化图表。它将矩形区域划分为网格，每个网格单元代表一组分类数据的交叉点，通过颜色的深浅表示数值的大小。与热力图不同，色块图通常用于显示离散分类数据之间的关系，而不是连续的数据分布。",paraId:0,tocIndex:0},{value:"色块图特别适合展示多个分类变量之间的关系和模式，例如不同时间段内不同产品的销售额、不同地区不同年份的气温变化等。通过颜色编码，用户可以快速识别出数据集中的高低值区域和整体分布模式。",paraId:1,tocIndex:0},{value:"需要注意的是，当色块图中的分类过多时，可能会导致标签重叠和可读性下降的问题，下面我们会举例说明。",paraId:2,tocIndex:0},{value:"英文名",paraId:3,tocIndex:0},{value:"：Color Map, Color Block Chart",paraId:3,tocIndex:0},{value:"图表类型",paraId:4,tocIndex:2},{value:"基础色块图",paraId:4,tocIndex:2},{value:"适合的数据",paraId:4,tocIndex:2},{value:"具有两个分类维度和一个数值维度的数据集",paraId:4,tocIndex:2},{value:"功能",paraId:4,tocIndex:2},{value:"展示两个分类维度和一个数值变量之间的关系",paraId:4,tocIndex:2},{value:"数据与图形的映射",paraId:4,tocIndex:2},{value:"两个分类数据维度映射到网格的行和列",paraId:4,tocIndex:2},{value:"数值数据映射到颜色深浅",paraId:4,tocIndex:2},{value:"可以添加文本标签显示具体数值",paraId:4,tocIndex:2},{value:"适合的数据条数",paraId:4,tocIndex:2},{value:"每个维度通常不超过 20 个分类，总单元格数建议不超过 400 个",paraId:4,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { month: '一月', product: '产品A', sales: 123 },\n    { month: '一月', product: '产品B', sales: 231 },\n    { month: '一月', product: '产品C', sales: 145 },\n    { month: '二月', product: '产品A', sales: 132 },\n    { month: '二月', product: '产品B', sales: 112 },\n    { month: '二月', product: '产品C', sales: 178 },\n    { month: '三月', product: '产品A', sales: 99 },\n    { month: '三月', product: '产品B', sales: 288 },\n    { month: '三月', product: '产品C', sales: 133 },\n    { month: '四月', product: '产品A', sales: 181 },\n    { month: '四月', product: '产品B', sales: 223 },\n    { month: '四月', product: '产品C', sales: 141 },\n    { month: '五月', product: '产品A', sales: 152 },\n    { month: '五月', product: '产品B', sales: 219 },\n    { month: '五月', product: '产品C', sales: 109 },\n    { month: '六月', product: '产品A', sales: 167 },\n    { month: '六月', product: '产品B', sales: 187 },\n    { month: '六月', product: '产品C', sales: 255 },\n  ],\n  coordinate: {\n    type: 'cartesian',\n  },\n  children: [\n    {\n      type: 'cell',\n      encode: {\n        x: 'month',\n        y: 'product',\n        color: 'sales',\n        link: 'sales',\n      },\n      style: {\n        inset: 1,\n      },\n      labels: [\n        {\n          text: 'sales',\n          style: {\n            fill: (d) => (d.sales > 200 ? '#fff' : '#000'),\n          },\n        },\n      ],\n    },\n  ],\n  legend: {\n    color: {\n      position: 'right',\n      flipPage: false,\n    },\n  },\n  scale: {\n    color: {\n      palette: 'rdBu',\n      offset: (t) => 1 - t,\n    },\n  },\n});\n\nchart.render();\n",paraId:5,tocIndex:2},{value:"图表类型",paraId:6,tocIndex:3},{value:"带条件格式的色块图",paraId:6,tocIndex:3},{value:"适合的数据",paraId:6,tocIndex:3},{value:"需要突出显示特定阈值或范围的数据集",paraId:6,tocIndex:3},{value:"功能",paraId:6,tocIndex:3},{value:"根据数据值的不同范围应用不同的颜色编码，突出显示关键数据点",paraId:6,tocIndex:3},{value:"数据与图形的映射",paraId:6,tocIndex:3},{value:"除基础色块图的映射外，还可以添加自定义的颜色区间和边界标记",paraId:6,tocIndex:3},{value:"使用建议",paraId:6,tocIndex:3},{value:"为不同颜色区间添加清晰的图例说明",paraId:6,tocIndex:3},{value:"使用对比鲜明的颜色表示不同的数据状态",paraId:6,tocIndex:3},{value:"避免使用过多的颜色区间造成混淆",paraId:6,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst data = [\n  { month: '一月', product: '产品A', sales: 123, target: 150 },\n  { month: '一月', product: '产品B', sales: 231, target: 200 },\n  { month: '一月', product: '产品C', sales: 145, target: 150 },\n  { month: '二月', product: '产品A', sales: 132, target: 150 },\n  { month: '二月', product: '产品B', sales: 112, target: 200 },\n  { month: '二月', product: '产品C', sales: 178, target: 150 },\n  { month: '三月', product: '产品A', sales: 99, target: 150 },\n  { month: '三月', product: '产品B', sales: 288, target: 200 },\n  { month: '三月', product: '产品C', sales: 133, target: 150 },\n  { month: '四月', product: '产品A', sales: 181, target: 150 },\n  { month: '四月', product: '产品B', sales: 223, target: 200 },\n  { month: '四月', product: '产品C', sales: 141, target: 150 },\n  { month: '五月', product: '产品A', sales: 152, target: 150 },\n  { month: '五月', product: '产品B', sales: 219, target: 200 },\n  { month: '五月', product: '产品C', sales: 109, target: 150 },\n  { month: '六月', product: '产品A', sales: 167, target: 150 },\n  { month: '六月', product: '产品B', sales: 187, target: 200 },\n  { month: '六月', product: '产品C', sales: 255, target: 150 },\n];\n\n// 计算每个单元格的性能状态\nconst processedData = data.map((d) => ({\n  ...d,\n  // 计算与目标的比例\n  performance: d.sales / d.target,\n  // 添加状态标签\n  status:\n    d.sales < d.target * 0.8\n      ? '不达标'\n      : d.sales < d.target\n      ? '接近目标'\n      : d.sales < d.target * 1.2\n      ? '达标'\n      : '超额完成',\n}));\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: processedData,\n  coordinate: {\n    type: 'cartesian',\n  },\n  children: [\n    {\n      type: 'cell',\n      encode: {\n        x: 'month',\n        y: 'product',\n        color: 'performance',\n      },\n      style: {\n        inset: 1,\n      },\n      labels: [\n        {\n          text: (d) => `${d.sales}/${d.target}`,\n          style: {\n            fill: (d) => (d.performance > 0.95 ? '#fff' : '#000'),\n            textAlign: 'center',\n            fontSize: 11,\n          },\n        },\n      ],\n    },\n  ],\n  legend: {\n    color: {\n      position: 'right',\n      flipPage: false,\n    },\n  },\n  scale: {\n    color: {\n      type: 'threshold',\n      domain: [0.8, 1, 1.2],\n      range: ['#F4664A', '#FAAD14', '#30BF78', '#0891B2'],\n    },\n  },\n});\n\nchart.render();\n",paraId:7,tocIndex:3},{value:"例子 1: ",paraId:8,tocIndex:5},{value:"杭州地铁票价图",paraId:8,tocIndex:5},{value:"下图是模拟的杭州地铁票价图。这个色块图展示了不同地铁站点之间的票价关系，通过颜色深浅表示不同的票价级别。可以快速识别票价区间以及任意两站间的出行成本。",paraId:9,tocIndex:5},{value:"from（起点）",paraId:10,tocIndex:5},{value:"to（终点）",paraId:10,tocIndex:5},{value:"price（票价）",paraId:10,tocIndex:5},{value:"湘湖",paraId:10,tocIndex:5},{value:"滨和路",paraId:10,tocIndex:5},{value:"2",paraId:10,tocIndex:5},{value:"湘湖",paraId:10,tocIndex:5},{value:"西兴",paraId:10,tocIndex:5},{value:"3",paraId:10,tocIndex:5},{value:"...",paraId:10,tocIndex:5},{value:"...",paraId:10,tocIndex:5},{value:"...",paraId:10,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  height: 500,\n});\n\n// 地铁1号线站点\nconst sites = [\n  '湘湖',\n  '滨康路',\n  '西兴',\n  '滨和路',\n  '江陵路',\n  '近江',\n  '婺江路',\n  '城站',\n  '定安路',\n  '龙翔桥',\n  '凤起路',\n  '武林广场',\n  '西湖文化广场',\n  '打铁关',\n  '火车东站',\n  '闸弄口',\n  '彭埠',\n  '七堡',\n  '九和路',\n  '九堡',\n  '客运中心',\n  '下沙西',\n  '金沙湖',\n  '高沙路',\n  '文泽路',\n];\n\n// 生成地铁票价数据\nconst data = [];\nfor (let i = 0; i < sites.length; i++) {\n  for (let j = sites.length - 1; j >= i; j--) {\n    let price = 0;\n    const step = Math.abs(j - i);\n    if (step <= 2) {\n      price = 2;\n    } else if (step <= 4) {\n      price = 3;\n    } else if (step <= 7) {\n      price = 4;\n    } else if (step <= 13) {\n      price = 5;\n    } else if (step <= 16) {\n      price = 6;\n    } else if (step <= 21) {\n      price = 7;\n    } else {\n      price = 8;\n    }\n    data.push({ from: sites[i], to: sites[j], price: price });\n  }\n}\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data,\n  coordinate: {\n    type: 'cartesian',\n  },\n  children: [\n    {\n      type: 'cell',\n      encode: {\n        x: 'from',\n        y: 'to',\n        color: 'price',\n      },\n      style: {\n        inset: 1,\n        stroke: '#fff',\n        strokeWidth: 1,\n      },\n      labels: [\n        {\n          text: 'price',\n          style: {\n            fill: (d) => (d.price > 5 ? '#fff' : '#000'),\n            textAlign: 'center',\n            fontSize: 10,\n          },\n        },\n      ],\n    },\n  ],\n  legend: {\n    color: {\n      position: 'right',\n      title: '票价（元）',\n      flipPage: false,\n    },\n  },\n  scale: {\n    color: {\n      domain: [2, 3, 4, 5, 6, 7, 8],\n      range: [\n        '#ffffcc',\n        '#c7e9b4',\n        '#7fcdbb',\n        '#41b6c4',\n        '#2c7fb8',\n        '#253494',\n        '#081d58',\n      ],\n    },\n    from: {\n      values: sites,\n    },\n    to: {\n      values: sites.slice().reverse(),\n    },\n  },\n  axis: {\n    x: {\n      title: false,\n      grid: false,\n      tickLine: false,\n      labelRotate: -Math.PI / 4,\n      labelOffset: 5,\n    },\n    y: {\n      title: false,\n      grid: false,\n      tickLine: false,\n    },\n  },\n});\n\nchart.render();\n",paraId:11,tocIndex:5},{value:"分析",paraId:12,tocIndex:5},{value:"：",paraId:12,tocIndex:5},{value:"站名映射到了 ",paraId:13,tocIndex:5},{value:"x",paraId:13,tocIndex:5},{value:"、",paraId:13,tocIndex:5},{value:"y",paraId:13,tocIndex:5},{value:" 轴，以确定位置",paraId:13,tocIndex:5},{value:"票价映射到颜色深浅",paraId:13,tocIndex:5},{value:"票价数据是模拟的，仅表示大概情况",paraId:13,tocIndex:5},{value:"色块图便于快速识别票价区间和站点间的出行成本",paraId:13,tocIndex:5},{value:"例子 2: ",paraId:14,tocIndex:5},{value:"考试成绩分析",paraId:14,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst students = [\n  '张三',\n  '李四',\n  '王五',\n  '赵六',\n  '钱七',\n  '孙八',\n  '周九',\n  '吴十',\n];\nconst subjects = ['语文', '数学', '英语', '物理', '化学', '生物'];\n\n// 生成成绩数据\nconst data = [];\nstudents.forEach((student) => {\n  subjects.forEach((subject) => {\n    // 随机生成50-100之间的成绩\n    const score = Math.floor(Math.random() * 51) + 50;\n    data.push({\n      student,\n      subject,\n      score,\n    });\n  });\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data,\n  coordinate: {\n    type: 'cartesian',\n  },\n  children: [\n    {\n      type: 'cell',\n      encode: {\n        x: 'subject',\n        y: 'student',\n        color: 'score',\n      },\n      style: {\n        inset: 1,\n      },\n      labels: [\n        {\n          text: 'score',\n          style: {\n            fill: (d) => (d.score > 85 ? '#fff' : '#000'),\n            textAlign: 'center',\n          },\n        },\n      ],\n    },\n  ],\n  legend: {\n    color: {\n      position: 'right',\n      flipPage: false,\n      title: '分数',\n    },\n  },\n  scale: {\n    color: {\n      domain: [60, 70, 80, 90],\n      range: ['#F4664A', '#FAAD14', '#30BF78', '#0891B2', '#5B8FF9'],\n    },\n  },\n});\n\nchart.render();\n",paraId:15,tocIndex:5},{value:"例子 1: ",paraId:16,tocIndex:6},{value:"数据点过少",paraId:16,tocIndex:6},{value:"当数据集只有少量的分类交叉点时，色块图可能不是最佳选择，这种情况下简单的表格或条形图可能更为直观。",paraId:17,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\n// 只有很少的数据点\nconst data = [\n  { region: '东部', year: '2022', value: 125 },\n  { region: '西部', year: '2022', value: 87 },\n];\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data,\n  children: [\n    {\n      type: 'cell',\n      encode: {\n        x: 'year',\n        y: 'region',\n        color: 'value',\n      },\n      style: {\n        inset: 1,\n      },\n      labels: [\n        {\n          text: 'value',\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:18,tocIndex:6},{value:"这种情况下，使用柱状图会更加直观：",paraId:19,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { region: '东部', year: '2022', value: 125 },\n    { region: '西部', year: '2022', value: 87 },\n  ],\n  encode: {\n    x: 'region',\n    y: 'value',\n    color: 'region',\n  },\n  labels: [\n    {\n      text: 'value',\n      position: 'top',\n    },\n  ],\n});\n\nchart.render();\n",paraId:20,tocIndex:6},{value:"例子 2: ",paraId:21,tocIndex:6},{value:"需要展示精确趋势变化",paraId:21,tocIndex:6},{value:"当需要展示随时间的精确变化趋势时，色块图不如折线图直观。以下是一个使用色块图展示月度数据变化的例子，但这种情况更适合使用折线图。",paraId:22,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst months = [\n  '一月',\n  '二月',\n  '三月',\n  '四月',\n  '五月',\n  '六月',\n  '七月',\n  '八月',\n  '九月',\n  '十月',\n  '十一月',\n  '十二月',\n];\nconst data = months.map((month, index) => ({\n  month,\n  metric: '销售额',\n  value: 100 + Math.sin(index / 2) * 50 + Math.random() * 10,\n}));\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data,\n  children: [\n    {\n      type: 'cell',\n      encode: {\n        x: 'month',\n        y: 'metric',\n        color: 'value',\n      },\n      style: {\n        inset: 1,\n      },\n      labels: [\n        {\n          text: (d) => d.value.toFixed(0),\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:23,tocIndex:6},{value:"使用折线图更适合展示趋势：",paraId:24,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst months = [\n  '一月',\n  '二月',\n  '三月',\n  '四月',\n  '五月',\n  '六月',\n  '七月',\n  '八月',\n  '九月',\n  '十月',\n  '十一月',\n  '十二月',\n];\nconst data = months.map((month, index) => ({\n  month,\n  value: 100 + Math.sin(index / 2) * 50 + Math.random() * 10,\n}));\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data,\n  encode: {\n    x: 'month',\n    y: 'value',\n  },\n  style: {\n    lineWidth: 2,\n    point: {\n      fill: '#1890ff',\n      r: 4,\n    },\n  },\n  labels: [\n    {\n      text: (d) => d.value.toFixed(0),\n      position: 'top',\n    },\n  ],\n});\n\nchart.render();\n",paraId:25,tocIndex:6},{value:"热力图",paraId:26,tocIndex:7},{value:"矩形树图",paraId:27,tocIndex:7},{value:"图表类型",paraId:28,tocIndex:8},{value:"主要特点",paraId:28,tocIndex:8},{value:"适用场景",paraId:28,tocIndex:8},{value:"数据要求",paraId:28,tocIndex:8},{value:"色块图",paraId:28,tocIndex:8},{value:"使用规则网格展示两个分类维度的交叉",paraId:28,tocIndex:8},{value:"分类数据之间的关系对比",paraId:28,tocIndex:8},{value:"两个分类维度和一个数值维度",paraId:28,tocIndex:8},{value:"热力图",paraId:28,tocIndex:8},{value:"可以使用连续尺度，展示数据的空间分布",paraId:28,tocIndex:8},{value:"展示空间密度或强度分布",paraId:28,tocIndex:8},{value:"通常需要连续的或近似连续的数据",paraId:28,tocIndex:8},{value:"矩形树图",paraId:28,tocIndex:8},{value:"通过嵌套矩形展示层次结构数据",paraId:28,tocIndex:8},{value:"表示层次数据的比例关系",paraId:28,tocIndex:8},{value:"需要有明确的层次结构",paraId:28,tocIndex:8},{value:"颜色选择",paraId:29,tocIndex:10},{value:"使用顺序色板表示连续数据的大小变化",paraId:30,tocIndex:10},{value:"使用发散色板表示与中心值的偏离程度",paraId:30,tocIndex:10},{value:"为颜色添加明确的图例和说明",paraId:30,tocIndex:10},{value:"网格设计",paraId:31,tocIndex:10},{value:"保持网格单元大小一致，确保可读性",paraId:32,tocIndex:10},{value:"在单元格中添加数值标签，增强精确度",paraId:32,tocIndex:10},{value:"考虑在单元格之间添加间距，提高辨识度",paraId:32,tocIndex:10},{value:"标签和交互",paraId:33,tocIndex:10},{value:"为重要数据点添加标签",paraId:34,tocIndex:10},{value:"添加悬停交互，显示详细信息",paraId:34,tocIndex:10},{value:"考虑添加排序功能，便于数据比较",paraId:34,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\n// 生成示例数据\nconst rows = ['A', 'B', 'C', 'D', 'E'];\nconst cols = ['P1', 'P2', 'P3', 'P4', 'P5', 'P6'];\nconst data = [];\n\nrows.forEach((row) => {\n  cols.forEach((col) => {\n    const value = Math.floor(Math.random() * 100);\n    const baseline = 50;\n    data.push({\n      row,\n      col,\n      value,\n      diff: value - baseline,\n      performance: value >= baseline ? '达标' : '不达标',\n    });\n  });\n});\nconsole.log('data', data);\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data,\n  children: [\n    {\n      type: 'cell',\n      encode: {\n        x: 'col',\n        y: 'row',\n        color: 'diff',\n      },\n      style: {\n        inset: 2,\n      },\n      labels: [\n        {\n          text: 'value',\n          style: {\n            fill: (d) => (Math.abs(d.diff) > 25 ? '#fff' : '#000'),\n            textAlign: 'center',\n            fontWeight: 'bold',\n          },\n        },\n      ],\n    },\n  ],\n  scale: {\n    color: {\n      type: 'threshold',\n      domain: [0],\n      range: ['#2B83BA', '#D7191C'],\n    },\n  },\n  tooltip: {\n    title: (d) => `${d.row}-${d.col}`,\n    items: [\n      { field: 'value', name: '数值' },\n      { field: 'diff', name: '与基准差异' },\n      { field: 'performance', name: '达标状态' },\n    ],\n  },\n  legend: false,\n  interaction: [{ type: 'tooltip' }, { type: 'elementHighlight' }],\n});\n\nchart.render();\n",paraId:35,tocIndex:10},{value:"色块图可以通过多种方式进行扩展，使其更适应不同的数据可视化需求：",paraId:36,tocIndex:11},{value:"分层色块图",paraId:37,tocIndex:11},{value:"：在传统色块图基础上添加层级结构，使用嵌套矩形表示层次关系。",paraId:37,tocIndex:11},{value:"交互式色块图",paraId:37,tocIndex:11},{value:"：增加悬停、点击等交互功能，允许用户探索详细信息。",paraId:37,tocIndex:11},{value:"动态色块图",paraId:37,tocIndex:11},{value:"：通过动画展示随时间变化的数据模式，适合时间序列数据的可视化。",paraId:37,tocIndex:11},{value:"带聚类的色块图",paraId:37,tocIndex:11},{value:"：结合聚类算法，自动对行或列进行重新排序，以便更容易识别相似模式。",paraId:37,tocIndex:11},{value:"带边界标记的色块图",paraId:37,tocIndex:11},{value:"：在特定条件下为色块添加边框或标记，突出显示重要信息。",paraId:37,tocIndex:11}]},77937:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(76472);const t=[{value:"等高线图是通过连接地图上相同数值的点得到的闭合曲线图。最常见的是地形图上海拔高度相等的各点所连成的等高线，在等高线上标注的数字为该等高线的海拔高度。等高线按其作用不同，可分为首曲线、计曲线、间曲线与助曲线四种。",paraId:0,tocIndex:0},{value:"除地形图之外，等高线也广泛应用于数据可视化中，用于显示二维平面上的三维数据分布，如温度分布、气压分布、概率密度分布等。等高线一般不相交，但有时可能会重合。在同一等高线上的各点数值相同。在等高线稀疏的地方，数值变化较缓；而在等高线稠密的地方，数值变化较陡。",paraId:1,tocIndex:0},{value:"英文名",paraId:2,tocIndex:0},{value:"：Contour Line, Contour Plot",paraId:2,tocIndex:0},{value:"图表类型",paraId:3,tocIndex:1},{value:"等高线图",paraId:3,tocIndex:1},{value:"适合的数据",paraId:3,tocIndex:1},{value:"三维数据：两个连续变量（X、Y 坐标）和一个数值变量（Z 值）",paraId:3,tocIndex:1},{value:"功能",paraId:3,tocIndex:1},{value:"显示二维平面上连续数据的分布模式和数值变化",paraId:3,tocIndex:1},{value:"数据与图形的映射",paraId:3,tocIndex:1},{value:"X 坐标映射到横轴位置",paraId:3,tocIndex:1},{value:"Y 坐标映射到纵轴位置",paraId:3,tocIndex:1},{value:"Z 值通过等高线的层次和标注显示",paraId:3,tocIndex:1},{value:"可选择性地用颜色表示数值大小",paraId:3,tocIndex:1},{value:"适合的数据条数",paraId:3,tocIndex:1},{value:"连续的二维网格数据，数据点越多，等高线越平滑",paraId:3,tocIndex:1},{value:"地形表示",paraId:4,tocIndex:3},{value:"：最经典的应用，用等高线表示海拔高度，清晰展示山脉、谷地等地形特征。",paraId:4,tocIndex:3},{value:"气象数据",paraId:4,tocIndex:3},{value:"：显示温度分布、气压分布、降雨量分布等气象要素的空间变化。",paraId:4,tocIndex:3},{value:"科学研究",paraId:4,tocIndex:3},{value:"：在物理学、化学、生物学等领域显示电场、磁场、浓度等二维分布。",paraId:4,tocIndex:3},{value:"商业分析",paraId:4,tocIndex:3},{value:"：展示市场份额、人口密度、消费水平等在地理空间上的分布。",paraId:4,tocIndex:3},{value:"概率密度",paraId:4,tocIndex:3},{value:"：在统计学中显示二维概率密度函数的分布形态。",paraId:4,tocIndex:3},{value:"离散数据",paraId:5,tocIndex:4},{value:"：等高线需要连续的数值分布，不适合显示离散的分类数据。",paraId:5,tocIndex:4},{value:"时间序列",paraId:5,tocIndex:4},{value:"：等高线主要用于空间分布，不适合显示时间维度的变化。",paraId:5,tocIndex:4},{value:"精确数值读取",paraId:5,tocIndex:4},{value:"：虽然可以标注数值，但等高线主要用于显示趋势和模式，不适合精确读取具体数值。",paraId:5,tocIndex:4},{value:"数据点稀疏",paraId:5,tocIndex:4},{value:"：当数据点过于稀疏时，插值生成的等高线可能不够准确。",paraId:5,tocIndex:4},{value:"以下是一个典型的等高线图应用场景：",paraId:6,tocIndex:4},{value:"地形海拔分布图。",paraId:7,tocIndex:4},{value:" 下图展示了某山区的海拔高度分布，通过等高线可以直观地看出山峰、山谷和坡度的分布情况。等高线密集的地方表示坡度陡峭，等高线稀疏的地方表示地势平缓。",paraId:7,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\n// 模拟地形高程数据\nconst terrainData = [];\nfor (let x = 0; x <= 50; x += 2) {\n  for (let y = 0; y <= 50; y += 2) {\n    // 模拟山峰地形：两个山峰的高程分布\n    const elevation1 = 100 * Math.exp(-((x - 15) ** 2 + (y - 15) ** 2) / 200);\n    const elevation2 = 80 * Math.exp(-((x - 35) ** 2 + (y - 35) ** 2) / 150);\n    const elevation = elevation1 + elevation2 + 10; // 基础海拔\n    terrainData.push({ x, y, elevation });\n  }\n}\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'cell',\n  data: terrainData,\n  encode: {\n    x: 'x',\n    y: 'y',\n    color: 'elevation',\n  },\n  style: {\n    stroke: '#333',\n    strokeWidth: 0.5,\n    inset: 0.5,\n  },\n  scale: {\n    color: {\n      palette: 'viridis',\n      type: 'sequential',\n    },\n  },\n  legend: {\n    color: {\n      length: 300,\n      layout: { justifyContent: 'center' },\n      labelFormatter: (value) => `${Math.round(value)}m`,\n    },\n  },\n  tooltip: {\n    title: '海拔信息',\n    items: [\n      { field: 'x', name: '经度' },\n      { field: 'y', name: '纬度' },\n      {\n        field: 'elevation',\n        name: '海拔',\n        valueFormatter: (value) => `${Math.round(value)}m`,\n      },\n    ],\n  },\n});\n\nchart.render();\n",paraId:8,tocIndex:4},{value:"这个例子展示了：",paraId:9,tocIndex:4},{value:"使用网格单元格（cell）模拟等高线效果，显示地形海拔分布",paraId:10,tocIndex:4},{value:"通过颜色渐变表示不同的海拔高度，形成类似等高线的视觉效果",paraId:10,tocIndex:4},{value:"提供交互式的悬停提示显示具体位置和海拔信息",paraId:10,tocIndex:4},{value:"使用合适的色彩映射（viridis 色板）来增强视觉效果",paraId:10,tocIndex:4},{value:"添加描边来突出网格边界，增强等高线的视觉感知",paraId:10,tocIndex:4},{value:"使用线条绘制等高线轮廓，更接近传统地形图的表现形式。",paraId:11,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\n// 生成等高线数据\nconst generateContourLines = () => {\n  const lines = [];\n  const levels = [20, 40, 60, 80, 100]; // 等高线级别\n\n  levels.forEach((level, index) => {\n    // 为每个等高线级别生成环形线条\n    const points = [];\n    const centerX = 25;\n    const centerY = 25;\n    const baseRadius = 5 + index * 4;\n\n    for (let angle = 0; angle <= 360; angle += 5) {\n      const radian = (angle * Math.PI) / 180;\n      const radius = baseRadius + Math.sin((angle * Math.PI) / 45) * 2; // 添加一些变化\n      const x = centerX + radius * Math.cos(radian);\n      const y = centerY + radius * Math.sin(radian);\n      points.push({ x, y, level, lineId: `line_${level}` });\n    }\n    lines.push(...points);\n  });\n\n  return lines;\n};\n\nconst contourLines = generateContourLines();\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  height: 400,\n});\n\nchart.options({\n  type: 'line',\n  data: contourLines,\n  encode: {\n    x: 'x',\n    y: 'y',\n    color: 'level',\n    series: 'lineId',\n  },\n  style: {\n    strokeWidth: 2,\n    strokeOpacity: 0.8,\n  },\n  scale: {\n    color: {\n      type: 'sequential',\n      palette: 'oranges',\n    },\n    x: { nice: true },\n    y: { nice: true },\n  },\n  axis: {\n    x: { title: '距离 (km)' },\n    y: { title: '距离 (km)' },\n  },\n  legend: {\n    color: {\n      title: '海拔高度 (m)',\n      layout: { justifyContent: 'center' },\n    },\n  },\n  tooltip: {\n    title: '等高线信息',\n    items: [\n      { field: 'level', name: '海拔', valueFormatter: (value) => `${value}m` },\n    ],\n  },\n});\n\nchart.render();\n",paraId:12,tocIndex:6},{value:"3D 等高线",paraId:13,tocIndex:6},{value:"：结合三维可视化技术，可以创建立体的等高线图，更直观地展示数据的空间分布。",paraId:13,tocIndex:6},{value:"动态等高线",paraId:13,tocIndex:6},{value:"：通过动画展示数据随时间的变化，如气象数据的时间演变。",paraId:13,tocIndex:6},{value:"交互式标注",paraId:13,tocIndex:6},{value:"：允许用户点击等高线查看具体数值，或者动态调整等高线的间隔。",paraId:13,tocIndex:6},{value:"多层叠加",paraId:13,tocIndex:6},{value:"：在同一图表中叠加多个数据层的等高线，如同时显示温度和气压分布。",paraId:13,tocIndex:6},{value:"等高线图",paraId:14,tocIndex:8},{value:"：通过线条表示数值相等的区域，强调数值的连续性和梯度变化，适合显示渐变趋势。",paraId:14,tocIndex:8},{value:"热力图",paraId:14,tocIndex:8},{value:"：通过颜色填充表示数值大小，更直观地显示数值的绝对大小和空间分布模式。",paraId:14,tocIndex:8},{value:"等高线图",paraId:15,tocIndex:9},{value:"：显示连续分布的数据模式，通过插值生成平滑的等值线。",paraId:15,tocIndex:9},{value:"散点图",paraId:15,tocIndex:9},{value:"：显示离散数据点的分布，保持数据的原始性，不进行插值处理。",paraId:15,tocIndex:9},{value:"等高线图",paraId:16,tocIndex:10},{value:"：纯粹的数据可视化工具，可用于任何二维连续数据。",paraId:16,tocIndex:10},{value:"地形图",paraId:16,tocIndex:10},{value:"：专门用于地理信息，除等高线外还包含道路、河流、建筑等地理要素。",paraId:16,tocIndex:10}]},90851:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(94655);const t=[{value:"分布曲线图是一种用于展示数据频率分布的统计图表，通过平滑的曲线形式直观地反映数据在不同数值区间的分布密度和集中趋势。它是理解数据分布特征、识别数据模式的重要可视化工具。",paraId:0,tocIndex:0},{value:"分布曲线图特别适合用于探索性数据分析、多组数据分布比较、数据质量检查以及统计分布特征识别等场景，是统计分析和数据科学中的重要工具。",paraId:1,tocIndex:0},{value:"英文名",paraId:2,tocIndex:0},{value:"：Distribution Curve, Frequency Curve, Density Curve",paraId:2,tocIndex:0},{value:"分布曲线图由以下元素构成:",paraId:3,tocIndex:1},{value:"横轴：表示自变量",paraId:4,tocIndex:1},{value:"纵轴：表示因变量",paraId:4,tocIndex:1},{value:"表示概率分布的分布曲线",paraId:4,tocIndex:1},{value:"例子 1: ",paraId:5,tocIndex:3},{value:"展示正态分布数据的分布特征",paraId:5,tocIndex:3},{value:"分布曲线图非常适合展示正态分布数据，能够清晰地显示数据的集中趋势、对称性和分布形态。",paraId:6,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\n// 生成正态分布数据\nconst generateNormalData = (count, mean, std) => {\n  const data = [];\n  for (let i = 0; i < count; i++) {\n    // 使用Box-Muller变换生成正态分布数据\n    const u1 = Math.random();\n    const u2 = Math.random();\n    const z0 = Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);\n    data.push({ value: mean + std * z0 });\n  }\n  return data;\n};\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  data: {\n    value: generateNormalData(1000, 100, 15),\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => {\n          // 提取数值数据\n          const values = data.map(d => d.value).filter(v => !isNaN(v));\n          \n          // 计算数据范围\n          const min = Math.min(...values);\n          const max = Math.max(...values);\n          const binCount = 30;\n          const binWidth = (max - min) / binCount;\n          \n          // 创建分箱\n          const bins = Array.from({ length: binCount }, (_, i) => ({\n            x0: min + i * binWidth,\n            x1: min + (i + 1) * binWidth,\n            count: 0,\n          }));\n          \n          // 统计每个分箱的频数\n          values.forEach(value => {\n            const binIndex = Math.min(\n              Math.floor((value - min) / binWidth),\n              binCount - 1\n            );\n            bins[binIndex].count++;\n          });\n          \n          // 计算频率密度并生成曲线数据\n          const total = values.length;\n          return bins.map(bin => ({\n            x: (bin.x0 + bin.x1) / 2, // 区间中心点\n            y: bin.count / total, // 频率密度\n            frequency: bin.count,\n            range: `${bin.x0.toFixed(1)}-${bin.x1.toFixed(1)}`,\n          }));\n        },\n      },\n    ],\n  },\n  encode: {\n    x: 'x',\n    y: 'y',\n    shape: 'smooth',\n  },\n  style: {\n    lineWidth: 3,\n    stroke: '#1890ff',\n  },\n  axis: {\n    x: { title: '测量值' },\n    y: { title: '频率密度' },\n  },\n  tooltip: {\n    title: (d) => `区间: ${d.range}`,\n    items: [\n      { field: 'frequency', name: '频数' },\n      { field: 'y', name: '频率密度', valueFormatter: '.3f' },\n    ],\n  },\n});\n\nchart.render();\n",paraId:7,tocIndex:3},{value:"说明",paraId:8,tocIndex:3},{value:"：",paraId:8,tocIndex:3},{value:"展示了经典的钟形正态分布曲线",paraId:9,tocIndex:3},{value:"可以清晰观察到数据的对称性和集中趋势",paraId:9,tocIndex:3},{value:"适合质量控制、生物统计、心理测量等领域的数据分析",paraId:9,tocIndex:3},{value:"例子 2: ",paraId:10,tocIndex:3},{value:"多组数据分布比较分析",paraId:10,tocIndex:3},{value:"当需要比较不同条件或分组下的数据分布时，分布曲线图能够直观地展示各组间的分布差异。",paraId:11,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/species.json',\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => {\n          // 按物种分组数据\n          const groups = {};\n          data.forEach(d => {\n            if (!groups[d.species]) groups[d.species] = [];\n            groups[d.species].push(d.y);\n          });\n          \n          const binCount = 20;\n          const results = [];\n          \n          // 为每个物种创建分布曲线数据\n          Object.entries(groups).forEach(([species, values]) => {\n            const filteredValues = values.filter(v => !isNaN(v));\n            if (filteredValues.length === 0) return;\n            \n            const min = Math.min(...filteredValues);\n            const max = Math.max(...filteredValues);\n            const binWidth = (max - min) / binCount;\n            \n            // 创建分箱\n            const bins = Array.from({ length: binCount }, (_, i) => ({\n              x0: min + i * binWidth,\n              x1: min + (i + 1) * binWidth,\n              count: 0,\n            }));\n            \n            // 统计频数\n            filteredValues.forEach(value => {\n              const binIndex = Math.min(\n                Math.floor((value - min) / binWidth),\n                binCount - 1\n              );\n              bins[binIndex].count++;\n            });\n            \n            // 生成曲线数据\n            const total = filteredValues.length;\n            bins.forEach(bin => {\n              results.push({\n                x: (bin.x0 + bin.x1) / 2,\n                y: bin.count / total,\n                species,\n                frequency: bin.count,\n                range: `${bin.x0.toFixed(2)}-${bin.x1.toFixed(2)}`,\n              });\n            });\n          });\n          \n          return results;\n        },\n      },\n    ],\n  },\n  encode: {\n    x: 'x',\n    y: 'y',\n    color: 'species',\n    shape: 'smooth',\n  },\n  style: {\n    lineWidth: 2,\n    strokeOpacity: 0.8,\n  },\n  axis: {\n    x: { title: '花瓣长度' },\n    y: { title: '频率密度' },\n  },\n  legend: {\n    color: {\n      title: '物种',\n      position: 'right',\n    },\n  },\n  tooltip: {\n    title: (d) => `${d.species} - 区间: ${d.range}`,\n    items: [\n      { field: 'frequency', name: '频数' },\n      { field: 'y', name: '频率密度', valueFormatter: '.3f' },\n    ],\n  },\n});\n\nchart.render();\n",paraId:12,tocIndex:3},{value:"说明",paraId:13,tocIndex:3},{value:"：",paraId:13,tocIndex:3},{value:"通过不同颜色的曲线比较多个分组的分布特征",paraId:14,tocIndex:3},{value:"便于识别各组数据的分布中心、形态和离散程度",paraId:14,tocIndex:3},{value:"适合A/B测试分析、实验对照组比较、市场细分分析等场景",paraId:14,tocIndex:3},{value:"例子 1: ",paraId:15,tocIndex:4},{value:"数据量过少时效果不佳",paraId:15,tocIndex:4},{value:"当数据点过少时，分箱统计可能不够准确，生成的分布曲线可能不能准确反映真实的分布特征。",paraId:16,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\n// 模拟少量数据\nconst smallData = [\n  12, 15, 13, 14, 16, 18, 11, 17, 15, 13\n];\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  height: 250,\n});\n\nchart.options({\n  type: 'point',\n  data: smallData.map((value, index) => ({ index: index + 1, value })),\n  encode: {\n    x: 'index',\n    y: 'value',\n    size: 6,\n  },\n  style: {\n    fill: '#1890ff',\n    fillOpacity: 0.8,\n  },\n  axis: {\n    x: { title: '数据点序号' },\n    y: { title: '数值' },\n  },\n  title: '数据量少时建议使用散点图',\n});\n\nchart.render();\n",paraId:17,tocIndex:4},{value:"问题说明",paraId:18,tocIndex:4},{value:"：",paraId:18,tocIndex:4},{value:"数据点太少（少于30个）时，分箱后每个区间的数据过少",paraId:19,tocIndex:4},{value:"生成的分布曲线可能出现人工的波动和不规律的形状",paraId:19,tocIndex:4},{value:"无法准确反映真实的数据分布特征",paraId:19,tocIndex:4},{value:"建议改用散点图、箱形图或增加数据收集",paraId:19,tocIndex:4},{value:"例子 2: ",paraId:20,tocIndex:4},{value:"离散型分类数据不适用",paraId:20,tocIndex:4},{value:"对于离散的分类数据，连续的分布曲线没有实际意义，因为分类之间不存在连续性关系。",paraId:21,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\n// 离散分类数据\nconst discreteData = [\n  { category: '产品A', sales: 45 },\n  { category: '产品B', sales: 67 },\n  { category: '产品C', sales: 33 },\n  { category: '产品D', sales: 52 },\n  { category: '产品E', sales: 28 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  height: 250,\n});\n\nchart.options({\n  type: 'interval',\n  data: discreteData,\n  encode: {\n    x: 'category',\n    y: 'sales',\n    color: 'category',\n  },\n  style: {\n    fillOpacity: 0.8,\n  },\n  axis: {\n    x: { title: '产品类别' },\n    y: { title: '销售数量' },\n  },\n  title: '分类数据建议使用柱状图',\n});\n\nchart.render();\n",paraId:22,tocIndex:4},{value:"问题说明",paraId:23,tocIndex:4},{value:"：",paraId:23,tocIndex:4},{value:"分类数据之间没有连续性关系，强行连接会产生误导",paraId:24,tocIndex:4},{value:"分布曲线无法表达分类数据的真实含义",paraId:24,tocIndex:4},{value:"柱状图能更准确地表达分类数据的比较关系",paraId:24,tocIndex:4},{value:"适合使用柱状图、饼图等离散图表类型",paraId:24,tocIndex:4},{value:"直方图",paraId:25,tocIndex:5},{value:"分布曲线图通过平滑的曲线展示连续的频率分布，强调整体趋势",paraId:26,tocIndex:6},{value:"直方图通过矩形柱状图展示频数分布，具有明确的区间边界",paraId:26,tocIndex:6},{value:"分布曲线图更适合展示分布的整体形态和趋势识别",paraId:26,tocIndex:6},{value:"直方图更适合精确的频数统计和区间分析",paraId:26,tocIndex:6},{value:"小提琴图",paraId:27,tocIndex:6},{value:"分布曲线图专注于展示频率分布的曲线形态",paraId:28,tocIndex:7},{value:"小提琴图结合了密度分布和箱形图的统计摘要信息",paraId:28,tocIndex:7},{value:"分布曲线图更适合纯粹的分布形态分析和多组比较",paraId:28,tocIndex:7},{value:"小提琴图更适合需要统计摘要信息的场景",paraId:28,tocIndex:7},{value:"折线图",paraId:29,tocIndex:7},{value:"分布曲线图基于频率统计，展示数据的分布特征",paraId:30,tocIndex:8},{value:"折线图展示数据随时间或顺序的变化趋势",paraId:30,tocIndex:8},{value:"分布曲线图适合统计分析和分布探索",paraId:30,tocIndex:8},{value:"折线图适合时间序列分析和趋势追踪",paraId:30,tocIndex:8}]},54290:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(12567);const t=[{value:"环图（又叫做甜甜圈图），其本质是饼图将中间区域挖空。环图采用了让我们更关注长度而不是面积的做法，这样我们就能相对简单的对比不同的环图。",paraId:0,tocIndex:0},{value:"虽然环图和饼图在数据表达上很相似，但环图还是有它独特的优点：",paraId:1,tocIndex:0},{value:"更好的对比性",paraId:2,tocIndex:0},{value:"：饼图的整体性太强，我们会将注意力集中在比较饼图内各个扇形之间占整体比重的关系。但如果我们将两个饼图放在一起，饼图很难同时对比两个图。环图解决了这个问题。",paraId:2,tocIndex:0},{value:"空间利用率更高",paraId:2,tocIndex:0},{value:"：环图可以使用它的空心区域显示文本信息，比如标题、总数等。",paraId:2,tocIndex:0},{value:"英文名",paraId:3,tocIndex:0},{value:"：Donut Chart",paraId:3,tocIndex:0},{value:"图表类型",paraId:4,tocIndex:1},{value:"环图",paraId:4,tocIndex:1},{value:"适合的数据",paraId:4,tocIndex:1},{value:"列表：一个分类数据字段、一个连续数据字段",paraId:4,tocIndex:1},{value:"功能",paraId:4,tocIndex:1},{value:"对比分类数据的数值大小",paraId:4,tocIndex:1},{value:"数据与图形的映射",paraId:4,tocIndex:1},{value:"分类数据字段映射到环形的颜色",paraId:4,tocIndex:1},{value:"连续数据字段映射到环形的角度",paraId:4,tocIndex:1},{value:"适合的数据条数",paraId:4,tocIndex:1},{value:"不超过 9 条数据",paraId:4,tocIndex:1},{value:"例子 1: ",paraId:5,tocIndex:3},{value:"展示分类的占比情况",paraId:5,tocIndex:3},{value:"这种用法与饼图类似，下图是一个游戏公司的销售情况：",paraId:6,tocIndex:3},{value:"genre（游戏类型）",paraId:7,tocIndex:3},{value:"sold（销售量）",paraId:7,tocIndex:3},{value:"Sports",paraId:7,tocIndex:3},{value:"27,500",paraId:7,tocIndex:3},{value:"Strategy",paraId:7,tocIndex:3},{value:"11,500",paraId:7,tocIndex:3},{value:"Action",paraId:7,tocIndex:3},{value:"6,000",paraId:7,tocIndex:3},{value:"Shooter",paraId:7,tocIndex:3},{value:"3,500",paraId:7,tocIndex:3},{value:"Other",paraId:7,tocIndex:3},{value:"1,500",paraId:7,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  transform: [{ type: 'stackY' }], // 添加堆叠转换\n  data: [\n    { genre: 'Sports', sold: 27500 },\n    { genre: 'Strategy', sold: 11500 },\n    { genre: 'Action', sold: 6000 },\n    { genre: 'Shooter', sold: 3500 },\n    { genre: 'Other', sold: 1500 },\n  ],\n  coordinate: { type: 'theta', innerRadius: 0.5 },\n  encode: { y: 'sold', color: 'genre' },\n  legend: {\n    color: { position: 'bottom', layout: { justifyContent: 'center' } },\n  },\n  labels: [\n    {\n      text: 'genre',\n      style: {\n        fontWeight: 'bold',\n      },\n    },\n    {\n      text: (d, i, data) => {\n        const total = data.reduce((acc, curr) => acc + curr.sold, 0);\n        const percent = ((d.sold / total) * 100).toFixed(2);\n        return `${percent}%`;\n      },\n      style: {\n        fontSize: 10,\n        dy: 12,\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:8,tocIndex:3},{value:"说明",paraId:9,tocIndex:3},{value:"：",paraId:9,tocIndex:3},{value:"genre",paraId:10,tocIndex:3},{value:" 字段映射到",paraId:10,tocIndex:3},{value:"颜色",paraId:10,tocIndex:3},{value:"，用于区分不同的游戏类型",paraId:10,tocIndex:3},{value:"sold",paraId:10,tocIndex:3},{value:" 字段映射到",paraId:10,tocIndex:3},{value:"角度",paraId:10,tocIndex:3},{value:"，表示销售量占比的大小",paraId:10,tocIndex:3},{value:"使用 ",paraId:10,tocIndex:3},{value:"coordinate: { type: 'theta', innerRadius: 0.5 }",paraId:10,tocIndex:3},{value:" 创建环图效果",paraId:10,tocIndex:3},{value:"例子 2: ",paraId:11,tocIndex:3},{value:"在中心区域显示额外信息",paraId:11,tocIndex:3},{value:"环图的空心区域可以用来显示总数、标题或其他重要信息：",paraId:12,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst data = [\n  { type: '移动端', value: 54.2 },\n  { type: '桌面端', value: 32.1 },\n  { type: '平板端', value: 13.7 },\n];\n\nconst total = data.reduce((acc, curr) => acc + curr.value, 0);\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  transform: [{ type: 'stackY' }], // 添加堆叠转换\n  data,\n  coordinate: { type: 'theta', innerRadius: 0.6 },\n  encode: { y: 'value', color: 'type' },\n  style: { stroke: '#fff', lineWidth: 2 },\n  legend: {\n    color: { position: 'bottom', layout: { justifyContent: 'center' } },\n  },\n  labels: [\n    {\n      text: (d) => `${d.value}%`,\n      style: {\n        fontWeight: 'bold',\n        fontSize: 12,\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:13,tocIndex:3},{value:"例子 1: ",paraId:14,tocIndex:4},{value:"分类过多的场景",paraId:14,tocIndex:4},{value:"下图是各个省的人口的占比情况，因为这张图上包含的分类过多，很难清晰对比各个省份的人口数据占比情况，所以这种情况下，我们推荐使用",paraId:15,tocIndex:4},{value:"柱状图",paraId:16,tocIndex:4},{value:"。",paraId:15,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  transform: [{ type: 'stackY' }], // 添加堆叠转换\n  data: [\n    { province: '北京市', population: 19612368 },\n    { province: '天津市', population: 12938693 },\n    { province: '河北省', population: 71854210 },\n    { province: '山西省', population: 27500000 },\n    { province: '内蒙古自治区', population: 24706291 },\n    { province: '辽宁省', population: 43746323 },\n    { province: '吉林省', population: 27452815 },\n    { province: '黑龙江省', population: 38313991 },\n    { province: '上海市', population: 23019196 },\n    { province: '江苏省', population: 78660941 },\n    { province: '浙江省', population: 54426891 },\n    { province: '安徽省', population: 59500468 },\n    { province: '福建省', population: 36894217 },\n    { province: '江西省', population: 44567797 },\n    { province: '山东省', population: 95792719 },\n    { province: '河南省', population: 94029939 },\n    { province: '湖北省', population: 57237727 },\n    { province: '湖南省', population: 65700762 },\n    { province: '广东省', population: 104320459 },\n    { province: '广西壮族自治区', population: 46023761 },\n    { province: '海南省', population: 8671485 },\n    { province: '重庆市', population: 28846170 },\n    { province: '四川省', population: 80417528 },\n    { province: '贵州省', population: 34748556 },\n    { province: '云南省', population: 45966766 },\n    { province: '西藏自治区', population: 3002165 },\n    { province: '陕西省', population: 37327379 },\n    { province: '甘肃省', population: 25575263 },\n    { province: '青海省', population: 5626723 },\n  ],\n  coordinate: { type: 'theta', innerRadius: 0.4 },\n  encode: { y: 'population', color: 'province' },\n  legend: false, // 分类太多，关闭图例\n  labels: false, // 分类太多，关闭标签\n});\n\nchart.render();\n",paraId:17,tocIndex:4},{value:"说明",paraId:18,tocIndex:4},{value:"：上图中分类过多，颜色难以区分，标签重叠严重，不适合使用环图。",paraId:18,tocIndex:4},{value:"例子 2: ",paraId:19,tocIndex:4},{value:"分类占比差别不明显的场景",paraId:19,tocIndex:4},{value:"下图中游戏公司的不同种类游戏的销售量相近，角度差异很小，不太适合使用环图，此时可以使用",paraId:20,tocIndex:4},{value:"柱状图",paraId:21,tocIndex:4},{value:"。",paraId:20,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  transform: [{ type: 'stackY' }], // 添加堆叠转换\n  data: [\n    { genre: 'Sports', sold: 15000 },\n    { genre: 'Strategy', sold: 14900 },\n    { genre: 'Action', sold: 15050 },\n    { genre: 'Shooter', sold: 13000 },\n    { genre: 'Other', sold: 13900 },\n  ],\n  coordinate: { type: 'theta', innerRadius: 0.5 },\n  encode: { y: 'sold', color: 'genre' },\n  legend: {\n    color: { position: 'bottom', layout: { justifyContent: 'center' } },\n  },\n  labels: [\n    {\n      text: (d, i, data) => {\n        const total = data.reduce((acc, curr) => acc + curr.sold, 0);\n        const percent = ((d.sold / total) * 100).toFixed(2);\n        return `${percent}%`;\n      },\n      style: {\n        fontSize: 10,\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:22,tocIndex:4},{value:"说明",paraId:23,tocIndex:4},{value:"：上图中各个分类的占比都接近 20%，差异很小，难以通过角度清晰地对比数值大小。",paraId:23,tocIndex:4},{value:"使用 G2 的分面功能，可以将分组数据绘制成多个环图。下图展示了全球最大 1000 家银行所在地区在 2007 年和 2011 年的利润总额占比情况：",paraId:24,tocIndex:6},{value:"年份",paraId:25,tocIndex:6},{value:"地区",paraId:25,tocIndex:6},{value:"利润总额（亿美金）",paraId:25,tocIndex:6},{value:"2007",paraId:25,tocIndex:6},{value:"亚太地区",paraId:25,tocIndex:6},{value:"1485.54",paraId:25,tocIndex:6},{value:"2007",paraId:25,tocIndex:6},{value:"非洲及中东",paraId:25,tocIndex:6},{value:"330.12",paraId:25,tocIndex:6},{value:"2007",paraId:25,tocIndex:6},{value:"拉丁美洲",paraId:25,tocIndex:6},{value:"196.5",paraId:25,tocIndex:6},{value:"……",paraId:25,tocIndex:6},{value:"……",paraId:25,tocIndex:6},{value:"……",paraId:25,tocIndex:6},{value:"2011",paraId:25,tocIndex:6},{value:"亚太地区",paraId:25,tocIndex:6},{value:"4107.18",paraId:25,tocIndex:6},{value:"2011",paraId:25,tocIndex:6},{value:"非洲及中东",paraId:25,tocIndex:6},{value:"495.3",paraId:25,tocIndex:6},{value:"2011",paraId:25,tocIndex:6},{value:"拉丁美洲",paraId:25,tocIndex:6},{value:"495.3",paraId:25,tocIndex:6},{value:"……",paraId:25,tocIndex:6},{value:"……",paraId:25,tocIndex:6},{value:"……",paraId:25,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'facetRect',\n  autoFit: true,\n  data: [\n    { year: '2007', area: '亚太地区', profit: 1485.54 },\n    { year: '2007', area: '西欧', profit: 3631.32 },\n    { year: '2007', area: '北美', profit: 2083.9 },\n    { year: '2007', area: '非洲及中东', profit: 330.12 },\n    { year: '2007', area: '中欧和东欧', profit: 141.48 },\n    { year: '2007', area: '拉丁美洲', profit: 196.5 },\n    { year: '2011', area: '亚太地区', profit: 4107.18 },\n    { year: '2011', area: '西欧', profit: 480.06 },\n    { year: '2011', area: '北美', profit: 1783.08 },\n    { year: '2011', area: '非洲及中东', profit: 495.3 },\n    { year: '2011', area: '中欧和东欧', profit: 259.08 },\n    { year: '2011', area: '拉丁美洲', profit: 495.3 },\n  ],\n  encode: { x: 'year' },\n  children: [\n    {\n      type: 'interval',\n      transform: [{ type: 'stackY' }], // 添加堆叠转换\n      coordinate: { type: 'theta', innerRadius: 0.5 },\n      encode: { y: 'profit', color: 'area' },\n      legend: {\n        color: { position: 'bottom', layout: { justifyContent: 'center' } },\n      },\n      labels: [\n        {\n          text: (d, i, data) => {\n            const total = data.reduce((acc, curr) => acc + curr.profit, 0);\n            const percent = ((d.profit / total) * 100).toFixed(1);\n            return `${percent}%`;\n          },\n          style: {\n            fontSize: 10,\n          },\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:26,tocIndex:6},{value:"饼图",paraId:27,tocIndex:7},{value:"相似性",paraId:28,tocIndex:8},{value:"：都用于展示分类数据的占比关系",paraId:28,tocIndex:8},{value:"区别",paraId:28,tocIndex:8},{value:"：\n",paraId:28,tocIndex:8},{value:"环图中心留空，可以放置额外信息",paraId:29,tocIndex:8},{value:"环图更强调弧长（周长），饼图更强调面积",paraId:29,tocIndex:8},{value:"环图在多图对比时效果更好",paraId:29,tocIndex:8},{value:"柱状图",paraId:30,tocIndex:8},{value:"环图",paraId:31,tocIndex:9},{value:"：更适合展示占比关系，强调部分与整体的关系",paraId:31,tocIndex:9},{value:"柱状图",paraId:31,tocIndex:9},{value:"：更适合展示精确的数值对比，特别是数值差异较小的情况",paraId:31,tocIndex:9},{value:"南丁格尔玫瑰图",paraId:32,tocIndex:9},{value:"环图",paraId:33,tocIndex:10},{value:"：通过角度表示数值，内径固定",paraId:33,tocIndex:10},{value:"南丁格尔玫瑰图",paraId:33,tocIndex:10},{value:"：通过半径表示数值，更容易区分数值差异",paraId:33,tocIndex:10}]},92974:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(80262);const t=[{value:"点描法地图是一种通过在地理地图上分布密集的点来表示数据分布密度和模式的地理可视化方法。每个点通常代表一定数量的统计单位（如人口、经济活动、农业产量等），点的分布密度直观反映了数据在地理空间上的集中程度和分布特征。",paraId:0,tocIndex:0},{value:"点描法地图最大的优势在于能够直观地展示数据的空间分布模式，通过点的密集程度可以快速识别数据的聚集区域和稀疏区域。与",paraId:1,tocIndex:0},{value:"分级统计图",paraId:2,tocIndex:0},{value:"相比，点描法地图能够更细致地展示数据在地理空间内的连续分布特征，避免了行政区划边界对数据展示的影响。",paraId:1,tocIndex:0},{value:"点描法地图广泛应用于人口分布分析、经济活动密度展示、自然资源分布、疾病传播分析等多种地理数据可视化场景。",paraId:3,tocIndex:0},{value:"英文名",paraId:4,tocIndex:0},{value:"：Dot Map, Dot Density Map",paraId:4,tocIndex:0},{value:"图表类型",paraId:5,tocIndex:1},{value:"基础点描法地图",paraId:5,tocIndex:1},{value:"适合的数据",paraId:5,tocIndex:1},{value:"包含地理坐标（经纬度）的数据和数值字段",paraId:5,tocIndex:1},{value:"功能",paraId:5,tocIndex:1},{value:"展示数据在地理空间上的分布密度和模式",paraId:5,tocIndex:1},{value:"数据与图形的映射",paraId:5,tocIndex:1},{value:"经纬度字段映射到地图位置",paraId:5,tocIndex:1},{value:"数值字段影响点的数量或密度",paraId:5,tocIndex:1},{value:"分类字段可映射到颜色",paraId:5,tocIndex:1},{value:"其他属性可映射到形状",paraId:5,tocIndex:1},{value:"适合的数据条数",paraId:5,tocIndex:1},{value:"适合中等到大量数据点（通常 100-10000 个点）",paraId:5,tocIndex:1},{value:"基础点描法地图的主要组成部分包括：",paraId:6,tocIndex:1},{value:"地理背景",paraId:7,tocIndex:1},{value:"：提供地理坐标系统的地图背景，如世界地图、国家地图、区域地图等",paraId:7,tocIndex:1},{value:"点标记",paraId:7,tocIndex:1},{value:"：表示数据单位的点，位置对应地理坐标",paraId:7,tocIndex:1},{value:"点密度",paraId:7,tocIndex:1},{value:"：点的分布密度反映数据的空间分布模式",paraId:7,tocIndex:1},{value:"颜色编码",paraId:7,tocIndex:1},{value:"：用不同颜色区分数据分类或数值范围",paraId:7,tocIndex:1},{value:"例子 1: ",paraId:8,tocIndex:3},{value:"美国机场分布点描法地图",paraId:8,tocIndex:3},{value:"基于真实的美国地图数据和机场位置数据，展示全美机场的地理分布情况。",paraId:9,tocIndex:3},{value:"/**\n * 基于真实美国地图数据的机场分布点描法地图\n */\nimport { Chart } from '@antv/g2';\nimport { feature } from 'topojson-client';\n\nPromise.all([\n  fetch('https://assets.antv.antgroup.com/g2/us-10m.json').then((res) =>\n    res.json(),\n  ),\n  fetch('https://assets.antv.antgroup.com/g2/airports.json').then((res) =>\n    res.json(),\n  ),\n]).then((values) => {\n  const [us, airports] = values;\n  const states = feature(us, us.objects.states).features;\n\n  const chart = new Chart({\n    container: 'container',\n    autoFit: true,\n  });\n\n  chart.options({\n    type: 'geoView',\n    coordinate: { type: 'albersUsa' },\n    children: [\n      {\n        type: 'geoPath',\n        data: states,\n        style: {\n          fill: '#f5f5f5',\n          stroke: '#d0d0d0',\n          lineWidth: 1,\n        },\n      },\n      {\n        type: 'point',\n        data: airports,\n        encode: {\n          x: 'longitude',\n          y: 'latitude',\n          color: '#1890ff',\n          shape: 'point',\n          size: 2,\n        },\n        style: {\n          opacity: 0.8,\n        },\n        tooltip: {\n          title: 'name',\n          items: [\n            { name: '机场代码', field: 'iata' },\n            { name: '经度', field: 'longitude' },\n            { name: '纬度', field: 'latitude' },\n          ],\n        },\n      },\n    ],\n  });\n\n  chart.render();\n});\n",paraId:10,tocIndex:3},{value:"说明",paraId:11,tocIndex:3},{value:"：",paraId:11,tocIndex:3},{value:"使用真实的美国地图 TopoJSON 数据和机场坐标数据",paraId:12,tocIndex:3},{value:"通过点的分布密度可以观察到机场主要集中在东海岸、西海岸和五大湖地区",paraId:12,tocIndex:3},{value:"albersUsa",paraId:12,tocIndex:3},{value:" 投影适合展示美国本土的地理数据",paraId:12,tocIndex:3},{value:"例子 2: ",paraId:13,tocIndex:3},{value:"美国人种分布点描法地图",paraId:13,tocIndex:3},{value:"注意",paraId:14,tocIndex:3},{value:"：以下示例使用虚构的人种分布数据用于演示目的",paraId:14,tocIndex:3},{value:"/**\n * 虚构数据：美国人种分布点描法地图\n * 注意：本示例使用虚构的人种分布数据用于演示\n */\nimport { Chart } from '@antv/g2';\nimport { feature } from 'topojson-client';\n\nPromise.all([\n  fetch('https://assets.antv.antgroup.com/g2/us-10m.json').then((res) =>\n    res.json(),\n  ),\n]).then((values) => {\n  const [us] = values;\n  const states = feature(us, us.objects.states).features;\n\n  // 虚构的美国主要城市人种分布数据（仅用于演示）\n  const ethnicGroups = [\n    { type: '白人', ratio: 0.6, color: '#1890ff' },\n    { type: '西班牙裔', ratio: 0.18, color: '#52c41a' },\n    { type: '非裔美国人', ratio: 0.13, color: '#faad14' },\n    { type: '亚裔', ratio: 0.06, color: '#f5222d' },\n    { type: '其他', ratio: 0.03, color: '#722ed1' },\n  ];\n\n  // 美国主要城市坐标（虚构人口数据）\n  const cities = [\n    { name: '纽约', lng: -74.0059, lat: 40.7128, population: 850 },\n    { name: '洛杉矶', lng: -118.2437, lat: 34.0522, population: 400 },\n    { name: '芝加哥', lng: -87.6298, lat: 41.8781, population: 270 },\n    { name: '休斯顿', lng: -95.3698, lat: 29.7604, population: 230 },\n    { name: '费城', lng: -75.1652, lat: 39.9526, population: 160 },\n    { name: '凤凰城', lng: -112.074, lat: 33.4484, population: 170 },\n    { name: '圣安东尼奥', lng: -98.4936, lat: 29.4241, population: 150 },\n    { name: '圣地亚哥', lng: -117.1611, lat: 32.7157, population: 140 },\n    { name: '达拉斯', lng: -96.797, lat: 32.7767, population: 130 },\n    { name: '圣何塞', lng: -121.8863, lat: 37.3382, population: 100 },\n    { name: '奥斯汀', lng: -97.7431, lat: 30.2672, population: 95 },\n    { name: '底特律', lng: -83.0458, lat: 42.3314, population: 67 },\n    { name: '迈阿密', lng: -80.1918, lat: 25.7617, population: 47 },\n    { name: '西雅图', lng: -122.3321, lat: 47.6062, population: 75 },\n    { name: '丹佛', lng: -104.9903, lat: 39.7392, population: 72 },\n  ];\n\n  // 生成虚构的人种分布点数据\n  const ethnicData = [];\n  cities.forEach((city) => {\n    ethnicGroups.forEach((group) => {\n      // 根据人种比例和城市人口计算点数\n      const pointCount = Math.floor((city.population * group.ratio) / 10); // 每10万人一个点\n\n      for (let i = 0; i < pointCount; i++) {\n        // 在城市周围随机分布点，不同人种有不同的聚集模式\n        let angle = Math.random() * 2 * Math.PI;\n        let distance = Math.random() * 1.5; // 1.5度范围内分布\n\n        // 模拟不同人种的聚集特征\n        if (group.type === '亚裔') {\n          // 亚裔倾向于聚集在特定区域\n          distance = Math.random() * 0.8;\n        } else if (group.type === '西班牙裔') {\n          // 西班牙裔在南部城市更集中\n          if (city.lat < 35) distance = Math.random() * 0.6;\n        }\n\n        ethnicData.push({\n          city: city.name,\n          lng: city.lng + Math.cos(angle) * distance,\n          lat: city.lat + Math.sin(angle) * distance,\n          ethnicity: group.type,\n          value: 10, // 每个点代表10万人\n        });\n      }\n    });\n  });\n\n  const chart = new Chart({\n    container: 'container',\n    autoFit: true,\n  });\n\n  chart.options({\n    type: 'geoView',\n    coordinate: { type: 'albersUsa' },\n    children: [\n      {\n        type: 'geoPath',\n        data: states,\n        style: {\n          fill: '#f5f5f5',\n          stroke: '#d0d0d0',\n          lineWidth: 1,\n        },\n      },\n      {\n        type: 'point',\n        data: ethnicData,\n        encode: {\n          x: 'lng',\n          y: 'lat',\n          color: 'ethnicity',\n          shape: 'ethnicity',\n          size: 2,\n        },\n        style: {\n          opacity: 0.7,\n          stroke: 'white',\n          lineWidth: 0.5,\n        },\n        scale: {\n          color: {\n            domain: ['白人', '西班牙裔', '非裔美国人', '亚裔', '其他'],\n            range: ['#1890ff', '#52c41a', '#faad14', '#f5222d', '#722ed1'],\n          },\n          shape: {\n            domain: ['白人', '西班牙裔', '非裔美国人', '亚裔', '其他'],\n            range: ['point', 'square', 'triangle', 'diamond', 'cross'],\n          },\n        },\n        tooltip: {\n          title: 'city',\n          items: [\n            { name: '人种', field: 'ethnicity' },\n            { name: '人口', field: 'value', valueFormatter: (v) => `${v}万人` },\n          ],\n        },\n      },\n    ],\n  });\n\n  chart.render();\n});\n",paraId:15,tocIndex:3},{value:"说明",paraId:16,tocIndex:3},{value:"：",paraId:16,tocIndex:3},{value:"使用虚构的人种分布数据展示美国主要城市的人口构成",paraId:17,tocIndex:3},{value:"不同颜色和形状代表不同人种群体",paraId:17,tocIndex:3},{value:"通过点的分布密度可以观察各地区的人种分布特征和聚集模式",paraId:17,tocIndex:3},{value:"模拟了真实的人种地理分布规律，如亚裔在西海岸聚集、西班牙裔在南部更集中等",paraId:17,tocIndex:3},{value:"例子 1: ",paraId:18,tocIndex:4},{value:"不适合精确数值比较",paraId:18,tocIndex:4},{value:"点描法地图侧重于显示分布模式和密度，不适合需要精确比较具体数值的场景。如果需要精确对比不同地区的数值大小，应使用",paraId:19,tocIndex:4},{value:"分级统计地图",paraId:20,tocIndex:4},{value:"或",paraId:19,tocIndex:4},{value:"带气泡的地图",paraId:21,tocIndex:4},{value:"。",paraId:19,tocIndex:4},{value:"例子 2: ",paraId:22,tocIndex:4},{value:"不适合展示连续表面数据",paraId:22,tocIndex:4},{value:"对于温度、降水量等连续变化的表面数据，点描法地图的离散特性无法很好地表现数据的连续性，此时应考虑使用",paraId:23,tocIndex:4},{value:"热力图",paraId:24,tocIndex:4},{value:"或",paraId:23,tocIndex:4},{value:"等高线图",paraId:25,tocIndex:4},{value:"。",paraId:23,tocIndex:4},{value:"带气泡的地图",paraId:26,tocIndex:5},{value:"点描法地图使用密集的小点表示数据分布，适合展示分布模式和密度",paraId:27,tocIndex:6},{value:"气泡地图使用大小不同的圆圈表示数值大小，适合精确比较不同地区的数据量级",paraId:27,tocIndex:6},{value:"点描法地图更适合展示连续分布，气泡地图更适合展示离散的数据点",paraId:27,tocIndex:6},{value:"分级统计地图",paraId:28,tocIndex:6},{value:"点描法地图通过点的分布密度表示数据特征，不受行政区划限制",paraId:29,tocIndex:7},{value:"分级统计图通过区域颜色表示数据范围，与行政区划边界相关",paraId:29,tocIndex:7},{value:"点描法地图更适合展示连续的空间分布，分级统计图更适合展示区域间的对比",paraId:29,tocIndex:7}]},3365:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(67090);const t=[{value:"漏斗图是一种特殊的可视化图表，用于展示业务过程中数据在不同阶段的流转情况。它因形状类似漏斗而得名，从上到下依次展示各个阶段的数据量，通常上宽下窄，反映数据流失或转化的过程。",paraId:0,tocIndex:0},{value:"漏斗图特别适合用于可视化业务流程中的转化率，例如销售流程、用户注册流程或营销漏斗等。通过漏斗图，可以直观地观察到各个阶段的数据变化，识别出关键的转化环节或瓶颈。",paraId:1,tocIndex:0},{value:"漏斗图的每一层代表流程中的一个阶段，层的宽度或面积通常与该阶段的数据量成正比，从而清晰地反映出转化过程中的数据损失情况。",paraId:2,tocIndex:0},{value:"英文名",paraId:3,tocIndex:0},{value:"：Funnel Chart, Funnel Diagram",paraId:3,tocIndex:0},{value:"图表类型",paraId:4,tocIndex:2},{value:"基础漏斗图",paraId:4,tocIndex:2},{value:"适合的数据",paraId:4,tocIndex:2},{value:"有序分类数据：表示流程各阶段的分类字段、每个阶段的数值字段",paraId:4,tocIndex:2},{value:"功能",paraId:4,tocIndex:2},{value:"展示业务流程各阶段的数据流转和转化率",paraId:4,tocIndex:2},{value:"数据与图形的映射",paraId:4,tocIndex:2},{value:"分类字段映射到漏斗的各层",paraId:4,tocIndex:2},{value:"数值字段映射到漏斗各层的宽度或面积",paraId:4,tocIndex:2},{value:"颜色区分不同阶段",paraId:4,tocIndex:2},{value:"适合的场景",paraId:4,tocIndex:2},{value:"分析多阶段流程中的转化情况和流失节点",paraId:4,tocIndex:2},{value:"例子 1: ",paraId:5,tocIndex:4},{value:"适合展示销售流程的转化分析",paraId:5,tocIndex:4},{value:"下图展示了销售漏斗中从获取潜在客户到最终成交的各个阶段转化情况。",paraId:6,tocIndex:4},{value:"stage（阶段）",paraId:7,tocIndex:4},{value:"value（数量）",paraId:7,tocIndex:4},{value:"访问",paraId:7,tocIndex:4},{value:"8043",paraId:7,tocIndex:4},{value:"咨询",paraId:7,tocIndex:4},{value:"2136",paraId:7,tocIndex:4},{value:"报价",paraId:7,tocIndex:4},{value:"908",paraId:7,tocIndex:4},{value:"议价",paraId:7,tocIndex:4},{value:"691",paraId:7,tocIndex:4},{value:"成交",paraId:7,tocIndex:4},{value:"527",paraId:7,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { stage: '访问', value: 8043 },\n    { stage: '咨询', value: 2136 },\n    { stage: '报价', value: 908 },\n    { stage: '议价', value: 691 },\n    { stage: '成交', value: 527 },\n  ],\n  encode: {\n    x: 'stage',\n    y: 'value',\n    color: 'stage',\n    shape: 'funnel',\n  },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  transform: [\n    {\n      type: 'symmetryY',\n    },\n  ],\n  scale: {\n    color: {\n      palette: 'spectral',\n    },\n  },\n  style: {\n    labelText: (d) => `${d.stage}: ${d.value}`,\n  },\n  animate: { enter: { type: 'fadeIn' } },\n  axis: false,\n  labels: [\n    {\n      text: (d) => `${d.stage}\\n${d.value}`,\n      position: 'inside',\n      transform: [{ type: 'contrastReverse' }],\n    },\n  ],\n  legend: false,\n});\n\nchart.render();\n",paraId:8,tocIndex:4},{value:"说明",paraId:9,tocIndex:4},{value:" ：",paraId:9,tocIndex:4},{value:"stage",paraId:10,tocIndex:4},{value:" 字段映射到漏斗的各个层级，表示销售流程的不同阶段",paraId:10,tocIndex:4},{value:"value",paraId:10,tocIndex:4},{value:" 字段映射到各层的宽度，直观展示了从漏斗顶部到底部的转化情况",paraId:10,tocIndex:4},{value:"通过漏斗形状，可以清晰地看出各阶段之间的转化率和流失情况",paraId:10,tocIndex:4},{value:"例子 2: ",paraId:11,tocIndex:4},{value:"适合展示网站流量转化分析",paraId:11,tocIndex:4},{value:"漏斗图可以有效地分析网站流量从访问到最终行为的转化过程，帮助识别用户流失的关键环节。",paraId:12,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { stage: '浏览首页', value: 100000, percent: '100%' },\n    { stage: '搜索产品', value: 60000, percent: '60%' },\n    { stage: '查看商品详情', value: 30000, percent: '30%' },\n    { stage: '加入购物车', value: 10000, percent: '10%' },\n    { stage: '完成购买', value: 5000, percent: '5%' },\n  ],\n  encode: {\n    x: 'stage',\n    y: 'value',\n    color: 'stage',\n    shape: 'funnel',\n  },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  transform: [\n    {\n      type: 'symmetryY',\n    },\n  ],\n  scale: {\n    color: {\n      palette: 'blues',\n    },\n  },\n  style: {\n    labelText: (d) => `${d.stage}: ${d.percent}`,\n  },\n  animate: { enter: { type: 'fadeIn' } },\n  axis: false,\n  labels: [\n    {\n      text: (d) => `${d.stage}\\n${d.percent}`,\n      position: 'inside',\n      transform: [{ type: 'contrastReverse' }],\n    },\n  ],\n  legend: false,\n});\n\nchart.render();\n",paraId:13,tocIndex:4},{value:"说明",paraId:14,tocIndex:4},{value:"：",paraId:14,tocIndex:4},{value:"每一层代表网站流量转化的不同阶段",paraId:15,tocIndex:4},{value:"层的宽度反映了该阶段的用户数量",paraId:15,tocIndex:4},{value:"通过比较相邻层的差异，可以发现用户流失的主要环节",paraId:15,tocIndex:4},{value:"添加了转化百分比的标签，更直观地展示转化效果",paraId:15,tocIndex:4},{value:"例子 3: ",paraId:16,tocIndex:4},{value:"对比漏斗图展示不同渠道的转化效果",paraId:16,tocIndex:4},{value:"当需要比较不同渠道或时期的转化效果时，可以使用对比漏斗图进行分析。",paraId:17,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  data: [\n    { stage: '访问', value: 8043, category: '渠道A' },\n    { stage: '咨询', value: 2136, category: '渠道A' },\n    { stage: '报价', value: 908, category: '渠道A' },\n    { stage: '议价', value: 691, category: '渠道A' },\n    { stage: '成交', value: 527, category: '渠道A' },\n    { stage: '访问', value: 6841, category: '渠道B' },\n    { stage: '咨询', value: 2761, category: '渠道B' },\n    { stage: '报价', value: 1098, category: '渠道B' },\n    { stage: '议价', value: 624, category: '渠道B' },\n    { stage: '成交', value: 487, category: '渠道B' },\n  ],\n  axis: false,\n  children: [\n    {\n      type: 'interval',\n      region: { start: { x: 0, y: 0 }, end: { x: 0.48, y: 1 } },\n      transform: [{ type: 'filter', callback: (d) => d.category === '渠道A' }],\n      encode: {\n        x: 'stage',\n        y: 'value',\n        color: 'stage',\n        shape: 'funnel',\n      },\n      coordinate: { transform: [{ type: 'transpose' }] },\n      transform: [\n        {\n          type: 'symmetryY',\n        },\n      ],\n      scale: {\n        color: { palette: 'spectral' },\n      },\n      style: {\n        labelText: (d) => `${d.value}`,\n      },\n      animate: { enter: { type: 'fadeIn' } },\n      axis: false,\n      labels: [\n        {\n          text: (d) => `${d.value}`,\n          position: 'inside',\n          transform: [{ type: 'contrastReverse' }],\n        },\n      ],\n      title: '渠道A',\n    },\n    {\n      type: 'interval',\n      region: { start: { x: 0.52, y: 0 }, end: { x: 1, y: 1 } },\n      transform: [{ type: 'filter', callback: (d) => d.category === '渠道B' }],\n      encode: {\n        x: 'stage',\n        y: 'value',\n        color: 'stage',\n        shape: 'funnel',\n      },\n      coordinate: { transform: [{ type: 'transpose' }] },\n      transform: [\n        {\n          type: 'symmetryY',\n        },\n      ],\n      scale: {\n        color: { palette: 'spectral' },\n      },\n      style: {\n        labelText: (d) => `${d.value}`,\n      },\n      animate: { enter: { type: 'fadeIn' } },\n      axis: false,\n      labels: [\n        {\n          text: (d) => `${d.value}`,\n          position: 'inside',\n          transform: [{ type: 'contrastReverse' }],\n        },\n      ],\n      title: '渠道B',\n    },\n  ],\n  legend: false,\n});\n\nchart.render();\n",paraId:18,tocIndex:4},{value:"说明",paraId:19,tocIndex:4},{value:"：",paraId:19,tocIndex:4},{value:"左右并排展示两个渠道的转化漏斗，实现直观对比",paraId:20,tocIndex:4},{value:"通过相同的颜色编码对应相同的阶段，便于比较",paraId:20,tocIndex:4},{value:"可以清晰地观察到不同渠道在各个阶段的转化效率差异",paraId:20,tocIndex:4},{value:"例子 1: ",paraId:21,tocIndex:5},{value:"不适合展示无序或无明显层级关系的数据",paraId:21,tocIndex:5},{value:"漏斗图的本质是展示有序流程的转化过程，如果数据没有明确的先后顺序或层级关系，使用漏斗图会造成误导。对于这类数据，柱状图或饼图可能是更合适的选择。",paraId:22,tocIndex:5},{value:"例子 2: ",paraId:23,tocIndex:5},{value:"不适合展示各阶段数值波动或增长的数据",paraId:23,tocIndex:5},{value:"漏斗图通常表达的是数据从多到少的递减过程。如果流程中存在某些阶段的数值大于前一阶段（例如营销活动导致用户数增加），使用传统漏斗图会显得不合适，此时可以考虑使用其他图表形式。",paraId:24,tocIndex:5},{value:"对比漏斗图可以更清晰地展示两个不同流程或实体的转化效果对比，帮助识别不同方案之间的差异和优劣。",paraId:25,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { action: '访问', visitor: 500, site: '站点1' },\n    { action: '浏览', visitor: 400, site: '站点1' },\n    { action: '交互', visitor: 300, site: '站点1' },\n    { action: '下单', visitor: 200, site: '站点1' },\n    { action: '完成', visitor: 100, site: '站点1' },\n    { action: '访问', visitor: 550, site: '站点2' },\n    { action: '浏览', visitor: 420, site: '站点2' },\n    { action: '交互', visitor: 280, site: '站点2' },\n    { action: '下单', visitor: 150, site: '站点2' },\n    { action: '完成', visitor: 80, site: '站点2' },\n  ],\n  scale: {\n    x: { padding: 0 },\n    color: { range: ['#0050B3', '#1890FF', '#40A9FF', '#69C0FF', '#BAE7FF'] },\n  },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  axis: false,\n  children: [\n    {\n      type: 'interval',\n      data: {\n        transform: [{ type: 'filter', callback: (d) => d.site === '站点1' }],\n      },\n      encode: { x: 'action', y: 'visitor', color: 'action', shape: 'funnel' },\n      style: { stroke: '#FFF' },\n      animate: { enter: { type: 'fadeIn' } },\n      labels: [\n        {\n          text: 'visitor',\n          position: 'inside',\n          transform: [{ type: 'contrastReverse' }],\n        },\n        {\n          text: 'action',\n          position: 'right',\n          dx: (d) => {\n            return d.action === '完成' ? 48 : 16;\n          },\n        },\n      ],\n    },\n    {\n      type: 'interval',\n      data: {\n        transform: [{ type: 'filter', callback: (d) => d.site === '站点2' }],\n      },\n      encode: {\n        x: 'action',\n        y: (d) => -d.visitor,\n        color: 'action',\n        shape: 'funnel',\n      },\n      style: { stroke: '#FFF' },\n      animate: { enter: { type: 'fadeIn' } },\n      labels: [\n        {\n          text: 'visitor',\n          position: 'inside',\n          transform: [{ type: 'contrastReverse' }],\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:26,tocIndex:7},{value:"说明",paraId:27,tocIndex:7},{value:"：",paraId:27,tocIndex:7},{value:"使用水平对比的布局展示两个站点的转化漏斗效果",paraId:28,tocIndex:7},{value:"上下两个漏斗分别展示不同站点的数据，便于直观对比",paraId:28,tocIndex:7},{value:"通过 y 轴负值变换实现下方漏斗的反向展示，形成镜像对比效果",paraId:28,tocIndex:7},{value:"相同的颜色编码和标签配置确保对比的一致性",paraId:28,tocIndex:7},{value:"金字塔形漏斗图是一种变体，通过对称的金字塔形状展示转化流程，能够更突出各阶段的转化率变化。",paraId:29,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  paddingRight: 80,\n  data: {\n    type: 'inline',\n    value: [\n      { action: '浏览网站', pv: 50000 },\n      { action: '放入购物车', pv: 35000 },\n      { action: '生成订单', pv: 25000 },\n      { action: '支付订单', pv: 15000 },\n      { action: '完成交易', pv: 8000 },\n    ],\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) =>\n          data.map((d) => ({\n            ...d,\n            rate: d.pv / data[0].pv,\n          })),\n      },\n    ],\n  },\n  encode: { x: 'action', y: 'pv', color: 'action', shape: 'pyramid' },\n  transform: [{ type: 'symmetryY' }],\n  scale: { x: { padding: 0 } },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  animate: { enter: { type: 'fadeIn' } },\n  axis: false,\n  legend: { color: { position: 'bottom' } },\n  labels: [\n    { text: (d) => `${d.action} ${d.pv}`, textAlign: 'left' },\n    {\n      text: (d) => `${(d.rate * 100).toFixed(1)}%`,\n      position: 'inside',\n      transform: [{ type: 'contrastReverse' }],\n    },\n  ],\n});\n\nchart.render();\n",paraId:30,tocIndex:8},{value:"说明",paraId:31,tocIndex:8},{value:"：",paraId:31,tocIndex:8},{value:"使用 ",paraId:32,tocIndex:8},{value:'shape: "pyramid"',paraId:32,tocIndex:8},{value:" 创建对称的金字塔形状，视觉效果更加平衡",paraId:32,tocIndex:8},{value:"通过 ",paraId:32,tocIndex:8},{value:"symmetryY",paraId:32,tocIndex:8},{value:" 变换实现上下对称的金字塔布局",paraId:32,tocIndex:8},{value:"自动计算并显示每个阶段的转化率百分比",paraId:32,tocIndex:8},{value:"横向展示便于阅读标签信息，特别适合阶段名称较长的场景",paraId:32,tocIndex:8},{value:"柱状图",paraId:33,tocIndex:9},{value:"漏斗图强调的是流程转化和各阶段的连续关系",paraId:34,tocIndex:10},{value:"柱状图更适合直接比较不同类别间的数值大小",paraId:34,tocIndex:10},{value:"当需要详细分析流程转化时，漏斗图能提供更直观的视觉效果",paraId:34,tocIndex:10},{value:"饼图",paraId:35,tocIndex:10},{value:"漏斗图展示的是有序流程中的各个阶段及其关系",paraId:36,tocIndex:11},{value:"饼图展示的是整体中各部分的占比关系，不强调顺序",paraId:36,tocIndex:11},{value:"当关注各阶段间的转化而非单纯的占比时，漏斗图是更好的选择",paraId:36,tocIndex:11}]},35939:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(5305);const t=[{value:"甘特图是一种项目管理工具，以图示的方式通过活动列表和时间刻度表示出特定项目的顺序与持续时间。甘特图内在思想简单，基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。",paraId:0,tocIndex:0},{value:"甘特图通过条状图来显示项目、进度和其他时间相关的系统进展的内在关系随着时间进展的情况。这种图表通过任务列表和时间刻度形象地表达了项目计划中各项任务的起止时间以及任务之间的相互关系。",paraId:1,tocIndex:0},{value:"甘特图是项目管理中最重要的工具之一，广泛应用于项目规划、任务调度、资源管理等场景中。",paraId:2,tocIndex:0},{value:"英文名",paraId:3,tocIndex:0},{value:"：Gantt Chart",paraId:3,tocIndex:0},{value:"图表类型",paraId:4,tocIndex:1},{value:"基础甘特图",paraId:4,tocIndex:1},{value:"适合的数据",paraId:4,tocIndex:1},{value:"项目数据：一个任务名称字段、一个开始时间字段、一个结束时间字段",paraId:4,tocIndex:1},{value:"功能",paraId:4,tocIndex:1},{value:"展示项目任务的时间安排和执行进度",paraId:4,tocIndex:1},{value:"数据与图形的映射",paraId:4,tocIndex:1},{value:"任务名称字段映射到纵轴的位置",paraId:4,tocIndex:1},{value:"开始时间和结束时间字段映射到条形的起止位置",paraId:4,tocIndex:1},{value:"任务持续时间映射到条形的长度",paraId:4,tocIndex:1},{value:"适合的数据条数",paraId:4,tocIndex:1},{value:"不超过 20 个任务",paraId:4,tocIndex:1},{value:"例子 1: ",paraId:5,tocIndex:3},{value:"适合应用到项目进度管理",paraId:5,tocIndex:3},{value:"下图是一个活动策划项目的甘特图，展示了不同任务的时间安排和依赖关系。",paraId:6,tocIndex:3},{value:"name（任务名称）",paraId:7,tocIndex:3},{value:"startTime（开始时间）",paraId:7,tocIndex:3},{value:"endTime（结束时间）",paraId:7,tocIndex:3},{value:"活动策划",paraId:7,tocIndex:3},{value:"1",paraId:7,tocIndex:3},{value:"4",paraId:7,tocIndex:3},{value:"场地物流规划",paraId:7,tocIndex:3},{value:"3",paraId:7,tocIndex:3},{value:"13",paraId:7,tocIndex:3},{value:"选择供应商",paraId:7,tocIndex:3},{value:"5",paraId:7,tocIndex:3},{value:"8",paraId:7,tocIndex:3},{value:"租赁场地",paraId:7,tocIndex:3},{value:"9",paraId:7,tocIndex:3},{value:"13",paraId:7,tocIndex:3},{value:"预定餐饮服务商",paraId:7,tocIndex:3},{value:"10",paraId:7,tocIndex:3},{value:"14",paraId:7,tocIndex:3},{value:"租赁活动装饰团队",paraId:7,tocIndex:3},{value:"12",paraId:7,tocIndex:3},{value:"17",paraId:7,tocIndex:3},{value:"彩排",paraId:7,tocIndex:3},{value:"14",paraId:7,tocIndex:3},{value:"16",paraId:7,tocIndex:3},{value:"活动庆典",paraId:7,tocIndex:3},{value:"17",paraId:7,tocIndex:3},{value:"18",paraId:7,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { name: '活动策划', startTime: 1, endTime: 4 },\n    { name: '场地物流规划', startTime: 3, endTime: 13 },\n    { name: '选择供应商', startTime: 5, endTime: 8 },\n    { name: '租赁场地', startTime: 9, endTime: 13 },\n    { name: '预定餐饮服务商', startTime: 10, endTime: 14 },\n    { name: '租赁活动装饰团队', startTime: 12, endTime: 17 },\n    { name: '彩排', startTime: 14, endTime: 16 },\n    { name: '活动庆典', startTime: 17, endTime: 18 },\n  ],\n  encode: {\n    x: 'name',\n    y: 'startTime',\n    y1: 'endTime',\n    color: 'name',\n  },\n  coordinate: {\n    transform: [{ type: 'transpose' }],\n  },\n  axis: {\n    x: {\n      title: '任务',\n    },\n    y: {\n      title: '时间（天）',\n    },\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:8,tocIndex:3},{value:"说明",paraId:9,tocIndex:3},{value:"：",paraId:9,tocIndex:3},{value:"name",paraId:10,tocIndex:3},{value:" 字段映射到横轴位置，用于区分不同任务",paraId:10,tocIndex:3},{value:"startTime",paraId:10,tocIndex:3},{value:" 和 ",paraId:10,tocIndex:3},{value:"endTime",paraId:10,tocIndex:3},{value:" 字段映射到 ",paraId:10,tocIndex:3},{value:"y",paraId:10,tocIndex:3},{value:" 和 ",paraId:10,tocIndex:3},{value:"y1",paraId:10,tocIndex:3},{value:" 通道，表示任务的起止时间",paraId:10,tocIndex:3},{value:"color",paraId:10,tocIndex:3},{value:" 通道使用任务名称，用不同颜色区分各个任务",paraId:10,tocIndex:3},{value:"使用 ",paraId:10,tocIndex:3},{value:"transpose",paraId:10,tocIndex:3},{value:" 坐标变换，将垂直方向的时间轴转换为水平方向",paraId:10,tocIndex:3},{value:"例子 2: ",paraId:11,tocIndex:3},{value:"适合展示带有时序动画的项目进度",paraId:11,tocIndex:3},{value:"通过动画效果可以更生动地展示项目任务的时间顺序和执行过程。",paraId:12,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { name: '需求分析', startTime: 1, endTime: 5, phase: '规划阶段' },\n    { name: '系统设计', startTime: 4, endTime: 10, phase: '设计阶段' },\n    { name: '前端开发', startTime: 8, endTime: 20, phase: '开发阶段' },\n    { name: '后端开发', startTime: 10, endTime: 22, phase: '开发阶段' },\n    { name: '集成测试', startTime: 18, endTime: 25, phase: '测试阶段' },\n    { name: '系统部署', startTime: 24, endTime: 28, phase: '部署阶段' },\n    { name: '用户验收', startTime: 26, endTime: 30, phase: '验收阶段' },\n  ],\n  encode: {\n    x: 'name',\n    y: 'startTime',\n    y1: 'endTime',\n    color: 'phase',\n    enterDuration: (d) => (d.endTime - d.startTime) * 200,\n    enterDelay: (d) => d.startTime * 100,\n  },\n  coordinate: {\n    transform: [{ type: 'transpose' }],\n  },\n  scale: {\n    enterDuration: {\n      range: [0, 5000],\n    },\n  },\n  axis: {\n    x: {\n      title: '项目任务',\n    },\n    y: {\n      title: '时间（周）',\n    },\n  },\n  legend: {\n    color: {\n      title: '项目阶段',\n    },\n  },\n});\n\nchart.render();\n",paraId:13,tocIndex:3},{value:"说明",paraId:14,tocIndex:3},{value:"：",paraId:14,tocIndex:3},{value:"phase",paraId:15,tocIndex:3},{value:" 字段映射到颜色，用不同颜色区分项目阶段",paraId:15,tocIndex:3},{value:"enterDuration",paraId:15,tocIndex:3},{value:" 和 ",paraId:15,tocIndex:3},{value:"enterDelay",paraId:15,tocIndex:3},{value:" 通道实现时序动画效果",paraId:15,tocIndex:3},{value:"动画持续时间与任务持续时间成正比，延迟时间与开始时间成正比",paraId:15,tocIndex:3},{value:"例子 3: ",paraId:16,tocIndex:3},{value:"适合展示多项目对比的甘特图",paraId:16,tocIndex:3},{value:"当需要对比多个项目的执行情况时，可以使用分组甘特图。",paraId:17,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { project: '项目A', task: '设计', startTime: 1, endTime: 5 },\n    { project: '项目A', task: '开发', startTime: 4, endTime: 12 },\n    { project: '项目A', task: '测试', startTime: 10, endTime: 15 },\n    { project: '项目B', task: '设计', startTime: 2, endTime: 6 },\n    { project: '项目B', task: '开发', startTime: 5, endTime: 14 },\n    { project: '项目B', task: '测试', startTime: 12, endTime: 16 },\n    { project: '项目C', task: '设计', startTime: 3, endTime: 8 },\n    { project: '项目C', task: '开发', startTime: 7, endTime: 16 },\n    { project: '项目C', task: '测试', startTime: 14, endTime: 18 },\n  ],\n  encode: {\n    x: (d) => `${d.project}-${d.task}`,\n    y: 'startTime',\n    y1: 'endTime',\n    color: 'project',\n  },\n  coordinate: {\n    transform: [{ type: 'transpose' }],\n  },\n  axis: {\n    x: {\n      title: '项目任务',\n      labelTransform: 'rotate(45)',\n    },\n    y: {\n      title: '时间（周）',\n    },\n  },\n  legend: {\n    color: {\n      title: '项目',\n    },\n  },\n});\n\nchart.render();\n",paraId:18,tocIndex:3},{value:"说明",paraId:19,tocIndex:3},{value:"：",paraId:19,tocIndex:3},{value:"组合 ",paraId:20,tocIndex:3},{value:"project",paraId:20,tocIndex:3},{value:" 和 ",paraId:20,tocIndex:3},{value:"task",paraId:20,tocIndex:3},{value:" 字段创建唯一的标识符",paraId:20,tocIndex:3},{value:"series",paraId:20,tocIndex:3},{value:" 通道用于在同一位置堆叠不同任务",paraId:20,tocIndex:3},{value:"标签旋转 45 度以避免重叠",paraId:20,tocIndex:3},{value:"例子 4: ",paraId:21,tocIndex:3},{value:"适合展示带有里程碑的甘特图",paraId:21,tocIndex:3},{value:"在项目管理中，里程碑是重要的时间节点，可以通过不同的标记来突出显示。",paraId:22,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  children: [\n    {\n      type: 'interval',\n      data: [\n        { name: '市场调研', startTime: 1, endTime: 4, type: '任务' },\n        { name: '产品设计', startTime: 3, endTime: 8, type: '任务' },\n        { name: '技术开发', startTime: 6, endTime: 15, type: '任务' },\n        { name: '内测试运行', startTime: 14, endTime: 18, type: '任务' },\n        { name: '市场推广', startTime: 17, endTime: 22, type: '任务' },\n        { name: '正式发布', startTime: 20, endTime: 24, type: '任务' },\n      ],\n      encode: {\n        x: 'name',\n        y: 'startTime',\n        y1: 'endTime',\n        color: 'type',\n      },\n      coordinate: {\n        transform: [{ type: 'transpose' }],\n      },\n    },\n    {\n      type: 'point',\n      data: [\n        { name: '调研完成', time: 4, milestone: '里程碑' },\n        { name: '设计确认', time: 8, milestone: '里程碑' },\n        { name: '开发完成', time: 15, milestone: '里程碑' },\n        { name: '产品发布', time: 24, milestone: '里程碑' },\n      ],\n      encode: {\n        x: 'name',\n        y: 'time',\n        shape: 'diamond',\n        color: 'milestone',\n        size: 8,\n      },\n      coordinate: {\n        transform: [{ type: 'transpose' }],\n      },\n    },\n  ],\n  axis: {\n    x: {\n      title: '项目活动',\n    },\n    y: {\n      title: '时间（周）',\n    },\n  },\n  legend: {\n    color: {\n      title: '类型',\n    },\n  },\n});\n\nchart.render();\n",paraId:23,tocIndex:3},{value:"说明",paraId:24,tocIndex:3},{value:"：",paraId:24,tocIndex:3},{value:"使用复合视图（view）结合 interval 和 point 图形",paraId:25,tocIndex:3},{value:"interval 展示任务时间段，point 展示里程碑节点",paraId:25,tocIndex:3},{value:"里程碑使用钻石形状（diamond）突出显示",paraId:25,tocIndex:3},{value:"例子 1: ",paraId:26,tocIndex:4},{value:"不适合展示没有明确时间维度的数据",paraId:26,tocIndex:4},{value:"甘特图主要用于展示时间相关的项目或任务，对于没有时间维度的分类对比，应该使用柱状图等其他图表类型。",paraId:27,tocIndex:4},{value:"例子 2: ",paraId:28,tocIndex:4},{value:"不适合展示过于细粒度的时间数据",paraId:28,tocIndex:4},{value:"当任务过多或时间粒度过细时，甘特图会变得拥挤难以阅读。此时应该考虑数据聚合或使用其他可视化方式。",paraId:29,tocIndex:4},{value:"例子 3: ",paraId:30,tocIndex:4},{value:"不适合展示连续性的数值变化趋势",paraId:30,tocIndex:4},{value:"甘特图主要展示离散的任务时间段，对于连续性的数值变化应该使用折线图或面积图。",paraId:31,tocIndex:4},{value:"可以通过颜色或填充模式来显示任务的完成进度。",paraId:32,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  children: [\n    {\n      type: 'interval',\n      data: [\n        { name: '需求分析', startTime: 1, endTime: 5, progress: 100 },\n        { name: 'UI设计', startTime: 3, endTime: 8, progress: 80 },\n        { name: '前端开发', startTime: 6, endTime: 15, progress: 60 },\n        { name: '后端开发', startTime: 8, endTime: 16, progress: 40 },\n        { name: '测试验收', startTime: 14, endTime: 18, progress: 0 },\n      ],\n      encode: {\n        x: 'name',\n        y: 'startTime',\n        y1: 'endTime',\n        color: 'lightgray',\n      },\n      coordinate: {\n        transform: [{ type: 'transpose' }],\n      },\n      style: {\n        fillOpacity: 0.3,\n      },\n    },\n    {\n      type: 'interval',\n      data: [\n        { name: '需求分析', startTime: 1, currentTime: 5, progress: 100 },\n        { name: 'UI设计', startTime: 3, currentTime: 6.6, progress: 80 },\n        { name: '前端开发', startTime: 6, currentTime: 11.4, progress: 60 },\n        { name: '后端开发', startTime: 8, currentTime: 11.2, progress: 40 },\n      ],\n      encode: {\n        x: 'name',\n        y: 'startTime',\n        y1: 'currentTime',\n        color: (d) =>\n          d.progress >= 100 ? 'green' : d.progress >= 50 ? 'orange' : 'red',\n      },\n      coordinate: {\n        transform: [{ type: 'transpose' }],\n      },\n    },\n  ],\n  axis: {\n    x: {\n      title: '项目任务',\n    },\n    y: {\n      title: '时间（周）',\n    },\n  },\n});\n\nchart.render();\n",paraId:33,tocIndex:6},{value:"可以通过连线或箭头来显示任务之间的依赖关系。",paraId:34,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  children: [\n    {\n      type: 'interval',\n      data: [\n        { name: '任务A', startTime: 1, endTime: 5, id: 'A' },\n        { name: '任务B', startTime: 5, endTime: 10, id: 'B' },\n        { name: '任务C', startTime: 8, endTime: 15, id: 'C' },\n        { name: '任务D', startTime: 15, endTime: 20, id: 'D' },\n      ],\n      encode: {\n        x: 'name',\n        y: 'startTime',\n        y1: 'endTime',\n        color: 'name',\n      },\n      coordinate: {\n        transform: [{ type: 'transpose' }],\n      },\n    },\n    {\n      type: 'link',\n      data: [\n        { source: '任务A', target: '任务B', x1: 5, x2: 5 },\n        { source: '任务B', target: '任务C', x1: 10, x2: 8 },\n        { source: '任务C', target: '任务D', x1: 15, x2: 15 },\n      ],\n      encode: {\n        x: 'source',\n        y: 'x1',\n        x1: 'target',\n        y1: 'x2',\n      },\n      coordinate: {\n        transform: [{ type: 'transpose' }],\n      },\n      style: {\n        stroke: '#666',\n        strokeWidth: 2,\n        lineDash: [4, 4],\n      },\n    },\n  ],\n  axis: {\n    x: {\n      title: '项目任务',\n    },\n    y: {\n      title: '时间（周）',\n    },\n  },\n});\n\nchart.render();\n",paraId:35,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { name: 'event planning', startTime: 1, endTime: 4 },\n    { name: 'layout logistics', startTime: 3, endTime: 13 },\n    { name: 'select vendors', startTime: 5, endTime: 8 },\n    { name: 'hire venue', startTime: 9, endTime: 13 },\n    { name: 'hire caterer', startTime: 10, endTime: 14 },\n    { name: 'hire event decorators', startTime: 12, endTime: 17 },\n    { name: 'rehearsal', startTime: 14, endTime: 16 },\n    { name: 'event celebration', startTime: 17, endTime: 18 },\n  ],\n  encode: {\n    x: 'name',\n    y: ['endTime', 'startTime'],\n    color: 'name',\n    enterDuration: (d) => d.endTime - d.startTime,\n    enterDelay: 'startTime',\n  },\n  scale: { enterDuration: { zero: true, range: [0, 3000] } },\n  coordinate: { transform: [{ type: 'transpose' }] },\n});\n\nchart.render();\n",paraId:36,tocIndex:8},{value:"柱状图",paraId:37,tocIndex:9},{value:"甘特图主要用于展示任务的时间安排和项目进度",paraId:38,tocIndex:10},{value:"柱状图主要用于对比不同类别的数值大小",paraId:38,tocIndex:10},{value:"折线图",paraId:39,tocIndex:10},{value:"甘特图展示任务的持续时间和相互关系",paraId:40,tocIndex:11},{value:"折线图主要展示数值随时间的连续变化趋势",paraId:40,tocIndex:11},{value:"面积图",paraId:41,tocIndex:11},{value:"甘特图使用离散的条形展示任务时间段",paraId:42,tocIndex:12},{value:"面积图使用连续的填充区域展示数值随时间的变化趋势",paraId:42,tocIndex:12}]},36928:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(96194);const t=[{value:"仪表盘是一种半圆或圆形的可视化图表，用于展示数据在指定范围内的位置。它通过指针和刻度的方式，模拟物理仪表（如速度表、压力表）的显示效果，直观地表达数据值相对于目标值或阈值的位置关系。",paraId:0,tocIndex:0},{value:"仪表盘特别适合显示进度、完成率或者在一定范围内的单一数值，可以通过颜色区分不同的数值区间，增强数据的可读性和警示效果。",paraId:1,tocIndex:0},{value:"在数据可视化中，仪表盘常用于表现关键绩效指标（KPI）、目标达成情况、系统状态监控等，能够帮助用户快速理解数据在预设目标中的表现。",paraId:2,tocIndex:0},{value:"英文名",paraId:3,tocIndex:0},{value:"：Gauge Chart, Dial Chart",paraId:3,tocIndex:0},{value:"图表类型",paraId:4,tocIndex:2},{value:"基础仪表盘",paraId:4,tocIndex:2},{value:"适合的数据",paraId:4,tocIndex:2},{value:"单一数值数据：当前值、目标值或总值、可选的阈值",paraId:4,tocIndex:2},{value:"功能",paraId:4,tocIndex:2},{value:"展示数据在指定范围内的位置，通过指针和刻度表示数值",paraId:4,tocIndex:2},{value:"数据与图形的映射",paraId:4,tocIndex:2},{value:"当前值映射到指针位置",paraId:4,tocIndex:2},{value:"总值定义刻度范围",paraId:4,tocIndex:2},{value:"可选的阈值映射为颜色分区",paraId:4,tocIndex:2},{value:"适合的场景",paraId:4,tocIndex:2},{value:"表达单一指标在目标值范围内的完成度或状态",paraId:4,tocIndex:2},{value:"例子 1: ",paraId:5,tocIndex:4},{value:"适合展示目标完成进度",paraId:5,tocIndex:4},{value:"下面的仪表盘展示了一个评分指标的完成情况，当前得分为 120，总分为 400。",paraId:6,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'gauge',\n  data: {\n    value: {\n      target: 120,\n      total: 400,\n      name: 'score',\n    },\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:7,tocIndex:4},{value:"说明",paraId:8,tocIndex:4},{value:" ：",paraId:8,tocIndex:4},{value:"target",paraId:9,tocIndex:4},{value:" 表示当前的得分，映射到仪表盘的指针位置",paraId:9,tocIndex:4},{value:"total",paraId:9,tocIndex:4},{value:" 表示总分，定义了仪表盘的刻度范围",paraId:9,tocIndex:4},{value:"name",paraId:9,tocIndex:4},{value:" 表示该指标的名称",paraId:9,tocIndex:4},{value:"仪表盘通过指针位置直观展示了当前得分在总分中的比例",paraId:9,tocIndex:4},{value:"例子 2: ",paraId:10,tocIndex:4},{value:"适合展示多阈值状态监控",paraId:10,tocIndex:4},{value:"仪表盘可以通过设置多个阈值和不同颜色，清晰地展示数据落在哪个区间，适用于系统状态监控、性能评估等场景。",paraId:11,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'gauge',\n  data: {\n    value: {\n      target: 159,\n      total: 400,\n      name: 'score',\n      thresholds: [100, 200, 400],\n    },\n  },\n  scale: {\n    color: {\n      range: ['#F4664A', '#FAAD14', 'green'],\n    },\n  },\n  style: {\n    textContent: (target, total) =>\n      `得分：${target}\\n占比：${((target / total) * 100).toFixed(0)}%`,\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:12,tocIndex:4},{value:"说明",paraId:13,tocIndex:4},{value:"：",paraId:13,tocIndex:4},{value:"通过 ",paraId:14,tocIndex:4},{value:"thresholds",paraId:14,tocIndex:4},{value:" 设置了三个区间：0-100、100-200 和 200-400",paraId:14,tocIndex:4},{value:"使用不同的颜色映射了各个区间：红色表示低分区间，黄色表示中等区间，绿色表示高分区间",paraId:14,tocIndex:4},{value:"自定义了文本内容，同时显示得分和占总分的百分比",paraId:14,tocIndex:4},{value:"颜色的变化直观地反映了数据所处的状态区间",paraId:14,tocIndex:4},{value:"例子 3: ",paraId:15,tocIndex:4},{value:"自定义仪表盘样式",paraId:15,tocIndex:4},{value:"仪表盘支持高度的样式自定义，可以根据业务需求调整外观和交互方式。",paraId:16,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'gauge',\n  data: {\n    value: {\n      target: 159,\n      total: 400,\n      name: 'score',\n      thresholds: [100, 200, 400],\n    },\n  },\n  scale: {\n    color: {\n      range: ['#F4664A', '#FAAD14', 'green'],\n    },\n  },\n  style: {\n    arcShape: 'round',\n    arcLineWidth: 2,\n    arcStroke: '#fff',\n    textContent: (target, total) =>\n      `得分：${target}\\n占比：${((target / total) * 100).toFixed(0)}%`,\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:17,tocIndex:4},{value:"说明",paraId:18,tocIndex:4},{value:"：",paraId:18,tocIndex:4},{value:"使用 ",paraId:19,tocIndex:4},{value:"arcShape: 'round'",paraId:19,tocIndex:4},{value:" 设置了圆弧的形状为圆角",paraId:19,tocIndex:4},{value:"通过 ",paraId:19,tocIndex:4},{value:"arcLineWidth",paraId:19,tocIndex:4},{value:" 和 ",paraId:19,tocIndex:4},{value:"arcStroke",paraId:19,tocIndex:4},{value:" 设置了圆弧的线宽和边框颜色",paraId:19,tocIndex:4},{value:"指针和文本的位置自动适应仪表盘的布局",paraId:19,tocIndex:4},{value:"圆角设计和细微的样式调整使仪表盘更加现代化和美观",paraId:19,tocIndex:4},{value:"例子 1: ",paraId:20,tocIndex:5},{value:"不适合展示多维度数据比较",paraId:20,tocIndex:5},{value:"仪表盘主要适合展示单一指标值在一定范围内的位置，不适合用于多维度数据的直接比较。如果需要比较多个类别或维度的数据，柱状图、雷达图等可能是更好的选择。",paraId:21,tocIndex:5},{value:"例子 2: ",paraId:22,tocIndex:5},{value:"不适合展示时间序列趋势",paraId:22,tocIndex:5},{value:"仪表盘展示的是某一时刻的静态数据，无法有效地表达数据随时间的变化趋势。对于需要展示随时间变化的数据，折线图或面积图更为适合。",paraId:23,tocIndex:5},{value:"仪表盘支持自定义指针的形状，可以根据业务场景调整指针的样式，使图表更具个性化。",paraId:24,tocIndex:7},{value:"import { Chart } from '@antv/g2';\nimport { Path } from '@antv/g';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nfunction getOrigin(points) {\n  if (points.length === 1) return points[0];\n  const [[x0, y0, z0 = 0], [x2, y2, z2 = 0]] = points;\n  return [(x0 + x2) / 2, (y0 + y2) / 2, (z0 + z2) / 2];\n}\n// 自定义指针形状\nconst customShape = (style) => {\n  return (points, value, coordinate, theme) => {\n    // 获取几何点中心坐标\n    const [x, y] = getOrigin(points);\n    const [cx, cy] = coordinate.getCenter();\n    // 计算指针方向角度\n    const angle = Math.atan2(y - cy, x - cx);\n    const length = 100; // 指针长度\n    const width = 8; // 指针底部宽度\n    // 构造指针三角形路径\n    return new Path({\n      style: {\n        d: [\n          ['M', cx + Math.cos(angle) * length, cy + Math.sin(angle) * length], // 顶点\n          [\n            'L',\n            cx + Math.cos(angle + Math.PI / 2) * width,\n            cy + Math.sin(angle + Math.PI / 2) * width,\n          ], // 底部左点\n          [\n            'L',\n            cx + Math.cos(angle - Math.PI / 2) * width,\n            cy + Math.sin(angle - Math.PI / 2) * width,\n          ], // 底部右点\n          ['Z'], // 闭合路径\n        ],\n        fill: '#30BF78', // 填充色\n      },\n    });\n  };\n};\n\nchart.options({\n  type: 'gauge',\n  data: {\n    value: {\n      target: 159,\n      total: 424,\n      name: 'score',\n    },\n  },\n  style: {\n    pointerShape: customShape,\n    pinShape: false,\n    textContent: (target, total) => {\n      return `得分：${target}\\n占比：${((target / total) * 100).toFixed(0)}%`;\n    },\n  },\n});\n\nchart.render();\n",paraId:25,tocIndex:7},{value:"说明",paraId:26,tocIndex:7},{value:"：",paraId:26,tocIndex:7},{value:"使用 ",paraId:27,tocIndex:7},{value:"pointerShape",paraId:27,tocIndex:7},{value:" 自定义了仪表盘的指针形状为三角形",paraId:27,tocIndex:7},{value:"通过 ",paraId:27,tocIndex:7},{value:"pinShape: false",paraId:27,tocIndex:7},{value:" 移除了指针中心的圆点",paraId:27,tocIndex:7},{value:"可以根据业务需求完全控制指针的外观、颜色和尺寸",paraId:27,tocIndex:7},{value:"饼图",paraId:28,tocIndex:8},{value:"仪表盘侧重展示单一数值在目标范围中的位置，强调数据与目标或阈值的关系",paraId:29,tocIndex:9},{value:"饼图侧重于展示多个部分在整体中的占比关系",paraId:29,tocIndex:9},{value:"当只关注单一值与总体的关系时，仪表盘提供更突出和直观的表现形式",paraId:29,tocIndex:9},{value:"柱状图",paraId:30,tocIndex:9},{value:"仪表盘适合展示单一数据点相对于固定范围的位置，强调完成度",paraId:31,tocIndex:10},{value:"柱状图更适合比较多个类别之间的数值大小差异",paraId:31,tocIndex:10},{value:"对于需要精确比较多个数值的场景，柱状图通常是更好的选择",paraId:31,tocIndex:10}]},97038:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(18831);const t=[{value:"热力图是一种通过颜色强度映射二维数据密度或数值大小的可视化图表，擅长揭示数据分布规律、聚类特征及异常点。热力图将两个分类/连续字段（如 x、y）映射为坐标轴，第三个数值字段（如 value）映射为颜色梯度，形成网格化的色块矩阵，通常冷色调（如蓝色）表示低值，暖色调（如红色）表示高值。",paraId:0,tocIndex:0},{value:"热力图特别适合展示大量数据点的分布特征，通过颜色的变化可以直观地反映数据集中的密度或强度变化，帮助识别数据中的模式和关系。在展示多维数据时，热力图比条形图或散点图更加直观，能够一目了然地显示数据的聚集区域和稀疏区域。",paraId:1,tocIndex:0},{value:"热力图广泛应用于地理空间分析、网站用户行为研究、科学研究中的相关性分析等多种场景。",paraId:2,tocIndex:0},{value:"英文名",paraId:3,tocIndex:0},{value:"：Heatmap, Heat Map",paraId:3,tocIndex:0},{value:"图表类型",paraId:4,tocIndex:2},{value:"边界未经平滑处理的热力图",paraId:4,tocIndex:2},{value:"适合的数据",paraId:4,tocIndex:2},{value:"三个连续字段",paraId:4,tocIndex:2},{value:"功能",paraId:4,tocIndex:2},{value:"观察数据的分布情况",paraId:4,tocIndex:2},{value:"数据与图形的映射",paraId:4,tocIndex:2},{value:"两个连续字段分别映射到 x 轴、y 轴。一个连续元数据映射到颜色",paraId:4,tocIndex:2},{value:"适合的数据条数",paraId:4,tocIndex:2},{value:"超过 30 条数据",paraId:4,tocIndex:2},{value:"图表类型",paraId:5,tocIndex:3},{value:"边界经平滑处理的热力图",paraId:5,tocIndex:3},{value:"适合的数据",paraId:5,tocIndex:3},{value:"三个连续字段",paraId:5,tocIndex:3},{value:"功能",paraId:5,tocIndex:3},{value:"展示数据的分布情况，加上统计算法可预测未知区域数据",paraId:5,tocIndex:3},{value:"数据与图形的映射",paraId:5,tocIndex:3},{value:"两个连续字段分别映射到 x 轴、y 轴。一个连续元数据映射到颜色",paraId:5,tocIndex:3},{value:"适合的数据条数",paraId:5,tocIndex:3},{value:"超过 30 条数据",paraId:5,tocIndex:3},{value:"例 1: ",paraId:6,tocIndex:5},{value:"适合展示二维数据的分布密度",paraId:6,tocIndex:5},{value:"下面这张热力图展示了二维空间上的温度分布情况。通过颜色的变化可以直观地看出不同区域的温度差异。",paraId:7,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  padding: 0,\n});\n\nchart.options({\n  type: 'view',\n  axis: false,\n  children: [\n    {\n      type: 'image',\n      style: {\n        src: 'https://gw.alipayobjects.com/zos/rmsportal/NeUTMwKtPcPxIFNTWZOZ.png',\n        x: '50%',\n        y: '50%',\n        width: '100%',\n        height: '100%',\n      },\n      tooltip: false,\n    },\n    {\n      type: 'heatmap',\n      data: {\n        type: 'fetch',\n        value: 'https://assets.antv.antgroup.com/g2/heatmap.json',\n      },\n      encode: {\n        x: 'g',\n        y: 'l',\n        color: 'tmp',\n      },\n      style: {\n        opacity: 0,\n      },\n      tooltip: false,\n    },\n  ],\n});\n\nchart.render();\n",paraId:8,tocIndex:5},{value:"说明",paraId:9,tocIndex:5},{value:"：",paraId:9,tocIndex:5},{value:"g",paraId:10,tocIndex:5},{value:" 字段映射到 x 轴，",paraId:10,tocIndex:5},{value:"l",paraId:10,tocIndex:5},{value:" 字段映射到 y 轴，表示二维空间中的位置",paraId:10,tocIndex:5},{value:"tmp",paraId:10,tocIndex:5},{value:" 字段映射到颜色，表示每个位置点的温度值",paraId:10,tocIndex:5},{value:"背景图像和热力叠加，直观展示温度分布情况",paraId:10,tocIndex:5},{value:"例 2: ",paraId:11,tocIndex:5},{value:"适合展示散点数据的密度分布",paraId:11,tocIndex:5},{value:"密度热力图可以展示散点数据的集中区域，下面的例子展示了钻石数据集中克拉数和价格的分布关系。",paraId:12,tocIndex:5},{value:"import { Chart } from '@antv/g2';\nimport DataSet from '@antv/data-set';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'view',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/diamond.json',\n  },\n  scale: {\n    x: { nice: true, domainMin: -0.5 },\n    y: { nice: true, domainMin: -2000 },\n    color: { nice: true },\n  },\n  children: [\n    {\n      type: 'heatmap',\n      data: {\n        transform: [\n          {\n            type: 'custom',\n            callback: (data) => {\n              const dv = new DataSet.View().source(data);\n              dv.transform({\n                type: 'kernel-smooth.density',\n                fields: ['carat', 'price'],\n                as: ['carat', 'price', 'density'],\n              });\n              return dv.rows;\n            },\n          },\n        ],\n      },\n      encode: {\n        x: 'carat',\n        y: 'price',\n        color: 'density',\n      },\n      style: {\n        opacity: 0.3,\n        gradient: [\n          [0, 'white'],\n          [0.2, 'blue'],\n          [0.4, 'cyan'],\n          [0.6, 'lime'],\n          [0.8, 'yellow'],\n          [0.9, 'red'],\n        ],\n      },\n    },\n    {\n      type: 'point',\n      encode: {\n        x: 'carat',\n        y: 'price',\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:13,tocIndex:5},{value:"说明",paraId:14,tocIndex:5},{value:"：",paraId:14,tocIndex:5},{value:"carat",paraId:15,tocIndex:5},{value:" 字段和 ",paraId:15,tocIndex:5},{value:"price",paraId:15,tocIndex:5},{value:" 字段分别映射到 x 轴和 y 轴",paraId:15,tocIndex:5},{value:"使用核密度估计（kernel density estimation）计算散点的密度分布",paraId:15,tocIndex:5},{value:"密度值映射到颜色，形成热力效果",paraId:15,tocIndex:5},{value:"叠加原始散点数据，可以同时观察数据点和密度分布",paraId:15,tocIndex:5},{value:"例 1: ",paraId:16,tocIndex:6},{value:"不适合精确比较具体数值",paraId:16,tocIndex:6},{value:"热力图通过颜色强度表现数值大小，但人眼对颜色的感知不如对长度的感知精确。如果需要准确比较具体数值，柱状图或折线图是更好的选择。",paraId:17,tocIndex:6},{value:"例 2: ",paraId:18,tocIndex:6},{value:"不适合展示少量离散数据点",paraId:18,tocIndex:6},{value:"当数据点较少时，热力图的密度分布优势不明显，直接使用散点图可能更为清晰直观。",paraId:19,tocIndex:6},{value:"阈值热力图根据预设的阈值区间，将连续数据划分为离散的颜色区间，适合强调特定范围内的数据。",paraId:20,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\n// 生成模拟的二维网格数据\nconst data = [];\nfor (let i = 0; i < 10; i++) {\n  for (let j = 0; j < 10; j++) {\n    data.push({\n      x: i,\n      y: j,\n      value: Math.floor(Math.random() * 100),\n    });\n  }\n}\n\nchart.options({\n  type: 'cell',\n  data,\n  encode: {\n    x: 'x',\n    y: 'y',\n    color: 'value',\n  },\n  scale: {\n    color: {\n      type: 'threshold',\n      domain: [25, 50, 75],\n      range: ['#ebedf0', '#c6e48b', '#7bc96f', '#239a3b'],\n    },\n  },\n  style: {\n    stroke: '#fff',\n    lineWidth: 1,\n  },\n  label: {\n    text: 'value',\n    style: {\n      fontSize: 10,\n      fill: '#000',\n    },\n  },\n});\n\nchart.render();\n",paraId:21,tocIndex:8},{value:"说明",paraId:22,tocIndex:8},{value:"：",paraId:22,tocIndex:8},{value:"生成 10x10 的网格数据，模拟二维热力图数据结构",paraId:23,tocIndex:8},{value:"使用阈值（threshold）比例尺将连续数据划分为离散区间",paraId:23,tocIndex:8},{value:"设置了 25、50、75 三个阈值，将数据分为四个区间",paraId:23,tocIndex:8},{value:"每个区间使用不同的颜色表示，便于区分不同数值级别的分布",paraId:23,tocIndex:8},{value:"散点图",paraId:24,tocIndex:9},{value:"热力图强调数据密度和分布模式，通过颜色梯度直观地展示数据集中区域",paraId:25,tocIndex:10},{value:"散点图展示每个独立的数据点，更适合观察个体数据点的分布和离群点",paraId:25,tocIndex:10},{value:"热力图适合处理大量数据点，散点图在数据量大时可能出现重叠问题",paraId:25,tocIndex:10},{value:"气泡图",paraId:26,tocIndex:10},{value:"热力图通过颜色强度表现数据密度或第三维度的数值大小",paraId:27,tocIndex:11},{value:"气泡图通过气泡大小表现第三维度的数值，同时可以显示具体的数据点位置",paraId:27,tocIndex:11},{value:"热力图更适合展示连续分布和密度模式，气泡图更适合展示离散数据点的多维关系",paraId:27,tocIndex:11},{value:"等高线图",paraId:28,tocIndex:11},{value:"热力图使用颜色强度来表示数值大小，提供直观的视觉对比",paraId:29,tocIndex:12},{value:"等高线图使用等值线连接相同数值的点，更适合分析连续变化的趋势和梯度",paraId:29,tocIndex:12},{value:"热力图更适合展示离散数据点的密度分布，等高线图更适合展示连续表面的变化模式",paraId:29,tocIndex:12},{value:"直方图",paraId:30,tocIndex:12},{value:"热力图可以展示二维空间上的数据分布，适合分析两个变量之间的关系",paraId:31,tocIndex:13},{value:"直方图展示单一变量的频率分布，更适合分析单一变量的分布特征",paraId:31,tocIndex:13},{value:"热力图可以看作是二维直方图的扩展，用颜色替代了高度来表示频率或密度",paraId:31,tocIndex:13}]},60286:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(82392);const t=[{value:"直方图，形状类似",paraId:0,tocIndex:0},{value:"柱状图",paraId:1,tocIndex:0},{value:"却有着与柱状图完全不同的含义。直方图牵涉统计学的概念，首先要对数据进行分组，然后统计每个分组内数据元的数量。在平面直角坐标系中，横轴标出每个组的端点，纵轴表示频数，每个矩形的高代表对应的频数，称这样的统计图为频数分布直方图。频数分布直方图需要经过频数乘以组距的计算过程才能得出每个分组的数量，同一个直方图的组距是一个固定不变的值，所以如果直接用纵轴表示数量，每个矩形的高代表对应的数据元数量，既能保持分布状态不变，又能直观的看出每个分组的数量。本文的例子全部使用纵轴表示数量的非标准直方图绘制。",paraId:0,tocIndex:0},{value:"相关概念",paraId:2,tocIndex:0},{value:"：",paraId:2,tocIndex:0},{value:"组数：在统计数据时，我们把数据按照不同的范围分成几个组，分成的组的个数称为组数",paraId:3,tocIndex:0},{value:"组距：每一组两个端点的差",paraId:3,tocIndex:0},{value:"频数：分组内的数据元的数量除以组距",paraId:3,tocIndex:0},{value:"直方图的作用",paraId:4,tocIndex:0},{value:"：",paraId:4,tocIndex:0},{value:"能够显示各组频数或数量分布的情况",paraId:5,tocIndex:0},{value:"易于显示各组之间频数或数量的差别",paraId:5,tocIndex:0},{value:"通过直方图还可以观察和估计哪些数据比较集中，异常或者孤立的数据分布在何处。",paraId:6,tocIndex:0},{value:"英文名",paraId:7,tocIndex:0},{value:"：Histogram",paraId:7,tocIndex:0},{value:"图表类型",paraId:8,tocIndex:2},{value:"频数分布直方图",paraId:8,tocIndex:2},{value:"适合的数据",paraId:8,tocIndex:2},{value:"列表：一个连续数据字段、一个分类字段（可选）",paraId:8,tocIndex:2},{value:"功能",paraId:8,tocIndex:2},{value:"展示数据在不同区间内的分布情况",paraId:8,tocIndex:2},{value:"数据与图形的映射",paraId:8,tocIndex:2},{value:"分组数据字段（统计结果）映射到横轴的位置",paraId:8,tocIndex:2},{value:"频数字段（统计结果）映射到矩形的高度",paraId:8,tocIndex:2},{value:"分类数据可以设置颜色增强分类的区分度",paraId:8,tocIndex:2},{value:"适合的数据条数",paraId:8,tocIndex:2},{value:"不低于 50 条数据",paraId:8,tocIndex:2},{value:"图表类型",paraId:9,tocIndex:3},{value:"非标准的直方图",paraId:9,tocIndex:3},{value:"适合的数据",paraId:9,tocIndex:3},{value:"列表：一个连续数据字段、一个分类字段（可选）",paraId:9,tocIndex:3},{value:"功能",paraId:9,tocIndex:3},{value:"展示数据在不同区间内的分布情况",paraId:9,tocIndex:3},{value:"数据与图形的映射",paraId:9,tocIndex:3},{value:"分组数据字段（统计结果）映射到横轴的位置",paraId:9,tocIndex:3},{value:"数量字段（统计结果）映射到矩形的高度",paraId:9,tocIndex:3},{value:"分类数据可以设置颜色增强分类的区分度",paraId:9,tocIndex:3},{value:"适合的数据条数",paraId:9,tocIndex:3},{value:"不低于 50 条数据",paraId:9,tocIndex:3},{value:"例子 1: ",paraId:10,tocIndex:5},{value:"数据分布的统计分析",paraId:10,tocIndex:5},{value:"下图是一个钻石重量分布的直方图，展示了钻石重量在不同区间的分布情况。",paraId:11,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/diamond.json',\n  })\n  .encode('x', 'carat')\n  .encode('y', 'count')\n  .transform({\n    type: 'binX',\n    y: 'count',\n  })\n  .scale({\n    y: { nice: true },\n  })\n  .axis({\n    x: { title: '钻石重量（克拉）' },\n    y: { title: '频数' },\n  })\n  .style({\n    fill: '#1890FF',\n    fillOpacity: 0.9,\n    stroke: '#FFF',\n  });\n\nchart.render();\n",paraId:12,tocIndex:5},{value:"说明",paraId:13,tocIndex:5},{value:"：",paraId:13,tocIndex:5},{value:"carat",paraId:14,tocIndex:5},{value:" 字段，映射到横轴，表示钻石重量的数值范围",paraId:14,tocIndex:5},{value:"使用 ",paraId:14,tocIndex:5},{value:"interval()",paraId:14,tocIndex:5},{value:" 几何图形配合 ",paraId:14,tocIndex:5},{value:"binX",paraId:14,tocIndex:5},{value:" 转换自动计算不同区间的数据频数",paraId:14,tocIndex:5},{value:"条形之间无间隔，表示数据是连续分布的",paraId:14,tocIndex:5},{value:"例子 2: ",paraId:15,tocIndex:5},{value:"使用不同的分箱方式",paraId:15,tocIndex:5},{value:'直方图的关键是如何划分数据区间（即"分箱"），不同的分箱方式会影响对数据分布的理解。下图使用了自定义的分箱数量。',paraId:16,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/diamond.json',\n  })\n  .encode('x', 'carat')\n  .encode('y', 'count')\n  .transform({\n    type: 'binX',\n    y: 'count',\n    thresholds: 30, // 指定分箱数量\n  })\n  .scale({\n    y: { nice: true },\n  })\n  .axis({\n    x: { title: '钻石重量（克拉）' },\n    y: { title: '频数' },\n  })\n  .style({\n    fill: '#1890FF',\n    fillOpacity: 0.9,\n    stroke: '#FFF',\n  });\n\nchart.render();\n",paraId:17,tocIndex:5},{value:"说明",paraId:18,tocIndex:5},{value:"：",paraId:18,tocIndex:5},{value:"使用 ",paraId:19,tocIndex:5},{value:"transform: { type: 'binX', thresholds: 30 }",paraId:19,tocIndex:5},{value:" 指定分箱数量为 30",paraId:19,tocIndex:5},{value:"分箱数量的选择会影响分布的细节展示，较多的箱数可以显示更细致的分布情况",paraId:19,tocIndex:5},{value:"较少的箱数则可以突出主要分布趋势",paraId:19,tocIndex:5},{value:"例子 3: ",paraId:20,tocIndex:5},{value:"密度直方图进行概率分布分析",paraId:20,tocIndex:5},{value:"密度直方图将频数标准化，更适合比较不同规模数据集的分布。",paraId:21,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/diamond.json',\n  })\n  .encode('x', 'carat')\n  .encode('y', 'density')\n  .transform(\n    {\n      type: 'binX',\n      y: 'count',\n      thresholds: 20,\n    },\n    {\n      type: 'normalizeY',\n    },\n  )\n  .axis({\n    x: { title: '钻石重量（克拉）' },\n    y: {\n      title: '密度',\n      labelFormatter: '.0%',\n    },\n  })\n  .style({\n    fill: '#2FC25B',\n    fillOpacity: 0.85,\n    stroke: '#FFF',\n  });\n\nchart.render();\n",paraId:22,tocIndex:5},{value:"说明",paraId:23,tocIndex:5},{value:"：",paraId:23,tocIndex:5},{value:"结合使用 ",paraId:24,tocIndex:5},{value:"binX",paraId:24,tocIndex:5},{value:" 和 ",paraId:24,tocIndex:5},{value:"normalizeY",paraId:24,tocIndex:5},{value:" 转换，将频数转换为密度",paraId:24,tocIndex:5},{value:"纵轴格式化为百分比显示，更直观地表示数据分布的概率密度",paraId:24,tocIndex:5},{value:"密度直方图面积总和为 1，更适合进行概率分布分析",paraId:24,tocIndex:5},{value:"例子 1: ",paraId:25,tocIndex:6},{value:"不适合展示分类数据的比较",paraId:25,tocIndex:6},{value:"直方图针对的是连续型数值数据的分布，不适合用于非数值型的分类数据比较。对于分类数据的计数统计，应该使用普通柱状图。",paraId:26,tocIndex:6},{value:"例子 2: ",paraId:27,tocIndex:6},{value:"不适合展示时间序列的趋势",paraId:27,tocIndex:6},{value:"直方图侧重于展示数据的分布特征，而非随时间变化的趋势。如果需要展示数据随时间的变化趋势，应使用折线图或面积图等时序图表。",paraId:28,tocIndex:6},{value:"多分布直方图可以在同一坐标系中展示多个数据集的分布情况，便于比较不同数据集的分布特征。",paraId:29,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/diamond.json',\n    transform: [\n      {\n        type: 'map',\n        callback: (d) => ({\n          ...d,\n          group: d.cut === 'Ideal' ? 'Ideal' : 'Others',\n        }),\n      },\n    ],\n  })\n  .encode('x', 'price')\n  .encode('y', 'count')\n  .encode('color', 'group')\n  .transform({\n    type: 'binX',\n    y: 'count',\n    thresholds: 30,\n    groupBy: ['group'],\n  })\n  .scale({\n    y: { nice: true },\n    color: { range: ['#1890FF', '#FF6B3B'] },\n  })\n  .axis({\n    x: { title: '价格（美元）' },\n    y: { title: '频数' },\n  })\n  .style({\n    fillOpacity: 0.7,\n    stroke: '#FFF',\n    lineWidth: 1,\n  })\n  .legend(true);\n\nchart.render();\n",paraId:30,tocIndex:8},{value:"说明",paraId:31,tocIndex:8},{value:"：",paraId:31,tocIndex:8},{value:"通过 ",paraId:32,tocIndex:8},{value:"color: 'group'",paraId:32,tocIndex:8},{value:" 和 ",paraId:32,tocIndex:8},{value:"groupBy: ['group']",paraId:32,tocIndex:8},{value:" 实现多分布的对比",paraId:32,tocIndex:8},{value:"使用不同颜色和透明度，便于观察不同组别的数据分布差异",paraId:32,tocIndex:8},{value:"柱状图",paraId:33,tocIndex:9},{value:"直方图用于展示连续型数值数据的分布，强调数据分布形态",paraId:34,tocIndex:10},{value:"柱状图用于比较不同类别或时间点的数值大小，强调类别间数值对比",paraId:34,tocIndex:10},{value:"直方图的条形间无间隔，柱状图的柱子间有间隔",paraId:34,tocIndex:10},{value:"箱型图",paraId:35,tocIndex:10},{value:"直方图通过频数分布展示数据集中趋势和离散程度",paraId:36,tocIndex:11},{value:"箱型图通过四分位数展示数据的集中和离散情况，更便于识别异常值",paraId:36,tocIndex:11},{value:"直方图提供更详细的分布形态，箱型图则提供更简洁的统计概括",paraId:36,tocIndex:11},{value:"折线图",paraId:37,tocIndex:11},{value:"面积图",paraId:38,tocIndex:11},{value:"直方图侧重于展示数据的分布状况和形态特征",paraId:39,tocIndex:12},{value:"折线图和面积图侧重于展示数据随时间的变化趋势",paraId:39,tocIndex:12},{value:"直方图适合单一时间点的数据分析，折线图和面积图适合多时间点的连续数据分析",paraId:39,tocIndex:12}]},74585:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(77638);const t=[{value:"K 线图，原名蜡烛图，又称阴阳图、棒线、红黑线或蜡烛线，常用于展示股票交易数据。K 线就是指将各种股票每日、每周、每月的开盘价、收盘价、最高价、最低价等涨跌变化状况，用图形的方式表现出来。",paraId:0,tocIndex:0},{value:"K 线图通过直观的视觉表现方式，能够快速反映某一时期的价格走势，帮助分析师和投资者判断市场趋势。每根 K 线包含四个关键价格信息：开盘价、收盘价、最高价和最低价，这四个价格构成了完整的交易信息。",paraId:1,tocIndex:0},{value:"K 线图的设计理念源于日本，最初用于大米期货交易，后来被广泛应用于各种金融市场的技术分析中。",paraId:2,tocIndex:0},{value:"英文名",paraId:3,tocIndex:0},{value:"：Candlestick Chart, K Chart",paraId:3,tocIndex:0},{value:"K 线如图所示:",paraId:4,tocIndex:2},{value:"上影线",paraId:5,tocIndex:2},{value:"：最上方的一条细线，表示最高价和收盘价（或开盘价）之间的价差",paraId:5,tocIndex:2},{value:"实体",paraId:5,tocIndex:2},{value:"：中间的一条粗线，表示开盘价和收盘价之间的价差",paraId:5,tocIndex:2},{value:"下影线",paraId:5,tocIndex:2},{value:"：下面的一条细线，表示开盘价（或收盘价）和最低价之间的差距",paraId:5,tocIndex:2},{value:"当收盘价高于开盘价，也就是股价走势呈上升趋势时，我们称这种情况下的 K 线为阳线，中部的实体通常以红色或空白表示。反之称为阴线，用绿色或黑色实体表示。",paraId:6,tocIndex:2},{value:"图表类型",paraId:7,tocIndex:2},{value:"K 线图",paraId:7,tocIndex:2},{value:"适合的数据",paraId:7,tocIndex:2},{value:"时间序列：一个时间字段，四个数值字段（开盘价、收盘价、最高价、最低价）",paraId:7,tocIndex:2},{value:"功能",paraId:7,tocIndex:2},{value:"观察数据的",paraId:7,tocIndex:2},{value:"趋势",paraId:7,tocIndex:2},{value:"变化",paraId:7,tocIndex:2},{value:"对比",paraId:7,tocIndex:2},{value:"不同时期的价格区间",paraId:7,tocIndex:2},{value:"数据与图形的映射",paraId:7,tocIndex:2},{value:"时间字段映射到横轴",paraId:7,tocIndex:2},{value:"四个价格字段映射到纵轴形成 K 线实体和影线",paraId:7,tocIndex:2},{value:"涨跌状态映射到颜色",paraId:7,tocIndex:2},{value:"适合的数据条数",paraId:7,tocIndex:2},{value:"适合中长期数据，通常几十到几百个交易周期",paraId:7,tocIndex:2},{value:"场景 1：股票价格分析",paraId:8,tocIndex:4},{value:"K 线图最经典的应用场景就是股票市场分析，通过观察 K 线的形态可以判断市场的多空力量对比。",paraId:9,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nconst data = [\n  {\n    time: '2015-11-19',\n    start: 8.18,\n    max: 8.33,\n    min: 7.98,\n    end: 8.32,\n  },\n  {\n    time: '2015-11-18',\n    start: 8.37,\n    max: 8.6,\n    min: 8.03,\n    end: 8.09,\n  },\n  {\n    time: '2015-11-17',\n    start: 8.7,\n    max: 8.78,\n    min: 8.32,\n    end: 8.37,\n  },\n  {\n    time: '2015-11-16',\n    start: 8.48,\n    max: 8.85,\n    min: 8.43,\n    end: 8.7,\n  },\n  {\n    time: '2015-11-13',\n    start: 8.01,\n    max: 8.75,\n    min: 7.97,\n    end: 8.41,\n  },\n  {\n    time: '2015-11-12',\n    start: 7.76,\n    max: 8.18,\n    min: 7.61,\n    end: 8.15,\n  },\n  {\n    time: '2015-11-11',\n    start: 7.55,\n    max: 7.81,\n    min: 7.49,\n    end: 7.8,\n  },\n  {\n    time: '2015-11-10',\n    start: 7.5,\n    max: 7.68,\n    min: 7.44,\n    end: 7.57,\n  },\n];\n\nchart\n  .data(data)\n  .encode('x', 'time')\n  .encode('color', (d) => {\n    const trend = Math.sign(d.start - d.end);\n    return trend > 0 ? '下跌' : trend === 0 ? '不变' : '上涨';\n  })\n  .scale('x', {\n    compare: (a, b) => new Date(a).getTime() - new Date(b).getTime(),\n  })\n  .scale('color', {\n    domain: ['下跌', '不变', '上涨'],\n    range: ['#4daf4a', '#999999', '#e41a1c'],\n  });\n\nchart\n  .link()\n  .encode('y', ['min', 'max'])\n  .tooltip({\n    title: 'time',\n    items: [\n      { field: 'start', name: '开盘价' },\n      { field: 'end', name: '收盘价' },\n      { field: 'min', name: '最低价' },\n      { field: 'max', name: '最高价' },\n    ],\n  });\n\nchart\n  .interval()\n  .encode('y', ['start', 'end'])\n  .style('fillOpacity', 1)\n  .style('stroke', (d) => {\n    if (d.start === d.end) return '#999999';\n  })\n  .axis('y', {\n    title: '价格',\n  })\n  .tooltip({\n    title: 'time',\n    items: [\n      { field: 'start', name: '开盘价' },\n      { field: 'end', name: '收盘价' },\n      { field: 'min', name: '最低价' },\n      { field: 'max', name: '最高价' },\n    ],\n  });\n\nchart.render();\n",paraId:10,tocIndex:4},{value:"场景 2：商品期货分析",paraId:11,tocIndex:4},{value:"K 线图同样适用于商品期货、外汇等金融衍生品的价格分析，帮助交易者识别价格模式和趋势。",paraId:12,tocIndex:4},{value:"场景 3：数字货币分析",paraId:13,tocIndex:4},{value:"在数字货币交易中，K 线图是最常用的技术分析工具，可以清楚地展示价格的波动情况。",paraId:14,tocIndex:4},{value:"场景 1：非时间序列数据",paraId:15,tocIndex:5},{value:"K 线图专门用于时间序列数据，对于不涉及时间维度的分类数据比较，应该使用",paraId:16,tocIndex:5},{value:"柱状图",paraId:17,tocIndex:5},{value:"或",paraId:16,tocIndex:5},{value:"条形图",paraId:18,tocIndex:5},{value:"。",paraId:16,tocIndex:5},{value:"场景 2：单一数值展示",paraId:19,tocIndex:5},{value:"如果只需要展示简单的数值变化趋势，",paraId:20,tocIndex:5},{value:"折线图",paraId:21,tocIndex:5},{value:"或",paraId:20,tocIndex:5},{value:"面积图",paraId:22,tocIndex:5},{value:"会更加简洁明了。",paraId:20,tocIndex:5},{value:"将 K 线图与成交量柱状图结合，可以更全面地分析市场行为。",paraId:23,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\n// 创建K线图容器\ndocument.getElementById('container').innerHTML = `\n  <div id=\"kChart\" style=\"height: 300px;\"></div>\n  <div id=\"volumeChart\" style=\"height: 150px; margin-top: 10px;\"></div>\n`;\n\nconst data = [\n  {\n    time: '2015-11-19',\n    start: 8.18,\n    max: 8.33,\n    min: 7.98,\n    end: 8.32,\n    volumn: 1810,\n  },\n  {\n    time: '2015-11-18',\n    start: 8.37,\n    max: 8.6,\n    min: 8.03,\n    end: 8.09,\n    volumn: 2790,\n  },\n  {\n    time: '2015-11-17',\n    start: 8.7,\n    max: 8.78,\n    min: 8.32,\n    end: 8.37,\n    volumn: 3729,\n  },\n  {\n    time: '2015-11-16',\n    start: 8.48,\n    max: 8.85,\n    min: 8.43,\n    end: 8.7,\n    volumn: 2890,\n  },\n];\n\nconst KChart = new Chart({\n  container: 'kChart',\n  autoFit: true,\n});\n\nKChart.options({\n  type: 'view',\n  data,\n  encode: {\n    x: 'time',\n    color: (d) => {\n      const trend = Math.sign(d.start - d.end);\n      return trend > 0 ? '下跌' : trend === 0 ? '不变' : '上涨';\n    },\n  },\n  scale: {\n    color: {\n      domain: ['下跌', '不变', '上涨'],\n      range: ['#4daf4a', '#999999', '#e41a1c'],\n    },\n  },\n  children: [\n    {\n      type: 'link',\n      encode: { y: ['min', 'max'] },\n    },\n    {\n      type: 'interval',\n      encode: { y: ['start', 'end'] },\n      style: { fillOpacity: 1 },\n    },\n  ],\n  axis: {\n    y: { title: '价格' },\n  },\n});\n\n// 成交量图\nconst VolumeChart = new Chart({\n  container: 'volumeChart',\n  autoFit: true,\n});\n\nVolumeChart.options({\n  type: 'interval',\n  data,\n  encode: {\n    x: 'time',\n    y: 'volumn',\n    color: (d) => {\n      const trend = Math.sign(d.start - d.end);\n      return trend > 0 ? '下跌' : trend === 0 ? '不变' : '上涨';\n    },\n  },\n  scale: {\n    color: {\n      domain: ['下跌', '不变', '上涨'],\n      range: ['#4daf4a', '#999999', '#e41a1c'],\n    },\n  },\n  axis: {\n    y: { title: '成交量' },\n  },\n});\n\nKChart.render();\nVolumeChart.render();\n",paraId:24,tocIndex:7},{value:"说明",paraId:25,tocIndex:7},{value:"：",paraId:25,tocIndex:7},{value:"K 线图部分展示价格的四个关键信息（开盘、收盘、最高、最低）",paraId:26,tocIndex:7},{value:"成交量图部分使用相同的颜色编码展示交易量",paraId:26,tocIndex:7},{value:"两个图表通过相同的时间轴对齐，便于关联分析",paraId:26,tocIndex:7},{value:"使用更完整的数据源，结合 K 线图和柱状图展示股票价格和成交量的关系，并支持图例联动交互。",paraId:27,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\n// 创建K线图和柱状图容器\ndocument.getElementById('container').innerHTML = `\n  <div id=\"kChart\" style=\"height: 360px;\"></div>\n  <div id=\"columnChart\" style=\"height: 180px;\"></div>\n`;\n\nconst KChart = new Chart({\n  container: 'kChart',\n  autoFit: true,\n  height: 360,\n  paddingLeft: 60,\n});\n\nKChart.options({\n  type: 'view',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/antvdemo/assets/data/candle-sticks.json',\n  },\n  encode: {\n    x: 'time',\n    color: (d) => {\n      const trend = Math.sign(d.start - d.end);\n      return trend > 0 ? '下跌' : trend === 0 ? '不变' : '上涨';\n    },\n  },\n  scale: {\n    x: {\n      compare: (a, b) => new Date(a).getTime() - new Date(b).getTime(),\n    },\n    color: {\n      domain: ['下跌', '不变', '上涨'],\n      range: ['#4daf4a', '#999999', '#e41a1c'],\n    },\n  },\n  children: [\n    {\n      type: 'link',\n      encode: { y: ['min', 'max'] },\n      tooltip: {\n        title: 'time',\n        items: [\n          { field: 'start', name: '开盘价' },\n          { field: 'end', name: '收盘价' },\n          { field: 'min', name: '最低价' },\n          { field: 'max', name: '最高价' },\n        ],\n      },\n    },\n    {\n      type: 'interval',\n      encode: { y: ['start', 'end'] },\n      style: {\n        fillOpacity: 1,\n        stroke: (d) => (d.start === d.end ? '#999999' : undefined),\n      },\n      axis: {\n        x: { title: false },\n        y: { title: false },\n      },\n      tooltip: {\n        title: 'time',\n        items: [\n          { field: 'start', name: '开盘价' },\n          { field: 'end', name: '收盘价' },\n          { field: 'min', name: '最低价' },\n          { field: 'max', name: '最高价' },\n        ],\n      },\n    },\n  ],\n});\n\nconst ColumnChart = new Chart({\n  container: 'columnChart',\n  autoFit: true,\n  paddingTop: 0,\n  paddingBottom: 0,\n  height: 180,\n  paddingLeft: 60,\n});\n\nColumnChart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/antvdemo/assets/data/candle-sticks.json',\n  },\n  encode: {\n    x: 'time',\n    y: 'volumn',\n    color: (d) => {\n      const trend = Math.sign(d.start - d.end);\n      return trend > 0 ? '下跌' : trend === 0 ? '不变' : '上涨';\n    },\n  },\n  scale: {\n    x: {\n      compare: (a, b) => new Date(a).getTime() - new Date(b).getTime(),\n    },\n    color: {\n      domain: ['下跌', '不变', '上涨'],\n      range: ['#4daf4a', '#999999', '#e41a1c'],\n    },\n  },\n  axis: {\n    x: false,\n    y: { title: false },\n  },\n});\n\n// 图例联动交互\nKChart.on('legend:filter', (e) => {\n  const { nativeEvent, data } = e;\n  if (!nativeEvent) return;\n  ColumnChart.emit('legend:filter', { data });\n});\n\nKChart.on('legend:reset', (e) => {\n  const { nativeEvent, data } = e;\n  if (!nativeEvent) return;\n  ColumnChart.emit('legend:reset', { data });\n});\n\nKChart.render();\nColumnChart.render();\n",paraId:28,tocIndex:8},{value:"说明",paraId:29,tocIndex:8},{value:"：",paraId:29,tocIndex:8},{value:"上方 K 线图展示价格走势，下方柱状图展示成交量",paraId:30,tocIndex:8},{value:"两个图表使用相同的颜色编码和时间轴对齐",paraId:30,tocIndex:8},{value:"支持图例联动，点击图例可以同时过滤两个图表的数据",paraId:30,tocIndex:8},{value:"使用真实的股票数据源，展示更完整的市场信息",paraId:30,tocIndex:8},{value:"折线图",paraId:31,tocIndex:9},{value:"K 线图展示完整的价格信息（开盘、收盘、最高、最低），适合详细的技术分析",paraId:32,tocIndex:10},{value:"折线图只展示单一价格线（通常是收盘价），适合展示价格趋势的整体走向",paraId:32,tocIndex:10},{value:"柱状图",paraId:33,tocIndex:10},{value:"K 线图专门用于时间序列的价格数据分析，强调时间维度上的价格变化",paraId:34,tocIndex:11},{value:"柱状图主要用于不同分类之间的数值大小对比，不涉及时间序列",paraId:34,tocIndex:11},{value:"箱形图",paraId:35,tocIndex:11},{value:"K 线图展示特定时间点的价格区间，侧重于价格走势分析",paraId:36,tocIndex:12},{value:"箱形图展示数据的统计分布特征，侧重于数据分布的统计分析",paraId:36,tocIndex:12}]},41231:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(88907);const t=[{value:"卡吉图大约发明于 19 世纪 70 年代日本股票市场开始交易的时候。在美国，史蒂文·尼森出版《烛形图之外》后，卡吉图分析法随之流行。由于能够清晰、有效地显示价格走势的路径，卡吉图是投资者用于对股票做出更好决策的图表之一。",paraId:0,tocIndex:0},{value:"卡吉图是一系列由短水平线连接的垂直线，水平线起连接作用，垂直线的厚度和方向取决于价格运动。垂直线方向向上代表价格上升，方向向下代表价格下降，当价格运动方向反转超过阈值时绘制一条新的垂直线，在转折处用水平线相连。当价格上升超过前一个高点转折时采用粗线绘制，称为阳线，当价格下降低于前一个低点转折时采用细线绘制，称为阴线。",paraId:1,tocIndex:0},{value:"卡吉图的特点：",paraId:2,tocIndex:0},{value:"卡吉图模拟了证券的供给与需求力量的关系，非常适用于股票短线操作",paraId:3,tocIndex:0},{value:"卡吉图通过阈值标记逆转，交易者可以过滤掉日常价格波动，只关注价格的显著变化",paraId:3,tocIndex:0},{value:"卡吉图独立于时间",paraId:3,tocIndex:0},{value:"卡吉图绘制的折线是经过卡吉图算法计算之后的，与原数据曲线有区别",paraId:4},{value:"英文名",paraId:5},{value:"：Kagi Chart",paraId:5},{value:"图表类型",paraId:6,tocIndex:1},{value:"卡吉图",paraId:6,tocIndex:1},{value:"适合的数据",paraId:6,tocIndex:1},{value:"一个分类数据字段，一个连续字段",paraId:6,tocIndex:1},{value:"功能",paraId:6,tocIndex:1},{value:"观察数据变化",paraId:6,tocIndex:1},{value:"趋势",paraId:6,tocIndex:1},{value:"数据与图形映射",paraId:6,tocIndex:1},{value:"转折点的时间分类（自动计算）映射到横轴，转折点的值映射到纵轴",paraId:6,tocIndex:1},{value:"适合的数据条数",paraId:6,tocIndex:1},{value:"大于 10 条",paraId:6,tocIndex:1},{value:"构成要素：",paraId:7,tocIndex:1},{value:"阳线",paraId:8,tocIndex:1},{value:"：价格上升超过前一个高点时的粗线，通常用较粗的线条表示",paraId:8,tocIndex:1},{value:"阴线",paraId:8,tocIndex:1},{value:"：价格下降低于前一个低点时的细线，通常用较细的线条表示",paraId:8,tocIndex:1},{value:"转折点",paraId:8,tocIndex:1},{value:"：价格运动方向发生逆转的关键点位",paraId:8,tocIndex:1},{value:"连接线",paraId:8,tocIndex:1},{value:"：连接垂直线段的水平线，标识转向位置",paraId:8,tocIndex:1},{value:"场景 1：展示价格或股票变化走势",paraId:9,tocIndex:3},{value:"卡吉图最适合用于展示金融市场中股票、期货、外汇等价格变化的趋势分析。通过过滤掉日常的小幅波动，突出显示价格的重要转折点，帮助投资者识别趋势的变化。",paraId:10,tocIndex:3},{value:"场景 2：技术分析和趋势判断",paraId:11,tocIndex:3},{value:"卡吉图在技术分析中特别有用，因为它能够：",paraId:12,tocIndex:3},{value:"过滤市场噪音，专注于重要的价格变动",paraId:13,tocIndex:3},{value:"清晰显示支撑位和阻力位",paraId:13,tocIndex:3},{value:"帮助识别趋势的延续和反转信号",paraId:13,tocIndex:3},{value:"场景 1：对时间敏感的数据",paraId:14,tocIndex:4},{value:"卡吉图与时间无关，只表示数据上升下降的走势，无法体现数据在时间上的一些特性，例如周期等。特别是当数据对时间敏感时不推荐使用卡吉图。",paraId:15,tocIndex:4},{value:"例如网站访问量数据通常具有明显的时间周期性（工作日 vs 周末，白天 vs 夜晚），使用卡吉图会丢失这些重要的时间特征信息。对于此类数据，推荐使用",paraId:16,tocIndex:4},{value:"折线图",paraId:17,tocIndex:4},{value:"或",paraId:16,tocIndex:4},{value:"面积图",paraId:18,tocIndex:4},{value:"。",paraId:16,tocIndex:4},{value:"场景 2：多组数据对比",paraId:19,tocIndex:4},{value:"卡吉图的横坐标具有特殊性（转折点时间），无法在同一个横轴上绘制多组卡吉图进行对比分析。如需对比多个数据系列，建议使用",paraId:20,tocIndex:4},{value:"多系列折线图",paraId:21,tocIndex:4},{value:"。",paraId:20,tocIndex:4},{value:"特征",paraId:22,tocIndex:6},{value:"卡吉图",paraId:22,tocIndex:6},{value:"K 线图",paraId:22,tocIndex:6},{value:"时间依赖",paraId:22,tocIndex:6},{value:"独立于时间，仅表现数据走势",paraId:22,tocIndex:6},{value:"与时间相关，每个时间段对应一个 K 线",paraId:22,tocIndex:6},{value:"数据展示",paraId:22,tocIndex:6},{value:"过滤小幅波动，突出重要转折",paraId:22,tocIndex:6},{value:"展示指定时间段内的开高低收价格",paraId:22,tocIndex:6},{value:"分析重点",paraId:22,tocIndex:6},{value:"趋势方向和转折点",paraId:22,tocIndex:6},{value:"时间段内的价格波动和成交量",paraId:22,tocIndex:6},{value:"适用场景",paraId:22,tocIndex:6},{value:"中长期趋势分析",paraId:22,tocIndex:6},{value:"短期交易和时间敏感分析",paraId:22,tocIndex:6},{value:"特征",paraId:23,tocIndex:7},{value:"卡吉图",paraId:23,tocIndex:7},{value:"折线图",paraId:23,tocIndex:7},{value:"数据处理",paraId:23,tocIndex:7},{value:"经过算法计算的转折点数据",paraId:23,tocIndex:7},{value:"严格按照原数据的坐标绘制",paraId:23,tocIndex:7},{value:"坐标轴",paraId:23,tocIndex:7},{value:"横坐标为计算得出的转折点",paraId:23,tocIndex:7},{value:"横纵坐标都对应原始数据",paraId:23,tocIndex:7},{value:"线条含义",paraId:23,tocIndex:7},{value:"颜色和粗细代表特定含义（阳线阴线）",paraId:23,tocIndex:7},{value:"通常只表示数据连接关系",paraId:23,tocIndex:7},{value:"多系列",paraId:23,tocIndex:7},{value:"无法绘制多组数据",paraId:23,tocIndex:7},{value:"可以绘制多组数据进行对比",paraId:23,tocIndex:7},{value:"噪音过滤",paraId:23,tocIndex:7},{value:"自动过滤小幅波动",paraId:23,tocIndex:7},{value:"显示所有数据波动",paraId:23,tocIndex:7},{value:"卡吉图的核心参数是",paraId:24,tocIndex:9},{value:"逆转阈值",paraId:24,tocIndex:9},{value:"，不同的阈值设置会产生不同的效果：",paraId:24,tocIndex:9},{value:"较小阈值",paraId:25,tocIndex:9},{value:"：更敏感，会捕捉到更多的价格转折，但可能包含较多噪音",paraId:25,tocIndex:9},{value:"较大阈值",paraId:25,tocIndex:9},{value:"：过滤更多噪音，只显示重要的趋势变化，但可能错过一些转折信号",paraId:25,tocIndex:9},{value:"传统卡吉图完全忽略时间因素，而时间加权卡吉图在计算转折点时会考虑时间间隔，使图表在保持卡吉图特色的同时，部分保留时间信息。",paraId:26,tocIndex:10},{value:"G2 目前暂未提供内置的卡吉图标记，但可以通过以下方式实现：",paraId:27},{value:"数据预处理",paraId:28},{value:"：使用卡吉图算法对原始数据进行转换，计算出转折点数据",paraId:28},{value:"自定义标记",paraId:28},{value:"：结合 ",paraId:28},{value:"path",paraId:28},{value:" 标记和自定义形状实现卡吉图的视觉效果",paraId:28},{value:"算法实现",paraId:28},{value:"：需要实现卡吉图的核心算法，包括阈值判断、转折点计算等",paraId:28},{value:"详细的实现方式可以参考 ",paraId:29},{value:"自定义标记",paraId:30},{value:" 文档。",paraId:29}]},50742:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(7158);const t=[{value:"折线图是一种将数据点按时间或类别顺序连接成一条折线，用于显示数据随时间或有序类别变化趋势的统计图表。通过折线的上升或下降，可以直观地表现数据变化的速度、幅度、范围及其周期性。",paraId:0,tocIndex:0},{value:"折线图特别适合展示连续时间序列的数据变化，能够有效地反映数据的趋势、波动、周期性和异常点。在多系列数据比较时，折线图通过不同颜色或样式的线条，清晰地展示各数据系列间的对比和关系。",paraId:1,tocIndex:0},{value:"相比于面积图，折线图更侧重于展示数据变化的趋势和轨迹，而非总量；相比于柱状图，折线图更适合展示连续变化的趋势，而非离散的数值比较。",paraId:2,tocIndex:0},{value:"英文名",paraId:3,tocIndex:0},{value:"：Line Chart",paraId:3,tocIndex:0},{value:"图表类型",paraId:4,tocIndex:2},{value:"基础折线图",paraId:4,tocIndex:2},{value:"适合的数据",paraId:4,tocIndex:2},{value:"时间序列数据：一个有序/连续数据字段（通常是时间）、一个连续数据字段",paraId:4,tocIndex:2},{value:"功能",paraId:4,tocIndex:2},{value:"展示数据随时间或有序维度的变化趋势",paraId:4,tocIndex:2},{value:"数据与图形的映射",paraId:4,tocIndex:2},{value:"时间字段映射到横轴的位置",paraId:4,tocIndex:2},{value:"数值字段映射到纵轴的高度",paraId:4,tocIndex:2},{value:"各数据点通过线条连接，展示变化轨迹",paraId:4,tocIndex:2},{value:"适合的场景",paraId:4,tocIndex:2},{value:"单一数据系列随时间的变化趋势",paraId:4,tocIndex:2},{value:"图表类型",paraId:5,tocIndex:3},{value:"多系列折线图",paraId:5,tocIndex:3},{value:"适合的数据",paraId:5,tocIndex:3},{value:"多序列时间数据：一个有序/连续数据字段（通常是时间）、一个连续数据字段、一个分类数据字段",paraId:5,tocIndex:3},{value:"功能",paraId:5,tocIndex:3},{value:"展示多个数据系列随时间变化的趋势，便于比较不同系列间的关系",paraId:5,tocIndex:3},{value:"数据与图形的映射",paraId:5,tocIndex:3},{value:"时间字段映射到横轴的位置",paraId:5,tocIndex:3},{value:"数值字段映射到纵轴的高度",paraId:5,tocIndex:3},{value:"分类字段映射到不同颜色的线条",paraId:5,tocIndex:3},{value:"适合的场景",paraId:5,tocIndex:3},{value:"多数据系列随时间的变化趋势对比",paraId:5,tocIndex:3},{value:"例子 1: ",paraId:6,tocIndex:5},{value:"适合展示连续时间序列的趋势",paraId:6,tocIndex:5},{value:"下图是一个股票价格走势的折线图，展示了某公司股票价格随时间的变化趋势。",paraId:7,tocIndex:5},{value:"date（日期）",paraId:8,tocIndex:5},{value:"close（收盘价）",paraId:8,tocIndex:5},{value:"2015/1/5",paraId:8,tocIndex:5},{value:"121.73",paraId:8,tocIndex:5},{value:"2015/1/6",paraId:8,tocIndex:5},{value:"115.07",paraId:8,tocIndex:5},{value:"2015/1/7",paraId:8,tocIndex:5},{value:"116.75",paraId:8,tocIndex:5},{value:"...",paraId:8,tocIndex:5},{value:"...",paraId:8,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/aapl.json',\n    transform: [\n      {\n        type: 'map',\n        callback: (d) => ({\n          ...d,\n          date: new Date(d.date),\n        }),\n      },\n    ],\n  },\n  encode: { x: 'date', y: 'close' },\n  axis: {\n    x: {\n      title: null,\n    },\n    y: {\n      title: null,\n    },\n  },\n  style: {\n    lineWidth: 2,\n    stroke: '#1890ff',\n  },\n});\n\nchart.render();\n",paraId:9,tocIndex:5},{value:"说明",paraId:10,tocIndex:5},{value:" ：",paraId:10,tocIndex:5},{value:"date",paraId:11,tocIndex:5},{value:" 字段，映射到横轴的位置，表示时间的先后顺序",paraId:11,tocIndex:5},{value:"close",paraId:11,tocIndex:5},{value:" 字段，映射到纵轴的高度，展示了价格随时间的变化趋势",paraId:11,tocIndex:5},{value:"通过线条连接各个数据点，清晰地展示数据的变化轨迹",paraId:11,tocIndex:5},{value:"例子 2: ",paraId:12,tocIndex:5},{value:"适合展示多个数据系列的对比趋势",paraId:12,tocIndex:5},{value:"多系列折线图可以同时展示多个数据系列随时间的变化，便于进行比较分析。下图展示了不同地区失业率的变化趋势。",paraId:13,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/728a4bdc-9d0b-49e0-a92f-6320a6cddeed.csv',\n  },\n  encode: {\n    x: 'date',\n    y: 'unemployment',\n    color: 'division',\n  },\n  axis: {\n    x: {\n      title: null,\n    },\n    y: {\n      title: null,\n    },\n  },\n});\n\nchart.render();\n",paraId:14,tocIndex:5},{value:"说明",paraId:15,tocIndex:5},{value:"：",paraId:15,tocIndex:5},{value:"date",paraId:16,tocIndex:5},{value:" 字段映射到横轴，表示时间维度",paraId:16,tocIndex:5},{value:"unemployment",paraId:16,tocIndex:5},{value:" 字段映射到纵轴，表示失业率",paraId:16,tocIndex:5},{value:"division",paraId:16,tocIndex:5},{value:" 字段映射到颜色，区分不同地区",paraId:16,tocIndex:5},{value:"多条折线便于直观比较不同地区失业率的变化趋势和差异",paraId:16,tocIndex:5},{value:"例子 3: ",paraId:17,tocIndex:5},{value:"展示数据的细微变化和波动",paraId:17,tocIndex:5},{value:"折线图可以清晰地展示数据的细微变化和波动，特别是当数据点较多且变化频繁时。",paraId:18,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: [\n    { month: 'Jan', city: 'Tokyo', temperature: 7 },\n    { month: 'Jan', city: 'London', temperature: 3.9 },\n    { month: 'Feb', city: 'Tokyo', temperature: 6.9 },\n    { month: 'Feb', city: 'London', temperature: 4.2 },\n    { month: 'Mar', city: 'Tokyo', temperature: 9.5 },\n    { month: 'Mar', city: 'London', temperature: 5.7 },\n    { month: 'Apr', city: 'Tokyo', temperature: 14.5 },\n    { month: 'Apr', city: 'London', temperature: 8.5 },\n    { month: 'May', city: 'Tokyo', temperature: 18.4 },\n    { month: 'May', city: 'London', temperature: 11.9 },\n    { month: 'Jun', city: 'Tokyo', temperature: 21.5 },\n    { month: 'Jun', city: 'London', temperature: 15.2 },\n    { month: 'Jul', city: 'Tokyo', temperature: 25.2 },\n    { month: 'Jul', city: 'London', temperature: 17 },\n    { month: 'Aug', city: 'Tokyo', temperature: 26.5 },\n    { month: 'Aug', city: 'London', temperature: 16.6 },\n    { month: 'Sep', city: 'Tokyo', temperature: 23.3 },\n    { month: 'Sep', city: 'London', temperature: 14.2 },\n    { month: 'Oct', city: 'Tokyo', temperature: 18.3 },\n    { month: 'Oct', city: 'London', temperature: 10.3 },\n    { month: 'Nov', city: 'Tokyo', temperature: 13.9 },\n    { month: 'Nov', city: 'London', temperature: 6.6 },\n    { month: 'Dec', city: 'Tokyo', temperature: 9.6 },\n    { month: 'Dec', city: 'London', temperature: 4.8 },\n  ],\n  encode: { x: 'month', y: 'temperature', color: 'city' },\n  axis: {\n    y: {\n      title: null,\n      labelFormatter: (d) => d + '°C',\n    },\n    x: {\n      title: null,\n    },\n  },\n  style: {\n    lineWidth: 2,\n  },\n});\n\nchart.render();\n",paraId:19,tocIndex:5},{value:"说明",paraId:20,tocIndex:5},{value:"：",paraId:20,tocIndex:5},{value:"折线图清晰地展示了东京和伦敦全年温度的变化曲线",paraId:21,tocIndex:5},{value:"通过不同颜色的折线，可以直观地比较两个城市温度的差异和变化模式",paraId:21,tocIndex:5},{value:"例子 1: ",paraId:22,tocIndex:6},{value:"不适合展示离散类别的比较",paraId:22,tocIndex:6},{value:"当水平轴的数据类型为无序的分类或者垂直轴的数据类型为连续时间时，不适合使用折线图。",paraId:23,tocIndex:6},{value:"我们以一个不同游戏类型的销量对比的场景为例，对于表示分类对比的数据时，我们更应该使用",paraId:24,tocIndex:6},{value:"柱状图",paraId:25,tocIndex:6},{value:"，而不是折线图。",paraId:24,tocIndex:6},{value:"错误的做法",paraId:26,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  height: 250,\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: [\n    { genre: 'Sports', sold: 27500 },\n    { genre: 'Strategy', sold: 11500 },\n    { genre: 'Action', sold: 6000 },\n    { genre: 'Shooter', sold: 3500 },\n    { genre: 'Other', sold: 1500 },\n  ],\n  encode: { x: 'genre', y: 'sold' },\n  axis: {\n    x: {\n      title: '游戏类型',\n    },\n    y: {\n      title: '销售量',\n      labelFormatter: (val) => val / 1000 + 'k',\n    },\n  },\n  style: {\n    lineWidth: 3,\n    stroke: '#1890ff',\n  },\n});\n\nchart.render();\n",paraId:27,tocIndex:6},{value:"正确的做法",paraId:28,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  height: 250,\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { genre: 'Sports', sold: 27500 },\n    { genre: 'Strategy', sold: 11500 },\n    { genre: 'Action', sold: 6000 },\n    { genre: 'Shooter', sold: 3500 },\n    { genre: 'Other', sold: 1500 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  axis: {\n    x: {\n      title: '游戏类型',\n    },\n    y: {\n      title: '销售量',\n      labelFormatter: (val) => val / 1000 + 'k',\n    },\n  },\n});\n\nchart.render();\n",paraId:29,tocIndex:6},{value:"问题说明",paraId:30,tocIndex:6},{value:"：",paraId:30,tocIndex:6},{value:"游戏类型之间没有自然的顺序或连续性关系",paraId:31,tocIndex:6},{value:"连线暗示了类别间的趋势关系，但实际上不存在这种关系",paraId:31,tocIndex:6},{value:'折线可能误导读者认为从"Sports"到"Strategy"存在某种变化趋势',paraId:31,tocIndex:6},{value:"柱状图能更准确地表达各游戏类型的独立销量比较",paraId:31,tocIndex:6},{value:"例子 2: ",paraId:32,tocIndex:6},{value:"数据点较少或变化不明显时效果不佳",paraId:32,tocIndex:6},{value:"当数据点较少或变化不明显时，折线图可能无法充分发挥其展示趋势变化的优势。这种情况下，可以考虑使用柱状图或点图来强调个别数据点的比较。",paraId:33,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: [\n    { quarter: 'Q1', value: 100 },\n    { quarter: 'Q2', value: 101 },\n    { quarter: 'Q3', value: 99 },\n    { quarter: 'Q4', value: 102 },\n  ],\n  encode: { x: 'quarter', y: 'value' },\n  axis: {\n    x: { title: null },\n    y: { title: null },\n  },\n  style: {\n    lineWidth: 2,\n    stroke: '#1890ff',\n  },\n});\n\nchart.render();\n",paraId:34,tocIndex:6},{value:"问题说明",paraId:35,tocIndex:6},{value:"：",paraId:35,tocIndex:6},{value:"数据点太少（仅 4 个），无法形成明显的趋势线",paraId:36,tocIndex:6},{value:"数值变化很小（99-102），折线看起来几乎是平的",paraId:36,tocIndex:6},{value:"难以从中获得有意义的趋势信息",paraId:36,tocIndex:6},{value:"柱状图或点图能更好地强调各个独立数值的比较",paraId:36,tocIndex:6},{value:"阶梯折线图使用水平和垂直线段连接数据点，形成阶梯状的效果，适合展示在特定时间点发生突变的数据。",paraId:37,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: [\n    { month: 'Jan', value: 51 },\n    { month: 'Feb', value: 91 },\n    { month: 'Mar', value: 34 },\n    { month: 'Apr', value: 47 },\n    { month: 'May', value: 63 },\n    { month: 'June', value: 58 },\n    { month: 'July', value: 56 },\n    { month: 'Aug', value: 77 },\n    { month: 'Sep', value: 99 },\n    { month: 'Oct', value: 106 },\n    { month: 'Nov', value: 88 },\n    { month: 'Dec', value: 56 },\n  ],\n  encode: { x: 'month', y: 'value', shape: 'hv' },\n  axis: {\n    x: {\n      title: null,\n    },\n    y: {\n      title: null,\n    },\n  },\n  style: {\n    lineWidth: 2,\n    stroke: '#1890ff',\n  },\n});\n\nchart.render();\n",paraId:38,tocIndex:8},{value:"说明",paraId:39,tocIndex:8},{value:"：",paraId:39,tocIndex:8},{value:"使用 ",paraId:40,tocIndex:8},{value:"encode: { shape: 'hv' }",paraId:40,tocIndex:8},{value:" 指定阶梯状的线条形状",paraId:40,tocIndex:8},{value:"适合展示在特定时间点发生变化且保持稳定直到下一变化点的数据，如电费阶梯价格、库存水平变化等",paraId:40,tocIndex:8},{value:"虚线折线图通过不同的线型来区分不同的数据系列或表示特定含义，如预测值、参考线等。",paraId:41,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { year: '1991', value: 3, type: '实际值' },\n    { year: '1992', value: 4, type: '实际值' },\n    { year: '1993', value: 3.5, type: '实际值' },\n    { year: '1994', value: 5, type: '实际值' },\n    { year: '1995', value: 4.9, type: '实际值' },\n    { year: '1996', value: 6, type: '实际值' },\n    { year: '1997', value: 7, type: '实际值' },\n    { year: '1998', value: 9, type: '实际值' },\n    { year: '1999', value: 13, type: '实际值' },\n    { year: '1999', value: 13, type: '预测值' },\n    { year: '2000', value: 16, type: '预测值' },\n    { year: '2001', value: 21, type: '预测值' },\n    { year: '2002', value: 25, type: '预测值' },\n    { year: '2003', value: 30, type: '预测值' },\n  ],\n  children: [\n    {\n      type: 'line',\n      encode: { x: 'year', y: 'value', color: 'type' },\n      style: {\n        lineWidth: 2,\n        lineDash: (d) => (d[0].type === '预测值' ? [4, 4] : null),\n      },\n    },\n    {\n      type: 'point',\n      encode: { x: 'year', y: 'value', color: 'type', shape: 'circle' },\n    },\n  ],\n  scale: {\n    color: {\n      range: ['#1890FF', '#FF6B3B'],\n    },\n  },\n  axis: {\n    x: { title: null },\n    y: { title: null },\n  },\n});\n\nchart.render();\n",paraId:42,tocIndex:9},{value:"说明",paraId:43,tocIndex:9},{value:"：",paraId:43,tocIndex:9},{value:"使用 ",paraId:44,tocIndex:9},{value:"lineDash: (d) => (d[0].type === '预测值' ? [4, 4] : null)",paraId:44,tocIndex:9},{value:" 为预测值设置虚线样式",paraId:44,tocIndex:9},{value:"实线表示已有的历史数据，虚线表示预测或估计的数据，增强了数据的可读性",paraId:44,tocIndex:9},{value:"面积图",paraId:45,tocIndex:10},{value:"折线图侧重于展示数据变化的趋势和轨迹，关注变化的方向和速度",paraId:46,tocIndex:11},{value:"面积图通过填充区域强调数量的视觉效果，更适合展示总量变化",paraId:46,tocIndex:11},{value:"当需要突出变化趋势时选择折线图，当需要强调数量级变化时选择面积图",paraId:46,tocIndex:11},{value:"堆叠面积图",paraId:47,tocIndex:11},{value:"折线图适合展示多个独立数据系列的变化趋势，各系列间可以直接比较",paraId:48,tocIndex:12},{value:"堆叠面积图显示各部分对总体的贡献，强调累积效果和部分与整体的关系",paraId:48,tocIndex:12},{value:"当需要比较多个独立趋势时选择折线图，当需要展示部分构成总体的变化时选择堆叠面积图",paraId:48,tocIndex:12},{value:"柱状图",paraId:49,tocIndex:12},{value:"折线图更适合展示连续时间序列的变化趋势，强调数据的流动性和连续性",paraId:50,tocIndex:13},{value:"柱状图更适合展示离散分类之间的数值比较，强调各个独立数值的大小对比",paraId:50,tocIndex:13},{value:"当数据点较多且关注变化趋势时选择折线图，当数据点较少且关注具体数值比较时选择柱状图",paraId:50,tocIndex:13},{value:"散点图",paraId:51,tocIndex:13},{value:"折线图通过连线展示数据的变化趋势和连续性，强调数据点间的关系",paraId:52,tocIndex:14},{value:"散点图展示各个独立数据点的分布，不强调数据点间的连续关系",paraId:52,tocIndex:14},{value:"当需要展示数据趋势时选择折线图，当需要展示数据分布或相关性时选择散点图",paraId:52,tocIndex:14}]},72002:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(59017);const t=[{value:"马赛克图（Mosaic Plot，又名 Marimekko Chart）是一种用于显示分类数据之间关系的图表。它通过矩形的面积和颜色来表示数据的比例和分类。",paraId:0,tocIndex:0},{value:"马赛克图分为均匀和非均匀两种类型，均匀马赛克图在生活中更为常见，例如地铁票价图；而非均匀马赛克图多用于统计学领域。",paraId:1,tocIndex:0},{value:"英文名",paraId:2,tocIndex:0},{value:"：Mosaic Plot, Marimekko Chart",paraId:2,tocIndex:0},{value:"图表类型",paraId:3,tocIndex:2},{value:"非均匀坐标轴马赛克图",paraId:3,tocIndex:2},{value:"适合的数据",paraId:3,tocIndex:2},{value:"多维分类数据",paraId:3,tocIndex:2},{value:"功能",paraId:3,tocIndex:2},{value:"显示多维分类数据的分布",paraId:3,tocIndex:2},{value:"数据与图形的映射",paraId:3,tocIndex:2},{value:"分类数据字段映射到非均匀的坐标轴",paraId:3,tocIndex:2},{value:"面积和颜色表示数据的比例和分类",paraId:3,tocIndex:2},{value:"适合的数据条数",paraId:3,tocIndex:2},{value:"数据维度较多时效果更佳",paraId:3,tocIndex:2},{value:"图表类型",paraId:4,tocIndex:3},{value:"均匀坐标轴马赛克图",paraId:4,tocIndex:3},{value:"适合的数据",paraId:4,tocIndex:3},{value:"二维分类数据",paraId:4,tocIndex:3},{value:"功能",paraId:4,tocIndex:3},{value:"显示二维分类数据的分布",paraId:4,tocIndex:3},{value:"数据与图形的映射",paraId:4,tocIndex:3},{value:"分类数据字段映射到均匀的坐标轴",paraId:4,tocIndex:3},{value:"颜色表示数据的分类",paraId:4,tocIndex:3},{value:"适合的数据条数",paraId:4,tocIndex:3},{value:"数据维度较少时效果更佳",paraId:4,tocIndex:3},{value:"例子 1: ",paraId:5,tocIndex:5},{value:"适合应用到多维分类数据分析",paraId:5,tocIndex:5},{value:"例子 2: ",paraId:6,tocIndex:5},{value:"适合应用到二维分类数据分析",paraId:6,tocIndex:5},{value:"const chart = new G2.Chart({\n  container: 'container',\n  autoFit: true,\n  height: 400,\n});\n\nchart.options({\n  type: 'cell',\n  data: [\n    { product: '手机', region: '华北', sales: 120, category: '高端' },\n    { product: '手机', region: '华东', sales: 180, category: '高端' },\n    { product: '手机', region: '华南', sales: 150, category: '高端' },\n    { product: '电脑', region: '华北', sales: 80, category: '中端' },\n    { product: '电脑', region: '华东', sales: 110, category: '中端' },\n    { product: '电脑', region: '华南', sales: 95, category: '中端' },\n    { product: '平板', region: '华北', sales: 60, category: '中端' },\n    { product: '平板', region: '华东', sales: 85, category: '中端' },\n    { product: '平板', region: '华南', sales: 70, category: '低端' },\n    { product: '耳机', region: '华北', sales: 40, category: '低端' },\n    { product: '耳机', region: '华东', sales: 55, category: '低端' },\n    { product: '耳机', region: '华南', sales: 45, category: '低端' },\n  ],\n  encode: {\n    x: 'product',\n    y: 'region',\n    color: 'category',\n    size: 'sales',\n  },\n  scale: {\n    color: {\n      palette: 'category10',\n      type: 'ordinal',\n    },\n    size: {\n      type: 'linear',\n      range: [0.3, 1],\n    },\n  },\n  style: {\n    stroke: '#fff',\n    strokeWidth: 2,\n    inset: 2,\n  },\n  legend: {\n    color: {\n      title: '产品类别',\n      position: 'top',\n    },\n    size: {\n      title: '销售额',\n      position: 'right',\n    },\n  },\n  axis: {\n    x: {\n      title: '产品类型',\n      labelAutoRotate: false,\n    },\n    y: {\n      title: '销售区域',\n    },\n  },\n  tooltip: {\n    title: (d) => `${d.product} - ${d.region}`,\n    items: [\n      { field: 'sales', name: '销售额', valueFormatter: (v) => `${v}万` },\n      { field: 'category', name: '类别' },\n    ],\n  },\n});\n\nchart.render();\n",paraId:7,tocIndex:5},{value:"例子 3: ",paraId:8,tocIndex:5},{value:"市场细分分析（非均匀马赛克图）",paraId:8,tocIndex:5},{value:"这个例子展示了如何使用非均匀马赛克图来展示不同市场细分的分布情况，其中矩形的宽度表示市场规模，高度表示各细分市场的占比。",paraId:9,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 900,\n  height: 800,\n  paddingLeft: 0,\n  paddingRight: 0,\n});\n\nchart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/3041da62-1bf4-4849-aac3-01a387544bf4.csv',\n  },\n  transform: [\n    { type: 'flexX', reducer: 'sum' }, // 灵活X轴宽度\n    { type: 'stackY' }, // Y轴堆叠\n    { type: 'normalizeY' }, // Y轴归一化\n  ],\n  encode: {\n    x: 'market',\n    y: 'value',\n    color: 'segment',\n  },\n  axis: {\n    y: false,\n  },\n  scale: {\n    x: { paddingOuter: 0, paddingInner: 0.01 },\n  },\n  tooltip: 'value',\n  label: [\n    {\n      text: 'segment',\n      x: 5,\n      y: 5,\n      textAlign: 'start',\n      textBaseline: 'top',\n      fontSize: 10,\n      fill: '#fff',\n    },\n    {\n      text: 'value',\n      x: 5,\n      y: 5,\n      textAlign: 'start',\n      dy: 15,\n      fontSize: 10,\n      fill: '#fff',\n    },\n  ],\n});\n\nchart.render();\n",paraId:10,tocIndex:5},{value:"例子 4: ",paraId:11,tocIndex:5},{value:"电影评分分布分析（密度马赛克图）",paraId:11,tocIndex:5},{value:"这个例子展示了如何使用密度马赛克图来分析 IMDB 和烂番茄评分的关系分布，颜色深浅表示电影数量的多少。",paraId:12,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'rect',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/movies.json',\n  },\n  encode: {\n    x: 'IMDB Rating',\n    y: 'Rotten Tomatoes Rating',\n  },\n  transform: [\n    { type: 'bin', color: 'count', thresholdsX: 30, thresholdsY: 20 },\n  ],\n  scale: {\n    color: { palette: 'ylGnBu' },\n  },\n  tooltip: {\n    title: { channel: 'color' },\n    items: [\n      (d, i, data, column) => ({\n        name: 'IMDB评分',\n        value: `${column.x.value[i]}, ${column.x1.value[i]}`,\n      }),\n      (d, i, data, column) => ({\n        name: '烂番茄评分',\n        value: `${column.y.value[i]}, ${column.y1.value[i]}`,\n      }),\n    ],\n    render: () => '1',\n  },\n});\n\nchart.render();\n",paraId:13,tocIndex:5},{value:"例子 5: ",paraId:14,tocIndex:5},{value:"运动员生理数据分析（分组密度马赛克图）",paraId:14,tocIndex:5},{value:"这个例子展示了如何使用马赛克图按性别分组展示运动员身高和体重的分布情况，不透明度表示数据点的密度。",paraId:15,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'rect',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n  },\n  encode: {\n    x: 'weight',\n    y: 'height',\n    color: 'sex',\n  },\n  transform: [{ type: 'bin', opacity: 'count' }],\n  legend: {\n    opacity: false,\n  },\n  style: {\n    inset: 0.5,\n  },\n  tooltip: {\n    title: { channel: 'opacity' },\n    items: [\n      (d, i, data, column) => ({\n        name: '体重',\n        value: `${column.x.value[i]}, ${column.x1.value[i]}`,\n      }),\n      (d, i, data, column) => ({\n        name: '身高',\n        value: `${column.y.value[i]}, ${column.y1.value[i]}`,\n      }),\n    ],\n  },\n});\n\nchart.render();\n",paraId:16,tocIndex:5},{value:"从图形属性上：\n",paraId:17,tocIndex:7},{value:"热力图表示第三维度的颜色是",paraId:18,tocIndex:7},{value:"线性",paraId:18,tocIndex:7},{value:"变化的。",paraId:18,tocIndex:7},{value:"马赛克图表示第三维度的颜色是",paraId:18,tocIndex:7},{value:"分类",paraId:18,tocIndex:7},{value:"的。",paraId:18,tocIndex:7},{value:"标准热力图要经过平滑算法，没有明显的边界。",paraId:18,tocIndex:7},{value:"马赛克图拥有清晰的边界。",paraId:18,tocIndex:7},{value:"从数据上看：\n",paraId:17,tocIndex:7},{value:"均匀的马赛克图和热力图在连续数据上的含义非常相似。",paraId:19,tocIndex:7},{value:"从分析需求上看：\n",paraId:17,tocIndex:7},{value:"热力图侧重于分布，可预测未知区域数据。",paraId:20,tocIndex:7},{value:"马赛克图拥有更清晰的边界，更侧重于对比。",paraId:20,tocIndex:7},{value:"A Brief History of the Mosaic Display",paraId:21,tocIndex:8},{value:"Are Mosaic Plots Worthwhile",paraId:21,tocIndex:8},{value:"Marimekko Charts",paraId:21,tocIndex:8},{value:"Marimekko Charts FusionChart",paraId:21,tocIndex:8},{value:"Marimekko Charts The Data Visualisation Catalogue",paraId:21,tocIndex:8},{value:"Marimekko Charts in Microsoft Excel",paraId:21,tocIndex:8}]},96138:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(95845);const t=[{value:"分组柱状图，又叫聚合柱状图。当使用者需要在同一个轴上显示各个分类下不同的分组时，需要用到分组柱状图。",paraId:0,tocIndex:0},{value:"跟柱状图类似，使用柱子的高度来映射和对比数据值。每个分组中的柱子使用不同的颜色或者相同颜色不同透明的方式区别各个分类，各个分组之间需要保持间隔。",paraId:1,tocIndex:0},{value:"分组柱状图经常用于不同组间数据的比较，这些组都包含了相同分类的数据。",paraId:2,tocIndex:0},{value:"但是仍需要注意，避免分组中分类过多的情况，分类过多会导致分组中柱子过多过密，非常影响图表可读性。",paraId:3,tocIndex:0},{value:"英文名",paraId:4,tocIndex:0},{value:"：Multi-set Bar Chart",paraId:4,tocIndex:0},{value:"图表类型",paraId:5,tocIndex:1},{value:"分组柱状图",paraId:5,tocIndex:1},{value:"适合的数据",paraId:5,tocIndex:1},{value:"列表：两个分类数据字段、一个连续数据字段",paraId:5,tocIndex:1},{value:"功能",paraId:5,tocIndex:1},{value:"其中一个分类数据字段作为分组，可以对比相同分组下不同分类的数据大小，也可以对比不同分组下，相同分类的数据大小",paraId:5,tocIndex:1},{value:"数据与图形的映射",paraId:5,tocIndex:1},{value:"其中一个分类数据字段映射到坐标轴的位置用于分组，另一个分类数据在同一个分组内错开，并通过不同的颜色来区分连续数据字段映射到矩形的长度",paraId:5,tocIndex:1},{value:"适合的数据条数",paraId:5,tocIndex:1},{value:"分组个数不要超过 12 个，每个分组下的分类不要超过 6 个",paraId:5,tocIndex:1},{value:"例子 1：",paraId:6,tocIndex:3},{value:"对比不同分组内相同分类的大小，对比相同分组内不同分类的大小",paraId:6,tocIndex:3},{value:"下图对比了『我是土豪』游戏公司在 2001、2002、2003 这三年的各类游戏的销量情况。\n水平轴显示的是不同的游戏类型，每种游戏类型作为一个柱状图的分组，在每一个分组内对比不同年份的销售数量。",paraId:7,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { year: '2001', genre: 'Sports', sold: 27500 },\n  { year: '2001', genre: 'Strategy', sold: 11500 },\n  { year: '2001', genre: 'Action', sold: 6000 },\n  { year: '2001', genre: 'Shooter', sold: 3500 },\n  { year: '2001', genre: 'Other', sold: 1500 },\n  { year: '2002', genre: 'Sports', sold: 29500 },\n  { year: '2002', genre: 'Strategy', sold: 10500 },\n  { year: '2002', genre: 'Action', sold: 8000 },\n  { year: '2002', genre: 'Shooter', sold: 4500 },\n  { year: '2002', genre: 'Other', sold: 1800 },\n  { year: '2003', genre: 'Sports', sold: 30500 },\n  { year: '2003', genre: 'Strategy', sold: 12500 },\n  { year: '2003', genre: 'Action', sold: 4000 },\n  { year: '2003', genre: 'Shooter', sold: 6500 },\n  { year: '2003', genre: 'Other', sold: 2000 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  height: 400,\n});\n\nchart.options({\n  type: 'interval',\n  data,\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    color: 'year',\n  },\n  transform: [{ type: 'dodgeX' }],\n  axis: {\n    y: { title: '游戏销售量' },\n    x: { title: '游戏类型' },\n  },\n});\n\nchart.render();\n",paraId:8,tocIndex:3},{value:"说明：",paraId:9,tocIndex:3},{value:"genre",paraId:10,tocIndex:3},{value:"，使用横轴的",paraId:10,tocIndex:3},{value:"位置",paraId:10,tocIndex:3},{value:"来区分不同的游戏类型",paraId:10,tocIndex:3},{value:"year",paraId:10,tocIndex:3},{value:"，使用",paraId:10,tocIndex:3},{value:"颜色",paraId:10,tocIndex:3},{value:"和在同一个游戏类型内的错开的",paraId:10,tocIndex:3},{value:"位置",paraId:10,tocIndex:3},{value:"，来区分不同年份的游戏销售",paraId:10,tocIndex:3},{value:"sold",paraId:10,tocIndex:3},{value:"，使用矩形的",paraId:10,tocIndex:3},{value:"长度",paraId:10,tocIndex:3},{value:"对比不同游戏、不同年份的销量",paraId:10,tocIndex:3},{value:"例子 1：",paraId:11,tocIndex:4},{value:"分组过多、分类过多",paraId:11,tocIndex:4},{value:"当分组和分类过多时会导致柱子过多过密，可读性不佳，如下图所示：",paraId:12,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\n// 完整的barley数据集 - 演示分组过多的问题\nconst barleyData = [\n  { yield: 27, variety: 'Manchuria', year: 1931, site: 'University Farm' },\n  { yield: 48.87, variety: 'Manchuria', year: 1931, site: 'Waseca' },\n  { yield: 27.43, variety: 'Manchuria', year: 1931, site: 'Morris' },\n  { yield: 39.93, variety: 'Manchuria', year: 1931, site: 'Crookston' },\n  { yield: 32.97, variety: 'Manchuria', year: 1931, site: 'Grand Rapids' },\n  { yield: 28.97, variety: 'Manchuria', year: 1931, site: 'Duluth' },\n  { yield: 43.07, variety: 'Glabron', year: 1931, site: 'University Farm' },\n  { yield: 55.2, variety: 'Glabron', year: 1931, site: 'Waseca' },\n  { yield: 28.77, variety: 'Glabron', year: 1931, site: 'Morris' },\n  { yield: 38.13, variety: 'Glabron', year: 1931, site: 'Crookston' },\n  { yield: 29.13, variety: 'Glabron', year: 1931, site: 'Grand Rapids' },\n  { yield: 29.67, variety: 'Glabron', year: 1931, site: 'Duluth' },\n  { yield: 35.13, variety: 'Svansota', year: 1931, site: 'University Farm' },\n  { yield: 47.33, variety: 'Svansota', year: 1931, site: 'Waseca' },\n  { yield: 25.77, variety: 'Svansota', year: 1931, site: 'Morris' },\n  { yield: 40.47, variety: 'Svansota', year: 1931, site: 'Crookston' },\n  { yield: 29.67, variety: 'Svansota', year: 1931, site: 'Grand Rapids' },\n  { yield: 25.7, variety: 'Svansota', year: 1931, site: 'Duluth' },\n  { yield: 39.9, variety: 'Velvet', year: 1931, site: 'University Farm' },\n  { yield: 50.23, variety: 'Velvet', year: 1931, site: 'Waseca' },\n  { yield: 26.13, variety: 'Velvet', year: 1931, site: 'Morris' },\n  { yield: 41.33, variety: 'Velvet', year: 1931, site: 'Crookston' },\n  { yield: 23.03, variety: 'Velvet', year: 1931, site: 'Grand Rapids' },\n  { yield: 26.3, variety: 'Velvet', year: 1931, site: 'Duluth' },\n  { yield: 36.57, variety: 'Trebi', year: 1931, site: 'University Farm' },\n  { yield: 63.83, variety: 'Trebi', year: 1931, site: 'Waseca' },\n  { yield: 43.77, variety: 'Trebi', year: 1931, site: 'Morris' },\n  { yield: 46.93, variety: 'Trebi', year: 1931, site: 'Crookston' },\n  { yield: 29.77, variety: 'Trebi', year: 1931, site: 'Grand Rapids' },\n  { yield: 33.93, variety: 'Trebi', year: 1931, site: 'Duluth' },\n];\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  paddingLeft: 50,\n});\n\nchart.options({\n  type: 'interval',\n  data: barleyData,\n  encode: {\n    x: 'site',\n    y: 'yield',\n    color: 'variety',\n  },\n  transform: [{ type: 'dodgeX' }],\n  axis: {\n    x: {\n      labelAutoHide: true,\n      labelAutoRotate: true,\n    },\n  },\n  tooltip: {\n    title: 'site',\n  },\n});\n\nchart.render();\n",paraId:13,tocIndex:4},{value:"优化方式 1：仅显示重要数据",paraId:14,tocIndex:4},{value:"通过筛选或聚合数据，只展示排名靠前或最重要的几个分组：",paraId:15,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\n// 筛选后的数据 - 只显示前3个地点，演示优化效果\nconst filteredBarleyData = [\n  { yield: 27, variety: 'Manchuria', year: 1931, site: 'University Farm' },\n  { yield: 48.87, variety: 'Manchuria', year: 1931, site: 'Waseca' },\n  { yield: 27.43, variety: 'Manchuria', year: 1931, site: 'Morris' },\n  { yield: 43.07, variety: 'Glabron', year: 1931, site: 'University Farm' },\n  { yield: 55.2, variety: 'Glabron', year: 1931, site: 'Waseca' },\n  { yield: 28.77, variety: 'Glabron', year: 1931, site: 'Morris' },\n  { yield: 35.13, variety: 'Svansota', year: 1931, site: 'University Farm' },\n  { yield: 47.33, variety: 'Svansota', year: 1931, site: 'Waseca' },\n  { yield: 25.77, variety: 'Svansota', year: 1931, site: 'Morris' },\n  { yield: 39.9, variety: 'Velvet', year: 1931, site: 'University Farm' },\n  { yield: 50.23, variety: 'Velvet', year: 1931, site: 'Waseca' },\n  { yield: 26.13, variety: 'Velvet', year: 1931, site: 'Morris' },\n  { yield: 36.57, variety: 'Trebi', year: 1931, site: 'University Farm' },\n  { yield: 63.83, variety: 'Trebi', year: 1931, site: 'Waseca' },\n  { yield: 43.77, variety: 'Trebi', year: 1931, site: 'Morris' },\n];\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  paddingLeft: 50,\n});\n\nchart.options({\n  type: 'interval',\n  data: filteredBarleyData,\n  encode: {\n    x: 'site',\n    y: 'yield',\n    color: 'variety',\n  },\n  transform: [{ type: 'dodgeX' }],\n  axis: {\n    x: {\n      labelAutoHide: true,\n      labelAutoRotate: true,\n    },\n  },\n  tooltip: {\n    title: 'site',\n  },\n});\n\nchart.render();\n",paraId:16,tocIndex:4},{value:"优化方式 2：使用堆叠柱状图",paraId:17,tocIndex:4},{value:"如果需要展示完整数据，推荐使用堆叠柱状图来减少图表宽度，提高可读性：",paraId:18,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\n// 完整的barley数据集 - 演示堆叠柱状图优化效果\nconst barleyData = [\n  { yield: 27, variety: 'Manchuria', year: 1931, site: 'University Farm' },\n  { yield: 48.87, variety: 'Manchuria', year: 1931, site: 'Waseca' },\n  { yield: 27.43, variety: 'Manchuria', year: 1931, site: 'Morris' },\n  { yield: 39.93, variety: 'Manchuria', year: 1931, site: 'Crookston' },\n  { yield: 32.97, variety: 'Manchuria', year: 1931, site: 'Grand Rapids' },\n  { yield: 28.97, variety: 'Manchuria', year: 1931, site: 'Duluth' },\n  { yield: 43.07, variety: 'Glabron', year: 1931, site: 'University Farm' },\n  { yield: 55.2, variety: 'Glabron', year: 1931, site: 'Waseca' },\n  { yield: 28.77, variety: 'Glabron', year: 1931, site: 'Morris' },\n  { yield: 38.13, variety: 'Glabron', year: 1931, site: 'Crookston' },\n  { yield: 29.13, variety: 'Glabron', year: 1931, site: 'Grand Rapids' },\n  { yield: 29.67, variety: 'Glabron', year: 1931, site: 'Duluth' },\n  { yield: 35.13, variety: 'Svansota', year: 1931, site: 'University Farm' },\n  { yield: 47.33, variety: 'Svansota', year: 1931, site: 'Waseca' },\n  { yield: 25.77, variety: 'Svansota', year: 1931, site: 'Morris' },\n  { yield: 40.47, variety: 'Svansota', year: 1931, site: 'Crookston' },\n  { yield: 29.67, variety: 'Svansota', year: 1931, site: 'Grand Rapids' },\n  { yield: 25.7, variety: 'Svansota', year: 1931, site: 'Duluth' },\n  { yield: 39.9, variety: 'Velvet', year: 1931, site: 'University Farm' },\n  { yield: 50.23, variety: 'Velvet', year: 1931, site: 'Waseca' },\n  { yield: 26.13, variety: 'Velvet', year: 1931, site: 'Morris' },\n  { yield: 41.33, variety: 'Velvet', year: 1931, site: 'Crookston' },\n  { yield: 23.03, variety: 'Velvet', year: 1931, site: 'Grand Rapids' },\n  { yield: 26.3, variety: 'Velvet', year: 1931, site: 'Duluth' },\n  { yield: 36.57, variety: 'Trebi', year: 1931, site: 'University Farm' },\n  { yield: 63.83, variety: 'Trebi', year: 1931, site: 'Waseca' },\n  { yield: 43.77, variety: 'Trebi', year: 1931, site: 'Morris' },\n  { yield: 46.93, variety: 'Trebi', year: 1931, site: 'Crookston' },\n  { yield: 29.77, variety: 'Trebi', year: 1931, site: 'Grand Rapids' },\n  { yield: 33.93, variety: 'Trebi', year: 1931, site: 'Duluth' },\n];\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  paddingLeft: 50,\n});\n\nchart.options({\n  type: 'interval',\n  data: barleyData,\n  encode: {\n    x: 'site',\n    y: 'yield',\n    color: 'variety',\n  },\n  transform: [{ type: 'stackY' }],\n  axis: {\n    x: {\n      labelAutoHide: true,\n      labelAutoRotate: true,\n    },\n  },\n  tooltip: {\n    title: 'site',\n  },\n});\n\nchart.render();\n",paraId:19,tocIndex:4},{value:"优化方式 3：使用横向堆叠柱状图",paraId:20,tocIndex:4},{value:"对于大量数据的情况，横向堆叠柱状图是更好的选择，可以充分利用垂直空间展示更多分类：",paraId:21,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\n// 完整的barley数据集 - 演示横向堆叠柱状图的优化效果\nconst barleyData = [\n  { yield: 27, variety: 'Manchuria', year: 1931, site: 'University Farm' },\n  { yield: 48.87, variety: 'Manchuria', year: 1931, site: 'Waseca' },\n  { yield: 27.43, variety: 'Manchuria', year: 1931, site: 'Morris' },\n  { yield: 39.93, variety: 'Manchuria', year: 1931, site: 'Crookston' },\n  { yield: 32.97, variety: 'Manchuria', year: 1931, site: 'Grand Rapids' },\n  { yield: 28.97, variety: 'Manchuria', year: 1931, site: 'Duluth' },\n  { yield: 43.07, variety: 'Glabron', year: 1931, site: 'University Farm' },\n  { yield: 55.2, variety: 'Glabron', year: 1931, site: 'Waseca' },\n  { yield: 28.77, variety: 'Glabron', year: 1931, site: 'Morris' },\n  { yield: 38.13, variety: 'Glabron', year: 1931, site: 'Crookston' },\n  { yield: 29.13, variety: 'Glabron', year: 1931, site: 'Grand Rapids' },\n  { yield: 29.67, variety: 'Glabron', year: 1931, site: 'Duluth' },\n  { yield: 35.13, variety: 'Svansota', year: 1931, site: 'University Farm' },\n  { yield: 47.33, variety: 'Svansota', year: 1931, site: 'Waseca' },\n  { yield: 25.77, variety: 'Svansota', year: 1931, site: 'Morris' },\n  { yield: 40.47, variety: 'Svansota', year: 1931, site: 'Crookston' },\n  { yield: 29.67, variety: 'Svansota', year: 1931, site: 'Grand Rapids' },\n  { yield: 25.7, variety: 'Svansota', year: 1931, site: 'Duluth' },\n  { yield: 39.9, variety: 'Velvet', year: 1931, site: 'University Farm' },\n  { yield: 50.23, variety: 'Velvet', year: 1931, site: 'Waseca' },\n  { yield: 26.13, variety: 'Velvet', year: 1931, site: 'Morris' },\n  { yield: 41.33, variety: 'Velvet', year: 1931, site: 'Crookston' },\n  { yield: 23.03, variety: 'Velvet', year: 1931, site: 'Grand Rapids' },\n  { yield: 26.3, variety: 'Velvet', year: 1931, site: 'Duluth' },\n  { yield: 36.57, variety: 'Trebi', year: 1931, site: 'University Farm' },\n  { yield: 63.83, variety: 'Trebi', year: 1931, site: 'Waseca' },\n  { yield: 43.77, variety: 'Trebi', year: 1931, site: 'Morris' },\n  { yield: 46.93, variety: 'Trebi', year: 1931, site: 'Crookston' },\n  { yield: 29.77, variety: 'Trebi', year: 1931, site: 'Grand Rapids' },\n  { yield: 33.93, variety: 'Trebi', year: 1931, site: 'Duluth' },\n];\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  height: 400,\n});\n\nchart.options({\n  type: 'interval',\n  data: barleyData,\n  coordinate: {\n    transform: [{ type: 'transpose' }],\n  },\n  encode: {\n    x: 'site',\n    y: 'yield',\n    color: 'variety',\n  },\n  transform: [{ type: 'stackY' }, { type: 'sortX', by: 'y', reverse: true }],\n  axis: {\n    y: {\n      labelAutoHide: false,\n      title: 'Yield (bushels/acre)',\n    },\n    x: {\n      labelAutoHide: false,\n    },\n  },\n  tooltip: {\n    title: 'site',\n  },\n});\n\nchart.render();\n",paraId:22,tocIndex:4},{value:"当分组名称较长或者需要显示更多分组时，可以使用横向分组柱状图：",paraId:23,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { category: '体育游戏', year: '2001', sold: 27500 },\n  { category: '策略游戏', year: '2001', sold: 11500 },\n  { category: '动作游戏', year: '2001', sold: 6000 },\n  { category: '射击游戏', year: '2001', sold: 3500 },\n  { category: '体育游戏', year: '2002', sold: 29500 },\n  { category: '策略游戏', year: '2002', sold: 10500 },\n  { category: '动作游戏', year: '2002', sold: 8000 },\n  { category: '射击游戏', year: '2002', sold: 4500 },\n  { category: '体育游戏', year: '2003', sold: 30500 },\n  { category: '策略游戏', year: '2003', sold: 12500 },\n  { category: '动作游戏', year: '2003', sold: 4000 },\n  { category: '射击游戏', year: '2003', sold: 6500 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  height: 400,\n});\n\nchart.options({\n  type: 'interval',\n  data,\n  coordinate: { transform: [{ type: 'transpose' }] },\n  encode: {\n    x: 'sold',\n    y: 'category',\n    color: 'year',\n  },\n  transform: [{ type: 'dodgeX' }],\n  axis: {\n    x: { title: '游戏销售量' },\n    y: { title: '游戏类型' },\n  },\n});\n\nchart.render();\n",paraId:24,tocIndex:6},{value:"分组柱状图可以增加一个维度，用于对比一组数据内不同分类的数据值大小，可以表示 3 个数据字段（维度）的数据，而一般柱状图只能表示 2 个数据字段（维度）",paraId:25,tocIndex:8},{value:"分组柱状图的柱子较多，所以能展示的分组较少",paraId:25,tocIndex:8},{value:"分组柱状图，可以对比同一个分组内部不同分类的数据大小，也可以对比不同分组内相同分类的数据大小，但无法对比各分组的总量",paraId:26,tocIndex:9},{value:"层叠柱状图，可以对比同一个分组内部不同分类的数据大小或占比，也可以对比分组的总量，但不适合对比不同分组内相同分类的数据大小",paraId:26,tocIndex:9}]},8310:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(37266);const t=[]},51080:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(65529);const t=[{value:"打包图是一种树形层次结构的可视化图表，使用圆形（而非矩形）一层又一层地代表整个层次结构。每个圆圈代表层次结构中的一个节点，圆圈的大小与其数值成正比，包含关系通过圆圈的嵌套来表示。",paraId:0,tocIndex:0},{value:"打包图特别适合展示具有层级关系的数据，如组织架构、文件系统、软件包结构等。相比于传统的树形图，打包图通过圆形的嵌套关系更加直观地展示了数据的包含关系和数值比例，使得用户能够快速理解数据的层次结构和各部分的相对重要性。",paraId:1,tocIndex:0},{value:"当数据具有明显的层级结构且需要同时展示包含关系和数值大小时，打包图是一个很好的选择。它既能展示整体的层次结构，又能通过圆圈大小比较各节点的数值。",paraId:2,tocIndex:0},{value:"英文名",paraId:3,tocIndex:0},{value:"：Circle Packing, Pack Chart",paraId:3,tocIndex:0},{value:"图表类型",paraId:4,tocIndex:1},{value:"打包图",paraId:4,tocIndex:1},{value:"适合的数据",paraId:4,tocIndex:1},{value:"层次化数据：具有树状结构的嵌套数据，包含分类字段和数值字段",paraId:4,tocIndex:1},{value:"功能",paraId:4,tocIndex:1},{value:"展示层次化数据的包含关系和数值比例",paraId:4,tocIndex:1},{value:"数据与图形的映射",paraId:4,tocIndex:1},{value:"层级关系映射到嵌套圆圈",paraId:4,tocIndex:1},{value:"数值大小映射到圆圈半径",paraId:4,tocIndex:1},{value:"不同层级通过颜色和嵌套关系区分",paraId:4,tocIndex:1},{value:"适合的场景",paraId:4,tocIndex:1},{value:"软件包结构、组织架构、文件系统等具有清晰层次和包含关系的数据展示",paraId:4,tocIndex:1},{value:"例子 1: ",paraId:5,tocIndex:3},{value:"展示软件包层次结构",paraId:5,tocIndex:3},{value:"下图展示了软件项目的模块层次结构，通过打包图可以清晰地看到各个模块和子模块的大小分布，帮助开发者了解代码结构。",paraId:6,tocIndex:3},{value:"import { Chart } from '@antv/g2';\nimport { interpolateHcl } from 'd3-interpolate';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'pack',\n  width: 800,\n  height: 600,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/flare.json',\n  },\n  encode: {\n    value: 'value',\n    color: 'depth',\n  },\n  scale: {\n    color: {\n      domain: [0, 5],\n      range: ['hsl(152,80%,80%)', 'hsl(228,30%,40%)'],\n      interpolate: interpolateHcl,\n    },\n  },\n  style: {\n    labelText: (d) => (d.r >= 10 && d.height === 0 ? `${d.data.name}` : ''),\n    labelFontSize: 8,\n  },\n  legend: { color: false },\n  tooltip: {\n    title: (d) => d.data.name,\n    items: [{ field: 'value', name: '大小' }],\n  },\n});\n\nchart.render();\n",paraId:7,tocIndex:3},{value:"说明",paraId:8,tocIndex:3},{value:"：",paraId:8,tocIndex:3},{value:"value",paraId:9,tocIndex:3},{value:" 字段映射到圆圈大小，表示模块的代码量",paraId:9,tocIndex:3},{value:"depth",paraId:9,tocIndex:3},{value:" 字段映射到颜色，区分不同层级",paraId:9,tocIndex:3},{value:"通过 ",paraId:9,tocIndex:3},{value:"labelText",paraId:9,tocIndex:3},{value:" 设置标签显示条件",paraId:9,tocIndex:3},{value:"例子 2: ",paraId:10,tocIndex:3},{value:"展示组织架构人数分布",paraId:10,tocIndex:3},{value:"打包图非常适合展示组织架构中各部门的人数分布，让管理者一目了然地看到各部门的规模。",paraId:11,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nconst orgData = {\n  name: '公司',\n  value: 500,\n  children: [\n    {\n      name: '技术部',\n      value: 200,\n      children: [\n        { name: '前端团队', value: 80 },\n        { name: '后端团队', value: 90 },\n        { name: '算法团队', value: 30 },\n      ],\n    },\n    {\n      name: '产品部',\n      value: 120,\n      children: [\n        { name: '产品设计', value: 50 },\n        { name: '用户研究', value: 30 },\n        { name: '数据分析', value: 40 },\n      ],\n    },\n    {\n      name: '运营部',\n      value: 100,\n      children: [\n        { name: '市场推广', value: 60 },\n        { name: '客户服务', value: 40 },\n      ],\n    },\n    {\n      name: '行政部',\n      value: 80,\n      children: [\n        { name: '人力资源', value: 30 },\n        { name: '财务', value: 25 },\n        { name: '法务', value: 25 },\n      ],\n    },\n  ],\n};\n\nchart.options({\n  type: 'pack',\n  width: 700,\n  height: 500,\n  data: { value: orgData },\n  layout: {\n    padding: 8,\n    sort: (a, b) => b.value - a.value,\n  },\n  encode: {\n    value: 'value',\n    color: 'depth',\n  },\n  scale: {\n    color: {\n      range: ['#E8F4FD', '#1890FF', '#003A8C'],\n    },\n  },\n  labels: [\n    {\n      text: (d) => d.data.name,\n      position: 'inside',\n      fontWeight: (d) => (d.depth <= 1 ? 'bold' : 'normal'),\n      fontSize: (d) => Math.max(8, Math.min(14, d.r / 3)),\n      background: (d) => d.data.children, // 背景展示\n      backgroundFill: '#fff',\n      transform: [\n        { type: 'contrastReverse' },\n        { type: 'overflowStroke' },\n        { type: 'overlapDodgeY', padding: 8 },\n      ],\n    },\n  ],\n  legend: { color: false },\n  tooltip: {\n    title: (d) => d.data.name,\n    items: [{ field: 'value', name: '人数' }],\n  },\n});\n\nchart.render();\n",paraId:12,tocIndex:3},{value:"说明",paraId:13,tocIndex:3},{value:"：",paraId:13,tocIndex:3},{value:"使用嵌套数据结构表示组织层级",paraId:14,tocIndex:3},{value:"sort",paraId:14,tocIndex:3},{value:" 配置按数值大小排序，大圆圈优先显示",paraId:14,tocIndex:3},{value:"通过 ",paraId:14,tocIndex:3},{value:"labelFontSize",paraId:14,tocIndex:3},{value:" 动态调整字体大小适应圆圈",paraId:14,tocIndex:3},{value:"使用不同的标签颜色区分层级",paraId:14,tocIndex:3},{value:"例子 3: ",paraId:15,tocIndex:3},{value:"展示投资组合分布",paraId:15,tocIndex:3},{value:"打包图可以清晰地展示投资组合中各资产类别及具体投资项目的占比关系。",paraId:16,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nconst portfolioData = {\n  name: '投资组合',\n  value: 1000000,\n  children: [\n    {\n      name: '股票',\n      value: 400000,\n      children: [\n        { name: '科技股', value: 180000 },\n        { name: '金融股', value: 120000 },\n        { name: '消费股', value: 100000 },\n      ],\n    },\n    {\n      name: '债券',\n      value: 300000,\n      children: [\n        { name: '国债', value: 150000 },\n        { name: '企业债', value: 100000 },\n        { name: '可转债', value: 50000 },\n      ],\n    },\n    {\n      name: '基金',\n      value: 200000,\n      children: [\n        { name: '股票型基金', value: 80000 },\n        { name: '债券型基金', value: 70000 },\n        { name: '混合型基金', value: 50000 },\n      ],\n    },\n    {\n      name: '现金',\n      value: 100000,\n    },\n  ],\n};\n\nchart.options({\n  type: 'pack',\n  width: 600,\n  height: 600,\n  data: { value: portfolioData },\n  layout: {\n    padding: 3,\n  },\n  encode: {\n    value: 'value',\n    color: (d) => {\n      const parentName =\n        d.depth === 0 ? 'root' : d.parent?.data?.name || d.data.name;\n      return parentName;\n    },\n  },\n  scale: {\n    color: {\n      range: ['#FFF7E6', '#FFE7BA', '#FFC069', '#FA8C16', '#D46B08'],\n    },\n  },\n  style: {\n    labelText: (d) => {\n      if (d.height === 0) return d.data.name;\n      if (d.depth === 0) return '';\n      return d.data.name;\n    },\n    labelFill: '#fff',\n    labelFontWeight: 'bold',\n    labelFontSize: (d) => Math.max(8, Math.min(12, d.r / 4)),\n    stroke: '#fff',\n    strokeWidth: 1,\n    fillOpacity: 0.8,\n    labelBackground: (d) => d.data.children, // 背景展示\n    labelBackgroundFill: '#fff',\n    labelTransform: [\n      { type: 'contrastReverse' },\n      { type: 'overflowStroke' },\n      { type: 'overlapDodgeY', padding: 8 },\n    ],\n  },\n  legend: { color: false },\n  tooltip: {\n    title: (d) => d.data.name,\n    items: [\n      {\n        field: 'value',\n        name: '金额',\n        valueFormatter: (v) => `¥${(v / 10000).toFixed(1)}万`,\n      },\n    ],\n  },\n});\n\nchart.render();\n",paraId:17,tocIndex:3},{value:"说明",paraId:18,tocIndex:3},{value:"：",paraId:18,tocIndex:3},{value:"使用自定义颜色映射区分不同资产类别",paraId:19,tocIndex:3},{value:"通过 ",paraId:19,tocIndex:3},{value:"fillOpacity",paraId:19,tocIndex:3},{value:" 设置透明度增强视觉效果",paraId:19,tocIndex:3},{value:"自定义 ",paraId:19,tocIndex:3},{value:"valueFormatter",paraId:19,tocIndex:3},{value:" 格式化金额显示",paraId:19,tocIndex:3},{value:"矩形树图",paraId:20,tocIndex:4},{value:"打包图和矩形树图都能展示层次化数据，但具有不同的特征：",paraId:21,tocIndex:5},{value:"对比维度",paraId:22,tocIndex:5},{value:"打包图",paraId:22,tocIndex:5},{value:"矩形树图",paraId:22,tocIndex:5},{value:"视觉形式",paraId:22,tocIndex:5},{value:"圆形嵌套布局",paraId:22,tocIndex:5},{value:"矩形嵌套布局",paraId:22,tocIndex:5},{value:"空间利用",paraId:22,tocIndex:5},{value:"圆形边界，利用率较低",paraId:22,tocIndex:5},{value:"矩形填充，利用率高",paraId:22,tocIndex:5},{value:"比例感知",paraId:22,tocIndex:5},{value:"面积比较，但圆形判断相对困难",paraId:22,tocIndex:5},{value:"面积比较，矩形更易精确判断",paraId:22,tocIndex:5},{value:"层次展示",paraId:22,tocIndex:5},{value:"嵌套圆圈，包含关系直观",paraId:22,tocIndex:5},{value:"嵌套矩形，包含关系明确",paraId:22,tocIndex:5},{value:"美观性",paraId:22,tocIndex:5},{value:"圆形布局更加美观和谐",paraId:22,tocIndex:5},{value:"矩形布局简洁实用",paraId:22,tocIndex:5},{value:"适用场景",paraId:22,tocIndex:5},{value:"强调视觉美感和整体包含关系",paraId:22,tocIndex:5},{value:"强调精确的比例对比和空间效率",paraId:22,tocIndex:5},{value:"旭日图",paraId:23,tocIndex:5},{value:"打包图和旭日图都使用圆形布局展示层次数据，但展现方式不同：",paraId:24,tocIndex:6},{value:"对比维度",paraId:25,tocIndex:6},{value:"打包图",paraId:25,tocIndex:6},{value:"旭日图",paraId:25,tocIndex:6},{value:"布局方式",paraId:25,tocIndex:6},{value:"嵌套圆圈，内部包含",paraId:25,tocIndex:6},{value:"同心圆环，径向展开",paraId:25,tocIndex:6},{value:"数值映射",paraId:25,tocIndex:6},{value:"圆圈面积表示数值大小",paraId:25,tocIndex:6},{value:"扇形角度表示数值大小",paraId:25,tocIndex:6},{value:"层次关系",paraId:25,tocIndex:6},{value:"通过嵌套层级表示包含关系",paraId:25,tocIndex:6},{value:"通过径向距离表示层级深度",paraId:25,tocIndex:6},{value:"中心区域",paraId:25,tocIndex:6},{value:"根节点占据中心圆圈",paraId:25,tocIndex:6},{value:"中心可用于显示标题或交互",paraId:25,tocIndex:6},{value:"交互体验",paraId:25,tocIndex:6},{value:"点击节点下钻到子层级",paraId:25,tocIndex:6},{value:"点击扇形下钻，支持面包屑导航",paraId:25,tocIndex:6},{value:"适用场景",paraId:25,tocIndex:6},{value:"强调包含关系和整体结构",paraId:25,tocIndex:6},{value:"强调层级导航和比例分配",paraId:25,tocIndex:6}]},90390:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(52107);const t=[{value:'平行坐标系，是一种含有多个垂直平行坐标轴的统计图表。每个垂直坐标轴表示一个字段，每个字段又用刻度来标明范围。这样，一个多维的数据可以很容易的在每一条轴上找到"落点"，从而连接起来，形成一条折线。随着数据增多，折线堆叠，分析者则有可能从中发现特性和规律，比如发现数据之间的聚类关系。',paraId:0,tocIndex:0},{value:"尽管表面上类似",paraId:1,tocIndex:0},{value:"折线图",paraId:2,tocIndex:0},{value:"，但平行坐标系并不表示趋势，各个坐标轴之间也没有因果关系。因此，使用平行坐标系时，如何确定轴的顺序，是可以人为决定的。一般来说，顺序会影响阅读的感知和判断。两根坐标轴隔得越近，人们对二者的对比就感知的越强烈。因此，要得出最合适、美观的排序方式，往往需要经过多次的试验和比较。反过来讲，尝试不同的排布方式，也可能有助于得出更多的结论。",paraId:1,tocIndex:0},{value:"此外，平行坐标系的每个坐标轴，很可能有不同的数据范围，这一点很容易造成读者误解。作图时，最好显著的标明每一根轴上的最小值、最大值。",paraId:3,tocIndex:0},{value:"英文名",paraId:4,tocIndex:0},{value:"：Parallel Coordinates",paraId:4,tocIndex:0},{value:"图表类型",paraId:5,tocIndex:2},{value:"垂直平行坐标系",paraId:5,tocIndex:2},{value:"适合的数据",paraId:5,tocIndex:2},{value:"表格：多个连续数据字段，可选一个分类数据字段用于颜色编码",paraId:5,tocIndex:2},{value:"功能",paraId:5,tocIndex:2},{value:"分析多个变量之间的关系，识别数据模式和聚类",paraId:5,tocIndex:2},{value:"数据与图形的映射",paraId:5,tocIndex:2},{value:"每个数据维度映射到一个垂直坐标轴",paraId:5,tocIndex:2},{value:"数据记录映射到连接各轴的折线",paraId:5,tocIndex:2},{value:"可选分类字段映射到线条颜色",paraId:5,tocIndex:2},{value:"适合的数据条数",paraId:5,tocIndex:2},{value:"适中数据量（建议不超过 1000 条记录，过多时建议使用透明度或筛选）",paraId:5,tocIndex:2},{value:"图表类型",paraId:6,tocIndex:3},{value:"水平平行坐标系",paraId:6,tocIndex:3},{value:"适合的数据",paraId:6,tocIndex:3},{value:"表格：多个连续数据字段，可选一个分类数据字段用于颜色编码",paraId:6,tocIndex:3},{value:"功能",paraId:6,tocIndex:3},{value:"分析多个变量之间的关系，适合维度名称较长的情况",paraId:6,tocIndex:3},{value:"数据与图形的映射",paraId:6,tocIndex:3},{value:"每个数据维度映射到一个水平坐标轴",paraId:6,tocIndex:3},{value:"数据记录映射到连接各轴的折线",paraId:6,tocIndex:3},{value:"适合的数据条数",paraId:6,tocIndex:3},{value:"适中数据量，比垂直布局能容纳更多的维度标签",paraId:6,tocIndex:3},{value:"例子 1: ",paraId:7,tocIndex:5},{value:"多维数据关系分析",paraId:7,tocIndex:5},{value:"下图展示了汽车数据集中多个性能指标之间的关系，包括燃油经济性、气缸数、排量、马力、重量等。",paraId:8,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst axis = {\n  zIndex: 1,\n  titlePosition: 'right',\n  line: true,\n  labelStroke: '#fff',\n  labelLineWidth: 5,\n  labelFontSize: 10,\n  labelStrokeLineJoin: 'round',\n  titleStroke: '#fff',\n  titleFontSize: 10,\n  titleLineWidth: 5,\n  titleStrokeLineJoin: 'round',\n  titleTransform: 'translate(-50%, 0) rotate(-90)',\n  lineStroke: 'black',\n  tickStroke: 'black',\n  lineLineWidth: 1,\n};\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/cars3.json',\n  },\n  coordinate: { type: 'parallel' },\n  encode: {\n    position: [\n      'economy (mpg)',\n      'cylinders',\n      'displacement (cc)',\n      'power (hp)',\n      'weight (lb)',\n      '0-60 mph (s)',\n      'year',\n    ],\n    color: 'weight (lb)',\n  },\n  style: {\n    lineWidth: 1.5,\n    strokeOpacity: 0.4,\n  },\n  scale: {\n    color: {\n      palette: 'brBG',\n      offset: (t) => 1 - t,\n    },\n  },\n  legend: {\n    color: { length: 400, layout: { justifyContent: 'center' } },\n  },\n  axis: {\n    position: axis,\n    position1: axis,\n    position2: axis,\n    position3: axis,\n    position4: axis,\n    position5: axis,\n    position6: axis,\n    position7: axis,\n  },\n  interaction: {\n    tooltip: { series: false },\n  },\n});\n\nchart.render();\n",paraId:9,tocIndex:5},{value:"说明",paraId:10,tocIndex:5},{value:"：",paraId:10,tocIndex:5},{value:"每条线代表一辆汽车的多个性能指标",paraId:11,tocIndex:5},{value:"线条颜色根据汽车重量进行编码，便于识别重量相关的模式",paraId:11,tocIndex:5},{value:"可以观察到重量与燃油经济性、加速性能等指标的关系",paraId:11,tocIndex:5},{value:"例子 2: ",paraId:12,tocIndex:5},{value:"数据聚类识别",paraId:12,tocIndex:5},{value:"通过平行坐标系可以识别具有相似模式的数据群组。",paraId:13,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\nconst axis = {\n  zIndex: 1,\n  titlePosition: 'right',\n  line: true,\n  labelStroke: '#fff',\n  labelLineWidth: 5,\n  labelFontSize: 10,\n  labelStrokeLineJoin: 'round',\n  titleStroke: '#fff',\n  titleFontSize: 10,\n  titleLineWidth: 5,\n  titleStrokeLineJoin: 'round',\n  titleTransform: 'translate(-50%, 0) rotate(-90)',\n  lineStroke: 'black',\n  tickStroke: 'black',\n  lineLineWidth: 1,\n};\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: [\n    { A: 10, B: 30, C: 20, D: 60, group: '组1' },\n    { A: 12, B: 32, C: 22, D: 58, group: '组1' },\n    { A: 8, B: 28, C: 18, D: 62, group: '组1' },\n    { A: 50, B: 20, C: 80, D: 30, group: '组2' },\n    { A: 52, B: 18, C: 82, D: 28, group: '组2' },\n    { A: 48, B: 22, C: 78, D: 32, group: '组2' },\n    { A: 80, B: 60, C: 40, D: 10, group: '组3' },\n    { A: 82, B: 58, C: 42, D: 12, group: '组3' },\n    { A: 78, B: 62, C: 38, D: 8, group: '组3' },\n  ],\n  coordinate: { type: 'parallel' },\n  encode: {\n    position: ['A', 'B', 'C', 'D'],\n    color: 'group',\n  },\n  style: {\n    lineWidth: 3,\n    strokeOpacity: 0.8,\n  },\n  scale: {\n    color: {\n      palette: 'category10',\n    },\n  },\n  axis: {\n    position: axis,\n    position1: axis,\n    position2: axis,\n    position3: axis,\n  },\n  legend: {\n    color: { position: 'bottom' },\n  },\n  interaction: {\n    tooltip: { series: false },\n  },\n});\n\nchart.render();\n",paraId:14,tocIndex:5},{value:"例子 1: ",paraId:15,tocIndex:6},{value:"维度过少",paraId:15,tocIndex:6},{value:"当只有 2-3 个维度时，使用散点图或其他图表类型会更直观。",paraId:16,tocIndex:6},{value:"// 不推荐：只有两个维度使用平行坐标系\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: [\n    { x: 10, y: 30, category: 'A' },\n    { x: 20, y: 20, category: 'B' },\n    { x: 30, y: 40, category: 'C' },\n    { x: 40, y: 35, category: 'D' },\n    { x: 50, y: 25, category: 'E' },\n  ],\n  coordinate: { type: 'parallel' },\n  encode: {\n    position: ['x', 'y'],\n    color: 'category',\n  },\n  style: {\n    lineWidth: 2,\n    strokeOpacity: 0.8,\n  },\n  axis: {\n    position: { zIndex: 1 },\n    position1: { zIndex: 1 },\n  },\n});\n\nchart.render();\n",paraId:17,tocIndex:6},{value:"对于二维数据，散点图更适合：",paraId:18,tocIndex:6},{value:"// 推荐：二维数据使用散点图\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  inset: 20,\n});\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: [\n    { x: 10, y: 30, category: 'A' },\n    { x: 20, y: 20, category: 'B' },\n    { x: 30, y: 40, category: 'C' },\n    { x: 40, y: 35, category: 'D' },\n    { x: 50, y: 25, category: 'E' },\n  ],\n  encode: {\n    x: 'x',\n    y: 'y',\n    color: 'category',\n    size: 20,\n  },\n  scale: {\n    color: {\n      palette: 'category10',\n    },\n  },\n  legend: {\n    color: { position: 'bottom' },\n  },\n});\n\nchart.render();\n",paraId:19,tocIndex:6},{value:"例子 2: ",paraId:20,tocIndex:6},{value:"数据量过大导致视觉混乱",paraId:20,tocIndex:6},{value:"当数据记录过多时，线条会严重重叠，影响可读性。",paraId:21,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\n// 生成大量数据模拟过多记录的情况\nconst generateData = (count) => {\n  const data = [];\n  for (let i = 0; i < count; i++) {\n    data.push({\n      A: Math.random() * 100,\n      B: Math.random() * 100,\n      C: Math.random() * 100,\n      D: Math.random() * 100,\n      id: i,\n    });\n  }\n  return data;\n};\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: generateData(500), // 大量数据\n  coordinate: { type: 'parallel' },\n  encode: {\n    position: ['A', 'B', 'C', 'D'],\n  },\n  style: {\n    lineWidth: 1,\n    strokeOpacity: 0.1, // 即使降低透明度仍然混乱\n    stroke: '#1890ff',\n  },\n  axis: {\n    position: { zIndex: 1 },\n    position1: { zIndex: 1 },\n    position2: { zIndex: 1 },\n    position3: { zIndex: 1 },\n  },\n});\n\nchart.render();\n",paraId:22,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst axis = {\n  zIndex: 1,\n  line: true,\n  labelStroke: '#fff',\n  labelLineWidth: 5,\n  labelFontSize: 10,\n  labelStrokeLineJoin: 'round',\n  titleStroke: '#fff',\n  titleFontSize: 10,\n  titleLineWidth: 5,\n  titleStrokeLineJoin: 'round',\n  lineStroke: 'black',\n  tickStroke: 'black',\n  lineLineWidth: 1,\n};\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/cars3.json',\n  },\n  coordinate: {\n    type: 'parallel',\n    transform: [{ type: 'transpose' }],\n  },\n  encode: {\n    position: [\n      'economy (mpg)',\n      'cylinders',\n      'displacement (cc)',\n      'power (hp)',\n      'weight (lb)',\n    ],\n    color: 'weight (lb)',\n    shape: 'smooth',\n  },\n  style: {\n    lineWidth: 1.5,\n    strokeOpacity: 0.4,\n  },\n  scale: {\n    color: {\n      palette: 'brBG',\n      offset: (t) => 1 - t,\n    },\n  },\n  legend: {\n    color: { length: 400, layout: { justifyContent: 'center' } },\n  },\n  axis: {\n    position: axis,\n    position1: axis,\n    position2: axis,\n    position3: axis,\n    position4: axis,\n  },\n  interaction: {\n    tooltip: { series: false },\n  },\n});\n\nchart.render();\n",paraId:23,tocIndex:8},{value:"添加轴刷选和高亮功能，增强数据探索能力：",paraId:24,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst axis = {\n  zIndex: 1,\n  titlePosition: 'right',\n  line: true,\n  labelStroke: '#fff',\n  labelLineWidth: 5,\n  labelFontSize: 10,\n  labelStrokeLineJoin: 'round',\n  titleStroke: '#fff',\n  titleFontSize: 10,\n  titleLineWidth: 5,\n  titleStrokeLineJoin: 'round',\n  titleTransform: 'translate(-50%, 0) rotate(-90)',\n  lineStroke: 'black',\n  tickStroke: 'black',\n  lineLineWidth: 1,\n};\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/cars3.json',\n  },\n  coordinate: { type: 'parallel' },\n  encode: {\n    position: [\n      'economy (mpg)',\n      'cylinders',\n      'displacement (cc)',\n      'power (hp)',\n      'weight (lb)',\n    ],\n    color: 'cylinders',\n  },\n  scale: {\n    color: {\n      palette: 'brBG',\n      offset: (t) => 1 - t,\n    },\n  },\n  style: {\n    lineWidth: 1.5,\n    strokeOpacity: 0.6,\n  },\n  legend: {\n    color: { position: 'bottom' },\n  },\n  axis: {\n    position: axis,\n    position1: axis,\n    position2: axis,\n    position3: axis,\n    position4: axis,\n  },\n  interaction: {\n    tooltip: { series: false },\n    brushAxisHighlight: {\n      maskFill: '#d8d0c0',\n      maskOpacity: 0.3,\n    },\n  },\n  state: {\n    active: { lineWidth: 3, strokeOpacity: 1 },\n    inactive: { stroke: '#ccc', opacity: 0.3 },\n  },\n});\n\nchart.render();\n",paraId:25,tocIndex:9},{value:"受",paraId:26,tocIndex:10},{value:"Fathom Information Design",paraId:26,tocIndex:10},{value:"启发，这个例子展示了如何使用平行坐标系来分析大规模企业数据的时间变化。通过展示排名、收入和利润三个维度，可以观察企业在不同年份的表现轨迹和相互关系。",paraId:26,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\n// 使用真实的财富500强数据\nconst realFortuneData = async () => {\n  // 2022年财富500强数据（来源：GitHub jc22dora/2022Fortune500）\n  const fortune2022 = [\n    {\n      company: 'Walmart',\n      ranking: 1,\n      revenue: 572754,\n      profit: 13673,\n      industry: '零售',\n      year: 2022,\n    },\n    {\n      company: 'Amazon',\n      ranking: 2,\n      revenue: 469822,\n      profit: 33364,\n      industry: '科技',\n      year: 2022,\n    },\n    {\n      company: 'Apple',\n      ranking: 3,\n      revenue: 365817,\n      profit: 94680,\n      industry: '科技',\n      year: 2022,\n    },\n    {\n      company: 'CVS Health',\n      ranking: 4,\n      revenue: 292111,\n      profit: 7910,\n      industry: '医疗',\n      year: 2022,\n    },\n    {\n      company: 'UnitedHealth Group',\n      ranking: 5,\n      revenue: 287597,\n      profit: 17285,\n      industry: '医疗',\n      year: 2022,\n    },\n    {\n      company: 'Exxon Mobil',\n      ranking: 6,\n      revenue: 285640,\n      profit: 23040,\n      industry: '能源',\n      year: 2022,\n    },\n    {\n      company: 'Berkshire Hathaway',\n      ranking: 7,\n      revenue: 276094,\n      profit: 89795,\n      industry: '金融',\n      year: 2022,\n    },\n    {\n      company: 'Alphabet',\n      ranking: 8,\n      revenue: 257637,\n      profit: 76033,\n      industry: '科技',\n      year: 2022,\n    },\n    {\n      company: 'McKesson',\n      ranking: 9,\n      revenue: 238228,\n      profit: 5234,\n      industry: '医疗',\n      year: 2022,\n    },\n    {\n      company: 'AmerisourceBergen',\n      ranking: 10,\n      revenue: 213989,\n      profit: 1551,\n      industry: '医疗',\n      year: 2022,\n    },\n    {\n      company: 'Costco Wholesale',\n      ranking: 11,\n      revenue: 195929,\n      profit: 5007,\n      industry: '零售',\n      year: 2022,\n    },\n    {\n      company: 'Cigna',\n      ranking: 12,\n      revenue: 174087,\n      profit: 5408,\n      industry: '医疗',\n      year: 2022,\n    },\n    {\n      company: 'AT&T',\n      ranking: 13,\n      revenue: 168864,\n      profit: -11899,\n      industry: '科技',\n      year: 2022,\n    },\n    {\n      company: 'Microsoft',\n      ranking: 14,\n      revenue: 168088,\n      profit: 61271,\n      industry: '科技',\n      year: 2022,\n    },\n    {\n      company: 'Cardinal Health',\n      ranking: 15,\n      revenue: 162467,\n      profit: 987,\n      industry: '医疗',\n      year: 2022,\n    },\n    {\n      company: 'Chevron',\n      ranking: 16,\n      revenue: 155607,\n      profit: 15625,\n      industry: '能源',\n      year: 2022,\n    },\n    {\n      company: 'Home Depot',\n      ranking: 17,\n      revenue: 151157,\n      profit: 17105,\n      industry: '零售',\n      year: 2022,\n    },\n    {\n      company: 'Walgreens Boots Alliance',\n      ranking: 18,\n      revenue: 132703,\n      profit: -3003,\n      industry: '医疗',\n      year: 2022,\n    },\n    {\n      company: 'Marathon Petroleum',\n      ranking: 19,\n      revenue: 128050,\n      profit: 11267,\n      industry: '能源',\n      year: 2022,\n    },\n    {\n      company: 'Anthem',\n      ranking: 20,\n      revenue: 118414,\n      profit: 6104,\n      industry: '医疗',\n      year: 2022,\n    },\n    {\n      company: 'Tesla',\n      ranking: 65,\n      revenue: 53823,\n      profit: 5519,\n      industry: '科技',\n      year: 2022,\n    },\n    {\n      company: 'Meta Platforms',\n      ranking: 27,\n      revenue: 117929,\n      profit: 39370,\n      industry: '科技',\n      year: 2022,\n    },\n    {\n      company: 'Netflix',\n      ranking: 115,\n      revenue: 29698,\n      profit: 4492,\n      industry: '科技',\n      year: 2022,\n    },\n    {\n      company: 'NVIDIA',\n      ranking: 134,\n      revenue: 26974,\n      profit: 9752,\n      industry: '科技',\n      year: 2022,\n    },\n    {\n      company: 'Adobe',\n      ranking: 235,\n      revenue: 15785,\n      profit: 5788,\n      industry: '科技',\n      year: 2022,\n    },\n  ];\n\n  // 模拟2019-2021年数据（基于2022年数据进行合理变化）\n  const generateHistoricalData = (baseData, year) => {\n    return baseData.map((item) => {\n      const yearFactor =\n        year === 2020 ? 0.85 : year === 2021 ? 0.95 : year === 2019 ? 0.9 : 1;\n      const growthVariation = (Math.random() - 0.5) * 0.2; // ±10%的随机变化\n\n      return {\n        ...item,\n        year,\n        revenue: Math.round(item.revenue * yearFactor * (1 + growthVariation)),\n        profit: Math.round(\n          item.profit * yearFactor * (1 + growthVariation * 1.5),\n        ), // 利润波动更大\n        ranking: Math.max(\n          1,\n          Math.min(500, item.ranking + Math.floor((Math.random() - 0.5) * 6)),\n        ), // 排名小幅波动\n      };\n    });\n  };\n\n  // 生成多年数据\n  const allYearsData = [\n    ...generateHistoricalData(fortune2022, 2019),\n    ...generateHistoricalData(fortune2022, 2020),\n    ...generateHistoricalData(fortune2022, 2021),\n    ...fortune2022,\n    ...generateHistoricalData(fortune2022, 2023), // 预测2023年\n  ];\n\n  return allYearsData;\n};\n\n// 获取数据并渲染图表\nrealFortuneData().then((fortuneData) => {\n  const chart = new Chart({\n    container: 'container',\n    theme: 'classic',\n    marginTop: 200,\n    marginLeft: 50,\n    marginRight: 50,\n    height: 600,\n    width: 800,\n  });\n\n  const axisConfig = {\n    zIndex: 1,\n    titlePosition: 'right',\n    line: true,\n    lineStroke: '#2c3e50',\n    lineLineWidth: 2,\n    labelStroke: '#fff',\n    labelLineWidth: 4,\n    labelFontSize: 11,\n    labelStrokeLineJoin: 'round',\n    titleStroke: '#fff',\n    titleFontSize: 13,\n    titleLineWidth: 5,\n    titleStrokeLineJoin: 'round',\n    titleTransform: 'translate(-50%, 0) rotate(-90)',\n    tickStroke: '#7f8c8d',\n    tickLineWidth: 1,\n    grid: true,\n    gridStroke: '#ecf0f1',\n    gridStrokeOpacity: 0.5,\n  };\n\n  chart.options({\n    type: 'line',\n    data: fortuneData.filter((d) => d.year === 2022), // 默认显示2022年数据\n    coordinate: { type: 'parallel' },\n    encode: {\n      position: ['ranking', 'revenue', 'profit'],\n      color: 'industry',\n      key: 'company',\n    },\n    style: {\n      lineWidth: 2.5,\n      strokeOpacity: 0.8,\n      cursor: 'pointer',\n    },\n    scale: {\n      position: {\n        range: [0, 1],\n        nice: true,\n      },\n      position1: {\n        nice: true,\n      },\n      position2: {\n        nice: true,\n      },\n      color: {\n        type: 'ordinal',\n        domain: ['科技', '零售', '医疗', '金融', '能源'],\n        range: ['#3498db', '#e74c3c', '#2ecc71', '#f39c12', '#9b59b6'],\n      },\n    },\n    legend: {\n      color: {\n        position: 'top',\n        title: '行业分类',\n        titleFontSize: 14,\n      },\n    },\n    axis: {\n      position: {\n        ...axisConfig,\n        title: '财富500强排名',\n        labelFormatter: (d) => `#${Math.round(d)}`,\n      },\n      position1: {\n        ...axisConfig,\n        title: '营业收入 (百万美元)',\n        labelFormatter: (d) => `$${(d / 1000).toFixed(0)}B`,\n      },\n      position2: {\n        ...axisConfig,\n        title: '净利润 (百万美元)',\n        labelFormatter: (d) =>\n          d >= 0\n            ? `$${(d / 1000).toFixed(1)}B`\n            : `-$${Math.abs(d / 1000).toFixed(1)}B`,\n      },\n    },\n    tooltip: {\n      title: (d) => `${d.company} (${d.year}年)`,\n      items: [\n        {\n          field: 'ranking',\n          name: '财富500强排名',\n          valueFormatter: (d) => `第 ${d} 位`,\n        },\n        {\n          field: 'revenue',\n          name: '营业收入',\n          valueFormatter: (d) => `$${(d / 1000).toFixed(1)} 十亿美元`,\n        },\n        {\n          field: 'profit',\n          name: '净利润',\n          valueFormatter: (d) =>\n            d >= 0\n              ? `$${(d / 1000).toFixed(1)} 十亿美元`\n              : `-$${Math.abs(d / 1000).toFixed(1)} 十亿美元`,\n        },\n        { field: 'industry', name: '行业' },\n      ],\n    },\n    interaction: {\n      tooltip: {\n        series: false,\n      },\n      brushAxisHighlight: {\n        maskFill: 'rgba(52, 152, 219, 0.15)',\n        maskOpacity: 0.6,\n      },\n    },\n    state: {\n      active: {\n        lineWidth: 4,\n        strokeOpacity: 1,\n        shadowColor: '#2c3e50',\n        shadowBlur: 8,\n      },\n      inactive: {\n        stroke: '#bdc3c7',\n        strokeOpacity: 0.2,\n      },\n    },\n  });\n\n  chart.render();\n\n  // 添加年份切换控制\n  setTimeout(() => {\n    const container = document.getElementById('container');\n    const controlPanel = document.createElement('div');\n    controlPanel.style.cssText = `\n      position: absolute;\n      top: 10px;\n      left: 10px;\n      background: rgba(255, 255, 255, 0.95);\n      padding: 15px;\n      border-radius: 8px;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n      z-index: 100;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n    `;\n\n    controlPanel.innerHTML = `\n      <div style=\"margin-bottom: 10px; font-weight: 600; color: #2c3e50;\">\n        财富500强时间序列分析\n      </div>\n      <div style=\"margin-bottom: 8px;\">\n        <label style=\"font-size: 12px; color: #7f8c8d;\">年份：</label>\n        <span id=\"current-year\" style=\"font-weight: 600; color: #2c3e50;\">2022</span>\n      </div>\n      <div style=\"display: flex; gap: 5px; margin-bottom: 8px;\">\n        <button id=\"prev-year\" style=\"padding: 6px 12px; border: 1px solid #bdc3c7; background: #fff; border-radius: 4px; cursor: pointer; font-size: 12px;\">◀ 上一年</button>\n        <button id=\"next-year\" style=\"padding: 6px 12px; border: 1px solid #bdc3c7; background: #fff; border-radius: 4px; cursor: pointer; font-size: 12px;\">下一年 ▶</button>\n      </div>\n      <div style=\"font-size: 11px; color: #95a5a6; line-height: 1.3;\">\n        💡 数据来源：<a href=\"https://github.com/jc22dora/2022Fortune500\" target=\"_blank\" style=\"color: #3498db;\">GitHub</a><br>\n        ⌨️ 提示：可使用键盘 ← → 键切换年份\n      </div>\n    `;\n\n    container.style.position = 'relative';\n    container.appendChild(controlPanel);\n\n    const years = [2019, 2020, 2021, 2022, 2023];\n    let currentYearIndex = 3; // 从2022年开始（真实数据年份）\n\n    const updateChart = (yearIndex) => {\n      const year = years[yearIndex];\n      const yearData = fortuneData.filter((d) => d.year === year);\n      document.getElementById('current-year').textContent = year;\n\n      chart.changeData(yearData);\n\n      // 更新按钮状态\n      document.getElementById('prev-year').disabled = yearIndex === 0;\n      document.getElementById('next-year').disabled =\n        yearIndex === years.length - 1;\n\n      // 更新按钮样式\n      const prevBtn = document.getElementById('prev-year');\n      const nextBtn = document.getElementById('next-year');\n      prevBtn.style.opacity = yearIndex === 0 ? '0.5' : '1';\n      nextBtn.style.opacity = yearIndex === years.length - 1 ? '0.5' : '1';\n    };\n\n    // 按钮事件\n    document.getElementById('prev-year').onclick = () => {\n      if (currentYearIndex > 0) {\n        currentYearIndex--;\n        updateChart(currentYearIndex);\n      }\n    };\n\n    document.getElementById('next-year').onclick = () => {\n      if (currentYearIndex < years.length - 1) {\n        currentYearIndex++;\n        updateChart(currentYearIndex);\n      }\n    };\n\n    // 键盘事件\n    document.addEventListener('keydown', (e) => {\n      if (e.key === 'ArrowLeft' && currentYearIndex > 0) {\n        currentYearIndex--;\n        updateChart(currentYearIndex);\n      } else if (\n        e.key === 'ArrowRight' &&\n        currentYearIndex < years.length - 1\n      ) {\n        currentYearIndex++;\n        updateChart(currentYearIndex);\n      }\n    });\n\n    // 初始化按钮状态\n    updateChart(currentYearIndex);\n  }, 500);\n});\n",paraId:27,tocIndex:10},{value:"折线图",paraId:28,tocIndex:11},{value:"平行坐标系用于展示多维数据之间的关系，每个轴代表不同的维度，轴之间没有因果关系",paraId:29,tocIndex:12},{value:"折线图用于展示数据随时间或其他连续变量的变化趋势，横轴通常表示时间序列",paraId:29,tocIndex:12},{value:"平行坐标系的轴可以任意调整顺序，而折线图的横轴顺序通常是固定的",paraId:29,tocIndex:12},{value:"平行坐标系每条线代表一个数据记录的多个维度值，折线图每条线代表一个指标随时间的变化",paraId:29,tocIndex:12},{value:"桑基图",paraId:30,tocIndex:12},{value:"平行坐标系展示多维数据之间的关系，每条线代表一个数据记录的多个维度值",paraId:31,tocIndex:13},{value:"桑基图展示流量在不同节点间的分配和流向，线条宽度代表流量大小",paraId:31,tocIndex:13},{value:"平行坐标系的轴代表不同维度，轴之间没有流量的概念",paraId:31,tocIndex:13},{value:"桑基图的节点之间有明确的流向关系，通常用于展示资源、能量等的流动过程",paraId:31,tocIndex:13},{value:"雷达图",paraId:32,tocIndex:13},{value:"平行坐标系使用平行轴展示多维数据，适合比较不同记录",paraId:33,tocIndex:14},{value:"雷达图使用径向轴展示多维数据，适合展示单个记录的多维特征",paraId:33,tocIndex:14}]},42132:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(17646);const t=[{value:"饼图是一种圆形统计图表，将数据表示为整个圆的各个扇形，用于显示各个类别在总体中的占比关系。每个扇形的角度大小与其所代表的数值成正比，整个饼图代表数据的总和。",paraId:0,tocIndex:0},{value:"饼图特别适合展示分类数据的占比关系，可以直观地展示各个部分在整体中的相对重要性。通过不同颜色的扇形区分各个类别，使得比较各类别的占比变得简单直观。",paraId:1,tocIndex:0},{value:'当类别较少（通常不超过5-7个）且需要强调各部分与整体关系时，饼图是一个很好的选择。对于类别较多的情况，可以考虑将小占比的类别合并为"其他"类别。',paraId:2,tocIndex:0},{value:"英文名",paraId:3,tocIndex:0},{value:"：Pie Chart",paraId:3,tocIndex:0},{value:"图表类型",paraId:4,tocIndex:2},{value:"基础饼图",paraId:4,tocIndex:2},{value:"适合的数据",paraId:4,tocIndex:2},{value:"分类数据：一个分类数据字段、一个连续数据字段",paraId:4,tocIndex:2},{value:"功能",paraId:4,tocIndex:2},{value:"展示各个类别在总体中的占比关系",paraId:4,tocIndex:2},{value:"数据与图形的映射",paraId:4,tocIndex:2},{value:"分类字段映射到扇形的颜色和标签",paraId:4,tocIndex:2},{value:"数值字段映射到扇形的角度大小",paraId:4,tocIndex:2},{value:"整个圆表示数据总和",paraId:4,tocIndex:2},{value:"适合的场景",paraId:4,tocIndex:2},{value:"类别数量较少（5-7个以内）的占比展示",paraId:4,tocIndex:2},{value:"例子 1: ",paraId:5,tocIndex:4},{value:"展示市场份额分布",paraId:5,tocIndex:4},{value:"下图展示了不同浏览器的市场份额占比，清晰地显示了各浏览器在市场中的相对地位。",paraId:6,tocIndex:4},{value:"browser（浏览器）",paraId:7,tocIndex:4},{value:"value（市场份额）",paraId:7,tocIndex:4},{value:"Chrome",paraId:7,tocIndex:4},{value:"61.04",paraId:7,tocIndex:4},{value:"Safari",paraId:7,tocIndex:4},{value:"15.12",paraId:7,tocIndex:4},{value:"Edge",paraId:7,tocIndex:4},{value:"10.52",paraId:7,tocIndex:4},{value:"Firefox",paraId:7,tocIndex:4},{value:"7.19",paraId:7,tocIndex:4},{value:"Samsung Internet",paraId:7,tocIndex:4},{value:"2.98",paraId:7,tocIndex:4},{value:"Opera",paraId:7,tocIndex:4},{value:"3.15",paraId:7,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { browser: 'Chrome', value: 61.04 },\n    { browser: 'Safari', value: 15.12 },\n    { browser: 'Edge', value: 10.52 },\n    { browser: 'Firefox', value: 7.19 },\n    { browser: 'Samsung Internet', value: 2.98 },\n    { browser: 'Opera', value: 3.15 },\n  ],\n  encode: {\n    y: 'value',\n    color: 'browser',\n  },\n  transform: [{ type: 'stackY' }],\n  coordinate: { type: 'theta' },\n  legend: {\n    color: {\n      position: 'right',\n      rowPadding: 5,\n    },\n  },\n});\n\nchart.render();\n",paraId:8,tocIndex:4},{value:"说明",paraId:9,tocIndex:4},{value:"：",paraId:9,tocIndex:4},{value:"browser",paraId:10,tocIndex:4},{value:" 字段映射到颜色，区分不同浏览器",paraId:10,tocIndex:4},{value:"value",paraId:10,tocIndex:4},{value:" 字段映射到角度大小，表示市场份额",paraId:10,tocIndex:4},{value:"使用 ",paraId:10,tocIndex:4},{value:"coordinate: { type: 'theta' }",paraId:10,tocIndex:4},{value:" 将柱状图转换为饼图",paraId:10,tocIndex:4},{value:"使用 ",paraId:10,tocIndex:4},{value:"transform: [{ type: 'stackY' }]",paraId:10,tocIndex:4},{value:" 堆叠数据",paraId:10,tocIndex:4},{value:"例子 2: ",paraId:11,tocIndex:4},{value:"展示预算分配情况",paraId:11,tocIndex:4},{value:"饼图非常适合展示预算、支出等资源分配情况，让人一目了然地看到各项目的资源占比。",paraId:12,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { category: '研发', value: 35 },\n    { category: '营销', value: 25 },\n    { category: '销售', value: 20 },\n    { category: '运营', value: 15 },\n    { category: '其他', value: 5 },\n  ],\n  encode: {\n    y: 'value',\n    color: 'category',\n  },\n  transform: [{ type: 'stackY' }],\n  coordinate: { type: 'theta', outerRadius: 0.8 },\n  scale: {\n    color: {\n      palette: 'category10',\n    },\n  },\n  legend: {\n    color: {\n      position: 'right',\n      rowPadding: 5,\n    },\n  },\n  labels: [\n    {\n      text: (d) => `${d.category}: ${d.value}%`,\n      position: 'outside',\n      connector: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:13,tocIndex:4},{value:"说明",paraId:14,tocIndex:4},{value:"：",paraId:14,tocIndex:4},{value:"使用外部标签显示类别名称和百分比",paraId:15,tocIndex:4},{value:"connector: true",paraId:15,tocIndex:4},{value:" 添加标签连接线",paraId:15,tocIndex:4},{value:"outerRadius: 0.8",paraId:15,tocIndex:4},{value:" 调整饼图大小，为标签留出空间",paraId:15,tocIndex:4},{value:"例子 1: ",paraId:16,tocIndex:5},{value:"类别过多时不适合使用饼图",paraId:16,tocIndex:5},{value:"当类别数量超过7个时，饼图会变得难以阅读和比较。下图展示了各个省份的人口占比情况，由于包含的分类过多，很难清晰对比各个省份的人口数据占比情况。",paraId:17,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { province: '北京市', population: 19612368 },\n    { province: '天津市', population: 12938693 },\n    { province: '河北省', population: 71854210 },\n    { province: '山西省', population: 27500000 },\n    { province: '内蒙古自治区', population: 24706291 },\n    { province: '辽宁省', population: 43746323 },\n    { province: '吉林省', population: 27452815 },\n    { province: '黑龙江省', population: 38313991 },\n    { province: '上海市', population: 23019196 },\n    { province: '江苏省', population: 78660941 },\n    { province: '浙江省', population: 54426891 },\n    { province: '安徽省', population: 59500468 },\n    { province: '福建省', population: 36894217 },\n    { province: '江西省', population: 44567797 },\n    { province: '山东省', population: 95792719 },\n    { province: '河南省', population: 94029939 },\n    { province: '湖北省', population: 57237727 },\n    { province: '湖南省', population: 65700762 },\n    { province: '广东省', population: 104320459 },\n    { province: '广西壮族自治区', population: 46023761 },\n    { province: '海南省', population: 8671485 },\n    { province: '重庆市', population: 28846170 },\n    { province: '四川省', population: 80417528 },\n    { province: '贵州省', population: 34748556 },\n    { province: '云南省', population: 45966766 },\n    { province: '西藏自治区', population: 3002165 },\n    { province: '陕西省', population: 37327379 },\n    { province: '甘肃省', population: 25575263 },\n    { province: '青海省', population: 5626723 },\n  ],\n  encode: {\n    y: 'population',\n    color: 'province',\n  },\n  transform: [{ type: 'stackY' }],\n  coordinate: { type: 'theta' },\n\n});\n\nchart.render();\n",paraId:18,tocIndex:5},{value:"说明",paraId:19,tocIndex:5},{value:"：此种情况下，我们推荐使用",paraId:19,tocIndex:5},{value:"柱状图",paraId:20,tocIndex:5},{value:"。",paraId:19,tocIndex:5},{value:"例子 2: ",paraId:21,tocIndex:5},{value:"各类别占比相近时不适合使用饼图",paraId:21,tocIndex:5},{value:"下图中游戏公司的不同种类游戏的销售量相近，角度差异很小，难以通过视觉快速区分大小关系。",paraId:22,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { genre: 'Sports', sold: 15000 },\n    { genre: 'Strategy', sold: 14900 },\n    { genre: 'Action', sold: 15050 },\n    { genre: 'Shooter', sold: 13000 },\n    { genre: 'Other', sold: 13900 },\n  ],\n  encode: {\n    y: 'sold',\n    color: 'genre',\n  },\n  transform: [{ type: 'stackY' }],\n  coordinate: { type: 'theta', outerRadius: 0.8 },\n  legend: {\n    color: {\n      position: 'bottom',\n      layout: { justifyContent: 'center' },\n    },\n  },\n  labels: [\n    {\n      text: (d, i, data) => {\n        const total = data.reduce((acc, curr) => acc + curr.sold, 0);\n        const percent = ((d.sold / total) * 100).toFixed(2);\n        return `${percent}%`;\n      },\n      style: {\n        fontSize: 10,\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:23,tocIndex:5},{value:"说明",paraId:24,tocIndex:5},{value:"：上图中各个分类的占比都接近20%，差异很小，不太适合使用饼图，此时可以使用",paraId:24,tocIndex:5},{value:"柱状图",paraId:25,tocIndex:5},{value:"来呈现。",paraId:24,tocIndex:5},{value:"径向扰动散点图将传统的饼图数据映射到极坐标系中的散点，通过添加径向扰动来避免重叠，适合展示分类数据的分布情况。",paraId:26,tocIndex:7},{value:'import { Chart } from "@antv/g2";\n\nconst chart = new Chart({ container: "container" });\n\nchart.options({\n  type: "point",\n  autoFit: true,\n  data: {\n    type: "fetch",\n    value: "https://gw.alipayobjects.com/os/antvdemo/assets/data/diamond.json",\n  },\n  encode: { x: "clarity", color: "clarity" },\n  transform: [{ type: "jitter" }],\n  coordinate: { type: "polar" },\n  legend: false,\n});\n\nchart.render();\n\n',paraId:27,tocIndex:7},{value:"说明",paraId:28,tocIndex:7},{value:"：",paraId:28,tocIndex:7},{value:"数据点按角度分布在圆形区域内，模拟饼图的扇形分布",paraId:29,tocIndex:7},{value:"添加径向扰动（随机偏移）避免数据点重叠",paraId:29,tocIndex:7},{value:"点的大小映射数值大小，颜色区分类别",paraId:29,tocIndex:7},{value:"适合展示分类数据的空间分布和数值关系",paraId:29,tocIndex:7},{value:"环形图",paraId:30,tocIndex:8},{value:"饼图是最基础的形式，适合简单的占比展示",paraId:31,tocIndex:9},{value:"环形图可以在中心显示额外信息，空间利用率更高",paraId:31,tocIndex:9},{value:"玫瑰图",paraId:32,tocIndex:9},{value:"饼图展示静态的占比关系，适合某个时间点的数据快照",paraId:33,tocIndex:10},{value:"玫瑰图适合展示分类数据的分布情况，特别是当类别数量较多时",paraId:33,tocIndex:10}]},53522:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(60766);const t=[{value:"雷达又叫戴布拉图、蜘蛛网图。传统的雷达图被认为是一种表现多维（4 维以上）数据的图表。它将多个维度的数据量映射到坐标轴上，这些坐标轴起始于同一个圆心点，通常结束于圆周边缘，将同一组的点使用线连接起来就称为了雷达图。它可以将多维数据进行展示，但是点的相对位置和坐标轴之间的夹角是没有任何信息量的。在坐标轴设置恰当的情况下雷达图所围面积能表现出一些信息量。",paraId:0,tocIndex:0},{value:"每一个维度的数据都分别对应一个坐标轴，这些坐标轴具有相同的圆心，以相同的间距沿着径向排列，并且各个坐标轴的刻度相同。连接各个坐标轴的网格线通常只作为辅助元素。将各个坐标轴上的数据点用线连接起来就形成了一个多边形。坐标轴、点、线、多边形共同组成了雷达图。",paraId:1,tocIndex:0},{value:"着重要强调的是，虽然雷达图每个轴线都表示不同维度，但使用上为了容易理解和统一比较。使用雷达图经常会人为的将将多个坐标轴都统一成一个度量，比如：统一成分数、百分比等。这样这个图就退化成一个二维图了，事实上这种雷达图在日常生活更常见、更长用。 另外，雷达图还可以展示出数据集中各个变量的权重高低情况，非常适用于展示性能数据。",paraId:2,tocIndex:0},{value:"雷达图的主要缺点是：",paraId:3,tocIndex:0},{value:"(1) 如果雷达图上多边形过多会使可读性下降，使整体图形过于混乱。特别是有颜色填充的多边形的情况，上层会遮挡覆盖下层多边形。",paraId:4,tocIndex:0},{value:"(2) 如果变量过多，也会造成可读性下降，因为一个变量对应一个坐标轴，这样会使坐标轴过于密集，使图表给人感觉很复杂。所以最佳实践就是尽可能控制变量的数量使雷达图保持简单清晰。",paraId:5,tocIndex:0},{value:"注意：",paraId:6,tocIndex:0},{value:"(1) 为了使概念尽可能简单，且贴近现今的使用习惯，下面我们暂时只介绍退化为二维的雷达图。",paraId:7,tocIndex:0},{value:"(2) 雷达图更注重于同类图表之间的对比（即雷达图与雷达图之间的对比）",paraId:8,tocIndex:0},{value:"英文名",paraId:9,tocIndex:0},{value:"：Radar Chart, Spider Chart, Web Chart, Polar Chart, Star Plots",paraId:9,tocIndex:0},{value:"图表类型",paraId:10,tocIndex:2},{value:"单组雷达图",paraId:10,tocIndex:2},{value:"适合的数据",paraId:10,tocIndex:2},{value:"一个分类字段，一个连续字段",paraId:10,tocIndex:2},{value:"功能",paraId:10,tocIndex:2},{value:"对比分类数据的数值大小",paraId:10,tocIndex:2},{value:"数据与图形的映射",paraId:10,tocIndex:2},{value:"分类字段映射到极坐标下角度标定的位置 连续字段映射到半径长度。",paraId:10,tocIndex:2},{value:"适合的数据条数",paraId:10,tocIndex:2},{value:"不超过 30 条",paraId:10,tocIndex:2},{value:"图表类型",paraId:11,tocIndex:3},{value:"多组雷达图",paraId:11,tocIndex:3},{value:"适合的数据",paraId:11,tocIndex:3},{value:"一个连续字段，两个个分类字段",paraId:11,tocIndex:3},{value:"功能",paraId:11,tocIndex:3},{value:"对比不同分类数据的数值大小",paraId:11,tocIndex:3},{value:"数据与图形的映射",paraId:11,tocIndex:3},{value:"一个分类字段映射到极坐标下角度标定的位置 另一个分类字段映射到颜色 连续字段映射到半径长度。",paraId:11,tocIndex:3},{value:"适合的数据条数",paraId:11,tocIndex:3},{value:"不超过 30 条",paraId:11,tocIndex:3},{value:"例子 1: ",paraId:12,tocIndex:5},{value:"适合应用到多维数据对比的场景",paraId:12,tocIndex:5},{value:"下图是一个个人综合能力评估雷达图。",paraId:13,tocIndex:5},{value:"ability",paraId:14,tocIndex:5},{value:"score（评分，满分 10 分）",paraId:14,tocIndex:5},{value:"语言表达",paraId:14,tocIndex:5},{value:"8.8",paraId:14,tocIndex:5},{value:"逻辑思维",paraId:14,tocIndex:5},{value:"9.0",paraId:14,tocIndex:5},{value:"亲和力",paraId:14,tocIndex:5},{value:"7.2",paraId:14,tocIndex:5},{value:"运动",paraId:14,tocIndex:5},{value:"4.5",paraId:14,tocIndex:5},{value:"学习",paraId:14,tocIndex:5},{value:"8.3",paraId:14,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'area',\n  coordinate: {\n    type: 'polar',\n  },\n  autoFit: true,\n  data: [\n    { ability: '语言表达', score: 8.8 },\n    { ability: '逻辑思维', score: 9.0 },\n    { ability: '亲和力', score: 7.2 },\n    { ability: '运动', score: 4.5 },\n    { ability: '学习', score: 8.3 },\n  ],\n  encode: { x: 'ability', y: 'score' },\n  scale: {\n    x: { padding: 0.5, align: 0 },\n    y: {\n      domainMin: 0,\n      domainMax: 10,\n      tickCount: 5,\n      label: false,\n    },\n  },\n  style: {\n    fillOpacity: 0.5,\n    lineWidth: 2,\n  },\n  axis: {\n    x: { grid: true },\n    y: { tick: false, grid: true, title: false, zIndex: 1 },\n  },\n  interaction: {\n    tooltip: { crosshairsLineDash: [4, 4] },\n  },\n});\n\nchart.render();\n",paraId:15,tocIndex:5},{value:"说明",paraId:16,tocIndex:5},{value:" ：",paraId:16,tocIndex:5},{value:"ability",paraId:17,tocIndex:5},{value:" 字段，映射到极坐标下角度标定的位置，用于区分不同的能力类型",paraId:17,tocIndex:5},{value:"score",paraId:17,tocIndex:5},{value:" 字段，映射到半径长度，表示评分高低",paraId:17,tocIndex:5},{value:"例子 2: ",paraId:18,tocIndex:5},{value:"适合应用到多个维度组成的能力衡量的场景",paraId:18,tocIndex:5},{value:"如下面展示了华为 Mate 和 中兴 Grand Memo 两款手机的综合表现雷达图，分别从易用性、功能、拍照、跑分、续航这五个维度进行考核，可以看出两款手机在这个维度方面的性能都比较平衡，同时也可逐项对比。",paraId:19,tocIndex:5},{value:"虚构数据",paraId:19,tocIndex:5},{value:"performance（综合表现）",paraId:20,tocIndex:5},{value:"type（手机类型）",paraId:20,tocIndex:5},{value:"score（评分，满分 100 分）",paraId:20,tocIndex:5},{value:"易用性",paraId:20,tocIndex:5},{value:"华为 Mate",paraId:20,tocIndex:5},{value:"80",paraId:20,tocIndex:5},{value:"功能",paraId:20,tocIndex:5},{value:"华为 Mate",paraId:20,tocIndex:5},{value:"90",paraId:20,tocIndex:5},{value:"拍照",paraId:20,tocIndex:5},{value:"华为 Mate",paraId:20,tocIndex:5},{value:"80",paraId:20,tocIndex:5},{value:"跑分",paraId:20,tocIndex:5},{value:"华为 Mate",paraId:20,tocIndex:5},{value:"70",paraId:20,tocIndex:5},{value:"续航",paraId:20,tocIndex:5},{value:"华为 Mate",paraId:20,tocIndex:5},{value:"90",paraId:20,tocIndex:5},{value:"易用性",paraId:20,tocIndex:5},{value:"中兴 Grand Memo",paraId:20,tocIndex:5},{value:"70",paraId:20,tocIndex:5},{value:"功能",paraId:20,tocIndex:5},{value:"中兴 Grand Memo",paraId:20,tocIndex:5},{value:"82",paraId:20,tocIndex:5},{value:"拍照",paraId:20,tocIndex:5},{value:"中兴 Grand Memo",paraId:20,tocIndex:5},{value:"81",paraId:20,tocIndex:5},{value:"跑分",paraId:20,tocIndex:5},{value:"中兴 Grand Memo",paraId:20,tocIndex:5},{value:"82",paraId:20,tocIndex:5},{value:"续航",paraId:20,tocIndex:5},{value:"中兴 Grand Memo",paraId:20,tocIndex:5},{value:"78",paraId:20,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  coordinate: {\n    type: 'polar',\n  },\n  autoFit: true,\n  data: [\n    { performance: '易用性', type: '华为 Mate', score: 80 },\n    { performance: '功能', type: '华为 Mate', score: 90 },\n    { performance: '拍照', type: '华为 Mate', score: 80 },\n    { performance: '跑分', type: '华为 Mate', score: 70 },\n    { performance: '续航', type: '华为 Mate', score: 90 },\n    { performance: '易用性', type: '中兴 Grand Memo', score: 70 },\n    { performance: '功能', type: '中兴 Grand Memo', score: 82 },\n    { performance: '拍照', type: '中兴 Grand Memo', score: 81 },\n    { performance: '跑分', type: '中兴 Grand Memo', score: 82 },\n    { performance: '续航', type: '中兴 Grand Memo', score: 78 },\n  ],\n  encode: { x: 'performance', y: 'score', color: 'type' },\n  scale: {\n    x: { padding: 0.5, align: 0 },\n    y: {\n      domainMin: 0,\n      domainMax: 100,\n      tickCount: 5,\n      label: false,\n    },\n  },\n  style: {\n    fillOpacity: 0.5,\n    lineWidth: 2,\n  },\n  axis: {\n    x: { grid: true, tick: false, gridLineDash: [0, 0] },\n    y: {\n      tick: false,\n      grid: true,\n      title: false,\n      zIndex: 1,\n      gridLineDash: [0, 0],\n      gridAreaFill: (dataum, index, data) => {\n        return index % 2 === 1 ? 'rgba(0, 0, 0, 0.04)' : '';\n      },\n    },\n  },\n  interaction: {\n    tooltip: { crosshairsLineDash: [4, 4] },\n  },\n});\n\nchart.render();\n",paraId:21,tocIndex:5},{value:"说明",paraId:22,tocIndex:5},{value:" ：",paraId:22,tocIndex:5},{value:"performance",paraId:23,tocIndex:5},{value:" 字段，映射到极坐标下角度标定的位置，用于区分综合表现类型",paraId:23,tocIndex:5},{value:"type",paraId:23,tocIndex:5},{value:" 字段，手机类型，用于颜色区分",paraId:23,tocIndex:5},{value:"score",paraId:23,tocIndex:5},{value:" 字段，映射到半径长度，表示评分高低",paraId:23,tocIndex:5},{value:"饼图",paraId:24,tocIndex:6},{value:"雷达图主要用于多个维度间的数据（大小、数值）的对比",paraId:25,tocIndex:7},{value:"饼图主要是展示分类之间的占比情况",paraId:25,tocIndex:7},{value:"玉珏图通过各分类的分布角度、长度以及颜色的密度来对比数据，适用于展示各部分占整体的比例。",paraId:26,tocIndex:8},{value:"雷达图通过多边形的边缘或弧线到极坐标中的半径长度来对比数据，适合比较不同类别在多个维度上的表现。",paraId:26,tocIndex:8}]},96553:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(181);const t=[{value:"玉珏图（又名环形柱状图），是柱状图关于笛卡尔坐标系转换到极坐标系的仿射变换。其意义和用法与",paraId:0,tocIndex:0},{value:"柱状图",paraId:1,tocIndex:0},{value:"类似。",paraId:0,tocIndex:0},{value:"玉珏图有",paraId:2,tocIndex:0},{value:"半径反馈效应",paraId:2,tocIndex:0},{value:"。由于玉珏图中是用",paraId:2,tocIndex:0},{value:"角度",paraId:2,tocIndex:0},{value:"表示每个珏环数值的大小，角度是决定性因素。所以，哪怕外侧（半径大的）珏环的数值小于内侧（半径小的）珏环，外侧的每个珏环会相对的比里面的珏环更长。这会造成视觉上的误解。",paraId:2,tocIndex:0},{value:"而且因为我们的视觉系统更善于比较直线，所以笛卡尔坐标系更适合于比较各个分类的数值比较。所以玉珏图从",paraId:3,tocIndex:0},{value:"实用",paraId:3,tocIndex:0},{value:"的角度去看，其更多的是一种",paraId:3,tocIndex:0},{value:"审美",paraId:3,tocIndex:0},{value:"上的需求。",paraId:3,tocIndex:0},{value:"英文名",paraId:4,tocIndex:0},{value:"：Radial Bar Chart",paraId:4,tocIndex:0},{value:"图表类型",paraId:5,tocIndex:1},{value:"玉珏图",paraId:5,tocIndex:1},{value:"适合的数据",paraId:5,tocIndex:1},{value:"列表：一个分类数据字段、一个连续数据字段",paraId:5,tocIndex:1},{value:"功能",paraId:5,tocIndex:1},{value:"以审美的方式展示分类数据的数值大小对比",paraId:5,tocIndex:1},{value:"数据与图形的映射",paraId:5,tocIndex:1},{value:"分类数据字段映射到环形位置",paraId:5,tocIndex:1},{value:"连续数据字段映射到弧长（角度）",paraId:5,tocIndex:1},{value:"可以用颜色区分不同分类",paraId:5,tocIndex:1},{value:"适合的数据条数",paraId:5,tocIndex:1},{value:"不超过 15 条数据",paraId:5,tocIndex:1},{value:"一个完整的玉珏图包含以下构成元素：",paraId:6,tocIndex:1},{value:"珏环",paraId:7,tocIndex:1},{value:"：角度表示数值",paraId:7,tocIndex:1},{value:"文本",paraId:7,tocIndex:1},{value:"：数值、分类名",paraId:7,tocIndex:1},{value:"例子 1: ",paraId:8,tocIndex:3},{value:"展示分类数据的对比（需要排序）",paraId:8,tocIndex:3},{value:"下图反映了美国民众对不同领域中的中美问题关注程度。",paraId:9,tocIndex:3},{value:"问题",paraId:10,tocIndex:3},{value:"关注人数比例",paraId:10,tocIndex:3},{value:"台海关系",paraId:10,tocIndex:3},{value:"0.21",paraId:10,tocIndex:3},{value:"中国持续增长的军事力量",paraId:10,tocIndex:3},{value:"0.47",paraId:10,tocIndex:3},{value:"中国对全球环境的影响",paraId:10,tocIndex:3},{value:"0.49",paraId:10,tocIndex:3},{value:"美国对中国的贸易逆差",paraId:10,tocIndex:3},{value:"0.52",paraId:10,tocIndex:3},{value:"中国的人权政策",paraId:10,tocIndex:3},{value:"0.53",paraId:10,tocIndex:3},{value:"来自中国的网络攻击",paraId:10,tocIndex:3},{value:"0.54",paraId:10,tocIndex:3},{value:"中国带走了美国的就业岗位",paraId:10,tocIndex:3},{value:"0.60",paraId:10,tocIndex:3},{value:"中国持有美国巨额国债",paraId:10,tocIndex:3},{value:"0.67",paraId:10,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  width: 1000,\n  height: 700,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { question: '台海关系', percent: 0.21, odd: 0 },\n    { question: '中国持续增长的军事力量', percent: 0.47, odd: 1 },\n    { question: '中国对全球环境的影响', percent: 0.49, odd: 0 },\n    { question: '美国对中国的贸易逆差', percent: 0.52, odd: 1 },\n    { question: '中国的人权政策', percent: 0.53, odd: 0 },\n    { question: '来自中国的网络攻击', percent: 0.54, odd: 1 },\n    { question: '中国带走了美国的就业岗位', percent: 0.6, odd: 0 },\n    { question: '中国持有美国巨额国债', percent: 0.67, odd: 1 },\n  ],\n  coordinate: { type: 'radial', innerRadius: 0.2 },\n  encode: {\n    x: 'question',\n    y: 'percent',\n    color: 'odd',\n  },\n  scale: {\n    color: {\n      range: ['rgb(211,0,57)', 'rgb(224,74,116)'],\n    },\n    y: { domain: [0, 1] },\n  },\n  style: {\n    radiusTopLeft: 4,\n    radiusTopRight: 4,\n  },\n  label: {\n    text: 'percent',\n    position: 'inside',\n    style: {\n      fontWeight: 'bold',\n      fill: 'white',\n    },\n  },\n  axis: {\n    x: {\n      label: {\n        autoRotate: true,\n        autoEllipsis: true,\n        style: {\n          fontSize: 10,\n        },\n      },\n    },\n    y: {\n      label: false,\n      grid: false,\n    },\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:11,tocIndex:3},{value:"例子 2: ",paraId:12,tocIndex:3},{value:"展示各国数据对比",paraId:12,tocIndex:3},{value:"下图反映了各国人民认为气候变化是严重问题的比例。",paraId:13,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  width: 1200,\n  height: 800,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { country: '中国', percent: 0.18, condition: '特殊' },\n    { country: '俄罗斯', percent: 0.33, condition: '一般' },\n    { country: '英国', percent: 0.41, condition: '一般' },\n    { country: '美国', percent: 0.45, condition: '一般' },\n    { country: '韩国', percent: 0.48, condition: '一般' },\n    { country: '加拿大', percent: 0.51, condition: '一般' },\n    { country: '德国', percent: 0.55, condition: '一般' },\n    { country: '越南', percent: 0.69, condition: '一般' },\n    { country: '巴西', percent: 0.86, condition: '一般' },\n  ],\n  coordinate: {\n    type: 'radial',\n    innerRadius: 0.3,\n    startAngle: -Math.PI,\n    endAngle: -0.25 * Math.PI,\n  },\n  encode: {\n    x: 'country',\n    y: 'percent',\n    color: 'condition',\n  },\n  scale: {\n    color: {\n      range: ['#2370AE', '#A34265', '#505051'],\n    },\n  },\n  style: {\n    radiusTopLeft: 2,\n    radiusTopRight: 2,\n  },\n  label: {\n    text: 'percent',\n    position: 'inside',\n    style: {\n      fontWeight: 'bold',\n      fill: 'white',\n      fontSize: 10,\n    },\n  },\n  axis: {\n    x: {\n      label: {\n        autoRotate: true,\n        autoEllipsis: true,\n        style: {\n          fontSize: 12,\n        },\n      },\n    },\n    y: {\n      label: false,\n      grid: false,\n    },\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:14,tocIndex:3},{value:"例子 1: ",paraId:15,tocIndex:4},{value:"未排序的数据会产生误导",paraId:15,tocIndex:4},{value:"简介中提到玉珏图具有半径反馈效应。视觉上半径越大的珏环会看起来更大，半径小的则小。造成玉珏图的误用。所以，我们认为玉珏图使用时必须进行",paraId:16,tocIndex:4},{value:"排序",paraId:16,tocIndex:4},{value:"。",paraId:16,tocIndex:4},{value:"下面展示错误和正确的对比：",paraId:17,tocIndex:4},{value:"错误示例（未排序）：",paraId:18,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  width: 1000,\n  height: 700,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { country: '巴西', percent: 0.86, condition: '一般' },\n    { country: '越南', percent: 0.69, condition: '一般' },\n    { country: '德国', percent: 0.55, condition: '一般' },\n    { country: '加拿大', percent: 0.51, condition: '一般' },\n    { country: '韩国', percent: 0.48, condition: '一般' },\n    { country: '美国', percent: 0.45, condition: '一般' },\n    { country: '英国', percent: 0.41, condition: '一般' },\n    { country: '俄罗斯', percent: 0.33, condition: '一般' },\n    { country: '中国', percent: 0.18, condition: '特殊' },\n  ],\n  coordinate: {\n    type: 'radial',\n    innerRadius: 0.2,\n    startAngle: -Math.PI,\n    endAngle: -0.25 * Math.PI,\n  },\n  encode: {\n    x: 'country',\n    y: 'percent',\n    color: 'condition',\n  },\n  scale: {\n    color: {\n      range: ['#2370AE', '#A34265', '#505051'],\n    },\n  },\n  style: {\n    radiusTopLeft: 2,\n    radiusTopRight: 2,\n  },\n  axis: {\n    x: {\n      label: {\n        autoRotate: true,\n        autoEllipsis: true,\n        style: {\n          fontSize: 10,\n        },\n      },\n    },\n    y: {\n      label: false,\n      grid: false,\n    },\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:19,tocIndex:4},{value:"在上面的错误示例中，由于数据未排序，外圈的巴西（0.86）会在视觉上显得比内圈的中国（0.18）大很多，但这种视觉差异会被半径效应进一步放大，造成误导。",paraId:20,tocIndex:4},{value:"可以通过颜色或分组来展示多维度的数据对比：",paraId:21,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  width: 1000,\n  height: 700,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { category: 'A类产品', value: 85, quarter: 'Q1' },\n    { category: 'B类产品', value: 75, quarter: 'Q1' },\n    { category: 'C类产品', value: 65, quarter: 'Q1' },\n    { category: 'D类产品', value: 55, quarter: 'Q1' },\n    { category: 'E类产品', value: 45, quarter: 'Q1' },\n  ],\n  coordinate: { type: 'radial', innerRadius: 0.2 },\n  encode: {\n    x: 'category',\n    y: 'value',\n    color: 'category',\n  },\n  scale: {\n    y: { domain: [0, 100] },\n  },\n  style: {\n    radiusTopLeft: 8,\n    radiusTopRight: 8,\n  },\n  label: {\n    text: 'value',\n    position: 'inside',\n    style: {\n      fontWeight: 'bold',\n      fill: 'white',\n    },\n  },\n  axis: {\n    x: {\n      label: {\n        autoRotate: true,\n        autoEllipsis: true,\n        style: {\n          fontSize: 10,\n        },\n      },\n    },\n    y: {\n      label: false,\n      grid: false,\n    },\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:22,tocIndex:6},{value:"柱状图",paraId:23,tocIndex:7},{value:"玉珏图",paraId:24,tocIndex:8},{value:"：使用极坐标系，通过弧长表示数值，更具视觉美感，但存在半径反馈效应，数据对比准确性较低",paraId:24,tocIndex:8},{value:"柱状图",paraId:24,tocIndex:8},{value:"：使用直角坐标系，通过矩形长度表示数值，数据对比更准确直观",paraId:24,tocIndex:8},{value:"玉珏图",paraId:25,tocIndex:9},{value:"：展示各分类的绝对数值大小",paraId:25,tocIndex:9},{value:"饼图",paraId:25,tocIndex:9},{value:"：展示各分类在总体中的占比关系",paraId:25,tocIndex:9},{value:"玉珏图",paraId:26,tocIndex:10},{value:"：专注于单一维度数值的分类对比",paraId:26,tocIndex:10},{value:"雷达图",paraId:26,tocIndex:10},{value:"：展示多维度指标的综合表现",paraId:26,tocIndex:10}]},73699:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(85799);const t=[{value:"回归曲线图是一种在散点图基础上添加回归曲线的统计图表，用于展示两个或多个变量之间的数学关系和预测趋势。回归曲线通过数学算法拟合数据点，找出变量间的最佳函数关系，帮助分析数据的内在规律和进行趋势预测。",paraId:0,tocIndex:0},{value:"回归曲线图结合了",paraId:1,tocIndex:0},{value:"散点图",paraId:2,tocIndex:0},{value:"的数据分布展示能力和数学建模的预测功能，不仅能直观地显示数据点的分布，还能通过拟合曲线揭示变量间的潜在关系，是数据分析和科学研究中的重要工具。",paraId:1,tocIndex:0},{value:"常见的回归类型包括线性回归、多项式回归、指数回归、对数回归等，不同的回归方法适用于不同的数据模式和关系类型。",paraId:3,tocIndex:0},{value:"英文名",paraId:4,tocIndex:0},{value:"：Regression Curve Chart",paraId:4,tocIndex:0},{value:"图表类型",paraId:5,tocIndex:1},{value:"回归曲线图",paraId:5,tocIndex:1},{value:"适合的数据",paraId:5,tocIndex:1},{value:"两个连续数据字段：一个自变量字段、一个因变量字段",paraId:5,tocIndex:1},{value:"功能",paraId:5,tocIndex:1},{value:"展示变量间的数学关系，识别数据趋势，进行预测分析",paraId:5,tocIndex:1},{value:"数据与图形的映射",paraId:5,tocIndex:1},{value:"自变量字段映射到横轴位置",paraId:5,tocIndex:1},{value:"因变量字段映射到纵轴位置",paraId:5,tocIndex:1},{value:"数据点显示原始观测值",paraId:5,tocIndex:1},{value:"回归曲线显示拟合的数学关系",paraId:5,tocIndex:1},{value:"适合的数据条数",paraId:5,tocIndex:1},{value:"10-1000 条数据，数据点足够多才能有效进行回归分析",paraId:5,tocIndex:1},{value:"组成元素：",paraId:6,tocIndex:1},{value:"散点（Scatter Points）",paraId:7,tocIndex:1},{value:"：表示原始数据观测值的点",paraId:7,tocIndex:1},{value:"回归曲线（Regression Curve）",paraId:7,tocIndex:1},{value:"：通过数学算法拟合的趋势线",paraId:7,tocIndex:1},{value:"X 轴（X-axis）",paraId:7,tocIndex:1},{value:"：水平坐标轴，通常表示自变量",paraId:7,tocIndex:1},{value:"Y 轴（Y-axis）",paraId:7,tocIndex:1},{value:"：垂直坐标轴，通常表示因变量",paraId:7,tocIndex:1},{value:"回归方程（Regression Equation）",paraId:7,tocIndex:1},{value:"：描述变量关系的数学公式",paraId:7,tocIndex:1},{value:"决定系数（R²）",paraId:7,tocIndex:1},{value:"：衡量回归模型拟合优度的指标",paraId:7,tocIndex:1},{value:"例子 1: ",paraId:8,tocIndex:3},{value:"线性关系数据分析",paraId:8,tocIndex:3},{value:"线性回归适用于展示两个变量之间的线性关系，如身高与体重、温度与销量等。",paraId:9,tocIndex:3},{value:"import { Chart } from '@antv/g2';\nimport { regressionLinear } from 'd3-regression';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/linear-regression.json',\n  },\n  children: [\n    {\n      type: 'point',\n      encode: { x: (d) => d[0], y: (d) => d[1] },\n      scale: { x: { domain: [0, 1] }, y: { domain: [0, 5] } },\n      style: { fillOpacity: 0.75, fill: '#1890ff' },\n    },\n    {\n      type: 'line',\n      data: {\n        transform: [\n          {\n            type: 'custom',\n            callback: regressionLinear(),\n          },\n        ],\n      },\n      encode: { x: (d) => d[0], y: (d) => d[1] },\n      style: { stroke: '#30BF78', lineWidth: 2 },\n      labels: [\n        {\n          text: 'y = 1.7x + 3.01',\n          selector: 'last',\n          position: 'right',\n          textAlign: 'end',\n          dy: -8,\n        },\n      ],\n      tooltip: false,\n    },\n  ],\n  axis: {\n    x: { title: '自变量 X' },\n    y: { title: '因变量 Y' },\n  },\n});\n\nchart.render();\n",paraId:10,tocIndex:3},{value:"说明",paraId:11,tocIndex:3},{value:"：",paraId:11,tocIndex:3},{value:"散点显示原始数据分布",paraId:12,tocIndex:3},{value:"线性回归线揭示两变量间的线性关系",paraId:12,tocIndex:3},{value:"回归方程提供了精确的数学描述",paraId:12,tocIndex:3},{value:"适用于预测和趋势分析",paraId:12,tocIndex:3},{value:"例子 2: ",paraId:13,tocIndex:3},{value:"非线性关系 - 二次回归",paraId:13,tocIndex:3},{value:"当数据呈现弯曲趋势时，可以使用二次回归（抛物线）来拟合数据。",paraId:14,tocIndex:3},{value:"import { Chart } from '@antv/g2';\nimport { regressionQuad } from 'd3-regression';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst data = [\n  { x: -4, y: 5.2 },\n  { x: -3, y: 2.8 },\n  { x: -2, y: 1.5 },\n  { x: -1, y: 0.8 },\n  { x: 0, y: 0.5 },\n  { x: 1, y: 0.8 },\n  { x: 2, y: 1.5 },\n  { x: 3, y: 2.8 },\n  { x: 4, y: 5.2 },\n];\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data,\n  children: [\n    {\n      type: 'point',\n      encode: { x: 'x', y: 'y' },\n      style: { fillOpacity: 0.75, fill: '#1890ff' },\n    },\n    {\n      type: 'line',\n      data: {\n        transform: [\n          {\n            type: 'custom',\n            callback: regressionQuad()\n              .x((d) => d.x)\n              .y((d) => d.y)\n              .domain([-4, 4]),\n          },\n        ],\n      },\n      encode: { x: (d) => d[0], y: (d) => d[1] },\n      style: { stroke: '#30BF78', lineWidth: 2 },\n      labels: [\n        {\n          text: 'y = 0.3x² + 0.5',\n          selector: 'last',\n          textAlign: 'end',\n          dy: -8,\n        },\n      ],\n      tooltip: false,\n    },\n  ],\n  axis: {\n    x: { title: '自变量 X' },\n    y: { title: '因变量 Y' },\n  },\n});\n\nchart.render();\n",paraId:15,tocIndex:3},{value:"说明",paraId:16,tocIndex:3},{value:"：",paraId:16,tocIndex:3},{value:"二次回归适合展示具有抛物线特征的数据关系",paraId:17,tocIndex:3},{value:"能够捕获数据的弯曲趋势和极值点",paraId:17,tocIndex:3},{value:"常用于物理学、经济学中的非线性关系分析",paraId:17,tocIndex:3},{value:"例子 3: ",paraId:18,tocIndex:3},{value:"指数增长趋势分析",paraId:18,tocIndex:3},{value:"指数回归适用于展示指数增长或衰减的数据模式，如人口增长、细菌繁殖等。",paraId:19,tocIndex:3},{value:"import { Chart } from '@antv/g2';\nimport { regressionExp } from 'd3-regression';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/exponential-regression.json',\n  },\n  children: [\n    {\n      type: 'point',\n      encode: { x: (d) => d[0], y: (d) => d[1] },\n      scale: {\n        x: { domain: [0, 18] },\n        y: { domain: [0, 100000] },\n      },\n      style: { fillOpacity: 0.75, fill: '#1890ff' },\n    },\n    {\n      type: 'line',\n      data: {\n        transform: [\n          {\n            type: 'custom',\n            callback: regressionExp(),\n          },\n        ],\n      },\n      encode: {\n        x: (d) => d[0],\n        y: (d) => d[1],\n        shape: 'smooth',\n      },\n      style: { stroke: '#30BF78', lineWidth: 2 },\n      labels: [\n        {\n          text: 'y = 3477.32e^(0.18x)\\nR² = 0.998',\n          selector: 'last',\n          textAlign: 'end',\n          dy: -20,\n        },\n      ],\n      tooltip: false,\n    },\n  ],\n  axis: {\n    x: { title: '时间' },\n    y: {\n      title: '数值',\n      labelFormatter: '~s',\n    },\n  },\n});\n\nchart.render();\n",paraId:20,tocIndex:3},{value:"说明",paraId:21,tocIndex:3},{value:"：",paraId:21,tocIndex:3},{value:"指数回归适合分析快速增长或衰减的趋势",paraId:22,tocIndex:3},{value:"R² 值接近 1 表示拟合效果很好",paraId:22,tocIndex:3},{value:"常用于预测具有指数特征的未来趋势",paraId:22,tocIndex:3},{value:"例子 1: ",paraId:23,tocIndex:4},{value:"数据点过少的情况",paraId:23,tocIndex:4},{value:"当数据点太少时，回归分析可能不够可靠，容易产生误导性的结论。",paraId:24,tocIndex:4},{value:"import { Chart } from '@antv/g2';\nimport { regressionLinear } from 'd3-regression';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst insufficientData = [\n  { x: 1, y: 2 },\n  { x: 3, y: 4 },\n  { x: 5, y: 3 },\n];\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: insufficientData,\n  children: [\n    {\n      type: 'point',\n      encode: { x: 'x', y: 'y' },\n      style: {\n        fillOpacity: 0.8,\n        fill: '#ff4d4f',\n        r: 8,\n      },\n    },\n    {\n      type: 'line',\n      data: {\n        transform: [\n          {\n            type: 'custom',\n            callback: regressionLinear()\n              .x((d) => d.x)\n              .y((d) => d.y),\n          },\n        ],\n      },\n      encode: { x: (d) => d[0], y: (d) => d[1] },\n      style: {\n        stroke: '#ff4d4f',\n        lineWidth: 2,\n        strokeDasharray: [4, 4],\n      },\n      tooltip: false,\n    },\n  ],\n  axis: {\n    x: { title: '变量 X' },\n    y: { title: '变量 Y' },\n  },\n  title: '不适合：数据点过少的回归分析',\n});\n\nchart.render();\n",paraId:25,tocIndex:4},{value:"问题说明",paraId:26,tocIndex:4},{value:"：",paraId:26,tocIndex:4},{value:"仅有 3 个数据点，样本量不足",paraId:27,tocIndex:4},{value:"回归线的可靠性和预测能力有限",paraId:27,tocIndex:4},{value:"容易受到异常值的影响",paraId:27,tocIndex:4},{value:"建议至少需要 10 个以上的数据点进行回归分析",paraId:27,tocIndex:4},{value:"例子 2: ",paraId:28,tocIndex:4},{value:"无明显相关关系的数据",paraId:28,tocIndex:4},{value:"当两个变量之间没有明显的相关关系时，强行添加回归线可能会误导分析。",paraId:29,tocIndex:4},{value:"import { Chart } from '@antv/g2';\nimport { regressionLinear } from 'd3-regression';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\n// 生成随机分布的数据（无相关关系）\nconst randomData = Array.from({ length: 30 }, (_, i) => ({\n  x: Math.random() * 10,\n  y: Math.random() * 10,\n}));\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: randomData,\n  children: [\n    {\n      type: 'point',\n      encode: { x: 'x', y: 'y' },\n      style: {\n        fillOpacity: 0.8,\n        fill: '#ff4d4f',\n        r: 6,\n      },\n    },\n    {\n      type: 'line',\n      data: {\n        transform: [\n          {\n            type: 'custom',\n            callback: regressionLinear()\n              .x((d) => d.x)\n              .y((d) => d.y),\n          },\n        ],\n      },\n      encode: { x: (d) => d[0], y: (d) => d[1] },\n      style: {\n        stroke: '#ff4d4f',\n        lineWidth: 2,\n        strokeDasharray: [4, 4],\n      },\n      labels: [\n        {\n          text: 'R² ≈ 0.02 (极低)',\n          selector: 'last',\n          textAlign: 'end',\n          dy: -8,\n        },\n      ],\n      tooltip: false,\n    },\n  ],\n  axis: {\n    x: { title: '变量 X' },\n    y: { title: '变量 Y' },\n  },\n  title: '不适合：无相关关系的数据',\n});\n\nchart.render();\n",paraId:30,tocIndex:4},{value:"问题说明",paraId:31,tocIndex:4},{value:"：",paraId:31,tocIndex:4},{value:"数据点呈现随机分布，无明显的趋势模式",paraId:32,tocIndex:4},{value:"R² 值极低，说明回归模型几乎无法解释变量关系",paraId:32,tocIndex:4},{value:"回归线没有实际意义，可能误导决策",paraId:32,tocIndex:4},{value:"应该先进行相关性分析，确认变量间存在关系后再进行回归",paraId:32,tocIndex:4},{value:"当数据呈现复杂的弯曲趋势时，可以使用多项式回归来拟合更复杂的曲线。",paraId:33,tocIndex:6},{value:"import { Chart } from '@antv/g2';\nimport { regressionPoly } from 'd3-regression';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst polynomialData = [\n  { x: 0, y: 140 },\n  { x: 1, y: 149 },\n  { x: 2, y: 159.6 },\n  { x: 3, y: 159 },\n  { x: 4, y: 155.9 },\n  { x: 5, y: 169 },\n  { x: 6, y: 162.9 },\n  { x: 7, y: 169 },\n  { x: 8, y: 180 },\n];\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: polynomialData,\n  children: [\n    {\n      type: 'point',\n      encode: { x: 'x', y: 'y' },\n      style: { fillOpacity: 0.75, fill: '#1890ff' },\n    },\n    {\n      type: 'line',\n      data: {\n        transform: [\n          {\n            type: 'custom',\n            callback: regressionPoly()\n              .x((d) => d.x)\n              .y((d) => d.y),\n          },\n        ],\n      },\n      encode: {\n        x: (d) => d[0],\n        y: (d) => d[1],\n        shape: 'smooth',\n      },\n      style: { stroke: '#30BF78', lineWidth: 2 },\n      labels: [\n        {\n          text: 'y = 0.24x³ - 3.00x² + 13.45x + 139.77\\nR² = 0.92',\n          selector: 'last',\n          textAlign: 'end',\n          dx: -8,\n          dy: -20,\n        },\n      ],\n      tooltip: false,\n    },\n  ],\n  axis: {\n    x: { title: '时间' },\n    y: { title: '数值' },\n  },\n});\n\nchart.render();\n",paraId:34,tocIndex:6},{value:"说明",paraId:35,tocIndex:6},{value:"：",paraId:35,tocIndex:6},{value:"多项式回归能够拟合复杂的弯曲关系",paraId:36,tocIndex:6},{value:"适合处理具有多个波峰波谷的数据",paraId:36,tocIndex:6},{value:"需要注意避免过拟合问题",paraId:36,tocIndex:6},{value:"对数回归适用于增长率逐渐减缓的数据模式。",paraId:37,tocIndex:7},{value:"import { Chart } from '@antv/g2';\nimport { regressionLog } from 'd3-regression';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/logarithmic-regression.json',\n  },\n  children: [\n    {\n      type: 'point',\n      encode: { x: 'x', y: 'y' },\n      scale: { x: { domain: [0, 35] } },\n      style: { fillOpacity: 0.75, fill: '#1890ff' },\n    },\n    {\n      type: 'line',\n      data: {\n        transform: [\n          {\n            type: 'custom',\n            callback: regressionLog()\n              .x((d) => d.x)\n              .y((d) => d.y)\n              .domain([0.81, 35]),\n          },\n        ],\n      },\n      encode: {\n        x: (d) => d[0],\n        y: (d) => d[1],\n        shape: 'smooth',\n      },\n      style: { stroke: '#30BF78', lineWidth: 2 },\n      labels: [\n        {\n          text: 'y = 0.881·ln(x) + 4.173\\nR² = 0.958',\n          selector: 'last',\n          textAlign: 'end',\n          dy: -20,\n        },\n      ],\n      tooltip: false,\n    },\n  ],\n  axis: {\n    x: { title: '变量 X' },\n    y: { title: '变量 Y' },\n  },\n});\n\nchart.render();\n",paraId:38,tocIndex:7},{value:"说明",paraId:39,tocIndex:7},{value:"：",paraId:39,tocIndex:7},{value:"对数回归适合展示边际递减效应",paraId:40,tocIndex:7},{value:"常用于分析学习曲线、收益递减等场景",paraId:40,tocIndex:7},{value:"能够处理增长率逐渐下降的数据模式",paraId:40,tocIndex:7},{value:"可以在同一图表中展示多种回归方法的对比效果。",paraId:41,tocIndex:8},{value:"import { Chart } from '@antv/g2';\nimport {\n  regressionLinear,\n  regressionQuad,\n  regressionPoly,\n} from 'd3-regression';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst comparisonData = [\n  { x: 1, y: 2.1 },\n  { x: 2, y: 3.9 },\n  { x: 3, y: 6.8 },\n  { x: 4, y: 10.2 },\n  { x: 5, y: 15.1 },\n  { x: 6, y: 21.5 },\n  { x: 7, y: 29.8 },\n  { x: 8, y: 40.2 },\n];\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: comparisonData,\n  children: [\n    {\n      type: 'point',\n      encode: { x: 'x', y: 'y' },\n      style: {\n        fillOpacity: 0.8,\n        fill: '#1890ff',\n        r: 6,\n      },\n    },\n    // 线性回归\n    {\n      type: 'line',\n      data: {\n        transform: [\n          {\n            type: 'custom',\n            callback: regressionLinear()\n              .x((d) => d.x)\n              .y((d) => d.y),\n          },\n        ],\n      },\n      encode: { x: (d) => d[0], y: (d) => d[1] },\n      style: {\n        stroke: '#ff4d4f',\n        lineWidth: 2,\n        strokeDasharray: [4, 4],\n      },\n      tooltip: false,\n    },\n    // 二次回归\n    {\n      type: 'line',\n      data: {\n        transform: [\n          {\n            type: 'custom',\n            callback: regressionQuad()\n              .x((d) => d.x)\n              .y((d) => d.y),\n          },\n        ],\n      },\n      encode: { x: (d) => d[0], y: (d) => d[1] },\n      style: {\n        stroke: '#30BF78',\n        lineWidth: 2,\n      },\n      tooltip: false,\n    },\n  ],\n  axis: {\n    x: { title: '变量 X' },\n    y: { title: '变量 Y' },\n  },\n  legends: [\n    {\n      color: {\n        position: 'top',\n        itemMarker: (color, index) => {\n          if (index === 0)\n            return {\n              symbol: 'line',\n              style: { stroke: '#ff4d4f', strokeDasharray: [4, 4] },\n            };\n          if (index === 1)\n            return { symbol: 'line', style: { stroke: '#30BF78' } };\n        },\n        data: [\n          { color: '#ff4d4f', value: '线性回归' },\n          { color: '#30BF78', value: '二次回归' },\n        ],\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:42,tocIndex:8},{value:"说明",paraId:43,tocIndex:8},{value:"：",paraId:43,tocIndex:8},{value:"可以同时展示多种回归方法的拟合效果",paraId:44,tocIndex:8},{value:"有助于选择最适合数据特征的回归模型",paraId:44,tocIndex:8},{value:"通过对比分析找到最佳的拟合方法",paraId:44,tocIndex:8},{value:"散点图",paraId:45,tocIndex:9},{value:"回归曲线图在散点图基础上增加了数学建模和预测功能",paraId:46,tocIndex:10},{value:"散点图专注于展示数据分布和相关性，回归曲线图更注重趋势分析和预测",paraId:46,tocIndex:10},{value:"当需要进行趋势预测时选择回归曲线图，当仅需观察数据分布时选择散点图",paraId:46,tocIndex:10},{value:"折线图",paraId:47,tocIndex:10},{value:"回归曲线图基于数学模型拟合，折线图直接连接数据点",paraId:48,tocIndex:11},{value:"回归曲线图能够平滑噪声并进行预测，折线图准确反映每个数据点",paraId:48,tocIndex:11},{value:"当需要分析趋势规律时选择回归曲线图，当需要展示精确变化时选择折线图",paraId:48,tocIndex:11}]},22166:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(2851);const t=[{value:"南丁格尔玫瑰图（又名鸡冠花图、极坐标区域图），是南丁格尔在克里米亚战争期间提交的一份关于士兵死伤的报告时发明的一种图表。",paraId:0,tocIndex:0},{value:"南丁格尔玫瑰图是在极坐标下绘制的柱状图，使用圆弧的半径长短表示数据的大小（数量的多少）。",paraId:1,tocIndex:0},{value:"由于半径和面积的关系是平方的关系，南丁格尔玫瑰图会将数据的比例大小夸大，尤其适合对比大小相近的数值。",paraId:2,tocIndex:0},{value:"由于圆形有周期的特性，所以玫瑰图也适用于表示一个周期内的时间概念，比如星期、月份。",paraId:2,tocIndex:0},{value:"其他名称",paraId:3,tocIndex:0},{value:"：Nightingale Rose Chart, Coxcomb Chart, Polar Area Diagram",paraId:3,tocIndex:0},{value:"图表类型",paraId:4,tocIndex:1},{value:"南丁格尔玫瑰图",paraId:4,tocIndex:1},{value:"适合的数据",paraId:4,tocIndex:1},{value:"列表：一个分类数据字段、一个连续数据字段",paraId:4,tocIndex:1},{value:"功能",paraId:4,tocIndex:1},{value:"对比分类数据的数值大小",paraId:4,tocIndex:1},{value:"数据与图形的映射",paraId:4,tocIndex:1},{value:"分类数据字段映射到分类轴的位置",paraId:4,tocIndex:1},{value:"连续数据字段映射到半径轴的高度 ",paraId:4,tocIndex:1},{value:"分类数据也可以设置颜色增强分类的区分度",paraId:4,tocIndex:1},{value:"适合的数据条数",paraId:4,tocIndex:1},{value:"不超过 30 条数据",paraId:4,tocIndex:1},{value:"例子 1: ",paraId:5,tocIndex:3},{value:"对比不同分类的大小",paraId:5,tocIndex:3},{value:"下图是各国制造指数的对比，以美国为基准（100），中国的制造成本指数是 96，也就是说，同样一件产品，在美国制造成本是 1 美元，那么在中国则需要 0.96 美元，从下图可以看出中国的制造优势已经不明显。",paraId:6,tocIndex:3},{value:"country（国家）",paraId:7,tocIndex:3},{value:"cost（制造指数）",paraId:7,tocIndex:3},{value:"中国",paraId:7,tocIndex:3},{value:"96",paraId:7,tocIndex:3},{value:"德国",paraId:7,tocIndex:3},{value:"121",paraId:7,tocIndex:3},{value:"美国",paraId:7,tocIndex:3},{value:"100",paraId:7,tocIndex:3},{value:"日本",paraId:7,tocIndex:3},{value:"111",paraId:7,tocIndex:3},{value:"韩国",paraId:7,tocIndex:3},{value:"102",paraId:7,tocIndex:3},{value:"...",paraId:7,tocIndex:3},{value:"...",paraId:7,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  coordinate: { type: 'polar' },\n  data: [\n    { country: '中国', cost: 96 },\n    { country: '德国', cost: 121 },\n    { country: '美国', cost: 100 },\n    { country: '日本', cost: 111 },\n    { country: '韩国', cost: 102 },\n    { country: '法国', cost: 124 },\n    { country: '意大利', cost: 123 },\n    { country: '荷兰', cost: 111 },\n    { country: '比利时', cost: 123 },\n    { country: '英国', cost: 109 },\n    { country: '加拿大', cost: 115 },\n    { country: '俄罗斯', cost: 99 },\n    { country: '墨西哥', cost: 91 },\n    { country: '印度', cost: 87 },\n    { country: '瑞士', cost: 125 },\n    { country: '澳大利亚', cost: 130 },\n    { country: '西班牙', cost: 109 },\n    { country: '巴西', cost: 123 },\n    { country: '泰国', cost: 91 },\n    { country: '印尼', cost: 83 },\n    { country: '波兰', cost: 101 },\n    { country: '瑞典', cost: 116 },\n    { country: '奥地利', cost: 111 },\n    { country: '捷克', cost: 107 },\n  ],\n  encode: {\n    x: 'country',\n    y: 'cost',\n    color: 'country',\n  },\n  scale: {\n    y: { nice: true },\n    color: { palette: 'category20' },\n  },\n  axis: {\n    y: { labelFormatter: null },\n    x: { grid: true },\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:8,tocIndex:3},{value:"例子 1: ",paraId:9,tocIndex:4},{value:"分类过少的场景",paraId:9,tocIndex:4},{value:"下图展示一个班级男女同学的个数，这种场景下使用玫瑰图和饼图的对比。当分类很少时，饼图比玫瑰图更适合。",paraId:10,tocIndex:4},{value:"gender（性别）",paraId:11,tocIndex:4},{value:"count（人数）",paraId:11,tocIndex:4},{value:"男",paraId:11,tocIndex:4},{value:"40",paraId:11,tocIndex:4},{value:"女",paraId:11,tocIndex:4},{value:"30",paraId:11,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart1 = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart1.options({\n  type: 'interval',\n  autoFit: true,\n  coordinate: {\n    type: 'polar',\n  },\n  data: [\n    { gender: '男', count: 40 },\n    { gender: '女', count: 30 },\n  ],\n  encode: {\n    x: 'gender',\n    y: 'count',\n    color: 'gender',\n  },\n  scale: {\n    y: { nice: true, min: 0 },\n    color: { range: ['#4F81BD', '#70AD47'] },\n  },\n  style: {\n    stroke: 'white',\n    lineWidth: 1,\n  },\n  axis: {\n    y: {\n      grid: true,\n      labelFormatter: (val) => `${val}`,\n    },\n  },\n  title: '玫瑰图',\n});\n\nchart1.render();\n",paraId:12,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart2 = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart2.options({\n  type: 'interval',\n  autoFit: true,\n  coordinate: { type: 'theta' },\n  data: [\n    { gender: '男', count: 40 },\n    { gender: '女', count: 30 },\n  ],\n  encode: {\n    color: 'gender',\n    y: 'count',\n  },\n  style: {\n    stroke: 'white',\n    lineWidth: 1,\n  },\n  title: '饼图',\n});\n\nchart2.render();\n",paraId:13,tocIndex:6},{value:"例子 2: ",paraId:14,tocIndex:6},{value:"分类数值相差悬殊的场景",paraId:14,tocIndex:6},{value:"下面使用南丁格尔玫瑰图和横向柱状图分别展示各个省份的人口数据，这种场景下使用玫瑰图不合适，原因是在玫瑰图中数值相差悬殊的分类会导致较小数值的分类难以观察。推荐使用横向柱状图。",paraId:15,tocIndex:6},{value:"province（省份）",paraId:16,tocIndex:6},{value:"population（人口数量）",paraId:16,tocIndex:6},{value:"北京市",paraId:16,tocIndex:6},{value:"19,612,368",paraId:16,tocIndex:6},{value:"天津市",paraId:16,tocIndex:6},{value:"12,938,693",paraId:16,tocIndex:6},{value:"河北省",paraId:16,tocIndex:6},{value:"71,854,210",paraId:16,tocIndex:6},{value:"山西省",paraId:16,tocIndex:6},{value:"27,500,000",paraId:16,tocIndex:6},{value:"...",paraId:16,tocIndex:6},{value:"...",paraId:16,tocIndex:6},{value:"南丁格尔玫瑰图（不推荐）",paraId:17,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  coordinate: { type: 'polar' },\n  data: [\n    { province: '北京市', population: 19612368 },\n    { province: '天津市', population: 12938693 },\n    { province: '河北省', population: 71854210 },\n    { province: '山西省', population: 27500000 },\n    { province: '内蒙古自治区', population: 24706291 },\n    { province: '辽宁省', population: 43746323 },\n    { province: '吉林省', population: 27452815 },\n    { province: '黑龙江省', population: 38313991 },\n    { province: '上海市', population: 23019196 },\n    { province: '江苏省', population: 78660941 },\n    { province: '浙江省', population: 54426891 },\n    { province: '安徽省', population: 59500468 },\n    { province: '福建省', population: 36894217 },\n    { province: '江西省', population: 44567797 },\n    { province: '山东省', population: 95792719 },\n    { province: '河南省', population: 94029939 },\n    { province: '湖北省', population: 57237727 },\n    { province: '湖南省', population: 65700762 },\n    { province: '广东省', population: 104320459 },\n    { province: '广西壮族自治区', population: 46023761 },\n    { province: '海南省', population: 8671485 },\n    { province: '重庆市', population: 28846170 },\n    { province: '四川省', population: 80417528 },\n    { province: '贵州省', population: 34748556 },\n    { province: '云南省', population: 45966766 },\n    { province: '西藏自治区', population: 3002165 },\n    { province: '陕西省', population: 37327379 },\n    { province: '甘肃省', population: 25575263 },\n    { province: '青海省', population: 5626723 },\n  ],\n  encode: {\n    x: 'province',\n    y: 'population',\n    color: 'province',\n  },\n  scale: {\n    y: { nice: true },\n    color: { palette: 'category20' },\n  },\n  axis: {\n    y: { labelFormatter: null },\n    x: {\n      labelFormatter: (text) =>\n        text.length > 3 ? text.slice(0, 3) + '...' : text,\n      labelRotate: Math.PI / 4,\n    },\n  },\n  title: '南丁格尔玫瑰图（不推荐）',\n});\n\nchart.render();\n",paraId:18,tocIndex:6},{value:"横向柱状图（推荐）",paraId:19,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { province: '北京市', population: 19612368 },\n  { province: '天津市', population: 12938693 },\n  { province: '河北省', population: 71854210 },\n  { province: '山西省', population: 27500000 },\n  { province: '内蒙古自治区', population: 24706291 },\n  { province: '辽宁省', population: 43746323 },\n  { province: '吉林省', population: 27452815 },\n  { province: '黑龙江省', population: 38313991 },\n  { province: '上海市', population: 23019196 },\n  { province: '江苏省', population: 78660941 },\n  { province: '浙江省', population: 54426891 },\n  { province: '安徽省', population: 59500468 },\n  { province: '福建省', population: 36894217 },\n  { province: '江西省', population: 44567797 },\n  { province: '山东省', population: 95792719 },\n  { province: '河南省', population: 94029939 },\n  { province: '湖北省', population: 57237727 },\n  { province: '湖南省', population: 65700762 },\n  { province: '广东省', population: 104320459 },\n  { province: '广西壮族自治区', population: 46023761 },\n  { province: '海南省', population: 8671485 },\n  { province: '重庆市', population: 28846170 },\n  { province: '四川省', population: 80417528 },\n  { province: '贵州省', population: 34748556 },\n  { province: '云南省', population: 45966766 },\n  { province: '西藏自治区', population: 3002165 },\n  { province: '陕西省', population: 37327379 },\n  { province: '甘肃省', population: 25575263 },\n  { province: '青海省', population: 5626723 },\n];\nconst sortedData = [...data].sort((a, b) => b.population - a.population);\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  coordinate: { transform: [{ type: 'transpose' }] },\n  data: sortedData.slice(0, 15), // 截取前15个，避免过多数据\n  encode: {\n    x: 'population',\n    y: 'province',\n    color: 'province',\n  },\n  scale: {\n    x: { nice: true },\n    color: { palette: 'category20' },\n  },\n  axis: {\n    x: {\n      title: '人口数量',\n      labelFormatter: (val) => {\n        return (val / 1000000).toFixed(1) + 'M';\n      },\n    },\n    y: {\n      title: '省份',\n      labelFormatter: (text) =>\n        text.length > 5 ? text.slice(0, 5) + '...' : text,\n    },\n  },\n  legend: false,\n  title: '横向柱状图（推荐）',\n  style: {\n    fillOpacity: 0.85,\n  },\n  animate: {\n    enter: { type: 'growInX' },\n  },\n});\n\nchart.render();\n",paraId:20,tocIndex:6},{value:"例子 3: ",paraId:21,tocIndex:6},{value:"部分分类数值过小的场景",paraId:21,tocIndex:6},{value:"下图展示了某个班级的各科及格率，使用南丁格尔玫瑰图和横向柱状图分别展示。这种场景由于存在部分分类数值过小的情况，使用南丁格尔玫瑰图会导致图形扭曲，不易于观察数据的真实比例关系。",paraId:22,tocIndex:6},{value:"科目",paraId:23,tocIndex:6},{value:"及格率",paraId:23,tocIndex:6},{value:"数学",paraId:23,tocIndex:6},{value:"98%",paraId:23,tocIndex:6},{value:"英语",paraId:23,tocIndex:6},{value:"95%",paraId:23,tocIndex:6},{value:"物理",paraId:23,tocIndex:6},{value:"60%",paraId:23,tocIndex:6},{value:"化学",paraId:23,tocIndex:6},{value:"55%",paraId:23,tocIndex:6},{value:"生物",paraId:23,tocIndex:6},{value:"30%",paraId:23,tocIndex:6},{value:"地理",paraId:23,tocIndex:6},{value:"5%",paraId:23,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart1 = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart1.options({\n  type: 'interval',\n  autoFit: true,\n  coordinate: { type: 'polar' },\n  data: [\n    { subject: '数学', pass: 98 },\n    { subject: '英语', pass: 95 },\n    { subject: '物理', pass: 60 },\n    { subject: '化学', pass: 55 },\n    { subject: '生物', pass: 30 },\n    { subject: '地理', pass: 5 },\n  ],\n  encode: {\n    x: 'subject',\n    y: 'pass',\n    color: 'subject',\n  },\n  scale: {\n    y: { nice: true, min: 0 },\n    color: { range: ['#4F81BD', '#70AD47', '#F79646', '#A9A9A9', '#C0504D'] },\n  },\n  style: {\n    stroke: 'white',\n    lineWidth: 1,\n  },\n  axis: {\n    y: {\n      grid: true,\n      labelFormatter: (val) => `${val}`,\n    },\n  },\n  title: '南丁格尔玫瑰图（不推荐）',\n});\n\nchart1.render();\n",paraId:24,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart2 = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart2.options({\n  type: 'interval',\n  autoFit: true,\n  coordinate: { transform: [{ type: 'transpose' }] },\n  data: [\n    { subject: '数学', pass: 98 },\n    { subject: '英语', pass: 95 },\n    { subject: '物理', pass: 60 },\n    { subject: '化学', pass: 55 },\n    { subject: '生物', pass: 30 },\n    { subject: '地理', pass: 5 },\n  ],\n  encode: {\n    x: 'subject',\n    y: 'pass',\n    color: 'subject',\n  },\n  scale: {\n    y: { nice: true, min: 0 },\n    color: { range: ['#4F81BD', '#70AD47', '#F79646', '#A9A9A9', '#C0504D'] },\n  },\n  style: {\n    stroke: 'white',\n    lineWidth: 1,\n  },\n  axis: {\n    y: {\n      grid: true,\n      labelFormatter: (val) => `${val}`,\n    },\n  },\n  title: '横向柱状图（推荐）',\n});\n\nchart2.render();\n",paraId:25,tocIndex:8},{value:"通过设置极坐标的起始角度可以实现扇形南丁格尔玫瑰图：",paraId:26,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  coordinate: {\n    type: 'polar',\n    startAngle: Math.PI,\n    endAngle: Math.PI * (3 / 2),\n  },\n  data: [\n    { country: '中国', cost: 96 },\n    { country: '德国', cost: 121 },\n    { country: '美国', cost: 100 },\n    { country: '日本', cost: 111 },\n    { country: '韩国', cost: 102 },\n    { country: '法国', cost: 124 },\n    { country: '意大利', cost: 123 },\n    { country: '荷兰', cost: 111 },\n    { country: '比利时', cost: 123 },\n    { country: '英国', cost: 109 },\n    { country: '加拿大', cost: 115 },\n    { country: '俄罗斯', cost: 99 },\n  ],\n  encode: {\n    x: 'country',\n    y: 'cost',\n    color: 'country',\n  },\n  scale: {\n    y: { nice: true },\n    color: { range: ['#fc8f48', '#ffd787'] },\n  },\n  style: {\n    lineWidth: 1,\n    stroke: '#fff',\n  },\n  labels: [\n    {\n      text: 'cost',\n      style: {\n        textAlign: 'center',\n        fontSize: 10,\n        fontWeight: 'bold',\n      },\n      transform: [{ type: 'overlapDodgeY' }],\n    },\n  ],\n});\n\nchart.render();\n",paraId:27,tocIndex:10},{value:"南丁格尔玫瑰图的实现原理是将柱状图在极坐标下绘制，如果将柱状图扩展为层叠柱状图，同样可以实现层叠的玫瑰图。",paraId:28,tocIndex:11},{value:"下图是近十年来难民数据，其中大致可分为跨越国境的难民（refugees），未跨越国境的境内流离失所者（internally displaced persons）和尚未取得难民身份的寻求庇护者（asylum-seekers）。",paraId:29,tocIndex:11},{value:"year（年份）",paraId:30,tocIndex:11},{value:"internally（境内流离失所者）",paraId:30,tocIndex:11},{value:"refugees（跨越国境的难民）",paraId:30,tocIndex:11},{value:"seekers（未取得难民身份）",paraId:30,tocIndex:11},{value:"2000",paraId:30,tocIndex:11},{value:"21.0",paraId:30,tocIndex:11},{value:"16",paraId:30,tocIndex:11},{value:"0.8",paraId:30,tocIndex:11},{value:"2001",paraId:30,tocIndex:11},{value:"25.0",paraId:30,tocIndex:11},{value:"16",paraId:30,tocIndex:11},{value:"0.8",paraId:30,tocIndex:11},{value:"...",paraId:30,tocIndex:11},{value:"...",paraId:30,tocIndex:11},{value:"...",paraId:30,tocIndex:11},{value:"...",paraId:30,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  coordinate: {\n    type: 'polar',\n    innerRadius: 0.1,\n  },\n  data: [\n    { year: '2000', type: '境内流离失所者', count: 21.0 },\n    { year: '2000', type: '跨越国境的难民', count: 16 },\n    { year: '2000', type: '未取得难民身份', count: 0.8 },\n    { year: '2001', type: '境内流离失所者', count: 25.0 },\n    { year: '2001', type: '跨越国境的难民', count: 16 },\n    { year: '2001', type: '未取得难民身份', count: 0.8 },\n    { year: '2002', type: '境内流离失所者', count: 25.0 },\n    { year: '2002', type: '跨越国境的难民', count: 15 },\n    { year: '2002', type: '未取得难民身份', count: 0.8 },\n    { year: '2003', type: '境内流离失所者', count: 25.0 },\n    { year: '2003', type: '跨越国境的难民', count: 14 },\n    { year: '2003', type: '未取得难民身份', count: 0.7 },\n    { year: '2004', type: '境内流离失所者', count: 25.0 },\n    { year: '2004', type: '跨越国境的难民', count: 14 },\n    { year: '2004', type: '未取得难民身份', count: 0.7 },\n    { year: '2005', type: '境内流离失所者', count: 24.0 },\n    { year: '2005', type: '跨越国境的难民', count: 13 },\n    { year: '2005', type: '未取得难民身份', count: 0.8 },\n    { year: '2006', type: '境内流离失所者', count: 24.0 },\n    { year: '2006', type: '跨越国境的难民', count: 14 },\n    { year: '2006', type: '未取得难民身份', count: 0.7 },\n    { year: '2007', type: '境内流离失所者', count: 26.0 },\n    { year: '2007', type: '跨越国境的难民', count: 16 },\n    { year: '2007', type: '未取得难民身份', count: 0.7 },\n    { year: '2008', type: '境内流离失所者', count: 26.0 },\n    { year: '2008', type: '跨越国境的难民', count: 15.2 },\n    { year: '2008', type: '未取得难民身份', count: 0.8 },\n    { year: '2009', type: '境内流离失所者', count: 27.1 },\n    { year: '2009', type: '跨越国境的难民', count: 15.2 },\n    { year: '2009', type: '未取得难民身份', count: 1.0 },\n    { year: '2010', type: '境内流离失所者', count: 27.5 },\n    { year: '2010', type: '跨越国境的难民', count: 15.4 },\n    { year: '2010', type: '未取得难民身份', count: 0.8 },\n    { year: '2011', type: '境内流离失所者', count: 26.4 },\n    { year: '2011', type: '跨越国境的难民', count: 15.2 },\n    { year: '2011', type: '未取得难民身份', count: 0.9 },\n    { year: '2012', type: '境内流离失所者', count: 28.8 },\n    { year: '2012', type: '跨越国境的难民', count: 15.4 },\n    { year: '2012', type: '未取得难民身份', count: 0.9 },\n    { year: '2013', type: '境内流离失所者', count: 33.3 },\n    { year: '2013', type: '跨越国境的难民', count: 16.7 },\n    { year: '2013', type: '未取得难民身份', count: 1.2 },\n    { year: '2014', type: '境内流离失所者', count: 38.2 },\n    { year: '2014', type: '跨越国境的难民', count: 19.5 },\n    { year: '2014', type: '未取得难民身份', count: 1.8 },\n  ],\n  encode: {\n    x: 'year',\n    y: 'count',\n    color: 'type',\n  },\n  transform: [{ type: 'stackY' }],\n  scale: {\n    color: {\n      range: ['rgb(136,186,174)', 'rgb(184,189,61)', 'rgb(107,136,138)'],\n    },\n  },\n  style: {\n    stroke: 'white',\n    lineWidth: 1,\n  },\n});\n\nchart.render();\n",paraId:31,tocIndex:11},{value:"南丁格尔玫瑰图本质上是柱状图在极坐标上的展示",paraId:32,tocIndex:13},{value:"柱状图使用矩形的高度表示数值的大小",paraId:32,tocIndex:13},{value:"南丁格尔玫瑰图使用扇形的半径大小表示数值的大小",paraId:32,tocIndex:13},{value:"南丁格尔玫瑰图使用扇形的半径表示数值的大小，饼图使用扇形的弧度表示数据的大小",paraId:33,tocIndex:14},{value:"南丁格尔玫瑰图可以同时表现的分类多于饼图",paraId:33,tocIndex:14}]},10060:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(76316);const t=[{value:"桑基图 (Sankey Diagram)，是一种特定类型的流图，用于描述一组值到另一组值的流向。上图为 1869 年，查尔斯米纳德（Charles Minard）绘制的 1812 年拿破仑征俄图（Map of Napolean's Russian Campaign of 1812），这是一个在地图上覆盖桑基图的流程图。1898 年爱尔兰人 Matthew Henry Phineas Riall Sankey 在土木工程师学会会报纪要的一篇关于蒸汽机能源效率的文章中首次推出了第一个能量流动图，此后便以其名字命名为 Sankey 图，中文音译为桑基图。",paraId:0,tocIndex:0},{value:"图中延伸的分支的宽度对应数据流量的大小。桑基图的特点如下：",paraId:1,tocIndex:0},{value:"起始流量和结束流量相同，所有主支宽度的总和与所有分出去的分支宽度总和相等，保持能量的平衡；",paraId:2,tocIndex:0},{value:"在内部，不同的线条代表了不同的流量分流情况，它的宽度成比例地显示此分支占有的流量；",paraId:2,tocIndex:0},{value:"节点不同的宽度代表了特定状态下的流量大小。",paraId:2,tocIndex:0},{value:"桑基图通常应用于能源、材料成分、金融等数据的可视化分析。",paraId:3,tocIndex:0},{value:"英文名",paraId:4,tocIndex:0},{value:"：Sankey Diagram",paraId:4,tocIndex:0},{value:"图表类型",paraId:5,tocIndex:2},{value:"基础桑基图",paraId:5,tocIndex:2},{value:"适合的数据",paraId:5,tocIndex:2},{value:"流向数据：包含源节点（source）、目标节点（target）和流量值（value）的数据",paraId:5,tocIndex:2},{value:"功能",paraId:5,tocIndex:2},{value:"展示不同节点之间的流向关系和流量大小",paraId:5,tocIndex:2},{value:"数据与图形的映射",paraId:5,tocIndex:2},{value:"源节点映射到左侧位置",paraId:5,tocIndex:2},{value:"目标节点映射到右侧位置",paraId:5,tocIndex:2},{value:"流量值映射到连接线的宽度",paraId:5,tocIndex:2},{value:"适合的场景",paraId:5,tocIndex:2},{value:"展示能源流动、资金流向、用户路径等流程分析",paraId:5,tocIndex:2},{value:"例子 1: ",paraId:6,tocIndex:4},{value:"适合展示能源流动分析",paraId:6,tocIndex:4},{value:"下图是一个能源流动的桑基图，展示了从原始能源到最终消费的完整流程。",paraId:7,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'sankey',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/energy.json',\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => ({ links: data }),\n      },\n    ],\n  },\n  layout: {\n    nodeAlign: 'center',\n    nodePadding: 0.03,\n  },\n  style: {\n    labelSpacing: 3,\n    labelFontWeight: 'bold',\n    nodeStrokeWidth: 1.2,\n    linkFillOpacity: 0.4,\n  },\n});\n\nchart.render();\n",paraId:8,tocIndex:4},{value:"说明",paraId:9,tocIndex:4},{value:"：",paraId:9,tocIndex:4},{value:"source",paraId:10,tocIndex:4},{value:" 字段映射到起始节点，表示能源的来源",paraId:10,tocIndex:4},{value:"target",paraId:10,tocIndex:4},{value:" 字段映射到目标节点，表示能源的去向",paraId:10,tocIndex:4},{value:"value",paraId:10,tocIndex:4},{value:" 字段映射到连接线的宽度，表示流量的大小",paraId:10,tocIndex:4},{value:"通过颜色编码区分不同类型的能源流动",paraId:10,tocIndex:4},{value:"例子 2: ",paraId:11,tocIndex:4},{value:"适合展示用户路径分析",paraId:11,tocIndex:4},{value:"桑基图可以有效展示用户在网站或应用中的行为路径，帮助分析用户流失点和转化漏斗。",paraId:12,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst data = {\n  links: [\n    { source: '首页', target: '产品页', value: 1000 },\n    { source: '首页', target: '关于我们', value: 300 },\n    { source: '首页', target: '联系我们', value: 200 },\n    { source: '产品页', target: '购物车', value: 600 },\n    { source: '产品页', target: '产品详情', value: 400 },\n    { source: '购物车', target: '结算页', value: 450 },\n    { source: '购物车', target: '继续购物', value: 150 },\n    { source: '结算页', target: '支付成功', value: 380 },\n    { source: '结算页', target: '放弃支付', value: 70 },\n    { source: '产品详情', target: '购物车', value: 200 },\n    { source: '产品详情', target: '返回', value: 200 },\n  ],\n};\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'sankey',\n  autoFit: true,\n  data: { value: data },\n  layout: {\n    nodeAlign: 'justify',\n    nodePadding: 0.05,\n  },\n  style: {\n    labelSpacing: 5,\n    labelFontSize: 12,\n    nodeStrokeWidth: 2,\n    linkFillOpacity: 0.6,\n  },\n  scale: {\n    color: {\n      range: ['#1890ff', '#52c41a', '#faad14', '#f5222d', '#722ed1'],\n    },\n  },\n});\n\nchart.render();\n",paraId:13,tocIndex:4},{value:"说明",paraId:14,tocIndex:4},{value:"：",paraId:14,tocIndex:4},{value:"展示了用户从首页到最终转化的完整路径",paraId:15,tocIndex:4},{value:"连接线的宽度表示用户流量的大小",paraId:15,tocIndex:4},{value:"可以清晰识别用户流失的关键节点",paraId:15,tocIndex:4},{value:"例子 3: ",paraId:16,tocIndex:4},{value:"适合展示资金流向分析",paraId:16,tocIndex:4},{value:"桑基图特别适合展示预算分配、成本分析等财务数据的流向关系。",paraId:17,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst budgetData = {\n  links: [\n    { source: '总预算', target: '研发部门', value: 5000000 },\n    { source: '总预算', target: '市场部门', value: 3000000 },\n    { source: '总预算', target: '运营部门', value: 2000000 },\n    { source: '研发部门', target: '产品开发', value: 3000000 },\n    { source: '研发部门', target: '技术研究', value: 2000000 },\n    { source: '市场部门', target: '广告投放', value: 2000000 },\n    { source: '市场部门', target: '品牌建设', value: 1000000 },\n    { source: '运营部门', target: '人力成本', value: 1200000 },\n    { source: '运营部门', target: '办公成本', value: 800000 },\n    { source: '产品开发', target: '移动端', value: 1800000 },\n    { source: '产品开发', target: '网页端', value: 1200000 },\n    { source: '广告投放', target: '线上广告', value: 1500000 },\n    { source: '广告投放', target: '线下推广', value: 500000 },\n  ],\n};\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'sankey',\n  autoFit: true,\n  data: { value: budgetData },\n  layout: {\n    nodeAlign: 'center',\n    nodePadding: 0.08,\n  },\n  style: {\n    labelSpacing: 8,\n    labelFontSize: 11,\n    nodeStrokeWidth: 1.5,\n    linkFillOpacity: 0.5,\n  },\n  scale: {\n    color: {\n      range: ['#096dd9', '#36cfc9', '#52c41a', '#faad14', '#ff7a45'],\n    },\n  },\n});\n\nchart.render();\n",paraId:18,tocIndex:4},{value:"说明",paraId:19,tocIndex:4},{value:"：",paraId:19,tocIndex:4},{value:"清晰展示了预算从总体到具体项目的分配路径",paraId:20,tocIndex:4},{value:"通过流量宽度直观表示资金分配的比例",paraId:20,tocIndex:4},{value:"颜色编码帮助区分不同层级的预算项目",paraId:20,tocIndex:4},{value:"例子 1: ",paraId:21,tocIndex:5},{value:"不适合展示简单的分类对比",paraId:21,tocIndex:5},{value:"当数据主要用于比较不同类别的数值大小，而非展示流向关系时，桑基图不是最佳选择。这种情况下，柱状图或饼图会更加直观。",paraId:22,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\n// 示例：销售额对比数据（不适合用桑基图）\nconst salesData = [\n  { category: '手机', value: 25000 },\n  { category: '电脑', value: 18000 },\n  { category: '平板', value: 12000 },\n  { category: '耳机', value: 8000 },\n  { category: '配件', value: 5000 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: { value: salesData },\n  encode: {\n    x: 'category',\n    y: 'value',\n    color: 'category',\n  },\n  axis: {\n    y: { title: '销售额（元）' },\n    x: { title: '产品类别' },\n  },\n  style: {\n    fill: '#1890ff',\n  },\n});\n\nchart.render();\n",paraId:23,tocIndex:5},{value:"说明",paraId:24,tocIndex:5},{value:"：此类数据更适合使用柱状图展示，因为重点是比较各类别的数值大小，而非展示数据间的流向关系。桑基图在这种场景下会增加不必要的复杂性。",paraId:24,tocIndex:5},{value:"例子 2: ",paraId:25,tocIndex:5},{value:"不适合展示过于复杂的网络关系",paraId:25,tocIndex:5},{value:"当节点数量过多（超过 30 个）或流向关系过于复杂时，桑基图可能会变得难以阅读。这种情况下，可以考虑使用网络图或层次图。",paraId:26,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\n// 示例：复杂的组织架构关系（不适合用桑基图）\nconst complexData = {\n  links: [\n    { source: 'CEO', target: '研发VP', value: 1 },\n    { source: 'CEO', target: '销售VP', value: 1 },\n    { source: 'CEO', target: '市场VP', value: 1 },\n    { source: 'CEO', target: '运营VP', value: 1 },\n    { source: '研发VP', target: '前端团队', value: 1 },\n    { source: '研发VP', target: '后端团队', value: 1 },\n    { source: '研发VP', target: 'QA团队', value: 1 },\n    { source: '研发VP', target: 'DevOps团队', value: 1 },\n    { source: '销售VP', target: '直销团队', value: 1 },\n    { source: '销售VP', target: '渠道团队', value: 1 },\n    { source: '销售VP', target: '商务团队', value: 1 },\n    { source: '销售VP', target: '客服团队', value: 1 },\n    { source: '市场VP', target: '品牌团队', value: 1 },\n    { source: '市场VP', target: '活动团队', value: 1 },\n    { source: '市场VP', target: '内容团队', value: 1 },\n    { source: '运营VP', target: '数据团队', value: 1 },\n    { source: '运营VP', target: '产品团队', value: 1 },\n    { source: '运营VP', target: '用户团队', value: 1 },\n  ],\n};\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'sankey',\n  autoFit: true,\n  data: { value: complexData },\n  layout: {\n    nodeAlign: 'justify',\n    nodePadding: 0.02,\n  },\n  style: {\n    labelSpacing: 2,\n    labelFontSize: 10,\n    nodeStrokeWidth: 1,\n    linkFillOpacity: 0.3,\n  },\n});\n\nchart.render();\n",paraId:27,tocIndex:5},{value:"说明",paraId:28,tocIndex:5},{value:'：此类层次结构数据使用桑基图会显得过于拥挤且难以阅读。更适合使用组织架构图、树形图或网络图来展示这种层次关系。桑基图的优势在于展示有意义的"流量"关系，而非仅仅是组织结构。',paraId:28,tocIndex:5},{value:"可以通过不同的节点对齐方式来优化桑基图的布局效果。",paraId:29,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'sankey',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/energy.json',\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => ({ links: data.slice(0, 20) }), // 使用部分数据以便展示\n      },\n    ],\n  },\n  layout: {\n    nodeAlign: 'left', // 可选值：'left', 'right', 'center', 'justify'\n    nodePadding: 0.05,\n    nodeWidth: 0.02,\n  },\n  style: {\n    labelSpacing: 5,\n    labelFontWeight: 'bold',\n    nodeStrokeWidth: 2,\n    linkFillOpacity: 0.3,\n  },\n});\n\nchart.render();\n",paraId:30,tocIndex:7},{value:"说明",paraId:31,tocIndex:7},{value:"：",paraId:31,tocIndex:7},{value:"nodeAlign: 'left'",paraId:32,tocIndex:7},{value:" 将所有节点左对齐",paraId:32,tocIndex:7},{value:"nodePadding",paraId:32,tocIndex:7},{value:" 控制节点之间的间距",paraId:32,tocIndex:7},{value:"nodeWidth",paraId:32,tocIndex:7},{value:" 控制节点的宽度",paraId:32,tocIndex:7},{value:"可以根据节点类型或流量方向自定义颜色映射。",paraId:33,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'sankey',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/energy.json',\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => ({ links: data }),\n      },\n    ],\n  },\n  layout: {\n    nodeAlign: 'justify',\n    nodePadding: 0.03,\n  },\n  encode: {\n    color: (d, idx) => {\n      // 根据节点名称的首字母分配颜色\n      const firstChar = d.key?.charAt(0).toLowerCase() || '';\n      if (firstChar <= 'f') return '#1890ff';\n      if (firstChar <= 'n') return '#52c41a';\n      if (firstChar <= 's') return '#faad14';\n      return '#f5222d';\n    },\n  },\n  style: {\n    labelSpacing: 3,\n    labelFontWeight: 'bold',\n    nodeStrokeWidth: 1,\n    linkFillOpacity: 0.6,\n  },\n});\n\nchart.render();\n",paraId:34,tocIndex:8},{value:"说明",paraId:35,tocIndex:8},{value:"：",paraId:35,tocIndex:8},{value:"通过 ",paraId:36,tocIndex:8},{value:"encode.color",paraId:36,tocIndex:8},{value:" 自定义颜色映射函数",paraId:36,tocIndex:8},{value:"可以根据节点属性、流量大小等因素动态分配颜色",paraId:36,tocIndex:8},{value:"漏斗图",paraId:37,tocIndex:9},{value:"桑基图展示复杂的多对多流向关系，可以有多个源节点和目标节点",paraId:38,tocIndex:10},{value:"漏斗图主要展示单一路径的转化流程，通常用于分析业务转化率",paraId:38,tocIndex:10},{value:"桑基图的连接线宽度表示流量大小，漏斗图的层级宽度表示转化数量",paraId:38,tocIndex:10},{value:"桑基图适合复杂流程分析，漏斗图适合线性转化分析",paraId:38,tocIndex:10},{value:"和弦图",paraId:39,tocIndex:10},{value:"桑基图是有向的流动关系，强调流向性",paraId:40,tocIndex:11},{value:"和弦图主要展示无向的关联关系，强调相互关系的强度",paraId:40,tocIndex:11},{value:"桑基图适合流程分析，和弦图适合关系网络分析",paraId:40,tocIndex:11}]},5995:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(49093);const t=[{value:"散点图是一种通过二维坐标平面上的点来展示两个连续变量之间关系的可视化图表。每个数据点的位置由两个变量的值决定，其中一个变量确定水平位置（x 轴），另一个变量确定垂直位置（y 轴）。",paraId:0,tocIndex:0},{value:"散点图有别于",paraId:1,tocIndex:0},{value:"折线图",paraId:2,tocIndex:0},{value:"，散点图主要用于探索和展示变量间的相关性、分布模式以及异常值的识别，而折线图更适合展示连续数据的趋势变化。",paraId:1,tocIndex:0},{value:"通过观察散点图上数据点的分布情况，我们可以推断出变量间的相关性。如果变量之间不存在相互关系，那么在散点图上就会表现为随机分布的离散的点，如果存在某种相关性，那么大部分数据点就会相对密集并以某种趋势呈现。数据的相关关系主要分为：正相关（两个变量值同时增长）、负相关（一个变量值增加另一个变量值下降）、不相关、线性相关、指数相关等。",paraId:3,tocIndex:0},{value:"英文名",paraId:4,tocIndex:0},{value:"：Scatter plot, Scatter chart",paraId:4,tocIndex:0},{value:"图表类型",paraId:5,tocIndex:1},{value:"散点图",paraId:5,tocIndex:1},{value:"适合的数据",paraId:5,tocIndex:1},{value:"列表：两个连续数据字段",paraId:5,tocIndex:1},{value:"功能",paraId:5,tocIndex:1},{value:"探索两个变量之间的相关性，识别数据模式和异常值",paraId:5,tocIndex:1},{value:"数据与图形的映射",paraId:5,tocIndex:1},{value:"第一个连续数据字段映射到横轴位置",paraId:5,tocIndex:1},{value:"第二个连续数据字段映射到纵轴位置",paraId:5,tocIndex:1},{value:"可选分类字段映射到点的颜色或大小",paraId:5,tocIndex:1},{value:"适合的数据条数",paraId:5,tocIndex:1},{value:"10-1000 条数据，数据过多时可考虑采样或使用密度图",paraId:5,tocIndex:1},{value:"组成元素：",paraId:6,tocIndex:1},{value:"数据点（Points）",paraId:7,tocIndex:1},{value:"：代表数据集中每个观测值的圆点或其他形状",paraId:7,tocIndex:1},{value:"X 轴（X-axis）",paraId:7,tocIndex:1},{value:"：水平坐标轴，通常表示自变量",paraId:7,tocIndex:1},{value:"Y 轴（Y-axis）",paraId:7,tocIndex:1},{value:"：垂直坐标轴，通常表示因变量",paraId:7,tocIndex:1},{value:"坐标网格（Grid）",paraId:7,tocIndex:1},{value:"：辅助读数的参考线",paraId:7,tocIndex:1},{value:"图例（Legend）",paraId:7,tocIndex:1},{value:"：当有多个数据系列时，说明不同点的含义",paraId:7,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { height: 161, weight: 50 },\n    { height: 167, weight: 55 },\n    { height: 171, weight: 63 },\n    { height: 174, weight: 58 },\n    { height: 176, weight: 65 },\n    { height: 178, weight: 70 },\n    { height: 180, weight: 72 },\n    { height: 182, weight: 75 },\n    { height: 185, weight: 78 },\n    { height: 188, weight: 82 },\n  ],\n  encode: { x: 'height', y: 'weight' },\n  scale: { x: { range: [0, 1] }, y: { domainMin: 0, nice: true } },\n  children: [\n    {\n      type: 'point',\n      style: {\n        fill: '#1890ff',\n        fillOpacity: 0.7,\n        stroke: '#1890ff',\n        strokeWidth: 2,\n        r: 6,\n      },\n    },\n  ],\n  axis: {\n    x: { title: '身高 (cm)' },\n    y: { title: '体重 (kg)' },\n  },\n});\n\nchart.render();\n",paraId:8,tocIndex:1},{value:"散点图特别适合展示数据分布和变量间的相关性。以下通过四个渐进的例子来展示散点图的不同应用：",paraId:9,tocIndex:3},{value:"最基础的散点图用于展示两个连续变量的分布关系：",paraId:10,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value:\n      'https://assets.antv.antgroup.com/g2/top-30-countries-by-quality-of-life.json',\n  },\n  encode: { x: 'x', y: 'y' },\n  scale: { x: { domain: [137.5, 212] }, y: { domain: [0, 80] } },\n  labels: [{ text: 'name', fontSize: 10, dy: 6 }],\n  style: { mainStroke: '#5B8FF9', mainLineWidth: 2 },\n});\n\nchart.render();\n",paraId:11,tocIndex:4},{value:"通过添加数据标注，例如线标注、区间标注来帮助用户更好地理解数据：",paraId:12,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'view',\n  data: {\n    type: 'fetch',\n    value:\n      'https://assets.antv.antgroup.com/g2/top-30-countries-by-quality-of-life.json',\n  },\n  style: { mainStroke: '#5B8FF9', mainLineWidth: 2 },\n  axis: { x: false, y: false },\n  children: [\n    {\n      type: 'range',\n      data: [\n        { x: [0, 0.5], y: [0, 0.5] },\n        { x: [0.5, 1], y: [0.5, 1] },\n      ],\n      encode: { x: 'x', y: 'y' },\n      scale: {\n        x: { independent: true, domain: [0, 1] },\n        y: { independent: true, domain: [0, 1] },\n      },\n      style: { stroke: '#5B8FF9', lineWidth: 1, fillOpacity: 0.15 },\n      animate: false,\n      tooltip: false,\n    },\n    {\n      type: 'point',\n      encode: { x: 'x', y: 'y', shape: 'point' },\n      scale: { x: { domain: [137.5, 212] }, y: { domain: [0, 80] } },\n      labels: [{ text: 'name', fontSize: 10, dy: 6 }],\n    },\n  ],\n});\n\nchart.render();\n",paraId:13,tocIndex:5},{value:"通过颜色通道来区分不同类别的数据：",paraId:14,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  },\n  encode: { x: 'height', y: 'weight', color: 'gender' },\n});\n\nchart.render();\n",paraId:15,tocIndex:6},{value:"还可以通过自定义数据转换函数来对数据进行预处理，添加回归线来显示变量间的趋势关系：",paraId:16,tocIndex:7},{value:"import { Chart } from '@antv/g2';\nimport { regressionLinear } from 'd3-regression';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/linear-regression.json',\n  },\n  children: [\n    {\n      type: 'point',\n      encode: { x: (d) => d[0], y: (d) => d[1], shape: 'point' },\n      scale: { x: { domain: [0, 1] }, y: { domain: [0, 5] } },\n      style: { fillOpacity: 0.75 },\n    },\n    {\n      type: 'line',\n      data: {\n        transform: [\n          {\n            type: 'custom',\n            callback: regressionLinear(),\n          },\n        ],\n      },\n      encode: { x: (d) => d[0], y: (d) => d[1] },\n      style: { stroke: '#30BF78', lineWidth: 2 },\n      labels: [\n        {\n          text: 'y = 1.7x+3.01',\n          selector: 'last',\n          position: 'right',\n          textAlign: 'end',\n          dy: -8,\n        },\n      ],\n      tooltip: false,\n    },\n  ],\n});\n\nchart.render();\n",paraId:17,tocIndex:7},{value:"当数据在某些位置高度重叠时，普通散点图无法清晰展示数据的真实分布。例如下图展示了一个存在严重重叠问题的散点图：",paraId:18,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  },\n  encode: {\n    y: 'Horsepower',\n    x: 'Cylinders',\n    shape: 'hollow',\n    color: 'Cylinders',\n  },\n  transform: [{ type: 'sortX', channel: 'x' }],\n  scale: { x: { type: 'point' }, color: { type: 'ordinal' } },\n});\n\nchart.render();\n",paraId:19,tocIndex:9},{value:"解决方案：使用抖动变换（Jitter）",paraId:20,tocIndex:9},{value:"通过添加随机偏移来避免重叠，使数据分布更加清晰：",paraId:21,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  },\n  encode: {\n    y: 'Horsepower',\n    x: 'Cylinders',\n    shape: 'hollow',\n    color: 'Cylinders',\n  },\n  transform: [{ type: 'sortX', channel: 'x' }, { type: 'jitterX' }],\n  scale: { x: { type: 'point' }, color: { type: 'ordinal' } },\n});\n\nchart.render();\n",paraId:22,tocIndex:9},{value:"例子 2: ",paraId:23,tocIndex:9},{value:"不适合展示分类数据的对比",paraId:23,tocIndex:9},{value:"散点图不适合用于展示分类数据的数值对比，如下图试图用散点图展示不同产品的销量：",paraId:24,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { product: '产品A', sales: 275 },\n    { product: '产品B', sales: 115 },\n    { product: '产品C', sales: 120 },\n    { product: '产品D', sales: 350 },\n    { product: '产品E', sales: 150 },\n  ],\n  encode: { x: 'product', y: 'sales' },\n  scale: { x: { range: [0, 1] }, y: { domainMin: 0, nice: true } },\n  children: [\n    {\n      type: 'point',\n      style: {\n        fill: '#1890ff',\n        fillOpacity: 0.8,\n        stroke: '#1890ff',\n        strokeWidth: 2,\n        r: 8,\n      },\n    },\n  ],\n  axis: {\n    x: { title: '产品类型' },\n    y: { title: '销量' },\n  },\n  title: '不适合的用法：用散点图展示分类数据',\n});\n\nchart.render();\n",paraId:25,tocIndex:9},{value:"对于分类数据的对比，更适合使用",paraId:26,tocIndex:9},{value:"柱状图",paraId:27,tocIndex:9},{value:"：",paraId:26,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { product: '产品A', sales: 275 },\n    { product: '产品B', sales: 115 },\n    { product: '产品C', sales: 120 },\n    { product: '产品D', sales: 350 },\n    { product: '产品E', sales: 150 },\n  ],\n  encode: { x: 'product', y: 'sales', color: 'product' },\n  axis: {\n    x: { title: '产品类型' },\n    y: { title: '销量' },\n  },\n  title: '更适合的选择：用柱状图展示分类数据',\n});\n\nchart.render();\n",paraId:28,tocIndex:9},{value:"添加回归线来更清晰地展示数据趋势：",paraId:29,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nconst data = [\n  { x: 1, y: 2.1 },\n  { x: 2, y: 3.8 },\n  { x: 3, y: 5.2 },\n  { x: 4, y: 6.9 },\n  { x: 5, y: 8.1 },\n  { x: 6, y: 9.8 },\n  { x: 7, y: 11.2 },\n  { x: 8, y: 13.1 },\n  { x: 9, y: 14.8 },\n  { x: 10, y: 16.5 },\n];\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data,\n  encode: { x: 'x', y: 'y' },\n  scale: { x: { range: [0, 1] }, y: { domainMin: 0, nice: true } },\n  children: [\n    {\n      type: 'point',\n      style: {\n        fill: '#1890ff',\n        fillOpacity: 0.8,\n        stroke: '#1890ff',\n        strokeWidth: 2,\n        r: 6,\n      },\n    },\n    {\n      type: 'line',\n      style: {\n        stroke: '#ff4d4f',\n        strokeWidth: 2,\n        strokeDasharray: [4, 4],\n      },\n    },\n  ],\n  axis: {\n    x: { title: 'X 变量' },\n    y: { title: 'Y 变量' },\n  },\n  title: '带趋势线的散点图',\n});\n\nchart.render();\n",paraId:30,tocIndex:11},{value:"为重要数据点添加文本标签，提升数据可读性：",paraId:31,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nconst data = [\n  { product: '产品A', satisfaction: 8.5, sales: 120, category: '科技' },\n  { product: '产品B', satisfaction: 7.2, sales: 85, category: '家居' },\n  { product: '产品C', satisfaction: 9.1, sales: 200, category: '科技' },\n  { product: '产品D', satisfaction: 6.8, sales: 95, category: '服装' },\n  { product: '产品E', satisfaction: 8.9, sales: 160, category: '科技' },\n  { product: '产品F', satisfaction: 7.5, sales: 110, category: '家居' },\n  { product: '产品G', satisfaction: 6.2, sales: 70, category: '服装' },\n  { product: '产品H', satisfaction: 8.7, sales: 185, category: '科技' },\n];\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data,\n  encode: { x: 'satisfaction', y: 'sales', color: 'category' },\n  children: [\n    {\n      type: 'point',\n      style: {\n        r: 8,\n        fillOpacity: 0.8,\n        strokeWidth: 2,\n      },\n    },\n    {\n      type: 'text',\n      encode: { text: 'product' },\n      style: {\n        fontSize: 10,\n        textAlign: 'center',\n        dy: -12,\n        fontWeight: 'bold',\n      },\n    },\n  ],\n  axis: {\n    x: { title: '客户满意度' },\n    y: { title: '销量 (万件)' },\n  },\n  legend: { color: { position: 'top' } },\n  title: '产品满意度 vs 销量分析',\n});\n\nchart.render();\n",paraId:32,tocIndex:12},{value:"使用 facet 来创建分面散点图，便于不同组间的对比分析：",paraId:33,tocIndex:13},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nconst data = [\n  // 2020年数据\n  { year: 2020, quarter: 'Q1', revenue: 120, profit: 15, company: '公司A' },\n  { year: 2020, quarter: 'Q2', revenue: 135, profit: 18, company: '公司A' },\n  { year: 2020, quarter: 'Q3', revenue: 145, profit: 22, company: '公司A' },\n  { year: 2020, quarter: 'Q4', revenue: 160, profit: 25, company: '公司A' },\n  { year: 2020, quarter: 'Q1', revenue: 95, profit: 12, company: '公司B' },\n  { year: 2020, quarter: 'Q2', revenue: 110, profit: 14, company: '公司B' },\n  { year: 2020, quarter: 'Q3', revenue: 125, profit: 18, company: '公司B' },\n  { year: 2020, quarter: 'Q4', revenue: 140, profit: 21, company: '公司B' },\n  // 2021年数据\n  { year: 2021, quarter: 'Q1', revenue: 170, profit: 28, company: '公司A' },\n  { year: 2021, quarter: 'Q2', revenue: 185, profit: 32, company: '公司A' },\n  { year: 2021, quarter: 'Q3', revenue: 195, profit: 35, company: '公司A' },\n  { year: 2021, quarter: 'Q4', revenue: 210, profit: 38, company: '公司A' },\n  { year: 2021, quarter: 'Q1', revenue: 150, profit: 23, company: '公司B' },\n  { year: 2021, quarter: 'Q2', revenue: 165, profit: 26, company: '公司B' },\n  { year: 2021, quarter: 'Q3', revenue: 175, profit: 29, company: '公司B' },\n  { year: 2021, quarter: 'Q4', revenue: 190, profit: 32, company: '公司B' },\n];\n\nchart.options({\n  type: 'facetRect',\n  autoFit: true,\n  margin: 30,\n  data,\n  encode: { x: 'year' },\n  children: [\n    {\n      type: 'point',\n      encode: {\n        x: 'revenue',\n        y: 'profit',\n        color: 'company',\n        shape: 'quarter',\n      },\n      scale: {\n        shape: { range: ['circle', 'square', 'triangle', 'diamond'] },\n        x: { nice: true },\n        y: { nice: true },\n      },\n      style: {\n        r: 6,\n        fillOpacity: 0.8,\n        stroke: '#fff',\n        strokeWidth: 1,\n      },\n    },\n  ],\n  axis: {\n    x: { title: '营收 (万元)' },\n    y: { title: '利润 (万元)' },\n  },\n  legend: {\n    color: { position: 'top' },\n    shape: { position: 'right' },\n  },\n  title: '公司营收利润关系年度对比',\n});\n\nchart.render();\n",paraId:34,tocIndex:13},{value:"使用多个散点图组成矩阵，展示多变量间的相关性：",paraId:35,tocIndex:14},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\n// 生成相关性数据\nconst generateCorrelationData = () => {\n  const data = [];\n  const variables = ['销售额', '广告投入', '客户满意度'];\n\n  for (let i = 0; i < 50; i++) {\n    const sales = 100 + Math.random() * 200;\n    const advertising = sales * 0.1 + Math.random() * 20;\n    const satisfaction = 6 + (sales - 100) / 50 + Math.random() * 2;\n\n    data.push({\n      id: i,\n      销售额: sales,\n      广告投入: advertising,\n      客户满意度: Math.min(10, Math.max(1, satisfaction)),\n    });\n  }\n\n  return data;\n};\n\nconst rawData = generateCorrelationData();\n\n// 转换数据为矩阵格式\nconst matrixData = [];\nconst variables = ['销售额', '广告投入', '客户满意度'];\n\nvariables.forEach((xVar) => {\n  variables.forEach((yVar) => {\n    rawData.forEach((d) => {\n      matrixData.push({\n        xVar,\n        yVar,\n        x: d[xVar],\n        y: d[yVar],\n        id: d.id,\n      });\n    });\n  });\n});\n\nchart.options({\n  type: 'facetRect',\n  autoFit: true,\n  margin: 30,\n  data: matrixData,\n  encode: { x: 'xVar', y: 'yVar' },\n  children: [\n    {\n      type: 'point',\n      encode: { x: 'x', y: 'y' },\n      style: {\n        r: 3,\n        fillOpacity: 0.6,\n        fill: '#1890ff',\n        stroke: '#fff',\n        strokeWidth: 0.5,\n      },\n      scale: {\n        x: { nice: true },\n        y: { nice: true },\n      },\n    },\n  ],\n  axis: {\n    x: {\n      title: false,\n      labelFormatter: (d) => (typeof d === 'number' ? d.toFixed(0) : d),\n    },\n    y: {\n      title: false,\n      labelFormatter: (d) => (typeof d === 'number' ? d.toFixed(0) : d),\n    },\n  },\n  title: '多变量相关性矩阵散点图',\n});\n\nchart.render();\n",paraId:36,tocIndex:14},{value:"图表类型",paraId:37,tocIndex:15},{value:"适用场景",paraId:37,tocIndex:15},{value:"优势",paraId:37,tocIndex:15},{value:"劣势",paraId:37,tocIndex:15},{value:"散点图",paraId:37,tocIndex:15},{value:"探索两变量关系、异常值检测",paraId:37,tocIndex:15},{value:"直观展示相关性、易于识别模式",paraId:37,tocIndex:15},{value:"数据点过多时可能重叠",paraId:37,tocIndex:15},{value:"折线图",paraId:37,tocIndex:15},{value:"时间序列数据、趋势展示",paraId:37,tocIndex:15},{value:"清晰显示变化趋势",paraId:37,tocIndex:15},{value:"不适合展示变量间相关性",paraId:37,tocIndex:15},{value:"柱状图",paraId:37,tocIndex:15},{value:"分类数据比较",paraId:37,tocIndex:15},{value:"便于比较不同类别",paraId:37,tocIndex:15},{value:"无法展示连续变量关系",paraId:37,tocIndex:15},{value:"气泡图",paraId:37,tocIndex:15},{value:"三维数据展示",paraId:37,tocIndex:15},{value:"信息量更大",paraId:37,tocIndex:15},{value:"复杂度较高，解读难度增加",paraId:37,tocIndex:15}]},2019:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(67484);const t=[{value:"螺旋图，基于阿基米德螺旋坐标系，常用于绘制随时间变化的数据，从螺旋的中心开始向外绘制。",paraId:0,tocIndex:0},{value:"螺旋图有两大好处：",paraId:1,tocIndex:0},{value:"绘制大量数据",paraId:2,tocIndex:0},{value:"：螺旋图节省空间，可用于显示大时间段数据的变化趋势",paraId:2,tocIndex:0},{value:"绘制周期性数据",paraId:2,tocIndex:0},{value:"：螺旋图每一圈的刻度差相同，当每一圈的刻度差是数据周期的倍数时，能够直观的表达数据的周期性",paraId:2,tocIndex:0},{value:"螺旋图通过将线性时间轴转换为极坐标系下的螺旋形状，从中心点开始向外延伸，既保持了时间的连续性，又实现了空间的紧凑利用。这种表现形式在处理大量时间序列数据时具有独特的视觉优势，特别适合观察数据的",paraId:3,tocIndex:0},{value:"周期",paraId:3,tocIndex:0},{value:"和变化",paraId:3,tocIndex:0},{value:"趋势",paraId:3,tocIndex:0},{value:"。",paraId:3,tocIndex:0},{value:"英文名",paraId:4,tocIndex:0},{value:"：Spiral Chart",paraId:4,tocIndex:0},{value:"螺旋图主要由以下几个部分构成：\n",paraId:5,tocIndex:1},{value:"图表类型",paraId:6,tocIndex:1},{value:"螺旋图",paraId:6,tocIndex:1},{value:"适合的数据",paraId:6,tocIndex:1},{value:"一个时间数据字段，一个连续字段",paraId:6,tocIndex:1},{value:"功能",paraId:6,tocIndex:1},{value:"观察数据",paraId:6,tocIndex:1},{value:"周期",paraId:6,tocIndex:1},{value:"和变化",paraId:6,tocIndex:1},{value:"趋势",paraId:6,tocIndex:1},{value:"数据与图形的映射",paraId:6,tocIndex:1},{value:"时间数据字段映射到旋转角度θ轴，连续字段映射到线圈间距radius轴",paraId:6,tocIndex:1},{value:"适合的数据条数",paraId:6,tocIndex:1},{value:"100条以上",paraId:6,tocIndex:1},{value:"例子 1: ",paraId:7,tocIndex:3},{value:"展示大量数据的变化趋势",paraId:7,tocIndex:3},{value:"用大量数据来形成完整的螺旋形状",paraId:8,tocIndex:3},{value:'import { Chart } from "@antv/g2";\n\nconst chart = new Chart({ container: "container" });\n\nchart.options({\n  type: "interval",\n  autoFit: true,\n  height: 500,\n  data: {\n    value: [\n      { time: "2025.07.11", value: 35 },\n      { time: "2025.07.12", value: 30 },\n      { time: "2025.07.13", value: 55 },\n      { time: "2025.07.14", value: 86 },\n      { time: "2025.07.15", value: 100 },\n      { time: "2025.07.16", value: 60 },\n      { time: "2025.07.17", value: 79 },\n      { time: "2025.07.18", value: 15 },\n      { time: "2025.07.19", value: 10 },\n      { time: "2025.07.20", value: 10 },\n      { time: "2025.07.21", value: 10 },\n      { time: "2025.07.22", value: 55 },\n      { time: "2025.07.23", value: 25 },\n      { time: "2025.07.24", value: 35 },\n      { time: "2025.07.25", value: 35 },\n      { time: "2025.07.26", value: 20 },\n      { time: "2025.07.27", value: 40 },\n      { time: "2025.07.28", value: 20 },\n      { time: "2025.07.29", value: 45 },\n      { time: "2025.07.30", value: 45 },\n      { time: "2025.07.31", value: 10 },\n      { time: "2025.08.01", value: 30 },\n      { time: "2025.08.02", value: 45 },\n      { time: "2025.08.03", value: 40 },\n      { time: "2025.08.04", value: 40 },\n      { time: "2025.08.05", value: 20 },\n      { time: "2025.08.06", value: 40 },\n      { time: "2025.08.07", value: 20 },\n      { time: "2025.08.08", value: 50 },\n      { time: "2025.08.09", value: 15 },\n      { time: "2025.08.10", value: 35 },\n      { time: "2025.08.11", value: 40 },\n      { time: "2025.08.12", value: 30 },\n      { time: "2025.08.13", value: 35 },\n      { time: "2025.08.14", value: 30 },\n      { time: "2025.08.15", value: 76 },\n      { time: "2025.08.16", value: 108 },\n      { time: "2025.08.17", value: 44 },\n      { time: "2025.08.18", value: 55 },\n      { time: "2025.08.19", value: 30 },\n      { time: "2025.08.20", value: 35 },\n      { time: "2025.08.21", value: 40 },\n      { time: "2025.08.22", value: 30 },\n      { time: "2025.08.23", value: 15 },\n      { time: "2025.08.24", value: 55 },\n      { time: "2025.08.25", value: 55 },\n      { time: "2025.08.26", value: 30 },\n      { time: "2025.08.27", value: 55 },\n      { time: "2025.08.28", value: 10 },\n      { time: "2025.08.29", value: 35 },\n      { time: "2025.08.30", value: 10 },\n      { time: "2025.08.31", value: 25 },\n      { time: "2025.09.01", value: 25 },\n      { time: "2025.09.02", value: 25 },\n      { time: "2025.09.03", value: 25 },\n      { time: "2025.09.04", value: 25 },\n      { time: "2025.09.05", value: 50 },\n      { time: "2025.09.06", value: 20 },\n      { time: "2025.09.07", value: 35 },\n      { time: "2025.09.08", value: 35 },\n      { time: "2025.09.09", value: 20 },\n      { time: "2025.09.10", value: 30 },\n      { time: "2025.09.11", value: 30 },\n      { time: "2025.09.12", value: 10 },\n      { time: "2025.09.13", value: 25 },\n      { time: "2025.09.14", value: 51 },\n      { time: "2025.09.15", value: 108 },\n      { time: "2025.09.16", value: 116 },\n      { time: "2025.09.17", value: 65 },\n      { time: "2025.09.18", value: 10 },\n      { time: "2025.09.19", value: 20 },\n      { time: "2025.09.20", value: 40 },\n      { time: "2025.09.21", value: 20 },\n      { time: "2025.09.22", value: 45 },\n      { time: "2025.09.23", value: 10 },\n      { time: "2025.09.24", value: 35 },\n      { time: "2025.09.25", value: 20 },\n      { time: "2025.09.26", value: 30 },\n      { time: "2025.09.27", value: 55 },\n      { time: "2025.09.28", value: 30 },\n      { time: "2025.09.29", value: 20 },\n      { time: "2025.09.30", value: 40 },\n      { time: "2025.10.01", value: 50 },\n      { time: "2025.10.02", value: 55 },\n      { time: "2025.10.03", value: 15 },\n      { time: "2025.10.04", value: 25 },\n      { time: "2025.10.05", value: 30 },\n      { time: "2025.10.06", value: 15 },\n      { time: "2025.10.07", value: 10 },\n      { time: "2025.10.08", value: 35 },\n      { time: "2025.10.09", value: 30 },\n      { time: "2025.10.10", value: 10 },\n      { time: "2025.10.11", value: 45 },\n      { time: "2025.10.12", value: 35 },\n      { time: "2025.10.13", value: 30 },\n      { time: "2025.10.14", value: 25 },\n      { time: "2025.10.15", value: 51 },\n      { time: "2025.10.16", value: 100 },\n      { time: "2025.10.17", value: 108 },\n      { time: "2025.10.18", value: 37 },\n      { time: "2025.10.19", value: 10 },\n      { time: "2025.10.20", value: 45 },\n      { time: "2025.10.21", value: 15 },\n      { time: "2025.10.22", value: 10 },\n      { time: "2025.10.23", value: 25 },\n      { time: "2025.10.24", value: 55 },\n      { time: "2025.10.25", value: 10 },\n      { time: "2025.10.26", value: 10 },\n      { time: "2025.10.27", value: 20 },\n      { time: "2025.10.28", value: 20 },\n      { time: "2025.10.29", value: 20 },\n      { time: "2025.10.30", value: 10 },\n      { time: "2025.10.31", value: 15 },\n      { time: "2025.11.01", value: 55 },\n      { time: "2025.11.02", value: 15 },\n      { time: "2025.11.03", value: 55 },\n      { time: "2025.11.04", value: 15 },\n      { time: "2025.11.05", value: 50 },\n      { time: "2025.11.06", value: 20 },\n      { time: "2025.11.07", value: 30 },\n      { time: "2025.11.08", value: 10 },\n      { time: "2025.11.09", value: 25 },\n      { time: "2025.11.10", value: 15 },\n      { time: "2025.11.11", value: 25 },\n      { time: "2025.11.12", value: 50 },\n      { time: "2025.11.13", value: 35 },\n      { time: "2025.11.14", value: 35 },\n      { time: "2025.11.15", value: 72 },\n      { time: "2025.11.16", value: 124 },\n      { time: "2025.11.17", value: 116 },\n      { time: "2025.11.18", value: 37 },\n      { time: "2025.11.19", value: 10 },\n      { time: "2025.11.20", value: 15 },\n      { time: "2025.11.21", value: 55 },\n      { time: "2025.11.22", value: 30 },\n      { time: "2025.11.23", value: 30 },\n      { time: "2025.11.24", value: 20 },\n      { time: "2025.11.25", value: 50 },\n      { time: "2025.11.26", value: 45 },\n      { time: "2025.11.27", value: 50 },\n      { time: "2025.11.28", value: 25 },\n      { time: "2025.11.29", value: 20 },\n      { time: "2025.11.30", value: 50 },\n      { time: "2025.12.01", value: 15 },\n      { time: "2025.12.02", value: 20 },\n      { time: "2025.12.03", value: 15 },\n      { time: "2025.12.04", value: 30 },\n      { time: "2025.12.05", value: 40 },\n      { time: "2025.12.06", value: 40 },\n      { time: "2025.12.07", value: 45 },\n      { time: "2025.12.08", value: 50 },\n      { time: "2025.12.09", value: 25 },\n      { time: "2025.12.10", value: 15 },\n      { time: "2025.12.11", value: 35 },\n      { time: "2025.12.12", value: 35 },\n      { time: "2025.12.13", value: 50 },\n      { time: "2025.12.14", value: 25 },\n      { time: "2025.12.15", value: 30 },\n      { time: "2025.12.16", value: 93 },\n      { time: "2025.12.17", value: 92 },\n      { time: "2025.12.18", value: 132 },\n      { time: "2025.12.19", value: 51 },\n      { time: "2025.12.20", value: 30 },\n      { time: "2025.12.21", value: 35 },\n      { time: "2025.12.22", value: 25 },\n      { time: "2025.12.23", value: 20 },\n      { time: "2025.12.24", value: 45 },\n      { time: "2025.12.25", value: 40 },\n      { time: "2025.12.26", value: 15 },\n      { time: "2025.12.27", value: 40 },\n      { time: "2025.12.28", value: 40 },\n      { time: "2025.12.29", value: 15 },\n      { time: "2025.12.30", value: 55 },\n      { time: "2025.12.31", value: 45 },\n      { time: "2026.01.01", value: 25 },\n      { time: "2026.01.02", value: 45 },\n      { time: "2026.01.03", value: 45 },\n      { time: "2026.01.04", value: 50 },\n      { time: "2026.01.05", value: 45 },\n      { time: "2026.01.06", value: 30 },\n      { time: "2026.01.07", value: 30 },\n      { time: "2026.01.08", value: 55 },\n      { time: "2026.01.09", value: 55 },\n      { time: "2026.01.10", value: 10 },\n      { time: "2026.01.11", value: 20 },\n      { time: "2026.01.12", value: 10 },\n      { time: "2026.01.13", value: 15 },\n      { time: "2026.01.14", value: 50 },\n      { time: "2026.01.15", value: 10 },\n      { time: "2026.01.16", value: 86 },\n      { time: "2026.01.17", value: 68 },\n      { time: "2026.01.18", value: 116 },\n      { time: "2026.01.19", value: 58 },\n      { time: "2026.01.20", value: 10 },\n      { time: "2026.01.21", value: 15 },\n      { time: "2026.01.22", value: 55 },\n      { time: "2026.01.23", value: 15 },\n      { time: "2026.01.24", value: 50 },\n      { time: "2026.01.25", value: 50 },\n      { time: "2026.01.26", value: 55 },\n      { time: "2026.01.27", value: 50 },\n      { time: "2026.01.28", value: 55 },\n      { time: "2026.01.29", value: 50 },\n      { time: "2026.01.30", value: 45 },\n      { time: "2026.01.31", value: 15 },\n      { time: "2026.02.01", value: 15 },\n      { time: "2026.02.02", value: 25 },\n      { time: "2026.02.03", value: 25 },\n      { time: "2026.02.04", value: 40 },\n      { time: "2026.02.05", value: 45 },\n      { time: "2026.02.06", value: 15 },\n      { time: "2026.02.07", value: 45 },\n      { time: "2026.02.08", value: 20 },\n      { time: "2026.02.09", value: 25 },\n      { time: "2026.02.10", value: 55 },\n      { time: "2026.02.11", value: 50 },\n      { time: "2026.02.12", value: 50 },\n      { time: "2026.02.13", value: 55 },\n      { time: "2026.02.14", value: 40 },\n      { time: "2026.02.15", value: 10 },\n      { time: "2026.02.16", value: 58 },\n      { time: "2026.02.17", value: 92 },\n      { time: "2026.02.18", value: 84 },\n      { time: "2026.02.19", value: 44 },\n      { time: "2026.02.20", value: 55 },\n      { time: "2026.02.21", value: 45 },\n      { time: "2026.02.22", value: 40 },\n      { time: "2026.02.23", value: 20 },\n      { time: "2026.02.24", value: 50 },\n      { time: "2026.02.25", value: 10 },\n      { time: "2026.02.26", value: 10 },\n      { time: "2026.02.27", value: 50 },\n      { time: "2026.02.28", value: 15 },\n      { time: "2026.03.01", value: 40 },\n      { time: "2026.03.02", value: 45 },\n      { time: "2026.03.03", value: 45 },\n      { time: "2026.03.04", value: 30 },\n      { time: "2026.03.05", value: 30 },\n      { time: "2026.03.06", value: 50 },\n      { time: "2026.03.07", value: 25 },\n      { time: "2026.03.08", value: 10 },\n      { time: "2026.03.09", value: 40 },\n      { time: "2026.03.10", value: 10 },\n      { time: "2026.03.11", value: 15 },\n      { time: "2026.03.12", value: 30 },\n      { time: "2026.03.13", value: 25 },\n      { time: "2026.03.14", value: 20 },\n      { time: "2026.03.15", value: 50 },\n      { time: "2026.03.16", value: 25 },\n      { time: "2026.03.17", value: 50 },\n      { time: "2026.03.18", value: 20 },\n      { time: "2026.03.19", value: 30 },\n      { time: "2026.03.20", value: 60 },\n      { time: "2026.03.21", value: 68 },\n      { time: "2026.03.22", value: 72 },\n      { time: "2026.03.23", value: 20 },\n      { time: "2026.03.24", value: 20 },\n      { time: "2026.03.25", value: 50 },\n      { time: "2026.03.26", value: 15 },\n      { time: "2026.03.27", value: 25 },\n      { time: "2026.03.28", value: 25 },\n      { time: "2026.03.29", value: 35 },\n      { time: "2026.03.30", value: 45 },\n      { time: "2026.03.31", value: 45 },\n      { time: "2026.04.01", value: 10 },\n      { time: "2026.04.02", value: 45 },\n      { time: "2026.04.03", value: 15 },\n      { time: "2026.04.04", value: 10 },\n      { time: "2026.04.05", value: 45 },\n      { time: "2026.04.06", value: 20 },\n      { time: "2026.04.07", value: 50 },\n      { time: "2026.04.08", value: 30 },\n      { time: "2026.04.09", value: 20 },\n      { time: "2026.04.10", value: 50 },\n      { time: "2026.04.11", value: 35 },\n      { time: "2026.04.12", value: 35 },\n      { time: "2026.04.13", value: 40 },\n      { time: "2026.04.14", value: 25 },\n      { time: "2026.04.15", value: 15 },\n      { time: "2026.04.16", value: 15 },\n      { time: "2026.04.17", value: 55 },\n      { time: "2026.04.18", value: 45 },\n      { time: "2026.04.19", value: 65 },\n      { time: "2026.04.20", value: 76 },\n      { time: "2026.04.21", value: 68 },\n      { time: "2026.04.22", value: 72 },\n      { time: "2026.04.23", value: 45 },\n      { time: "2026.04.24", value: 10 },\n      { time: "2026.04.25", value: 40 },\n      { time: "2026.04.26", value: 25 },\n      { time: "2026.04.27", value: 15 },\n      { time: "2026.04.28", value: 35 },\n      { time: "2026.04.29", value: 30 },\n      { time: "2026.04.30", value: 10 },\n      { time: "2026.05.01", value: 25 },\n      { time: "2026.05.02", value: 40 },\n      { time: "2026.05.03", value: 35 },\n      { time: "2026.05.04", value: 55 },\n      { time: "2026.05.05", value: 35 },\n      { time: "2026.05.06", value: 10 },\n      { time: "2026.05.07", value: 35 },\n      { time: "2026.05.08", value: 30 },\n      { time: "2026.05.09", value: 55 },\n      { time: "2026.05.10", value: 30 },\n      { time: "2026.05.11", value: 20 },\n      { time: "2026.05.12", value: 35 },\n      { time: "2026.05.13", value: 55 },\n      { time: "2026.05.14", value: 45 },\n      { time: "2026.05.15", value: 45 },\n      { time: "2026.05.16", value: 35 },\n      { time: "2026.05.17", value: 55 },\n      { time: "2026.05.18", value: 25 },\n      { time: "2026.05.19", value: 40 },\n      { time: "2026.05.20", value: 93 },\n      { time: "2026.05.21", value: 92 },\n      { time: "2026.05.22", value: 108 },\n      { time: "2026.05.23", value: 93 },\n      { time: "2026.05.24", value: 55 },\n      { time: "2026.05.25", value: 20 },\n      { time: "2026.05.26", value: 40 },\n      { time: "2026.05.27", value: 20 },\n      { time: "2026.05.28", value: 45 },\n      { time: "2026.05.29", value: 50 },\n      { time: "2026.05.30", value: 45 },\n      { time: "2026.05.31", value: 45 },\n      { time: "2026.06.01", value: 40 },\n      { time: "2026.06.02", value: 20 },\n      { time: "2026.06.03", value: 35 },\n      { time: "2026.06.04", value: 35 },\n      { time: "2026.06.05", value: 15 },\n      { time: "2026.06.06", value: 10 },\n      { time: "2026.06.07", value: 55 },\n      { time: "2026.06.08", value: 40 },\n      { time: "2026.06.09", value: 25 },\n      { time: "2026.06.10", value: 20 },\n      { time: "2026.06.11", value: 40 },\n      { time: "2026.06.12", value: 20 },\n      { time: "2026.06.13", value: 25 },\n      { time: "2026.06.14", value: 25 },\n      { time: "2026.06.15", value: 55 },\n      { time: "2026.06.16", value: 35 },\n      { time: "2026.06.17", value: 35 },\n      { time: "2026.06.18", value: 25 },\n      { time: "2026.06.19", value: 25 },\n      { time: "2026.06.20", value: 65 },\n      { time: "2026.06.21", value: 68 },\n      { time: "2026.06.22", value: 68 },\n      { time: "2026.06.23", value: 30 },\n      { time: "2026.06.24", value: 30 },\n      { time: "2026.06.25", value: 10 },\n      { time: "2026.06.26", value: 15 },\n      { time: "2026.06.27", value: 15 },\n      { time: "2026.06.28", value: 40 },\n      { time: "2026.06.29", value: 55 },\n      { time: "2026.06.30", value: 10 },\n      { time: "2026.07.01", value: 15 },\n      { time: "2026.07.02", value: 30 },\n      { time: "2026.07.03", value: 45 },\n      { time: "2026.07.04", value: 35 },\n      { time: "2026.07.05", value: 45 },\n      { time: "2026.07.06", value: 20 },\n      { time: "2026.07.07", value: 30 },\n      { time: "2026.07.08", value: 30 },\n      { time: "2026.07.09", value: 40 },\n      { time: "2026.07.10", value: 45 },\n      { time: "2026.07.11", value: 55 },\n      { time: "2026.07.12", value: 55 },\n      { time: "2026.07.13", value: 55 },\n      { time: "2026.07.14", value: 50 },\n      { time: "2026.07.15", value: 10 },\n      { time: "2026.07.16", value: 55 },\n      { time: "2026.07.17", value: 15 },\n    ],\n  },\n  encode: { x: "time", y: "value", color: "value" },\n  scale: { color: { type: "linear", range: ["#ffffff", "#1890FF"] } },\n  coordinate: {\n    type: "helix",\n    startAngle: 1.5707963267948966,\n    endAngle: 39.269908169872416,\n  },\n  animate: { enter: { type: "fadeIn" } },\n  tooltip: { title: "time" },\n});\n\nchart.render();\n\n',paraId:9,tocIndex:3},{value:"螺旋图虽然有很多优势，但也存在一些局限性：",paraId:10,tocIndex:4},{value:"1. 数据量过少的场景",paraId:11,tocIndex:4},{value:"螺旋图需要足够的数据点（通常100条以上）来形成完整的螺旋形状，如果数据量太少，螺旋效果不明显，此时使用普通的折线图或散点图会更合适。",paraId:12,tocIndex:4},{value:'import { Chart } from "@antv/g2";\n\nconst chart = new Chart({ container: "container" });\n\nchart.options({\n  type: "interval",\n  autoFit: true,\n  height: 500,\n  data: {\n    value: [\n      { time: "2025.07.11", value: 15 },\n      { time: "2025.07.12", value: 50 },\n      { time: "2025.07.13", value: 50 },\n      { time: "2025.07.14", value: 86 },\n      { time: "2025.07.15", value: 60 },\n    ],\n  },\n  encode: { x: "time", y: "value", color: "value" },\n  scale: { color: { type: "linear", range: ["#ffffff", "#1890FF"] } },\n  coordinate: {\n    type: "helix",\n    startAngle: 1.5707963267948966,\n    endAngle: 39.269908169872416,\n  },\n  animate: { enter: { type: "fadeIn" } },\n  tooltip: { title: "time" },\n});\n\nchart.render();\n\n',paraId:13,tocIndex:4},{value:"更适合的折线图示例：",paraId:14,tocIndex:4},{value:"import { Chart } from \"@antv/g2\";\n\n// 同样的5天数据，使用折线图展示\nconst data = [];\nconst dates = ['2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04', '2023-01-05'];\nconst values = [45, 68, 52, 71, 59]; // 模拟5天的销售数据\n\ndates.forEach((date, index) => {\n  data.push({\n    time: date,\n    value: values[index]\n  });\n});\n\nconst chart = new Chart({ \n  container: \"container\",\n  autoFit: true,\n  height: 400,\n  padding: [50, 50, 50, 50]\n});\n\nchart.options({\n  type: 'line',\n  data,\n  encode: {\n    x: 'time',\n    y: 'value'\n  },\n  scale: {\n    time: {\n      type: 'time',\n      mask: 'yyyy.mm.dd'\n    }\n  },\n  style: {\n    stroke: '#1890ff',\n    strokeWidth: 3,\n    lineJoin: 'round'\n  },\n  point: {\n    style: {\n      fill: '#1890ff',\n      stroke: '#ffffff',\n      strokeWidth: 2,\n      r: 6\n    }\n  },\n  axis: {\n    x: { \n      title: '时间',\n      labelAutoRotate: false\n    },\n    y: { title: '销售额' }\n  },\n  title: '推荐方案：少量数据使用折线图更清晰（5天数据）'\n});\n\nchart.render();\n",paraId:15,tocIndex:4},{value:"2. 需要精确比较数值的场景",paraId:16,tocIndex:4},{value:"由于螺旋图的非线性特性，不便于精确比较具体数值或变化率。",paraId:17,tocIndex:4},{value:"import { Chart } from \"@antv/g2\";\n\n// 需要精确对比的数据示例\nconst data = [];\nconst categories = ['产品A', '产品B', '产品C', '产品D'];\ncategories.forEach((category, index) => {\n  for (let month = 1; month <= 12; month++) {\n    data.push({\n      time: `2023-${month.toString().padStart(2, '0')}`,\n      category: category,\n      sales: 80 + index * 5 + Math.random() * 10 // 接近的数值，需要精确比较\n    });\n  }\n});\n\nconst chart = new Chart({ \n  container: \"container\",\n  autoFit: true,\n  height: 400,\n  padding: [50, 50, 50, 50]\n});\n\nchart.options({\n  type: 'interval',\n  data,\n  coordinate: {\n    type: 'helix',\n    startAngle: 1 * Math.PI,\n    endAngle: 5 * Math.PI\n  },\n  encode: {\n    x: 'time',\n    y: 'sales',\n    color: 'category'\n  },\n  scale: {\n    color: { \n      palette: ['#1890ff', '#52c41a', '#fa8c16', '#f5222d']\n    },\n    time: {\n      type: 'time',\n      mask: 'yyyy.mm'\n    }\n  },\n  style: {\n    fillOpacity: 0.8\n  },\n\n});\n\nchart.render();\n",paraId:18,tocIndex:4},{value:"展示多个相关数据系列的螺旋对比：",paraId:19,tocIndex:6},{value:"import { Chart } from \"@antv/g2\";\n\n// 生成多层螺旋数据\nconst data = [];\nconst series = ['系列A', '系列B', '系列C'];\n\nseries.forEach((seriesName, seriesIndex) => {\n  for (let i = 0; i < 120; i++) {\n    const angle = (i / 120) * 4 * Math.PI;\n    const baseRadius = 30 + seriesIndex * 15; // 不同系列不同半径\n    const radius = baseRadius + i * 0.8;\n    \n    // 不同系列有不同的数据模式\n    let value;\n    if (seriesIndex === 0) {\n      value = 50 + 20 * Math.sin(angle);\n    } else if (seriesIndex === 1) {\n      value = 45 + 25 * Math.cos(angle * 0.5);\n    } else {\n      value = 55 + 15 * Math.sin(angle * 2);\n    }\n    \n    value += Math.random() * 10;\n    \n    data.push({\n      time: i,\n      angle: angle * 180 / Math.PI,\n      radius: radius,\n      value: value,\n      series: seriesName\n    });\n  }\n});\n\nconst chart = new Chart({ \n  container: \"container\",\n  autoFit: true,\n  height: 600,\n  padding: [50, 50, 50, 50]\n});\n\nchart.options({\n  type: 'line',\n  data,\n  coordinate: { type: 'polar' },\n  encode: {\n    x: 'angle',\n    y: 'radius',\n    color: 'series'\n  },\n  scale: {\n    color: { \n      palette: ['#1890ff', '#52c41a', '#fa8c16']\n    },\n    x: { type: 'linear' },\n    y: { type: 'linear' }\n  },\n  style: {\n    strokeWidth: 2,\n    strokeOpacity: 0.8\n  },\n  axis: {\n    x: { title: null },\n    y: { title: '螺旋进程' }\n  },\n  legend: {\n    color: { title: '数据系列' }\n  },\n  title: '多层螺旋对比图'\n});\n\nchart.render();\n",paraId:20,tocIndex:6},{value:"基因螺旋图是螺旋图在生物信息学领域的特殊应用，常用于展示基因表达数据随时间的变化模式。通过螺旋坐标系，可以清晰地观察基因在不同条件下（如野生型WT和敲除型KO）的表达差异：",paraId:21,tocIndex:7},{value:"import { Chart } from \"@antv/g2\";\n\n// 模拟基因表达数据\nconst data = [];\nconst groups = ['WT', 'KO']; // 野生型和敲除型\nconst hours = 72; // 72小时时间序列\nconst baseValues = {\n  WT: 2.0,   // 野生型基础表达水平\n  KO: 2.3,   // 敲除型基础表达水平\n};\n\nfor (let i = 0; i < hours; i++) {\n  const time = `${i}h`;\n  groups.forEach((group) => {\n    // 模拟基因表达的周期性变化和随机波动\n    const cyclicPattern = Math.sin(i / 10) * 0.3; // 周期性模式\n    const randomNoise = Math.random() * 0.4 - 0.2; // 随机噪声\n    const trendFactor = group === 'KO' ? 0.1 : 0; // 敲除型可能有轻微上升趋势\n    \n    data.push({\n      time,\n      group,\n      logFPKM: baseValues[group] + cyclicPattern + randomNoise + (i * trendFactor / 100)\n    });\n  });\n}\n\nconst chart = new Chart({ \n  container: \"container\",\n  autoFit: true,\n  height: 600,\n  padding: [50, 50, 50, 50]\n});\n\nchart.options({\n  type: 'interval',\n  data,\n  coordinate: {\n    type: 'helix',\n    startAngle: 0.2 * Math.PI,\n    endAngle: 6.5 * Math.PI,\n    innerRadius: 0.1,\n  },\n  encode: {\n    x: 'time',\n    y: 'group',\n    color: 'logFPKM'\n  },\n  scale: {\n    color: {\n      type: 'linear',\n      range: ['#fff', '#ec4839']\n    }\n  },\n  style: {\n    fillOpacity: 0.8\n  },\n  tooltip: {\n    title: 'time',\n    items: [\n      { field: 'group', name: '组别' },\n      {\n        field: 'logFPKM',\n        name: 'log(FPKM)',\n        valueFormatter: (value) => value.toFixed(2),\n      },\n    ],\n  },\n  animate: {\n    enter: { type: 'fadeIn', duration: 1000 }\n  },\n  axis: {\n    x: { title: '时间进程' },\n    y: { title: '基因组别' }\n  },\n  legend: {\n    color: { title: '基因表达水平 log(FPKM)' }\n  },\n  title: '基因表达螺旋图：WT vs KO (72小时)'\n});\n\nchart.render();\n",paraId:22,tocIndex:7},{value:"这种可视化方式特别适合：",paraId:23,tocIndex:7},{value:"时间序列基因表达数据",paraId:24,tocIndex:7},{value:"：展示基因在长时间序列中的表达变化",paraId:24,tocIndex:7},{value:"多组别比较",paraId:24,tocIndex:7},{value:"：同时比较不同基因型或处理条件下的表达差异",paraId:24,tocIndex:7},{value:"周期性模式识别",paraId:24,tocIndex:7},{value:"：识别基因表达的昼夜节律或其他周期性规律",paraId:24,tocIndex:7},{value:"表达热图展示",paraId:24,tocIndex:7},{value:"：通过颜色编码直观展示表达强度差异",paraId:24,tocIndex:7},{value:"折线图",paraId:25,tocIndex:8},{value:"螺旋图通过螺旋形式节省空间，适合展示长时间序列数据",paraId:26,tocIndex:9},{value:"折线图在直线坐标系中展示，更直观地显示数据变化趋势",paraId:26,tocIndex:9},{value:"螺旋图更能突出周期性模式，折线图更适合分析精确的时间趋势",paraId:26,tocIndex:9},{value:"热力图",paraId:27,tocIndex:9},{value:"螺旋图通过螺旋路径展示时间序列的连续性",paraId:28,tocIndex:10},{value:"热力图通过颜色矩阵展示数据密度和模式",paraId:28,tocIndex:10},{value:"螺旋图保持时间顺序，热力图更适合展示分类数据的分布",paraId:28,tocIndex:10}]},1577:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(20526);const t=[{value:"堆叠面积图和基本面积图一样，唯一的区别就是图上每一个数据集的起点不同，起点是基于前一个数据集的，用于显示每个数值所占大小随时间或类别变化的趋势线，展示的是部分与整体的关系。",paraId:0,tocIndex:0},{value:"堆叠面积图上的最大的面积代表了所有的数据量的总和，是一个整体。各个叠起来的面积表示各个数据量的大小，这些堆叠起来的面积图在表现大数据的总量分量的变化情况时格外有用，所以堆叠面积图不适用于表示带有负值的数据集。非常适用于对比多变量随时间变化的情况。",paraId:1,tocIndex:0},{value:"在堆叠面积图的基础之上，将各个面积的因变量的数据使用加和后的总量进行归一化就形成了百分比堆叠面积图。该图并不能反映总量的变化，但是可以清晰的反应每个数值所占百分比随时间或类别变化的趋势线，对于分析自变量是大数据、时变数据、有序数据时各个指标分量占比极为有用。",paraId:2,tocIndex:0},{value:"英文名",paraId:3,tocIndex:0},{value:"：Stacked Area Chart",paraId:3,tocIndex:0},{value:"图表类型",paraId:4,tocIndex:1},{value:"层叠面积图",paraId:4,tocIndex:1},{value:"适合的数据",paraId:4,tocIndex:1},{value:"一个分类字段数据，两个连续字段数据",paraId:4,tocIndex:1},{value:"功能",paraId:4,tocIndex:1},{value:"对比每个分组数据的变化",paraId:4,tocIndex:1},{value:"趋势",paraId:4,tocIndex:1},{value:"数据与图形的映射",paraId:4,tocIndex:1},{value:"两个连续字段分别映射到横轴和纵轴",paraId:4,tocIndex:1},{value:"另一个分类数据映射到图形的颜色",paraId:4,tocIndex:1},{value:"适合的数据条数",paraId:4,tocIndex:1},{value:"映射到颜色的分类不超过 12 个;每种分类的数据不少于两条",paraId:4,tocIndex:1},{value:"展示多个系列随时间或类别的",paraId:5,tocIndex:3},{value:"趋势和占比变化",paraId:5,tocIndex:3},{value:"。",paraId:5,tocIndex:3},{value:"需要突出",paraId:5,tocIndex:3},{value:"整体与部分的关系",paraId:5,tocIndex:3},{value:"。",paraId:5,tocIndex:3},{value:"比较不同系列的",paraId:5,tocIndex:3},{value:"累积变化",paraId:5,tocIndex:3},{value:"。",paraId:5,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', theme: 'classic' });\n\nchart.options({\n  type: 'area',\n  autoFit: true,\n  data: [\n    { country: 'Asia', year: '1750', value: 502 },\n    { country: 'Asia', year: '1800', value: 635 },\n    { country: 'Asia', year: '1850', value: 809 },\n    { country: 'Asia', year: '1900', value: 5268 },\n    { country: 'Asia', year: '1950', value: 4400 },\n    { country: 'Asia', year: '1999', value: 3634 },\n    { country: 'Asia', year: '2050', value: 947 },\n    { country: 'Africa', year: '1750', value: 106 },\n    { country: 'Africa', year: '1800', value: 107 },\n    { country: 'Africa', year: '1850', value: 111 },\n    { country: 'Africa', year: '1900', value: 1766 },\n    { country: 'Africa', year: '1950', value: 221 },\n    { country: 'Africa', year: '1999', value: 767 },\n    { country: 'Africa', year: '2050', value: 133 },\n    { country: 'Europe', year: '1750', value: 163 },\n    { country: 'Europe', year: '1800', value: 203 },\n    { country: 'Europe', year: '1850', value: 276 },\n    { country: 'Europe', year: '1900', value: 628 },\n    { country: 'Europe', year: '1950', value: 547 },\n    { country: 'Europe', year: '1999', value: 729 },\n    { country: 'Europe', year: '2050', value: 408 },\n    { country: 'Oceania', year: '1750', value: 200 },\n    { country: 'Oceania', year: '1800', value: 200 },\n    { country: 'Oceania', year: '1850', value: 200 },\n    { country: 'Oceania', year: '1900', value: 460 },\n    { country: 'Oceania', year: '1950', value: 230 },\n    { country: 'Oceania', year: '1999', value: 300 },\n    { country: 'Oceania', year: '2050', value: 300 },\n  ],\n  encode: { x: 'year', y: 'value', color: 'country' },\n  axis: { x: { title: false }, y: { title: false } },\n  transform: [\n    {\n      type: 'stackY',\n    },\n  ],\n});\n\nchart.render();\n",paraId:6,tocIndex:3},{value:"1. 分类数据的比较不要用堆叠面积图",paraId:7,tocIndex:4},{value:"堆叠面积图（不推荐）",paraId:8,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', theme: 'classic' });\n\nchart.options({\n  type: 'area',\n  autoFit: true,\n  data: [\n    { year: '2001', genre: 'Strategy', sold: 11500 },\n    { year: '2001', genre: 'Sports', sold: 27500 },\n    { year: '2001', genre: 'Action', sold: 6000 },\n    { year: '2001', genre: 'Shooter', sold: 3500 },\n    { year: '2001', genre: 'Other', sold: 1500 },\n\n    { year: '2002', genre: 'Strategy', sold: 10500 },\n    { year: '2002', genre: 'Sports', sold: 29500 },\n    { year: '2002', genre: 'Action', sold: 8000 },\n    { year: '2002', genre: 'Shooter', sold: 4500 },\n    { year: '2002', genre: 'Other', sold: 1800 },\n\n    { year: '2003', genre: 'Strategy', sold: 12500 },\n    { year: '2003', genre: 'Sports', sold: 30500 },\n    { year: '2003', genre: 'Action', sold: 4000 },\n    { year: '2003', genre: 'Shooter', sold: 6500 },\n    { year: '2003', genre: 'Other', sold: 2000 },\n\n    { year: '2004', genre: 'Strategy', sold: 14500 },\n    { year: '2004', genre: 'Sports', sold: 31500 },\n    { year: '2004', genre: 'Action', sold: 5000 },\n    { year: '2004', genre: 'Shooter', sold: 6800 },\n    { year: '2004', genre: 'Other', sold: 1800 },\n  ],\n  encode: { x: 'year', y: 'sold', color: 'genre' },\n  axis: { x: { title: false }, y: { title: false } },\n  transform: [\n    {\n      type: 'stackY',\n    },\n  ],\n});\n\nchart.render();\n",paraId:9,tocIndex:4},{value:"堆叠柱状图（推荐）",paraId:10,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', theme: 'classic' });\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { year: '2001', genre: 'Strategy', sold: 11500 },\n    { year: '2001', genre: 'Sports', sold: 27500 },\n    { year: '2001', genre: 'Action', sold: 6000 },\n    { year: '2001', genre: 'Shooter', sold: 3500 },\n    { year: '2001', genre: 'Other', sold: 1500 },\n\n    { year: '2002', genre: 'Strategy', sold: 10500 },\n    { year: '2002', genre: 'Sports', sold: 29500 },\n    { year: '2002', genre: 'Action', sold: 8000 },\n    { year: '2002', genre: 'Shooter', sold: 4500 },\n    { year: '2002', genre: 'Other', sold: 1800 },\n\n    { year: '2003', genre: 'Strategy', sold: 12500 },\n    { year: '2003', genre: 'Sports', sold: 30500 },\n    { year: '2003', genre: 'Action', sold: 4000 },\n    { year: '2003', genre: 'Shooter', sold: 6500 },\n    { year: '2003', genre: 'Other', sold: 2000 },\n\n    { year: '2004', genre: 'Strategy', sold: 14500 },\n    { year: '2004', genre: 'Sports', sold: 31500 },\n    { year: '2004', genre: 'Action', sold: 5000 },\n    { year: '2004', genre: 'Shooter', sold: 6800 },\n    { year: '2004', genre: 'Other', sold: 1800 },\n  ],\n  encode: { x: 'year', y: 'sold', color: 'genre' },\n  axis: { x: { title: false }, y: { title: false } },\n  transform: [\n    {\n      type: 'stackY',\n    },\n  ],\n});\n\nchart.render();\n",paraId:11,tocIndex:4},{value:"将每个时间点的总和归一化为 100%，突出各部分的占比变化。",paraId:12,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { country: 'Asia', year: '1750', value: 502 },\n    { country: 'Asia', year: '1800', value: 635 },\n    { country: 'Asia', year: '1850', value: 809 },\n    { country: 'Asia', year: '1900', value: 947 },\n    { country: 'Asia', year: '1950', value: 1402 },\n    { country: 'Asia', year: '1999', value: 3634 },\n    { country: 'Asia', year: '2050', value: 5268 },\n    { country: 'Africa', year: '1750', value: 106 },\n    { country: 'Africa', year: '1800', value: 107 },\n    { country: 'Africa', year: '1850', value: 111 },\n    { country: 'Africa', year: '1900', value: 133 },\n    { country: 'Africa', year: '1950', value: 221 },\n    { country: 'Africa', year: '1999', value: 767 },\n    { country: 'Africa', year: '2050', value: 1766 },\n    { country: 'Europe', year: '1750', value: 163 },\n    { country: 'Europe', year: '1800', value: 203 },\n    { country: 'Europe', year: '1850', value: 276 },\n    { country: 'Europe', year: '1900', value: 408 },\n    { country: 'Europe', year: '1950', value: 547 },\n    { country: 'Europe', year: '1999', value: 729 },\n    { country: 'Europe', year: '2050', value: 628 },\n  ],\n  encode: { x: 'year', y: 'value', color: 'country' },\n  transform: [{ type: 'stackY' }, { type: 'normalizeY' }],\n  axis: { x: { title: false }, y: { title: false, labelFormatter: '.0%' } },\n  children: [\n    {\n      type: 'area',\n      tooltip: { items: [{ channel: 'y0', valueFormatter: '.0%' }] },\n    },\n    { type: 'line', tooltip: false },\n  ],\n});\n\nchart.render();\n",paraId:13,tocIndex:6},{value:"通过设置渐变色填充，让堆叠面积图更加美观，突出数据的层次感。",paraId:14,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'area',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/stocks.json',\n    transform: [\n      {\n        type: 'filter',\n        callback: (d) => d.symbol === 'GOOG',\n      },\n    ],\n  },\n  encode: {\n    x: (d) => new Date(d.date),\n    y: 'price',\n  },\n  style: {\n    fill: 'linear-gradient(-90deg, white 0%, darkgreen 100%)',\n  },\n  axis: { x: { title: false }, y: { title: false } },\n});\n\nchart.render();\n",paraId:15,tocIndex:7},{value:"河流图是一种特殊的堆叠面积图，通过对称分布展示数据的流动变化，特别适合展示多个类别随时间的变化趋势。",paraId:16,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'area',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/unemployment-by-industry.json',\n  },\n  encode: {\n    x: (d) => new Date(d.date),\n    y: 'unemployed',\n    color: 'industry',\n  },\n  transform: [\n    { type: 'stackY' },\n    { type: 'symmetryY' }, // 对称分布\n  ],\n  axis: { x: { title: false }, y: { title: false } },\n});\n\nchart.render();\n",paraId:17,tocIndex:8},{value:"瀑布面积图展示不同类别数据的层叠效果，通过特殊的排序和平滑曲线展现数据的流动感。",paraId:18,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'area',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f38a8ad0-6e1f-4bb3-894c-7db50781fdec.json',\n  },\n  encode: {\n    x: (d) => new Date(d.year),\n    y: 'revenue',\n    series: 'format',\n    color: 'group',\n    shape: 'smooth', // 平滑曲线\n  },\n  transform: [\n    {\n      type: 'stackY',\n      orderBy: 'maxIndex',\n      reverse: true,\n    },\n  ],\n  axis: {\n    x: { title: false },\n    y: { title: false, labelFormatter: '~s' },\n  },\n  tooltip: { channel: 'y', valueFormatter: '.2f' },\n});\n\nchart.render();\n",paraId:19,tocIndex:9},{value:"面积图",paraId:20,tocIndex:10},{value:"面积图适合展示单一系列的趋势，堆叠面积图适合展示多个系列的累积趋势和占比。",paraId:21,tocIndex:11},{value:"堆叠柱状图",paraId:22,tocIndex:11},{value:"两者都能展示部分与整体的关系，堆叠面积图更适合趋势类数据，堆叠柱状图适合类别型数据。",paraId:23,tocIndex:12},{value:"折线图",paraId:24,tocIndex:12},{value:"折线图适合比较各系列的具体数值变化，堆叠面积图更突出累积和占比。",paraId:25,tocIndex:13}]},37352:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(88646);const t=[{value:"堆叠柱状图是柱状图的扩展，通过在单个柱子中堆叠多个数据系列来显示分类数据。每个柱子代表一个类别的总数，而柱子内的不同颜色段代表各个子类别的数值。堆叠柱状图不仅能够展示每个类别的总量，还能显示各个子类别对总量的贡献。",paraId:0,tocIndex:0},{value:"堆叠柱状图特别适合于比较多个类别的组成结构，以及观察各子类别在不同类别中的分布情况。通过颜色编码，用户可以轻松识别不同的子类别，并比较它们在各个主类别中的占比。",paraId:1,tocIndex:0},{value:"当需要同时展示总量和构成时，堆叠柱状图是一个很好的选择。可以进一步扩展为百分比堆叠柱状图来显示各部分的相对比例。",paraId:2,tocIndex:0},{value:"英文名",paraId:3,tocIndex:0},{value:"：Stacked Bar Chart, Stacked Column Chart",paraId:3,tocIndex:0},{value:"图表类型",paraId:4,tocIndex:2},{value:"垂直堆叠柱状图",paraId:4,tocIndex:2},{value:"适合的数据",paraId:4,tocIndex:2},{value:"多系列分类数据：一个分类数据字段、一个连续数据字段、一个系列分类字段",paraId:4,tocIndex:2},{value:"功能",paraId:4,tocIndex:2},{value:"对比不同类别的总量以及各子类别的构成",paraId:4,tocIndex:2},{value:"数据与图形的映射",paraId:4,tocIndex:2},{value:"分类字段映射到横轴位置",paraId:4,tocIndex:2},{value:"数值字段映射到柱子高度",paraId:4,tocIndex:2},{value:"系列字段映射到颜色，通过堆叠显示在同一柱子中",paraId:4,tocIndex:2},{value:"适合的数据条数",paraId:4,tocIndex:2},{value:"主类别不超过 12 条，子类别不超过 8 条",paraId:4,tocIndex:2},{value:"图表类型",paraId:5,tocIndex:3},{value:"水平堆叠柱状图",paraId:5,tocIndex:3},{value:"适合的数据",paraId:5,tocIndex:3},{value:"多系列分类数据：一个分类数据字段、一个连续数据字段、一个系列分类字段",paraId:5,tocIndex:3},{value:"功能",paraId:5,tocIndex:3},{value:"对比不同类别的总量以及各子类别的构成",paraId:5,tocIndex:3},{value:"数据与图形的映射",paraId:5,tocIndex:3},{value:"分类字段映射到纵轴位置",paraId:5,tocIndex:3},{value:"数值字段映射到柱子宽度",paraId:5,tocIndex:3},{value:"系列字段映射到颜色",paraId:5,tocIndex:3},{value:"适合的数据条数",paraId:5,tocIndex:3},{value:"主类别不超过 30 条，子类别不超过 8 条",paraId:5,tocIndex:3},{value:"例子 1: ",paraId:6,tocIndex:5},{value:"适合展示多城市降雨量的月度构成",paraId:6,tocIndex:5},{value:"下图展示了伦敦和柏林两个城市在不同月份的降雨量分布，能够清楚地看出每个月的总降雨量以及两个城市各自的贡献。",paraId:7,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { name: 'London', 月份: 'Jan.', 月均降雨量: 18.9 },\n    { name: 'London', 月份: 'Feb.', 月均降雨量: 28.8 },\n    { name: 'London', 月份: 'Mar.', 月均降雨量: 39.3 },\n    { name: 'London', 月份: 'Apr.', 月均降雨量: 81.4 },\n    { name: 'London', 月份: 'May', 月均降雨量: 47 },\n    { name: 'London', 月份: 'Jun.', 月均降雨量: 20.3 },\n    { name: 'London', 月份: 'Jul.', 月均降雨量: 24 },\n    { name: 'London', 月份: 'Aug.', 月均降雨量: 35.6 },\n    { name: 'Berlin', 月份: 'Jan.', 月均降雨量: 12.4 },\n    { name: 'Berlin', 月份: 'Feb.', 月均降雨量: 23.2 },\n    { name: 'Berlin', 月份: 'Mar.', 月均降雨量: 34.5 },\n    { name: 'Berlin', 月份: 'Apr.', 月均降雨量: 99.7 },\n    { name: 'Berlin', 月份: 'May', 月均降雨量: 52.6 },\n    { name: 'Berlin', 月份: 'Jun.', 月均降雨量: 35.5 },\n    { name: 'Berlin', 月份: 'Jul.', 月均降雨量: 37.4 },\n    { name: 'Berlin', 月份: 'Aug.', 月均降雨量: 42.4 },\n  ],\n  encode: { x: '月份', y: '月均降雨量', color: 'name' },\n  transform: [{ type: 'stackY' }],\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n      region: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:8,tocIndex:5},{value:"说明",paraId:9,tocIndex:5},{value:"：",paraId:9,tocIndex:5},{value:"月份",paraId:10,tocIndex:5},{value:" 字段映射到横轴位置，表示时间维度",paraId:10,tocIndex:5},{value:"月均降雨量",paraId:10,tocIndex:5},{value:" 字段映射到柱子高度，通过 ",paraId:10,tocIndex:5},{value:"stackY",paraId:10,tocIndex:5},{value:" 变换进行堆叠",paraId:10,tocIndex:5},{value:"name",paraId:10,tocIndex:5},{value:" 字段映射到颜色，区分不同城市",paraId:10,tocIndex:5},{value:"可以同时比较每个月的总降雨量和各城市的贡献",paraId:10,tocIndex:5},{value:"例子 2: ",paraId:11,tocIndex:5},{value:"适合展示人口年龄结构的地区对比",paraId:11,tocIndex:5},{value:"堆叠柱状图非常适合展示不同地区的人口年龄结构分布，既能看出各地区的总人口，又能分析年龄构成。",paraId:12,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [{ type: 'stackY' }, { type: 'sortX', by: 'y', reverse: true }],\n  axis: {\n    x: {\n      labelSpacing: 4,\n      labelTransform: 'rotate(90)',\n    },\n    y: {\n      labelFormatter: '~s',\n      title: null,\n    },\n  },\n  legend: {\n    color: {\n      position: 'right',\n      title: '年龄段',\n    },\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:13,tocIndex:5},{value:"说明",paraId:14,tocIndex:5},{value:"：",paraId:14,tocIndex:5},{value:"使用 ",paraId:15,tocIndex:5},{value:"sortX",paraId:15,tocIndex:5},{value:" 变换按总人口数量排序，便于比较",paraId:15,tocIndex:5},{value:"labelFormatter: '~s'",paraId:15,tocIndex:5},{value:" 格式化数值显示（如 1M 表示 1 百万）",paraId:15,tocIndex:5},{value:"旋转 x 轴标签以避免重叠",paraId:15,tocIndex:5},{value:"例子 3: ",paraId:16,tocIndex:5},{value:"水平堆叠柱状图适合类别较多的情况",paraId:16,tocIndex:5},{value:"当分类较多时，水平堆叠柱状图能够更好地展示标签，避免文字重叠。",paraId:17,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  width: 800,\n  height: 600,\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [{ type: 'stackY' }, { type: 'sortX', by: 'y', reverse: true }],\n  axis: {\n    y: {\n      labelFormatter: '~s',\n      title: null,\n    },\n    x: {\n      title: null,\n    },\n  },\n  legend: {\n    color: {\n      position: 'bottom',\n      title: '年龄段',\n    },\n  },\n});\n\nchart.render();\n",paraId:18,tocIndex:5},{value:"说明",paraId:19,tocIndex:5},{value:"：",paraId:19,tocIndex:5},{value:"使用 ",paraId:20,tocIndex:5},{value:"coordinate: { transform: [{ type: 'transpose' }] }",paraId:20,tocIndex:5},{value:" 实现水平方向",paraId:20,tocIndex:5},{value:"标签可以水平排列，提高可读性",paraId:20,tocIndex:5},{value:"适合有较多分类的数据",paraId:20,tocIndex:5},{value:"例子 4: ",paraId:21,tocIndex:5},{value:"百分比堆叠柱状图展示比例关系",paraId:21,tocIndex:5},{value:"当重点关注各部分占比而非绝对数值时，百分比堆叠柱状图是更好的选择。",paraId:22,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  width: 800,\n  height: 600,\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'stackY' },\n    { type: 'normalizeY' },\n    { type: 'sortX', by: 'y', reverse: true },\n  ],\n  axis: {\n    y: {\n      labelFormatter: '.0%',\n      title: null,\n    },\n    x: {\n      title: null,\n    },\n  },\n  legend: {\n    color: {\n      position: 'bottom',\n      title: '年龄段',\n    },\n  },\n  tooltip: {\n    channel: 'y0',\n    valueFormatter: '.0%',\n  },\n});\n\nchart.render();\n",paraId:23,tocIndex:5},{value:"说明",paraId:24,tocIndex:5},{value:"：",paraId:24,tocIndex:5},{value:"结合 ",paraId:25,tocIndex:5},{value:"stackY",paraId:25,tocIndex:5},{value:" 和 ",paraId:25,tocIndex:5},{value:"normalizeY",paraId:25,tocIndex:5},{value:" 变换实现百分比堆叠",paraId:25,tocIndex:5},{value:"labelFormatter: '.0%'",paraId:25,tocIndex:5},{value:" 将 y 轴标签格式化为百分比",paraId:25,tocIndex:5},{value:"便于比较各州的年龄结构比例",paraId:25,tocIndex:5},{value:"例子 1: ",paraId:26,tocIndex:6},{value:"不适合展示负值数据的简单堆叠",paraId:26,tocIndex:6},{value:"传统的堆叠柱状图不适合包含负值的数据，因为堆叠逻辑会导致视觉混乱。",paraId:27,tocIndex:6},{value:"例子 2: ",paraId:28,tocIndex:6},{value:"子类别过多时视觉效果差",paraId:28,tocIndex:6},{value:"当子类别数量超过 8-10 个时，颜色区分度下降，用户难以有效区分和比较。",paraId:29,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\n// 模拟过多子类别的数据\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { category: 'A', type: 'Type1', value: 10 },\n    { category: 'A', type: 'Type2', value: 8 },\n    { category: 'A', type: 'Type3', value: 6 },\n    { category: 'A', type: 'Type4', value: 4 },\n    { category: 'A', type: 'Type5', value: 3 },\n    { category: 'A', type: 'Type6', value: 2 },\n    { category: 'A', type: 'Type7', value: 2 },\n    { category: 'A', type: 'Type8', value: 1 },\n    { category: 'A', type: 'Type9', value: 1 },\n    { category: 'A', type: 'Type10', value: 1 },\n    { category: 'A', type: 'Type11', value: 1 },\n    { category: 'A', type: 'Type12', value: 1 },\n    { category: 'B', type: 'Type1', value: 12 },\n    { category: 'B', type: 'Type2', value: 9 },\n    { category: 'B', type: 'Type3', value: 7 },\n    { category: 'B', type: 'Type4', value: 5 },\n    { category: 'B', type: 'Type5', value: 4 },\n    { category: 'B', type: 'Type6', value: 3 },\n    { category: 'B', type: 'Type7', value: 2 },\n    { category: 'B', type: 'Type8', value: 2 },\n    { category: 'B', type: 'Type9', value: 1 },\n    { category: 'B', type: 'Type10', value: 1 },\n    { category: 'B', type: 'Type11', value: 1 },\n    { category: 'B', type: 'Type12', value: 1 },\n  ],\n  encode: { x: 'category', y: 'value', color: 'type' },\n  transform: [{ type: 'stackY' }],\n});\n\nchart.render();\n",paraId:30,tocIndex:6},{value:'在这种情况下，建议将较小的类别合并为"其他"类别，或者使用其他图表类型。',paraId:31,tocIndex:6},{value:"分散堆叠柱状图可以展示正负值的对比，特别适合展示盈亏、增减等对比数据。",paraId:32,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'view',\n  paddingLeft: 25,\n  children: [\n    {\n      type: 'interval',\n      data: {\n        type: 'fetch',\n        value: 'https://assets.antv.antgroup.com/g2/nivo-gain-lost.json',\n        transform: [\n          {\n            type: 'fold',\n            fields: [\n              'lost > 100$',\n              'lost <= 100$',\n              'gained <= 100$',\n              'gained > 100$',\n            ],\n          },\n        ],\n      },\n      encode: { x: 'user', y: 'value', color: 'key' },\n      transform: [{ type: 'stackY' }],\n      scale: {\n        x: { padding: 0.2 },\n        y: { domainMin: -100, domainMax: 100 },\n        color: {\n          domain: [\n            'lost > 100$',\n            'lost <= 100$',\n            'gained <= 100$',\n            'gained > 100$',\n          ],\n          range: ['#97e3d5', '#61cdbb', '#e25c3b', '#f47560'],\n        },\n      },\n      style: { radius: 10 },\n      axis: {\n        y: { position: 'right', title: false, labelFormatter: (v) => `${v}%` },\n      },\n      legend: { color: { title: false } },\n      labels: [\n        {\n          text: 'value',\n          position: 'inside',\n          formatter: (v) => (v ? `${v}%` : ''),\n          transform: [{ type: 'overlapDodgeY' }],\n          fill: '#000',\n          fontSize: 10,\n        },\n      ],\n    },\n    {\n      type: 'lineY',\n      data: [0],\n      style: { lineWidth: 2, stroke: '#e25c3b', strokeOpacity: 1 },\n    },\n    {\n      type: 'text',\n      style: {\n        x: -10,\n        y: '75%',\n        text: 'lost',\n        fontWeight: 'bold',\n        dy: -10,\n        transform: 'rotate(-90)',\n        fill: '#61cdbb',\n      },\n    },\n    {\n      type: 'text',\n      style: {\n        x: -10,\n        y: '20%',\n        text: 'gain',\n        fontWeight: 'bold',\n        dy: -10,\n        transform: 'rotate(-90)',\n        fill: '#e25c3b',\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:33,tocIndex:8},{value:"说明",paraId:34,tocIndex:8},{value:"：",paraId:34,tocIndex:8},{value:"使用正负值数据展示盈亏对比",paraId:35,tocIndex:8},{value:"设置 ",paraId:35,tocIndex:8},{value:"domainMin",paraId:35,tocIndex:8},{value:" 和 ",paraId:35,tocIndex:8},{value:"domainMax",paraId:35,tocIndex:8},{value:" 控制坐标轴范围",paraId:35,tocIndex:8},{value:"添加分界线突出正负值的分界",paraId:35,tocIndex:8},{value:"使用圆角样式增强视觉效果",paraId:35,tocIndex:8},{value:"柱状图",paraId:36,tocIndex:9},{value:"堆叠柱状图展示多个子类别的构成关系和总量",paraId:37,tocIndex:10},{value:"普通柱状图主要用于比较不同类别的单一数值",paraId:37,tocIndex:10},{value:"堆叠柱状图能同时显示部分和整体的关系",paraId:37,tocIndex:10},{value:"堆叠面积图",paraId:38,tocIndex:10},{value:"堆叠柱状图适合离散的分类数据比较",paraId:39,tocIndex:11},{value:"堆叠面积图适合连续的时间序列数据趋势展示",paraId:39,tocIndex:11},{value:"堆叠柱状图更便于精确数值比较",paraId:39,tocIndex:11},{value:"饼图",paraId:40,tocIndex:11},{value:"堆叠柱状图可以同时比较多个类别的构成",paraId:41,tocIndex:12},{value:"饼图只能展示单个整体的构成比例",paraId:41,tocIndex:12},{value:"堆叠柱状图在比较多个类别时更有优势",paraId:41,tocIndex:12}]},79830:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(10094);const t=[{value:'茎叶图是一种用于显示数据分布的可视化图表，它既能保留原始数据信息，又能直观地展示数据的分布形状。茎叶图通过将数据分解为"茎"（高位数字）和"叶"（低位数字）的形式来组织和显示数据。',paraId:0,tocIndex:0},{value:"茎叶图有别于",paraId:1,tocIndex:0},{value:"直方图",paraId:2,tocIndex:0},{value:"，茎叶图保留了每个数据点的具体数值，而直方图只显示数据落在各区间内的频次。茎叶图特别适合小到中等规模的数据集，能够同时显示数据的分布形状、集中趋势和具体数值。",paraId:1,tocIndex:0},{value:"当需要比较两组数据的分布时，可以使用背靠背的双向茎叶图，这样能够清晰地对比两组数据的分布特征。",paraId:3,tocIndex:0},{value:"英文名",paraId:4,tocIndex:0},{value:"：Stem-and-Leaf Plot, Stem-and-Leaf Diagram",paraId:4,tocIndex:0},{value:"图表类型",paraId:5,tocIndex:2},{value:"单向茎叶图",paraId:5,tocIndex:2},{value:"适合的数据",paraId:5,tocIndex:2},{value:"列表：一组连续数值数据",paraId:5,tocIndex:2},{value:"功能",paraId:5,tocIndex:2},{value:"显示数据分布形状，保留原始数据信息",paraId:5,tocIndex:2},{value:"数据与图形的映射",paraId:5,tocIndex:2},{value:"数值的高位数字作为茎（垂直排列）",paraId:5,tocIndex:2},{value:"数值的低位数字作为叶（水平排列）",paraId:5,tocIndex:2},{value:"每一行代表相同茎值的所有数据",paraId:5,tocIndex:2},{value:"适合的数据条数",paraId:5,tocIndex:2},{value:"20-100 条数据，数据过多时建议使用其他可视化方式",paraId:5,tocIndex:2},{value:"图表类型",paraId:6,tocIndex:3},{value:"双向茎叶图",paraId:6,tocIndex:3},{value:"适合的数据",paraId:6,tocIndex:3},{value:"列表：两组连续数值数据",paraId:6,tocIndex:3},{value:"功能",paraId:6,tocIndex:3},{value:"对比两组数据的分布形状和特征",paraId:6,tocIndex:3},{value:"数据与图形的映射",paraId:6,tocIndex:3},{value:"共用茎（中间垂直排列）",paraId:6,tocIndex:3},{value:"左侧组数据的叶向左排列",paraId:6,tocIndex:3},{value:"右侧组数据的叶向右排列",paraId:6,tocIndex:3},{value:"通过颜色区分不同的数据组",paraId:6,tocIndex:3},{value:"适合的数据条数",paraId:6,tocIndex:3},{value:"每组 20-50 条数据",paraId:6,tocIndex:3},{value:"组成元素：",paraId:7,tocIndex:3},{value:"茎（Stem）",paraId:8,tocIndex:3},{value:"：数据的高位数字，垂直排列在图的中心",paraId:8,tocIndex:3},{value:"叶（Leaf）",paraId:8,tocIndex:3},{value:"：数据的低位数字，水平排列在茎的两侧",paraId:8,tocIndex:3},{value:"分隔线",paraId:8,tocIndex:3},{value:"：分隔左右两组数据的垂直线",paraId:8,tocIndex:3},{value:"标题/图例",paraId:8,tocIndex:3},{value:"：标识不同数据组的含义",paraId:8,tocIndex:3},{value:"数据排序",paraId:8,tocIndex:3},{value:"：叶通常按从小到大排列",paraId:8,tocIndex:3},{value:"单向茎叶图适合展示一组数据的分布情况，能够清晰地显示数据的集中趋势和分布形状。",paraId:9,tocIndex:6},{value:"例子：",paraId:10,tocIndex:6},{value:"学生考试成绩分布",paraId:10,tocIndex:6},{value:"下图展示了一个班级学生的数学成绩分布：",paraId:11,tocIndex:6},{value:"学生成绩",paraId:12,tocIndex:6},{value:"65, 67, 69, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 85, 87, 89, 92, 93, 95",paraId:12,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\n// 单组数据\nconst rawData = [\n  65, 67, 69, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 85, 87, 89, 92, 93, 95,\n];\n\n// 处理单向茎叶图数据\nfunction processSingleStemLeaf(data) {\n  const stemMap = new Map();\n\n  data.forEach((score) => {\n    const stem = Math.floor(score / 10);\n    const leaf = score % 10;\n    if (!stemMap.has(stem)) {\n      stemMap.set(stem, []);\n    }\n    stemMap.get(stem).push(leaf);\n  });\n\n  // 排序叶\n  Array.from(stemMap.values()).forEach((leaves) => {\n    leaves.sort((a, b) => a - b);\n  });\n\n  const stems = Array.from(stemMap.keys()).sort((a, b) => b - a); // 从大到小排列\n  const chartData = [];\n\n  stems.forEach((stem, index) => {\n    const yPos = index;\n    const leaves = stemMap.get(stem);\n\n    // 添加茎\n    chartData.push({\n      x: 0.4,\n      y: yPos,\n      text: `${stem}`,\n      type: 'stem',\n      fill: '#333',\n      fontSize: 18,\n      fontWeight: 'bold',\n    });\n\n    // 添加叶\n    leaves.forEach((leaf, i) => {\n      chartData.push({\n        x: 0.47 + i * 0.04,\n        y: yPos,\n        text: `${leaf}`,\n        type: 'leaf',\n        fill: '#1890ff',\n        fontSize: 14,\n        fontWeight: 'normal',\n      });\n    });\n  });\n\n  return { chartData, maxY: stems.length };\n}\n\nconst { chartData, maxY } = processSingleStemLeaf(rawData);\n\nchart.options({\n  type: 'view',\n  data: chartData,\n  children: [\n    {\n      type: 'text',\n      encode: {\n        x: 'x',\n        y: 'y',\n        text: 'text',\n        fill: 'fill',\n        fontSize: 'fontSize',\n        fontWeight: 'fontWeight',\n      },\n      style: {\n        textAlign: 'center',\n        textBaseline: 'middle',\n      },\n    },\n  ],\n  scale: {\n    x: { domain: [0, 1], nice: false },\n    y: { domain: [-0.5, maxY - 0.5], nice: false },\n  },\n  axis: false,\n});\n\n// 使用 lineX 方法添加分割线\nchart.lineX().data([0.45]).style({\n  lineWidth: 1,\n  stroke: '#333',\n  strokeOpacity: 0.6,\n});\n\nchart.render();\n",paraId:13,tocIndex:6},{value:"说明",paraId:14,tocIndex:6},{value:"：",paraId:14,tocIndex:6},{value:"茎表示成绩的十位数（6, 7, 8, 9）",paraId:15,tocIndex:6},{value:"叶表示成绩的个位数，按升序排列",paraId:15,tocIndex:6},{value:"从图中可以看出成绩主要集中在 70-80 分区间",paraId:15,tocIndex:6},{value:"双向茎叶图特别适合比较两组数据的分布差异，能够直观地展示两组数据的相对位置和分布特征。",paraId:16,tocIndex:7},{value:"例子：",paraId:17,tocIndex:7},{value:"比较两个班级的考试成绩分布",paraId:17,tocIndex:7},{value:"下图展示了 A 班和 B 班学生考试成绩的对比分布：",paraId:18,tocIndex:7},{value:"数据组",paraId:19,tocIndex:7},{value:"成绩范围",paraId:19,tocIndex:7},{value:"A 班",paraId:19,tocIndex:7},{value:"45-78",paraId:19,tocIndex:7},{value:"B 班",paraId:19,tocIndex:7},{value:"43-82",paraId:19,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nconst rawData = {\n  left: [\n    45, 47, 48, 52, 53, 55, 56, 57, 59, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72,\n    73, 74, 75, 76, 77, 78,\n  ],\n  right: [\n    43, 44, 46, 51, 54, 55, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 74,\n    75, 76, 77, 79, 82,\n  ],\n};\n\n// 处理双向茎叶图数据\nfunction processDualStemLeaf(data) {\n  const stemMap = new Map();\n\n  ['left', 'right'].forEach((side) => {\n    data[side].forEach((score) => {\n      const stem = Math.floor(score / 10);\n      const leaf = score % 10;\n      if (!stemMap.has(stem)) {\n        stemMap.set(stem, { left: [], right: [] });\n      }\n      stemMap.get(stem)[side].push(leaf);\n    });\n  });\n\n  // 排序\n  Array.from(stemMap.values()).forEach((group) => {\n    group.left.sort((a, b) => b - a); // 左侧降序\n    group.right.sort((a, b) => a - b); // 右侧升序\n  });\n\n  const stems = Array.from(stemMap.keys()).sort((a, b) => b - a); // 茎从大到小\n  const chartData = [];\n\n  stems.forEach((stem, index) => {\n    const yPos = index;\n    const { left, right } = stemMap.get(stem);\n\n    // 添加茎\n    chartData.push({\n      x: 0.5,\n      y: yPos,\n      text: `${stem}`,\n      type: 'stem',\n      fill: '#333',\n      fontSize: 18,\n      fontWeight: 'bold',\n    });\n\n    // 添加左侧叶（A班）\n    left.forEach((leaf, i) => {\n      chartData.push({\n        x: 0.45 - (i + 1) * 0.035,\n        y: yPos,\n        text: `${leaf}`,\n        type: 'leaf-left',\n        fill: '#1f77b4',\n        fontSize: 14,\n        fontWeight: 'normal',\n      });\n    });\n\n    // 添加右侧叶（B班）\n    right.forEach((leaf, i) => {\n      chartData.push({\n        x: 0.55 + i * 0.035,\n        y: yPos,\n        text: `${leaf}`,\n        type: 'leaf-right',\n        fill: '#ff7f0e',\n        fontSize: 14,\n        fontWeight: 'normal',\n      });\n    });\n  });\n\n  // 添加标题\n  chartData.push({\n    x: 0.35,\n    y: stems.length,\n    text: 'A班',\n    type: 'title',\n    fill: '#1f77b4',\n    fontSize: 16,\n    fontWeight: 'bold',\n  });\n\n  chartData.push({\n    x: 0.65,\n    y: stems.length,\n    text: 'B班',\n    type: 'title',\n    fill: '#ff7f0e',\n    fontSize: 16,\n    fontWeight: 'bold',\n  });\n\n  return { chartData, maxY: stems.length + 1 };\n}\n\nconst { chartData, maxY } = processDualStemLeaf(rawData);\n\nchart.options({\n  type: 'view',\n  data: chartData,\n  children: [\n    {\n      type: 'text',\n      encode: {\n        x: 'x',\n        y: 'y',\n        text: 'text',\n        fill: 'fill',\n        fontSize: 'fontSize',\n        fontWeight: 'fontWeight',\n      },\n      style: {\n        textAlign: 'center',\n        textBaseline: 'middle',\n      },\n    },\n    {\n      type: 'lineX',\n      data: [{ x: 0.47 }, { x: 0.53 }],\n      encode: {\n        x: 'x',\n      },\n      style: {\n        lineWidth: 2,\n        stroke: '#000',\n        strokeOpacity: 0.8,\n      },\n    },\n  ],\n  scale: {\n    x: { domain: [0, 1], nice: false },\n    y: { domain: [-0.5, maxY - 0.5], nice: false },\n  },\n  axis: false,\n});\n\nchart.render();\n",paraId:20,tocIndex:7},{value:"说明",paraId:21,tocIndex:7},{value:"：",paraId:21,tocIndex:7},{value:"茎表示成绩的十位数，共用显示在中间",paraId:22,tocIndex:7},{value:"左侧叶表示 A 班学生成绩的个位数，按降序排列",paraId:22,tocIndex:7},{value:"右侧叶表示 B 班学生成绩的个位数，按升序排列",paraId:22,tocIndex:7},{value:"通过颜色区分两个班级的数据",paraId:22,tocIndex:7},{value:"可以清晰地比较两个班级的成绩分布差异",paraId:22,tocIndex:7},{value:"当需要比较多个类别的数据分布时，可以使用分组茎叶图。",paraId:23,tocIndex:8},{value:"例子：",paraId:24,tocIndex:8},{value:"不同年龄段的身高分布",paraId:24,tocIndex:8},{value:"下图展示了青少年、成年人、老年人三个年龄段的身高分布：",paraId:25,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nconst ageGroupData = {\n  青少年: [155, 158, 160, 162, 165, 167, 168, 170, 172, 175],\n  成年人: [160, 163, 165, 168, 170, 172, 175, 177, 180, 182, 185],\n  老年人: [150, 155, 158, 160, 162, 165, 167, 168, 170, 172],\n};\n\n// 处理分组茎叶图数据\nfunction processGroupedStemLeaf(data) {\n  const groups = Object.keys(data);\n  const colors = ['#1f77b4', '#ff7f0e', '#2ca02c'];\n  const chartData = [];\n  let currentY = 0;\n\n  groups.forEach((group, groupIndex) => {\n    const groupData = data[group];\n    const stemMap = new Map();\n\n    // 添加组标题\n    chartData.push({\n      x: 0.1,\n      y: currentY,\n      text: group,\n      type: 'group-title',\n      fill: colors[groupIndex],\n      fontSize: 16,\n      fontWeight: 'bold',\n    });\n    currentY += 0.5;\n\n    // 处理数据\n    groupData.forEach((height) => {\n      const stem = Math.floor(height / 10);\n      const leaf = height % 10;\n      if (!stemMap.has(stem)) {\n        stemMap.set(stem, []);\n      }\n      stemMap.get(stem).push(leaf);\n    });\n\n    // 排序叶\n    Array.from(stemMap.values()).forEach((leaves) => {\n      leaves.sort((a, b) => a - b);\n    });\n\n    const stems = Array.from(stemMap.keys()).sort((a, b) => a - b);\n\n    stems.forEach((stem) => {\n      const leaves = stemMap.get(stem);\n\n      // 添加茎\n      chartData.push({\n        x: 0.2,\n        y: currentY,\n        text: `${stem}`,\n        type: 'stem',\n        fill: '#333',\n        fontSize: 14,\n        fontWeight: 'bold',\n      });\n\n      // 添加叶\n      leaves.forEach((leaf, i) => {\n        chartData.push({\n          x: 0.27 + i * 0.03,\n          y: currentY,\n          text: `${leaf}`,\n          type: 'leaf',\n          fill: colors[groupIndex],\n          fontSize: 12,\n          fontWeight: 'normal',\n        });\n      });\n\n      currentY += 1;\n    });\n\n    currentY += 0.5; // 组间间距\n  });\n\n  return { chartData, maxY: currentY };\n}\n\nconst { chartData, maxY } = processGroupedStemLeaf(ageGroupData);\n\nchart.options({\n  type: 'view',\n  data: chartData,\n  children: [\n    {\n      type: 'text',\n      encode: {\n        x: 'x',\n        y: 'y',\n        text: 'text',\n        fill: 'fill',\n        fontSize: 'fontSize',\n        fontWeight: 'fontWeight',\n      },\n      style: {\n        textAlign: 'left',\n        textBaseline: 'middle',\n      },\n    },\n  ],\n  scale: {\n    x: { domain: [0, 1], nice: false },\n    y: { domain: [0, maxY], nice: false },\n  },\n  axis: false,\n});\n\n// 使用 lineX 方法添加分割线\nchart.lineX().data([0.25]).style({\n  lineWidth: 1,\n  stroke: '#333',\n  strokeOpacity: 0.6,\n});\n\nchart.render();\n",paraId:26,tocIndex:8},{value:"说明",paraId:27,tocIndex:8},{value:"：",paraId:27,tocIndex:8},{value:"将数据按年龄段分组显示",paraId:28,tocIndex:8},{value:"每组使用不同颜色进行区分",paraId:28,tocIndex:8},{value:"可以清晰地比较不同年龄段的身高分布特征",paraId:28,tocIndex:8},{value:"适合展示多个类别数据的分布对比",paraId:28,tocIndex:8},{value:"例子 1: ",paraId:29,tocIndex:9},{value:"数据量过大的情况",paraId:29,tocIndex:9},{value:"当数据量超过 100 个时，茎叶图会变得过于拥挤，难以阅读。此时建议使用直方图或箱线图。",paraId:30,tocIndex:9},{value:"例子 2: ",paraId:31,tocIndex:9},{value:"数据范围过大的情况",paraId:31,tocIndex:9},{value:"当数据跨度很大（比如从 1 到 10000）时，茎的数量会过多，导致图表冗长。建议先对数据进行适当的分组或变换。",paraId:32,tocIndex:9},{value:"例子 3: ",paraId:33,tocIndex:9},{value:"需要精确数值比较的场景",paraId:33,tocIndex:9},{value:"虽然茎叶图保留了原始数据，但当需要进行精确的数值计算和比较时，表格形式可能更合适。",paraId:34,tocIndex:9},{value:"直方图",paraId:35,tocIndex:10},{value:"茎叶图",paraId:36,tocIndex:11},{value:"：保留每个数据点的具体数值，既显示分布形状又保持数据完整性，但仅适用于小到中等规模的数据集",paraId:36,tocIndex:11},{value:"直方图",paraId:36,tocIndex:11},{value:"：通过分组区间展示数据分布，能处理大量数据，但会丢失原始数据的具体数值信息",paraId:36,tocIndex:11},{value:"箱线图",paraId:37,tocIndex:11},{value:"茎叶图",paraId:38,tocIndex:12},{value:"：展示完整的数据分布形状和每个数据点，便于识别数据模式和异常值的具体位置",paraId:38,tocIndex:12},{value:"箱线图",paraId:38,tocIndex:12},{value:"：通过五数概括（最小值、Q1、中位数、Q3、最大值）展示数据分布的统计特征，更加简洁但信息有限",paraId:38,tocIndex:12},{value:"散点图",paraId:39,tocIndex:12},{value:"茎叶图",paraId:40,tocIndex:13},{value:"：专注于单一变量的分布展示，通过茎叶结构有序排列数据",paraId:40,tocIndex:13},{value:"散点图",paraId:40,tocIndex:13},{value:"：展示两个变量之间的关系和相关性，更适合探索变量间的关联模式",paraId:40,tocIndex:13}]},16746:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(59989);const t=[{value:"旭日图是一种层次化的数据可视化图表，通过同心圆的形式展示多层级数据结构。每个层级用一个环表示，环的内外半径表示层级的深度，环的角度大小表示数据的数值大小。旭日图融合了饼图和树状图的优点，采用圆形分割的方式来展示多层嵌套的信息结构。",paraId:0,tocIndex:0},{value:"旭日图特别适合展示具有明确父子关系的层次化数据，能够直观地显示各个层级之间的比例关系和层次结构。通过环形布局，旭日图有效地展现了数据间的层次关系和比例分配，比起树图具备节省空间、整体情况更加直观等优点。",paraId:1,tocIndex:0},{value:"旭日图还支持下钻交互，用户可以点击某个扇形区域来查看该层级的详细信息，这使得它成为商业分析、地理学研究等领域不可或缺的工具之一。",paraId:2,tocIndex:0},{value:"英文名",paraId:3,tocIndex:0},{value:"：Sunburst Chart",paraId:3,tocIndex:0},{value:"图表类型",paraId:4,tocIndex:1},{value:"旭日图",paraId:4,tocIndex:1},{value:"适合的数据",paraId:4,tocIndex:1},{value:"层次化数据：具有多层级父子关系的嵌套数据结构",paraId:4,tocIndex:1},{value:"功能",paraId:4,tocIndex:1},{value:"展示层次化数据的比例关系和层级结构",paraId:4,tocIndex:1},{value:"数据与图形的映射",paraId:4,tocIndex:1},{value:"层级关系映射到同心圆的环",paraId:4,tocIndex:1},{value:"数值大小映射到扇形的角度",paraId:4,tocIndex:1},{value:"不同类别通过颜色进行区分",paraId:4,tocIndex:1},{value:"适合的场景",paraId:4,tocIndex:1},{value:"组织架构、文件系统、预算分配等具有清晰层次关系的数据展示",paraId:4,tocIndex:1},{value:"例子 1: ",paraId:5,tocIndex:3},{value:"展示文件系统层次",paraId:5,tocIndex:3},{value:"下图展示了一个文件系统的层次结构，通过旭日图可以清晰地看到各个文件夹和文件的大小分布。",paraId:6,tocIndex:3},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'sunburst',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  },\n  encode: {\n    value: 'sum',\n  },\n  animate: { enter: { type: 'waveIn' } },\n});\n\nchart.render();\n",paraId:7,tocIndex:3},{value:"例子 2: ",paraId:8,tocIndex:3},{value:"展示预算分配结构",paraId:8,tocIndex:3},{value:"旭日图可以清晰地展示预算在不同项目和子项目之间的分配情况，帮助管理者了解资源配置。",paraId:9,tocIndex:3},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'sunburst',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  },\n  encode: {\n    value: 'sum',\n  },\n  labels: [\n    {\n      text: 'name',\n      transform: [\n        {\n          type: 'overflowHide',\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:10,tocIndex:3},{value:"例子 1: ",paraId:11,tocIndex:4},{value:"层级过深导致的可读性问题",paraId:11,tocIndex:4},{value:"当层级超过 4 层时，旭日图的外层扇形会变得非常细小，难以辨识。下面展示一个 6 层深度的旭日图，可以看到外层已经完全无法识别。",paraId:12,tocIndex:4},{value:"旭日图（不推荐）",paraId:13,tocIndex:4},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\n// 创建层级过深的数据（6层层级）- 通过函数生成\nfunction generateDeepData() {\n  const createNode = (prefix, depth, maxDepth) => {\n    if (depth >= maxDepth) {\n      return {\n        label: `${prefix}-叶子节点`,\n        count: Math.floor(Math.random() * 20) + 5,\n      };\n    }\n\n    const children = [];\n    const childCount = depth < 3 ? 3 : 2; // 前3层每层3个子节点，后续每层2个\n\n    for (let i = 1; i <= childCount; i++) {\n      children.push(createNode(`${prefix}-${i}`, depth + 1, maxDepth));\n    }\n\n    return {\n      label: `${prefix}`,\n      children: children,\n    };\n  };\n\n  return createNode('ROOT', 0, 6);\n}\n\nconst deepData = generateDeepData();\n\nchart.options({\n  type: 'sunburst',\n  data: { value: deepData },\n  encode: {\n    value: 'count',\n    text: 'label',\n  },\n  style: { radius: 4 }, // 小圆角\n  legend: false,\n});\n\nchart.render();\n",paraId:14,tocIndex:4},{value:"矩形树图（推荐）",paraId:15,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\n// 创建层级过深的数据（6层层级）- 通过函数生成\nfunction generateDeepData() {\n  const createNode = (prefix, depth, maxDepth) => {\n    if (depth >= maxDepth) {\n      return {\n        name: `${prefix}-叶子节点`,\n        value: Math.floor(Math.random() * 20) + 5,\n      };\n    }\n\n    const children = [];\n    const childCount = depth < 3 ? 3 : 2; // 前3层每层3个子节点，后续每层2个\n\n    for (let i = 1; i <= childCount; i++) {\n      children.push(createNode(`${prefix}-${i}`, depth + 1, maxDepth));\n    }\n\n    return {\n      name: `${prefix}`,\n      children: children,\n    };\n  };\n\n  return createNode('ROOT', 0, 6);\n}\n\nconst deepData = generateDeepData();\n\nchart.options({\n  type: 'treemap',\n  data: { value: deepData },\n  layout: {\n    path: (d) => d.name.replace(/\\./g, '/'),\n    tile: 'treemapBinary',\n    paddingInner: 1,\n  },\n  encode: {\n    value: 'value',\n  },\n  style: {\n    labelFill: '#000',\n    labelStroke: '#fff',\n    labelLineWidth: 1,\n    labelFontSize: 10,\n    labelPosition: 'top-left',\n    labelDx: 2,\n    labelDy: 2,\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:16,tocIndex:4},{value:"说明",paraId:17,tocIndex:4},{value:"：当数据层级过深时，旭日图的外层扇形变得极其细小，标签重叠严重，用户难以获取有效信息。此时建议使用",paraId:17,tocIndex:4},{value:"矩形树图",paraId:17,tocIndex:4},{value:"。",paraId:17,tocIndex:4},{value:"例子 2: ",paraId:18,tocIndex:4},{value:"类别数量过多的问题",paraId:18,tocIndex:4},{value:"当第二层类别超过 20 个时，旭日图的颜色区分和角度感知都会变得困难，标签拥挤难以阅读。",paraId:19,tocIndex:4},{value:"旭日图（不推荐）",paraId:20,tocIndex:4},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\n// 创建类别过多的层次数据（第二层25个子类别）\nconst manyData = {\n  label: '零售连锁企业',\n  children: [\n    {\n      label: '华北区',\n      children: [\n        { label: '北京朝阳店', count: 142 },\n        { label: '北京海淀店', count: 135 },\n        { label: '北京西城店', count: 128 },\n        { label: '天津滨海店', count: 156 },\n        { label: '石家庄裕华店', count: 98 },\n        { label: '太原迎泽店', count: 89 },\n        { label: '呼和浩特新城店', count: 67 },\n      ],\n    },\n    {\n      label: '华东区',\n      children: [\n        { label: '上海浦东店', count: 189 },\n        { label: '上海静安店', count: 167 },\n        { label: '杭州西湖店', count: 145 },\n        { label: '南京鼓楼店', count: 134 },\n        { label: '苏州园区店', count: 123 },\n        { label: '无锡新区店', count: 112 },\n        { label: '宁波海曙店', count: 101 },\n        { label: '合肥蜀山店', count: 95 },\n        { label: '福州鼓楼店', count: 87 },\n        { label: '厦门思明店', count: 79 },\n        { label: '南昌东湖店', count: 72 },\n        { label: '济南历下店', count: 88 },\n        { label: '青岛市南店', count: 94 },\n        { label: '烟台芝罘店', count: 76 },\n        { label: '潍坊奎文店', count: 68 },\n        { label: '临沂兰山店', count: 63 },\n        { label: '淄博张店', count: 58 },\n        { label: '威海环翠店', count: 54 },\n      ],\n    },\n  ],\n};\n\nchart.options({\n  type: 'sunburst',\n  data: { value: manyData },\n  encode: {\n    value: 'count',\n    text: 'label',\n  },\n  labels: [\n    {\n      text: 'name',\n    },\n  ],\n  legend: false,\n});\n\nchart.render();\n",paraId:21,tocIndex:4},{value:"柱状图（推荐）",paraId:22,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nconst manyCategories = [\n  { category: '北京朝阳店', value: 142, group: '华北区' },\n  { category: '北京海淀店', value: 135, group: '华北区' },\n  { category: '北京西城店', value: 128, group: '华北区' },\n  { category: '天津滨海店', value: 156, group: '华北区' },\n  { category: '石家庄裕华店', value: 98, group: '华北区' },\n  { category: '太原迎泽店', value: 89, group: '华北区' },\n  { category: '呼和浩特新城店', value: 67, group: '华北区' },\n  { category: '上海浦东店', value: 189, group: '华东区' },\n  { category: '上海静安店', value: 167, group: '华东区' },\n  { category: '杭州西湖店', value: 145, group: '华东区' },\n  { category: '南京鼓楼店', value: 134, group: '华东区' },\n  { category: '苏州园区店', value: 123, group: '华东区' },\n  { category: '无锡新区店', value: 112, group: '华东区' },\n  { category: '宁波海曙店', value: 101, group: '华东区' },\n  { category: '合肥蜀山店', value: 95, group: '华东区' },\n  { category: '福州鼓楼店', value: 87, group: '华东区' },\n  { category: '厦门思明店', value: 79, group: '华东区' },\n  { category: '南昌东湖店', value: 72, group: '华东区' },\n  { category: '济南历下店', value: 88, group: '华东区' },\n  { category: '青岛市南店', value: 94, group: '华东区' },\n  { category: '烟台芝罘店', value: 76, group: '华东区' },\n  { category: '潍坊奎文店', value: 68, group: '华东区' },\n  { category: '临沂兰山店', value: 63, group: '华东区' },\n  { category: '淄博张店', value: 58, group: '华东区' },\n  { category: '威海环翠店', value: 54, group: '华东区' },\n];\n\nchart.options({\n  type: 'interval',\n  data: manyCategories,\n  encode: { x: 'category', y: 'value', color: 'group' },\n  transform: [{ type: 'dodgeX' }],\n  coordinate: { transform: [{ type: 'transpose' }] },\n  legend: { color: { position: 'top' } },\n});\n\nchart.render();\n",paraId:23,tocIndex:4},{value:"说明",paraId:24,tocIndex:4},{value:"：当旭日图包含过多类别时（如上图显示的 25 个门店），第二层扇形角度过小，标签严重重叠，颜色难以区分，视觉效果混乱。此时建议使用",paraId:24,tocIndex:4},{value:"分组柱状图",paraId:24,tocIndex:4},{value:"进行清晰对比。",paraId:24,tocIndex:4},{value:"例子 3: ",paraId:25,tocIndex:4},{value:"数值差异过小的问题",paraId:25,tocIndex:4},{value:"当两层数据中第二层类别的数值差异很小时，旭日图的角度差异不明显，难以进行有效对比。",paraId:26,tocIndex:4},{value:"旭日图（不推荐）",paraId:27,tocIndex:4},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\n// 创建数值差异很小的两层数据（第二层各城市销售额差异在1%以内）\nconst similarData = {\n  label: '全国销售网络',\n  children: [\n    {\n      label: '华东大区',\n      children: [\n        { label: '上海市', count: 2997 },\n        { label: '杭州市', count: 3001 },\n        { label: '南京市', count: 2999 },\n        { label: '苏州市', count: 3003 },\n      ],\n    },\n    {\n      label: '华北大区',\n      children: [\n        { label: '北京市', count: 2998 },\n        { label: '天津市', count: 3002 },\n        { label: '石家庄市', count: 2996 },\n        { label: '济南市', count: 3004 },\n      ],\n    },\n  ],\n};\n\nchart.options({\n  type: 'sunburst',\n  data: { value: similarData },\n  encode: {\n    value: 'count',\n    text: 'label',\n  },\n  legend: { color: { position: 'bottom' } },\n});\n\nchart.render();\n",paraId:28,tocIndex:4},{value:"柱状图（推荐）",paraId:29,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\n// 对应的柱状图数据（8个城市）\nconst smallDiffData = [\n  { category: '上海市', value: 2997, group: '华东大区' },\n  { category: '杭州市', value: 3001, group: '华东大区' },\n  { category: '南京市', value: 2999, group: '华东大区' },\n  { category: '苏州市', value: 3003, group: '华东大区' },\n  { category: '北京市', value: 2998, group: '华北大区' },\n  { category: '天津市', value: 3002, group: '华北大区' },\n  { category: '石家庄市', value: 2996, group: '华北大区' },\n  { category: '济南市', value: 3004, group: '华北大区' },\n];\n\nchart.options({\n  type: 'interval',\n  data: smallDiffData,\n  encode: { x: 'category', y: 'value', color: 'group' },\n  transform: [{ type: 'dodgeX' }],\n  axis: {\n    y: { nice: false, domain: [2990, 3010] }, // 缩小Y轴范围突出差异\n  },\n  legend: { color: { position: 'top' } },\n});\n\nchart.render();\n",paraId:30,tocIndex:4},{value:"说明",paraId:31,tocIndex:4},{value:"：当数据中各类别的数值差异很小时（如上图中各城市销售额在 2996-3004 之间，差异不到 0.3%），旭日图的角度差异极其微小，用户无法通过视觉感知到数值的细微差别。此时建议使用",paraId:31,tocIndex:4},{value:"分组柱状图",paraId:31,tocIndex:4},{value:"并调整 Y 轴范围来突出差异。",paraId:31,tocIndex:4},{value:"为旭日图添加标签可以让数据更加清晰易读：",paraId:32,tocIndex:6},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'sunburst',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  },\n  encode: {\n    value: 'sum',\n  },\n  labels: [\n    {\n      text: 'name',\n      transform: [\n        {\n          type: 'overflowHide',\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:33,tocIndex:6},{value:"通过设置颜色通道，可以更好地区分不同的类别：",paraId:34,tocIndex:7},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'sunburst',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  },\n  encode: {\n    value: 'sum',\n    color: 'label',\n  },\n});\n\nchart.render();\n",paraId:35,tocIndex:7},{value:"可以通过样式配置来定制旭日图的外观：",paraId:36,tocIndex:8},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'sunburst',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  },\n  encode: {\n    value: 'sum',\n  },\n  style: {\n    radius: 8,\n    // 内置透明度 fillOpacity ，根据 0.85 ** depth 层级计算\n    fillOpacity: (v) => v['fillOpacity'],\n    fill: (v) => {\n      if (v['path'] === '类别 3') return 'red';\n      if (v['name'] === '类别 2.1.1') return 'red';\n    },\n  },\n});\n\nchart.render();\n",paraId:37,tocIndex:8},{value:"旭日图支持下钻交互，用户可以点击扇形区域进行层级导航：",paraId:38,tocIndex:9},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'sunburst',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  },\n  encode: {\n    value: 'sum',\n  },\n  labels: [\n    {\n      text: 'name',\n      transform: [\n        {\n          type: 'overflowHide',\n        },\n      ],\n    },\n  ],\n  interaction: {\n    drillDown: {\n      breadCrumb: {\n        rootText: '起始',\n        style: {\n          fontSize: '18px',\n          fill: '#333',\n        },\n        active: {\n          fill: 'red',\n        },\n      },\n      // FixedColor default: true, true -> drillDown update scale, false -> scale keep.\n      isFixedColor: false,\n    },\n  },\n  state: {\n    active: { zIndex: 2, stroke: 'red' },\n    inactive: { zIndex: 1, stroke: '#fff' },\n  },\n});\n\nchart.render();\n",paraId:39,tocIndex:9},{value:"饼图",paraId:40,tocIndex:10},{value:"旭日图可以看作是多层级的饼图，相比普通饼图有以下优势：",paraId:41,tocIndex:11},{value:"能够展示多层级的层次关系，而饼图只能展示单层级数据",paraId:42,tocIndex:11},{value:"更好地利用空间，可以在一个图表中展示更多信息",paraId:42,tocIndex:11},{value:"支持下钻交互，用户可以逐层探索数据",paraId:42,tocIndex:11},{value:"当数据具有层次结构时，旭日图比饼图更合适。",paraId:42,tocIndex:11},{value:"旭日图和矩形树图都可以展示层次化数据，但有不同的特点：",paraId:43,tocIndex:12},{value:"对比维度",paraId:44,tocIndex:12},{value:"旭日图",paraId:44,tocIndex:12},{value:"矩形树图",paraId:44,tocIndex:12},{value:"视觉形式",paraId:44,tocIndex:12},{value:"圆形布局",paraId:44,tocIndex:12},{value:"矩形布局",paraId:44,tocIndex:12},{value:"空间利用",paraId:44,tocIndex:12},{value:"圆形边界，空间利用率较低",paraId:44,tocIndex:12},{value:"矩形填充，空间利用率高",paraId:44,tocIndex:12},{value:"层次展示",paraId:44,tocIndex:12},{value:"同心圆，层次关系清晰",paraId:44,tocIndex:12},{value:"嵌套矩形，包含关系明确",paraId:44,tocIndex:12},{value:"比例感知",paraId:44,tocIndex:12},{value:"角度比较，适中",paraId:44,tocIndex:12},{value:"面积比较，更准确",paraId:44,tocIndex:12},{value:"适用场景",paraId:44,tocIndex:12},{value:"强调层次关系和整体结构",paraId:44,tocIndex:12},{value:"强调精确的比例对比",paraId:44,tocIndex:12},{value:"环图可以看作是两层的旭日图：",paraId:45,tocIndex:13},{value:"旭日图相比环图的优势",paraId:46,tocIndex:13},{value:"：",paraId:46,tocIndex:13},{value:"支持三层及以上的多层级数据",paraId:47,tocIndex:13},{value:"能够展示更复杂的层次关系",paraId:47,tocIndex:13},{value:"更适合组织架构等深层次数据",paraId:47,tocIndex:13},{value:"环图的优势",paraId:48,tocIndex:13},{value:"：",paraId:48,tocIndex:13},{value:"更简洁，易于理解",paraId:49,tocIndex:13},{value:"对于两层数据的展示更清晰",paraId:49,tocIndex:13}]},87107:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(66215);const t=[{value:"矩形树图是一种用于展示层次化数据的可视化图表，通过一系列嵌套的矩形来表示树状结构的数据。每个矩形的面积大小与其对应的数值成正比，颜色通常用来区分不同的类别或层级。矩形树图将树形数据结构转化为平面空间的矩形填充，能够直观地展示数据的层次关系和数值比例。",paraId:0,tocIndex:0},{value:"矩形树图特别适合展示具有层级关系的大量数据，如文件系统、组织架构、预算分配、股票市场等。相比传统的树形结构图，矩形树图能更有效地利用空间，并且具有展示占比功能，使得用户能够快速理解数据的分布和重要性。",paraId:1,tocIndex:0},{value:"矩形树图还支持交互式下钻功能，用户可以点击某个矩形区域来查看该层级的详细子项，这使得它成为数据探索和分析的强大工具。",paraId:2,tocIndex:0},{value:"英文名",paraId:3,tocIndex:0},{value:"：Treemap",paraId:3,tocIndex:0},{value:"图表类型",paraId:4,tocIndex:1},{value:"矩形树图",paraId:4,tocIndex:1},{value:"适合的数据",paraId:4,tocIndex:1},{value:"层次化数据：具有树状结构的嵌套数据，包含分类字段和数值字段",paraId:4,tocIndex:1},{value:"功能",paraId:4,tocIndex:1},{value:"展示层次化数据的比例关系和分布情况",paraId:4,tocIndex:1},{value:"数据与图形的映射",paraId:4,tocIndex:1},{value:"层级关系映射到嵌套矩形",paraId:4,tocIndex:1},{value:"数值大小映射到矩形面积",paraId:4,tocIndex:1},{value:"不同类别通过颜色和位置进行区分",paraId:4,tocIndex:1},{value:"适合的场景",paraId:4,tocIndex:1},{value:"文件系统、组织架构、预算分配、股票组合等具有清晰层次关系的数据展示",paraId:4,tocIndex:1},{value:"例子 1: ",paraId:5,tocIndex:3},{value:"展示文件系统结构",paraId:5,tocIndex:3},{value:"下图展示了软件项目文件系统的层次结构，通过矩形树图可以清晰地看到各个模块和文件的大小分布，帮助开发者了解代码结构。",paraId:6,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'treemap',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/flare-treemap.json',\n  },\n  layout: {\n    path: (d) => d.name.replace(/\\./g, '/'),\n    tile: 'treemapBinary',\n    paddingInner: 1,\n  },\n  encode: {\n    value: 'size',\n    color: (d) => d.parent?.data.name.split('.')[1] || 'root',\n  },\n  style: {\n    labelText: (d) => {\n      const name = d.data.name\n        .split('.')\n        .pop()\n        .split(/(?=[A-Z][a-z])/g)[0];\n      return name;\n    },\n    labelFill: '#000',\n    labelPosition: 'top-left',\n    labelDx: 3,\n    labelDy: 3,\n    fillOpacity: 0.7,\n  },\n  tooltip: {\n    title: (d) => d.path?.join?.('.') || d.data.name,\n    items: [{ field: 'value', name: '大小' }],\n  },\n});\n\nchart.render();\n",paraId:7,tocIndex:3},{value:"说明",paraId:8,tocIndex:3},{value:"：",paraId:8,tocIndex:3},{value:"使用 ",paraId:9,tocIndex:3},{value:"path",paraId:9,tocIndex:3},{value:" 配置将扁平化数据转换为层次结构",paraId:9,tocIndex:3},{value:"layout.tile",paraId:9,tocIndex:3},{value:" 设置为 ",paraId:9,tocIndex:3},{value:"treemapBinary",paraId:9,tocIndex:3},{value:" 使用二分布局算法",paraId:9,tocIndex:3},{value:"paddingInner",paraId:9,tocIndex:3},{value:" 设置矩形间的内边距，增强视觉分离效果",paraId:9,tocIndex:3},{value:"例子 2: ",paraId:10,tocIndex:3},{value:"展示预算分配情况",paraId:10,tocIndex:3},{value:"矩形树图非常适合展示预算在不同项目和子项目之间的分配情况，帮助管理者快速了解资源配置。",paraId:11,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nconst budgetData = {\n  name: '年度预算',\n  children: [\n    {\n      name: '研发部门',\n      children: [\n        { name: '前端开发', value: 1200 },\n        { name: '后端开发', value: 1500 },\n        { name: '测试', value: 800 },\n        { name: '设计', value: 600 },\n      ],\n    },\n    {\n      name: '市场部门',\n      children: [\n        { name: '广告投放', value: 2000 },\n        { name: '活动策划', value: 800 },\n        { name: '内容营销', value: 500 },\n      ],\n    },\n    {\n      name: '运营部门',\n      children: [\n        { name: '客户服务', value: 700 },\n        { name: '数据分析', value: 400 },\n        { name: '运营支持', value: 300 },\n      ],\n    },\n    { name: '其他支出', value: 1200 },\n  ],\n};\n\nchart.options({\n  type: 'treemap',\n  data: { value: budgetData },\n  layout: {\n    tile: 'treemapSquarify',\n    paddingInner: 2,\n  },\n  encode: {\n    value: 'value',\n    color: (d) => d.path[1] || d.data.name,\n  },\n  style: {\n    labelText: (d) => d.data.name,\n    labelFill: '#fff',\n    labelStroke: '#000',\n    labelLineWidth: 0.5,\n    labelFontSize: 12,\n  },\n  tooltip: {\n    title: (d) => d.data.name,\n    items: [\n      { field: 'value', name: '预算', valueFormatter: (v) => `${v}万元` },\n    ],\n  },\n});\n\nchart.render();\n",paraId:12,tocIndex:3},{value:"说明",paraId:13,tocIndex:3},{value:"：",paraId:13,tocIndex:3},{value:"使用层级结构数据，不需要配置 ",paraId:14,tocIndex:3},{value:"path",paraId:14,tocIndex:3},{value:"tile: 'treemapSquarify'",paraId:14,tocIndex:3},{value:" 使用黄金比例算法，产生更接近正方形的矩形",paraId:14,tocIndex:3},{value:"通过 ",paraId:14,tocIndex:3},{value:"labelPosition: 'center'",paraId:14,tocIndex:3},{value:" 将标签居中显示",paraId:14,tocIndex:3},{value:"例子 3: ",paraId:15,tocIndex:3},{value:"展示销售数据层次",paraId:15,tocIndex:3},{value:"矩形树图可以有效展示销售数据的多层级结构，从地区到产品类别再到具体产品。",paraId:16,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nconst salesData = {\n  name: '全国销售',\n  children: [\n    {\n      name: '华东地区',\n      children: [\n        {\n          name: '数码产品',\n          children: [\n            { name: '手机', value: 3200 },\n            { name: '电脑', value: 2800 },\n            { name: '平板', value: 1500 },\n          ],\n        },\n        {\n          name: '家电',\n          children: [\n            { name: '冰箱', value: 2100 },\n            { name: '洗衣机', value: 1800 },\n            { name: '空调', value: 2500 },\n          ],\n        },\n      ],\n    },\n    {\n      name: '华北地区',\n      children: [\n        {\n          name: '数码产品',\n          children: [\n            { name: '手机', value: 2800 },\n            { name: '电脑', value: 2400 },\n            { name: '平板', value: 1200 },\n          ],\n        },\n        {\n          name: '家电',\n          children: [\n            { name: '冰箱', value: 1900 },\n            { name: '洗衣机', value: 1600 },\n            { name: '空调', value: 2200 },\n          ],\n        },\n      ],\n    },\n    {\n      name: '华南地区',\n      children: [\n        { name: '数码产品', value: 2200 },\n        { name: '家电', value: 1800 },\n      ],\n    },\n  ],\n};\n\nchart.options({\n  type: 'treemap',\n  data: { value: salesData },\n  layout: {\n    tile: 'treemapSliceDice',\n    paddingInner: 3,\n    layer: 2, // 只显示前两层\n  },\n  encode: {\n    value: 'value',\n    color: (d) => d.path[1] || 'default',\n  },\n  style: {\n    labelText: (d) => {\n      const name = d.data.name;\n      const value = d.value;\n      return d.depth <= 1 ? `${name}\\n${Math.round(value)}万` : name;\n    },\n    labelFill: '#000',\n    labelFontSize: (d) =>\n      Math.max(10, Math.min(16, Math.sqrt(d.x1 - d.x0) * 2)),\n    stroke: '#fff',\n    lineWidth: 2,\n  },\n  interaction: {\n    treemapDrillDown: {\n      breadCrumbY: 12,\n      activeFill: '#873bf4',\n      breadCrumbFill: 'rgba(0, 0, 0, 0.85)',\n      breadCrumbFontSize: 12,\n    },\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:17,tocIndex:3},{value:"例子 1: ",paraId:18,tocIndex:4},{value:"数值差异极小的数据对比",paraId:18,tocIndex:4},{value:"当数据中各项目的数值差异很小时，矩形树图的面积差异不明显，用户难以感知到数值的细微差别。",paraId:19,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\n// 数值差异很小的数据\nconst similarData = {\n  name: '地区销售（相似数值）',\n  children: [\n    { name: '北京', value: 9995 },\n    { name: '上海', value: 10001 },\n    { name: '广州', value: 9999 },\n    { name: '深圳', value: 10003 },\n    { name: '杭州', value: 9997 },\n    { name: '南京', value: 10002 },\n  ],\n};\n\nchart.options({\n  type: 'treemap',\n  data: { value: similarData },\n  encode: { value: 'value' },\n  style: {\n    labelText: (d) => `${d.data.name}\\n${d.value}`,\n    labelFill: '#000',\n  },\n});\n\nchart.render();\n",paraId:20,tocIndex:4},{value:"柱状图（推荐）",paraId:21,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nconst similarDataFlat = [\n  { name: '北京', value: 9995 },\n  { name: '上海', value: 10001 },\n  { name: '广州', value: 9999 },\n  { name: '深圳', value: 10003 },\n  { name: '杭州', value: 9997 },\n  { name: '南京', value: 10002 },\n];\n\nchart.options({\n  type: 'interval',\n  data: similarDataFlat,\n  encode: { x: 'name', y: 'value', color: 'name' },\n  axis: {\n    y: { nice: false, domain: [9990, 10010] }, // 缩小Y轴范围突出差异\n  },\n});\n\nchart.render();\n",paraId:22,tocIndex:4},{value:"说明",paraId:23,tocIndex:4},{value:"：当数据值差异小于 5% 时，矩形树图的面积差异几乎不可感知，此时建议使用柱状图并调整 Y 轴范围来突出差异。",paraId:23,tocIndex:4},{value:"例子 2: ",paraId:24,tocIndex:4},{value:"非层次化的简单分类数据",paraId:24,tocIndex:4},{value:"对于没有层次关系的简单分类数据，矩形树图会显得过于复杂，不如饼图或柱状图直观。",paraId:25,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\n// 简单的分类数据，没有层次关系\nconst simpleData = {\n  name: '产品销量',\n  children: [\n    { name: '产品A', value: 230 },\n    { name: '产品B', value: 180 },\n    { name: '产品C', value: 150 },\n    { name: '产品D', value: 120 },\n  ],\n};\n\nchart.options({\n  type: 'treemap',\n  data: { value: simpleData },\n  encode: { value: 'value' },\n  style: {\n    labelText: (d) => d.data.name,\n    labelFill: '#000',\n  },\n});\n\nchart.render();\n",paraId:26,tocIndex:4},{value:"饼图（推荐）",paraId:27,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nconst simpleDataFlat = [\n  { name: '产品A', value: 230 },\n  { name: '产品B', value: 180 },\n  { name: '产品C', value: 150 },\n  { name: '产品D', value: 120 },\n];\n\nchart.options({\n  type: 'interval',\n  data: simpleDataFlat,\n  encode: { y: 'value', color: 'name' },\n  transform: [{ type: 'stackY' }],\n  coordinate: { type: 'theta' },\n  legend: {\n    color: { position: 'right' },\n  },\n});\n\nchart.render();\n",paraId:28,tocIndex:4},{value:"说明",paraId:29,tocIndex:4},{value:"：对于简单的分类占比数据，饼图能更直观地展示各部分在整体中的比例关系。",paraId:29,tocIndex:4},{value:"矩形树图最强大的功能之一是支持下钻交互，用户可以点击某个区域来深入查看该层级的详细信息：",paraId:30,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nconst drillDownData = {\n  name: '商品',\n  children: [\n    {\n      name: '文具',\n      children: [\n        {\n          name: '笔类',\n          children: [\n            { name: '铅笔', value: 430 },\n            { name: '圆珠笔', value: 530 },\n            { name: '钢笔', value: 80 },\n            { name: '水彩笔', value: 130 },\n          ],\n        },\n        { name: '笔记本', value: 160 },\n        { name: '文件夹', value: 90 },\n        { name: '其他', value: 80 },\n      ],\n    },\n    {\n      name: '零食',\n      children: [\n        { name: '饼干', value: 280 },\n        { name: '辣条', value: 150 },\n        { name: '糖果', value: 210 },\n        {\n          name: '饮品',\n          children: [\n            { name: '可乐', value: 122 },\n            { name: '矿泉水', value: 244 },\n            { name: '果汁', value: 49 },\n            { name: '牛奶', value: 82 },\n          ],\n        },\n        { name: '其他', value: 40 },\n      ],\n    },\n    { name: '其他商品', value: 450 },\n  ],\n};\n\nchart.options({\n  type: 'treemap',\n  data: { value: drillDownData },\n  layout: {\n    tile: 'treemapBinary',\n    paddingInner: 5,\n  },\n  encode: { value: 'value' },\n  style: {\n    labelFill: '#000',\n    labelStroke: '#fff',\n    labelLineWidth: 1.5,\n    labelFontSize: 14,\n    labelPosition: 'top-left',\n    labelDx: 5,\n    labelDy: 5,\n  },\n  interaction: {\n    treemapDrillDown: {\n      breadCrumbY: 12,\n      activeFill: '#873bf4',\n      breadCrumbFill: 'rgba(0, 0, 0, 0.85)',\n      breadCrumbFontSize: 12,\n    },\n  },\n  tooltip: {\n    title: (d) => d.data.name,\n    items: [{ field: 'value', name: '数量' }],\n  },\n});\n\nchart.render();\n",paraId:31,tocIndex:6},{value:"通过丰富的样式配置，可以创建个性化的矩形树图：",paraId:32,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nconst customData = {\n  name: '技术栈',\n  children: [\n    {\n      name: '前端',\n      children: [\n        { name: 'React', value: 45 },\n        { name: 'Vue', value: 35 },\n        { name: 'Angular', value: 20 },\n      ],\n    },\n    {\n      name: '后端',\n      children: [\n        { name: 'Node.js', value: 40 },\n        { name: 'Python', value: 35 },\n        { name: 'Java', value: 25 },\n      ],\n    },\n    {\n      name: '数据库',\n      children: [\n        { name: 'MySQL', value: 50 },\n        { name: 'MongoDB', value: 30 },\n        { name: 'Redis', value: 20 },\n      ],\n    },\n  ],\n};\n\nchart.options({\n  type: 'treemap',\n  data: { value: customData },\n  layout: {\n    tile: 'treemapResquarify',\n    paddingInner: 4,\n    paddingOuter: 2,\n  },\n  encode: {\n    value: 'value',\n    color: (d) => d.path[1] || 'default',\n  },\n  scale: {\n    color: {\n      range: ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD'],\n    },\n  },\n  style: {\n    labelText: (d) => d.data.name,\n    labelFill: '#fff',\n    labelStroke: '#000',\n    labelLineWidth: 1,\n    labelFontSize: (d) => Math.max(10, Math.min(18, (d.x1 - d.x0) * 0.1)),\n    labelFontWeight: 'bold',\n    stroke: '#fff',\n    lineWidth: 3,\n    radius: 4, // 圆角\n    fillOpacity: 0.9,\n    shadowColor: 'rgba(0, 0, 0, 0.1)',\n    shadowBlur: 4,\n    shadowOffsetX: 2,\n    shadowOffsetY: 2,\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n    },\n  ],\n});\n\nchart.render();\n",paraId:33,tocIndex:7},{value:"通过渐变色可以增强矩形树图的视觉效果：",paraId:34,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nconst gradientData = {\n  name: '市场份额',\n  children: [\n    { name: '阿里巴巴', value: 28 },\n    { name: '腾讯', value: 25 },\n    { name: '字节跳动', value: 18 },\n    { name: '美团', value: 15 },\n    { name: '京东', value: 12 },\n    { name: '百度', value: 10 },\n    { name: '网易', value: 8 },\n    { name: '小米', value: 7 },\n    { name: '滴滴', value: 6 },\n    { name: '拼多多', value: 5 },\n    { name: '新浪', value: 4 },\n    { name: '搜狐', value: 3 },\n    { name: '360', value: 2 },\n    { name: '其他', value: 7 },\n  ],\n};\n\nchart.options({\n  type: 'treemap',\n  data: { value: gradientData },\n  layout: {\n    tile: 'treemapSquarify',\n    paddingInner: 3,\n  },\n  encode: {\n    value: 'value',\n    color: 'value',\n  },\n  scale: {\n    color: {\n      type: 'sequential',\n      range: ['#E8F4FD', '#1890FF'],\n    },\n  },\n  style: {\n    labelText: (d) => `${d.data.name}\\n${d.value}%`,\n    labelFill: (d) => (d.value > 20 ? '#fff' : '#000'),\n    labelFontSize: 14,\n    labelFontWeight: 'bold',\n    stroke: '#fff',\n    lineWidth: 2,\n  },\n  tooltip: {\n    title: (d) => d.data.name,\n    items: [\n      { field: 'value', name: '市场份额', valueFormatter: (v) => `${v}%` },\n    ],\n  },\n});\n\nchart.render();\n",paraId:35,tocIndex:8},{value:"旭日图",paraId:36,tocIndex:9},{value:"矩形树图和旭日图都可以展示层次化数据，但有不同的特点：",paraId:37,tocIndex:10},{value:"对比维度",paraId:38,tocIndex:10},{value:"矩形树图",paraId:38,tocIndex:10},{value:"旭日图",paraId:38,tocIndex:10},{value:"视觉形式",paraId:38,tocIndex:10},{value:"矩形布局",paraId:38,tocIndex:10},{value:"圆形布局",paraId:38,tocIndex:10},{value:"空间利用",paraId:38,tocIndex:10},{value:"矩形填充，利用率高",paraId:38,tocIndex:10},{value:"圆形边界，利用率较低",paraId:38,tocIndex:10},{value:"比例感知",paraId:38,tocIndex:10},{value:"面积比较，更准确",paraId:38,tocIndex:10},{value:"角度比较，适中",paraId:38,tocIndex:10},{value:"层次展示",paraId:38,tocIndex:10},{value:"嵌套矩形，包含关系明确",paraId:38,tocIndex:10},{value:"同心圆，层次关系清晰",paraId:38,tocIndex:10},{value:"适用场景",paraId:38,tocIndex:10},{value:"强调精确的比例对比",paraId:38,tocIndex:10},{value:"强调层次关系和整体结构",paraId:38,tocIndex:10},{value:"饼图",paraId:39,tocIndex:10},{value:"矩形树图相比饼图的优势：",paraId:40,tocIndex:11},{value:"层次化数据",paraId:41,tocIndex:11},{value:"：矩形树图可以展示多层级数据，而饼图只能展示单层级",paraId:41,tocIndex:11},{value:"空间利用",paraId:41,tocIndex:11},{value:"：矩形树图能更有效利用空间，展示更多信息",paraId:41,tocIndex:11},{value:"精确比较",paraId:41,tocIndex:11},{value:"：矩形面积比角度更容易进行精确比较",paraId:41,tocIndex:11},{value:"交互性",paraId:41,tocIndex:11},{value:"：支持下钻交互，可以逐层探索数据",paraId:41,tocIndex:11},{value:"饼图的优势：",paraId:42,tocIndex:11},{value:"整体感知",paraId:43,tocIndex:11},{value:"：更好地展示各部分与整体的关系",paraId:43,tocIndex:11},{value:"简洁性",paraId:43,tocIndex:11},{value:"：对于简单分类数据更清晰易懂",paraId:43,tocIndex:11}]},51078:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(34276);const t=[{value:"韦恩图是一种用圆形或其他封闭曲线来表示集合及其关系的图表，由英国数学家约翰·韦恩（John Venn）于 1880 年发明。韦恩图通过重叠的区域来显示不同集合之间的交集、并集和差集关系，是数据可视化中展示集合关系的经典图表类型。",paraId:0,tocIndex:0},{value:"韦恩图特别适合展示不同数据集合之间的关系，如用户群体的重叠关系、产品功能的交集、市场分析中的重叠用户等。通过直观的圆形区域和重叠部分，能够清晰地表达复杂的集合逻辑关系。",paraId:1,tocIndex:0},{value:"当需要分析多个群体或类别之间的共同点和差异时，韦恩图是一个非常有效的可视化工具。它能够帮助用户快速理解数据之间的包含、交叉和独立关系。",paraId:2,tocIndex:0},{value:"英文名",paraId:3,tocIndex:0},{value:"：Venn Diagram",paraId:3,tocIndex:0},{value:"图表类型",paraId:4,tocIndex:2},{value:"基础韦恩图",paraId:4,tocIndex:2},{value:"适合的数据",paraId:4,tocIndex:2},{value:"集合数据：包含集合名称、集合大小、交集关系的数据",paraId:4,tocIndex:2},{value:"功能",paraId:4,tocIndex:2},{value:"展示不同集合之间的交集、并集和独立关系",paraId:4,tocIndex:2},{value:"数据与图形的映射",paraId:4,tocIndex:2},{value:"集合名称映射到圆形区域",paraId:4,tocIndex:2},{value:"集合大小映射到圆形面积",paraId:4,tocIndex:2},{value:"交集关系通过重叠区域表示",paraId:4,tocIndex:2},{value:"适合的场景",paraId:4,tocIndex:2},{value:"2-4 个集合的关系分析，用户群体分析，产品功能对比",paraId:4,tocIndex:2},{value:"图表类型",paraId:5,tocIndex:3},{value:"空心韦恩图",paraId:5,tocIndex:3},{value:"适合的数据",paraId:5,tocIndex:3},{value:"集合数据：包含集合名称、集合大小、交集关系的数据",paraId:5,tocIndex:3},{value:"功能",paraId:5,tocIndex:3},{value:"突出边界线条，减少色彩干扰，更清晰地展示集合边界",paraId:5,tocIndex:3},{value:"数据与图形的映射",paraId:5,tocIndex:3},{value:"集合名称映射到圆形边界",paraId:5,tocIndex:3},{value:"集合大小映射到圆形面积",paraId:5,tocIndex:3},{value:"空心设计突出结构关系",paraId:5,tocIndex:3},{value:"适合的场景",paraId:5,tocIndex:3},{value:"需要强调集合边界的场景，黑白打印友好的展示",paraId:5,tocIndex:3},{value:"例子 1: ",paraId:6,tocIndex:5},{value:"用户群体重叠分析",paraId:6,tocIndex:5},{value:"下图展示了不同平台用户群体的重叠关系，帮助了解用户在多个平台之间的分布情况。",paraId:7,tocIndex:5},{value:"描述",paraId:8,tocIndex:5},{value:"集合",paraId:8,tocIndex:5},{value:"用户数",paraId:8,tocIndex:5},{value:"仅使用微信",paraId:8,tocIndex:5},{value:"['微信']",paraId:8,tocIndex:5},{value:"1200",paraId:8,tocIndex:5},{value:"仅使用微博",paraId:8,tocIndex:5},{value:"['微博']",paraId:8,tocIndex:5},{value:"800",paraId:8,tocIndex:5},{value:"仅使用抖音",paraId:8,tocIndex:5},{value:"['抖音']",paraId:8,tocIndex:5},{value:"1000",paraId:8,tocIndex:5},{value:"微信+微博用户",paraId:8,tocIndex:5},{value:"['微信', '微博']",paraId:8,tocIndex:5},{value:"300",paraId:8,tocIndex:5},{value:"微信+抖音用户",paraId:8,tocIndex:5},{value:"['微信', '抖音']",paraId:8,tocIndex:5},{value:"400",paraId:8,tocIndex:5},{value:"微博+抖音用户",paraId:8,tocIndex:5},{value:"['微博', '抖音']",paraId:8,tocIndex:5},{value:"200",paraId:8,tocIndex:5},{value:"三平台都使用",paraId:8,tocIndex:5},{value:"['微信', '微博', '抖音']",paraId:8,tocIndex:5},{value:"150",paraId:8,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'path',\n  data: {\n    type: 'inline',\n    value: [\n      { sets: ['微信'], size: 1200, label: '微信' },\n      { sets: ['微博'], size: 800, label: '微博' },\n      { sets: ['抖音'], size: 1000, label: '抖音' },\n      { sets: ['微信', '微博'], size: 300, label: '微信&微博' },\n      { sets: ['微信', '抖音'], size: 400, label: '微信&抖音' },\n      { sets: ['微博', '抖音'], size: 200, label: '微博&抖音' },\n      { sets: ['微信', '微博', '抖音'], size: 150 },\n    ],\n    transform: [\n      {\n        type: 'venn',\n      },\n    ],\n  },\n  encode: {\n    d: 'path',\n    color: 'key',\n  },\n  labels: [\n    {\n      position: 'inside',\n      text: (d) => d.label || '',\n    },\n  ],\n  style: {\n    opacity: (d) => (d.sets.length > 1 ? 0.3 : 0.7),\n  },\n  state: {\n    inactive: { opacity: 0.2 },\n    active: { opacity: 0.9 },\n  },\n  interactions: [{ type: 'elementHighlight' }],\n  legend: false,\n});\n\nchart.render();\n",paraId:9,tocIndex:5},{value:"说明",paraId:10,tocIndex:5},{value:"：",paraId:10,tocIndex:5},{value:"sets",paraId:11,tocIndex:5},{value:" 字段定义集合关系，单个集合用一个元素，交集用多个元素",paraId:11,tocIndex:5},{value:"size",paraId:11,tocIndex:5},{value:" 字段映射到圆形面积大小，表示用户数量",paraId:11,tocIndex:5},{value:"padding",paraId:11,tocIndex:5},{value:" 参数控制画布内边距，避免图形被裁切",paraId:11,tocIndex:5},{value:"使用透明度区分单独集合和交集区域",paraId:11,tocIndex:5},{value:"例子 2: ",paraId:12,tocIndex:5},{value:"产品功能对比分析",paraId:12,tocIndex:5},{value:"韦恩图可以清晰地展示不同产品功能的重叠情况，帮助产品经理进行功能规划。",paraId:13,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'path',\n  data: {\n    type: 'inline',\n    value: [\n      { sets: ['产品A'], size: 25, label: 'A' },\n      { sets: ['产品B'], size: 20, label: 'B' },\n      { sets: ['产品A', '产品B'], size: 15, label: '共同' },\n    ],\n    transform: [\n      {\n        type: 'venn',\n      },\n    ],\n  },\n  encode: {\n    d: 'path',\n    color: 'key',\n  },\n  labels: [\n    {\n      position: 'inside',\n      text: (d) => d.label,\n      style: {\n        fontSize: 12,\n        fontWeight: 'bold',\n      },\n      transform: [\n        {\n          type: 'overlapDodgeY',\n        },\n      ],\n    },\n  ],\n  style: {\n    fillOpacity: 0.6,\n    stroke: '#fff',\n    lineWidth: 2,\n  },\n  scale: {\n    color: {\n      range: ['#1890FF', '#52C41A', '#FF7A45'],\n    },\n  },\n  tooltip: {\n    items: [\n      {\n        name: '功能数量',\n        field: 'size',\n      },\n      {\n        name: '集合',\n        field: 'key',\n      },\n    ],\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:14,tocIndex:5},{value:"说明",paraId:15,tocIndex:5},{value:"：",paraId:15,tocIndex:5},{value:"使用自定义颜色方案突出不同产品的特色",paraId:16,tocIndex:5},{value:"添加边框线条增强视觉分离效果",paraId:16,tocIndex:5},{value:"配置详细的 tooltip 信息展示",paraId:16,tocIndex:5},{value:"例子 3: ",paraId:17,tocIndex:5},{value:"技能重叠分析",paraId:17,tocIndex:5},{value:"展示团队成员技能的重叠情况，帮助项目分工和团队建设。",paraId:18,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'path',\n  data: {\n    type: 'inline',\n    value: [\n      { sets: ['前端'], size: 12, label: '前端' },\n      { sets: ['后端'], size: 15, label: '后端' },\n      { sets: ['设计'], size: 8, label: '设计' },\n      { sets: ['前端', '后端'], size: 5, label: '全栈' },\n      { sets: ['前端', '设计'], size: 3, label: '前端+设计' },\n      { sets: ['后端', '设计'], size: 2, label: '后端+设计' },\n      { sets: ['前端', '后端', '设计'], size: 1, label: '全能' },\n    ],\n    transform: [\n      {\n        type: 'venn',\n        padding: 15,\n      },\n    ],\n  },\n  encode: {\n    d: 'path',\n    color: 'key',\n  },\n  labels: [\n    {\n      position: 'inside',\n      text: (d) => `${d.label}\\n(${d.size}人)`,\n      style: {\n        fontSize: 10,\n        textAlign: 'center',\n      },\n      transform: [\n        {\n          type: 'overlapDodgeY',\n        },\n      ],\n    },\n  ],\n  style: {\n    fillOpacity: 0.5,\n  },\n  interactions: [{ type: 'elementHighlight' }],\n  legend: {\n    color: {\n      position: 'bottom',\n      layout: { justifyContent: 'center' },\n    },\n  },\n});\n\nchart.render();\n",paraId:19,tocIndex:5},{value:"说明",paraId:20,tocIndex:5},{value:"：",paraId:20,tocIndex:5},{value:"在标签中同时显示技能类型和人数",paraId:21,tocIndex:5},{value:"使用交互高亮效果增强用户体验",paraId:21,tocIndex:5},{value:"适当的透明度设置便于查看重叠区域",paraId:21,tocIndex:5},{value:"例子 1: ",paraId:22,tocIndex:6},{value:"集合数量过多时不适合使用韦恩图",paraId:22,tocIndex:6},{value:"当集合数量超过 4 个时，韦恩图会变得过于复杂，重叠关系难以清晰表达。",paraId:23,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\n// 5个集合的韦恩图 - 不推荐\nchart.options({\n  type: 'path',\n  data: {\n    type: 'inline',\n    value: [\n      { sets: ['A'], size: 10, label: 'A' },\n      { sets: ['B'], size: 10, label: 'B' },\n      { sets: ['C'], size: 10, label: 'C' },\n      { sets: ['D'], size: 10, label: 'D' },\n      { sets: ['E'], size: 10, label: 'E' },\n      { sets: ['A', 'B'], size: 3 },\n      { sets: ['A', 'C'], size: 3 },\n      { sets: ['A', 'D'], size: 3 },\n      { sets: ['B', 'C'], size: 3 },\n      { sets: ['B', 'D'], size: 3 },\n      { sets: ['C', 'D'], size: 3 },\n      { sets: ['A', 'B', 'C'], size: 1 },\n      { sets: ['A', 'B', 'D'], size: 1 },\n      { sets: ['A', 'C', 'D'], size: 1 },\n      { sets: ['B', 'C', 'D'], size: 1 },\n    ],\n    transform: [\n      {\n        type: 'venn',\n        padding: 10,\n      },\n    ],\n  },\n  encode: {\n    d: 'path',\n    color: 'key',\n  },\n  labels: [\n    {\n      position: 'inside',\n      text: (d) => d.label || '',\n    },\n  ],\n  style: {\n    fillOpacity: 0.4,\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:24,tocIndex:6},{value:"说明",paraId:25,tocIndex:6},{value:"：上图中 5 个集合产生了过多的重叠区域，视觉上混乱难读。此种情况下，推荐使用",paraId:25,tocIndex:6},{value:"旭日图",paraId:26,tocIndex:6},{value:"或",paraId:25,tocIndex:6},{value:"桑基图",paraId:27,tocIndex:6},{value:"。",paraId:25,tocIndex:6},{value:"例子 2: ",paraId:28,tocIndex:6},{value:"数据差异极大时不适合使用韦恩图",paraId:28,tocIndex:6},{value:"当集合大小差异极大时，小集合可能无法清晰显示。",paraId:29,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'path',\n  data: {\n    type: 'inline',\n    value: [\n      { sets: ['大型企业'], size: 10000, label: '大型企业' },\n      { sets: ['中型企业'], size: 1000, label: '中型企业' },\n      { sets: ['小型企业'], size: 100, label: '小型企业' },\n      { sets: ['大型企业', '中型企业'], size: 200 },\n      { sets: ['中型企业', '小型企业'], size: 50 },\n      { sets: ['大型企业', '小型企业'], size: 10 },\n    ],\n    transform: [\n      {\n        type: 'venn',\n        padding: 10,\n      },\n    ],\n  },\n  encode: {\n    d: 'path',\n    color: 'key',\n  },\n  labels: [\n    {\n      position: 'inside',\n      text: (d) => d.label || '',\n    },\n  ],\n  style: {\n    fillOpacity: 0.6,\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:30,tocIndex:6},{value:"说明",paraId:31,tocIndex:6},{value:"：上图中小型企业的圆形区域过小，难以清晰展示。此时建议使用",paraId:31,tocIndex:6},{value:"树图",paraId:32,tocIndex:6},{value:"或将数据进行归一化处理。",paraId:31,tocIndex:6},{value:"空心韦恩图通过去除填充色，仅保留边框线条，适合需要突出边界关系的场景。",paraId:33,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'path',\n  data: {\n    type: 'inline',\n    value: [\n      { sets: ['iOS'], size: 15, label: 'iOS用户' },\n      { sets: ['Android'], size: 12, label: 'Android用户' },\n      { sets: ['Web'], size: 10, label: 'Web用户' },\n      { sets: ['iOS', 'Android'], size: 2, label: '双端用户' },\n      { sets: ['iOS', 'Web'], size: 2, label: 'iOS+Web' },\n      { sets: ['Android', 'Web'], size: 1, label: 'Android+Web' },\n      { sets: ['iOS', 'Android', 'Web'], size: 1 },\n    ],\n    transform: [\n      {\n        type: 'venn',\n        padding: 10,\n      },\n    ],\n  },\n  encode: {\n    d: 'path',\n    color: 'key',\n    shape: 'hollow',\n  },\n  labels: [\n    {\n      position: 'inside',\n      text: (d) => d.label || '',\n      fill: '#000',\n      style: {\n        fontSize: 11,\n      },\n    },\n  ],\n  style: {\n    opacity: 0.8,\n    lineWidth: 3,\n  },\n  tooltip: false,\n});\n\nchart.render();\n",paraId:34,tocIndex:8},{value:"说明",paraId:35,tocIndex:8},{value:"：",paraId:35,tocIndex:8},{value:"使用 ",paraId:36,tocIndex:8},{value:"shape: 'hollow'",paraId:36,tocIndex:8},{value:" 创建空心效果",paraId:36,tocIndex:8},{value:"适合黑白打印和需要突出结构的场景",paraId:36,tocIndex:8},{value:"标签颜色设置为黑色以确保可读性",paraId:36,tocIndex:8},{value:"通过自定义颜色和样式，创建更具品牌特色的韦恩图。",paraId:37,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'path',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/lastfm.json',\n    transform: [\n      {\n        type: 'venn',\n        padding: 12,\n        sets: 'sets',\n        size: 'size',\n        as: ['key', 'path'],\n      },\n    ],\n  },\n  encode: {\n    d: 'path',\n    color: 'key',\n  },\n  labels: [\n    {\n      position: 'inside',\n      text: (d) => d.label || '',\n      style: {\n        fontSize: 12,\n        fontWeight: 'bold',\n      },\n      transform: [{ type: 'contrastReverse' }],\n    },\n  ],\n  style: {\n    opacity: (d) => (d.sets.length > 1 ? 0.4 : 0.7),\n    stroke: '#fff',\n    lineWidth: 2,\n  },\n  scale: {\n    color: {\n      range: ['#667eea', '#764ba2', '#f093fb'],\n    },\n  },\n  state: {\n    inactive: { opacity: 0.1 },\n    active: { opacity: 0.9 },\n  },\n  interactions: [{ type: 'elementHighlight' }],\n  legend: false,\n});\n\nchart.render();\n",paraId:38,tocIndex:9},{value:"说明",paraId:39,tocIndex:9},{value:"：",paraId:39,tocIndex:9},{value:"使用渐变色彩方案提升视觉效果",paraId:40,tocIndex:9},{value:"添加白色边框增强区域分离",paraId:40,tocIndex:9},{value:"交互状态配置提升用户体验",paraId:40,tocIndex:9},{value:"旭日图",paraId:41,tocIndex:10},{value:"韦恩图适合展示集合的交集关系，突出重叠部分",paraId:42,tocIndex:11},{value:"旭日图适合展示层次结构和分类关系，突出包含关系",paraId:42,tocIndex:11},{value:"桑基图",paraId:43,tocIndex:11},{value:"韦恩图展示静态的集合关系，适合分析现状",paraId:44,tocIndex:12},{value:"桑基图展示流动关系，适合分析数据的流向和转化",paraId:44,tocIndex:12},{value:"树图",paraId:45,tocIndex:12},{value:"韦恩图强调集合的重叠关系，适合关系分析",paraId:46,tocIndex:13},{value:"树图强调层次结构和占比关系，适合结构分析",paraId:46,tocIndex:13}]},25631:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(62059);const t=[{value:"小提琴图（Violin Plot）是一种结合了",paraId:0,tocIndex:0},{value:"箱形图",paraId:1,tocIndex:0},{value:"和",paraId:0,tocIndex:0},{value:"核密度估计",paraId:2,tocIndex:0},{value:"的数据可视化图表，用于展示数据的分布形状和统计摘要。小提琴图的形状类似小提琴，因此得名。",paraId:0,tocIndex:0},{value:"小提琴图通过密度曲线展示数据在不同数值区间的分布密度，同时叠加箱形图的统计信息（如中位数、四分位数等），能够更直观地反映数据的分布特征，包括多峰性、偏态以及异常值情况。",paraId:3,tocIndex:0},{value:"相比传统的箱形图，小提琴图提供了更丰富的分布信息，特别适合用于比较多个组别的数据分布特征，是探索性数据分析和统计可视化的重要工具。",paraId:4,tocIndex:0},{value:"英文名",paraId:5,tocIndex:0},{value:"：Violin Plot",paraId:5,tocIndex:0},{value:"图表类型",paraId:6,tocIndex:2},{value:"小提琴图",paraId:6,tocIndex:2},{value:"适合的数据",paraId:6,tocIndex:2},{value:"一个分类数据字段、一个连续数据字段",paraId:6,tocIndex:2},{value:"功能",paraId:6,tocIndex:2},{value:"展示数据分布的形状、密度和统计摘要，比较不同分组的分布特征",paraId:6,tocIndex:2},{value:"数据与图形的映射",paraId:6,tocIndex:2},{value:"分类数据字段映射到横轴位置",paraId:6,tocIndex:2},{value:"连续数据字段通过 KDE 转换为密度分布",paraId:6,tocIndex:2},{value:"统计值映射到箱形图元素",paraId:6,tocIndex:2},{value:"密度映射到图形宽度",paraId:6,tocIndex:2},{value:"适合的数据条数",paraId:6,tocIndex:2},{value:"每个分组建议至少有 20-30 个数据点",paraId:6,tocIndex:2},{value:"小提琴图的主要组成部分包括：",paraId:7,tocIndex:2},{value:"密度轮廓",paraId:8,tocIndex:2},{value:"：通过核密度估计（KDE）生成的平滑曲线，展示数据在不同数值处的密度分布",paraId:8,tocIndex:2},{value:"箱形图",paraId:8,tocIndex:2},{value:"：叠加在密度轮廓上的传统箱形图，显示中位数、四分位数等统计信息",paraId:8,tocIndex:2},{value:"中位线",paraId:8,tocIndex:2},{value:"：标示数据的中位数位置",paraId:8,tocIndex:2},{value:"四分位数线",paraId:8,tocIndex:2},{value:"：标示上下四分位数的位置",paraId:8,tocIndex:2},{value:"异常值",paraId:8,tocIndex:2},{value:"：超出正常范围的数据点",paraId:8,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/species.json',\n  },\n  children: [\n    {\n      type: 'density',\n      data: {\n        transform: [\n          {\n            type: 'kde',\n            field: 'y',\n            groupBy: ['x', 'species'],\n          },\n        ],\n      },\n      encode: {\n        x: 'x',\n        y: 'y',\n        series: 'species',\n        color: 'species',\n        size: 'size',\n      },\n      tooltip: false,\n    },\n    {\n      type: 'boxplot',\n      encode: {\n        x: 'x',\n        y: 'y',\n        series: 'species',\n        color: 'species',\n        shape: 'violin',\n      },\n      style: {\n        opacity: 0.5,\n        strokeOpacity: 0.5,\n        point: false,\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:9,tocIndex:2},{value:"图表类型",paraId:10,tocIndex:3},{value:"核密度图",paraId:10,tocIndex:3},{value:"适合的数据",paraId:10,tocIndex:3},{value:"一个分类数据字段、一个连续数据字段",paraId:10,tocIndex:3},{value:"功能",paraId:10,tocIndex:3},{value:"展示数据的概率密度分布，识别数据的分布模式",paraId:10,tocIndex:3},{value:"数据与图形的映射",paraId:10,tocIndex:3},{value:"分类数据字段映射到横轴位置",paraId:10,tocIndex:3},{value:"连续数据字段通过 KDE 转换为密度分布",paraId:10,tocIndex:3},{value:"密度值映射到区域大小",paraId:10,tocIndex:3},{value:"适合的数据条数",paraId:10,tocIndex:3},{value:"建议至少有 50+ 个数据点",paraId:10,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'density',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/species.json',\n    transform: [\n      {\n        type: 'kde',\n        field: 'y',\n        groupBy: ['x'],\n        size: 20,\n      },\n    ],\n  },\n  encode: {\n    x: 'x',\n    y: 'y',\n    color: 'x',\n    size: 'size',\n  },\n  tooltip: false,\n});\n\nchart.render();\n",paraId:11,tocIndex:3},{value:"图表类型",paraId:12,tocIndex:4},{value:"极坐标小提琴图",paraId:12,tocIndex:4},{value:"适合的数据",paraId:12,tocIndex:4},{value:"循环性或周期性数据：时间序列、角度数据等",paraId:12,tocIndex:4},{value:"功能",paraId:12,tocIndex:4},{value:"在极坐标系中展示数据分布，适合周期性或循环性数据的可视化",paraId:12,tocIndex:4},{value:"数据与图形的映射",paraId:12,tocIndex:4},{value:"分类数据字段映射到角度",paraId:12,tocIndex:4},{value:"连续数据字段映射到径向距离",paraId:12,tocIndex:4},{value:"密度信息通过 KDE 转换后映射到区域形状",paraId:12,tocIndex:4},{value:"适合的场景",paraId:12,tocIndex:4},{value:"时间周期分析、方向性数据分析",paraId:12,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  coordinate: { type: 'polar' },\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/species.json',\n  },\n  children: [\n    {\n      type: 'density',\n      data: {\n        transform: [\n          {\n            type: 'kde',\n            field: 'y',\n            groupBy: ['x', 'species'],\n          },\n        ],\n      },\n      encode: {\n        x: 'x',\n        y: 'y',\n        series: 'species',\n        color: 'species',\n        size: 'size',\n      },\n      tooltip: false,\n    },\n    {\n      type: 'boxplot',\n      encode: {\n        x: 'x',\n        y: 'y',\n        series: 'species',\n        color: 'species',\n        shape: 'violin',\n      },\n      style: {\n        opacity: 0.5,\n        strokeOpacity: 0.5,\n        point: false,\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:13,tocIndex:4},{value:"例子 1: ",paraId:14,tocIndex:6},{value:"多组数据分布比较",paraId:14,tocIndex:6},{value:"当需要比较多个组别或类别的数据分布特征时，小提琴图能够同时展示每个组的分布形状、集中趋势和离散程度，便于发现组间差异。",paraId:15,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/species.json',\n  },\n  children: [\n    {\n      type: 'density',\n      data: {\n        transform: [\n          {\n            type: 'kde',\n            field: 'y',\n            groupBy: ['x', 'species'],\n          },\n        ],\n      },\n      encode: {\n        x: 'x',\n        y: 'y',\n        series: 'species',\n        color: 'species',\n        size: 'size',\n      },\n      tooltip: false,\n    },\n    {\n      type: 'boxplot',\n      encode: {\n        x: 'x',\n        y: 'y',\n        series: 'species',\n        color: 'species',\n        shape: 'violin',\n      },\n      style: {\n        opacity: 0.5,\n        strokeOpacity: 0.5,\n        point: false,\n      },\n    },\n  ],\n  axis: {\n    x: { title: '分组' },\n    y: { title: '数值分布' },\n  },\n});\n\nchart.render();\n",paraId:16,tocIndex:6},{value:"例子 2: ",paraId:17,tocIndex:6},{value:"探索数据分布模式",paraId:17,tocIndex:6},{value:"用于识别数据的分布特征，如是否为正态分布、是否存在多峰性、偏态程度等，比箱形图提供更丰富的分布信息。",paraId:18,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'density',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/species.json',\n    transform: [\n      {\n        type: 'kde',\n        field: 'y',\n        groupBy: ['x'],\n        size: 30,\n      },\n    ],\n  },\n  encode: {\n    x: 'x',\n    y: 'y',\n    color: 'x',\n    size: 'size',\n  },\n  style: {\n    fillOpacity: 0.6,\n    stroke: '#FFF',\n    lineWidth: 1,\n  },\n  axis: {\n    x: { title: '类别' },\n    y: { title: '密度分布' },\n  },\n  tooltip: {\n    title: (d) => `类别: ${d.x}`,\n    items: [\n      { field: 'y', name: '密度值' },\n      { field: 'size', name: '概率' },\n    ],\n  },\n});\n\nchart.render();\n",paraId:19,tocIndex:6},{value:"例子 3: ",paraId:20,tocIndex:6},{value:"异常值检测",paraId:20,tocIndex:6},{value:"结合密度分布和箱形图的统计信息，可以更准确地识别和理解异常值的存在及其在整体分布中的位置。",paraId:21,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/morley.json',\n  },\n  children: [\n    {\n      type: 'density',\n      data: {\n        transform: [\n          {\n            type: 'kde',\n            field: 'Speed',\n            groupBy: ['Expt'],\n          },\n        ],\n      },\n      encode: {\n        x: 'Expt',\n        y: 'Speed',\n        size: 'size',\n        color: 'Expt',\n      },\n      style: {\n        fillOpacity: 0.4,\n      },\n      tooltip: false,\n    },\n    {\n      type: 'boxplot',\n      encode: {\n        x: 'Expt',\n        y: 'Speed',\n        color: 'Expt',\n        shape: 'violin',\n      },\n      style: {\n        opacity: 0.8,\n        point: { fill: 'red', size: 3 },\n      },\n    },\n  ],\n  axis: {\n    x: { title: '实验组' },\n    y: { title: '光速测量值' },\n  },\n});\n\nchart.render();\n",paraId:22,tocIndex:6},{value:"❌ ",paraId:23,tocIndex:7},{value:"数据量过少",paraId:23,tocIndex:7},{value:"：每个分组的数据点少于 20 个时，核密度估计可能不够准确，建议使用箱形图或散点图。",paraId:23,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\n// 模拟少量数据\nconst smallData = [\n  { group: 'A', value: 12 },\n  { group: 'A', value: 15 },\n  { group: 'A', value: 13 },\n  { group: 'B', value: 18 },\n  { group: 'B', value: 16 },\n  { group: 'B', value: 20 },\n  { group: 'C', value: 25 },\n  { group: 'C', value: 22 },\n  { group: 'C', value: 24 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'boxplot',\n  data: smallData,\n  encode: {\n    x: 'group',\n    y: 'value',\n    color: 'group',\n  },\n  style: {\n    boxFill: 'lightblue',\n    boxFillOpacity: 0.6,\n    point: { fill: 'red', size: 4 },\n  },\n  axis: {\n    x: { title: '分组' },\n    y: { title: '数值' },\n  },\n  title: '数据量少时建议使用箱形图',\n});\n\nchart.render();\n",paraId:24,tocIndex:7},{value:"❌ ",paraId:25,tocIndex:7},{value:"离散型数据",paraId:25,tocIndex:7},{value:"：对于类别型或计数型数据，小提琴图的连续密度分布没有实际意义，建议使用柱状图或条形图。",paraId:25,tocIndex:7},{value:"下面的例子展示了离散数据的正确可视化方式：",paraId:26,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\n// 模拟离散计数数据\nconst discreteData = [\n  { category: '产品A', count: 45 },\n  { category: '产品B', count: 67 },\n  { category: '产品C', count: 33 },\n  { category: '产品D', count: 52 },\n  { category: '产品E', count: 28 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  data: discreteData,\n  encode: {\n    x: 'category',\n    y: 'count',\n    color: 'category',\n  },\n  style: {\n    fillOpacity: 0.8,\n  },\n  axis: {\n    x: { title: '产品类别' },\n    y: { title: '销售数量' },\n  },\n  title: '离散数据建议使用柱状图',\n});\n\nchart.render();\n",paraId:27,tocIndex:7},{value:"❌ ",paraId:28,tocIndex:7},{value:"单一数据系列",paraId:28,tocIndex:7},{value:"：如果只有一个数据系列且不需要分组比较，直方图或密度图可能更简洁有效。",paraId:28,tocIndex:7},{value:"❌ ",paraId:29,tocIndex:7},{value:"实时数据监控",paraId:29,tocIndex:7},{value:"：小提琴图需要完整的数据集进行密度估计，不适合流式或实时更新的数据场景。",paraId:29,tocIndex:7},{value:"箱形图",paraId:30,tocIndex:8},{value:"小提琴图展示完整的数据分布形状和密度，提供更丰富的分布信息",paraId:31,tocIndex:9},{value:"箱形图主要展示统计摘要（五数概括），更简洁但信息有限",paraId:31,tocIndex:9},{value:"小提琴图适合探索数据分布的细节特征，箱形图适合快速比较多个分组",paraId:31,tocIndex:9},{value:"直方图",paraId:32,tocIndex:9},{value:"小提琴图通过平滑的密度曲线展示分布，支持多组对比",paraId:33,tocIndex:10},{value:"直方图通过分箱统计展示频数分布，适合单一数据集的分布分析",paraId:33,tocIndex:10},{value:"小提琴图更适合连续分布的可视化，直方图适合离散化的分布统计",paraId:33,tocIndex:10}]},89364:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(61233);const t=[{value:"词云图是一种以可视化方式展示文本数据的图表类型，通过调整词语的大小、颜色和位置来反映词语在文本中的重要程度或出现频率。词云图将文本信息转换为直观的视觉表现，使用户能够快速识别文本中的关键词汇和主题。",paraId:0,tocIndex:0},{value:"词云图特别适合分析大量文本数据，如社交媒体评论、用户反馈、文章内容、调研报告等。通过词语大小的对比，用户可以迅速了解哪些词汇最为重要或出现最频繁，从而提取文本的核心信息和趋势。",paraId:1,tocIndex:0},{value:"词云图不仅具有实用的分析价值，还具有很强的艺术性和视觉冲击力，常被用于演示文稿、报告封面和数据可视化展示中。",paraId:2,tocIndex:0},{value:"英文名",paraId:3,tocIndex:0},{value:"：Word Cloud, Tag Cloud",paraId:3,tocIndex:0},{value:"图表类型",paraId:4,tocIndex:1},{value:"词云图",paraId:4,tocIndex:1},{value:"适合的数据",paraId:4,tocIndex:1},{value:"列表：文本字段、频率或权重字段",paraId:4,tocIndex:1},{value:"功能",paraId:4,tocIndex:1},{value:"展示文本数据的频率分布和重要程度",paraId:4,tocIndex:1},{value:"数据与图形的映射",paraId:4,tocIndex:1},{value:"文本字段映射到词语内容",paraId:4,tocIndex:1},{value:"频率字段映射到字体大小",paraId:4,tocIndex:1},{value:"可选分类字段映射到颜色",paraId:4,tocIndex:1},{value:"适合的数据条数",paraId:4,tocIndex:1},{value:"20-200 个词语，过多会导致布局拥挤",paraId:4,tocIndex:1},{value:"组成元素：",paraId:5,tocIndex:1},{value:"词语（Words）",paraId:6,tocIndex:1},{value:"：文本中的关键词汇，是词云图的核心元素",paraId:6,tocIndex:1},{value:"字体大小（Font Size）",paraId:6,tocIndex:1},{value:"：通常与词频或重要性成正比",paraId:6,tocIndex:1},{value:"颜色编码（Color Encoding）",paraId:6,tocIndex:1},{value:"：可用于区分不同类别或强调重要程度",paraId:6,tocIndex:1},{value:"布局算法（Layout Algorithm）",paraId:6,tocIndex:1},{value:"：确定词语在空间中的位置分布",paraId:6,tocIndex:1},{value:"形状容器（Shape Container）",paraId:6,tocIndex:1},{value:"：词云的整体轮廓，可以是矩形、圆形或自定义形状",paraId:6,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 600,\n});\n\nchart.options({\n  type: 'wordCloud',\n  paddingTop: 40,\n  layout: { spiral: 'rectangular', fontSize: [20, 100] },\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/philosophy-word.json',\n  },\n  encode: { color: 'text' },\n});\n\nchart.render();\n",paraId:7,tocIndex:4},{value:"结合图片可以绘制出特定形状的词云。",paraId:8,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'wordCloud',\n  width: 700,\n  height: 400,\n  layout: {\n    imageMask:\n      'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*LKU4TYEiB-4AAAAAAAAAAAAADmJ7AQ/original',\n    fontSize: 8,\n  },\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/antvdemo/assets/data/antv-keywords.json',\n  },\n  encode: { color: 'name', text: 'name' },\n  legend: false,\n});\n\nchart.render();\n",paraId:9,tocIndex:5},{value:"当数据的区分度不大时使用词云起不到突出的效果。",paraId:10,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 600,\n});\n\nchart.options({\n  type: 'wordCloud',\n  data: [\n    // 英语文学作品中频率相近的形容词（基于语料库统计）\n    // 这些词在文学作品中出现频率都在89-115之间，差异很小\n    { text: 'beautiful', value: 115 },\n    { text: 'wonderful', value: 112 },\n    { text: 'excellent', value: 109 },\n    { text: 'amazing', value: 106 },\n    { text: 'brilliant', value: 103 },\n    { text: 'fantastic', value: 100 },\n    { text: 'marvelous', value: 97 },\n    { text: 'splendid', value: 94 },\n    { text: 'gorgeous', value: 91 },\n    { text: 'stunning', value: 89 },\n  ],\n  layout: {\n    spiral: 'rectangular',\n    fontSize: [18, 28], // 范围很小，视觉差异不明显\n    padding: 3,\n  },\n  encode: {\n    color: 'text',\n  },\n  scale: {\n    color: {\n      palette: ['#1890ff', '#52c41a', '#fa8c16', '#722ed1', '#eb2f96'],\n    },\n  },\n  style: {\n    fontFamily: 'Arial, sans-serif',\n  },\n  axis: false,\n  legend: false,\n  tooltip: {\n    items: [\n      { field: 'text', name: '形容词' },\n      { field: 'value', name: '文献频次' },\n    ],\n  },\n});\n\nchart.render();\n\n// 问题：词频差异太小（仅26个单位），词云无法有效突出重点词汇\n// 所有词语在视觉上大小几乎相同，失去了词云图的核心价值\n// 建议：改用柱状图、条形图或表格来精确对比这些相近的数值\n",paraId:11,tocIndex:7},{value:"数据太少时很难布局出好看的词云，推荐使用",paraId:12,tocIndex:8},{value:"柱状图",paraId:13,tocIndex:8},{value:"。",paraId:12,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 600,\n});\n\nchart.options({\n  type: 'wordCloud',\n  data: [\n    // 莎士比亚四大悲剧中\"death\"一词的出现频次（真实语料库数据）\n    { text: 'Hamlet', value: 67 },\n    { text: 'Macbeth', value: 45 },\n    { text: 'Othello', value: 23 },\n    { text: 'King Lear', value: 19 },\n  ],\n  layout: {\n    spiral: 'rectangular',\n    fontSize: [18, 48],\n    padding: 8,\n  },\n  encode: {\n    color: 'text',\n  },\n  scale: {\n    color: {\n      palette: ['#722ed1', '#eb2f96', '#fa8c16', '#52c41a'],\n    },\n  },\n  style: {\n    fontFamily: 'Times New Roman, serif',\n    fontWeight: 'bold',\n  },\n  axis: false,\n  legend: false,\n  tooltip: {\n    items: [\n      { field: 'text', name: '剧作' },\n      { field: 'value', name: '\"death\"词频' },\n    ],\n  },\n});\n\nchart.render();\n",paraId:14,tocIndex:8},{value:"使用柱状图的效果：",paraId:15,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 600,\n  height: 300,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { play: 'Hamlet', frequency: 67 },\n    { play: 'Macbeth', frequency: 45 },\n    { play: 'Othello', frequency: 23 },\n    { play: 'King Lear', frequency: 19 },\n  ],\n  encode: {\n    x: 'play',\n    y: 'frequency',\n    color: 'play',\n  },\n  scale: {\n    color: {\n      palette: ['#722ed1', '#eb2f96', '#fa8c16', '#52c41a'],\n    },\n  },\n  axis: {\n    x: {\n      title: '莎士比亚四大悲剧',\n      labelTransform: 'rotate(45)',\n    },\n    y: { title: '\"death\"一词频次' },\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:16,tocIndex:8},{value:"气泡图",paraId:17,tocIndex:9},{value:"词云图",paraId:18,tocIndex:10},{value:"：专门用于文本数据，通过字体大小表示重要性",paraId:18,tocIndex:10},{value:"气泡图",paraId:18,tocIndex:10},{value:"：用于数值数据，通过气泡大小表示数值",paraId:18,tocIndex:10},{value:"柱状图",paraId:19,tocIndex:10},{value:"词云图",paraId:20,tocIndex:11},{value:"：视觉冲击力强，适合展示概览",paraId:20,tocIndex:11},{value:"柱状图",paraId:20,tocIndex:11},{value:"：精确对比数值，适合详细分析",paraId:20,tocIndex:11},{value:"数据格式",paraId:21,tocIndex:12},{value:"：确保数据包含 ",paraId:21,tocIndex:12},{value:"text",paraId:21,tocIndex:12},{value:" 和 ",paraId:21,tocIndex:12},{value:"value",paraId:21,tocIndex:12},{value:" 字段",paraId:21,tocIndex:12},{value:"布局优化",paraId:21,tocIndex:12},{value:"：根据词汇数量选择合适的 ",paraId:21,tocIndex:12},{value:"spiral",paraId:21,tocIndex:12},{value:" 类型",paraId:21,tocIndex:12},{value:"性能考虑",paraId:21,tocIndex:12},{value:"：大量词汇时建议限制显示数量",paraId:21,tocIndex:12},{value:"交互体验",paraId:21,tocIndex:12},{value:"：合理使用高亮和提示功能增强可读性",paraId:21,tocIndex:12}]},23743:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(96831);const t=[{value:"问题描述",paraId:0,tocIndex:0},{value:"在使用 AntV G2 绘制图表时，手动设置 ",paraId:1,tocIndex:0},{value:"padding",paraId:1,tocIndex:0},{value:" 可能会导致图表标题或者其他图表组件无法正常显示或完全消失。",paraId:1,tocIndex:0},{value:"相关问题：",paraId:2,tocIndex:0},{value:"设置完 title 不显示",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  padding: 20,\n  title: {\n    align: 'center',\n    title: 'This is a chart title.',\n    subtitle: 'Displayed are sampled values.',\n  },\n  data: [\n    { country: 'Asia', year: '1750', value: 502 },\n    { country: 'Asia', year: '1800', value: 635 },\n    { country: 'Asia', year: '1850', value: 809 },\n    { country: 'Asia', year: '1900', value: 947 },\n    { country: 'Asia', year: '1950', value: 1402 },\n    { country: 'Asia', year: '1999', value: 3634 },\n    { country: 'Asia', year: '2050', value: 5268 },\n    { country: 'Africa', year: '1750', value: 106 },\n    { country: 'Africa', year: '1800', value: 107 },\n    { country: 'Africa', year: '1850', value: 111 },\n    { country: 'Africa', year: '1900', value: 133 },\n    { country: 'Africa', year: '1950', value: 221 },\n    { country: 'Africa', year: '1999', value: 767 },\n    { country: 'Africa', year: '2050', value: 1766 },\n    { country: 'Europe', year: '1750', value: 163 },\n    { country: 'Europe', year: '1800', value: 203 },\n    { country: 'Europe', year: '1850', value: 276 },\n    { country: 'Europe', year: '1900', value: 408 },\n    { country: 'Europe', year: '1950', value: 547 },\n    { country: 'Europe', year: '1999', value: 729 },\n    { country: 'Europe', year: '2050', value: 628 },\n  ],\n  encode: {\n    x: 'year',\n    y: 'value',\n    color: 'country',\n  },\n  transform: [{ type: 'stackY' }],\n  style: {\n    fillOpacity: 0.3,\n  },\n});\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"原因分析",paraId:4,tocIndex:0},{value:"G2 默认会动态计算所有组件所需的间距，但一旦指定了固定的 ",paraId:5,tocIndex:0},{value:"padding",paraId:5,tocIndex:0},{value:" 值，这个自动调整的逻辑就会被跳过，可能导致组件显示不完整。",paraId:5,tocIndex:0},{value:"解决方案",paraId:6,tocIndex:0},{value:"有两种方式可以解决这个问题：",paraId:7,tocIndex:0},{value:"使用默认布局（推荐）",paraId:8,tocIndex:0},{value:"不手动设置 ",paraId:9,tocIndex:0},{value:"padding",paraId:9,tocIndex:0},{value:"，让 G2 自动计算最佳间距，确保所有组件正常显示：",paraId:9,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  title: {\n    align: 'center',\n    title: 'This is a chart title.',\n    subtitle: 'Displayed are sampled values.',\n  },\n  data: [\n    { country: 'Asia', year: '1750', value: 502 },\n    { country: 'Asia', year: '1800', value: 635 },\n    { country: 'Asia', year: '1850', value: 809 },\n    { country: 'Asia', year: '1900', value: 947 },\n    { country: 'Asia', year: '1950', value: 1402 },\n    { country: 'Asia', year: '1999', value: 3634 },\n    { country: 'Asia', year: '2050', value: 5268 },\n    { country: 'Africa', year: '1750', value: 106 },\n    { country: 'Africa', year: '1800', value: 107 },\n    { country: 'Africa', year: '1850', value: 111 },\n    { country: 'Africa', year: '1900', value: 133 },\n    { country: 'Africa', year: '1950', value: 221 },\n    { country: 'Africa', year: '1999', value: 767 },\n    { country: 'Africa', year: '2050', value: 1766 },\n    { country: 'Europe', year: '1750', value: 163 },\n    { country: 'Europe', year: '1800', value: 203 },\n    { country: 'Europe', year: '1850', value: 276 },\n    { country: 'Europe', year: '1900', value: 408 },\n    { country: 'Europe', year: '1950', value: 547 },\n    { country: 'Europe', year: '1999', value: 729 },\n    { country: 'Europe', year: '2050', value: 628 },\n  ],\n  encode: {\n    x: 'year',\n    y: 'value',\n    color: 'country',\n  },\n  transform: [{ type: 'stackY' }],\n  style: {\n    fillOpacity: 0.3,\n  },\n});\n\nchart.render();\n",paraId:10,tocIndex:0},{value:"正确设置 Padding",paraId:11,tocIndex:0},{value:"如果确实需要手动设置 ",paraId:12,tocIndex:0},{value:"padding",paraId:12,tocIndex:0},{value:"，请确保为动态生成的组件预留足够空间：",paraId:12,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  paddingTop: 100,\n  title: {\n    align: 'center',\n    title: 'This is a chart title.',\n    subtitle: 'Displayed are sampled values.',\n  },\n  data: [\n    { country: 'Asia', year: '1750', value: 502 },\n    { country: 'Asia', year: '1800', value: 635 },\n    { country: 'Asia', year: '1850', value: 809 },\n    { country: 'Asia', year: '1900', value: 947 },\n    { country: 'Asia', year: '1950', value: 1402 },\n    { country: 'Asia', year: '1999', value: 3634 },\n    { country: 'Asia', year: '2050', value: 5268 },\n    { country: 'Africa', year: '1750', value: 106 },\n    { country: 'Africa', year: '1800', value: 107 },\n    { country: 'Africa', year: '1850', value: 111 },\n    { country: 'Africa', year: '1900', value: 133 },\n    { country: 'Africa', year: '1950', value: 221 },\n    { country: 'Africa', year: '1999', value: 767 },\n    { country: 'Africa', year: '2050', value: 1766 },\n    { country: 'Europe', year: '1750', value: 163 },\n    { country: 'Europe', year: '1800', value: 203 },\n    { country: 'Europe', year: '1850', value: 276 },\n    { country: 'Europe', year: '1900', value: 408 },\n    { country: 'Europe', year: '1950', value: 547 },\n    { country: 'Europe', year: '1999', value: 729 },\n    { country: 'Europe', year: '2050', value: 628 },\n  ],\n  encode: {\n    x: 'year',\n    y: 'value',\n    color: 'country',\n  },\n  transform: [{ type: 'stackY' }],\n  style: {\n    fillOpacity: 0.3,\n  },\n});\n\nchart.render();\n",paraId:13,tocIndex:0},{value:"也可以在创建 ",paraId:14,tocIndex:0},{value:"Chart",paraId:14,tocIndex:0},{value:" 实例的时候传入 ",paraId:14,tocIndex:0},{value:"paddingTop",paraId:14,tocIndex:0},{value:"，效果完全一样。",paraId:14,tocIndex:0},{value:"const chart = new Chart({\n  container: 'container',\n  paddingTop: 100,\n});\n",paraId:15,tocIndex:0},{value:"注意事项",paraId:16,tocIndex:0},{value:"手动设置 ",paraId:17,tocIndex:0},{value:"padding",paraId:17,tocIndex:0},{value:" 时，建议通过调试确定合适的数值",paraId:17,tocIndex:0},{value:"需要考虑标题、图例等组件的空间需求",paraId:17,tocIndex:0},{value:"在不需要特定布局时，优先使用 G2 的自动布局功能",paraId:17,tocIndex:0},{value:"查看",paraId:18,tocIndex:0},{value:"图表布局",paraId:19,tocIndex:0},{value:"的详细文档。",paraId:18,tocIndex:0},{value:"问题描述",paraId:20,tocIndex:1},{value:"在绘制堆叠面积图、多折线图的时候，需要配置图表的样式，但是在 style 里直接指定描边颜色或者描边透明度等样式的时候，所有的区域或者面积都会应用，怎么区分不同分类的样式。",paraId:21,tocIndex:1},{value:"解决方案",paraId:22,tocIndex:1},{value:"在配置标记的样式 style 时，不仅支持 ",paraId:23,tocIndex:1},{value:"string",paraId:23,tocIndex:1},{value:"、",paraId:23,tocIndex:1},{value:"number",paraId:23,tocIndex:1},{value:" 等直接配置，还支持类似于 ",paraId:23,tocIndex:1},{value:"string | (datum, index, data, column) => string",paraId:23,tocIndex:1},{value:" 的回调函数，我们可以根据回调函数里的参数去自定义不同筛选条件下的特殊样式。注意，这里的 ",paraId:23,tocIndex:1},{value:"datum",paraId:23,tocIndex:1},{value:"是标记对应的数据项，取决于标记的特性",paraId:23,tocIndex:1},{value:"图形模板",paraId:23,tocIndex:1},{value:"，每个图形对应一个或者多个数据项（Data Item）。比如散点图每个图形都对应一个数据项，而面积图一个图形对应多个数据项，",paraId:23,tocIndex:1},{value:"datum",paraId:23,tocIndex:1},{value:"里也会返回多条数据。",paraId:23,tocIndex:1},{value:"示例",paraId:24,tocIndex:1},{value:"描边颜色变化的堆叠面积图",paraId:25,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  data: [\n    { country: 'Asia', year: '1750', value: 502 },\n    { country: 'Asia', year: '1800', value: 635 },\n    { country: 'Asia', year: '1850', value: 809 },\n    { country: 'Asia', year: '1900', value: 947 },\n    { country: 'Asia', year: '1950', value: 1402 },\n    { country: 'Asia', year: '1999', value: 3634 },\n    { country: 'Asia', year: '2050', value: 5268 },\n    { country: 'Africa', year: '1750', value: 106 },\n    { country: 'Africa', year: '1800', value: 107 },\n    { country: 'Africa', year: '1850', value: 111 },\n    { country: 'Africa', year: '1900', value: 133 },\n    { country: 'Africa', year: '1950', value: 221 },\n    { country: 'Africa', year: '1999', value: 767 },\n    { country: 'Africa', year: '2050', value: 1766 },\n    { country: 'Europe', year: '1750', value: 163 },\n    { country: 'Europe', year: '1800', value: 203 },\n    { country: 'Europe', year: '1850', value: 276 },\n    { country: 'Europe', year: '1900', value: 408 },\n    { country: 'Europe', year: '1950', value: 547 },\n    { country: 'Europe', year: '1999', value: 729 },\n    { country: 'Europe', year: '2050', value: 628 },\n  ],\n  encode: {\n    x: 'year',\n    y: 'value',\n    color: 'country',\n  },\n  transform: [{ type: 'stackY' }],\n  style: {\n    fillOpacity: 0.3,\n    lineWidth: (datum, index, data, column) =>\n      datum[0].country === 'Asia' ? 2 : 0, // area标记默认的描边宽度为0，要显示描边需要显式传入lineWidth\n    stroke: (datum, index, data, column) =>\n      datum[0].country === 'Asia' ? 'red' : null,\n  },\n});\n\nchart.render();\n",paraId:26,tocIndex:1},{value:"区分样式的多折线图",paraId:27,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/c48dbbb1-fccf-4a46-b68f-a3ddb4908b68.json',\n  },\n  encode: {\n    x: 'date',\n    y: 'value',\n    color: 'type',\n  },\n  axis: {\n    y: {\n      labelFormatter: (v) =>\n        `${v}`.replace(/\\d{1,3}(?=(\\d{3})+$)/g, (s) => `${s},`),\n    },\n  },\n  scale: { color: { range: ['#30BF78', '#F4664A', '#FAAD14'] } }, // 自定义color通道的颜色值域\n  style: {\n    lineDash: (datum, index, data, column) => {\n      if (datum[0].type === 'register') return [4, 4];\n    },\n    lineWidth: (datum, index, data, column) => {\n      if (datum[0].type !== 'register') return 2;\n    },\n  },\n});\n\nchart.render();\n",paraId:28,tocIndex:1},{value:"多形状散点图",paraId:29,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/bd73a175-4417-4749-8b88-bc04d955e899.csv',\n  },\n  encode: {\n    x: 'x',\n    y: 'y',\n    shape: 'category',\n    color: 'category',\n    size: () => 1,\n  },\n  legend: {\n    size: false,\n  },\n  scale: {\n    shape: { range: ['circle', 'plus', 'diamond'] },\n    size: { rangeMin: 5 }, // 设置size通道的比例尺的最小值域为5\n  }, // 定义shape通道的形状值域\n  transform: [{ type: 'groupX', size: 'sum' }], // 对离散的 x 通道进行分组，并且进行求和后映射到size通道\n  style: {\n    fillOpacity: (datum, index, data, column) =>\n      datum.category !== 'setosa' ? 0.8 : 0,\n    stroke: (datum, index, data, column) => {\n      if (datum.category !== 'setosa') {\n        return '#FADC7C';\n      }\n    },\n    lineWidth: (datum, index, data, column) =>\n      datum.category !== 'setosa' ? 1 : 2,\n  },\n});\n\nchart.render();\n",paraId:30,tocIndex:1},{value:"问题描述",paraId:31,tocIndex:2},{value:"业务场景中 tooltip 需要展示非常多的信息，所以配置了 ",paraId:32,tocIndex:2},{value:"enterable: true",paraId:32,tocIndex:2},{value:"，在移入鼠标的时候支持滚动条滚动，但是在移动鼠标的时候，tooltip 有时不会正常关闭，对图表造成遮挡和卡顿效果。",paraId:32,tocIndex:2},{value:"原因分析及解决方案",paraId:33,tocIndex:2},{value:"遮挡问题",paraId:34,tocIndex:2},{value:"G2 内部算法会尝试将 tooltip 限制在图表内部，但如果图表高度太小，就算自动计算 tooltip 位置，依然会溢出图表。",paraId:35,tocIndex:2},{value:"卡死问题",paraId:36,tocIndex:2},{value:"图表区域太小，从 tooltip 内部直接移动到了图表外部，tooltip 消失事件是绑定在图表上的，直接从 tooltip 移动到外部不会触发。",paraId:37,tocIndex:2},{value:"解决方案",paraId:38,tocIndex:2},{value:"两个问题都是因为图表区域太小，tooltip 面积占比太大（大于一半），建议减少 tooltip 面积（已有滚动条）或增大图表面积。",paraId:39,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { year: '1991', value: 15468 },\n    { year: '1992', value: 16100 },\n    { year: '1993', value: 15900 },\n    { year: '1994', value: 17409 },\n    { year: '1995', value: 17000 },\n    { year: '1996', value: 31056 },\n    { year: '1997', value: 31982 },\n    { year: '1998', value: 32040 },\n    { year: '1999', value: 33233 },\n  ],\n  children: [\n    {\n      type: 'area',\n      encode: { x: (d) => d.year, y: 'value', shape: 'area' },\n      style: { opacity: 0.2 },\n      axis: { y: { labelFormatter: '~s', title: false } },\n    },\n    { type: 'line', encode: { x: 'year', y: 'value', shape: 'line' } },\n  ],\n});\n\nchart.render();\n",paraId:40,tocIndex:3},{value:"解决方案",paraId:41,tocIndex:3},{value:"配置需要调整的比例尺的 ",paraId:42,tocIndex:3},{value:"nice",paraId:42,tocIndex:3},{value:" 属性为 true ，扩展 domain 范围，让输出的 tick 展示得更加友好。",paraId:42,tocIndex:3},{value:"({\n  scale: {\n    y: {\n      nice: true,\n    },\n  },\n});\n",paraId:43,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { year: '1991', value: 15468 },\n    { year: '1992', value: 16100 },\n    { year: '1993', value: 15900 },\n    { year: '1994', value: 17409 },\n    { year: '1995', value: 17000 },\n    { year: '1996', value: 31056 },\n    { year: '1997', value: 31982 },\n    { year: '1998', value: 32040 },\n    { year: '1999', value: 33233 },\n  ],\n  scale: {\n    y: {\n      nice: true, // 扩展y通道的比例尺的domain 范围，让输出的 tick 展示得更加友好\n    },\n  },\n  children: [\n    {\n      type: 'area',\n      encode: { x: (d) => d.year, y: 'value', shape: 'area' },\n      style: { opacity: 0.2 },\n      axis: { y: { labelFormatter: '~s', title: false } },\n    },\n    { type: 'line', encode: { x: 'year', y: 'value', shape: 'line' } },\n  ],\n});\n\nchart.render();\n",paraId:44,tocIndex:3},{value:"问题描述",paraId:45,tocIndex:4},{value:"业务场景中可能需要 y 轴值域和正常的坐标轴显示相反，使得从上到下对应的值从小到大，换句话说，对应 y 通道值更小的应该出现在图表的更上方，适用于某些数字越小代表权重越大的场景，例如名次等。",paraId:46,tocIndex:4},{value:"解决方案",paraId:47,tocIndex:4},{value:"调整 y 通道比例尺的值域，默认为",paraId:48,tocIndex:4},{value:"[1,0]",paraId:48,tocIndex:4},{value:"，如果需要反转，则调整为",paraId:48,tocIndex:4},{value:"[0,1]",paraId:48,tocIndex:4},{value:"。为了显示更美观，同时也可以对应地调整 x 轴的位置。",paraId:48,tocIndex:4},{value:"以下是一个自上而下的柱状图的例子，当需要绘制自右向左的条形图时同理。（此处要注意条形图是坐标轴转置后的柱状图，左右对应的是 x 轴）",paraId:49,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { letter: 'A', frequency: 0.08167 },\n    { letter: 'B', frequency: 0.01492 },\n    { letter: 'C', frequency: 0.02782 },\n    { letter: 'D', frequency: 0.04253 },\n    { letter: 'E', frequency: 0.12702 },\n  ],\n  encode: { x: 'letter', y: 'frequency' },\n  scale: { y: { range: [0, 1] } },\n  axis: { x: { position: 'top' } },\n});\n\nchart.render();\n",paraId:50,tocIndex:4},{value:"对于有些标记，例如面积图，当我们使用上面的方式反转后，面积图的填充部分也会到图表上半区域，在某些业务场景下是不符合预期的，例如排名趋势图，此时需要结合 ",paraId:51,tocIndex:4},{value:"encode.y",paraId:51,tocIndex:4},{value:"、",paraId:51,tocIndex:4},{value:"axis.y.labelFormatter",paraId:51,tocIndex:4},{value:"等属性做更定制化的处理。",paraId:51,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  paddingRight: 10,\n  data: [\n    { month: '一月', rank: 200 },\n    { month: '二月', rank: 160 },\n    { month: '三月', rank: 100 },\n    { month: '四月', rank: 80 },\n    { month: '五月', rank: 99 },\n    { month: '六月', rank: 36 },\n    { month: '七月', rank: 40 },\n    { month: '八月', rank: 20 },\n    { month: '九月', rank: 12 },\n    { month: '十月', rank: 15 },\n    { month: '十一月', rank: 6 },\n    { month: '十二月', rank: 1 },\n  ],\n  scale: {\n    y: {\n      nice: true,\n      tickMethod: () => [0, 50, 100, 170, 199],\n    },\n  },\n  axis: {\n    y: {\n      labelFormatter: (d) => `第${200 - d}名`,\n    },\n  },\n  children: [\n    {\n      type: 'area',\n      encode: { x: (d) => d.month, y: (d) => 200 - d.rank, shape: 'smooth' },\n      style: { opacity: 0.2 },\n      axis: { y: { labelFormatter: '~s', title: false } },\n      style: {\n        fill: 'l(270) 0:#ffffff 0.9:#7ec2f3 1:#1890ff',\n        fillOpacity: 0.2,\n      },\n      tooltip: false,\n    },\n    {\n      type: 'line',\n      encode: { x: (d) => d.month, y: (d) => 200 - d.rank, shape: 'smooth' },\n      interaction: {\n        tooltip: {\n          render: (event, { title, items }) => `\n<div style=\"display: flex; align-items: center;\">\n  <span>${title}：第</span>\n  <h2\n    style=\"\n        margin-left: 8px; \n        margin-right: 8px; \n        margin-top:4px;\n        font-size: 18px; \n        line-height: 36px; \n        font-weight: 500px\"\n  >\n    ${200 - items[0].value}\n  </h2>\n  <span>名</span>\n</div>\n          `,\n        },\n      },\n      style: {\n        lineWidth: 2,\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:52,tocIndex:4},{value:"下面是一个简单的折线图，可以看出 x 轴有明显的 ",paraId:53,tocIndex:5},{value:"paddingOuter",paraId:53,tocIndex:5},{value:"，默认值为 ",paraId:53,tocIndex:5},{value:"0.5",paraId:53,tocIndex:5},{value:"。",paraId:53,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  viewStyle: {\n    contentFill: 'l(270) 0:#ffffff 0.5:#7ec2f3 1:#1890ff',\n  },\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  labels: [{ text: 'value', style: { dx: -10, dy: -12 } }],\n  encode: { x: 'year', y: 'value' },\n  scale: { y: { domainMin: 0, nice: true } },\n});\n\nchart.render();\n",paraId:54,tocIndex:5},{value:"point 比例尺是 bandWidth 恒为 0 的 band 比例尺，内部固定了以下属性：",paraId:55,tocIndex:5},{value:"padding: 0.5, // 内部赋值\npaddingInner: 1, // 不可修改\npaddingOuter: 0.5 // // 内部赋值\n",paraId:56,tocIndex:5},{value:"如果想自定义 ",paraId:57,tocIndex:5},{value:"paddingOuter",paraId:57,tocIndex:5},{value:" 的值，可以通过修改 ",paraId:57,tocIndex:5},{value:"padding",paraId:57,tocIndex:5},{value:" 实现。例如：",paraId:57,tocIndex:5},{value:"(scale: {\n  x: {\n    type: 'point',\n    padding: 0, // 只会对 paddingOuter 生效，paddingInner 恒为 1\n  },\n});\n",paraId:58,tocIndex:5},{value:"通过配置，可以使得折线图两端的间隔为 ",paraId:59,tocIndex:5},{value:"0",paraId:59,tocIndex:5},{value:" 。",paraId:59,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  viewStyle: {\n    contentFill: 'l(270) 0:#ffffff 0.5:#7ec2f3 1:#1890ff',\n  },\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  labels: [{ text: 'value', style: { dx: -10, dy: -12 } }],\n  encode: { x: 'year', y: 'value' },\n  scale: {\n    y: { domainMin: 0, nice: true },\n    x: {\n      padding: 0,\n    },\n  },\n});\n\nchart.render();\n",paraId:60,tocIndex:5},{value:"通过新的 ",paraId:61,tocIndex:6},{value:"defaultSelect",paraId:61,tocIndex:6},{value:" 选项，您可以指定在首次渲染图表时默认选中的图例项：",paraId:61,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 100 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  legend: {\n    color: {\n      defaultSelect: ['Sports', 'Strategy', 'Action'],\n    },\n  },\n});\n\nchart.render();\n",paraId:62,tocIndex:6},{value:"这种方法比之前手动触发 ",paraId:63,tocIndex:6},{value:"legendFilter",paraId:63,tocIndex:6},{value:" 交互的方式简单直观得多。图表在初始渲染时会自动只显示与选中图例项对应的数据。",paraId:63,tocIndex:6},{value:"问题描述",paraId:64,tocIndex:7},{value:"在某些交互场景中，需要监听鼠标是否移出了图表容器的边界，以便执行相应的业务逻辑，比如隐藏提示框、重置高亮状态等。",paraId:65,tocIndex:7},{value:"解决方案",paraId:66,tocIndex:7},{value:"可以通过监听图表容器的 DOM 事件来判断鼠标的进入和离开状态。",paraId:67,tocIndex:7},{value:"import { Chart, ChartEvent } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', autoFit: true });\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 100 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  viewStyle: {\n    viewFill: 'blue',\n    viewFillOpacity: 0.3,\n  },\n});\n\nchart.render();\n\nlet containerMouseEntered = false;\n\nchart.on('afterrender', () => {\n  // 获取图表容器DOM元素\n  const container = chart.getContainer();\n\n  // 创建状态显示面板\n  const statusPanel = document.createElement('div');\n  statusPanel.id = 'mouse-status-panel';\n  statusPanel.style.cssText = `\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    background: rgba(0, 0, 0, 0.8);\n    color: white;\n    padding: 12px;\n    border-radius: 6px;\n    font-family: monospace;\n    font-size: 12px;\n    line-height: 1.4;\n    z-index: 1000;\n    min-width: 220px;\n  `;\n\n  // 更新状态显示\n  const updateStatus = (isInside, eventInfo = {}) => {\n    const status = isInside ? '✅ 鼠标在容器内' : '❌ 鼠标在容器外';\n    const containerRect = container.getBoundingClientRect();\n\n    statusPanel.innerHTML = `\n      <div style=\"font-weight: bold; margin-bottom: 8px;\">${status}</div>\n      <div>容器尺寸: ${container.offsetWidth} × ${container.offsetHeight}</div>\n      <div>容器位置: (${Math.round(containerRect.left)}, ${Math.round(\n      containerRect.top,\n    )})</div>\n      ${\n        eventInfo.clientX !== undefined\n          ? `<div>鼠标坐标: (${eventInfo.clientX}, ${eventInfo.clientY})</div>`\n          : ''\n      }\n      ${eventInfo.type ? `<div>事件类型: ${eventInfo.type}</div>` : ''}\n      <div style=\"margin-top: 8px; font-size: 11px; opacity: 0.8;\">\n        移动鼠标到图表上试试看！\n      </div>\n    `;\n  };\n\n  if (container) {\n    // 将状态面板添加到容器的父元素\n    container.parentElement.style.position = 'relative';\n    container.parentElement.appendChild(statusPanel);\n\n    // 初始化显示\n    updateStatus(false);\n\n    // 监听鼠标进入容器\n    container.addEventListener('mouseenter', (e) => {\n      containerMouseEntered = true;\n      updateStatus(true, {\n        type: e.type,\n        clientX: e.clientX,\n        clientY: e.clientY,\n      });\n    });\n\n    // 监听鼠标在容器内移动\n    container.addEventListener('mousemove', (e) => {\n      if (containerMouseEntered) {\n        updateStatus(true, {\n          type: e.type,\n          clientX: e.clientX,\n          clientY: e.clientY,\n        });\n      }\n    });\n\n    // 监听鼠标离开容器\n    container.addEventListener('mouseleave', (e) => {\n      if (containerMouseEntered) {\n        containerMouseEntered = false;\n        updateStatus(false, {\n          type: e.type,\n          clientX: e.clientX,\n          clientY: e.clientY,\n        });\n      }\n    });\n  }\n});\n",paraId:68,tocIndex:7},{value:"完整示例",paraId:69,tocIndex:7},{value:"下面是一个完整的示例，展示了如何通过事件触发控制 tooltip 的显示和隐藏，当点击 element 的时候显示 tooltip，当点击空白区域或者当鼠标离开容器时手动触发 tooltip 隐藏事件。",paraId:70,tocIndex:7},{value:"import { Chart, ChartEvent } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', autoFit: true });\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 100 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  viewStyle: {\n    viewFill: 'blue',\n    viewFillOpacity: 0.3,\n  },\n  interaction: {\n    tooltip: {\n      disableNative: true, // Disable pointerover and pointerout events.\n    },\n  },\n});\n\nchart.render();\n\nlet containerMouseEntered = false;\n\nchart.on('afterrender', () => {\n  // 获取图表容器DOM元素\n  const container = chart.getContainer();\n\n  if (container) {\n    // 监听鼠标进入容器\n    container.addEventListener('mouseenter', (e) => {\n      containerMouseEntered = true;\n    });\n\n    // 监听鼠标离开容器\n    container.addEventListener('mouseleave', (e) => {\n      if (containerMouseEntered) {\n        containerMouseEntered = false;\n        chart.emit('tooltip:hide');\n      }\n    });\n  }\n});\n\nchart.on('element:click', ({ data }) => chart.emit('tooltip:show', { data }));\nchart.on('plot:click', () => chart.emit('tooltip:hide'));\n",paraId:71,tocIndex:7},{value:"问题描述",paraId:72,tocIndex:8},{value:"在使用 G2 绘制图表时，默认的图例位置和大小可能无法满足业务需求，需要对图例的位置、对齐方式、尺寸以及与图表的间距进行精确控制。",paraId:73,tocIndex:8},{value:"解决方案",paraId:74,tocIndex:8},{value:"G2 提供了多个配置项来精确控制图例的大小和布局：",paraId:75,tocIndex:8},{value:"基础位置配置",paraId:76,tocIndex:8},{value:"使用 ",paraId:77,tocIndex:8},{value:"position",paraId:77,tocIndex:8},{value:" 设置图例的基础位置：",paraId:77,tocIndex:8},{value:"legend: {\n  color: {\n    position: 'top', // 'top' | 'right' | 'left' | 'bottom'\n  }\n}\n",paraId:78,tocIndex:8},{value:"精确对齐配置",paraId:79,tocIndex:8},{value:"使用 ",paraId:80,tocIndex:8},{value:"layout",paraId:80,tocIndex:8},{value:" 配置图例的精确对齐方式，采用 Flexbox 布局模型：",paraId:80,tocIndex:8},{value:"legend: {\n  color: {\n    position: 'top',\n    layout: {\n      justifyContent: 'center',    // 主轴对齐: 'flex-start' | 'center' | 'flex-end'\n      alignItems: 'flex-start',    // 交叉轴对齐: 'flex-start' | 'center' | 'flex-end'\n      flexDirection: 'row',        // 主轴方向: 'row' | 'column'\n    }\n  }\n}\n",paraId:81,tocIndex:8},{value:"尺寸控制配置",paraId:82,tocIndex:8},{value:"size",paraId:83,tocIndex:8},{value:": 控制图例在交叉轴上的尺寸（水平布局时控制高度，垂直布局时控制宽度）",paraId:83,tocIndex:8},{value:"length",paraId:83,tocIndex:8},{value:": 控制图例在主轴上的尺寸（水平布局时控制宽度，垂直布局时控制高度）",paraId:83,tocIndex:8},{value:"crossPadding",paraId:83,tocIndex:8},{value:": 控制图例与图表区域的距离",paraId:83,tocIndex:8},{value:"legend: {\n  color: {\n    size: 80,         // 图例交叉轴尺寸\n    length: 300,      // 图例主轴长度\n    crossPadding: 20, // 与图表的距离\n  }\n}\n",paraId:84,tocIndex:8},{value:"完整示例",paraId:85,tocIndex:8},{value:"以下是几种常见的图例布局场景：",paraId:86,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 400,\n  width: 600,\n});\nconst container = chart.getContainer();\n\nconst data = [\n  { genre: 'Sports', sold: 50 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\nchart.options({\n  type: 'interval',\n  data,\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  legend: {\n    color: {\n      position: 'top',\n      layout: {\n        justifyContent: 'center', // 水平居中\n        alignItems: 'flex-start',\n      },\n      size: 60, // 控制图例交叉轴尺寸\n      length: 250, // 控制图例主轴长度\n      crossPadding: 20, // 与图表的距离\n    },\n  },\n});\n\n// 创建布局选择器\nconst controlPanel = document.createElement('div');\ncontrolPanel.style.cssText = `\n  margin-bottom: 16px;\n  padding: 16px;\n  background: #f5f5f5;\n  border-radius: 8px;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 16px;\n`;\n\n// 布局场景选择器\nconst sceneContainer = document.createElement('div');\nsceneContainer.innerHTML = `\n  <label style=\"display: block; margin-bottom: 8px; font-weight: bold;\">\n    选择布局场景:\n  </label>\n`;\n\nconst sceneSelect = document.createElement('select');\nsceneSelect.style.cssText = 'width: 100%; padding: 4px;';\nconst scenes = [\n  { label: '顶部居中（仪表板风格）', value: 'top-center' },\n  { label: '右侧垂直居中（详细图表）', value: 'right-center' },\n  { label: '底部左对齐（节省空间）', value: 'bottom-start' },\n  { label: '左侧底部对齐', value: 'left-end' },\n  { label: '右侧顶部对齐（紧凑）', value: 'right-start' },\n];\n\nsceneSelect.innerHTML = scenes\n  .map(\n    (scene, index) =>\n      `<option value=\"${scene.value}\" ${index === 0 ? 'selected' : ''}>${\n        scene.label\n      }</option>`,\n  )\n  .join('');\n\nsceneContainer.appendChild(sceneSelect);\n\n// 尺寸控制\nconst sizeContainer = document.createElement('div');\nsizeContainer.innerHTML = `\n  <label style=\"display: block; margin-bottom: 8px; font-weight: bold;\">\n    图例尺寸控制:\n  </label>\n  <div style=\"margin-bottom: 8px;\">\n    <label>crossPadding (与图表距离): </label>\n    <input type=\"range\" id=\"crossPadding\" min=\"5\" max=\"50\" value=\"20\" style=\"width: 100%;\">\n    <span id=\"crossPaddingValue\">20</span>\n  </div>\n  <div style=\"margin-bottom: 8px;\">\n    <label>size (交叉轴尺寸): </label>\n    <input type=\"range\" id=\"size\" min=\"40\" max=\"200\" value=\"60\" style=\"width: 100%;\">\n    <span id=\"sizeValue\">60</span>\n  </div>\n  <div>\n    <label>length (主轴长度): </label>\n    <input type=\"range\" id=\"length\" min=\"40\" max=\"400\" value=\"250\" style=\"width: 100%;\">\n    <span id=\"lengthValue\">250</span>\n  </div>\n`;\n\ncontrolPanel.appendChild(sceneContainer);\ncontrolPanel.appendChild(sizeContainer);\n\nconst updateChart = () => {\n  const selectedScene = sceneSelect.value;\n  const crossPadding = parseInt(document.getElementById('crossPadding').value);\n  const size = parseInt(document.getElementById('size').value);\n  const length = parseInt(document.getElementById('length').value);\n\n  let position, justifyContent;\n\n  switch (selectedScene) {\n    case 'top-center':\n      position = 'top';\n      justifyContent = 'center';\n      break;\n    case 'right-center':\n      position = 'right';\n      justifyContent = 'center';\n      break;\n    case 'bottom-start':\n      position = 'bottom';\n      justifyContent = 'flex-start';\n      break;\n    case 'left-end':\n      position = 'left';\n      justifyContent = 'flex-end';\n      break;\n    case 'right-start':\n      position = 'right';\n      justifyContent = 'flex-start';\n      break;\n  }\n\n  chart.options({\n    legend: {\n      color: {\n        position,\n        layout: {\n          justifyContent,\n          alignItems: 'flex-start',\n        },\n        size,\n        length,\n        crossPadding,\n      },\n    },\n  });\n  chart.render();\n};\n\n// 绑定事件\nsceneSelect.addEventListener('change', updateChart);\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const crossPaddingSlider = document.getElementById('crossPadding');\n  const crossPaddingValue = document.getElementById('crossPaddingValue');\n  const sizeSlider = document.getElementById('size');\n  const sizeValue = document.getElementById('sizeValue');\n  const lengthSlider = document.getElementById('length');\n  const lengthValue = document.getElementById('lengthValue');\n\n  if (crossPaddingSlider && crossPaddingValue) {\n    crossPaddingSlider.addEventListener('input', (e) => {\n      crossPaddingValue.textContent = e.target.value;\n      updateChart();\n    });\n  }\n\n  if (sizeSlider && sizeValue) {\n    sizeSlider.addEventListener('input', (e) => {\n      sizeValue.textContent = e.target.value;\n      updateChart();\n    });\n  }\n\n  if (lengthSlider && lengthValue) {\n    lengthSlider.addEventListener('input', (e) => {\n      lengthValue.textContent = e.target.value;\n      updateChart();\n    });\n  }\n});\n\n// 插入控制面板\ncontainer.insertBefore(controlPanel, container.firstChild);\n\n// 初始渲染\nchart.render();\n\n// 确保滑块事件正确绑定\nsetTimeout(() => {\n  const crossPaddingSlider = document.getElementById('crossPadding');\n  const crossPaddingValue = document.getElementById('crossPaddingValue');\n  const sizeSlider = document.getElementById('size');\n  const sizeValue = document.getElementById('sizeValue');\n  const lengthSlider = document.getElementById('length');\n  const lengthValue = document.getElementById('lengthValue');\n\n  if (crossPaddingSlider && crossPaddingValue) {\n    crossPaddingSlider.addEventListener('input', (e) => {\n      crossPaddingValue.textContent = e.target.value;\n      updateChart();\n    });\n  }\n\n  if (sizeSlider && sizeValue) {\n    sizeSlider.addEventListener('input', (e) => {\n      sizeValue.textContent = e.target.value;\n      updateChart();\n    });\n  }\n\n  if (lengthSlider && lengthValue) {\n    lengthSlider.addEventListener('input', (e) => {\n      lengthValue.textContent = e.target.value;\n      updateChart();\n    });\n  }\n}, 100);\n",paraId:87,tocIndex:8},{value:"查看",paraId:88,tocIndex:8},{value:"图例组件",paraId:89,tocIndex:8},{value:"的完整文档了解更多配置选项。",paraId:88,tocIndex:8},{value:"问题描述",paraId:90,tocIndex:9},{value:"在数据可视化中，经常需要绘制包含实际值和预测值的折线图，其中实际值部分用实线表示，预测值部分用虚线表示，以便用户清晰地区分历史数据和预测数据。",paraId:91,tocIndex:9},{value:"解决方案",paraId:92,tocIndex:9},{value:"G2 中一条线对应一个图形（Mark），无法在同一条线内设置不同的样式。要实现实线和虚线的混合效果，需要：",paraId:93,tocIndex:9},{value:"核心思路",paraId:94,tocIndex:9},{value:"：将数据按照类型（实际/预测）进行分组，使用 ",paraId:94,tocIndex:9},{value:"series",paraId:94,tocIndex:9},{value:" 编码创建多条线段，然后通过 ",paraId:94,tocIndex:9},{value:"style",paraId:94,tocIndex:9},{value:" 回调函数为不同类型的线段设置不同的样式。",paraId:94,tocIndex:9},{value:"关键配置",paraId:95,tocIndex:9},{value:"：",paraId:95,tocIndex:9},{value:"数据分组",paraId:96,tocIndex:9},{value:"：确保连接点处的数据在两个分组中都存在，保证线段的连续性",paraId:96,tocIndex:9},{value:"encode 配置",paraId:96,tocIndex:9},{value:"：\n",paraId:96,tocIndex:9},{value:"color",paraId:97,tocIndex:9},{value:"：用于图例分组，不同分组显示不同颜色",paraId:97,tocIndex:9},{value:"series",paraId:97,tocIndex:9},{value:"：用于创建多条线段，相同 series 值的数据点会连成一条线",paraId:97,tocIndex:9},{value:"样式回调",paraId:96,tocIndex:9},{value:"：通过 ",paraId:96,tocIndex:9},{value:"style.lineDash",paraId:96,tocIndex:9},{value:" 回调函数根据数据类型设置实线或虚线",paraId:96,tocIndex:9},{value:"示例代码",paraId:98,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    // 产品A的实际数据\n    {\n      year: '2018',\n      value: 80,\n      product: '产品A',\n      type: '实际',\n      series: '产品A-实际',\n    },\n    {\n      year: '2019',\n      value: 95,\n      product: '产品A',\n      type: '实际',\n      series: '产品A-实际',\n    },\n    {\n      year: '2020',\n      value: 100,\n      product: '产品A',\n      type: '实际',\n      series: '产品A-实际',\n    },\n    {\n      year: '2021',\n      value: 120,\n      product: '产品A',\n      type: '实际',\n      series: '产品A-实际',\n    },\n    {\n      year: '2022',\n      value: 110,\n      product: '产品A',\n      type: '实际',\n      series: '产品A-实际',\n    },\n    // 产品A的预测数据（注意2022年的连接点重复）\n    {\n      year: '2022',\n      value: 110,\n      product: '产品A',\n      type: '预测',\n      series: '产品A-预测',\n    },\n    {\n      year: '2023',\n      value: 125,\n      product: '产品A',\n      type: '预测',\n      series: '产品A-预测',\n    },\n    {\n      year: '2024',\n      value: 140,\n      product: '产品A',\n      type: '预测',\n      series: '产品A-预测',\n    },\n    {\n      year: '2025',\n      value: 160,\n      product: '产品A',\n      type: '预测',\n      series: '产品A-预测',\n    },\n    {\n      year: '2026',\n      value: 180,\n      product: '产品A',\n      type: '预测',\n      series: '产品A-预测',\n    },\n\n    // 产品B的实际数据\n    {\n      year: '2018',\n      value: 60,\n      product: '产品B',\n      type: '实际',\n      series: '产品B-实际',\n    },\n    {\n      year: '2019',\n      value: 70,\n      product: '产品B',\n      type: '实际',\n      series: '产品B-实际',\n    },\n    {\n      year: '2020',\n      value: 80,\n      product: '产品B',\n      type: '实际',\n      series: '产品B-实际',\n    },\n    {\n      year: '2021',\n      value: 90,\n      product: '产品B',\n      type: '实际',\n      series: '产品B-实际',\n    },\n    {\n      year: '2022',\n      value: 95,\n      product: '产品B',\n      type: '实际',\n      series: '产品B-实际',\n    },\n    // 产品B的预测数据\n    {\n      year: '2022',\n      value: 95,\n      product: '产品B',\n      type: '预测',\n      series: '产品B-预测',\n    },\n    {\n      year: '2023',\n      value: 100,\n      product: '产品B',\n      type: '预测',\n      series: '产品B-预测',\n    },\n    {\n      year: '2024',\n      value: 110,\n      product: '产品B',\n      type: '预测',\n      series: '产品B-预测',\n    },\n    {\n      year: '2025',\n      value: 125,\n      product: '产品B',\n      type: '预测',\n      series: '产品B-预测',\n    },\n    {\n      year: '2026',\n      value: 145,\n      product: '产品B',\n      type: '预测',\n      series: '产品B-预测',\n    },\n  ],\n  encode: {\n    x: 'year',\n    y: 'value',\n    color: 'product', // 用于图例分组（产品维度）\n    series: 'series', // 用于创建线段（product-type 组合）\n  },\n  scale: {\n    x: { range: [0, 1] },\n    y: { nice: true },\n  },\n  axis: {\n    x: { title: '年份' },\n    y: { title: '销售额（万元）' },\n  },\n  children: [\n    {\n      type: 'line',\n      encode: { shape: 'smooth' },\n      style: {\n        lineWidth: 2,\n        lineDash: (d) => {\n          // 根据数据类型设置线型：预测数据用虚线，实际数据用实线\n          return d[0].type === '预测' ? [4, 4] : null;\n        },\n      },\n    },\n    {\n      type: 'point',\n      encode: { shape: 'circle' },\n      style: { size: 3 },\n    },\n  ],\n});\n\nchart.render();\n",paraId:99,tocIndex:9},{value:"关键要点",paraId:100,tocIndex:9},{value:"数据结构设计",paraId:101,tocIndex:9},{value:"：每条数据包含 ",paraId:101,tocIndex:9},{value:"product",paraId:101,tocIndex:9},{value:"（产品）、",paraId:101,tocIndex:9},{value:"type",paraId:101,tocIndex:9},{value:"（实际/预测）、",paraId:101,tocIndex:9},{value:"series",paraId:101,tocIndex:9},{value:"（线段标识）字段",paraId:101,tocIndex:9},{value:"连接点处理",paraId:102,tocIndex:9},{value:"：2022 年的数据在实际和预测两个分组中都存在，确保线段连续",paraId:102,tocIndex:9},{value:"编码配置",paraId:103,tocIndex:9},{value:"：",paraId:103,tocIndex:9},{value:"color: 'product'",paraId:104,tocIndex:9},{value:"：按产品分组，生成图例",paraId:104,tocIndex:9},{value:"series: 'series'",paraId:104,tocIndex:9},{value:"：按组合字段分组，创建独立线段",paraId:104,tocIndex:9},{value:"样式回调",paraId:105,tocIndex:9},{value:"：",paraId:105,tocIndex:9},{value:"style: {\n  lineDash: (d) => (d[0].type === '预测' ? [4, 4] : null);\n}\n",paraId:106,tocIndex:9},{value:"注意事项",paraId:107,tocIndex:9},{value:"series",paraId:108,tocIndex:9},{value:" 编码决定了哪些数据点会连成一条线",paraId:108,tocIndex:9},{value:"color",paraId:108,tocIndex:9},{value:" 编码影响图例显示和颜色映射",paraId:108,tocIndex:9},{value:"样式回调函数中的 ",paraId:108,tocIndex:9},{value:"d[0]",paraId:108,tocIndex:9},{value:" 表示当前线段对应的第一个数据点",paraId:108,tocIndex:9},{value:"连接点（如示例中的 2022 年）必须在两个分组中都存在",paraId:108,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  { category: '前端开发', type: 'HTML结构', score: 3.48 },\n  { category: '前端开发', type: 'CSS样式', score: 3.52 },\n  { category: '前端开发', type: 'JavaScript编程', score: 3.31 },\n  { category: '前端开发', type: 'React框架', score: 3.28 },\n  { category: '后端开发', type: 'Java编程', score: 3.35 },\n  { category: '后端开发', type: '数据库设计', score: 3.58 },\n  { category: '后端开发', type: 'API开发', score: 3.12 },\n  { category: '后端开发', type: '微服务架构', score: 3.45 },\n  { category: '数据分析', type: 'Python数据处理', score: 3.42 },\n  { category: '数据分析', type: 'SQL查询优化', score: 3.33 },\n  { category: '数据分析', type: '机器学习建模', score: 3.56 },\n  { category: '数据分析', type: '数据可视化', score: 3.39 },\n  { category: '产品设计', type: '用户体验设计', score: 3.47 },\n  { category: '产品设计', type: '交互原型制作', score: 3.24 },\n  { category: '产品设计', type: '需求分析梳理', score: 3.51 },\n  { category: '产品设计', type: '竞品调研分析', score: 3.38 },\n  { category: '测试质量', type: '自动化测试脚本', score: 3.44 },\n  { category: '测试质量', type: '性能测试评估', score: 3.29 },\n  { category: '测试质量', type: '安全漏洞扫描', score: 3.36 },\n  { category: '测试质量', type: '兼容性验证', score: 3.18 },\n  { category: '运维部署', type: 'Docker容器化', score: 3.41 },\n  { category: '运维部署', type: 'Kubernetes编排', score: 3.33 },\n  { category: '运维部署', type: '监控告警配置', score: 3.27 },\n  { category: '运维部署', type: '持续集成部署', score: 3.49 },\n];\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data,\n  encode: {\n    x: 'type',\n    y: 'score',\n    color: (d) => d.category,\n  },\n  coordinate: {\n    transform: [\n      {\n        type: 'transpose',\n      },\n    ],\n  },\n  axis: {\n    x: { title: false }, // 隐藏x轴标题\n  },\n  scale: {\n    color: {\n      range: ['#BAE7FF', '#80C9FE', '#70E3E3', '#ABF5F5', '#FFB3BA', '#FFDFBA'], // 在这里自定义颜色\n    },\n  },\n});\n\nchart.render();\n",paraId:109,tocIndex:10},{value:"问题描述",paraId:110,tocIndex:11},{value:"在使用 G2 配置状态管理（State）时，发现配置的 ",paraId:111,tocIndex:11},{value:"active",paraId:111,tocIndex:11},{value:"、",paraId:111,tocIndex:11},{value:"selected",paraId:111,tocIndex:11},{value:" 等状态样式没有生效，图表的交互效果不符合预期。",paraId:111,tocIndex:11},{value:"原因分析",paraId:112,tocIndex:11},{value:"在语法正确的情况下，State 配置不生效通常有以下几种原因：",paraId:113,tocIndex:11},{value:"配置层级错误",paraId:114,tocIndex:11},{value:"：State 配置的传播机制存在限制，特别是在多个 Mark 的情况下",paraId:114,tocIndex:11},{value:"缺少交互插件",paraId:114,tocIndex:11},{value:"：State 需要配合相应的交互插件才能生效",paraId:114,tocIndex:11},{value:"解决方案",paraId:115,tocIndex:11},{value:"检查配置层级（最常见原因）",paraId:116,tocIndex:11},{value:"多个 Mark 时必须在每个 Mark 层级单独配置：",paraId:117,tocIndex:11},{value:"// ❌ 错误：多个 mark 时，view 层级的 state 不会传播\nchart.options({\n  type: 'view',\n  state: { active: { fill: 'red' } }, // 这个配置不会传播到子 mark\n  children: [{ type: 'line' }, { type: 'point' }],\n});\n\n// ✅ 正确：在每个 mark 层级单独配置 state\nchart.options({\n  type: 'view',\n  children: [\n    {\n      type: 'line',\n      state: { active: { stroke: 'red', strokeWidth: 2 } },\n    },\n    {\n      type: 'point',\n      state: { active: { fill: 'red', r: 6 } },\n    },\n  ],\n});\n",paraId:118,tocIndex:11},{value:"单个 Mark 时可以在 view 层级配置：",paraId:119,tocIndex:11},{value:"// ✅ 单个 mark 时，view 层级的 state 配置会生效\nchart.options({\n  type: 'view',\n  state: { active: { fill: 'red' } }, // 会传播到子 mark\n  children: [\n    { type: 'line' }, // 会继承 view 的 state 配置\n  ],\n});\n",paraId:120,tocIndex:11},{value:"直接在 Mark 层级配置：",paraId:121,tocIndex:11},{value:"// ✅ 直接在 mark 层级配置\nchart.options({\n  type: 'line',\n  state: { active: { stroke: 'red', strokeWidth: 2 } },\n});\n",paraId:122,tocIndex:11},{value:"确保配置了正确的交互",paraId:123,tocIndex:11},{value:"State 需要配合交互才能生效：",paraId:124,tocIndex:11},{value:"chart.options({\n  type: 'interval',\n  state: {\n    active: { fill: 'red' },\n    inactive: { fill: '#aaa' },\n    selected: { fill: 'orange' },\n    unselected: { fill: '#eee' },\n  },\n  // 必须配置相应的交互\n  interaction: {\n    elementHighlight: true, // 启用悬停高亮\n    elementSelect: true, // 启用点击选中\n  },\n});\n",paraId:125,tocIndex:11},{value:"常用的交互与对应状态：",paraId:126,tocIndex:11},{value:"交互",paraId:127,tocIndex:11},{value:"对应状态",paraId:127,tocIndex:11},{value:"说明",paraId:127,tocIndex:11},{value:"elementHighlight",paraId:127,tocIndex:11},{value:"active/inactive",paraId:127,tocIndex:11},{value:"悬停高亮",paraId:127,tocIndex:11},{value:"elementSelect",paraId:127,tocIndex:11},{value:"selected/unselected",paraId:127,tocIndex:11},{value:"点击选中",paraId:127,tocIndex:11},{value:"brushHighlight",paraId:127,tocIndex:11},{value:"active/inactive",paraId:127,tocIndex:11},{value:"区域刷选高亮",paraId:127,tocIndex:11},{value:"legendHighlight",paraId:127,tocIndex:11},{value:"active/inactive",paraId:127,tocIndex:11},{value:"图例高亮",paraId:127,tocIndex:11},{value:"elementHighlightByColor",paraId:127,tocIndex:11},{value:"active/inactive",paraId:127,tocIndex:11},{value:"按颜色高亮",paraId:127,tocIndex:11},{value:"elementSelectByColor",paraId:127,tocIndex:11},{value:"selected/unselected",paraId:127,tocIndex:11},{value:"按颜色选中",paraId:127,tocIndex:11},{value:"完整的配置示例",paraId:128,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { letter: 'A', frequency: 0.08167 },\n    { letter: 'B', frequency: 0.01492 },\n    { letter: 'C', frequency: 0.02782 },\n  ],\n  encode: { x: 'letter', y: 'frequency' },\n  state: {\n    // 悬停时：绿色填充 + 黑色描边\n    active: { fill: 'green', stroke: 'black', strokeWidth: 1 },\n    // 选中时：红色填充（会覆盖 active 的 fill）+ 保留 active 的描边\n    selected: { fill: 'red' },\n  },\n  interaction: { elementHighlight: true, elementSelect: true },\n});\n\nchart.render();\n",paraId:129,tocIndex:11},{value:"问题描述",paraId:130,tocIndex:12},{value:"在使用 G2 的状态管理时，当同时启用了 ",paraId:131,tocIndex:12},{value:"elementHighlight",paraId:131,tocIndex:12},{value:" 和 ",paraId:131,tocIndex:12},{value:"elementSelect",paraId:131,tocIndex:12},{value:" 交互，发现多个状态（如 ",paraId:131,tocIndex:12},{value:"active",paraId:131,tocIndex:12},{value:" 和 ",paraId:131,tocIndex:12},{value:"selected",paraId:131,tocIndex:12},{value:"）可能会同时生效，但样式表现不符合预期。",paraId:131,tocIndex:12},{value:"原因分析",paraId:132,tocIndex:12},{value:"G2 支持多个状态同时生效，当同一属性被多个状态配置时，会按照优先级选择最终生效的样式。不同状态的优先级如下：",paraId:133,tocIndex:12},{value:"selected:   3 (最高)\nunselected: 3\nactive:     2\ninactive:   2\ndefault:    1 (最低)\n",paraId:134,tocIndex:12},{value:"解决方案",paraId:135,tocIndex:12},{value:"理解状态优先级机制",paraId:136,tocIndex:12},{value:"高优先级的状态会覆盖低优先级状态的同名属性：",paraId:137,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { letter: 'A', frequency: 0.08167 },\n    { letter: 'B', frequency: 0.01492 },\n    { letter: 'C', frequency: 0.02782 },\n  ],\n  encode: { x: 'letter', y: 'frequency' },\n  state: {\n    // 悬停时：绿色填充 + 黑色描边\n    active: { fill: 'green', stroke: 'black', strokeWidth: 1 },\n    // 选中时：红色填充（会覆盖 active 的 fill）+ 保留 active 的描边\n    selected: { fill: 'red' },\n  },\n  interaction: { elementHighlight: true, elementSelect: true },\n});\n\nchart.render();\n",paraId:138,tocIndex:12},{value:"效果说明",paraId:139,tocIndex:12},{value:"：",paraId:139,tocIndex:12},{value:"仅悬停：显示绿色填充 + 黑色描边",paraId:140,tocIndex:12},{value:"仅选中：显示红色填充",paraId:140,tocIndex:12},{value:"悬停已选中的元素：红色填充（selected 优先级高）+ 黑色描边（active 提供）",paraId:140,tocIndex:12},{value:"合理配置不同优先级的样式",paraId:141,tocIndex:12},{value:"避免在不同优先级状态下配置相同的样式属性，或确保高优先级状态提供完整的样式配置：",paraId:142,tocIndex:12},{value:"chart.options({\n  state: {\n    active: {\n      stroke: 'blue',\n      strokeWidth: 2,\n      opacity: 0.8,\n    },\n    selected: {\n      fill: 'orange',\n      stroke: 'black',\n      strokeWidth: 3,\n      // 不配置 opacity，会保留 active 的 opacity 效果\n    },\n  },\n});\n",paraId:143,tocIndex:12},{value:"使用动态样式处理复杂场景",paraId:144,tocIndex:12},{value:"对于复杂的状态组合，可以使用函数动态计算样式：",paraId:145,tocIndex:12},{value:"chart.options({\n  state: {\n    active: {\n      fill: (d) => (d.frequency > 0.05 ? 'lightblue' : 'lightgreen'),\n    },\n    selected: {\n      fill: (d) => (d.frequency > 0.05 ? 'darkblue' : 'darkgreen'),\n      strokeWidth: 3,\n    },\n  },\n});\n",paraId:146,tocIndex:12},{value:"问题描述",paraId:147,tocIndex:13},{value:"在具体业务场景中使用 G2 绘制图表时，数据中经常包含 ",paraId:148,tocIndex:13},{value:"null",paraId:148,tocIndex:13},{value:"、",paraId:148,tocIndex:13},{value:"undefined",paraId:148,tocIndex:13},{value:" 或空字符串等无效值。默认情况下，这些空值也会在 tooltip 中显示，影响用户体验和数据的可读性。",paraId:148,tocIndex:13},{value:"解决方案",paraId:149,tocIndex:13},{value:"可以通过 ",paraId:150,tocIndex:13},{value:"interaction.tooltip.filter",paraId:150,tocIndex:13},{value:" 配置来过滤掉这些无效数据，避免在 tooltip 中显示空值。",paraId:150,tocIndex:13},{value:"基础过滤配置",paraId:151,tocIndex:13},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  data: [\n    { month: 'Jan', city: 'Tokyo', temperature: null },\n    { month: 'Jan', city: 'London', temperature: 3.9 },\n    { month: 'Feb', city: 'Tokyo', temperature: 8 },\n    { month: 'Feb', city: 'London', temperature: 4.2 },\n    { month: 'Mar', city: 'Tokyo', temperature: 9.5 },\n    { month: 'Mar', city: 'London', temperature: 5.7 },\n  ],\n  encode: { x: 'month', y: 'temperature', color: 'city' },\n  // 过滤 null 和 undefined 值\n  interaction: {\n    tooltip: {\n      filter: (d) => d.value !== null && d.value !== undefined,\n    },\n  },\n  children: [\n    {\n      type: 'line',\n      encode: { shape: 'smooth' },\n      tooltip: {\n        items: [{ channel: 'y' }],\n      },\n    },\n    { type: 'point', encode: { shape: 'point' }, tooltip: false },\n  ],\n});\n\nchart.render();\n",paraId:152,tocIndex:13},{value:"针对特定数值范围的过滤",paraId:153,tocIndex:13},{value:"除了过滤空值，还可以过滤特定数值范围的数据：",paraId:154,tocIndex:13},{value:"// 过滤负值和空值\ninteraction: {\n  tooltip: {\n    filter: (d) => d.value !== null && d.value !== undefined && d.value >= 0,\n  },\n}\n\n// 过滤异常值（如超出合理范围的数据）\ninteraction: {\n  tooltip: {\n    filter: (d) => {\n      if (d.value === null || d.value === undefined) return false;\n      return d.value >= 0 && d.value <= 1000; // 只显示 0-1000 范围内的值\n    },\n  },\n}\n",paraId:155,tocIndex:13},{value:"问题描述",paraId:156,tocIndex:14},{value:"在使用 G2 绘制图表时，图例项的文本内容可能很长，受限于布局空间无法完全显示。需要实现文本超长时显示省略号，同时支持鼠标悬浮显示完整内容的交互效果。",paraId:157,tocIndex:14},{value:"解决方案",paraId:158,tocIndex:14},{value:"G2 提供了 ",paraId:159,tocIndex:14},{value:"poptip",paraId:159,tocIndex:14},{value:" 配置项来解决图例文本过长的问题。通过配置 ",paraId:159,tocIndex:14},{value:"poptip",paraId:159,tocIndex:14},{value:"，可以在图例文本被截断时，鼠标悬浮显示完整的提示信息。",paraId:159,tocIndex:14},{value:"关键配置",paraId:160,tocIndex:14},{value:"itemWidth",paraId:161,tocIndex:14},{value:": 限制图例项宽度，触发文本截断",paraId:161,tocIndex:14},{value:"poptip.render",paraId:161,tocIndex:14},{value:": 自定义提示内容，支持字符串或者 ",paraId:161,tocIndex:14},{value:"html",paraId:161,tocIndex:14},{value:"poptip.domStyles",paraId:161,tocIndex:14},{value:": 自定义提示框样式",paraId:161,tocIndex:14},{value:"poptip.position",paraId:161,tocIndex:14},{value:": 设置提示框位置",paraId:161,tocIndex:14},{value:"poptip.offset",paraId:161,tocIndex:14},{value:": 设置提示框偏移量，建议设置为[0, 正数]，避免触发 ",paraId:161,tocIndex:14},{value:"poptip",paraId:161,tocIndex:14},{value:" 的时候闪烁",paraId:161,tocIndex:14},{value:"完整示例",paraId:162,tocIndex:14},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 300,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { category: '这是一个非常长的类别名称A，超出显示范围', value: 40 },\n    { category: '这是一个非常长的类别名称B，超出显示范围', value: 32 },\n    { category: '这是一个非常长的类别名称C，超出显示范围', value: 28 },\n  ],\n  encode: { x: 'category', y: 'value', color: 'category' },\n  coordinate: {\n    transform: [\n      {\n        type: 'transpose',\n      },\n    ],\n  },\n  legend: {\n    color: {\n      itemWidth: 120, // 限制宽度以触发poptip\n      poptip: {\n        render: (item) => `完整名称：${item.label}`,\n        position: 'top',\n        offset: [0, 20],\n        domStyles: {\n          '.component-poptip': {\n            background: 'rgb(114, 128, 191)',\n            color: '#fff',\n            padding: '12px 16px',\n            borderRadius: '8px',\n            backdropFilter: 'blur(10px)',\n            fontSize: '14px',\n            lineHeight: '1.5',\n            maxWidth: '280px',\n            zIndex: '1000',\n          },\n          '.component-poptip-arrow': {\n            display: 'block',\n            borderTopColor: '#667eea',\n          },\n          '.component-poptip-text': {\n            color: '#fff',\n            lineHeight: '1.5',\n          },\n        },\n      },\n    },\n  },\n});\n\nchart.render();\n",paraId:163,tocIndex:14},{value:"查看",paraId:164,tocIndex:14},{value:"图例组件",paraId:165,tocIndex:14},{value:"的详细文档了解更多配置选项。",paraId:164,tocIndex:14},{value:"问题描述",paraId:166,tocIndex:15},{value:"在使用 G2 绘制图表时，当使用 ",paraId:167,tocIndex:15},{value:"interaction.tooltip.render",paraId:167,tocIndex:15},{value:" 自定义 tooltip 渲染内容的时候，明明没有加入逗号，最终渲染出的 tooltip 却被逗号分隔开了。",paraId:167,tocIndex:15},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { name: 'London', 月份: 'Jan.', 月均降雨量: 18.9 },\n    { name: 'London', 月份: 'Feb.', 月均降雨量: 28.8 },\n    { name: 'London', 月份: 'Mar.', 月均降雨量: 39.3 },\n    { name: 'London', 月份: 'Apr.', 月均降雨量: 81.4 },\n    { name: 'London', 月份: 'May', 月均降雨量: 47 },\n    { name: 'London', 月份: 'Jun.', 月均降雨量: 20.3 },\n    { name: 'London', 月份: 'Jul.', 月均降雨量: 24 },\n    { name: 'London', 月份: 'Aug.', 月均降雨量: 35.6 },\n    { name: 'Berlin', 月份: 'Jan.', 月均降雨量: 12.4 },\n    { name: 'Berlin', 月份: 'Feb.', 月均降雨量: 23.2 },\n    { name: 'Berlin', 月份: 'Mar.', 月均降雨量: 34.5 },\n    { name: 'Berlin', 月份: 'Apr.', 月均降雨量: 99.7 },\n    { name: 'Berlin', 月份: 'May', 月均降雨量: 52.6 },\n    { name: 'Berlin', 月份: 'Jun.', 月均降雨量: 35.5 },\n    { name: 'Berlin', 月份: 'Jul.', 月均降雨量: 37.4 },\n    { name: 'Berlin', 月份: 'Aug.', 月均降雨量: 42.4 },\n  ],\n  encode: { x: '月份', y: '月均降雨量', color: 'name' },\n  transform: [{ type: 'dodgeX' }],\n  interaction: {\n    tooltip: {\n      shared: true,\n      render: (event, { title, items }) => `<div>\n    <h3 style=\"padding: 0; margin: 0; color: red;\">${title}</h3>\n    <div>${items.map(\n      (d) => `\n    <div><span style=\"color: ${d.color}\">${d.name}</span> ${d.value}</div>\n    `,\n    )}</div>\n    </div>\n    `,\n    },\n  },\n});\n\nchart.render();\n",paraId:168,tocIndex:15},{value:"原因分析",paraId:169,tocIndex:15},{value:"这个问题的根本原因在于 JavaScript 数组的 ",paraId:170,tocIndex:15},{value:"toString()",paraId:170,tocIndex:15},{value:" 方法行为。当使用 ",paraId:170,tocIndex:15},{value:"items.map()",paraId:170,tocIndex:15},{value:" 返回一个字符串数组时，在模板字符串的 ",paraId:170,tocIndex:15},{value:"${}",paraId:170,tocIndex:15},{value:" 中，JavaScript 会自动调用数组的 ",paraId:170,tocIndex:15},{value:"toString()",paraId:170,tocIndex:15},{value:" 方法进行类型转换。而数组的 ",paraId:170,tocIndex:15},{value:"toString()",paraId:170,tocIndex:15},{value:" 方法会使用逗号来连接所有数组元素，这就是逗号出现的原因。",paraId:170,tocIndex:15},{value:"例如：",paraId:171,tocIndex:15},{value:"const array = ['<div>item1</div>', '<div>item2</div>', '<div>item3</div>'];\nconsole.log(`${array}`); // 输出：<div>item1</div>,<div>item2</div>,<div>item3</div>\n",paraId:172,tocIndex:15},{value:"解决方案",paraId:173,tocIndex:15},{value:"使用 ",paraId:174,tocIndex:15},{value:".join('')",paraId:174,tocIndex:15},{value:" 方法将数组元素连接成字符串，而不是依赖 JavaScript 的自动类型转换：",paraId:174,tocIndex:15},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { name: 'London', 月份: 'Jan.', 月均降雨量: 18.9 },\n    { name: 'London', 月份: 'Feb.', 月均降雨量: 28.8 },\n    { name: 'London', 月份: 'Mar.', 月均降雨量: 39.3 },\n    { name: 'London', 月份: 'Apr.', 月均降雨量: 81.4 },\n    { name: 'London', 月份: 'May', 月均降雨量: 47 },\n    { name: 'London', 月份: 'Jun.', 月均降雨量: 20.3 },\n    { name: 'London', 月份: 'Jul.', 月均降雨量: 24 },\n    { name: 'London', 月份: 'Aug.', 月均降雨量: 35.6 },\n    { name: 'Berlin', 月份: 'Jan.', 月均降雨量: 12.4 },\n    { name: 'Berlin', 月份: 'Feb.', 月均降雨量: 23.2 },\n    { name: 'Berlin', 月份: 'Mar.', 月均降雨量: 34.5 },\n    { name: 'Berlin', 月份: 'Apr.', 月均降雨量: 99.7 },\n    { name: 'Berlin', 月份: 'May', 月均降雨量: 52.6 },\n    { name: 'Berlin', 月份: 'Jun.', 月均降雨量: 35.5 },\n    { name: 'Berlin', 月份: 'Jul.', 月均降雨量: 37.4 },\n    { name: 'Berlin', 月份: 'Aug.', 月均降雨量: 42.4 },\n  ],\n  encode: { x: '月份', y: '月均降雨量', color: 'name' },\n  transform: [{ type: 'dodgeX' }],\n  interaction: {\n    tooltip: {\n      shared: true,\n      render: (event, { title, items }) => `<div>\n    <h3 style=\"padding: 0; margin: 0; color: red;\">${title}</h3>\n    <div>${items\n      .map(\n        (d) => `\n    <div><span style=\"color: ${d.color}\">${d.name}</span> ${d.value}</div>\n    `,\n      )\n      .join('')}</div>\n    </div>\n    `,\n    },\n  },\n});\n\nchart.render();\n",paraId:175,tocIndex:15},{value:"关键修改",paraId:176,tocIndex:15},{value:"：",paraId:176,tocIndex:15},{value:"// ❌ 错误：会产生逗号分隔\n${items.map((d) => `<div>...</div>`)}\n\n// ✅ 正确：使用 join('') 避免逗号\n${items.map((d) => `<div>...</div>`).join('')}\n",paraId:177,tocIndex:15},{value:"其他解决方案",paraId:178,tocIndex:15},{value:"使用 forEach + 字符串拼接",paraId:179,tocIndex:15},{value:"：",paraId:179,tocIndex:15},{value:'render: (event, { title, items }) => {\n  let content = `<h3 style="padding: 0; margin: 0; color: red;">${title}</h3>`;\n  items.forEach((d) => {\n    content += `<div><span style="color: ${d.color}">${d.name}</span> ${d.value}</div>`;\n  });\n  return `<div>${content}</div>`;\n};\n',paraId:180,tocIndex:15},{value:"使用 reduce 方法",paraId:181,tocIndex:15},{value:"：",paraId:181,tocIndex:15},{value:'render: (event, { title, items }) => `<div>\n  <h3 style="padding: 0; margin: 0; color: red;">${title}</h3>\n  <div>${items.reduce(\n    (acc, d) =>\n      acc +\n      `<div><span style="color: ${d.color}">${d.name}</span> ${d.value}</div>`,\n    \'\',\n  )}</div>\n</div>`;\n',paraId:182,tocIndex:15},{value:"注意事项",paraId:183,tocIndex:15},{value:"在任何需要将数组转换为字符串并嵌入模板字符串的场景中，都要注意使用 ",paraId:184,tocIndex:15},{value:".join('')",paraId:184,tocIndex:15},{value:"如果需要特定的分隔符（如换行符），可以使用 ",paraId:184,tocIndex:15},{value:".join('\\n')",paraId:184,tocIndex:15},{value:" 或其他分隔符",paraId:184,tocIndex:15},{value:"这个问题在 React JSX、Vue 模板等其他框架中也可能遇到类似情况",paraId:184,tocIndex:15}]},47675:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(15755);const t=[{value:"new Chart(params: ChartCfg) => View;\n",paraId:0,tocIndex:1},{value:"创建 Chart 图表对象。",paraId:1,tocIndex:1},{value:"const chart = new Chart({\n  container: 'container',\n  width: 640,\n  height: 480,\n});\n",paraId:2,tocIndex:1},{value:" ",paraId:3,tocIndex:2},{value:"string | HTMLElement",paraId:3,tocIndex:2},{value:" ",paraId:3,tocIndex:2},{value:"optional",paraId:3,tocIndex:2},{value:" ",paraId:3,tocIndex:2},{value:"指定 chart 绘制的 DOM，可以传入 DOM id，也可以直接传入 DOM 实例。",paraId:4,tocIndex:2},{value:"// 传入 DOM id\nconst chart = new Chart({\n  container: 'container',\n});\n// 传入 DOM 实例\nconst container = document.createElement('div');\nconst chart = new Chart({\n  container,\n});\n\n// 获取默认的 container\nconst chart = new Chart();\nchart.options({});\nchart.render();\nreturn chart.getContainer();\n",paraId:5,tocIndex:2},{value:" ",paraId:6,tocIndex:3},{value:"boolean",paraId:6,tocIndex:3},{value:" ",paraId:6,tocIndex:3},{value:"optional",paraId:6,tocIndex:3},{value:" ",paraId:6,tocIndex:3},{value:"default:",paraId:6,tocIndex:3},{value:" ",paraId:6,tocIndex:3},{value:"false",paraId:6,tocIndex:3},{value:"图表是否自适应容器宽高，默认为 ",paraId:7,tocIndex:3},{value:"false",paraId:7,tocIndex:3},{value:"，用户需要手动设置 width 和 height。当 ",paraId:7,tocIndex:3},{value:"autoFit: true",paraId:7,tocIndex:3},{value:" 时，会自动取图表容器的宽高，如果用户设置了 height，那么会以用户设置的 height 为准。",paraId:7,tocIndex:3},{value:" ",paraId:8,tocIndex:4},{value:"boolean",paraId:8,tocIndex:4},{value:" ",paraId:8,tocIndex:4},{value:"optional",paraId:8,tocIndex:4},{value:" ",paraId:8,tocIndex:4},{value:"default:",paraId:8,tocIndex:4},{value:" ",paraId:8,tocIndex:4},{value:"false",paraId:8,tocIndex:4},{value:"是否隐藏超出绘制区域的图形。",paraId:9,tocIndex:4},{value:"clip = false",paraId:10,tocIndex:4},{value:" 时，不会对超出绘制区域的图形进行截断。",paraId:10,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .data([\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ])\n  .encode('x', 'year')\n  .encode('y', 'value')\n  .scale('x', {\n    range: [0, 1],\n  })\n  .scale('y', {\n    domainMin: 6,\n    nice: true,\n  });\n\nchart.line().label({\n  text: 'value',\n  style: {\n    dx: -10,\n    dy: -12,\n  },\n});\n\nchart.point().style('fill', 'white').tooltip(false);\nchart.render();\n",paraId:11,tocIndex:4},{value:"如果不希望绘制超出绘制区域的图形，需要配置",paraId:12,tocIndex:4},{value:"clip = true",paraId:12,tocIndex:4},{value:"，此时 类似于 ",paraId:12,tocIndex:4},{value:"point",paraId:12,tocIndex:4},{value:" 标记的图形可能被截断，可以通过调整 ",paraId:12,tocIndex:4},{value:"inset",paraId:12,tocIndex:4},{value:" 大小来解决。",paraId:12,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  clip: true,\n  inset: 20,\n});\n\nchart\n  .data([\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ])\n  .encode('x', 'year')\n  .encode('y', 'value')\n  .scale('x', {\n    range: [0, 1],\n  })\n  .scale('y', {\n    domainMin: 6,\n    nice: true,\n  });\n\nchart.line().label({\n  text: 'value',\n  style: {\n    dx: -10,\n    dy: -12,\n  },\n});\n\nchart.point().style('fill', 'white').tooltip(false);\nchart.render();\n",paraId:13,tocIndex:4},{value:" ",paraId:14,tocIndex:5},{value:"number",paraId:14,tocIndex:5},{value:" ",paraId:14,tocIndex:5},{value:"optional",paraId:14,tocIndex:5},{value:" ",paraId:14,tocIndex:5},{value:"default:",paraId:14,tocIndex:5},{value:" ",paraId:14,tocIndex:5},{value:"640",paraId:14,tocIndex:5},{value:" ",paraId:14,tocIndex:5},{value:"图表宽度。",paraId:15,tocIndex:5},{value:"number",paraId:16,tocIndex:6},{value:" ",paraId:16,tocIndex:6},{value:"optional",paraId:16,tocIndex:6},{value:" ",paraId:16,tocIndex:6},{value:"default:",paraId:16,tocIndex:6},{value:" ",paraId:16,tocIndex:6},{value:"480",paraId:16,tocIndex:6},{value:" ",paraId:16,tocIndex:6},{value:"图表高度。",paraId:17,tocIndex:6},{value:" ",paraId:18,tocIndex:7},{value:"number",paraId:18,tocIndex:7},{value:" ",paraId:18,tocIndex:7},{value:"optional",paraId:18,tocIndex:7},{value:" ",paraId:18,tocIndex:7},{value:"default:",paraId:18,tocIndex:7},{value:" ",paraId:18,tocIndex:7},{value:"0",paraId:18,tocIndex:7},{value:" ",paraId:18,tocIndex:7},{value:"图表深度，在 3D 图表中使用。",paraId:19,tocIndex:7},{value:" ",paraId:20,tocIndex:8},{value:"'auto' | number",paraId:20,tocIndex:8},{value:" ",paraId:20,tocIndex:8},{value:"optional",paraId:20,tocIndex:8},{value:" ",paraId:20,tocIndex:8},{value:"default:",paraId:20,tocIndex:8},{value:" ",paraId:20,tocIndex:8},{value:"'auto'",paraId:20,tocIndex:8},{value:"设置图表的内边距，使用方式参考 CSS 盒模型。",paraId:21,tocIndex:8},{value:"const chart = new Chart({\n  container: 'container',\n  width: 1000,\n  height: 500,\n  padding: 20,\n});\n",paraId:22,tocIndex:8},{value:" ",paraId:23,tocIndex:9},{value:"number",paraId:23,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"optional",paraId:23,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"default:",paraId:23,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"16",paraId:23,tocIndex:9},{value:"设置图表的外边距，使用方式参考 CSS 盒模型。",paraId:24,tocIndex:9},{value:"const chart = new Chart({\n  container: 'container',\n  width: 1000,\n  height: 500,\n  margin: 20,\n});\n",paraId:25,tocIndex:9},{value:" ",paraId:26,tocIndex:10},{value:"number",paraId:26,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"optional",paraId:26,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"default:",paraId:26,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"0",paraId:26,tocIndex:10},{value:"设置图表的呼吸范围宽度。",paraId:27,tocIndex:10},{value:"const chart = new G2.Chart({\n  container: 'container',\n  width: 1000,\n  height: 500,\n  inset: 20,\n});\n",paraId:28,tocIndex:10},{value:"关于图表布局的更多内容见 ",paraId:29,tocIndex:10},{value:"图表布局",paraId:30,tocIndex:10},{value:"。",paraId:29,tocIndex:10},{value:"Canvas",paraId:31,tocIndex:11},{value:" | ",paraId:31,tocIndex:11},{value:"SVG",paraId:31,tocIndex:11},{value:" | ",paraId:31,tocIndex:11},{value:"WebGL",paraId:31,tocIndex:11},{value:" ",paraId:31,tocIndex:11},{value:"optional",paraId:31,tocIndex:11},{value:" ",paraId:31,tocIndex:11},{value:"default:",paraId:31,tocIndex:11},{value:" ",paraId:31,tocIndex:11},{value:"Canvas",paraId:31,tocIndex:11},{value:" ",paraId:31,tocIndex:11},{value:"指定渲染引擎，默认使用 Canvas。",paraId:32,tocIndex:11},{value:"当前为了 G2 整体包大小，所以仅仅内置 Canvas 渲染, 如果需要使用 SVG 渲染或者 WebGL 渲染，需要先引入相应的包。",paraId:33,tocIndex:11},{value:"import { Chart } from '@antv/g2';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\n\nconst chart = new Chart({\n  container: 'container',\n  // 或者选择 WebGLRenderer 渲染器，不设置默认为 CanvasRenderer.\n  renderer: new SVGRenderer(),\n});\n",paraId:34,tocIndex:11},{value:"关于渲染器的更多内容见 ",paraId:35,tocIndex:11},{value:"renderer",paraId:36,tocIndex:11},{value:"。",paraId:35,tocIndex:11},{value:" ",paraId:37,tocIndex:12},{value:"'classic' | 'classicDark' | 'academy' | customTheme",paraId:37,tocIndex:12},{value:" ",paraId:37,tocIndex:12},{value:"optional",paraId:37,tocIndex:12},{value:"配置图表主题，目前 g2 内置有三种主题模式，如需要自定义配置，可以先通过 ",paraId:38,tocIndex:12},{value:"register",paraId:38,tocIndex:12},{value:" 注册主题，再设置主题 key。",paraId:38,tocIndex:12},{value:"import { Light, register, Chart } from '@antv/g2';\n\n// 定义主题\nfunction CustomTheme() {\n  const light = Light();\n  return {\n    ...light,\n    category20: [\n      '#FFC0CB',\n      '#A2F5E8',\n      '#D4B0FF',\n      '#FFF3A3',\n      '#9AD6E3',\n      '#FFD8B1',\n      '#C3E6B4',\n      '#E8CFF8',\n      '#FFB7A0',\n      '#B8D0EB',\n      '#F5E6C3',\n      '#EED5B7',\n      '#C5D4EB',\n      '#D9C2F0',\n      '#D4EDC9',\n      '#B8E0A8',\n      '#EFD3A7',\n      '#F7CBD4',\n      '#F7ABD4',\n      '#F0E6E6',\n    ],\n  };\n}\n\n// 注册主题\nregister('theme.custom', CustomTheme);\n\nconst chart = new Chart({\n  container: 'container',\n  theme: { type: 'custom' }, // 使用主题\n});\n\nchart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency', color: 'letter' },\n  axis: { y: { labelFormatter: '.0%' } },\n});\n\nchart.render();\n",paraId:39,tocIndex:12},{value:" ",paraId:40,tocIndex:13},{value:"any[]",paraId:40,tocIndex:13},{value:" ",paraId:40,tocIndex:13},{value:"optional",paraId:40,tocIndex:13},{value:"指定渲染时使用的插件。插件作为一种灵活的拓展机制，用户可以通过插件来扩展 G2 的功能。",paraId:41,tocIndex:13},{value:"例如手绘风格的图表。",paraId:42,tocIndex:13},{value:"import { Plugin } from '@antv/g-plugin-rough-canvas-renderer';\n\nconst chart = new Chart({\n  container: 'container',\n  plugins: [new Plugin()],\n});\n",paraId:43,tocIndex:13},{value:"还可以通过插件实现无障碍中的文本搜索功能。",paraId:44,tocIndex:13},{value:"import { Plugin } from '@antv/g-plugin-a11y';\n\nconst plugin = new Plugin({ enableExtractingText: true });\n\nconst chart = new Chart({\n  container: 'container',\n  plugins: [plugin],\n});\n",paraId:45,tocIndex:13},{value:"关于插件使用的更多内容见 ",paraId:46,tocIndex:13},{value:"plugin-rough",paraId:47,tocIndex:13},{value:"、",paraId:46,tocIndex:13},{value:"plugin-a11y",paraId:48,tocIndex:13},{value:"。",paraId:46,tocIndex:13},{value:"G2 提供了一套命令式的 Functional API 去声明图表，比如如下声明一个最简单的条形图。",paraId:49,tocIndex:14},{value:"import { Chart } from '@antv/g2';\n\n// 初始化图表实例\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// 声明可视化\nchart\n  .interval() // 创建一个 Interval 标记\n  .data([\n    // 绑定数据\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre') // 编码 x 通道\n  .encode('y', 'sold'); // 编码 y 通道\n\n// 渲染可视化\nchart.render();\n",paraId:50,tocIndex:14},{value:"Functional API 是基于 Spec API 实现的：简单来讲，每一个 Chart 实例都有一个 options，Functional API 是通过一系列方法去生成这个 options，而 Spec API 是直接设置这个 options。不论是哪种形式的 API，G2 最后都是直接渲染当前的 options，所以两者声明可视化的能力是完全等价。",paraId:51,tocIndex:14},{value:"设置属性",paraId:52,tocIndex:14},{value:"获取或者设置图表的整体配置 Spec。",paraId:53,tocIndex:15},{value:"// 获取配置项\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  })\n  .encode('x', 'height')\n  .encode('y', 'weight')\n  .encode('color', 'gender');\nconsole.log(chart.options());\n\n// 设置配置项\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  },\n  encode: { x: 'height', y: 'weight', color: 'gender' },\n});\n",paraId:54,tocIndex:15},{value:"创建复合容器",paraId:55,tocIndex:15},{value:"G2 的 Spec 总体来讲是一个有层级结构的",paraId:56,tocIndex:15},{value:"视图树（View Tree）",paraId:56,tocIndex:15},{value:"，由不同的节点构成。节点通过 ",paraId:56,tocIndex:15},{value:"node.type",paraId:56,tocIndex:15},{value:" 指定类型，不同的类型有不同的作用，同时通过 ",paraId:56,tocIndex:15},{value:"node.children",paraId:56,tocIndex:15},{value:" 来进行嵌套。",paraId:56,tocIndex:15},{value:"其中视图可以简单理解为图表，或者",paraId:57,tocIndex:15},{value:"单视图图表（Single View Plot）",paraId:57,tocIndex:15},{value:"。这颗“树”通过不同的容器节点在时间和空间上管理视图，从而绘制",paraId:57,tocIndex:15},{value:"多视图图表（Multiple View Plots）",paraId:57,tocIndex:15},{value:"。",paraId:57,tocIndex:15},{value:"({\n  type: 'spaceFlex',\n  children: [\n    {\n      type: 'view',\n      children: [{ type: 'line' }, { type: 'point' }],\n    },\n    {\n      type: 'interval',\n    },\n  ],\n});\n",paraId:58,tocIndex:15},{value:"API 是通过 ",paraId:59,tocIndex:15},{value:"parent.[child]()",paraId:59,tocIndex:15},{value:" 的形式给指定的 ",paraId:59,tocIndex:15},{value:"parent",paraId:59,tocIndex:15},{value:" 添加对应的 ",paraId:59,tocIndex:15},{value:"child",paraId:59,tocIndex:15},{value:" 节点来声明层次关系的，比如上面的层次关系用 API 需要如下声明：",paraId:59,tocIndex:15},{value:"const spaceFlex = chart.spaceFlex();\n\nconst view = spaceFlex.view();\n\nview.line();\n\nview.point();\n\nspaceFlex.interval();\n",paraId:60,tocIndex:15},{value:"添加 ",paraId:61,tocIndex:16},{value:"view",paraId:62,tocIndex:16},{value:" 视图。G2 中视图（View） 用来绘制多个标记。一个视图拥有一个坐标系，也是应用交互的最小单位。",paraId:61,tocIndex:16},{value:"const spaceFlex = chart.spaceFlex();\n\nconst view = spaceFlex.view();\n\nview.line();\nview.point();\n",paraId:63,tocIndex:16},{value:"添加 ",paraId:64,tocIndex:17},{value:"spaceLayer",paraId:65,tocIndex:17},{value:" 复合容器。spaceLayer 对空间不做任何划分，多个视图使用同一个空间区域，常用于视图的层叠。",paraId:64,tocIndex:17},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst layer = chart.spaceLayer().data({\n  type: 'fetch',\n  value:\n    'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  format: 'csv',\n});\n\n// 柱图\nlayer\n  .interval()\n  .attr('paddingLeft', 50)\n  .transform({ type: 'sortX', reverse: true, by: 'y' })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('color', 'letter');\n\n// 饼图\nlayer\n  .interval()\n  .attr('paddingLeft', 400)\n  .attr('paddingBottom', 200)\n  .coordinate({ type: 'theta' })\n  .transform({ type: 'stackY' })\n  .legend(false)\n  .encode('y', 'frequency')\n  .encode('color', 'letter');\n\nchart.render();\n",paraId:66,tocIndex:17},{value:"添加 ",paraId:67,tocIndex:18},{value:"spaceFlex",paraId:68,tocIndex:18},{value:" 复合容器。",paraId:67,tocIndex:18},{value:"spaceFlex",paraId:67,tocIndex:18},{value:" 使用类似 css flex 的布局方式来划分空间区域，常用于多图表对比的视图。",paraId:67,tocIndex:18},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 900,\n});\n\nconst flex = chart\n  .spaceFlex()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n  })\n  .attr('direction', 'col')\n  .attr('ratio', [1, 2]);\n\nflex\n  .interval()\n  .attr('paddingBottom', 0)\n  .attr('paddingRight', 300)\n  .transform({ type: 'groupX', y: 'max' })\n  .axis('x', false)\n  .encode('x', (d) => new Date(d.date).getUTCDate())\n  .encode('y', 'temp_max')\n  .encode('color', 'steelblue');\n\nflex\n  .spaceFlex()\n  .attr('ratio', [2, 1])\n  .call((node) =>\n    node\n      .cell()\n      .attr('paddingRight', 0)\n      .attr('paddingBottom', 50)\n      .transform({ type: 'group', color: 'max' })\n      .encode('x', (d) => new Date(d.date).getUTCDate())\n      .encode('y', (d) => new Date(d.date).getUTCMonth())\n      .encode('color', 'temp_max')\n      .style('inset', 0.5)\n      .axis('x', { title: 'Date' })\n      .axis('y', { title: 'Month' })\n      .legend({ color: false })\n      .scale('color', {\n        type: 'sequential',\n        palette: 'gnBu',\n      }),\n  )\n  .call((node) =>\n    node\n      .interval()\n      .attr('paddingBottom', 50)\n      .transform({ type: 'groupX', y: 'max' })\n      .coordinate({ transform: [{ type: 'transpose' }] });\n      .axis('x', false)\n      .encode('x', (d) => new Date(d.date).getUTCMonth())\n      .encode('y', 'temp_max')\n      .encode('color', 'steelblue'),\n  );\n\nchart.render();\n",paraId:69,tocIndex:18},{value:"添加 ",paraId:70,tocIndex:19},{value:"facetRect",paraId:71,tocIndex:19},{value:" 复合容器。",paraId:70,tocIndex:19},{value:"facetRect",paraId:70,tocIndex:19},{value:" 用 row、column 字段维值对空间和数据进行划分，在各个子空间可视化数据片段。",paraId:70,tocIndex:19},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 928,\n  height: 270,\n  paddingBottom: 50,\n});\n\nconst facetRect = chart\n  .facetRect()\n  .attr('paddingBottom', 50)\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/anscombe.json',\n  })\n  .encode('x', 'series');\n\nfacetRect\n  .point()\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .style('stroke', '#000')\n  .attr('inset', 10);\n\nchart.render();\n",paraId:72,tocIndex:19},{value:"添加 ",paraId:73,tocIndex:20},{value:"facetCircle",paraId:74,tocIndex:20},{value:" 复合容器。",paraId:73,tocIndex:20},{value:"facetCircle",paraId:73,tocIndex:20},{value:" 根据字段分片数据，利用圆形划分空间，然后进行各个分面的数据可视化。",paraId:73,tocIndex:20},{value:"import { Chart } from '@antv/g2';\n\nconst M = [\n  'Jan.',\n  'Feb.',\n  'Mar.',\n  'Apr.',\n  'May',\n  'Jun.',\n  'Jul.',\n  'Aug.',\n  'Sept.',\n  'Oct.',\n  'Nov.',\n  'Dec.',\n];\nconst N = ['A', 'B', 'C', 'D'];\nconst data = M.flatMap((month) =>\n  N.map((name) => ({\n    month,\n    name,\n    value: Math.random(),\n  })),\n);\n\nconst chart = new Chart({\n  container: 'container',\n  width: 480,\n  height: 480,\n});\n\nconst facetCircle = chart.facetCircle().data(data).encode('position', 'month');\n\nfacetCircle\n  .interval()\n  .encode('x', 'name')\n  .encode('y', 'value')\n  .encode('color', 'name');\n\nchart.render();\n",paraId:75,tocIndex:20},{value:"添加 ",paraId:76,tocIndex:21},{value:"repeatMatrix",paraId:77,tocIndex:21},{value:" 复合容器。",paraId:76,tocIndex:21},{value:"repeatMatrix",paraId:76,tocIndex:21},{value:" 根据字段的数量对空间进行划分，然后利用数据在这些子空间可视化。",paraId:76,tocIndex:21},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 300,\n  height: 720,\n  paddingLeft: 50,\n  paddingBottom: 60,\n});\n\nconst repeatMatrix = chart\n  .repeatMatrix()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/weather.json',\n    transform: [\n      {\n        type: 'map',\n        callback: ({ date, ...d }) => ({\n          ...d,\n          date: new Date(date).getMonth() + '',\n        }),\n      },\n    ],\n  })\n  .encode('y', ['temp_max', 'precipitation', 'wind'])\n  .encode('x', 'date');\n\nrepeatMatrix\n  .line()\n  .transform({ type: 'groupX', y: 'mean' })\n  .encode('color', 'location')\n  .scale('y', { zero: true });\n\nchart.render();\n",paraId:78,tocIndex:21},{value:"添加 ",paraId:79,tocIndex:22},{value:"geoView",paraId:80,tocIndex:22},{value:" 复合容器。",paraId:79,tocIndex:22},{value:"geoView",paraId:79,tocIndex:22},{value:" 是绘制地图的容器，用于多 geoPath 图层叠加。和普通",paraId:79,tocIndex:22},{value:"view",paraId:79,tocIndex:22},{value:"相同，它的子 mark 同样也会继承父级的 data。",paraId:79,tocIndex:22},{value:"import { Chart } from '@antv/g2';\nimport { feature } from 'topojson-client';\n\nPromise.all([\n  fetch('https://assets.antv.antgroup.com/g2/londonBoroughs.json').then((res) =>\n    res.json(),\n  ),\n  fetch('https://assets.antv.antgroup.com/g2/londonCentroids.json').then(\n    (res) => res.json(),\n  ),\n  fetch('https://assets.antv.antgroup.com/g2/londonTubeLines.json').then(\n    (res) => res.json(),\n  ),\n]).then((values) => {\n  const [londonBoroughs, londonCentroids, londonTubeLines] = values;\n  const london = feature(\n    londonBoroughs,\n    londonBoroughs.objects.boroughs,\n  ).features;\n  const line = feature(londonTubeLines, londonTubeLines.objects.line).features;\n\n  const chart = new Chart({\n    container: 'container',\n    autoFit: true,\n  });\n\n  const geoView = chart.geoView();\n\n  geoView\n    .geoPath()\n    .data(london)\n    .style('fill', 'lightgray')\n    .style('stroke', 'white')\n    .style('strokeWidth', 2);\n\n  geoView\n    .text()\n    .data(londonCentroids)\n    .encode('x', 'cx')\n    .encode('y', 'cy')\n    .encode('text', (d) => d.name.split(/\\W/)[0])\n    .style('fontSize', 8)\n    .style('opacity', 0.6);\n\n  geoView\n    .geoPath()\n    .data(line)\n    .encode('color', 'id')\n    .encode('shape', 'hollow')\n    .scale('color', {\n      domain: [\n        'Bakerloo',\n        'Central',\n        'Circle',\n        'District',\n        'DLR',\n        'Hammersmith & City',\n        'Jubilee',\n        'Metropolitan',\n        'Northern',\n        'Piccadilly',\n        'Victoria',\n        'Waterloo & City',\n      ],\n      range: [\n        'rgb(137,78,36)',\n        'rgb(220,36,30)',\n        'rgb(255,206,0)',\n        'rgb(1,114,41)',\n        'rgb(0,175,173)',\n        'rgb(215,153,175)',\n        'rgb(106,114,120)',\n        'rgb(114,17,84)',\n        'rgb(0,0,0)',\n        'rgb(0,24,168)',\n        'rgb(0,160,226)',\n        'rgb(106,187,170)',\n      ],\n    });\n\n  chart.render();\n});\n",paraId:81,tocIndex:22},{value:"添加 ",paraId:82,tocIndex:23},{value:"timingKeyframe",paraId:83,tocIndex:23},{value:" 复合容器。",paraId:82,tocIndex:23},{value:"timingKeyframe",paraId:82,tocIndex:23},{value:" 在不同视图之间执行连续的过渡动画。通过 ",paraId:82,tocIndex:23},{value:"mark.key",paraId:82,tocIndex:23},{value:" 和 ",paraId:82,tocIndex:23},{value:"mark.groupKey",paraId:82,tocIndex:23},{value:" 去关联图形。",paraId:82,tocIndex:23},{value:"fetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/fbe4a8c1-ce04-4ba3-912a-0b26d6965333.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const chart = new Chart({\n      container: 'container',\n      paddingTop: 60,\n      paddingLeft: 100,\n    });\n\n    const keyframe = chart\n      .timingKeyframe()\n      .attr('direction', 'alternate')\n      .attr('iterationCount', 4);\n\n    // 条形图\n    keyframe\n      .interval()\n      .data(data)\n      .transform({ type: 'groupX', y: 'mean' })\n      .encode('x', 'gender')\n      .encode('y', 'weight')\n      .encode('color', 'gender')\n      .encode('key', 'gender'); // 指定 key\n\n    // 散点图\n    keyframe\n      .point()\n      .data(data)\n      .encode('x', 'height')\n      .encode('y', 'weight')\n      .encode('color', 'gender')\n      .encode('groupKey', 'gender') // 指定合并的条的 key\n      .encode('shape', 'point');\n\n    chart.render();\n  });\n",paraId:84,tocIndex:23},{value:"添加图形",paraId:85,tocIndex:23},{value:"接下来介绍 G2 中创建图形的 API。G2 的图形可以在不同的容器节点上添加，包括 ",paraId:86,tocIndex:23},{value:"chart",paraId:86,tocIndex:23},{value:"、",paraId:86,tocIndex:23},{value:"view",paraId:86,tocIndex:23},{value:"、",paraId:86,tocIndex:23},{value:"geoView",paraId:86,tocIndex:23},{value:"、",paraId:86,tocIndex:23},{value:"spaceLayer",paraId:86,tocIndex:23},{value:"、",paraId:86,tocIndex:23},{value:"facetRect",paraId:86,tocIndex:23},{value:"、",paraId:86,tocIndex:23},{value:"spaceFlex",paraId:86,tocIndex:23},{value:"、",paraId:86,tocIndex:23},{value:"facetCircle",paraId:86,tocIndex:23},{value:"、",paraId:86,tocIndex:23},{value:"repeatMatrix",paraId:86,tocIndex:23},{value:"、",paraId:86,tocIndex:23},{value:"timingKeyframe",paraId:86,tocIndex:23},{value:",它们均继承自 ",paraId:86,tocIndex:23},{value:"view",paraId:86,tocIndex:23},{value:"，所以统一以 ",paraId:86,tocIndex:23},{value:"view.${mark}()",paraId:86,tocIndex:23},{value:"来表示。",paraId:86,tocIndex:23},{value:"添加 ",paraId:87,tocIndex:24},{value:"interval",paraId:88,tocIndex:24},{value:" 图形。",paraId:87,tocIndex:24},{value:"interval",paraId:87,tocIndex:24},{value:" 通常用来绘制柱形图、条形图、饼图等，通过坐标系、比例尺、数据 Transform 等的变化，可以产生多种多样的可视化表现样式，是图形语法中，最常用的 Mark。",paraId:87,tocIndex:24},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/87b2ff47-2a33-4509-869c-dae4cdd81163.csv',\n    format: 'csv',\n    transform: [\n      {\n        type: 'filter',\n        callback: (d) => d.year === 2000,\n      },\n    ],\n  })\n  .transform({ type: 'groupX', y: 'sum' })\n  .encode('x', 'age')\n  .encode('y', 'people')\n  .encode('color', 'sex')\n  .scale('color', { type: 'ordinal', range: ['#ca8861', '#675193'] })\n  .axis('y', { labelFormatter: '~s' })\n  .style('fillOpacity', 0.7);\n\nchart.render();\n",paraId:89,tocIndex:24},{value:"添加 ",paraId:90,tocIndex:25},{value:"rect",paraId:91,tocIndex:25},{value:" 图形。",paraId:90,tocIndex:25},{value:"rect",paraId:90,tocIndex:25},{value:" 是用于绘制矩形标记的核心图表元素，它通过定义矩形的起点、终点、宽度、高度以及其他图形属性（如颜色、样式），实现不同的可视化需求。",paraId:90,tocIndex:25},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .rect()\n  .data({\n    type: 'fetch',\n    value: 'data/athletes.csv',\n  })\n  .encode('x', 'weight')\n  .encode('y', 'height')\n  .encode('color', 'sex')\n  .transform([{ type: 'bin', opacity: 'count' }])\n  .style('inset', 0.5);\n\nchart.render();\n",paraId:92,tocIndex:25},{value:"添加 ",paraId:93,tocIndex:26},{value:"point",paraId:94,tocIndex:26},{value:" 图形。",paraId:93,tocIndex:26},{value:"point",paraId:93,tocIndex:26},{value:" 图形标记主要用于绘制 散点图，又名点图、散布图。散点图是将所有的数据以点的形式展现在平面直角坐标系上的统计图表。",paraId:93,tocIndex:26},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n  })\n  .encode('x', 'GDP')\n  .encode('y', 'LifeExpectancy')\n  .encode('size', 'Population')\n  .encode('color', 'continent')\n  .encode('shape', 'point')\n  .scale('size', { type: 'log', range: [4, 20] })\n  .style('fillOpacity', 0.3)\n  .style('lineWidth', 1);\n\nchart.render();\n",paraId:95,tocIndex:26},{value:"添加 ",paraId:96,tocIndex:27},{value:"area",paraId:97,tocIndex:27},{value:" 图形。",paraId:96,tocIndex:27},{value:"area",paraId:96,tocIndex:27},{value:" 图形标记大部分场景用来绘制我们常见的面积图，是一种随有序变量的变化，反映数值变化的图形。",paraId:96,tocIndex:27},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/aapl.json',\n  transform: [\n    {\n      type: 'map',\n      callback: (d) => ({\n        ...d,\n        date: new Date(d.date),\n      }),\n    },\n  ],\n});\n\nchart.area().encode('x', 'date').encode('y', 'close');\n\nchart.render();\n",paraId:98,tocIndex:27},{value:"添加 ",paraId:99,tocIndex:28},{value:"line",paraId:100,tocIndex:28},{value:" 图形。",paraId:99,tocIndex:28},{value:"line",paraId:99,tocIndex:28},{value:" 图形标记根据一系列的点，绘制折线，显示数据在一个具有顺序性的维度上的变化。通常用来绘制折线图，是最常用的 Mark 之一。",paraId:99,tocIndex:28},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .line()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  })\n  .encode('x', 'date')\n  .encode('y', 'close');\n\nchart.render();\n",paraId:101,tocIndex:28},{value:"添加 ",paraId:102,tocIndex:29},{value:"vector",paraId:103,tocIndex:29},{value:" 图形。",paraId:102,tocIndex:29},{value:"Vector",paraId:102,tocIndex:29},{value:" 图形是将数据映射成为箭头的样式去可视化展示，通过控制箭头的位置、大小、颜色、角度等信息，去可视化一些向量场数据。",paraId:102,tocIndex:29},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .vector()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antfincdn/F5VcgnqRku/wind.json',\n  })\n  .encode('x', 'longitude')\n  .encode('y', 'latitude')\n  .encode('rotate', ({ u, v }) => (Math.atan2(v, u) * 180) / Math.PI)\n  .encode('size', ({ u, v }) => Math.hypot(v, u))\n  .encode('color', ({ u, v }) => Math.hypot(v, u))\n  .scale('size', { range: [6, 20] })\n  .scale('color', { type: 'sequential', palette: 'viridis' })\n  .axis('x', { grid: false })\n  .axis('y', { grid: false })\n  .legend(false);\n\nchart.render();\n",paraId:104,tocIndex:29},{value:"添加 ",paraId:105,tocIndex:30},{value:"link",paraId:106,tocIndex:30},{value:" 图形。",paraId:105,tocIndex:30},{value:"link",paraId:105,tocIndex:30},{value:" 图形标记 虽然类似折线图 通过指定 x，y 通道为长度为 2 的字段数组。获取两两对应的 (x,y) 的定位点，并连接对应的定位点，绘制带方向的线段(添加箭头)。",paraId:105,tocIndex:30},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .link()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antfincdn/SM13%24lHuYH/metros.json',\n  })\n  .encode('x', ['POP_1980', 'POP_2015'])\n  .encode('y', ['R90_10_1980', 'R90_10_2015'])\n  .encode('color', (d) => d.R90_10_2015 - d.R90_10_1980)\n  .scale('x', { type: 'log' })\n  .style('arrowSize', 6)\n  .axis('x', { labelFormatter: '~s', label: { autoHide: true } })\n  .legend(false);\n\nchart.render();\n",paraId:107,tocIndex:30},{value:"添加 ",paraId:108,tocIndex:31},{value:"polygon",paraId:109,tocIndex:31},{value:" 图形。",paraId:108,tocIndex:31},{value:"polygon",paraId:108,tocIndex:31},{value:" 图形标记（多边形），利用一组 (x, y) 数据点，来连接形成一个闭合的图形，一般都是结合社区上的可视化布局算法计算之后的数据进行可视化展示。",paraId:108,tocIndex:31},{value:"import { Chart } from '@antv/g2';\nimport * as d3 from 'd3-voronoi';\n\nconst layout = (data) => {\n  return d3\n    .voronoi()\n    .x((d) => d.x)\n    .y((d) => d.y)\n    .extent([\n      [0, 0],\n      [800, 600],\n    ])\n    .polygons(data)\n    .map((p) =>\n      Object.assign({}, p, {\n        x: p.map((pi) => pi[0]),\n        y: p.map((pi) => pi[1]),\n      }),\n    );\n};\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 0,\n  paddingRight: 0,\n  paddingTop: 0,\n  paddingBottom: 0,\n});\n\nchart\n  .polygon()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/voronoi.json',\n    transform: [\n      {\n        type: 'custom',\n        callback: layout,\n      },\n    ],\n  })\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('color', (d) => d.data.value)\n  .scale('x', { domain: [0, 800] })\n  .scale('y', { domain: [0, 600] })\n  .axis(false)\n  .style('stroke', '#fff')\n  .style('fillOpacity', 0.65);\n\nchart.render();\n",paraId:110,tocIndex:31},{value:"添加 ",paraId:111,tocIndex:32},{value:"image",paraId:112,tocIndex:32},{value:" 图形。",paraId:111,tocIndex:32},{value:"image",paraId:111,tocIndex:32},{value:" 图片标记通常不会单独出现，主要在其他的标记基础上进行添加使用，可以增强数据的可视化效果，帮助更直观地传达信息。",paraId:111,tocIndex:32},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  {\n    name: 'Internet Explorer',\n    value: 26,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/eOYRaLPOmkieVvjyjTzM.png',\n  },\n  {\n    name: 'Chrome',\n    value: 40,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/dWJWRLWfpOEbwCyxmZwu.png',\n  },\n  {\n    name: 'Firefox',\n    value: 30,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/ZEPeDluKmAoTioCABBTc.png',\n  },\n  {\n    name: 'Safari',\n    value: 24,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/eZYhlLzqWLAYwOHQAXmc.png',\n  },\n  {\n    name: 'Opera',\n    value: 15,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/vXiGOWCGZNKuVVpVYQAw.png',\n  },\n  {\n    name: 'Undetectable',\n    value: 8,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/NjApYXminrnhBgOXyuaK.png',\n  },\n];\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.data(data);\n\nchart\n  .link()\n  .encode('x', ['name', 'name'])\n  .encode('y', (d) => [0, d.value])\n  .style('stroke', '#dfdfdf')\n  .style('lineDash', [2, 2]);\n\nchart\n  .line()\n  .encode('x', 'name')\n  .encode('y', 'value')\n  .encode('shape', 'smooth')\n  .scale('x', { type: 'band' })\n  .scale('y', { domain: [0, 50] })\n  .style('opacity', 0.5);\n\nchart\n  .image()\n  .encode('x', 'name')\n  .encode('y', 'value')\n  .encode('src', 'url')\n  .scale('x', { type: 'band' })\n  .scale('y', { domain: [0, 50] });\n\nchart.render();\n",paraId:113,tocIndex:32},{value:"添加 ",paraId:114,tocIndex:33},{value:"text",paraId:115,tocIndex:33},{value:" 图形。",paraId:114,tocIndex:33},{value:"text",paraId:114,tocIndex:33},{value:" 是一种用于在图表中绘制文本标记的图形元素。它允许用户直接在图表上添加文字注释、标签或其他说明性内容，从而增强数据可视化的效果和可读性。",paraId:114,tocIndex:33},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.data({\n  type: 'fetch',\n  value:\n    'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n});\n\nchart\n  .interval()\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .axis('y', { labelFormatter: '.0%' });\n\nchart\n  .text()\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('text', 'frequency')\n  .style('fill', 'black')\n  .style('textAlign', 'center')\n  .style('dy', -5);\n\nchart.render();\n",paraId:116,tocIndex:33},{value:"添加 ",paraId:117,tocIndex:34},{value:"lineX",paraId:118,tocIndex:34},{value:" 图形。",paraId:117,tocIndex:34},{value:"lineX",paraId:117,tocIndex:34},{value:" 图形标记用于绘制垂直于 x 轴的辅助线，常用于绘制平均值或其他聚合数据辅助线。",paraId:117,tocIndex:34},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 50,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/movies.json',\n  transform: [{\n    type: 'filter',\n    callback: (d) => d[IMDB Rating] > 0,\n  }],\n});\n\nchart\n  .rect()\n  .transform({ type: 'binX', y: 'count', thresholds: 9 })\n  .encode('x', 'IMDB Rating')\n  .scale('y', { domainMax: 1000 })\n  .style('inset', 1);\n\nchart\n  .lineX()\n  .transform({ type: 'groupColor', y: 'mean' })\n  .encode('x', 'IMDB Rating')\n  .style('stroke', '#F4664A')\n  .style('strokeOpacity', 1)\n  .style('lineWidth', 5);\n\nchart.render();\n\n",paraId:119,tocIndex:34},{value:"添加 ",paraId:120,tocIndex:35},{value:"lineY",paraId:121,tocIndex:35},{value:" 图形。",paraId:120,tocIndex:35},{value:"lineY",paraId:120,tocIndex:35},{value:" 图形标记用于绘制垂直于 y 轴的辅助线，常用于绘制平均值或其他聚合数据辅助线。",paraId:120,tocIndex:35},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n});\n\nchart\n  .interval()\n  .transform({ type: 'groupX', y: 'mean' })\n  .encode('x', (d) => new Date(d.date).getUTCMonth())\n  .encode('y', 'precipitation')\n  .scale('y', { tickCount: 5, domainMax: 6 });\n\nchart\n  .lineY()\n  .transform({ type: 'groupX', y: 'mean' })\n  .encode('y', 'precipitation')\n  .style('stroke', '#F4664A')\n  .style('strokeOpacity', 1)\n  .style('lineWidth', 2);\n\nchart.render();\n",paraId:122,tocIndex:35},{value:"添加 ",paraId:123,tocIndex:36},{value:"range",paraId:124,tocIndex:36},{value:" 图形。",paraId:123,tocIndex:36},{value:"range",paraId:123,tocIndex:36},{value:" 是用来定义一个矩形区域的工具。这个矩形的位置和大小可以通过两组数字来确定：一组用于水平方向（x1, x2），另一组用于垂直方向（y1, y2）。它常用于绘制辅助背景区域或标记某个区域。",paraId:123,tocIndex:36},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.data({\n  type: 'fetch',\n  value:\n    'https://gw.alipayobjects.com/os/bmw-prod/0b37279d-1674-42b4-b285-29683747ad9a.json',\n});\n\nchart.lineX().data([0]);\nchart.lineY().data([0]);\n\nchart\n  .range()\n  .data([\n    { x: [-25, 0], y: [-30, 0], region: '1' },\n    { x: [-25, 0], y: [0, 20], region: '2' },\n    { x: [0, 5], y: [-30, 0], region: '2' },\n    { x: [0, 5], y: [0, 20], region: '1' },\n  ])\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('color', 'region')\n  .scale('color', {\n    range: ['#d8d0c0', '#a3dda1'],\n    independent: true,\n    guide: null,\n  })\n  .style('fillOpacity', 0.2);\n\nchart\n  .point()\n  .encode('x', 'change in female rate')\n  .encode('y', 'change in male rate')\n  .encode('size', 'pop')\n  .encode('color', 'continent')\n  .encode('shape', 'point')\n  .scale('color', {\n    range: ['#ffd500', '#82cab2', '#193442', '#d18768', '#7e827a'],\n  })\n  .axis('x', { title: false })\n  .axis('y', { title: false })\n  .scale('x', { domain: [-25, 5] })\n  .scale('y', { domain: [-30, 20] })\n  .scale('size', { range: [4, 30] })\n  .style('stroke', '#bbb')\n  .style('fillOpacity', 0.8);\n\nchart.render();\n",paraId:125,tocIndex:36},{value:"添加 ",paraId:126,tocIndex:37},{value:"rangeX",paraId:127,tocIndex:37},{value:" 图形。",paraId:126,tocIndex:37},{value:"rangeX",paraId:126,tocIndex:37},{value:" 使用一组 x(x1, x2) 来定位一个绘制于 x 轴的矩形区域，常用于对特定区域进行高亮显示。",paraId:126,tocIndex:37},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 360,\n  paddingLeft: 60,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/year-population.json',\n});\n\nchart\n  .rangeX()\n  .data([\n    { year: [new Date('1933'), new Date('1945')], event: 'Nazi Rule' },\n    { year: [new Date('1948'), new Date('1989')], event: 'GDR (East Germany)' },\n  ])\n  .encode('x', 'year')\n  .encode('color', 'event')\n  .scale('color', { independent: true, range: ['#FAAD14', '#30BF78'] })\n  .style('fillOpacity', 0.75);\n\nchart\n  .line()\n  .encode('x', (d) => new Date(d.year))\n  .encode('y', 'population')\n  .encode('color', '#333');\n\nchart\n  .point()\n  .encode('x', (d) => new Date(d.year))\n  .encode('y', 'population')\n  .encode('color', '#333')\n  .style('lineWidth', 1.5);\n\nchart.render();\n",paraId:128,tocIndex:37},{value:"此外，rangeX 还提供了简便写法：",paraId:129,tocIndex:37},{value:"chart\n  .rangeX()\n  .data([[new Date('2010'), new Date('2011')]])\n  .encode('x', (d) => d);\n\n// it can be simplified as follows:\nchart.rangeX().data([new Date('2010'), new Date('2011')]);\n",paraId:130,tocIndex:37},{value:"添加 ",paraId:131,tocIndex:38},{value:"rangeY",paraId:132,tocIndex:38},{value:" 图形。",paraId:131,tocIndex:38},{value:"rangeY",paraId:131,tocIndex:38},{value:" 使用一组 y(y1, y2) 来定位一个绘制于 y 轴的矩形区域，常用于对特定区域进行高亮显示。",paraId:131,tocIndex:38},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  })\n  .encode('x', 'height')\n  .encode('y', 'weight')\n  .encode('color', 'gender');\n\nchart\n  .rangeY()\n  .data([{ y: [54, 72] }])\n  .encode('y', 'y');\n\nchart.render();\n",paraId:133,tocIndex:38},{value:"此外，rangeY 还提供了简便写法：",paraId:134,tocIndex:38},{value:"chart\n  .rangeY()\n  .data([\n    [54, 60],\n    [65, 72],\n  ])\n  .encode('y', (d) => d);\n\n// it can be simplified as follows:\nchart.rangeY().data([\n  [54, 60],\n  [65, 72],\n]);\n",paraId:135,tocIndex:38},{value:"添加 connector 图形。",paraId:136,tocIndex:39},{value:"connector",paraId:136,tocIndex:39},{value:" 用于在两个元素之间绘制辅助连接线。",paraId:136,tocIndex:39},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  insetTop: 30,\n});\n\nchart\n  .data([\n    { x: 'Net Sales', value: 5085000, start: 0, end: 5085000 },\n    { x: 'Cost of Sales', value: -1250450, start: 5085000, end: 3834550 },\n    { x: 'Operating Expenses', value: -2350050, start: 3834550, end: 1484500 },\n    { x: 'Other Income', value: 750000, start: 1484500, end: 2234500 },\n    { x: 'Extraordinary Gain', value: -230050, start: 2234500, end: 2004450 },\n    { x: 'Interest Expense', value: -500000, start: 2004450, end: 1504450 },\n    { x: 'Taxis', value: 490000, start: 1504450, end: 1994450 },\n    { x: 'Net Income', isTotal: true, value: 1994450, start: 0, end: 1994450 },\n  ])\n  .axis('x', { title: false, labelTransform: 'rotate(-90)' })\n  .axis('y', { labelFormatter: '~s' })\n  .legend(null);\n\nchart\n  .link()\n  .data({ transform: [{ type: 'custom', callback: linkData }] })\n  .encode('x', ['x1', 'x2'])\n  .encode('y', 'value')\n  .style('stroke', '#697474')\n  .style('lineDash', [4, 2])\n  .tooltip(false);\n\nchart\n  .connector()\n  .data({ transform: [{ type: 'custom', callback: connectorData }] })\n  .encode('x', ['x1', 'x2'])\n  .encode('y', ['y1', 'y2'])\n  .label({\n    text: (d) => `${d.y2 - d.y1}`,\n    formatter: '~s',\n    fontSize: 10,\n    dy: 2,\n  })\n  .style({ stroke: '#697474', offset: 16 })\n  .tooltip(false);\n\nchart\n  .interval()\n  .encode('x', 'x')\n  .encode('y', ['start', 'end'])\n  .encode('color', (d, idx) =>\n    idx === 0 || d.isTotal ? 'D' : d.value > 0 ? 'P' : 'N',\n  )\n  .scale('color', {\n    domain: ['P', 'N', 'D'],\n    range: ['#64b5f6', '#ef6c00', '#96a6a6'],\n  })\n  .encode('size', 24)\n  .style('stroke', '#697474')\n  .label({\n    text: 'value',\n    formatter: '~s',\n    position: (d) => (d.value > 0 ? 'top' : 'bottom'),\n    textBaseline: (d) => (d.value > 0 ? 'bottom' : 'top'),\n    fontSize: 10,\n    dy: (d) => (d.value > 0 ? -4 : 4),\n  })\n  .tooltip({ channel: 'y', valueFormatter: '~s' })\n  .tooltip({ channel: 'y1', valueFormatter: '~s' });\n\nchart.render();\n\n// Process data.\nfunction linkData(data) {\n  return data.reduce((r, d, idx) => {\n    if (idx > 0) {\n      return r.concat({\n        x1: data[idx - 1].x,\n        x2: d.x,\n        value: d.isTotal ? d.end : d.start,\n      });\n    }\n    return r;\n  }, []);\n}\n\nfunction connectorData(data) {\n  return [\n    {\n      x1: data[0].x,\n      y1: data[0].end,\n      x2: data[data.length - 1].x,\n      y2: data[data.length - 1].end,\n    },\n  ];\n}\n",paraId:137,tocIndex:39},{value:"添加 ",paraId:138,tocIndex:40},{value:"sankey",paraId:139,tocIndex:40},{value:" 图形。桑基图 (Sankey Diagram)，是一种特定类型的流图，用于描述一组值到另一组值的流向。",paraId:138,tocIndex:40},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  padding: 10,\n});\n\nchart\n  .sankey()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/energy.json',\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => ({ links: data }),\n      },\n    ],\n  })\n  .layout({\n    nodeAlign: 'center',\n    nodePadding: 0.03,\n  })\n  .scale('color', { range: schemeTableau10 })\n  .style('labelSpacing', 3)\n  .style('labelFontWeight', 'bold')\n  .style('nodeStrokeWidth', 1.2)\n  .style('linkFillOpacity', 0.4);\n\nchart.render();\n",paraId:140,tocIndex:40},{value:"添加 ",paraId:141,tocIndex:41},{value:"treemap",paraId:142,tocIndex:41},{value:" 图形。矩形树图根据每个节点的关联值递归地将空间划分为矩形，适用于展示带权的树形数据。 矩形树图适合展现具有层级关系的数据，能够直观体现同级之间的比较。",paraId:141,tocIndex:41},{value:"import { Chart } from '@antv/g2';\nimport { schemeTableau10 } from 'd3-scale-chromatic';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .treemap()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/flare-treemap.json',\n  })\n  .layout({\n    path: (d) => d.name.replace(/\\./g, '/'),\n    tile: 'treemapBinary',\n    paddingInner: 1,\n  })\n  .encode('value', 'size')\n  .scale('color', { range: schemeTableau10 })\n  .style(\n    'labelText',\n    (d) =>\n      d.data.name\n        .split('.')\n        .pop()\n        .split(/(?=[A-Z][a-z])/g)[0],\n  )\n  .style('labelFill', '#000')\n  .style('labelPosition', 'top-left')\n  .style('fillOpacity', 0.5);\n\nchart.render();\n",paraId:143,tocIndex:41},{value:"添加 ",paraId:144,tocIndex:42},{value:"box",paraId:145,tocIndex:42},{value:" 图形。",paraId:144,tocIndex:42},{value:"box",paraId:144,tocIndex:42},{value:" 图形是用来绘制箱线图（boxplot）又叫盒须图、盒式图，通常用来展示一组数据分布情况的统计图，一般包括几种数据：最小值、下四分位数、中位数、上四分位数、最大值，另外可以结合 point mark 绘制异常点数据。",paraId:144,tocIndex:42},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { x: 'Oceania', y: [1, 9, 16, 22, 24] },\n  { x: 'East Europe', y: [1, 5, 8, 12, 16] },\n  { x: 'Australia', y: [1, 8, 12, 19, 26] },\n  { x: 'South America', y: [2, 8, 12, 21, 28] },\n  { x: 'North Africa', y: [1, 8, 14, 18, 24] },\n  { x: 'North America', y: [3, 10, 17, 28, 30] },\n  { x: 'West Europe', y: [1, 7, 10, 17, 22] },\n  { x: 'West Africa', y: [1, 6, 8, 13, 16] },\n];\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .box()\n  .data(data)\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('color', 'x')\n  .scale('x', { paddingInner: 0.6, paddingOuter: 0.3 })\n  .scale('y', { zero: true })\n  .legend(false)\n  .style('stroke', 'black');\n\nchart.render();\n",paraId:146,tocIndex:42},{value:"添加 ",paraId:147,tocIndex:43},{value:"boxplot",paraId:148,tocIndex:43},{value:" 图形。",paraId:147,tocIndex:43},{value:"boxplot",paraId:147,tocIndex:43},{value:" 和 ",paraId:147,tocIndex:43},{value:"box",paraId:147,tocIndex:43},{value:" 非常相似，都是用来绘制箱线图，不同点在于：",paraId:147,tocIndex:43},{value:"boxplot",paraId:147,tocIndex:43},{value:" 是高阶 mark，自带数据分组和数据统计聚合，",paraId:147,tocIndex:43},{value:"box",paraId:147,tocIndex:43},{value:" 是原子 mark，需要开发者手动指定 5 个点的数据。所以 ",paraId:147,tocIndex:43},{value:"boxplot",paraId:147,tocIndex:43},{value:" 更适合用于前端数据的探索和分析过程，而 ",paraId:147,tocIndex:43},{value:"box",paraId:147,tocIndex:43},{value:" 更适用于后端对超大数据进行计算和统计之后，可视化展示。",paraId:147,tocIndex:43},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 60,\n  inset: 6,\n});\n\nchart\n  .boxplot()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/morley.json',\n  })\n  .encode('x', 'Expt')\n  .encode('y', 'Speed');\n\nchart.render();\n",paraId:149,tocIndex:43},{value:"添加 ",paraId:150,tocIndex:44},{value:"density",paraId:151,tocIndex:44},{value:" 图形。",paraId:150,tocIndex:44},{value:"density",paraId:150,tocIndex:44},{value:" 是一种用于可视化连续变量分布概率密度的图表类型，通过核密度估计（Kernel Density Estimation, KDE） 将离散数据点转化为平滑的连续概率密度曲线，直观反映数据的集中趋势、分布形态及异常值。",paraId:150,tocIndex:44},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/species.json',\n  transform: [\n    {\n      type: 'kde',\n      field: 'y',\n      groupBy: ['x'],\n      size: 20,\n    },\n  ],\n});\n\nchart\n  .density()\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('color', 'x')\n  .encode('size', 'size')\n  .tooltip(false);\n\nchart.render();\n",paraId:152,tocIndex:44},{value:"添加 ",paraId:153,tocIndex:45},{value:"heatmap",paraId:154,tocIndex:45},{value:" 图形。",paraId:153,tocIndex:45},{value:"heatmap",paraId:153,tocIndex:45},{value:" 又叫热力图，是一种通过颜色强度映射二维数据密度或数值大小的可视化图表，擅长揭示数据分布规律、聚类特征及异常点。",paraId:153,tocIndex:45},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  padding: 0,\n});\n\nchart.axis(false);\n\nchart\n  .image()\n  .style(\n    'src',\n    'https://gw.alipayobjects.com/zos/rmsportal/NeUTMwKtPcPxIFNTWZOZ.png',\n  )\n  .style('x', '50%')\n  .style('y', '50%')\n  .style('width', '100%')\n  .style('height', '100%')\n  .tooltip(false);\n\nchart\n  .heatmap()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/heatmap.json',\n  })\n  .encode('x', 'g')\n  .encode('y', 'l')\n  .encode('color', 'tmp')\n  .style('opacity', 0)\n  .tooltip(false);\n\nchart.render();\n",paraId:155,tocIndex:45},{value:"添加 ",paraId:156,tocIndex:46},{value:"自定义",paraId:157,tocIndex:46},{value:" 图形。",paraId:156,tocIndex:46},{value:"shape",paraId:156,tocIndex:46},{value:" 图形标记是 G2 中一种特殊的 Mark 类型，通常用来在图表上绘制静态的自定义图形，具有较高的灵活性和自由度，可以用于添加自定义注解、水印、徽章等场景，是实现图表个性化的重要工具。",paraId:156,tocIndex:46},{value:"上图中的「数据保密」的徽章图案就是使用 ",paraId:158,tocIndex:46},{value:"shape",paraId:158,tocIndex:46},{value:" 绘制。在绘制图形时，可以从图表上下文中获取 ",paraId:158,tocIndex:46},{value:"document",paraId:158,tocIndex:46},{value:" 对象，随后使用 ",paraId:158,tocIndex:46},{value:"document.createElement",paraId:158,tocIndex:46},{value:" 创建基础图形。在下面的示例中我们创建了一个 ",paraId:158,tocIndex:46},{value:"Circle",paraId:158,tocIndex:46},{value:"。",paraId:158,tocIndex:46},{value:"import { Chart } from '@antv/g2';\n\nfunction point(style) {\n  const { x, y, fill } = style;\n\n  const {\n    canvas: { document },\n  } = chart.getContext();\n\n  return document.createElement('circle', {\n    style: {\n      cx: x,\n      cy: y,\n      fill,\n    },\n  });\n}\n\nchart.shape().style({\n  x: '50%',\n  y: '50%',\n  fill: 'red',\n  render: point,\n});\n\nchart.render();\n",paraId:159,tocIndex:46},{value:"添加 ",paraId:160,tocIndex:47},{value:"pack",paraId:161,tocIndex:47},{value:" 图形。打包图 (Circle Packing) 是树形结构图的变体，使用圆形（而非矩形）一层又一层地代表整个层次结构。常用于描述数据间的包含关系。",paraId:160,tocIndex:47},{value:"import { Chart } from '@antv/g2';\nimport { interpolateHcl } from 'd3-interpolate';\n\nconst chart = new Chart({\n  container: 'container',\n  padding: 20,\n});\n\nchart\n  .pack()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/flare.json',\n  })\n  .layout({\n    padding: 5,\n  })\n  .encode('value', 'value')\n  .encode('color', 'depth')\n  .scale('color', {\n    domain: [0, 5],\n    range: ['hsl(152,80%,80%)', 'hsl(228,30%,40%)'],\n    interpolate: interpolateHcl,\n  })\n  .style('labelText', (d) =>\n    d.r >= 10 && d.height === 0 ? `${d.data.name}` : '',\n  )\n  .axis(false)\n  .legend(false);\n\nchart.render();\n",paraId:162,tocIndex:47},{value:"添加 ",paraId:163,tocIndex:48},{value:"forceGraph",paraId:164,tocIndex:48},{value:" 图形。力导布局图是一种用来呈现复杂关系网络的图表。在力导布局图中，系统中的每个节点都可以看成是一个放电粒子，粒子间存在某种斥力。同时，这些粒子间被它们之间的“边”所牵连，从而产生引力。",paraId:163,tocIndex:48},{value:"import { Chart } from '@antv/g2';\nimport { schemeTableau10 } from 'd3-scale-chromatic';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .forceGraph()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/miserable.json',\n  })\n  .scale('color', { range: schemeTableau10 });\n\nchart.render();\n",paraId:165,tocIndex:48},{value:"添加 ",paraId:166,tocIndex:49},{value:"tree",paraId:167,tocIndex:49},{value:" 图形。树图 (Tree) 能将事物或现象分解成树枝状，又称树型图或系统图。在树形结构中，树根结点没有前驱结点，其余每个结点有且只有一个前驱结点。叶子结点没有后续结点，其余每个结点的后续节点数可以是一个也可以是多个。",paraId:166,tocIndex:49},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 1500,\n  width: 800,\n});\n\nchart\n  .tree()\n  .coordinate({ transform: [{ type: 'transpose' }] })\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/flare.json',\n  })\n  .layout({\n    sortBy: (a, b) => a.value - b.value,\n  })\n  .style('nodeFill', (d) => (d.height === 0 ? '#999' : '#000'))\n  .style('linkStroke', '#999')\n  .style('labelText', (d) => d.data.name || '-')\n  .style('labelFontSize', (d) => (d.height === 0 ? 7 : 12))\n  .style('labelTextAlign', (d) => (d.height === 0 ? 'start' : 'end'))\n  .style('labelPosition', (d) => (d.height !== 0 ? 'left' : 'right'))\n  .style('labelDx', (d) => (d.height === 0 ? 5 : -5))\n  .style('labelBackground', true)\n  .style('labelBackgroundFill', '#fff');\n\nchart.render();\n",paraId:168,tocIndex:49},{value:"添加 ",paraId:169,tocIndex:50},{value:"wordCloud",paraId:170,tocIndex:50},{value:" 图形。",paraId:169,tocIndex:50},{value:"wordCloud",paraId:169,tocIndex:50},{value:" 是一种专门用于生成词云图的标记。词云图是一种直观展示文本数据中关键词频次的可视化形式，通过不同大小、颜色和位置的文字来反映词语的重要性或权重。",paraId:169,tocIndex:50},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  padding: 0,\n});\n\nchart\n  .wordCloud()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/philosophy-word.json',\n  })\n  .layout({\n    spiral: 'rectangular',\n  })\n  .encode('color', 'text')\n  .axis(false);\n\nchart.render();\n",paraId:171,tocIndex:50},{value:"添加 ",paraId:172,tocIndex:51},{value:"gauge",paraId:173,tocIndex:51},{value:" 图形。",paraId:172,tocIndex:51},{value:"gauge",paraId:172,tocIndex:51},{value:" 用于创建仪表盘，它是一种常见的可视化图表，用于展示数据的进度、比例或比较情况。",paraId:172,tocIndex:51},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart\n  .gauge()\n  .data({\n    value: {\n      target: 120,\n      total: 400,\n      name: 'score',\n    },\n  })\n  .legend(false);\n\nchart.render();\n",paraId:174,tocIndex:51},{value:"添加 ",paraId:175,tocIndex:52},{value:"geoPath",paraId:176,tocIndex:52},{value:" 图形。",paraId:175,tocIndex:52},{value:"geoPath",paraId:175,tocIndex:52},{value:" 可以用来结合 geojson 绘制地图。",paraId:175,tocIndex:52},{value:"import { Chart } from '@antv/g2';\nimport { feature } from 'topojson-client';\n\nPromise.all([\n  fetch('https://assets.antv.antgroup.com/g2/us-10m.json').then((res) =>\n    res.json(),\n  ),\n  fetch('https://assets.antv.antgroup.com/g2/unemployment2.json').then((res) =>\n    res.json(),\n  ),\n]).then((values) => {\n  const [us, unemployment] = values;\n  const counties = feature(us, us.objects.counties).features;\n\n  const chart = new Chart({\n    container: 'container',\n  });\n\n  chart\n    .geoPath()\n    .projection({ type: 'albersUsa' })\n    .data({\n      value: counties,\n      transform: [\n        {\n          type: 'join',\n          join: unemployment,\n          on: ['id', 'id'],\n          select: ['rate'],\n        },\n      ],\n    })\n    .scale('color', {\n      type: 'sequential',\n      palette: 'ylGnBu',\n      unknown: '#fff',\n    })\n    .encode('color', 'rate');\n\n  chart.render();\n});\n",paraId:177,tocIndex:52},{value:"添加 ",paraId:178,tocIndex:53},{value:"point3D",paraId:179,tocIndex:53},{value:" 图形。",paraId:178,tocIndex:53},{value:"point3D",paraId:178,tocIndex:53},{value:" 主要用于绘制 3D 散点图，利用点的粒度来分析数据的分布情况。",paraId:178,tocIndex:53},{value:"import { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\nimport { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\n\n// Create a WebGL renderer.\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ThreeDPlugin());\nrenderer.registerPlugin(new ControlPlugin());\n\n// Customize our own Chart with threedlib.\nconst Chart = extend(Runtime, { ...corelib(), ...threedlib() });\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  depth: 400, // Define the depth of chart.\n});\n\nchart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('color', 'Origin')\n  .encode('shape', 'cube')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setType(CameraType.ORBITING);\n\n  // Add a directional light into scene.\n  const light = new DirectionalLight({\n    style: {\n      intensity: 3,\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n});\n",paraId:180,tocIndex:53},{value:"添加 ",paraId:181,tocIndex:54},{value:"line3D",paraId:182,tocIndex:54},{value:" 图形。",paraId:181,tocIndex:54},{value:"line3D",paraId:181,tocIndex:54},{value:" 主要用于绘制 3D 折线图。",paraId:181,tocIndex:54},{value:"import { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\nimport { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\n\n// Create a WebGL renderer.\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ThreeDPlugin());\nrenderer.registerPlugin(new ControlPlugin());\n\n// Customize our own Chart with threedlib.\nconst Chart = extend(Runtime, { ...corelib(), ...threedlib() });\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  depth: 400, // Define the depth of chart.\n});\n\n/**\n * 3D Line\n * @see https://plotly.com/javascript/3d-line-plots/\n */\nconst pointCount = 31;\nlet r;\nconst data = [];\n\nfor (let i = 0; i < pointCount; i++) {\n  r = 10 * Math.cos(i / 10);\n  data.push({\n    x: r * Math.cos(i),\n    y: r * Math.sin(i),\n    z: i,\n  });\n}\n\nchart\n  .line3D()\n  .data(data)\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('z', 'z')\n  .encode('size', 4)\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  // Use perspective projection mode.\n  camera.setPerspective(0.1, 5000, 45, 640 / 480);\n  camera.setType(CameraType.ORBITING);\n});\n",paraId:183,tocIndex:54},{value:"添加 ",paraId:184,tocIndex:55},{value:"interval3D",paraId:185,tocIndex:55},{value:" 图形。",paraId:184,tocIndex:55},{value:"interval3D",paraId:184,tocIndex:55},{value:" 主要用于绘制 3D 条形图。",paraId:184,tocIndex:55},{value:"import { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\nimport { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\n\n// Create a WebGL renderer.\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ThreeDPlugin());\nrenderer.registerPlugin(new ControlPlugin());\n\n// Customize our own Chart with threedlib.\nconst Chart = extend(Runtime, { ...corelib(), ...threedlib() });\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  depth: 400, // Define the depth of chart.\n});\nconst data: { x: string; z: string; y: number; color: number }[] = [];\nfor (let x = 0; x < 5; ++x) {\n  for (let z = 0; z < 5; ++z) {\n    data.push({\n      x: `x-${x}`,\n      z: `z-${z}`,\n      y: 10 - x - z,\n      color: Math.random() < 0.33 ? 0 : Math.random() < 0.67 ? 1 : 2,\n    });\n  }\n}\n\nchart\n  .interval3D()\n  .data({\n    type: 'inline',\n    value: data,\n  })\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('z', 'z')\n  .encode('color', 'color')\n  .encode('shape', 'cube')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 })\n  .style('opacity', 0.7);\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  // Use perspective projection mode.\n  camera.setPerspective(0.1, 5000, 45, 640 / 480);\n  camera.rotate(-40, 30, 0);\n  camera.dolly(70);\n  camera.setType(CameraType.ORBITING);\n\n  // Add a directional light into scene.\n  const light = new DirectionalLight({\n    style: {\n      intensity: 2.5,\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n});\n",paraId:186,tocIndex:55},{value:"添加 ",paraId:187,tocIndex:56},{value:"surface3D",paraId:188,tocIndex:56},{value:" 图形。",paraId:187,tocIndex:56},{value:"surface3D",paraId:187,tocIndex:56},{value:" 主要用于绘制 3D 曲面图。",paraId:187,tocIndex:56},{value:"import { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\nimport { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\nimport diric from 'dirichlet';\n\n// We set the width/height to 100;\nconst size = 100;\nconst points: { x: number; y: number; z: number }[] = [];\nfor (let i = 0; i < size + 1; i++) {\n  for (let j = 0; j < size + 1; j++) {\n    points.push({\n      x: i,\n      y: j,\n      z:\n        0.1 *\n        size *\n        diric(5, (5.0 * (i - size / 2)) / size) *\n        diric(5, (5.0 * (j - size / 2)) / size),\n    });\n  }\n}\n\n// Create a WebGL renderer.\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ThreeDPlugin());\nrenderer.registerPlugin(new ControlPlugin());\n\n// Customize our own Chart with threedlib.\nconst Chart = extend(Runtime, { ...corelib(), ...threedlib() });\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  width: 600,\n  height: 600,\n  depth: 300, // Define the depth of chart.\n});\n\nchart\n  .surface3D()\n  .data(points)\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('z', 'z')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 1 })\n  .axis('y', { gridLineWidth: 1, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 1 });\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  // Use perspective projection mode.\n  camera.setPerspective(0.1, 3000, 45, 600 / 600);\n  camera.rotate(30, 30, 0);\n  camera.dolly(60);\n  camera.setType(CameraType.ORBITING);\n});\n",paraId:189,tocIndex:56},{value:"设置属性",paraId:190,tocIndex:56},{value:"获取或设置图表的配置项。以下是支持配置的属性：",paraId:191,tocIndex:57},{value:"属性",paraId:192,tocIndex:57},{value:"描述",paraId:192,tocIndex:57},{value:"类型",paraId:192,tocIndex:57},{value:"class",paraId:192,tocIndex:57},{value:"CSS 类名",paraId:192,tocIndex:57},{value:"string",paraId:192,tocIndex:57},{value:"x",paraId:192,tocIndex:57},{value:"横坐标位置，一般用于在复合视图中调整某个图的位置",paraId:192,tocIndex:57},{value:"number",paraId:192,tocIndex:57},{value:"y",paraId:192,tocIndex:57},{value:"纵坐标位置，一般用于在复合视图中调整某个图的位置",paraId:192,tocIndex:57},{value:"number",paraId:192,tocIndex:57},{value:"width",paraId:192,tocIndex:57},{value:"元素宽度",paraId:192,tocIndex:57},{value:"number",paraId:192,tocIndex:57},{value:"height",paraId:192,tocIndex:57},{value:"元素高度",paraId:192,tocIndex:57},{value:"number",paraId:192,tocIndex:57},{value:"paddingLeft",paraId:192,tocIndex:57},{value:"左内边距",paraId:192,tocIndex:57},{value:"Padding",paraId:192,tocIndex:57},{value:"paddingRight",paraId:192,tocIndex:57},{value:"右内边距",paraId:192,tocIndex:57},{value:"Padding",paraId:192,tocIndex:57},{value:"paddingBottom",paraId:192,tocIndex:57},{value:"下内边距",paraId:192,tocIndex:57},{value:"Padding",paraId:192,tocIndex:57},{value:"paddingTop",paraId:192,tocIndex:57},{value:"上内边距",paraId:192,tocIndex:57},{value:"Padding",paraId:192,tocIndex:57},{value:"padding",paraId:192,tocIndex:57},{value:"复合内边距",paraId:192,tocIndex:57},{value:"Padding",paraId:192,tocIndex:57},{value:"inset",paraId:192,tocIndex:57},{value:"整体呼吸区域宽度",paraId:192,tocIndex:57},{value:"number",paraId:192,tocIndex:57},{value:"insetLeft",paraId:192,tocIndex:57},{value:"左侧呼吸区域宽度",paraId:192,tocIndex:57},{value:"number",paraId:192,tocIndex:57},{value:"insetBottom",paraId:192,tocIndex:57},{value:"底部呼吸区域宽度",paraId:192,tocIndex:57},{value:"number",paraId:192,tocIndex:57},{value:"insetTop",paraId:192,tocIndex:57},{value:"顶部呼吸区域宽度",paraId:192,tocIndex:57},{value:"number",paraId:192,tocIndex:57},{value:"insetRight",paraId:192,tocIndex:57},{value:"右侧呼吸区域宽度",paraId:192,tocIndex:57},{value:"number",paraId:192,tocIndex:57},{value:"margin",paraId:192,tocIndex:57},{value:"复合外边距",paraId:192,tocIndex:57},{value:"number",paraId:192,tocIndex:57},{value:"marginLeft",paraId:192,tocIndex:57},{value:"左外边距",paraId:192,tocIndex:57},{value:"number",paraId:192,tocIndex:57},{value:"marginBottom",paraId:192,tocIndex:57},{value:"底外边距",paraId:192,tocIndex:57},{value:"number",paraId:192,tocIndex:57},{value:"marginTop",paraId:192,tocIndex:57},{value:"顶外边距",paraId:192,tocIndex:57},{value:"number",paraId:192,tocIndex:57},{value:"marginRight",paraId:192,tocIndex:57},{value:"右外边距",paraId:192,tocIndex:57},{value:"number",paraId:192,tocIndex:57},{value:"frame",paraId:192,tocIndex:57},{value:"是否显示边框",paraId:192,tocIndex:57},{value:"boolean",paraId:192,tocIndex:57},{value:"zIndex",paraId:192,tocIndex:57},{value:"层叠顺序",paraId:192,tocIndex:57},{value:"number",paraId:192,tocIndex:57},{value:"clip",paraId:192,tocIndex:57},{value:"是否裁剪溢出内容",paraId:192,tocIndex:57},{value:"boolean",paraId:192,tocIndex:57},{value:"// 获取配置项\nconst point = chart.point();\nconsole.log(point.attr());\n\n// 设置配置项\npoint.attr('padding', 0);\n",paraId:193,tocIndex:57},{value:"设置图形的数据，支持多种数据来源和数据变换，具体见 ",paraId:194,tocIndex:58},{value:"data",paraId:195,tocIndex:58},{value:"。",paraId:194,tocIndex:58},{value:"chart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n});\n\nchart.interval().data([\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n]);\n",paraId:196,tocIndex:58},{value:"设置图形每个通道的编码，具体见 ",paraId:197,tocIndex:59},{value:"encode",paraId:198,tocIndex:59},{value:"。",paraId:197,tocIndex:59},{value:"chart\n  .interval()\n  .encode('x', 'civilization')\n  .encode('y', ['start', 'end'])\n  .encode('color', 'region');\n\nchart.facetCircle().encode('position', 'month');\n\nchart.encode('x', 'year').encode('y', 'value');\n",paraId:199,tocIndex:59},{value:"设置图形每个通道的比例尺，具体见 ",paraId:200,tocIndex:60},{value:"scale",paraId:201,tocIndex:60},{value:"。",paraId:200,tocIndex:60},{value:"chart.scale('color', { type: 'ordinal', range: ['#ca8861', '#675193'] });\n\nchart.line().scale('y', {\n  domain: [0, 1],\n});\n",paraId:202,tocIndex:60},{value:"设置图形的图例，具体见 ",paraId:203,tocIndex:61},{value:"legend",paraId:204,tocIndex:61},{value:"。",paraId:203,tocIndex:61},{value:"// 关闭 color 通道图例\nchart.legend('color', false);\n\nchart\n  .interval()\n  .legend('color', { labelFormatter: (d) => (d === 1 ? 'Male' : 'Female') });\n",paraId:205,tocIndex:61},{value:"设置图形的提示，具体见 ",paraId:206,tocIndex:62},{value:"tooltip",paraId:207,tocIndex:62},{value:"。",paraId:206,tocIndex:62},{value:"chart.interval().tooltip({ channel: 'y', valueFormatter: '.0%' });\n\n// 关闭 link 标记的 tooltip\nchart.link().tooltip(false);\n",paraId:208,tocIndex:62},{value:"设置图形的坐标轴，具体见 ",paraId:209,tocIndex:63},{value:"axis",paraId:210,tocIndex:63},{value:"。",paraId:209,tocIndex:63},{value:"chart\n  .interval()\n  .axis('y', { labelFormatter: '~s' })\n  .axis('x', { labelTransform: 'rotate(90)' });\n\nchart.axis('y', { title: false });\n",paraId:211,tocIndex:63},{value:"设置图形的缩略轴，具体见 ",paraId:212,tocIndex:64},{value:"slider",paraId:213,tocIndex:64},{value:"。",paraId:212,tocIndex:64},{value:"chart\n  .point()\n  .slider('x', { labelFormatter: (d) => d.toFixed(1) })\n  .slider('y', { labelFormatter: (d) => d.toFixed(1) });\n\nchart.slider('y', true).slider('x', true);\n",paraId:214,tocIndex:64},{value:"设置图形的标签，具体见 ",paraId:215,tocIndex:65},{value:"label",paraId:216,tocIndex:65},{value:"。",paraId:215,tocIndex:65},{value:"chart\n  .interval()\n  .label({\n    text: (d, i) => (i !== 0 ? '转换率' : ''),\n    position: 'top-right',\n    textAlign: 'left',\n    textBaseline: 'middle',\n    fill: '#aaa',\n    dx: 60,\n  })\n  .label({\n    text: (d, i, data) =>\n      i !== 0 ? r(data[i - 1]['value'], data[i]['value']) : '',\n    position: 'top-right',\n    textAlign: 'left',\n    textBaseline: 'middle',\n    dx: 60,\n    dy: 15,\n  });\n\nchart.interval().label({\n  text: 'id',\n  position: 'spider',\n  connectorDistance: 0,\n  fontWeight: 'bold',\n  textBaseline: 'bottom',\n  textAlign: (d) => (['c', 'sass'].includes(d.id) ? 'end' : 'start'),\n  dy: -4,\n});\n",paraId:217,tocIndex:65},{value:"设置图形的标签转换，具体见 ",paraId:218,tocIndex:66},{value:"label",paraId:219,tocIndex:66},{value:"。",paraId:218,tocIndex:66},{value:"chart\n  .labelTransform({ type: 'overlapHide' })\n  .labelTransform({ type: 'contrastReverse' });\n\nchart.labelTransform([{ type: 'overlapHide' }, { type: 'contrastReverse' }]);\n",paraId:220,tocIndex:66},{value:"设置图形的样式，具体见 ",paraId:221,tocIndex:67},{value:"style",paraId:222,tocIndex:67},{value:"。",paraId:221,tocIndex:67},{value:"chart.rect().style('inset', 0.5);\n\nchart.liquid().data(0.3).style({\n  outlineBorder: 4,\n  outlineDistance: 8,\n  waveLength: 128,\n});\n",paraId:223,tocIndex:67},{value:"设置视图模型的样式，具体见 ",paraId:224,tocIndex:68},{value:"图表布局",paraId:225,tocIndex:68},{value:"。",paraId:224,tocIndex:68},{value:"facetRect\n  .point()\n  .attr('inset', 10)\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .style('stroke', '#000')\n  .attr('frame', false) // Hide the default frame.\n  .viewStyle('plotStroke', 'red') // Customize the plot area to mock a frame.\n  .viewStyle('plotLineWidth', 2)\n  .viewStyle('plotOpacity', 0.5);\n",paraId:226,tocIndex:68},{value:"设置图形的主题，具体见 ",paraId:227,tocIndex:69},{value:"theme",paraId:228,tocIndex:69},{value:"。",paraId:227,tocIndex:69},{value:"chart.theme({ type: 'academy' });\n\nchart.theme({\n  type: 'classicDark',\n  view: {\n    viewFill: '#141414',\n  },\n}); // Apply dark theme.\n",paraId:229,tocIndex:69},{value:"设置图形的交互，具体见 ",paraId:230,tocIndex:70},{value:"theme",paraId:231,tocIndex:70},{value:"。",paraId:230,tocIndex:70},{value:"// 禁用 legendFilter 交互\nchart.interaction('legendFilter', false);\n\nchart.line().interaction('tooltip', {\n  render: (event, { items }) => {\n    const target = event.target;\n    const format = (item) => `${item.name}: ${item.value}`;\n    if (target.className === 'g2-tooltip-marker') {\n      const color = target.style.fill;\n      const item = items.find((i) => i.color === color);\n      return format(item);\n    }\n    return items.map(format).join('<br>');\n  },\n});\n",paraId:232,tocIndex:70},{value:"设置图形的动画，具体见 ",paraId:233,tocIndex:71},{value:"animation",paraId:234,tocIndex:71},{value:"。",paraId:233,tocIndex:71},{value:"chart\n  .interval()\n  .animate('enter', { type: 'fadeIn', duration: 1000 })\n  .animate('exit', { type: 'fadeOut', duration: 2000 });\n\n// 禁用动画\nchart.animate(false);\n",paraId:235,tocIndex:71},{value:"设置图形的滚动条，具体见 ",paraId:236,tocIndex:72},{value:"scrollbar",paraId:237,tocIndex:72},{value:"。",paraId:236,tocIndex:72},{value:"chart.line().scrollbar('x', {}).scrollbar('y', { value: 0.2 });\n",paraId:238,tocIndex:72},{value:"设置图形的标题，具体见 ",paraId:239,tocIndex:73},{value:"title",paraId:240,tocIndex:73},{value:"。",paraId:239,tocIndex:73},{value:"chart.title({\n  align: 'right',\n  title: 'Sold by genre, sorted by sold',\n  titleFontSize: 15,\n  subtitle: 'It shows the sales volume of genre, sored by sold.',\n  subtitleFill: 'red',\n  subtitleFontSize: 12,\n  subtitleShadowColor: 'yellow',\n  subtitleShadowBlur: 5,\n  subtitleFontStyle: 'italic',\n});\n\nchart.title('Pareto Chart of Customer Complaints');\n",paraId:241,tocIndex:73},{value:"设置图形的状态样式，具体见 ",paraId:242,tocIndex:74},{value:"state",paraId:243,tocIndex:74},{value:"。",paraId:242,tocIndex:74},{value:"chart\n  .interval()\n  .state('selected', { fill: '#1783FF', stroke: 'black', strokeWidth: 1 })\n  .state('unselected', { fill: '#ccc' });\n\nchart.sunburst().state({\n  active: { zIndex: 2, stroke: 'red' },\n  inactive: { zIndex: 1, stroke: '#fff' },\n});\n",paraId:244,tocIndex:74},{value:"设置图形的转换，具体见 ",paraId:245,tocIndex:75},{value:"transform",paraId:246,tocIndex:75},{value:"。",paraId:245,tocIndex:75},{value:"chart\n  .interval()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/world-history.json',\n  })\n  .transform({ type: 'sortX', by: 'y' })\n  .transform({ type: 'sortColor', by: 'y', reducer: 'min' });\n\nchart.area().transform([{ type: 'stackY' }, { type: 'normalizeY' }]);\n",paraId:247,tocIndex:75},{value:"调用图表的渲染方法。",paraId:248,tocIndex:77},{value:"render(): void;\n",paraId:249,tocIndex:77},{value:"销毁图表容器和 Canvas 画布，同时解绑事件。",paraId:250,tocIndex:78},{value:"destroy(): void;\n",paraId:251,tocIndex:78},{value:"清空图表上所有的绘制内容，但是不销毁图表，chart 仍可使用。",paraId:252,tocIndex:79},{value:"clear(): void;\n",paraId:253,tocIndex:79},{value:"显示当前节点渲染的图形。",paraId:254,tocIndex:80},{value:"show(): void;\n",paraId:255,tocIndex:80},{value:"隐藏当前节点渲染的图形。",paraId:256,tocIndex:81},{value:"hide(): void;\n",paraId:257,tocIndex:81},{value:"更改图形的数据来源并重新渲染整个图表。",paraId:258,tocIndex:82},{value:"changeData(data: any): void;\n",paraId:259,tocIndex:82},{value:"改变图表的宽高，并重新渲染。",paraId:260,tocIndex:83},{value:"changeSize(width: number, height: number): void;\n",paraId:261,tocIndex:83},{value:"自动根据外部 DOM 容器大小调整画布并重新渲染。",paraId:262,tocIndex:84},{value:"forceFit(): void;\n",paraId:263,tocIndex:84},{value:"更改图形的数据来源并重新渲染整个图表。",paraId:264,tocIndex:85},{value:"changeData(data: any): void;\n",paraId:265,tocIndex:85},{value:"获取图表的 HTML 容器。",paraId:266,tocIndex:87},{value:"getContainer(): HTMLElement;\n",paraId:267,tocIndex:87},{value:"返回 chart 的 context 信息。",paraId:268,tocIndex:88},{value:"getContext(): G2Context;\n",paraId:269,tocIndex:88},{value:"可以通过 ",paraId:270,tocIndex:88},{value:"getContext()",paraId:270,tocIndex:88},{value:" 获取图表的 ",paraId:270,tocIndex:88},{value:"document",paraId:270,tocIndex:88},{value:"，添加定制化的交互。",paraId:270,tocIndex:88},{value:"chart.on('afterrender', () => {\n  const { canvas } = chart.getContext();\n  const { document } = canvas;\n  // https://github.com/antvis/G2/blob/v5/src/interaction/legendFilter.ts\n  const items = document.getElementsByClassName('items-item');\n  const datum = items.map((item) => item.__data__);\n  items.forEach((item, index) => {\n    item.addEventListener('click', (ev) => {\n      console.log(datum[index]);\n    });\n  });\n});\n",paraId:271,tocIndex:88},{value:"返回对应坐标点的 tooltip 数据。",paraId:272,tocIndex:89},{value:"使用示例：",paraId:273,tocIndex:89},{value:"chart.getDataByXY({x: 200, y: 100}, { shared: true })\n",paraId:274,tocIndex:89},{value:"参数配置：",paraId:275,tocIndex:89},{value:"type Point = {\n  x: number;\n  y: number;\n}\n\ntype Options = {\n  /** \n   * 相同 x 的元素是否共享 tooltip\n   * @default false\n  */\n  shared?: boolean;\n}\n",paraId:276,tocIndex:89},{value:"返回 chart 渲染时的 view 实例。",paraId:277,tocIndex:90},{value:"getView(): G2ViewDescriptor;\n",paraId:278,tocIndex:90},{value:"返回 chart 渲染时的 coordinate 实例。",paraId:279,tocIndex:91},{value:"getCoordinate(): Coordinate;\n",paraId:280,tocIndex:91},{value:"返回 chart 渲染时的 theme 实例。",paraId:281,tocIndex:92},{value:"getTheme(): G2Theme;\n",paraId:282,tocIndex:92},{value:"返回 chart 渲染时的 canvas group 实例。",paraId:283,tocIndex:93},{value:"getGroup(): DisplayObject;\n",paraId:284,tocIndex:93},{value:"返回 chart 渲染时所有的 scale 实例。",paraId:285,tocIndex:94},{value:"getScale(): Record<string, Scale>;\n",paraId:286,tocIndex:94},{value:"通过通道名称查找返回 chart 渲染时对应的 scale 实例。",paraId:287,tocIndex:95},{value:"getScaleByChannel(channel: string): Scale;\n",paraId:288,tocIndex:95},{value:"返回 view 渲染时的 view 实例。",paraId:289,tocIndex:96},{value:"getView(): G2ViewDescriptor;\n",paraId:290,tocIndex:96},{value:"返回 view 渲染时的 coordinate 实例。",paraId:291,tocIndex:97},{value:"getCoordinate(): Coordinate;\n",paraId:292,tocIndex:97},{value:"返回 view 渲染时的 theme 实例。",paraId:293,tocIndex:98},{value:"getTheme(): G2Theme;\n",paraId:294,tocIndex:98},{value:"返回 view 渲染时的 canvas group 实例。",paraId:295,tocIndex:99},{value:"getGroup(): DisplayObject;\n",paraId:296,tocIndex:99},{value:"返回 view 渲染时所有的 scale 实例。",paraId:297,tocIndex:100},{value:"getScale(): Record<string, Scale>;\n",paraId:298,tocIndex:100},{value:"通过通道名称查找返回 view 渲染时对应的 scale 实例。",paraId:299,tocIndex:101},{value:"getScaleByChannel(channel: string): Scale;\n",paraId:300,tocIndex:101},{value:"返回 mark 渲染时的 canvas group 实例。",paraId:301,tocIndex:102},{value:"getGroup(): DisplayObject;\n",paraId:302,tocIndex:102},{value:"返回 mark 渲染时所有的 scale 实例。",paraId:303,tocIndex:103},{value:"getScale(): Record<string, Scale>;\n",paraId:304,tocIndex:103},{value:"通过通道名称查找返回 mark 渲染时对应的 scale 实例。",paraId:305,tocIndex:104},{value:"getScaleByChannel(channel: string): Scale;\n",paraId:306,tocIndex:104},{value:"所有继承自 Node 类型的节点都可以应用节点操作的相关方法，例如 ",paraId:307,tocIndex:105},{value:"getNodeByKey()",paraId:307,tocIndex:105},{value:" 方法的返回值。",paraId:307,tocIndex:105},{value:"通过 type 查找所有的 node 子节点。",paraId:308,tocIndex:106},{value:"getNodesByType(type: string): Node[];\n",paraId:309,tocIndex:106},{value:"以下是找到第一个 ",paraId:310,tocIndex:106},{value:"rect",paraId:310,tocIndex:106},{value:" 图形的示例：",paraId:310,tocIndex:106},{value:"chart.getNodesByType('rect')[0].changeData(data);\n",paraId:311,tocIndex:106},{value:"通过 key 找到当前 node 的子节点。",paraId:312,tocIndex:107},{value:"getNodeByKey(key: string): Node;\n",paraId:313,tocIndex:107},{value:"创建一个新的 Node 并添加在 chart 的子节点上。",paraId:314,tocIndex:108},{value:"append(Ctor: new (value: Record<string, any>) => Node<ChildValue, Value>): Node<ChildValue, Value>;\n",paraId:315,tocIndex:108},{value:"从父节点上移除当前节点。",paraId:316,tocIndex:109},{value:"remove(): Node;\n",paraId:317,tocIndex:109},{value:"将指定的回调函数应用于节点值。",paraId:318,tocIndex:110},{value:"call(callback: (node: this, ...params: any[]) => any, ...params: any[]): this;\n",paraId:319,tocIndex:110},{value:"监听 chart 上的事件。",paraId:320,tocIndex:112},{value:"on(event: string, callback: (...args: any[]) => any, once?: boolean): this;\n",paraId:321,tocIndex:112},{value:"生命周期事件",paraId:322,tocIndex:112},{value:"事件",paraId:323,tocIndex:112},{value:"描述",paraId:323,tocIndex:112},{value:"beforerender",paraId:323,tocIndex:112},{value:"图表渲染前执行该事件",paraId:323,tocIndex:112},{value:"afterrender",paraId:323,tocIndex:112},{value:"图表渲染后执行该事件",paraId:323,tocIndex:112},{value:"beforepaint",paraId:323,tocIndex:112},{value:"图表布局计算后，绘制前执行该事件",paraId:323,tocIndex:112},{value:"afterpaint",paraId:323,tocIndex:112},{value:"图表绘制后执行该事件",paraId:323,tocIndex:112},{value:"beforechangedata",paraId:323,tocIndex:112},{value:"图表更新数据前执行该事件",paraId:323,tocIndex:112},{value:"afterchangedata",paraId:323,tocIndex:112},{value:"图表更新数据后执行该事件",paraId:323,tocIndex:112},{value:"beforechangesize",paraId:323,tocIndex:112},{value:"图表更新尺寸前执行该事件",paraId:323,tocIndex:112},{value:"afterchangesize",paraId:323,tocIndex:112},{value:"图表更新尺寸后执行该事件",paraId:323,tocIndex:112},{value:"beforedestroy",paraId:323,tocIndex:112},{value:"图表销毁前执行该事件",paraId:323,tocIndex:112},{value:"afterdestroy",paraId:323,tocIndex:112},{value:"图表销毁后执行该事件",paraId:323,tocIndex:112},{value:"通过 ",paraId:324,tocIndex:112},{value:"chart.on()",paraId:324,tocIndex:112},{value:" 来申明生命周期事件。例如：",paraId:324,tocIndex:112},{value:"chart.on('afterrender', (e) => {\n  console.log('Chart has been rendered!');\n});\n",paraId:325,tocIndex:112},{value:"监听 chart 上的事件，仅触发一次。",paraId:326,tocIndex:113},{value:"once(event: string, callback: (...args: any[]) => any): this;\n",paraId:327,tocIndex:113},{value:"触发 chart 上的事件。",paraId:328,tocIndex:114},{value:"emit(event: string, ...args: any[]): this;\n",paraId:329,tocIndex:114},{value:"卸载 chart 上的监听事件。",paraId:330,tocIndex:115},{value:"off(event?: string, callback?: (...args: any[]) => any): void;\n",paraId:331,tocIndex:115},{value:"关于 G2 中 事件的详细介绍见 ",paraId:332,tocIndex:115},{value:"事件",paraId:333,tocIndex:115},{value:"。",paraId:332,tocIndex:115},{value:"引入拓展的图表库。",paraId:334,tocIndex:117},{value:"extend(Runtime: new (options: RuntimeOptions) => Runtime<Spec>, library: Library): Chart;\n",paraId:335,tocIndex:117},{value:"当前为了 G2 整体包大小，部分拓展类图表没有放在主包里，在 G2 中可以通过 ",paraId:336,tocIndex:117},{value:"extend",paraId:336,tocIndex:117},{value:" 引入拓展图表库和 3d 图表库，实现更多的图表功能。",paraId:336,tocIndex:117},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart\n  .sunburst()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  })\n  .encode('value', 'sum')\n  .encode('color', 'label');\n\nchart.render();\n",paraId:337,tocIndex:117},{value:"import { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\nimport { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\n\n// Create a WebGL renderer.\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ThreeDPlugin());\nrenderer.registerPlugin(new ControlPlugin());\n\n// Customize our own Chart with threedlib.\nconst Chart = extend(Runtime, { ...corelib(), ...threedlib() });\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  depth: 400, // Define the depth of chart.\n});\n\nchart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('color', 'Origin')\n  .encode('size', 'Cylinders')\n  .encode('shape', 'sphere')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setPerspective(0.1, 5000, 45, 640 / 480);\n  camera.setType(CameraType.ORBITING);\n\n  // Add a directional light into scene.\n  const light = new DirectionalLight({\n    style: {\n      intensity: 3,\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n});\n",paraId:338,tocIndex:117},{value:"引入拓展的图表库。",paraId:339,tocIndex:118},{value:"register(key: `${G2ComponentNamespaces | 'symbol'}.${any}`, component: G2Component | SymbolFactor): void;\n",paraId:340,tocIndex:118},{value:"G2 有很强的扩展性：几乎所有的可视化组件都可以通过自定义的，前提是先通过 ",paraId:341,tocIndex:118},{value:"register",paraId:341,tocIndex:118},{value:" 对可视化组件进行注册。",paraId:341,tocIndex:118},{value:"下面的例子展示了如何自定义一个图例项图标：",paraId:342,tocIndex:118},{value:"import { Chart, register, type SymbolFactor } from '@antv/g2';\n\nconst customSquare = Object.assign<SymbolFactor, Partial<SymbolFactor>>(\n  (x, y, r) => {\n    const radius = r / 2;\n\n    return [\n      ['M', x + radius, y - r],\n      ['L', x - radius, y - r],\n      ['A', radius, radius, 0, 0, 0, x - r, y - radius],\n      ['L', x - r, y + radius],\n      ['A', radius, radius, 0, 0, 0, x - radius, y + r],\n      ['L', x + radius, y + r],\n      ['A', radius, radius, 0, 0, 0, x + r, y + radius],\n      ['L', x + r, y - radius],\n      ['A', radius, radius, 0, 0, 0, x + radius, y - r],\n      ['Z'],\n    ];\n  },\n  {\n    // 空心请设置为 ['stroke', 'lineWidth']\n    style: ['fill'],\n  },\n);\n\nregister('symbol.customSquare', customSquare);\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\nconst colorField = 'genre';\n\nchart\n  .interval()\n  .data(data)\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  .encode('color', colorField)\n  .legend({\n    color: {\n      itemMarker: 'customSquare',\n    },\n  });\n\nchart.render();\n",paraId:343,tocIndex:118},{value:"也可以自定义独特的条形图形状：",paraId:344,tocIndex:118},{value:"import { Chart, register } from '@antv/g2';\n\nregister('shape.interval.column25d', myColumn);\n\nconst data = [\n  { year: '1951 年', sales: 38 },\n  { year: '1952 年', sales: 52 },\n  { year: '1956 年', sales: 61 },\n  { year: '1957 年', sales: 145 },\n  { year: '1958 年', sales: 48 },\n  { year: '1959 年', sales: 38 },\n  { year: '1960 年', sales: 38 },\n  { year: '1962 年', sales: 38 },\n  { year: '1963 年', sales: 65 },\n  { year: '1964 年', sales: 122 },\n  { year: '1967 年', sales: 132 },\n  { year: '1968 年', sales: 144 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.data(data);\n\nchart\n  .interval()\n  .encode('x', 'year')\n  .encode('y', 'sales')\n  .style('shape', 'column25d')\n  .scale('x', { padding: 0.3 });\n\nchart.legend('year', {\n  width: 10,\n});\n\nchart.render();\n\n/**\n * Draw 2.5d column shape.\n */\nfunction myColumn({ fill, stroke }, context) {\n  return (points) => {\n    const x3 = points[1][0] - points[0][0];\n    const x4 = x3 / 2 + points[0][0];\n    const { document } = context;\n    const g = document.createElement('g', {});\n\n    const r = document.createElement('polygon', {\n      style: {\n        points: [\n          [points[0][0], points[0][1]],\n          [x4, points[1][1] + 8],\n          [x4, points[3][1] + 8],\n          [points[3][0], points[3][1]],\n        ],\n        fill: 'rgba(114, 177, 207, 0.5)',\n        stroke: 'rgba(0,0,0,0.1)',\n        strokeOpacity: 0.1,\n        inset: 30,\n      },\n    });\n\n    const p = document.createElement('polygon', {\n      style: {\n        points: [\n          [x4, points[1][1] + 8],\n          [points[1][0], points[1][1]],\n          [points[2][0], points[2][1]],\n          [x4, points[2][1] + 8],\n        ],\n        fill: 'rgba(126, 212, 236, 0.5)',\n        stroke: 'rgba(0,0,0,0.3)',\n        strokeOpacity: 0.1,\n      },\n    });\n\n    const t = document.createElement('polygon', {\n      style: {\n        points: [\n          [points[0][0], points[0][1]],\n          [x4, points[1][1] - 8],\n          [points[1][0], points[1][1]],\n          [x4, points[1][1] + 8],\n        ],\n        fill: 'rgba(173, 240, 255, 0.65)',\n      },\n    });\n\n    g.appendChild(r);\n    g.appendChild(p);\n    g.appendChild(t);\n\n    return g;\n  };\n}\n",paraId:345,tocIndex:118}]},15578:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(87479);const t=[{value:"G2 中 ",paraId:0,tocIndex:0},{value:"Axis（坐标轴）",paraId:0,tocIndex:0},{value:' 就像是图表的 "尺子"，用于建立数据与视觉位置的映射关系，并通过刻度、标签、网格线等元素帮助用户直观理解数据的分布与比例。它能帮你快速看懂图形的位置和数值大小。',paraId:0,tocIndex:0},{value:"简单来说，坐标轴可以帮助我们把数据数字和图表上的位置对应起来，让图表更容易理解。",paraId:1,tocIndex:0},{value:'举个例子：在柱状图中，横轴通常表示时间，纵轴表示销售额，这样你就能一眼看出 "3 月卖了 200 万，4 月涨到 300 万"',paraId:2,tocIndex:0},{value:"通过前面的概述内容，相信你对坐标轴已经有了一个清晰的认识。那么具体该如何使用呢？接下来，我将手把手教你如何配置坐标轴。",paraId:3,tocIndex:2},{value:'配置坐标轴其实就像搭积木，只需记住一个简单的核心口诀："用 axis 属性，按方向配置，哪里需要改哪里改。"',paraId:4,tocIndex:2},{value:"第一步：启用坐标轴（默认已开启）",paraId:5,tocIndex:2},{value:"G2 会根据你的数据类型 自动生成坐标轴，不需要任何配置就能看到基础坐标轴",paraId:6,tocIndex:2},{value:"chart.options({\n  type: 'interval',\n  width: 500,\n  height: 300,\n  data: [\n    { id: 1, 月份: '三月', 销售额: 200 },\n    { id: 3, 月份: '四月', 销售额: 300 },\n    { id: 4, 月份: '五月', 销售额: 400 },\n    { id: 5, 月份: '六月', 销售额: 500 },\n    { id: 6, 月份: '七月', 销售额: 600 },\n    { id: 7, 月份: '八月', 销售额: 700 },\n  ],\n  encode: { x: '月份', y: '销售额', color: '月份' },\n  // 不需要 axis 配置也能自动生成坐标轴\n  // axis: {},\n});\n",paraId:7,tocIndex:2},{value:"第二步：按方向单独配置",paraId:8,tocIndex:2},{value:"配置 x（水平方向） 坐标轴",paraId:9,tocIndex:2},{value:"chart.options({\n  type: 'interval',\n  width: 500,\n  height: 300,\n  data: [\n    { id: 1, 月份: '三月', 销售额: 200 },\n    { id: 3, 月份: '四月', 销售额: 300 },\n    { id: 4, 月份: '五月', 销售额: 400 },\n    { id: 5, 月份: '六月', 销售额: 500 },\n    { id: 6, 月份: '七月', 销售额: 600 },\n    { id: 7, 月份: '八月', 销售额: 700 },\n  ],\n  encode: { x: '月份', y: '销售额', color: '月份' },\n  // 配置 axis（坐标轴）\n  axis: {\n    // 配置水平方向的坐标轴属性\n    x: {\n      // 配置参数以及示例可以继续往下看..\n    },\n  },\n});\n",paraId:10,tocIndex:2},{value:"配置 y（垂直方向） 坐标轴",paraId:11,tocIndex:2},{value:"chart.options({\n  type: 'interval',\n  width: 500,\n  height: 300,\n  data: [\n    { id: 1, 月份: '三月', 销售额: 200 },\n    { id: 3, 月份: '四月', 销售额: 300 },\n    { id: 4, 月份: '五月', 销售额: 400 },\n    { id: 5, 月份: '六月', 销售额: 500 },\n    { id: 6, 月份: '七月', 销售额: 600 },\n    { id: 7, 月份: '八月', 销售额: 700 },\n  ],\n  encode: { x: '月份', y: '销售额', color: '月份' },\n  // 配置 axis（坐标轴）\n  axis: {\n    // 配置垂直方向的坐标轴属性\n    y: {\n      // 配置参数以及示例可以继续往下看..\n    },\n  },\n});\n",paraId:12,tocIndex:2},{value:"坐标轴可以在 Mark 层级配置。在 G2 中每个标记（Mark）都有自己的坐标轴。如果标记对应比例尺是同步的，那么坐标轴也会合并。",paraId:13,tocIndex:3},{value:"({\n  type: 'interval',\n  axis: {\n    x: { labelFormatter: '%0' },\n    y: { tickCount: 5 },\n  },\n});\n",paraId:14,tocIndex:3},{value:"坐标轴也可以在 View 层级配置。坐标轴具有传递性。视图上声明的坐标轴会传递给 ",paraId:15,tocIndex:3},{value:"children",paraId:15,tocIndex:3},{value:" 声明的标记，如果该标记有对应通道的坐标轴，就合并；否则不影响。",paraId:15,tocIndex:3},{value:"({\n  type: 'view',\n  axis: {\n    x: { labelFormatter: '%0' },\n    y: { tickCount: 5 },\n  },\n});\n",paraId:16,tocIndex:3},{value:"隐藏每个通道的坐标轴：",paraId:17,tocIndex:4},{value:"隐藏 x 坐标轴：",paraId:18,tocIndex:4},{value:"({\n  type: 'interval',\n  axis: { x: false }, // 隐藏 x 水平方向坐标轴\n});\n",paraId:19,tocIndex:4},{value:"隐藏 y 坐标轴：",paraId:20,tocIndex:4},{value:"({\n  type: 'interval',\n  axis: { y: false }, // 隐藏 y 垂直方向坐标轴\n});\n",paraId:21,tocIndex:4},{value:"隐藏多个坐标轴",paraId:22,tocIndex:4},{value:"({\n  type: 'interval',\n  axis: false,\n});\n",paraId:23,tocIndex:4},{value:"每个坐标轴由 标题（title）、轴线（line）、刻度（tick）、刻度值（label）、网格线（grid）以及断轴（breaks）组成。",paraId:24,tocIndex:5},{value:"属性",paraId:25,tocIndex:5},{value:"描述",paraId:25,tocIndex:5},{value:"类型",paraId:25,tocIndex:5},{value:"默认值",paraId:25,tocIndex:5},{value:"必选",paraId:25,tocIndex:5},{value:"title",paraId:25,tocIndex:5},{value:"设置坐标轴的标题文本及其样式",paraId:25,tocIndex:5},{value:"title",paraId:26,tocIndex:5},{value:"-",paraId:25,tocIndex:5},{value:"line",paraId:25,tocIndex:5},{value:"设置坐标轴线的显示及其样式",paraId:25,tocIndex:5},{value:"line",paraId:27,tocIndex:5},{value:"-",paraId:25,tocIndex:5},{value:"tick",paraId:25,tocIndex:5},{value:"设置坐标轴刻度线的显示及其样式",paraId:25,tocIndex:5},{value:"tick",paraId:28,tocIndex:5},{value:"-",paraId:25,tocIndex:5},{value:"label",paraId:25,tocIndex:5},{value:"设置坐标轴刻度值的显示及其样式",paraId:25,tocIndex:5},{value:"label",paraId:29,tocIndex:5},{value:"-",paraId:25,tocIndex:5},{value:"grid",paraId:25,tocIndex:5},{value:"设置坐标轴网格线的显示及其样式",paraId:25,tocIndex:5},{value:"grid",paraId:30,tocIndex:5},{value:"-",paraId:25,tocIndex:5},{value:"breaks",paraId:25,tocIndex:5},{value:"设置坐标轴断轴的显示及其样式",paraId:25,tocIndex:5},{value:"breaks",paraId:31,tocIndex:5},{value:"-",paraId:25,tocIndex:5},{value:"animate",paraId:25,tocIndex:5},{value:"设置坐标轴动画效果",paraId:25,tocIndex:5},{value:"boolean",paraId:25,tocIndex:5},{value:" | ",paraId:25,tocIndex:5},{value:"animate",paraId:32,tocIndex:5},{value:"-",paraId:25,tocIndex:5},{value:"position",paraId:25,tocIndex:5},{value:"设置坐标轴的位置",paraId:25,tocIndex:5},{value:"left",paraId:25,tocIndex:5},{value:" | ",paraId:25,tocIndex:5},{value:"right",paraId:25,tocIndex:5},{value:" | ",paraId:25,tocIndex:5},{value:"top",paraId:25,tocIndex:5},{value:" | ",paraId:25,tocIndex:5},{value:"bottom",paraId:25,tocIndex:5},{value:"x: bottom",paraId:25,tocIndex:5},{value:" | ",paraId:25,tocIndex:5},{value:"y: left",paraId:25,tocIndex:5},{value:"标题（title）、轴线（line）、刻度（tick）、刻度值（label）以及网格线（grid）的配置同级，不是以对象的形式来配置，而是以前缀加属性的方式来配置。",paraId:33},{value:"例如配置刻度值的旋转，不是在 label 对象下配置，而是通过如下的方式：",paraId:34},{value:"({\n  axis: {\n    x: {\n      title: 'x 轴标题',\n      labelFontSize: 12,\n      labelFormatter: (d) => `2025-${d}`,\n      transform: [\n        // 旋转\n        {\n          type: 'rotate',\n          optionalAngles: [0, 45, 90], // 尝试旋转 0 度、45 度、90 度\n          recoverWhenFailed: true, // 如果旋转后无法解决问题，恢复到默认角度\n        },\n      ],\n    },\n  },\n});\n",paraId:35},{value:"属性",paraId:36,tocIndex:6},{value:"描述",paraId:36,tocIndex:6},{value:"类型",paraId:36,tocIndex:6},{value:"默认值",paraId:36,tocIndex:6},{value:"必须",paraId:36,tocIndex:6},{value:"title",paraId:36,tocIndex:6},{value:"关闭标题或设置标题内容",paraId:36,tocIndex:6},{value:"false",paraId:36,tocIndex:6},{value:"|",paraId:36,tocIndex:6},{value:"string",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"DisplayObject",paraId:36,tocIndex:6},{value:"-",paraId:36,tocIndex:6},{value:"titleSpacing",paraId:36,tocIndex:6},{value:"标题到坐标轴的距离",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number",paraId:36,tocIndex:6},{value:"10",paraId:36,tocIndex:6},{value:"titlePosition",paraId:36,tocIndex:6},{value:"标题相对坐标轴的位置，支持首字母简写形式，如",paraId:36,tocIndex:6},{value:"'top'",paraId:36,tocIndex:6},{value:"简写为",paraId:36,tocIndex:6},{value:"'t'",paraId:36,tocIndex:6},{value:"'top'",paraId:36,tocIndex:6},{value:"|",paraId:36,tocIndex:6},{value:"'bottom'",paraId:36,tocIndex:6},{value:"|",paraId:36,tocIndex:6},{value:"'left'",paraId:36,tocIndex:6},{value:"|",paraId:36,tocIndex:6},{value:"'right'",paraId:36,tocIndex:6},{value:"'lb'",paraId:36,tocIndex:6},{value:"titleFontSize",paraId:36,tocIndex:6},{value:"标题文字大小",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number",paraId:36,tocIndex:6},{value:"-",paraId:36,tocIndex:6},{value:"titleFontWeight",paraId:36,tocIndex:6},{value:"标题文字字体粗细",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number",paraId:36,tocIndex:6},{value:"-",paraId:36,tocIndex:6},{value:"titleFontFamily",paraId:36,tocIndex:6},{value:"标题文字字体",paraId:36,tocIndex:6},{value:"string",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => string",paraId:36,tocIndex:6},{value:"-",paraId:36,tocIndex:6},{value:"titleLineHeight",paraId:36,tocIndex:6},{value:"标题文字行高",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number",paraId:36,tocIndex:6},{value:"1",paraId:36,tocIndex:6},{value:"titleTextAlign",paraId:36,tocIndex:6},{value:"标题文字水平对齐方式",paraId:36,tocIndex:6},{value:"'center'",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"'end'",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"'left'",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"'right'",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"'start'",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => string",paraId:36,tocIndex:6},{value:"'start'",paraId:36,tocIndex:6},{value:"titleTextBaseline",paraId:36,tocIndex:6},{value:"标题文字垂直基线",paraId:36,tocIndex:6},{value:"'top'",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"'middle'",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"'bottom'",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"'alphabetic'",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"'hanging'",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => string",paraId:36,tocIndex:6},{value:"'middle'",paraId:36,tocIndex:6},{value:"titleFill",paraId:36,tocIndex:6},{value:"标题文字填充色",paraId:36,tocIndex:6},{value:"string",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => string",paraId:36,tocIndex:6},{value:"-",paraId:36,tocIndex:6},{value:"titleFillOpacity",paraId:36,tocIndex:6},{value:"标题文字填充透明度",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number",paraId:36,tocIndex:6},{value:"1",paraId:36,tocIndex:6},{value:"titleStroke",paraId:36,tocIndex:6},{value:"标题文字描边颜色",paraId:36,tocIndex:6},{value:"string",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => string",paraId:36,tocIndex:6},{value:"transparent",paraId:36,tocIndex:6},{value:"titleStrokeOpacity",paraId:36,tocIndex:6},{value:"标题文字描边透明度",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number",paraId:36,tocIndex:6},{value:"1",paraId:36,tocIndex:6},{value:"titleLineWidth",paraId:36,tocIndex:6},{value:"标题文字描边宽度",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number",paraId:36,tocIndex:6},{value:"0",paraId:36,tocIndex:6},{value:"titleLineDash",paraId:36,tocIndex:6},{value:"标题文字描边虚线配置",paraId:36,tocIndex:6},{value:"number[]",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number[]",paraId:36,tocIndex:6},{value:"[]",paraId:36,tocIndex:6},{value:"titleOpacity",paraId:36,tocIndex:6},{value:"标题文字整体透明度",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number",paraId:36,tocIndex:6},{value:"1",paraId:36,tocIndex:6},{value:"titleShadowColor",paraId:36,tocIndex:6},{value:"标题文字阴影颜色",paraId:36,tocIndex:6},{value:"string",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => string",paraId:36,tocIndex:6},{value:"transparent",paraId:36,tocIndex:6},{value:"titleShadowBlur",paraId:36,tocIndex:6},{value:"标题文字阴影高斯模糊系数",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number",paraId:36,tocIndex:6},{value:"0",paraId:36,tocIndex:6},{value:"titleShadowOffsetX",paraId:36,tocIndex:6},{value:"标题文字阴影水平偏移量",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number",paraId:36,tocIndex:6},{value:"0",paraId:36,tocIndex:6},{value:"titleShadowOffsetY",paraId:36,tocIndex:6},{value:"标题文字阴影垂直偏移量",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number",paraId:36,tocIndex:6},{value:"0",paraId:36,tocIndex:6},{value:"titleCursor",paraId:36,tocIndex:6},{value:"标题文字鼠标样式",paraId:36,tocIndex:6},{value:"string",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => string",paraId:36,tocIndex:6},{value:"default",paraId:36,tocIndex:6},{value:"titleDx",paraId:36,tocIndex:6},{value:"标题文字水平偏移量",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number",paraId:36,tocIndex:6},{value:"0",paraId:36,tocIndex:6},{value:"titleDy",paraId:36,tocIndex:6},{value:"标题文字垂直偏移量",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number",paraId:36,tocIndex:6},{value:"0",paraId:36,tocIndex:6},{value:"配置方式",paraId:37,tocIndex:6},{value:"({\n  // 配置坐标轴\n  axis: {\n    // 配置 y 轴\n    y: {\n      // 这部分是轴标题的配置\n      title: 'Frequency', // 设置 y 轴标题\n      titleSpacing: 30, // 设置 y 轴标题与轴线之间的间距\n      titlePosition: 'left', // 设置 y 轴标题位置\n      titleFill: 'steelblue', // 设置 y 轴标题的颜色\n      titleFontSize: 16, // 设置 y 轴标题字体大小\n      titleFontWeight: 'bold', // 设置 y 轴标题字体粗细\n      titleFontFamily: 'Arial', // 设置 y 轴标题字体\n      titleTextAlign: 'center', // 设置 y 轴标题水平对齐方式\n      titleTextBaseline: 'middle', // 设置 y 轴标题垂直基线\n      titleOpacity: 0.9, // 设置 y 轴标题整体透明度\n      titleStroke: '#333', // 设置 y 轴标题描边颜色\n      titleLineWidth: 1, // 设置 y 轴标题描边宽度\n      titleShadowColor: 'rgba(0,0,0,0.3)', // 设置 y 轴标题阴影颜色\n      titleShadowBlur: 3, // 设置 y 轴标题阴影模糊度\n      titleShadowOffsetX: 2, // 设置 y 轴标题阴影水平偏移\n      titleShadowOffsetY: 2, // 设置 y 轴标题阴影垂直偏移\n      titleDx: 5, // 设置 y 轴标题水平偏移量\n      titleDy: 0, // 设置 y 轴标题垂直偏移量\n      titleCursor: 'pointer', // 设置 y 轴标题鼠标样式\n    },\n    // 配置 x 轴\n    x: {\n      // 这部分是轴标题的配置\n      title: 'Letter', // 设置 x 轴标题\n      titleSpacing: 20, // 设置 x 轴标题与轴线之间的间距\n      titlePosition: 'bottom', // 设置 x 轴标题位置\n      titleFontSize: 14, // 设置 x 轴标题字体大小\n      titleFontWeight: 'normal', // 设置 x 轴标题字体粗细\n      titleFill: '#666', // 设置 x 轴标题颜色\n      titleTextAlign: 'center', // 设置 x 轴标题水平对齐方式\n      titleOpacity: 1, // 设置 x 轴标题透明度\n      titleLineHeight: 1.2, // 设置 x 轴标题行高\n      titleFillOpacity: 0.8, // 设置 x 轴标题填充透明度\n    },\n  },\n});\n",paraId:38,tocIndex:6},{value:"属性",paraId:39,tocIndex:7},{value:"描述",paraId:39,tocIndex:7},{value:"类型",paraId:39,tocIndex:7},{value:"默认值",paraId:39,tocIndex:7},{value:"必须",paraId:39,tocIndex:7},{value:"line",paraId:39,tocIndex:7},{value:"是否显示轴线",paraId:39,tocIndex:7},{value:"boolean",paraId:39,tocIndex:7},{value:"false",paraId:39,tocIndex:7},{value:"arrow",paraId:39,tocIndex:7},{value:"是否显示箭头",paraId:39,tocIndex:7},{value:"boolean",paraId:39,tocIndex:7},{value:"true",paraId:39,tocIndex:7},{value:"lineExtension",paraId:39,tocIndex:7},{value:"轴线两侧的延长线",paraId:39,tocIndex:7},{value:"[number, number]",paraId:39,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"lineArrow",paraId:39,tocIndex:7},{value:"定义轴线箭头形状，默认为箭头形状",paraId:39,tocIndex:7},{value:"DisplayObject",paraId:39,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"lineArrowOffset",paraId:39,tocIndex:7},{value:"箭头偏移长度",paraId:39,tocIndex:7},{value:"number",paraId:39,tocIndex:7},{value:"15",paraId:39,tocIndex:7},{value:"lineArrowSize",paraId:39,tocIndex:7},{value:"箭头尺寸",paraId:39,tocIndex:7},{value:"number",paraId:39,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"lineStroke",paraId:39,tocIndex:7},{value:"轴线描边颜色",paraId:39,tocIndex:7},{value:"string",paraId:39,tocIndex:7},{value:" | ",paraId:39,tocIndex:7},{value:"(datum, index, data) => string",paraId:39,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"lineStrokeOpacity",paraId:39,tocIndex:7},{value:"轴线描边透明度",paraId:39,tocIndex:7},{value:"number",paraId:39,tocIndex:7},{value:" | ",paraId:39,tocIndex:7},{value:"(datum, index, data) => number",paraId:39,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"lineLineWidth",paraId:39,tocIndex:7},{value:"轴线描边宽度",paraId:39,tocIndex:7},{value:"number",paraId:39,tocIndex:7},{value:" | ",paraId:39,tocIndex:7},{value:"(datum, index, data) => number",paraId:39,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"lineLineDash",paraId:39,tocIndex:7},{value:"轴线描边虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:39,tocIndex:7},{value:"[number,number]",paraId:39,tocIndex:7},{value:" | ",paraId:39,tocIndex:7},{value:"(datum, index, data) => [number,number]",paraId:39,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"lineOpacity",paraId:39,tocIndex:7},{value:"轴线整体透明度",paraId:39,tocIndex:7},{value:"number",paraId:39,tocIndex:7},{value:" | ",paraId:39,tocIndex:7},{value:"(datum, index, data) => number",paraId:39,tocIndex:7},{value:"1",paraId:39,tocIndex:7},{value:"lineShadowColor",paraId:39,tocIndex:7},{value:"轴线阴影颜色",paraId:39,tocIndex:7},{value:"string",paraId:39,tocIndex:7},{value:" | ",paraId:39,tocIndex:7},{value:"(datum, index, data) => string",paraId:39,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"lineShadowBlur",paraId:39,tocIndex:7},{value:"轴线阴影高斯模糊系数",paraId:39,tocIndex:7},{value:"number",paraId:39,tocIndex:7},{value:" | ",paraId:39,tocIndex:7},{value:"(datum, index, data) => number",paraId:39,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"lineShadowOffsetX",paraId:39,tocIndex:7},{value:"轴线阴影水平偏移量",paraId:39,tocIndex:7},{value:"number",paraId:39,tocIndex:7},{value:" | ",paraId:39,tocIndex:7},{value:"(datum, index, data) => number",paraId:39,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"lineShadowOffsetY",paraId:39,tocIndex:7},{value:"轴线阴影垂直偏移量",paraId:39,tocIndex:7},{value:"number",paraId:39,tocIndex:7},{value:" | ",paraId:39,tocIndex:7},{value:"(datum, index, data) => number",paraId:39,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"lineCursor",paraId:39,tocIndex:7},{value:"轴线鼠标样式",paraId:39,tocIndex:7},{value:"string",paraId:39,tocIndex:7},{value:" | ",paraId:39,tocIndex:7},{value:"(datum, index, data) => string",paraId:39,tocIndex:7},{value:"default",paraId:39,tocIndex:7},{value:"配置方式",paraId:40,tocIndex:7},{value:"({\n  axis: {\n    x: {\n      line: true, // 是否显示轴线\n      arrow: true, // 是否显示箭头\n      lineArrowOffset: 10, // 箭头偏移长度\n      lineArrowSize: 30, // 箭头尺寸\n      lineLineWidth: 10, // 轴线描边宽度\n      lineExtension: [5, 5], // 轴线两侧的延长线\n      lineStroke: '#333', // 轴线描边颜色\n      lineStrokeOpacity: 0.8, // 轴线描边透明度\n      lineLineDash: [5, 5], // 轴线描边虚线配置\n      lineOpacity: 1, // 轴线整体透明度\n      lineShadowColor: 'rgba(0,0,0,0.3)', // 轴线阴影颜色\n      lineShadowBlur: 3, // 轴线阴影高斯模糊系数\n      lineShadowOffsetX: 2, // 轴线阴影水平偏移量\n      lineShadowOffsetY: 2, // 轴线阴影垂直偏移量\n      lineCursor: 'pointer', // 轴线鼠标样式\n    },\n    y: {\n      line: true, // 是否显示轴线\n      arrow: true, // 是否显示箭头\n      lineArrowOffset: 10, // 箭头偏移长度\n      lineArrowSize: 30, // 箭头尺寸\n      lineLineWidth: 10, // 轴线描边宽度\n      lineStroke: '#666', // 轴线描边颜色\n      lineOpacity: 0.9, // 轴线整体透明度\n    },\n  },\n});\n",paraId:41,tocIndex:7},{value:"属性",paraId:42,tocIndex:8},{value:"描述",paraId:42,tocIndex:8},{value:"类型",paraId:42,tocIndex:8},{value:"默认值",paraId:42,tocIndex:8},{value:"必须",paraId:42,tocIndex:8},{value:"tick",paraId:42,tocIndex:8},{value:"是否显示刻度",paraId:42,tocIndex:8},{value:"boolean",paraId:42,tocIndex:8},{value:"true",paraId:42,tocIndex:8},{value:"tickCount",paraId:42,tocIndex:8},{value:"设置推荐生成的刻度数量；tickCount 只是一个建议值",paraId:42,tocIndex:8},{value:"number",paraId:42,tocIndex:8},{value:"-",paraId:42,tocIndex:8},{value:"tickMethod",paraId:42,tocIndex:8},{value:"自定义刻度生成方法",paraId:42,tocIndex:8},{value:"(start: number | Date, end: number | Date, tickCount: number) => number[]",paraId:42,tocIndex:8},{value:"-",paraId:42,tocIndex:8},{value:"tickFilter",paraId:42,tocIndex:8},{value:"刻度线过滤",paraId:42,tocIndex:8},{value:"(datum, index, data)=>boolean",paraId:42,tocIndex:8},{value:"-",paraId:42,tocIndex:8},{value:"tickFormatter",paraId:42,tocIndex:8},{value:"刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向",paraId:42,tocIndex:8},{value:"DisplayObject",paraId:42,tocIndex:8},{value:" | ",paraId:42,tocIndex:8},{value:"(datum, index, data, Vector)=> DisplayObject",paraId:42,tocIndex:8},{value:"-",paraId:42,tocIndex:8},{value:"tickDirection",paraId:42,tocIndex:8},{value:"刻度朝向，为 ",paraId:42,tocIndex:8},{value:"positive",paraId:42,tocIndex:8},{value:" 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 ",paraId:42,tocIndex:8},{value:"negative",paraId:42,tocIndex:8},{value:" 时，刻度位于侧轴负方向",paraId:42,tocIndex:8},{value:"'positive'",paraId:42,tocIndex:8},{value:" | ",paraId:42,tocIndex:8},{value:"'negative'",paraId:42,tocIndex:8},{value:"positive",paraId:42,tocIndex:8},{value:"tickLength",paraId:42,tocIndex:8},{value:"刻度线长度",paraId:42,tocIndex:8},{value:"number",paraId:42,tocIndex:8},{value:"|",paraId:42,tocIndex:8},{value:"(datum, index, data)=>number",paraId:42,tocIndex:8},{value:"15",paraId:42,tocIndex:8},{value:"tickStroke",paraId:42,tocIndex:8},{value:"刻度线描边颜色",paraId:42,tocIndex:8},{value:"string",paraId:42,tocIndex:8},{value:" | ",paraId:42,tocIndex:8},{value:"(datum, index, data, Vector)=>string",paraId:42,tocIndex:8},{value:"-",paraId:42,tocIndex:8},{value:"tickStrokeOpacity",paraId:42,tocIndex:8},{value:"刻度线描边透明度",paraId:42,tocIndex:8},{value:"number",paraId:42,tocIndex:8},{value:" | ",paraId:42,tocIndex:8},{value:"(datum, index, data, Vector)=>number",paraId:42,tocIndex:8},{value:"-",paraId:42,tocIndex:8},{value:"tickLineWidth",paraId:42,tocIndex:8},{value:"刻度线描边宽度",paraId:42,tocIndex:8},{value:"number",paraId:42,tocIndex:8},{value:" | ",paraId:42,tocIndex:8},{value:"(datum, index, data, Vector)=>number",paraId:42,tocIndex:8},{value:"-",paraId:42,tocIndex:8},{value:"tickLineDash",paraId:42,tocIndex:8},{value:"刻度线描边虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:42,tocIndex:8},{value:"[number,number]",paraId:42,tocIndex:8},{value:" | ",paraId:42,tocIndex:8},{value:"(datum, index, data, Vector)=>[number,number]",paraId:42,tocIndex:8},{value:"-",paraId:42,tocIndex:8},{value:"tickOpacity",paraId:42,tocIndex:8},{value:"刻度线整体透明度",paraId:42,tocIndex:8},{value:"number",paraId:42,tocIndex:8},{value:" | ",paraId:42,tocIndex:8},{value:"(datum, index, data, Vector)=>number",paraId:42,tocIndex:8},{value:"-",paraId:42,tocIndex:8},{value:"tickShadowColor",paraId:42,tocIndex:8},{value:"刻度线阴影颜色",paraId:42,tocIndex:8},{value:"string",paraId:42,tocIndex:8},{value:" | ",paraId:42,tocIndex:8},{value:"(datum, index, data, Vector)=>string",paraId:42,tocIndex:8},{value:"-",paraId:42,tocIndex:8},{value:"tickShadowBlur",paraId:42,tocIndex:8},{value:"刻度线阴影高斯模糊系数",paraId:42,tocIndex:8},{value:"number",paraId:42,tocIndex:8},{value:" | ",paraId:42,tocIndex:8},{value:"(datum, index, data, Vector)=>number",paraId:42,tocIndex:8},{value:"-",paraId:42,tocIndex:8},{value:"tickShadowOffsetX",paraId:42,tocIndex:8},{value:"刻度线阴影水平偏移量",paraId:42,tocIndex:8},{value:"number",paraId:42,tocIndex:8},{value:" | ",paraId:42,tocIndex:8},{value:"(datum, index, data, Vector)=>number",paraId:42,tocIndex:8},{value:"-",paraId:42,tocIndex:8},{value:"tickShadowOffsetY",paraId:42,tocIndex:8},{value:"刻度线阴影垂直偏移量",paraId:42,tocIndex:8},{value:"number",paraId:42,tocIndex:8},{value:" | ",paraId:42,tocIndex:8},{value:"(datum, index, data, Vector)=>number",paraId:42,tocIndex:8},{value:"-",paraId:42,tocIndex:8},{value:"tickCursor",paraId:42,tocIndex:8},{value:"刻度线鼠标样式",paraId:42,tocIndex:8},{value:"string",paraId:42,tocIndex:8},{value:" | ",paraId:42,tocIndex:8},{value:"(datum, index, data, Vector)=>string",paraId:42,tocIndex:8},{value:"default",paraId:42,tocIndex:8},{value:"({\n  // 配置坐标轴\n  axis: {\n    y: {\n      tickCount: 10, // 设置推荐生成的刻度数量\n      tickLength: 20, // 设置 y 轴刻度线的长度\n      tickFilter: (_, i) => i % 3 !== 0, // 过滤 y 轴刻度线，只显示每隔 3 个刻度线\n      tick: true, // 是否显示刻度\n      tickDirection: 'positive', // 刻度朝向\n      tickStroke: '#333', // 刻度线描边颜色\n      tickStrokeOpacity: 0.8, // 刻度线描边透明度\n      tickLineWidth: 2, // 刻度线描边宽度\n      tickLineDash: [2, 2], // 刻度线描边虚线配置\n      tickOpacity: 1, // 刻度线整体透明度\n      tickShadowColor: 'rgba(0,0,0,0.2)', // 刻度线阴影颜色\n      tickShadowBlur: 2, // 刻度线阴影高斯模糊系数\n      tickShadowOffsetX: 1, // 刻度线阴影水平偏移量\n      tickShadowOffsetY: 1, // 刻度线阴影垂直偏移量\n      tickCursor: 'crosshair', // 刻度线鼠标样式\n    },\n    x: {\n      tick: true, // 是否显示刻度\n      tickCount: 8, // 设置推荐生成的刻度数量\n      tickMethod: (start, end, count) => {\n        // 自定义刻度生成方法\n        const step = (end - start) / (count - 1);\n        return Array.from({ length: count }, (_, i) => start + i * step);\n      },\n      tickLength: 10, // 刻度线长度\n      tickDirection: 'positive', // 刻度朝向\n      tickStroke: '#3366ff', // 刻度线描边颜色\n      tickLineWidth: 5, // 刻度线描边宽度\n      tickOpacity: 0.9, // 刻度线整体透明度\n      tickFilter: (_, i) => i % 2 === 0, // 过滤刻度线，只显示偶数索引的刻度\n    },\n  },\n});\n",paraId:43,tocIndex:8},{value:"属性",paraId:44,tocIndex:9},{value:"描述",paraId:44,tocIndex:9},{value:"类型",paraId:44,tocIndex:9},{value:"默认值",paraId:44,tocIndex:9},{value:"必须",paraId:44,tocIndex:9},{value:"label",paraId:44,tocIndex:9},{value:"是否显示刻度值",paraId:44,tocIndex:9},{value:"boolean",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelFontSize",paraId:44,tocIndex:9},{value:"刻度标签文字大小",paraId:44,tocIndex:9},{value:"number",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>number",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelFontFamily",paraId:44,tocIndex:9},{value:"刻度标签文字字体",paraId:44,tocIndex:9},{value:"string",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>string",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelFontWeight",paraId:44,tocIndex:9},{value:"刻度标签文字字体粗细",paraId:44,tocIndex:9},{value:"number",paraId:44,tocIndex:9},{value:" |",paraId:44,tocIndex:9},{value:"(datum, index, data)=>number",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelLineHeight",paraId:44,tocIndex:9},{value:"刻度标签文字行高",paraId:44,tocIndex:9},{value:"number",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>number",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelTextAlign",paraId:44,tocIndex:9},{value:"刻度标签文字水平对齐方式",paraId:44,tocIndex:9},{value:"'center'",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"'end'",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"'left'",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"'right'",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"'start'",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>string",paraId:44,tocIndex:9},{value:"'start'",paraId:44,tocIndex:9},{value:"labelTextBaseline",paraId:44,tocIndex:9},{value:"刻度标签文字垂直基线",paraId:44,tocIndex:9},{value:"'top'",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"'middle'",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"'bottom'",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"'alphabetic'",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"'hanging'",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>string",paraId:44,tocIndex:9},{value:"'bottom'",paraId:44,tocIndex:9},{value:"labelAlign",paraId:44,tocIndex:9},{value:"刻度值对齐方式",paraId:44,tocIndex:9},{value:"- 'horizontal' 始终保持水平",paraId:44,tocIndex:9},{value:" - 'parallel' 平行于坐标轴",paraId:44,tocIndex:9},{value:" - 'perpendicular' 垂直于坐标轴",paraId:44,tocIndex:9},{value:"'horizontal'",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"'parallel'",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"'perpendicular'",paraId:44,tocIndex:9},{value:"parallel",paraId:44,tocIndex:9},{value:"labelFilter",paraId:44,tocIndex:9},{value:"刻度值过滤",paraId:44,tocIndex:9},{value:"(datum, index, data)=> boolean",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelFormatter",paraId:44,tocIndex:9},{value:"刻度值格式化，可以传入一个函数或者是 ",paraId:44,tocIndex:9},{value:"d3-format",paraId:44,tocIndex:9},{value:" 支持的字符串",paraId:44,tocIndex:9},{value:"string",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, array) => string",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelRender",paraId:44,tocIndex:9},{value:"自定义 label 渲染，支持 HtmlString，用法同 ",paraId:44,tocIndex:9},{value:"labelFormatter",paraId:44,tocIndex:9},{value:"string",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, array) => string",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"transform",paraId:44,tocIndex:9},{value:"刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转",paraId:44,tocIndex:9},{value:"Transform[]",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelTransform",paraId:44,tocIndex:9},{value:"刻度值转换，在局部坐标系下进行变换的快捷方式，包括缩放、平移、旋转、拉伸、矩阵变换，具体见",paraId:44,tocIndex:9},{value:"transform",paraId:44,tocIndex:9},{value:"string",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelAutoHide",paraId:44,tocIndex:9},{value:"自动隐藏重叠的刻度值，设置 size 值的时候生效",paraId:44,tocIndex:9},{value:"boolean",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"HideOverlapCfg",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelAutoRotate",paraId:44,tocIndex:9},{value:"自动旋转刻度，设置 size 值的时候生效值",paraId:44,tocIndex:9},{value:"boolean",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"RotateOverlapCfg",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelAutoEllipsis",paraId:44,tocIndex:9},{value:"自动缩略刻度值，设置 size 值的时候生效",paraId:44,tocIndex:9},{value:"boolean",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"EllipsisOverlapCfg",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelAutoWrap",paraId:44,tocIndex:9},{value:"自动换行刻度值，设置 size 值的时候是生效",paraId:44,tocIndex:9},{value:"boolean",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"WrapOverlapCfg",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelDirection",paraId:44,tocIndex:9},{value:"刻度值位于轴线的位置，参考",paraId:44,tocIndex:9},{value:"tickDirection",paraId:44,tocIndex:9},{value:"'positive'",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"'negative'",paraId:44,tocIndex:9},{value:"positive",paraId:44,tocIndex:9},{value:"labelSpacing",paraId:44,tocIndex:9},{value:"刻度值到其对应刻度的间距",paraId:44,tocIndex:9},{value:"number",paraId:44,tocIndex:9},{value:"0",paraId:44,tocIndex:9},{value:"labelFill",paraId:44,tocIndex:9},{value:"刻度标签文字填充色",paraId:44,tocIndex:9},{value:"string",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>string",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelFillOpacity",paraId:44,tocIndex:9},{value:"刻度标签文字填充透明度",paraId:44,tocIndex:9},{value:"number",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>number",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelStroke",paraId:44,tocIndex:9},{value:"刻度标签文字描边颜色",paraId:44,tocIndex:9},{value:"string",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>string",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelStrokeOpacity",paraId:44,tocIndex:9},{value:"刻度标签文字描边透明度",paraId:44,tocIndex:9},{value:"number",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>number",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelLineWidth",paraId:44,tocIndex:9},{value:"刻度标签文字描边宽度",paraId:44,tocIndex:9},{value:"number",paraId:44,tocIndex:9},{value:" |",paraId:44,tocIndex:9},{value:"(datum, index, data)=>number",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelLineDash",paraId:44,tocIndex:9},{value:"刻度标签文字描边虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:44,tocIndex:9},{value:"[number,number]",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>[number, number]",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelOpacity",paraId:44,tocIndex:9},{value:"刻度标签文字整体透明度",paraId:44,tocIndex:9},{value:"number",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>number",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelShadowColor",paraId:44,tocIndex:9},{value:"刻度标签文字阴影颜色",paraId:44,tocIndex:9},{value:"string",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>string",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelShadowBlur",paraId:44,tocIndex:9},{value:"刻度标签文字阴影高斯模糊系数",paraId:44,tocIndex:9},{value:"number",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>number",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelShadowOffsetX",paraId:44,tocIndex:9},{value:"刻度标签文字阴影水平偏移量",paraId:44,tocIndex:9},{value:"number",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>number",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelShadowOffsetY",paraId:44,tocIndex:9},{value:"刻度标签文字阴影垂直偏移量",paraId:44,tocIndex:9},{value:"number",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>number",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelCursor",paraId:44,tocIndex:9},{value:"刻度标签文字鼠标样式",paraId:44,tocIndex:9},{value:"string",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>string",paraId:44,tocIndex:9},{value:"default",paraId:44,tocIndex:9},{value:"labelDx",paraId:44,tocIndex:9},{value:"刻度标签文字水平偏移量",paraId:44,tocIndex:9},{value:"number",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>number",paraId:44,tocIndex:9},{value:"0",paraId:44,tocIndex:9},{value:"labelDy",paraId:44,tocIndex:9},{value:"刻度标签文字垂直偏移量",paraId:44,tocIndex:9},{value:"number",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>number",paraId:44,tocIndex:9},{value:"0",paraId:44,tocIndex:9},{value:"labelFormatter",paraId:45,tocIndex:10},{value:" 视觉通道用于调整标签的格式。",paraId:45,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  width: 500,\n  height: 300,\n  data: [\n    { id: 1, 月份: '03', 销售额: 200 },\n    { id: 3, 月份: '04', 销售额: 300 },\n    { id: 4, 月份: '05', 销售额: 400 },\n    { id: 5, 月份: '06', 销售额: 500 },\n    { id: 6, 月份: '07', 销售额: 600 },\n    { id: 7, 月份: '08', 销售额: 700 },\n  ],\n  encode: { x: '月份', y: '销售额', color: '月份' },\n  axis: {\n    y: {\n      title: '销售额',\n    },\n    x: {\n      title: '月份',\n      labelFontSize: 12,\n      labelFormatter: (d) => `2025-${d}`, // 刻度值线格式化\n    },\n  },\n});\nchart.render();\n",paraId:46,tocIndex:11},{value:"G2 支持使用 ",paraId:47,tocIndex:12},{value:"d3-format",paraId:47,tocIndex:12},{value:" 兼容的格式化字符串，这是一套强大且标准化的数值格式化规范。",paraId:47,tocIndex:12},{value:"D3 format 的基本语法：",paraId:48,tocIndex:13},{value:"[[fill]align][sign][symbol][0][width][,][.precision][~][type]",paraId:48,tocIndex:13},{value:"fill",paraId:49,tocIndex:13},{value:": 填充字符，默认是空格",paraId:49,tocIndex:13},{value:"align",paraId:49,tocIndex:13},{value:": 对齐方式（",paraId:49,tocIndex:13},{value:"<",paraId:49,tocIndex:13},{value:" 左对齐，",paraId:49,tocIndex:13},{value:"^",paraId:49,tocIndex:13},{value:" 居中，",paraId:49,tocIndex:13},{value:">",paraId:49,tocIndex:13},{value:" 右对齐，",paraId:49,tocIndex:13},{value:"=",paraId:49,tocIndex:13},{value:" 数字右对齐）",paraId:49,tocIndex:13},{value:"sign",paraId:49,tocIndex:13},{value:": 符号显示（",paraId:49,tocIndex:13},{value:"+",paraId:49,tocIndex:13},{value:" 总是显示符号，",paraId:49,tocIndex:13},{value:"-",paraId:49,tocIndex:13},{value:" 只显示负号，",paraId:49,tocIndex:13},{value:"(",paraId:49,tocIndex:13},{value:" 负数用括号）",paraId:49,tocIndex:13},{value:"symbol",paraId:49,tocIndex:13},{value:": 前缀符号（",paraId:49,tocIndex:13},{value:"#",paraId:49,tocIndex:13},{value:" 进制前缀，",paraId:49,tocIndex:13},{value:"$",paraId:49,tocIndex:13},{value:" 货币符号）",paraId:49,tocIndex:13},{value:"0",paraId:49,tocIndex:13},{value:": 零填充",paraId:49,tocIndex:13},{value:"width",paraId:49,tocIndex:13},{value:": 最小宽度",paraId:49,tocIndex:13},{value:",",paraId:49,tocIndex:13},{value:": 千分位分隔符",paraId:49,tocIndex:13},{value:"precision",paraId:49,tocIndex:13},{value:": 精度",paraId:49,tocIndex:13},{value:"~",paraId:49,tocIndex:13},{value:": 去除尾随零",paraId:49,tocIndex:13},{value:"type",paraId:49,tocIndex:13},{value:": 格式类型",paraId:49,tocIndex:13},{value:"类型",paraId:50,tocIndex:14},{value:"描述",paraId:50,tocIndex:14},{value:"示例",paraId:50,tocIndex:14},{value:"d",paraId:50,tocIndex:14},{value:"整数",paraId:50,tocIndex:14},{value:"42",paraId:50,tocIndex:14},{value:"f",paraId:50,tocIndex:14},{value:"固定小数位",paraId:50,tocIndex:14},{value:"42.00",paraId:50,tocIndex:14},{value:"e",paraId:50,tocIndex:14},{value:"科学计数法",paraId:50,tocIndex:14},{value:"4.2e+1",paraId:50,tocIndex:14},{value:"s",paraId:50,tocIndex:14},{value:"SI 前缀",paraId:50,tocIndex:14},{value:"42k",paraId:50,tocIndex:14},{value:", ",paraId:50,tocIndex:14},{value:"1.5M",paraId:50,tocIndex:14},{value:"%",paraId:50,tocIndex:14},{value:"百分比",paraId:50,tocIndex:14},{value:"42%",paraId:50,tocIndex:14},{value:"$",paraId:50,tocIndex:14},{value:"货币格式",paraId:50,tocIndex:14},{value:"$42.00",paraId:50,tocIndex:14},{value:"r",paraId:50,tocIndex:14},{value:"有效数字",paraId:50,tocIndex:14},{value:"42.0",paraId:50,tocIndex:14},{value:"g",paraId:50,tocIndex:14},{value:"通用格式",paraId:50,tocIndex:14},{value:"42",paraId:50,tocIndex:14},{value:"// 常用数值格式\n'.2f'; // 固定2位小数：23.45\n'.0f'; // 整数：23\n'.1%'; // 百分比：23.4%\n',.0f'; // 千分位：1,234,567\n\n// SI前缀格式（推荐用于大数值）\n's'; // SI前缀：1.2M, 3.4k\n'.1s'; // 1位小数SI：1.2M, 3.4k\n'~s'; // 去尾随零SI：1.2M, 3k\n'.0s'; // 整数SI：1M, 3k\n\n// 货币格式\n'$,.2f'; // 美元：$1,234.56\n'$.2s'; // 美元SI：$1.23M\n\n// 科学计数法\n'.2e'; // 科学计数：1.23e+6\n'.2g'; // 通用格式：1.2e+6 或 1234\n\n// 进制格式\n'd'; // 十进制整数：1234\n'x'; // 十六进制：4d2\n'o'; // 八进制：2322\n'b'; // 二进制：10011010010\n",paraId:51,tocIndex:15},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  width: 600,\n  height: 400,\n  data: [\n    { 类型: '收入', 值: 1234567.89 },\n    { 类型: '支出', 值: -987654.32 },\n    { 类型: '利润', 值: 246913.57 },\n    { 类型: '投资', 值: 5000000 },\n  ],\n  encode: { x: '类型', y: '值', color: '类型' },\n  axis: {\n    y: {\n      title: '金额（元）',\n      // 使用 d3-format 格式化字符串\n      labelFormatter: ',.2s', // 千分位 + 两位有效数字 + SI前缀\n    },\n    x: {\n      title: '业务类型',\n    },\n  },\n});\nchart.render();\n",paraId:52,tocIndex:16},{value:"除了使用 d3-format 字符串，你也可以传入自定义函数：",paraId:53,tocIndex:17},{value:"axis: {\n  y: {\n    labelFormatter: (value, index, data) => {\n      // 自定义逻辑\n      if (value >= 1000000) {\n        return (value / 1000000).toFixed(1) + 'M';\n      } else if (value >= 1000) {\n        return (value / 1000).toFixed(1) + 'K';\n      }\n      return value.toString();\n    },\n  },\n}\n",paraId:54,tocIndex:17},{value:"labelTransform",paraId:55,tocIndex:18},{value:" 是 G 提供的在局部坐标系下进行变换的快捷方式，同时与 ",paraId:55,tocIndex:18},{value:"CSS Transform",paraId:55,tocIndex:18},{value:" 保持一致。",paraId:55,tocIndex:18},{value:"下面的例子展示了如何配置 ",paraId:56,tocIndex:18},{value:"labelTransform",paraId:56,tocIndex:18},{value:" 来让 x 轴刻度值旋转 90 度。",paraId:56,tocIndex:18},{value:"({\n  axis: {\n    x: {\n      title: 'x 轴标题',\n      labelFontSize: 12,\n      labelFormatter: (d) => `2025-${d}`,\n      labelTransform: 'rotate(90)',\n    },\n  },\n});\n",paraId:57,tocIndex:18},{value:"transform",paraId:58,tocIndex:19},{value:" 为了避免刻度标签重叠或超出显示范围，系统提供了多种优化方式，包括缩略、旋转、隐藏和换行。\n这些功能可通过两种方式配置：",paraId:58,tocIndex:19},{value:"transform",paraId:59,tocIndex:19},{value:" 数组（多策略组合）",paraId:59,tocIndex:19},{value:"labelAutoXXX",paraId:59,tocIndex:19},{value:" 系列属性（单策略快捷配置）",paraId:59,tocIndex:19},{value:"推荐",paraId:59,tocIndex:19},{value:"两者的核心功能完全一致，区别在于使用场景和配置方式。",paraId:60,tocIndex:19},{value:"transform",paraId:61,tocIndex:19},{value:" 数组（多策略组合）",paraId:61,tocIndex:19},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  width: 500,\n  height: 500,\n  data: [\n    { id: 1, label: 'x 轴刻度值标签1', value: 200 },\n    { id: 3, label: 'x 轴刻度值标签2', value: 300 },\n    { id: 4, label: 'x 轴刻度值标签3', value: 400 },\n    { id: 5, label: 'x 轴刻度值标签4', value: 500 },\n    { id: 6, label: 'x 轴刻度值标签5', value: 600 },\n    { id: 7, label: 'x 轴刻度值标签6', value: 700 },\n    { id: 8, label: 'x 轴刻度值标签999', value: 800 },\n  ],\n  encode: { x: 'label', y: 'value' },\n  axis: {\n    y: {\n      title: 'y 轴标题',\n    },\n    x: {\n      title: 'x 轴标题',\n      labelFontSize: 12,\n      labelFormatter: (d) => `2025-${d}`,\n      size: 100,\n      transform: [\n        // 缩略\n        {\n          type: 'ellipsis',\n          suffix: '..', // 缩略符（默认...）\n          minLength: 8, // 少于8字符不缩略\n          maxLength: 12, // 超过12字符强制缩略\n        },\n        //  换行\n        {\n          type: 'wrap',\n          wordWrapWidth: 80, // 单行最大宽度为 80px\n          maxLines: 2, // 最多显示两行\n          recoverWhenFailed: true, // 如果换行失败恢复到默认布局\n        },\n        // 旋转\n        {\n          type: 'rotate',\n          optionalAngles: [0, 45, 90], // 尝试旋转 0 度、45 度、90 度\n          recoverWhenFailed: true, // 如果旋转后无法解决问题，恢复到默认角度\n        },\n        // 隐藏\n        {\n          type: 'hide',\n          keepHeader: true, // 保留第一个刻度值\n          keepTail: true, // 保留最后一个刻度值\n        },\n      ],\n    },\n  },\n});\nchart.render();\n",paraId:62,tocIndex:19},{value:"labelTransform",paraId:63,tocIndex:19},{value:" 是 G 提供的在局部坐标系下进行变换的快捷方式，同时与 ",paraId:63,tocIndex:19},{value:"CSS Transform",paraId:63,tocIndex:19},{value:" 保持一致。",paraId:63,tocIndex:19},{value:"下面的例子展示了如何配置 ",paraId:64,tocIndex:19},{value:"labelTransform",paraId:64,tocIndex:19},{value:" 来让 x 轴刻度值旋转 90 度。",paraId:64,tocIndex:19},{value:"({\n  axis: {\n    x: {\n      title: 'x 轴标题',\n      labelFontSize: 12,\n      labelFormatter: (d) => `2025-${d}`,\n      labelTransform: 'rotate(90)',\n    },\n  },\n});\n",paraId:65,tocIndex:19},{value:"使用 ",paraId:66,tocIndex:19},{value:"labelAutoHide",paraId:66,tocIndex:19},{value:"、",paraId:66,tocIndex:19},{value:"labelAutoRotate",paraId:66,tocIndex:19},{value:"、",paraId:66,tocIndex:19},{value:"labelAutoEllipsis",paraId:66,tocIndex:19},{value:"、",paraId:66,tocIndex:19},{value:"labelAutoWrap",paraId:66,tocIndex:19},{value:"、 属性（需设置 ",paraId:66,tocIndex:19},{value:"size",paraId:66,tocIndex:19},{value:"）",paraId:66,tocIndex:19},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  width: 500,\n  height: 500,\n  data: [\n    { id: 1, label: 'x 轴刻度值标签1', value: 200 },\n    { id: 3, label: 'x 轴刻度值标签2', value: 300 },\n    { id: 4, label: 'x 轴刻度值标签3', value: 400 },\n    { id: 5, label: 'x 轴刻度值标签4', value: 500 },\n    { id: 6, label: 'x 轴刻度值标签5', value: 600 },\n    { id: 7, label: 'x 轴刻度值标签6', value: 700 },\n    { id: 8, label: 'x 轴刻度值标签999', value: 800 },\n  ],\n  encode: { x: 'label', y: 'value' },\n  axis: {\n    y: {\n      title: 'y 轴标题',\n    },\n    x: {\n      title: 'x 轴标题',\n      labelFontSize: 12,\n      labelFormatter: (d) => `2025-${d}`,\n\n      size: 100, // 必须设置 size\n      labelAutoEllipsis: {\n        suffix: '..',\n        minLength: 8,\n        maxLength: 12,\n      },\n      labelAutoWrap: {\n        wordWrapWidth: 80,\n        maxLines: 2,\n        recoverWhenFailed: true,\n      },\n      labelAutoRotate: {\n        optionalAngles: [0, 45, 90], // 尝试旋转 0 度、45 度、90 度\n        recoverWhenFailed: true, // 如果旋转后无法解决问题，恢复到默认角度\n      },\n      labelAutoHide: {\n        keepHeader: true, // 保留第一个刻度值\n        keepTail: true, // 保留最后一个刻度值\n      },\n    },\n  },\n});\nchart.render();\n",paraId:67,tocIndex:19},{value:"export interface Transform {\n  /** 避免刻度值重叠时的额外边距 */\n  margin?: number[];\n}\n\nexport interface EllipsisOverlapCfg extends Transform {\n  type: 'ellipsis';\n  /** 缩略替换字符，默认为 ... */\n  suffix?: string;\n  /** 文本短于该长度时不再缩略 */\n  minLength: string | number;\n  /** 文本短于该长度时一定会进行缩略 */\n  maxLength?: string | number;\n  /** 每次缩略执行步长 */\n  step?: string | number;\n}\n\nexport interface RotateOverlapCfg extends Transform {\n  type: 'rotate';\n  /** 可选的旋转角度值 */\n  optionalAngles: number[];\n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */\n  recoverWhenFailed?: boolean;\n}\n\nexport interface HideOverlapCfg extends Transform {\n  type: 'hide';\n  /** 保证第一个刻度值不被隐藏 */\n  keepHeader?: boolean;\n  /** 保证最后一个刻度值不被隐藏 */\n  keepTail?: boolean;\n}\n\nexport interface WrapOverlapCfg extends Transform {\n  type: 'wrap';\n  /** 单行最大宽度 */\n  wordWrapWidth?: number;\n  /** 最大行数 */\n  maxLines?: number;\n  recoverWhenFailed?: boolean;\n}\n",paraId:68,tocIndex:19},{value:"在不同坐标系下网格线会具有不同的样式",paraId:69,tocIndex:20},{value:"场景标签",paraId:70,tocIndex:20},{value:"样式",paraId:70,tocIndex:20},{value:"直角坐标系",paraId:70,tocIndex:20},{value:"极坐标系",paraId:70,tocIndex:20},{value:"极坐标系",paraId:70,tocIndex:20},{value:"极坐标系",paraId:70,tocIndex:20},{value:" ",paraId:70,tocIndex:20},{value:"雷达图",paraId:70,tocIndex:20},{value:"属性",paraId:71,tocIndex:20},{value:"描述",paraId:71,tocIndex:20},{value:"类型",paraId:71,tocIndex:20},{value:"默认值",paraId:71,tocIndex:20},{value:"必须",paraId:71,tocIndex:20},{value:"grid",paraId:71,tocIndex:20},{value:"是否显示网格线",paraId:71,tocIndex:20},{value:"boolean",paraId:71,tocIndex:20},{value:"false",paraId:71,tocIndex:20},{value:"gridFilter",paraId:71,tocIndex:20},{value:"网格线过滤",paraId:71,tocIndex:20},{value:"(datum, index, data)=> boolean",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"gridLength",paraId:71,tocIndex:20},{value:"网格线长度。一般情况下，不需要用户配置。",paraId:71,tocIndex:20},{value:"number",paraId:71,tocIndex:20},{value:" | ",paraId:71,tocIndex:20},{value:"(datum, index, data)=> number",paraId:71,tocIndex:20},{value:"0",paraId:71,tocIndex:20},{value:"gridAreaFill",paraId:71,tocIndex:20},{value:"网格线区域填充色",paraId:71,tocIndex:20},{value:"string",paraId:71,tocIndex:20},{value:" | ",paraId:71,tocIndex:20},{value:"string[]",paraId:71,tocIndex:20},{value:"| ",paraId:71,tocIndex:20},{value:"(datum, index, data)=> string",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"gridStroke",paraId:71,tocIndex:20},{value:"网格线描边颜色",paraId:71,tocIndex:20},{value:"string",paraId:71,tocIndex:20},{value:" | ",paraId:71,tocIndex:20},{value:"(datum, index, data)=> string",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"gridStrokeOpacity",paraId:71,tocIndex:20},{value:"网格线描边透明度",paraId:71,tocIndex:20},{value:"number",paraId:71,tocIndex:20},{value:" | ",paraId:71,tocIndex:20},{value:"(datum, index, data)=> number",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"gridLineWidth",paraId:71,tocIndex:20},{value:"网格线描边宽度",paraId:71,tocIndex:20},{value:"number",paraId:71,tocIndex:20},{value:" | ",paraId:71,tocIndex:20},{value:"(datum, index, data)=> number",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"gridLineDash",paraId:71,tocIndex:20},{value:"网格线描边虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:71,tocIndex:20},{value:"[number,number]",paraId:71,tocIndex:20},{value:" | ",paraId:71,tocIndex:20},{value:"(datum, index, data)=> [number,number]",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"gridOpacity",paraId:71,tocIndex:20},{value:"网格线整体透明度",paraId:71,tocIndex:20},{value:"number",paraId:71,tocIndex:20},{value:" | ",paraId:71,tocIndex:20},{value:"(datum, index, data)=> number",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"gridShadowColor",paraId:71,tocIndex:20},{value:"网格线阴影颜色",paraId:71,tocIndex:20},{value:"string",paraId:71,tocIndex:20},{value:" | ",paraId:71,tocIndex:20},{value:"(datum, index, data)=> string",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"gridShadowBlur",paraId:71,tocIndex:20},{value:"网格线阴影高斯模糊系数",paraId:71,tocIndex:20},{value:"number",paraId:71,tocIndex:20},{value:" | ",paraId:71,tocIndex:20},{value:"(datum, index, data)=> number",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"gridShadowOffsetX",paraId:71,tocIndex:20},{value:"网格线阴影水平偏移量",paraId:71,tocIndex:20},{value:"number",paraId:71,tocIndex:20},{value:" | ",paraId:71,tocIndex:20},{value:"(datum, index, data)=> number",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"gridShadowOffsetY",paraId:71,tocIndex:20},{value:"网格线阴影垂直偏移量",paraId:71,tocIndex:20},{value:"number",paraId:71,tocIndex:20},{value:" | ",paraId:71,tocIndex:20},{value:"(datum, index, data)=> number",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"gridCursor",paraId:71,tocIndex:20},{value:"网格线鼠标样式",paraId:71,tocIndex:20},{value:"string",paraId:71,tocIndex:20},{value:" | ",paraId:71,tocIndex:20},{value:"(datum, index, data)=> string",paraId:71,tocIndex:20},{value:"default",paraId:71,tocIndex:20},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  width: 600,\n  height: 400,\n  data: [\n    { 月份: '1月', 销售额: 2000 },\n    { 月份: '2月', 销售额: 1500 },\n    { 月份: '3月', 销售额: 3000 },\n    { 月份: '4月', 销售额: 2500 },\n    { 月份: '5月', 销售额: 4000 },\n    { 月份: '6月', 销售额: 3500 },\n  ],\n  encode: { x: '月份', y: '销售额', color: '月份' },\n  axis: {\n    y: {\n      title: '销售额（万元）',\n      // 显示基础网格线\n      grid: true,\n      gridStroke: '#e6e6e6', // 网格线颜色\n      gridLineWidth: 2, // 网格线宽度\n      gridStrokeOpacity: 0.7, // 网格线透明度\n      gridLineDash: [0, 0],\n    },\n    x: {\n      title: '月份',\n      // x 轴通常不需要网格线\n      grid: false,\n    },\n  },\n});\nchart.render();\n",paraId:72,tocIndex:22},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  width: 600,\n  height: 400,\n  data: [\n    { 时间: '9:00', 温度: 18 },\n    { 时间: '12:00', 温度: 24 },\n    { 时间: '15:00', 温度: 28 },\n    { 时间: '18:00', 温度: 22 },\n    { 时间: '21:00', 温度: 20 },\n  ],\n  encode: { x: '时间', y: '温度' },\n  style: { stroke: '#5B8FF9', lineWidth: 2 },\n  axis: {\n    y: {\n      title: '温度（°C）',\n      grid: true,\n      gridStroke: '#d9d9d9',\n      gridLineDash: [4, 4], // 虚线配置：4px 实线，4px 空白\n      gridStrokeOpacity: 0.8,\n    },\n    x: {\n      title: '时间',\n      grid: true,\n      gridStroke: '#f0f0f0',\n      gridLineDash: [2, 2], // 更细的虚线\n      gridStrokeOpacity: 0.6,\n    },\n  },\n});\nchart.render();\n",paraId:73,tocIndex:23},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  width: 600,\n  height: 400,\n  data: [\n    { 产品: 'A产品', 销量: 120 },\n    { 产品: 'B产品', 销量: 200 },\n    { 产品: 'C产品', 销量: 150 },\n    { 产品: 'D产品', 销量: 300 },\n    { 产品: 'E产品', 销量: 250 },\n  ],\n  encode: { x: '产品', y: '销量', color: '产品' },\n  axis: {\n    y: {\n      title: '销量（件）',\n      grid: true,\n      gridStroke: '#e8e8e8',\n      gridLineWidth: 1,\n      gridAreaFill: ['#fafafa', '#ffffff'], // 交替填充颜色\n      gridOpacity: 0.9,\n    },\n    x: {\n      title: '产品类型',\n      grid: false,\n    },\n  },\n});\nchart.render();\n",paraId:74,tocIndex:24},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  width: 600,\n  height: 400,\n  data: [\n    { 季度: 'Q1', 收入: 100, 支出: 80 },\n    { 季度: 'Q2', 收入: 120, 支出: 90 },\n    { 季度: 'Q3', 收入: 150, 支出: 110 },\n    { 季度: 'Q4', 收入: 180, 支出: 140 },\n  ],\n  encode: { x: '季度', y: '收入' },\n  style: { fillOpacity: 0.6 },\n  axis: {\n    y: {\n      title: '金额（万元）',\n      grid: true,\n      gridStroke: '#cccccc',\n      gridLineWidth: 1,\n      // 只显示偶数索引的网格线\n      gridFilter: (datum, index) => index % 2 === 0,\n      gridStrokeOpacity: 0.8,\n    },\n    x: {\n      title: '季度',\n      grid: true,\n      gridStroke: '#e6e6e6',\n      gridLineDash: [3, 3],\n      gridStrokeOpacity: 0.5,\n    },\n  },\n});\nchart.render();\n",paraId:75,tocIndex:25},{value:"{\n  breaks: [\n    {\n      start: 5000,\n      end: 50000,\n      gap: '3%',\n    }\n  ]\n}\n",paraId:76,tocIndex:26},{value:"属性",paraId:77,tocIndex:26},{value:"描述",paraId:77,tocIndex:26},{value:"类型",paraId:77,tocIndex:26},{value:"默认值",paraId:77,tocIndex:26},{value:"必须",paraId:77,tocIndex:26},{value:"start",paraId:77,tocIndex:26},{value:"断轴开始值",paraId:77,tocIndex:26},{value:"number",paraId:77,tocIndex:26},{value:"-",paraId:77,tocIndex:26},{value:"end",paraId:77,tocIndex:26},{value:"断轴结束值",paraId:77,tocIndex:26},{value:"number",paraId:77,tocIndex:26},{value:"-",paraId:77,tocIndex:26},{value:"gap",paraId:77,tocIndex:26},{value:"断轴主轴方向区间占比，支持 0 ~ 1 和百分比两种类型",paraId:77,tocIndex:26},{value:"number",paraId:77,tocIndex:26},{value:" | string",paraId:77,tocIndex:26},{value:"-",paraId:77,tocIndex:26},{value:"vertices",paraId:77,tocIndex:26},{value:"断轴起伏顶点数",paraId:77,tocIndex:26},{value:"number",paraId:77,tocIndex:26},{value:"50",paraId:77,tocIndex:26},{value:"verticeOffset",paraId:77,tocIndex:26},{value:"断轴振幅",paraId:77,tocIndex:26},{value:"number",paraId:77,tocIndex:26},{value:"3",paraId:77,tocIndex:26},{value:"compress",paraId:77,tocIndex:26},{value:"断轴压缩方式，",paraId:77,tocIndex:26},{value:"middle",paraId:77,tocIndex:26},{value:": 居中压缩，",paraId:77,tocIndex:26},{value:"start",paraId:77,tocIndex:26},{value:": 起始值附近压缩，",paraId:77,tocIndex:26},{value:"end",paraId:77,tocIndex:26},{value:"：结束值附近压缩",paraId:77,tocIndex:26},{value:"middle",paraId:77,tocIndex:26},{value:" | ",paraId:77,tocIndex:26},{value:"start",paraId:77,tocIndex:26},{value:" | ",paraId:77,tocIndex:26},{value:"end",paraId:77,tocIndex:26},{value:"middle",paraId:77,tocIndex:26},{value:"stroke",paraId:77,tocIndex:26},{value:"断轴描边色",paraId:77,tocIndex:26},{value:"string",paraId:77,tocIndex:26},{value:"#fff",paraId:77,tocIndex:26},{value:"fill",paraId:77,tocIndex:26},{value:"断轴填充色",paraId:77,tocIndex:26},{value:"string",paraId:77,tocIndex:26},{value:"#aaa",paraId:77,tocIndex:26},{value:"lineDash",paraId:77,tocIndex:26},{value:"断轴描边虚线样式",paraId:77,tocIndex:26},{value:"string",paraId:77,tocIndex:26},{value:"2 2",paraId:77,tocIndex:26},{value:"更多配置参考 canvas 基本绘图属性。",paraId:78,tocIndex:26},{value:"支持设置更新时的动画效果",paraId:79,tocIndex:27},{value:"属性",paraId:80,tocIndex:27},{value:"描述",paraId:80,tocIndex:27},{value:"类型",paraId:80,tocIndex:27},{value:"默认值",paraId:80,tocIndex:27},{value:"必须",paraId:80,tocIndex:27},{value:"animate",paraId:80,tocIndex:27},{value:"是否开启动画",paraId:80,tocIndex:27},{value:"boolean",paraId:80,tocIndex:27},{value:" | ",paraId:80,tocIndex:27},{value:"EffectTiming",paraId:80,tocIndex:27},{value:"-",paraId:80,tocIndex:27},{value:"EffectTiming 支持配置的属性如下：",paraId:81,tocIndex:27},{value:"属性",paraId:82,tocIndex:27},{value:"描述",paraId:82,tocIndex:27},{value:"类型",paraId:82,tocIndex:27},{value:"默认值",paraId:82,tocIndex:27},{value:"必须",paraId:82,tocIndex:27},{value:"delay",paraId:82,tocIndex:27},{value:"延迟执行时间 (ms)",paraId:82,tocIndex:27},{value:"number",paraId:82,tocIndex:27},{value:"-",paraId:82,tocIndex:27},{value:"duration",paraId:82,tocIndex:27},{value:"动画持续时间 (ms)",paraId:82,tocIndex:27},{value:"number",paraId:82,tocIndex:27},{value:"-",paraId:82,tocIndex:27},{value:"easing",paraId:82,tocIndex:27},{value:"动画的缓动函数",paraId:82,tocIndex:27},{value:"Easing",paraId:82,tocIndex:27},{value:"-",paraId:82,tocIndex:27},{value:"endDelay",paraId:82,tocIndex:27},{value:"延迟执行时间 (ms)",paraId:82,tocIndex:27},{value:"number",paraId:82,tocIndex:27},{value:"-",paraId:82,tocIndex:27},{value:"fill",paraId:82,tocIndex:27},{value:"动画处于非运行状态时的展示效果",paraId:82,tocIndex:27},{value:"Fill",paraId:82,tocIndex:27},{value:"-",paraId:82,tocIndex:27},{value:"坐标轴(axis)组件本身没有专属的事件类型。",paraId:83,tocIndex:28},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval', // 设置图表类型为柱状图\n  marginTop: 40, // 设置图表的上边距像素\n  data: [\n    { id: 1, label: 'x 轴刻度值标签1', value: 200 },\n    { id: 3, label: 'x 轴刻度值标签2', value: 300 },\n    { id: 4, label: 'x 轴刻度值标签3', value: 400 },\n    { id: 5, label: 'x 轴刻度值标签4', value: 500 },\n    { id: 6, label: 'x 轴刻度值标签5', value: 600 },\n    { id: 7, label: 'x 轴刻度值标签6', value: 700 },\n  ],\n  // 设置数据编码\n  encode: { x: 'label', y: 'value' },\n  axis: {\n    // 配置 x 轴\n    x: {\n      position: 'bottom', // 设置坐标轴的位置\n\n      // 这部分是轴标题的配置\n      title: 'x 轴标题', // 轴标题内容\n      titleFontWeight: 500, // 标题文字字体粗细\n      titleSpacing: 15, // 标题到坐标轴的距离\n      titlePosition: 'bottom', // 标题相对坐标轴的位置\n      titleFontSize: 14, // 标题文字大小\n      titleFill: '#333', // 标题文字填充色\n\n      // 这部分是网格线的配置\n      grid: true, // 是否显示网格线\n      gridLineWidth: 2, // 网格线描边宽度\n      gridStroke: '#f0f0f0', // 网格线描边颜色\n      gridStrokeOpacity: 0.8, // 网格线描边透明度\n      gridLineDash: [3, 3], // 网格线描边虚线配置\n      gridOpacity: 0.9, // 网格线整体透明度\n      gridAreaFill: ['#fafafa', '#ffffff'], // 网格线区域填充色\n      gridFilter: (_, i) => i % 2 === 0, // 网格线过滤\n\n      // 这部分是轴线的配置\n      line: true, // 是否显示轴线\n      lineLineWidth: 5, // 轴线描边宽度\n      lineStroke: '#f50', // 轴线描边颜色\n      arrow: true, // 是否显示箭头\n      lineArrowOffset: 8, // 箭头偏移长度\n\n      // 这部分是轴刻度的配置\n      tick: true, // 是否显示刻度\n      tickCount: 8, // 设置推荐生成的刻度数量\n      tickLineWidth: 5, // 刻度线描边宽度\n      tickLength: 10, // 刻度线长度\n      tickStroke: '#3366ff', // 刻度线描边颜色\n      tickDirection: 'positive', // 刻度朝向\n      tickOpacity: 0.9, // 刻度线整体透明度\n\n      // 这部分是轴刻度值标签的配置\n      label: true, // 是否显示刻度值\n      labelFontSize: 12, // 刻度标签文字大小\n      labelFill: '#009900', // 刻度标签文字填充色\n      labelFontWeight: 500, // 刻度标签文字字体粗细\n      labelFontFamily: 'Arial', // 刻度标签文字字体\n      labelTextAlign: 'center', // 刻度标签文字水平对齐方式\n      labelTextBaseline: 'middle', // 刻度标签文字垂直基线\n      labelAlign: 'horizontal', // 刻度值对齐方式\n      labelDirection: 'positive', // 刻度值位于轴线的位置\n      labelSpacing: 5, // 刻度值到其对应刻度的间距\n      labelFillOpacity: 0.9, // 刻度标签文字填充透明度\n      labelStroke: '#ffffff', // 刻度标签文字描边颜色\n      labelStrokeOpacity: 0.5, // 刻度标签文字描边透明度\n      labelLineWidth: 1, // 刻度标签文字描边宽度\n      labelOpacity: 1, // 刻度标签文字整体透明度\n      labelDx: 2, // 刻度标签文字水平偏移量\n      labelDy: 0, // 刻度标签文字垂直偏移量\n      labelCursor: 'pointer', // 刻度标签文字鼠标样式\n    },\n    // 配置 y 轴\n    y: {\n      position: 'left', // 设置坐标轴的位置\n\n      // 这部分是轴标题的配置\n      title: 'y 轴标题', // 轴标题内容\n      titleFontWeight: 500, // 标题文字字体粗细\n      titleSpacing: 20, // 标题到坐标轴的距离\n      titlePosition: 'left', // 标题相对坐标轴的位置\n      titleFontSize: 14, // 标题文字大小\n      titleFill: '#333', // 标题文字填充色\n\n      // 这部分是网格线的配置\n      grid: true, // 是否显示网格线\n      gridLineWidth: 2, // 网格线描边宽度\n      gridStroke: '#e6e6e6', // 网格线描边颜色\n      gridStrokeOpacity: 0.7, // 网格线描边透明度\n      gridLineDash: [5, 5], // 网格线描边虚线配置\n      gridOpacity: 0.8, // 网格线整体透明度\n\n      // 这部分是轴线的配置\n      line: true, // 是否显示轴线\n      lineLineWidth: 5, // 轴线描边宽度\n      lineStroke: '#f50', // 轴线描边颜色\n      arrow: false, // 是否显示箭头\n      lineOpacity: 1, // 轴线整体透明度\n\n      // 这部分是轴刻度的配置\n      tick: true, // 是否显示刻度\n      tickCount: 8, // 设置推荐生成的刻度数量\n      tickLineWidth: 5, // 刻度线描边宽度\n      tickLength: 10, // 刻度线长度\n      tickStroke: '#3366ff', // 刻度线描边颜色\n      tickDirection: 'negative', // 刻度朝向\n      tickStrokeOpacity: 0.8, // 刻度线描边透明度\n\n      // 这部分是轴刻度值标签的配置\n      label: true, // 是否显示刻度值\n      labelFontSize: 12, // 刻度标签文字大小\n      labelFill: '#009900', // 刻度标签文字填充色\n      labelFontWeight: 500, // 刻度标签文字字体粗细\n      labelFontFamily: 'Helvetica', // 刻度标签文字字体\n      labelTextAlign: 'right', // 刻度标签文字水平对齐方式\n      labelTextBaseline: 'middle', // 刻度标签文字垂直基线\n      labelAlign: 'perpendicular', // 刻度值对齐方式\n      labelSpacing: 8, // 刻度值到其对应刻度的间距\n      labelLineHeight: 1.2, // 刻度标签文字行高\n      labelFormatter: (d) => `${d}万`, // 刻度值格式化\n    },\n  },\n});\n\nchart.render();\n",paraId:84,tocIndex:29},{value:"更多的案例，可以查看 ",paraId:85,tocIndex:29},{value:"图表示例 - 坐标轴",paraId:86,tocIndex:29},{value:" 页面。",paraId:85,tocIndex:29},{value:"金融数据需要精确的价格显示和简洁的时间轴，常用于股票价格、基金净值等场景：",paraId:87,tocIndex:31},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  width: 600,\n  height: 400,\n  data: [\n    { date: '2024-01-01', price: 23.45, volume: 120000 },\n    { date: '2024-01-02', price: 24.12, volume: 150000 },\n    { date: '2024-01-03', price: 23.89, volume: 98000 },\n    { date: '2024-01-04', price: 25.3, volume: 200000 },\n    { date: '2024-01-05', price: 24.78, volume: 175000 },\n    { date: '2024-01-08', price: 26.15, volume: 220000 },\n  ],\n  encode: { x: 'date', y: 'price' },\n  style: { stroke: '#ff6b35', lineWidth: 2 },\n  axis: {\n    x: {\n      title: '交易日期',\n      // 时间格式化需要自定义函数\n      labelFormatter: (d) => {\n        const date = new Date(d);\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const day = String(date.getDate()).padStart(2, '0');\n        return `${month}-${day}`;\n      },\n      labelFontSize: 11,\n    },\n    y: {\n      title: '股价（¥）',\n      // 使用 d3-format：固定2位小数\n      labelFormatter: '.2f', // 相当于 d.toFixed(2)\n      grid: true,\n      gridStroke: '#f5f5f5',\n      tickCount: 6,\n    },\n  },\n});\nchart.render();\n",paraId:88,tocIndex:31},{value:"D3-format vs 自定义函数对比：",paraId:89,tocIndex:31},{value:"// ✅ D3-format（推荐用于标准数值格式）\nlabelFormatter: '.2f'; // 固定2位小数：23.45\nlabelFormatter: '.1%'; // 百分比：23.4%\nlabelFormatter: '$,.2f'; // 货币格式：$1,234.56\n\n// ✅ 自定义函数（复杂逻辑、特殊需求）\nlabelFormatter: (d) => `¥${d.toFixed(2)}`; // 人民币符号\nlabelFormatter: (d) => {\n  /* 复杂业务逻辑 */\n};\n",paraId:90,tocIndex:31},{value:"销售数据通常涉及大金额，需要自动转换为合适的单位显示。对比 d3-format 和自定义函数的应用场景：",paraId:91,tocIndex:32},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  width: 600,\n  height: 400,\n  data: [\n    { category: '电子产品', sales: 8500000 },\n    { category: '服装鞋帽', sales: 12300000 },\n    { category: '家居用品', sales: 6800000 },\n    { category: '美妆护肤', sales: 15600000 },\n    { category: '食品饮料', sales: 9200000 },\n  ],\n  encode: { x: 'category', y: 'sales', color: 'category' },\n  axis: {\n    x: {\n      title: '商品类别',\n      labelFontSize: 12,\n    },\n    y: {\n      title: '销售额',\n      // 使用 d3-format：SI前缀格式，自动K/M单位\n      labelFormatter: '~s', // 8.5M, 12.3M, 6.8M, 15.6M, 9.2M\n      grid: true,\n      gridStroke: '#e8e8e8',\n      tickCount: 5,\n    },\n  },\n});\nchart.render();\n",paraId:92,tocIndex:33},{value:"import { Chart } from '@antv/g2';\n\nconst chart2 = new Chart({\n  container: 'container',\n});\n\nchart2.options({\n  type: 'interval',\n  width: 600,\n  height: 400,\n  data: [\n    { category: '电子产品', sales: 8500000 },\n    { category: '服装鞋帽', sales: 12300000 },\n    { category: '家居用品', sales: 6800000 },\n    { category: '美妆护肤', sales: 15600000 },\n    { category: '食品饮料', sales: 9200000 },\n  ],\n  encode: { x: 'category', y: 'sales', color: 'category' },\n  axis: {\n    x: {\n      title: '商品类别',\n      labelFontSize: 12,\n    },\n    y: {\n      title: '销售额',\n      // 自定义中文单位格式\n      labelFormatter: (value) => {\n        if (value >= 100000000) {\n          return `${(value / 100000000).toFixed(1)}亿`;\n        } else if (value >= 10000) {\n          return `${(value / 10000).toFixed(0)}万`;\n        } else {\n          return value.toString();\n        }\n      },\n      grid: true,\n      gridStroke: '#e8e8e8',\n      tickCount: 5,\n    },\n  },\n});\nchart2.render();\n",paraId:93,tocIndex:34},{value:"用户数据通常使用国际标准的 K、M 单位，D3-format 提供了简洁的实现方式：",paraId:94,tocIndex:35},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  width: 600,\n  height: 400,\n  data: [\n    { quarter: '2023 Q1', users: 125000 },\n    { quarter: '2023 Q2', users: 158000 },\n    { quarter: '2023 Q3', users: 234000 },\n    { quarter: '2023 Q4', users: 312000 },\n    { quarter: '2024 Q1', users: 425000 },\n    { quarter: '2024 Q2', users: 586000 },\n  ],\n  encode: { x: 'quarter', y: 'users' },\n  style: {\n    fill: 'linear-gradient(270deg, #667eea 0%, #764ba2 100%)',\n    fillOpacity: 0.6,\n  },\n  axis: {\n    x: {\n      title: '季度',\n      // 时间字符串处理需要自定义函数\n      labelFormatter: (d) => {\n        return d.replace('2023 ', '').replace('2024 ', '24');\n      },\n      labelFontSize: 11,\n    },\n    y: {\n      title: '用户数量',\n      // 使用 d3-format：国际标准K/M格式\n      labelFormatter: '.0s', // 125k, 158k, 234k, 312k, 425k, 586k\n      grid: true,\n      gridStroke: '#f0f0f0',\n      gridLineDash: [3, 3],\n      tickCount: 6,\n    },\n  },\n});\nchart.render();\n",paraId:95,tocIndex:35},{value:"在实际业务场景中，经常会遇到坐标轴刻度值过长导致重叠、超出显示范围的问题。G2 提供了四种核心解决方案，各有其最佳适用场景：",paraId:96,tocIndex:36},{value:"方案",paraId:97,tocIndex:37},{value:"适用场景",paraId:97,tocIndex:37},{value:"优点",paraId:97,tocIndex:37},{value:"缺点",paraId:97,tocIndex:37},{value:"推荐业务场景",paraId:97,tocIndex:37},{value:"缩略(ellipsis)",paraId:97,tocIndex:37},{value:"文本长度差异大、用户可通过其他方式获取完整信息",paraId:97,tocIndex:37},{value:"保持整洁、不改变布局",paraId:97,tocIndex:37},{value:"信息丢失",paraId:97,tocIndex:37},{value:"产品名称、用户 ID、文件名",paraId:97,tocIndex:37},{value:"旋转(rotate)",paraId:97,tocIndex:37},{value:"文本长度相近、空间充足",paraId:97,tocIndex:37},{value:"保留完整信息、视觉清晰",paraId:97,tocIndex:37},{value:"需要更多垂直空间、阅读体验稍差",paraId:97,tocIndex:37},{value:"日期时间、地区名称、分类标签",paraId:97,tocIndex:37},{value:"换行(wrap)",paraId:97,tocIndex:37},{value:"中等长度文本、有充足垂直空间",paraId:97,tocIndex:37},{value:"保留完整信息、易阅读",paraId:97,tocIndex:37},{value:"占用更多垂直空间",paraId:97,tocIndex:37},{value:"产品描述、部门名称",paraId:97,tocIndex:37},{value:"隐藏(hide)",paraId:97,tocIndex:37},{value:"标签密度过高、主要关注趋势",paraId:97,tocIndex:37},{value:"解决重叠、保持关键节点",paraId:97,tocIndex:37},{value:"信息缺失",paraId:97,tocIndex:37},{value:"时间序列、大数据量可视化",paraId:97,tocIndex:37},{value:'电商平台需要展示热销产品排行，产品名称长短不一，从"iPhone"到"Apple iPhone 15 Pro Max 1TB 深空黑色"',paraId:98,tocIndex:38},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  width: 650, // 适当减小宽度以触发缩略\n  data: [\n    { product: 'iPhone 15 Pro Max', sales: 2500 },\n    { product: 'Samsung Galaxy S24 Ultra 512GB 幻夜黑色版本', sales: 1800 },\n    {\n      product: 'Apple MacBook Pro 16英寸 M3 Max芯片 1TB 深空灰色',\n      sales: 1200,\n    },\n    { product: 'Sony WH-1000XM5 无线降噪头戴式耳机 午夜黑色', sales: 3200 },\n    { product: '小米14 Ultra 摄影套装版 16GB+1TB 白色限量版', sales: 2100 },\n    { product: 'iPad Pro 12.9英寸 M2芯片 1TB WiFi版 深空灰色', sales: 1600 },\n    { product: 'MacBook Air 15英寸 M2芯片 512GB 星光色', sales: 1400 },\n    { product: 'AirPods Pro 第二代 主动降噪无线耳机', sales: 2800 },\n  ],\n  encode: { x: 'product', y: 'sales', color: 'product' },\n  axis: {\n    x: {\n      title: '热销产品',\n      labelFontSize: 11,\n      // 缩略方案：适合产品名称场景\n      size: 100,\n      transform: [\n        {\n          type: 'ellipsis',\n          suffix: '...', // 缩略符号\n        },\n      ],\n    },\n    y: {\n      title: '销量（台）',\n      labelFormatter: ',.0f', // 千分位格式\n      grid: true,\n      gridStroke: '#f0f0f0',\n    },\n  },\n  tooltip: {\n    // 悬浮时显示完整产品名称\n    title: (d) => d.product,\n    items: [{ field: 'sales', name: '销量', formatter: ',.0f' }],\n  },\n});\nchart.render();\n",paraId:99,tocIndex:38},{value:"特点",paraId:100,tocIndex:38},{value:"保持图表整洁，避免产品名称重叠",paraId:101,tocIndex:38},{value:"用户可通过 tooltip 查看完整产品名称",paraId:101,tocIndex:38},{value:"适合产品名称长短差异很大的场景",paraId:101,tocIndex:38},{value:'需要展示每小时用户活跃度，时间标签需要显示"YYYY-MM-DD HH:mm"格式',paraId:102,tocIndex:39},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  width: 600, // 减小宽度以触发旋转\n  marginBottom: 30, // 预留旋转的空间\n  data: [\n    { time: '2024-01-15 08:00', activeUsers: 1200 },\n    { time: '2024-01-15 09:00', activeUsers: 1800 },\n    { time: '2024-01-15 10:00', activeUsers: 2800 },\n    { time: '2024-01-15 11:00', activeUsers: 3200 },\n    { time: '2024-01-15 12:00', activeUsers: 4500 },\n    { time: '2024-01-15 13:00', activeUsers: 4200 },\n    { time: '2024-01-15 14:00', activeUsers: 3200 },\n    { time: '2024-01-15 15:00', activeUsers: 3600 },\n    { time: '2024-01-15 16:00', activeUsers: 3800 },\n    { time: '2024-01-15 17:00', activeUsers: 4800 },\n    { time: '2024-01-15 18:00', activeUsers: 5200 },\n    { time: '2024-01-15 19:00', activeUsers: 4800 },\n    { time: '2024-01-15 20:00', activeUsers: 4100 },\n    { time: '2024-01-15 21:00', activeUsers: 3500 },\n    { time: '2024-01-15 22:00', activeUsers: 2600 },\n    { time: '2024-01-15 23:00', activeUsers: 1900 },\n  ],\n  encode: { x: 'time', y: 'activeUsers' },\n  style: { stroke: '#5B8FF9', lineWidth: 2 },\n  axis: {\n    x: {\n      title: '时间',\n      labelFontSize: 10,\n      // 旋转方案：适合时间标签\n      size: 100,\n      transform: [\n        {\n          type: 'rotate',\n          optionalAngles: [0, 30, 45, 60, 90], // 尝试多个角度\n          recoverWhenFailed: true, // 失败时恢复默认角度\n        },\n      ],\n    },\n    y: {\n      title: '活跃用户数',\n      labelFormatter: ',.0f',\n      grid: true,\n      gridStroke: '#e6e6e6',\n      gridLineDash: [3, 3],\n    },\n  },\n});\nchart.render();\n",paraId:103,tocIndex:39},{value:"特点",paraId:104,tocIndex:39},{value:"保留完整时间信息，便于精确分析",paraId:105,tocIndex:39},{value:"自动选择最佳旋转角度避免重叠",paraId:105,tocIndex:39},{value:"适合时间序列、地区名称等固定格式标签",paraId:105,tocIndex:39},{value:"展示各部门季度绩效，部门名称中等长度，需要完整显示",paraId:106,tocIndex:40},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  width: 800,\n  data: [\n    { department: '市场营销部门', score: 85 },\n    { department: '产品研发中心', score: 92 },\n    { department: '客户服务部', score: 78 },\n    { department: '人力资源管理部', score: 81 },\n    { department: '财务审计部门', score: 89 },\n    { department: '战略规划中心', score: 87 },\n  ],\n  encode: { x: 'department', y: 'score', color: 'department' },\n  axis: {\n    x: {\n      title: '部门',\n      labelFontSize: 12,\n      // 换行方案：适合部门名称\n      size: 100,\n      transform: [\n        {\n          type: 'wrap',\n          wordWrapWidth: 60, // 单行最大60像素\n          maxLines: 2, // 最多显示2行\n          recoverWhenFailed: true, // 换行失败时恢复默认布局\n        },\n      ],\n    },\n    y: {\n      title: '绩效得分',\n      grid: true,\n      gridStroke: '#f5f5f5',\n      domain: [0, 100],\n    },\n  },\n});\nchart.render();\n",paraId:107,tocIndex:40},{value:"特点",paraId:108,tocIndex:40},{value:"保留完整部门名称，便于准确识别",paraId:109,tocIndex:40},{value:"换行布局保持良好的可读性",paraId:109,tocIndex:40},{value:"适合中等长度的标签文本",paraId:109,tocIndex:40},{value:"展示连续交易日股价趋势，数据点密集，重点关注趋势而非具体日期",paraId:110,tocIndex:41},{value:"import { Chart } from '@antv/g2';\n\n// 生成模拟股价数据\nconst generateStockData = () => {\n  const data = [];\n  let price = 100;\n  const startDate = new Date('2024-01-01');\n\n  for (let i = 0; i < 90; i++) {\n    // 增加到90个数据点\n    const currentDate = new Date(startDate);\n    currentDate.setDate(startDate.getDate() + i);\n\n    // 随机价格波动\n    price += (Math.random() - 0.5) * 4;\n    price = Math.max(80, Math.min(120, price)); // 限制在80-120范围\n\n    data.push({\n      date: currentDate.toISOString().split('T')[0],\n      price: Math.round(price * 100) / 100,\n    });\n  }\n  return data;\n};\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  width: 700, // 减小宽度增加密度\n  marginRight: 30, // 预留右侧保留最后一个刻度值的宽度\n  data: generateStockData(),\n  encode: { x: 'date', y: 'price' },\n  style: { stroke: '#722ed1', lineWidth: 1.5 },\n  axis: {\n    x: {\n      title: '交易日期',\n      labelFontSize: 9,\n      // 隐藏方案：适合密集数据\n      size: 100,\n      transform: [\n        {\n          type: 'hide',\n          keepHeader: true, // 保留第一个日期\n          keepTail: true, // 保留最后一个日期\n        },\n      ],\n    },\n    y: {\n      title: '股价（元）',\n      labelFormatter: '.2f',\n      grid: true,\n      gridStroke: '#f0f0f0',\n      gridLineDash: [2, 2],\n    },\n  },\n});\nchart.render();\n",paraId:111,tocIndex:41},{value:"特点",paraId:112,tocIndex:41},{value:"解决密集数据点的标签重叠问题",paraId:113,tocIndex:41},{value:"保留首尾关键时间节点",paraId:113,tocIndex:41},{value:"重点突出数据趋势而非具体数值",paraId:113,tocIndex:41},{value:"对于简单场景，推荐使用 ",paraId:114,tocIndex:42},{value:"labelAutoXXX",paraId:114,tocIndex:42},{value:" 系列属性：",paraId:114,tocIndex:42},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  width: 650, // 减小宽度以触发变换效果\n  marginBottom: 50, // 为多重变换预留空间\n  marginRight: 100,\n  data: [\n    { region: '北京市朝阳区CBD核心商务区金融中心', revenue: 8500 },\n    { region: '上海市浦东新区陆家嘴金融贸易区总部基地', revenue: 9200 },\n    { region: '深圳市南山区高新技术产业园区', revenue: 7800 },\n    { region: '广州市天河区珠江新城国际商务中心', revenue: 6900 },\n    { region: '杭州市西湖区互联网创新产业园区', revenue: 5600 },\n    { region: '成都市高新区软件产业园科技创新区', revenue: 4800 },\n    { region: '苏州市工业园区生物纳米科技园', revenue: 5200 },\n    { region: '南京市江宁区未来科技城创新基地', revenue: 4500 },\n  ],\n  encode: { x: 'region', y: 'revenue', color: 'region' },\n  axis: {\n    x: {\n      title: '业务区域',\n      labelFontSize: 10,\n      size: 100,\n      // 快捷配置，等价于 transform 数组\n      labelAutoEllipsis: true, // 启用自动缩略\n      labelAutoRotate: true, // 启用自动旋转\n      labelAutoHide: true, // 启用自动隐藏\n      labelAutoWrap: true, // 启用自动换行\n    },\n    y: {\n      title: '营收（万元）',\n      labelFormatter: ',.0f',\n      grid: true,\n      gridStroke: '#e8e8e8',\n    },\n  },\n});\nchart.render();\n",paraId:115,tocIndex:42}]},2382:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(41552);const t=[{value:"G2 中",paraId:0,tocIndex:0},{value:"数据标签（Label）",paraId:0,tocIndex:0},{value:" 是给图表添加标注的手段之一，对当前的一组数据进行的内容标注。包括数据点、连接线、文本数值等元素，根据不同的图表类型选择使用。通过简洁的文字说明，减少误解，使图表更易解读，并且强调关键数据或趋势，引导关注重要信息。",paraId:0,tocIndex:0},{value:"包括连接线、文本数值元素，根据不同的图表类型选择使用。",paraId:1,tocIndex:1},{value:"其中，饼图、环形图、玫瑰图等可以用连接线元素连接 label 文本元素和 mark 图形",paraId:2,tocIndex:1},{value:"chart.options({\n  type: 'interval',\n  labels: [\n    { text: 'genre' }, // 指定绑定的字段\n    {\n      text: 'sold', // 指定绑定的字段\n      fill: '#fff', // 指定样式\n    },\n  ],\n});\n",paraId:3,tocIndex:3},{value:"可在 ",paraId:4,tocIndex:4},{value:"view",paraId:4,tocIndex:4},{value:" 配置 ",paraId:4,tocIndex:4},{value:"labelTransform",paraId:4,tocIndex:4},{value:" 声明标签转化",paraId:4,tocIndex:4},{value:"API 方式",paraId:5,tocIndex:4},{value:"// 第一种方式\nchart\n  .labelTransform({ type: 'overlapHide' })\n  .labelTransform({ type: 'contrastReverse' });\n\n// 第二种方式\nchart.labelTransform([{ type: 'overlapHide' }, { type: 'contrastReverse' }]);\n",paraId:6,tocIndex:4},{value:"spec 配置",paraId:7,tocIndex:4},{value:"({\n  type: 'view',\n  labelTransform: [{ type: 'overlapHide' }, { type: 'contrastReverse' }],\n});\n",paraId:8,tocIndex:4},{value:"每一个标记都可以有多个标签，下面是一个简单的例子：",paraId:9,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  height: 300,\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold' },\n  labels: [\n    { text: 'genre', style: { dy: -15 } },\n    { text: 'sold', style: { fill: '#fff', dy: 5 } },\n  ],\n});\n\nchart.render();\n",paraId:10,tocIndex:5},{value:"属性",paraId:11,tocIndex:6},{value:"描述",paraId:11,tocIndex:6},{value:"类型",paraId:11,tocIndex:6},{value:"默认值",paraId:11,tocIndex:6},{value:"必选",paraId:11,tocIndex:6},{value:"dx",paraId:11,tocIndex:6},{value:"标签文字在水平方向的偏移量，也可通过 style.dx 配置",paraId:11,tocIndex:6},{value:"number",paraId:11,tocIndex:6},{value:"0",paraId:11,tocIndex:6},{value:"dy",paraId:11,tocIndex:6},{value:"标签文字在垂直方向的偏移量，也可通过 style.dy 配置",paraId:11,tocIndex:6},{value:"number",paraId:11,tocIndex:6},{value:"0",paraId:11,tocIndex:6},{value:"offset",paraId:11,tocIndex:6},{value:"标签偏移距离，也可通过 style.offset 配置",paraId:11,tocIndex:6},{value:"number",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"text",paraId:11,tocIndex:6},{value:"标签数据通道，类似 mark 标记的 ",paraId:11,tocIndex:6},{value:"x",paraId:11,tocIndex:6},{value:" 通道，对应到文本元素上，可以用回调自定义 ",paraId:11,tocIndex:6},{value:"string",paraId:11,tocIndex:6},{value:" 文本.",paraId:11,tocIndex:6},{value:"string | Function",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"innerHTML",paraId:11,tocIndex:6},{value:"和 ",paraId:11,tocIndex:6},{value:"text",paraId:11,tocIndex:6},{value:" 配置类似，同时配置 ",paraId:11,tocIndex:6},{value:"text",paraId:11,tocIndex:6},{value:" 会失效，可以用回调自定义 ",paraId:11,tocIndex:6},{value:"string",paraId:11,tocIndex:6},{value:" 文本或 ",paraId:11,tocIndex:6},{value:"HTMElement",paraId:11,tocIndex:6},{value:" 复杂 html",paraId:11,tocIndex:6},{value:"string | Function",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"formatter",paraId:11,tocIndex:6},{value:"标签文本格式化",paraId:11,tocIndex:6},{value:"string",paraId:11,tocIndex:6},{value:" | ",paraId:11,tocIndex:6},{value:"Function<string>",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"render",paraId:11,tocIndex:6},{value:"和 ",paraId:11,tocIndex:6},{value:"innerHTML",paraId:11,tocIndex:6},{value:" 配置类型一致",paraId:11,tocIndex:6},{value:"string | Function",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"selector",paraId:11,tocIndex:6},{value:"标签选择器，可以保留或隐藏标签。",paraId:11,tocIndex:6},{value:"selector",paraId:12,tocIndex:6},{value:"{type: 'cartesian' }",paraId:11,tocIndex:6},{value:"transform",paraId:11,tocIndex:6},{value:"标签转换，用来优化标签的展示，解决标签重叠、颜色不明显的问题",paraId:11,tocIndex:6},{value:"transform",paraId:13,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"position",paraId:11,tocIndex:6},{value:"标签相对图形位置，并非标签方向。",paraId:11,tocIndex:6},{value:"position",paraId:14,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"style",paraId:11,tocIndex:6},{value:"标签样式配置",paraId:11,tocIndex:6},{value:"style",paraId:15,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"background",paraId:11,tocIndex:6},{value:"是否展示背景颜色",paraId:11,tocIndex:6},{value:"boolean",paraId:11,tocIndex:6},{value:"详见",paraId:11,tocIndex:6},{value:"background",paraId:16,tocIndex:6},{value:"connector",paraId:11,tocIndex:6},{value:"是否展示连接线 在 饼图和环形图等非笛卡尔坐标系下使用",paraId:11,tocIndex:6},{value:"boolean",paraId:11,tocIndex:6},{value:"详见",paraId:11,tocIndex:6},{value:"connector",paraId:17,tocIndex:6},{value:"label",paraId:18,tocIndex:7},{value:" 标签文本元素内容配置",paraId:18,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  height: 340,\n  insetTop: 20,\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold' },\n  labels: [\n    { text: 'sold', style: { dy: -30 } }, // text 映射 字段 sold\n    { text: ({ genre }) => genre, style: { dy: -20 } }, // text 自定义 返回 string 类型\n    {\n      innerHTML: 'genre',\n      dx: 20,\n      dy: 10,\n      style: { fill: '#fff', color: '#333', fontSize: 10 },\n    }, // innerHTML 映射 字段 genre 注: 背景色有时会黑色，需要配置 fill 背景色. color 文本颜色 HTMElement 本身也可以配置样式\n    {\n      // innerHTML 自定义 返回 HTMElement 类型数据\n      innerHTML: ({ genre, sold }) =>\n        `<div style=\"padding:0 4px;border-radius: 10px;background: #f5f5f5;border: 2px solid #5ea9e6;font-size: 11px;\">${genre}:${sold}</div>`,\n      dx: 10,\n      dy: 50,\n      style: { fill: 'rgba(0,0,0,0)', color: '#333' },\n    },\n  ],\n});\n\nchart.render();\n",paraId:19,tocIndex:7},{value:"同时，页可以尝试 用 ",paraId:20,tocIndex:7},{value:"render",paraId:20,tocIndex:7},{value:" 配置 HTMLElement, 传参和 innerHTML 有区别，但返回时一致的。",paraId:20,tocIndex:7},{value:"type RenderFunc = (text: string, datum: object, index: number, {channel: Record<string, Channel>}) => String | HTMLElement;\n",paraId:21,tocIndex:7},{value:"label",paraId:22,tocIndex:8},{value:" 标签选择器",paraId:22,tocIndex:8},{value:"对于一个图形对应多个数据项的标记来说，我们可以通过 ",paraId:23,tocIndex:8},{value:"selector",paraId:23,tocIndex:8},{value:" 去选择需要保留的标记。目前支持的值如下：",paraId:23,tocIndex:8},{value:"first",paraId:24,tocIndex:8},{value:" - 第一个",paraId:24,tocIndex:8},{value:"last",paraId:24,tocIndex:8},{value:" - 最后一个",paraId:24,tocIndex:8},{value:"function",paraId:24,tocIndex:8},{value:" - 自定义选择器",paraId:24,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  height: 300,\n  insetLeft: 40,\n  insetRight: 40,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/indices.json',\n  },\n  encode: { x: (d) => new Date(d.Date), y: 'Close', color: 'Symbol' },\n  scale: { y: { type: 'log' } },\n  axis: { y: { title: '↑ Change in price (%)' } },\n  labels: [\n    {\n      text: ({ Symbol }) => `first ${Symbol}`,\n      selector: 'first', // 在 mark 图形中第一个\n      fontSize: 13,\n      style: { fill: 'blue', fontWeight: 600, dx: -50 },\n    },\n    {\n      text: ({ Symbol }) => `last ${Symbol}`,\n      selector: 'last', // 在 mark 图形中最后一个\n      fontSize: 13,\n      style: { fill: 'red', fontWeight: 600 },\n    },\n    {\n      text: ({ Symbol }) => `custom ${Symbol}`,\n      selector: (v) => {\n        // 自定义筛选, 返回所有 label 标签数组，内含坐标等信息。需要返回这些信息，可以进行过滤处理。\n        return v.filter(({ bounds }) => {\n          const bound = bounds[0];\n          return (\n            // 筛选在图表中坐标在 x:[200,200.5] y:[200,350] 的 label 标签\n            bound[0] > 200 &&\n            bound[0] < 200.5 &&\n            bound[1] > 200 &&\n            bound[1] < 350\n          );\n        });\n      },\n      fontSize: 13,\n      style: { fill: '#ac1ce6', fontWeight: 600 },\n    },\n  ],\n});\n\nchart.render();\n",paraId:25,tocIndex:8},{value:"label",paraId:26,tocIndex:9},{value:" 标签转换",paraId:26,tocIndex:9},{value:"当标签的展示不符合预期的时候，比如重叠、颜色不明显，我们可以使用",paraId:27,tocIndex:9},{value:"标签转换（Label Transform）",paraId:27,tocIndex:9},{value:" 来优化标签的展示。并且，可以直接配置到视图层级 ",paraId:27,tocIndex:9},{value:"view",paraId:27,tocIndex:9},{value:"，对整个视图的标签做处理。",paraId:27,tocIndex:9},{value:"当前支持的标签转化如下：",paraId:28,tocIndex:9},{value:"type",paraId:29,tocIndex:9},{value:"描述",paraId:29,tocIndex:9},{value:"overlapDodgeY",paraId:29,tocIndex:9},{value:"对位置碰撞的标签在 y 方向上进行调整，防止标签重叠",paraId:29,tocIndex:9},{value:"contrastReverse",paraId:29,tocIndex:9},{value:"标签颜色在图形背景上对比度低的情况下，从指定色板选择一个对比度最优的颜色",paraId:29,tocIndex:9},{value:"overflowStroke",paraId:29,tocIndex:9},{value:"标签在溢出情况下，从指定色板选择一个对比度最优的颜色进行描边",paraId:29,tocIndex:9},{value:"overflowHide",paraId:29,tocIndex:9},{value:"对于标签在图形上放置不下的时候，隐藏标签",paraId:29,tocIndex:9},{value:"overlapHide",paraId:29,tocIndex:9},{value:"对位置碰撞的标签进行隐藏，默认保留前一个，隐藏后一个",paraId:29,tocIndex:9},{value:"exceedAdjust",paraId:29,tocIndex:9},{value:"会自动对标签做溢出检测和矫正，即当标签超出指定区域时，会对标签自动做反方向的位移",paraId:29,tocIndex:9},{value:"不同的转化类型，针对不同的标签问题情况。所以明确每个 ",paraId:30,tocIndex:9},{value:"transform",paraId:30,tocIndex:9},{value:" 标签转化的区别十分有必要。",paraId:30,tocIndex:9},{value:"针对标签拥挤重叠导致的混乱情况，会对重叠的标签在 y 方向做调整。",paraId:31,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  height: 300,\n  insetLeft: 40,\n  insetRight: 40,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/cb99c4ab-e0a3-4c76-9586-fe7fa2ff1a8c.csv',\n  },\n  encode: {\n    x: (d) => new Date(d.date).getFullYear(),\n    y: 'price',\n    color: 'symbol',\n  },\n  transform: [{ type: 'groupX', y: 'mean' }],\n  labels: [{ text: 'price' }],\n});\nchart.render();\n",paraId:32,tocIndex:11},{value:"overlapDodgeY",paraId:33},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  height: 300,\n  insetLeft: 40,\n  insetRight: 40,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/cb99c4ab-e0a3-4c76-9586-fe7fa2ff1a8c.csv',\n  },\n  encode: {\n    x: (d) => new Date(d.date).getFullYear(),\n    y: 'price',\n    color: 'symbol',\n  },\n  transform: [{ type: 'groupX', y: 'mean' }],\n  labels: [{ text: 'price', transform: [{ type: 'overlapDodgeY' }] }],\n});\n\nchart.render();\n",paraId:34,tocIndex:12},{value:"属性",paraId:35,tocIndex:12},{value:"描述",paraId:35,tocIndex:12},{value:"类型",paraId:35,tocIndex:12},{value:"默认值",paraId:35,tocIndex:12},{value:"必选",paraId:35,tocIndex:12},{value:"maxIterations",paraId:35,tocIndex:12},{value:"位置调整的最大迭代次数。",paraId:35,tocIndex:12},{value:"number",paraId:35,tocIndex:12},{value:"10",paraId:35,tocIndex:12},{value:"padding",paraId:35,tocIndex:12},{value:"期望调整之后，标签和标签之间的间距",paraId:35,tocIndex:12},{value:"number",paraId:35,tocIndex:12},{value:"1",paraId:35,tocIndex:12},{value:"maxError",paraId:35,tocIndex:12},{value:"最大误差，指实际间距和期望间距 padding 之间的误差",paraId:35,tocIndex:12},{value:"number",paraId:35,tocIndex:12},{value:"0.1",paraId:35,tocIndex:12},{value:"contrastReverse",paraId:36,tocIndex:13},{value:" 标签颜色在图形背景上",paraId:36,tocIndex:13},{value:"颜色对比度",paraId:36,tocIndex:13},{value:"低的情况下，从指定色板选择一个对比度最优的颜色。针对图形颜色和 ",paraId:36,tocIndex:13},{value:"label",paraId:36,tocIndex:13},{value:" 标签颜色相近而显示不明显的问题，多数出现在多颜色的柱状图(mark inteval)颜色多变不能用或手动更改 ",paraId:36,tocIndex:13},{value:"label",paraId:36,tocIndex:13},{value:" 颜色困难的时候。",paraId:36,tocIndex:13},{value:"当部分图形颜色和标签颜色接近时，会出现看不清的问题。",paraId:37,tocIndex:14},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  height: 300,\n  data: [\n    { genre: 'Sports', sold: 40 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  scale: {\n    color: { range: ['#ff0000', '#f0d2fc', '#2b00ff', '#ff8000', '#064501'] },\n  },\n  labels: [{ text: 'genre' }],\n});\n\nchart.render();\n",paraId:38,tocIndex:14},{value:"contrastReverse",paraId:33},{value:"对不明显的 ",paraId:39,tocIndex:15},{value:"label",paraId:39,tocIndex:15},{value:" 标签 颜色进行优化",paraId:39,tocIndex:15},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  height: 300,\n  data: [\n    { genre: 'Sports', sold: 40 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  scale: {\n    color: { range: ['#ff0000', '#f0d2fc', '#2b00ff', '#ff8000', '#064501'] },\n  },\n  labels: [{ text: 'genre', transform: [{ type: 'contrastReverse' }] }],\n});\n\nchart.render();\n",paraId:40,tocIndex:15},{value:"属性",paraId:41,tocIndex:15},{value:"描述",paraId:41,tocIndex:15},{value:"类型",paraId:41,tocIndex:15},{value:"默认值",paraId:41,tocIndex:15},{value:"必选",paraId:41,tocIndex:15},{value:"threshold",paraId:41,tocIndex:15},{value:"标签和背景图形的颜色对比度阈值，超过阈值才会推荐颜色提升对比度",paraId:41,tocIndex:15},{value:"Type",paraId:41,tocIndex:15},{value:"4.5",paraId:41,tocIndex:15},{value:"palette",paraId:41,tocIndex:15},{value:"对比度提升算法中，备选的颜色色板",paraId:41,tocIndex:15},{value:"Type",paraId:41,tocIndex:15},{value:"['#000', '#fff']",paraId:41,tocIndex:15},{value:"overflowStroke",paraId:42,tocIndex:16},{value:" 从指定色板选择一个与标签颜色相比，对比度最优的颜色进行描边。类似字幕黑底白字原理，针对 ",paraId:42,tocIndex:16},{value:"label",paraId:42,tocIndex:16},{value:" 溢出元素后可读性变差问题。",paraId:42,tocIndex:16},{value:"下面示例中 label 颜色与背景柱形区分明显，但溢出部分可读性又非常差。",paraId:43,tocIndex:17},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  width: 200,\n  type: 'interval',\n  scale: {\n    color: { range: ['#222'] },\n  },\n  autoFit: true,\n  data: [\n    { letter: 'A', frequency: 8167 },\n    { letter: 'B', frequency: 1492 },\n    { letter: 'C', frequency: 2782 },\n    { letter: 'D', frequency: 4253 },\n    { letter: 'E', frequency: 2702 },\n    { letter: 'H', frequency: 6094 },\n    { letter: 'I', frequency: 2288 },\n  ],\n  encode: { x: 'letter', y: 'frequency', color: () => 'bar' },\n  labels: [\n    {\n      text: 'frequency',\n      transform: [\n        {\n          type: 'contrastReverse',\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:44,tocIndex:17},{value:"overflowStroke",paraId:33},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  width: 200,\n  type: 'interval',\n  scale: {\n    color: { range: ['#222'] },\n  },\n  autoFit: true,\n  data: [\n    { letter: 'A', frequency: 8167 },\n    { letter: 'B', frequency: 1492 },\n    { letter: 'C', frequency: 2782 },\n    { letter: 'D', frequency: 4253 },\n    { letter: 'E', frequency: 2702 },\n    { letter: 'H', frequency: 6094 },\n    { letter: 'I', frequency: 2288 },\n  ],\n  encode: { x: 'letter', y: 'frequency', color: () => 'bar' },\n  labels: [\n    {\n      text: 'frequency',\n      transform: [\n        {\n          type: 'contrastReverse',\n        },\n        {\n          type: 'overflowStroke',\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:45,tocIndex:18},{value:"属性",paraId:46,tocIndex:18},{value:"描述",paraId:46,tocIndex:18},{value:"类型",paraId:46,tocIndex:18},{value:"默认值",paraId:46,tocIndex:18},{value:"必选",paraId:46,tocIndex:18},{value:"threshold",paraId:46,tocIndex:18},{value:"溢出阈值，越大越不越容易触发描边",paraId:46,tocIndex:18},{value:"number",paraId:46,tocIndex:18},{value:"2",paraId:46,tocIndex:18},{value:"palette",paraId:46,tocIndex:18},{value:"描边备选的颜色色板，会自动选择与标签颜色对比度最大的颜色",paraId:46,tocIndex:18},{value:"string[]",paraId:46,tocIndex:18},{value:"['#000', '#fff']",paraId:46,tocIndex:18},{value:"overflowHide",paraId:47,tocIndex:19},{value:" 对于标签在图形上放置不下的时候，隐藏标签。和 ",paraId:47,tocIndex:19},{value:"overlapDodgeY",paraId:47,tocIndex:19},{value:" 的区别在于：",paraId:47,tocIndex:19},{value:"overlapDodgeY",paraId:48,tocIndex:19},{value:" 针对 ",paraId:48,tocIndex:19},{value:"label",paraId:48,tocIndex:19},{value:" 标签和 ",paraId:48,tocIndex:19},{value:"label",paraId:48,tocIndex:19},{value:" 标签之间的，是多个 ",paraId:48,tocIndex:19},{value:"label",paraId:48,tocIndex:19},{value:" 标签重叠导致的模糊不清。",paraId:48,tocIndex:19},{value:"overflowHide",paraId:48,tocIndex:19},{value:" 针对 ",paraId:48,tocIndex:19},{value:"label",paraId:48,tocIndex:19},{value:" 标签和 ",paraId:48,tocIndex:19},{value:"mark",paraId:48,tocIndex:19},{value:" 图形之间的, 是多个小的图形导致的模糊不清.",paraId:48,tocIndex:19},{value:"当一个图有多个小的图形组成，如果每个小图形都映射有一个 ",paraId:49,tocIndex:20},{value:"label",paraId:49,tocIndex:20},{value:" 标签都话，就会出现重叠和图表不清的情况。比如旭日图、矩形树图等。",paraId:49,tocIndex:20},{value:"overflowHide",paraId:33},{value:"对 ",paraId:50,tocIndex:21},{value:"label",paraId:50,tocIndex:21},{value:" 标签超出对应的图形，进行隐藏。 注：部分特殊图表，内置了 ",paraId:50,tocIndex:21},{value:"label",paraId:50,tocIndex:21},{value:" 配置，可以在视图层面配置。",paraId:50,tocIndex:21},{value:"尝试一下：",paraId:51,tocIndex:21},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart\n  .sunburst()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  })\n  .encode('value', 'sum')\n  .label({\n    text: 'name',\n    transform: [\n      {\n        type: 'overflowHide',\n      },\n    ],\n  });\n\nchart.render();\n",paraId:52,tocIndex:21},{value:"overlapHide",paraId:53,tocIndex:22},{value:" 对位置碰撞的标签进行隐藏，默认保留前一个，隐藏后一个。和 ",paraId:53,tocIndex:22},{value:"overlapDodgeY",paraId:53,tocIndex:22},{value:" 的区别在于 ",paraId:53,tocIndex:22},{value:"overlapHide",paraId:53,tocIndex:22},{value:" 进行隐藏，而不是移动。",paraId:53,tocIndex:22},{value:"当部分图形颜色和标签颜色接近时，会出现看不清的问题。",paraId:54,tocIndex:23},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  height: 300,\n  insetLeft: 40,\n  insetRight: 40,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/cb99c4ab-e0a3-4c76-9586-fe7fa2ff1a8c.csv',\n  },\n  encode: {\n    x: (d) => new Date(d.date).getFullYear(),\n    y: 'price',\n    color: 'symbol',\n  },\n  transform: [{ type: 'groupX', y: 'mean' }],\n  labels: [{ text: 'price' }],\n});\nchart.render();\n",paraId:55,tocIndex:23},{value:"overlapHide",paraId:33},{value:"对不明显的 ",paraId:56,tocIndex:24},{value:"label",paraId:56,tocIndex:24},{value:" 标签 颜色进行优化",paraId:56,tocIndex:24},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  height: 300,\n  insetLeft: 40,\n  insetRight: 40,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/cb99c4ab-e0a3-4c76-9586-fe7fa2ff1a8c.csv',\n  },\n  encode: {\n    x: (d) => new Date(d.date).getFullYear(),\n    y: 'price',\n    color: 'symbol',\n  },\n  transform: [{ type: 'groupX', y: 'mean' }],\n  labels: [{ text: 'price', transform: [{ type: 'overlapHide' }] }],\n});\n\nchart.render();\n",paraId:57,tocIndex:24},{value:"exceedAdjust",paraId:58,tocIndex:25},{value:" 会自动对标签做溢出检测和矫正，即当标签超出指定区域时，会对标签自动做反方向的位移。",paraId:58,tocIndex:25},{value:"属性",paraId:59,tocIndex:26},{value:"说明",paraId:59,tocIndex:26},{value:"类型",paraId:59,tocIndex:26},{value:"默认值",paraId:59,tocIndex:26},{value:"bounds",paraId:59,tocIndex:26},{value:"指定检测边界的区域类型,",paraId:59,tocIndex:26},{value:"5.3.4",paraId:59,tocIndex:26},{value:" 开始支持",paraId:59,tocIndex:26},{value:"'view' | 'main'",paraId:59,tocIndex:26},{value:"'view'",paraId:59,tocIndex:26},{value:"offsetX",paraId:59,tocIndex:26},{value:"触发自动调整位置，位移时 X 轴偏移附加值",paraId:59,tocIndex:26},{value:"number",paraId:59,tocIndex:26},{value:"0",paraId:59,tocIndex:26},{value:"offsetY",paraId:59,tocIndex:26},{value:"触发自动调整位置，位移时 Y 轴偏移附加值",paraId:59,tocIndex:26},{value:"number",paraId:59,tocIndex:26},{value:"0",paraId:59,tocIndex:26},{value:"'view'",paraId:60,tocIndex:26},{value:"：检测标签是否超出整个视图区域（包含 margin 和 padding）",paraId:60,tocIndex:26},{value:"'main'",paraId:60,tocIndex:26},{value:"：检测标签是否超出主区域（不包含 margin 和 padding）",paraId:60,tocIndex:26},{value:"'offsetX'",paraId:60,tocIndex:26},{value:"：触发自动调整位置，位移时 X 轴偏移附加值，左侧边界向右偏移，右侧边界向左偏移",paraId:60,tocIndex:26},{value:"'offsetY'",paraId:60,tocIndex:26},{value:"：触发自动调整位置，位移时 Y 轴偏移附加值，上侧边界向下偏移，下侧边界向上偏移",paraId:60,tocIndex:26},{value:"label",paraId:61,tocIndex:27},{value:" 标签会超出图表，超出的部分会被截断。",paraId:61,tocIndex:27},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  height: 300,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/cb99c4ab-e0a3-4c76-9586-fe7fa2ff1a8c.csv',\n  },\n  encode: {\n    x: (d) => new Date(d.date).getFullYear(),\n    y: 'price',\n    color: 'symbol',\n  },\n  transform: [{ type: 'groupX', y: 'mean' }],\n  labels: [{ text: 'price' }],\n});\nchart.render();\n",paraId:62,tocIndex:27},{value:"exceedAdjust",paraId:33},{value:"对超出视图的 ",paraId:63,tocIndex:28},{value:"label",paraId:63,tocIndex:28},{value:" 标签进行方向优化，默认边界为视图区域（View Area）。",paraId:63,tocIndex:28},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  {\n    date: '2025-07-01',\n    price: 600,\n    showLabel: 1,\n    tooltip: '最低价 ￥600',\n  },\n  {\n    date: '2025-07-02',\n    price: 660,\n  },\n  {\n    date: '2025-07-03',\n    price: 778,\n  },\n  {\n    date: '2025-07-04',\n    price: 780,\n  },\n  {\n    date: '2025-07-05',\n    price: 810,\n  },\n  {\n    date: '2025-07-06',\n    price: 815,\n  },\n  {\n    date: '2025-07-07',\n    price: 778,\n  },\n  {\n    date: '2025-07-08',\n    price: 778,\n  },\n  {\n    date: '2025-07-09',\n    price: 778,\n  },\n  {\n    date: '2025-07-10',\n    price: 778,\n  },\n  {\n    date: '2025-07-11',\n    price: 890,\n  },\n  {\n    date: '2025-07-12',\n    price: 814,\n  },\n  {\n    date: '2025-07-13',\n    price: 890,\n  },\n  {\n    date: '2025-07-14',\n    price: 820,\n  },\n  {\n    date: '2025-07-15',\n    price: 790,\n  },\n  {\n    date: '2025-07-16',\n    price: 810,\n  },\n  {\n    date: '2025-07-17',\n    price: 790,\n  },\n  {\n    date: '2025-07-18',\n    price: 860,\n  },\n  {\n    date: '2025-07-19',\n    price: 780,\n  },\n  {\n    date: '2025-07-20',\n    price: 860,\n  },\n  {\n    date: '2025-07-21',\n    price: 860,\n  },\n  {\n    date: '2025-07-22',\n    price: 860,\n  },\n  {\n    date: '2025-07-23',\n    price: 860,\n  },\n  {\n    date: '2025-07-24',\n    price: 860,\n  },\n  {\n    date: '2025-07-25',\n    price: 860,\n  },\n  {\n    date: '2025-07-26',\n    price: 860,\n  },\n  {\n    date: '2025-07-27',\n    price: 860,\n  },\n  {\n    date: '2025-07-28',\n    price: 860,\n  },\n  {\n    date: '2025-07-29',\n    price: 860,\n  },\n  {\n    date: '2025-07-30',\n    price: 860,\n  },\n  {\n    date: '2025-07-31',\n    price: 860,\n  },\n  {\n    date: '2025-08-01',\n    price: 860,\n  },\n  {\n    date: '2025-08-02',\n    price: 860,\n  },\n  {\n    date: '2025-08-03',\n    price: 860,\n  },\n  {\n    date: '2025-08-04',\n    price: 860,\n  },\n  {\n    date: '2025-08-05',\n    price: 860,\n  },\n  {\n    date: '2025-08-06',\n    price: 860,\n  },\n  {\n    date: '2025-08-07',\n    price: 860,\n  },\n  {\n    date: '2025-08-08',\n    price: 860,\n  },\n  {\n    date: '2025-08-09',\n    price: 860,\n  },\n  {\n    date: '2025-08-10',\n    price: 860,\n  },\n  {\n    date: '2025-08-11',\n    price: 860,\n  },\n  {\n    date: '2025-08-12',\n    price: 860,\n  },\n  {\n    date: '2025-08-13',\n    price: 860,\n  },\n  {\n    date: '2025-08-14',\n    price: 860,\n  },\n  {\n    date: '2025-08-15',\n    price: 860,\n  },\n  {\n    date: '2025-08-16',\n    price: 740,\n  },\n  {\n    date: '2025-08-17',\n    price: 740,\n  },\n  {\n    date: '2025-08-18',\n    price: 740,\n  },\n  {\n    date: '2025-08-19',\n    price: 740,\n  },\n  {\n    date: '2025-08-20',\n    price: 740,\n  },\n  {\n    date: '2025-08-21',\n    price: 740,\n  },\n  {\n    date: '2025-08-22',\n    price: 740,\n  },\n  {\n    date: '2025-08-23',\n    price: 740,\n  },\n  {\n    date: '2025-08-24',\n    price: 740,\n  },\n  {\n    date: '2025-08-25',\n    price: 740,\n  },\n  {\n    date: '2025-08-26',\n    price: 740,\n  },\n  {\n    date: '2025-08-27',\n    price: 740,\n  },\n  {\n    date: '2025-08-28',\n    price: 740,\n  },\n  {\n    date: '2025-08-29',\n    price: 740,\n  },\n  {\n    date: '2025-08-30',\n    price: 740,\n  },\n  {\n    date: '2025-08-31',\n    price: 740,\n    showLabel: 1,\n    tooltip: '最高价 ￥740',\n  },\n];\nconst result = (data.filter((item) => item.showLabel) || []).map((item) => {\n  return {\n    type: 'lineX',\n    data: [item],\n    encode: {\n      x: 'date',\n      y: 'price',\n      color: 'linear-gradient(-90deg, #1677FF5B 0%,#1677FF 100%)',\n    },\n    style: {\n      lineWidth: 3,\n      lineDash: [3, 3],\n    },\n    labels: item.tooltip\n      ? [\n          {\n            text: 'tooltip',\n            fill: '#000000',\n            fillOpacity: 1,\n            fontSize: 22,\n            fontWeight: 500,\n            lineHeight: 30,\n            textAlign: 'center',\n            background: true,\n            backgroundFill: '#ffffff',\n            backgroundRadius: 24,\n            backgroundOpacity: 1,\n            backgroundPadding: [10, 16],\n            backgroundRadius: 10,\n            backgroundShadowColor: 'rgba(42,102,187,0.17)',\n            backgroundShadowBlur: 22,\n            transform: [{ type: 'exceedAdjust' }], // 默认 view 边界\n          },\n        ]\n      : [],\n  };\n});\n\nchart.options({\n  width: 654,\n  height: 310,\n  type: 'view',\n  margin: 20,\n  marginLeft: 10,\n  insetLeft: 24,\n  insetRight: 24,\n  insetBottom: 24,\n  animate: false,\n  axis: {\n    x: {\n      title: '',\n      size: 16,\n      line: true,\n      lineLineWidth: 1.5,\n      lineStroke: '#DEE3EB',\n      tick: false,\n      labelFontSize: 22,\n      labelFill: '#545C67',\n      labelFontWeight: 500,\n      labelDy: 8,\n      labelFormatter: (str) => {\n        if (/^\\d{4}-\\d{2}-\\d{2}$/.test(str)) {\n          const [year, month, day] = str.split('-');\n          return `${+month}月${+day}日`;\n        }\n        return str;\n      },\n      tickFilter: (d, index) => {\n        if (data[index]?.showLabel) {\n          return true;\n        }\n        return false;\n      },\n    },\n    y: {\n      title: '',\n      tick: false,\n      line: true,\n      lineStroke: '#DEE3EB',\n      lineLineWidth: 1.5,\n      labelDx: -8,\n      labelFontSize: 22,\n      labelFill: '#545C67',\n      labelFontWeight: 500,\n      grid: false,\n    },\n  },\n  scale: {\n    y: {\n      type: 'linear',\n      tickCount: 5,\n      domain: [600, 860],\n      nice: true,\n    },\n  },\n  children: [\n    {\n      type: 'area',\n      data: data,\n      encode: {\n        x: 'date',\n        y: 'price',\n        shape: 'smooth',\n      },\n      style: {\n        fill: `linear-gradient(-90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0) 50%,rgba(105, 168, 255, 0.61) 100%)`,\n      },\n    },\n    {\n      type: 'line',\n      data: data,\n      encode: {\n        x: 'date',\n        y: 'price',\n        shape: 'smooth',\n      },\n      style: {\n        stroke:\n          'linear-gradient(0deg, #91BDFF 0%, #1777FF 24.148%, #1777FF 75.172%,#1677FF32 100%)',\n        lineWidth: 6,\n      },\n    },\n    ...result,\n  ],\n});\n\nchart.render();\n",paraId:64,tocIndex:28},{value:"可以看出，设置区域为视图区域的时候，依然会遮挡坐标轴刻度值标签，此时需要修改 bounds 参数。",paraId:65,tocIndex:28},{value:"exceedAdjust",paraId:33},{value:"使用 ",paraId:66,tocIndex:29},{value:"bounds: 'main'",paraId:66,tocIndex:29},{value:" 配置，在标签超出主区域（不包含 margin 和 padding）时就会进行调整。",paraId:66,tocIndex:29},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  {\n    date: '2025-07-01',\n    price: 600,\n    showLabel: 1,\n    tooltip: '最低价 ￥600',\n  },\n  {\n    date: '2025-07-02',\n    price: 660,\n  },\n  {\n    date: '2025-07-03',\n    price: 778,\n  },\n  {\n    date: '2025-07-04',\n    price: 780,\n  },\n  {\n    date: '2025-07-05',\n    price: 810,\n  },\n  {\n    date: '2025-07-06',\n    price: 815,\n  },\n  {\n    date: '2025-07-07',\n    price: 778,\n  },\n  {\n    date: '2025-07-08',\n    price: 778,\n  },\n  {\n    date: '2025-07-09',\n    price: 778,\n  },\n  {\n    date: '2025-07-10',\n    price: 778,\n  },\n  {\n    date: '2025-07-11',\n    price: 890,\n  },\n  {\n    date: '2025-07-12',\n    price: 814,\n  },\n  {\n    date: '2025-07-13',\n    price: 890,\n  },\n  {\n    date: '2025-07-14',\n    price: 820,\n  },\n  {\n    date: '2025-07-15',\n    price: 790,\n  },\n  {\n    date: '2025-07-16',\n    price: 810,\n  },\n  {\n    date: '2025-07-17',\n    price: 790,\n  },\n  {\n    date: '2025-07-18',\n    price: 860,\n  },\n  {\n    date: '2025-07-19',\n    price: 780,\n  },\n  {\n    date: '2025-07-20',\n    price: 860,\n  },\n  {\n    date: '2025-07-21',\n    price: 860,\n  },\n  {\n    date: '2025-07-22',\n    price: 860,\n  },\n  {\n    date: '2025-07-23',\n    price: 860,\n  },\n  {\n    date: '2025-07-24',\n    price: 860,\n  },\n  {\n    date: '2025-07-25',\n    price: 860,\n  },\n  {\n    date: '2025-07-26',\n    price: 860,\n  },\n  {\n    date: '2025-07-27',\n    price: 860,\n  },\n  {\n    date: '2025-07-28',\n    price: 860,\n  },\n  {\n    date: '2025-07-29',\n    price: 860,\n  },\n  {\n    date: '2025-07-30',\n    price: 860,\n  },\n  {\n    date: '2025-07-31',\n    price: 860,\n  },\n  {\n    date: '2025-08-01',\n    price: 860,\n  },\n  {\n    date: '2025-08-02',\n    price: 860,\n  },\n  {\n    date: '2025-08-03',\n    price: 860,\n  },\n  {\n    date: '2025-08-04',\n    price: 860,\n  },\n  {\n    date: '2025-08-05',\n    price: 860,\n  },\n  {\n    date: '2025-08-06',\n    price: 860,\n  },\n  {\n    date: '2025-08-07',\n    price: 860,\n  },\n  {\n    date: '2025-08-08',\n    price: 860,\n  },\n  {\n    date: '2025-08-09',\n    price: 860,\n  },\n  {\n    date: '2025-08-10',\n    price: 860,\n  },\n  {\n    date: '2025-08-11',\n    price: 860,\n  },\n  {\n    date: '2025-08-12',\n    price: 860,\n  },\n  {\n    date: '2025-08-13',\n    price: 860,\n  },\n  {\n    date: '2025-08-14',\n    price: 860,\n  },\n  {\n    date: '2025-08-15',\n    price: 860,\n  },\n  {\n    date: '2025-08-16',\n    price: 740,\n  },\n  {\n    date: '2025-08-17',\n    price: 740,\n  },\n  {\n    date: '2025-08-18',\n    price: 740,\n  },\n  {\n    date: '2025-08-19',\n    price: 740,\n  },\n  {\n    date: '2025-08-20',\n    price: 740,\n  },\n  {\n    date: '2025-08-21',\n    price: 740,\n  },\n  {\n    date: '2025-08-22',\n    price: 740,\n  },\n  {\n    date: '2025-08-23',\n    price: 740,\n  },\n  {\n    date: '2025-08-24',\n    price: 740,\n  },\n  {\n    date: '2025-08-25',\n    price: 740,\n  },\n  {\n    date: '2025-08-26',\n    price: 740,\n  },\n  {\n    date: '2025-08-27',\n    price: 740,\n  },\n  {\n    date: '2025-08-28',\n    price: 740,\n  },\n  {\n    date: '2025-08-29',\n    price: 740,\n  },\n  {\n    date: '2025-08-30',\n    price: 740,\n  },\n  {\n    date: '2025-08-31',\n    price: 740,\n    showLabel: 1,\n    tooltip: '最高价 ￥740',\n  },\n];\nconst result = (data.filter((item) => item.showLabel) || []).map((item) => {\n  return {\n    type: 'lineX',\n    data: [item],\n    encode: {\n      x: 'date',\n      y: 'price',\n      color: 'linear-gradient(-90deg, #1677FF5B 0%,#1677FF 100%)',\n    },\n    style: {\n      lineWidth: 3,\n      lineDash: [3, 3],\n    },\n    labels: item.tooltip\n      ? [\n          {\n            text: 'tooltip',\n            fill: '#000000',\n            fillOpacity: 1,\n            fontSize: 22,\n            fontWeight: 500,\n            lineHeight: 30,\n            textAlign: 'center',\n            background: true,\n            backgroundFill: '#ffffff',\n            backgroundRadius: 24,\n            backgroundOpacity: 1,\n            backgroundPadding: [10, 16],\n            backgroundRadius: 10,\n            backgroundShadowColor: 'rgba(42,102,187,0.17)',\n            backgroundShadowBlur: 22,\n            transform: [{ type: 'exceedAdjust', bounds: 'main', offsetX: 15 }], // 边界配置为主区域，并且水平方向偏移为 15\n          },\n        ]\n      : [],\n  };\n});\n\nchart.options({\n  width: 654,\n  height: 310,\n  type: 'view',\n  margin: 20,\n  marginLeft: 10,\n  insetLeft: 24,\n  insetRight: 24,\n  insetBottom: 24,\n  animate: false,\n  axis: {\n    x: {\n      title: '',\n      size: 16,\n      line: true,\n      lineLineWidth: 1.5,\n      lineStroke: '#DEE3EB',\n      tick: false,\n      labelFontSize: 22,\n      labelFill: '#545C67',\n      labelFontWeight: 500,\n      labelDy: 8,\n      labelFormatter: (str) => {\n        if (/^\\d{4}-\\d{2}-\\d{2}$/.test(str)) {\n          const [year, month, day] = str.split('-');\n          return `${+month}月${+day}日`;\n        }\n        return str;\n      },\n      tickFilter: (d, index) => {\n        if (data[index]?.showLabel) {\n          return true;\n        }\n        return false;\n      },\n    },\n    y: {\n      title: '',\n      tick: false,\n      line: true,\n      lineStroke: '#DEE3EB',\n      lineLineWidth: 1.5,\n      labelDx: -8,\n      labelFontSize: 22,\n      labelFill: '#545C67',\n      labelFontWeight: 500,\n      grid: false,\n    },\n  },\n  scale: {\n    y: {\n      type: 'linear',\n      tickCount: 5,\n      domain: [600, 860],\n      nice: true,\n    },\n  },\n  children: [\n    {\n      type: 'area',\n      data: data,\n      encode: {\n        x: 'date',\n        y: 'price',\n        shape: 'smooth',\n      },\n      style: {\n        fill: `linear-gradient(-90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0) 50%,rgba(105, 168, 255, 0.61) 100%)`,\n      },\n    },\n    {\n      type: 'line',\n      data: data,\n      encode: {\n        x: 'date',\n        y: 'price',\n        shape: 'smooth',\n      },\n      style: {\n        stroke:\n          'linear-gradient(0deg, #91BDFF 0%, #1777FF 24.148%, #1777FF 75.172%,#1677FF32 100%)',\n        lineWidth: 6,\n      },\n    },\n    ...result,\n  ],\n});\n\nchart.render();\n",paraId:67,tocIndex:29},{value:"支持 9 种位置：",paraId:68,tocIndex:31},{value:"top",paraId:68,tocIndex:31},{value:", ",paraId:68,tocIndex:31},{value:"left",paraId:68,tocIndex:31},{value:", ",paraId:68,tocIndex:31},{value:"right",paraId:68,tocIndex:31},{value:", ",paraId:68,tocIndex:31},{value:"bottom",paraId:68,tocIndex:31},{value:", ",paraId:68,tocIndex:31},{value:"top-left",paraId:68,tocIndex:31},{value:", ",paraId:68,tocIndex:31},{value:"top-right",paraId:68,tocIndex:31},{value:", ",paraId:68,tocIndex:31},{value:"bottom-left",paraId:68,tocIndex:31},{value:", ",paraId:68,tocIndex:31},{value:"bottom-right",paraId:68,tocIndex:31},{value:", ",paraId:68,tocIndex:31},{value:"inside",paraId:68,tocIndex:31},{value:"。",paraId:68,tocIndex:31},{value:"const { Chart, ChartEvent } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\n\nchart.options({\n  height: 300,\n  type: 'cell',\n  data: [\n    { x: 'x-a', y: 'y-a', data: 1 },\n    { x: 'x-a', y: 'y-b', data: 3 },\n    { x: 'x-a', y: 'y-c', data: 2 },\n    { x: 'x-b', y: 'y-a', data: 8 },\n    { x: 'x-b', y: 'y-b', data: 5 },\n    { x: 'x-b', y: 'y-c', data: 6 },\n    { x: 'x-c', y: 'y-a', data: 7 },\n    { x: 'x-c', y: 'y-b', data: 4 },\n    { x: 'x-c', y: 'y-c', data: 9 },\n  ],\n  legend: false,\n  axis: false,\n  encode: {\n    x: 'x', // 编码 x 轴\n    y: 'y', // 编码 y 轴\n    color: 'data', // 使用数据中的 data1 字段\n  },\n  labels: [\n    {\n      text: 'data',\n      style: { fontSize: 16, stroke: '#fff', lineWidth: 2 },\n    },\n  ],\n  style: {\n    inset: 5,\n    lineWidth: 10,\n  },\n});\n\n// 插入Encode-Color 选择器\nconst selectorContainer = document.createElement('div');\nselectorContainer.textContent = 'position: ';\nconst selector = document.createElement('select');\nselector.innerHTML = [\n  'top',\n  'left',\n  'right',\n  'bottom',\n  'top-left',\n  'top-right',\n  'bottom-left',\n  'bottom-right',\n  'inside',\n].reduce((v, position) => {\n  return `${v}<option value=\"${position}\" ${\n    position === 'top' ? 'selected' : ''\n  }>${position}</option>`;\n}, '');\n\nselector.onchange = (e) => {\n  chart.options({\n    labels: [\n      {\n        text: 'data',\n        position: e.target.value,\n        style: { fontSize: 16, stroke: '#fff', lineWidth: 2 },\n      },\n    ],\n  });\n  chart.render(); // 重新渲染图表\n};\nselectorContainer.appendChild(selector);\ncontainer.insertBefore(selectorContainer, container.childNodes[0]);\n\nchart.render();\n",paraId:69,tocIndex:31},{value:"支持 ",paraId:70,tocIndex:32},{value:"outside",paraId:70,tocIndex:32},{value:", ",paraId:70,tocIndex:32},{value:"inside",paraId:70,tocIndex:32},{value:" 两种。见 ",paraId:70,tocIndex:32},{value:"饼图/环形图",paraId:71,tocIndex:32},{value:"。",paraId:70,tocIndex:32},{value:"position",paraId:72,tocIndex:32},{value:"用途",paraId:72,tocIndex:32},{value:"使用前",paraId:72,tocIndex:32},{value:"使用后",paraId:72,tocIndex:32},{value:"spider",paraId:72,tocIndex:32},{value:"调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系",paraId:72,tocIndex:32},{value:"surround",paraId:72,tocIndex:32},{value:"调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图",paraId:72,tocIndex:32},{value:"此外，针对面积图提供特殊 ",paraId:73,tocIndex:32},{value:"area",paraId:73,tocIndex:32},{value:"，见 ",paraId:73,tocIndex:32},{value:"面积图特殊标签",paraId:74,tocIndex:32},{value:"。针对 radial 类型的图标，增加了 ",paraId:73,tocIndex:32},{value:"spider",paraId:73,tocIndex:32},{value:"、",paraId:73,tocIndex:32},{value:"surround",paraId:73,tocIndex:32},{value:" 两种类型。",paraId:73,tocIndex:32},{value:"position",paraId:75,tocIndex:32},{value:"用途",paraId:75,tocIndex:32},{value:"使用前",paraId:75,tocIndex:32},{value:"使用后",paraId:75,tocIndex:32},{value:"area",paraId:75,tocIndex:32},{value:"将面积图的标签显示在面积区域中心，并设置一定的旋转角度",paraId:75,tocIndex:32},{value:"style",paraId:76,tocIndex:33},{value:" 标签样式配置，内部做了处理，可以直接在配置项配置样式。具体样式配置，可参考 ",paraId:76,tocIndex:33},{value:"文本样式配置",paraId:77,tocIndex:33},{value:"、",paraId:76,tocIndex:33},{value:"connector 连接线样式",paraId:78,tocIndex:33},{value:"、",paraId:76,tocIndex:33},{value:"background 背景样式",paraId:79,tocIndex:33},{value:" 。",paraId:76,tocIndex:33},{value:"({\n  labels: [\n    {\n      style: {\n        fontSize: 20,\n        fontWeight: 600,\n        lineHeight: 30,\n        textAlign: 'center',\n        connectorStroke: '#000',\n        connectorLineWidth: 2,\n        backgroundFill: '#f5f5f5',\n        backgroundRadius: 4,\n      },\n    },\n  ],\n});\n",paraId:80,tocIndex:33},{value:"标签",paraId:81,tocIndex:34},{value:"文本样式",paraId:81,tocIndex:34},{value:"配置，继承自 ",paraId:81,tocIndex:34},{value:"G",paraId:81,tocIndex:34},{value:" 引擎的 ",paraId:81,tocIndex:34},{value:"Text",paraId:81,tocIndex:34},{value:", 其上的样式都通用。",paraId:81,tocIndex:34},{value:"属性",paraId:82,tocIndex:34},{value:"描述",paraId:82,tocIndex:34},{value:"类型",paraId:82,tocIndex:34},{value:"默认值",paraId:82,tocIndex:34},{value:"必选",paraId:82,tocIndex:34},{value:"fontSize",paraId:82,tocIndex:34},{value:"标签文字大小",paraId:82,tocIndex:34},{value:"number",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"Function",paraId:82,tocIndex:34},{value:"-",paraId:82,tocIndex:34},{value:"fontFamily",paraId:82,tocIndex:34},{value:"标签文字字体",paraId:82,tocIndex:34},{value:"string",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"Function",paraId:82,tocIndex:34},{value:"-",paraId:82,tocIndex:34},{value:"fontWeight",paraId:82,tocIndex:34},{value:"标签文字粗细",paraId:82,tocIndex:34},{value:"number",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"Function",paraId:82,tocIndex:34},{value:"-",paraId:82,tocIndex:34},{value:"lineHeight",paraId:82,tocIndex:34},{value:"标签文字的行高",paraId:82,tocIndex:34},{value:"number",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"Function",paraId:82,tocIndex:34},{value:"-",paraId:82,tocIndex:34},{value:"textAlign",paraId:82,tocIndex:34},{value:"设置标签文字内容的水平对齐方式, 支持的属性：",paraId:82,tocIndex:34},{value:"center",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"end",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"left",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"right",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"start",paraId:82,tocIndex:34},{value:"，默认值为",paraId:82,tocIndex:34},{value:"start",paraId:82,tocIndex:34},{value:"string",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"Function",paraId:82,tocIndex:34},{value:"start",paraId:82,tocIndex:34},{value:"textBaseline",paraId:82,tocIndex:34},{value:"设置在绘制标签文字时垂直方向的基线, 支持的属性:",paraId:82,tocIndex:34},{value:"top",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"middle",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"bottom",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"alphabetic",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"hanging",paraId:82,tocIndex:34},{value:"。默认值为",paraId:82,tocIndex:34},{value:"bottom",paraId:82,tocIndex:34},{value:"string",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"Function",paraId:82,tocIndex:34},{value:"bottom",paraId:82,tocIndex:34},{value:"fill",paraId:82,tocIndex:34},{value:"标签文字的填充色",paraId:82,tocIndex:34},{value:"string",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"Function",paraId:82,tocIndex:34},{value:"-",paraId:82,tocIndex:34},{value:"fillOpacity",paraId:82,tocIndex:34},{value:"标签文字的填充透明度",paraId:82,tocIndex:34},{value:"number",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"Function",paraId:82,tocIndex:34},{value:"-",paraId:82,tocIndex:34},{value:"stroke",paraId:82,tocIndex:34},{value:"标签文字的描边",paraId:82,tocIndex:34},{value:"string",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"Function",paraId:82,tocIndex:34},{value:"-",paraId:82,tocIndex:34},{value:"strokeOpacity",paraId:82,tocIndex:34},{value:"标签文字描边透明度",paraId:82,tocIndex:34},{value:"number",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"Function",paraId:82,tocIndex:34},{value:"-",paraId:82,tocIndex:34},{value:"lineWidth",paraId:82,tocIndex:34},{value:"标签文字描边宽度",paraId:82,tocIndex:34},{value:"number",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"Function",paraId:82,tocIndex:34},{value:"-",paraId:82,tocIndex:34},{value:"lineDash",paraId:82,tocIndex:34},{value:"标签文字描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:82,tocIndex:34},{value:"[number,number]",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"Function<[number, number]>",paraId:82,tocIndex:34},{value:"-",paraId:82,tocIndex:34},{value:"opacity",paraId:82,tocIndex:34},{value:"标签文字的整体透明度",paraId:82,tocIndex:34},{value:"number",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"Function",paraId:82,tocIndex:34},{value:"-",paraId:82,tocIndex:34},{value:"shadowColor",paraId:82,tocIndex:34},{value:"标签文字阴影颜色",paraId:82,tocIndex:34},{value:"string",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"Function",paraId:82,tocIndex:34},{value:"-",paraId:82,tocIndex:34},{value:"shadowBlur",paraId:82,tocIndex:34},{value:"标签文字阴影的高斯模糊系数",paraId:82,tocIndex:34},{value:"number",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"Function",paraId:82,tocIndex:34},{value:"-",paraId:82,tocIndex:34},{value:"shadowOffsetX",paraId:82,tocIndex:34},{value:"标签文字阴影水平偏移量",paraId:82,tocIndex:34},{value:"number",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"Function",paraId:82,tocIndex:34},{value:"-",paraId:82,tocIndex:34},{value:"shadowOffsetY",paraId:82,tocIndex:34},{value:"标签文字阴影垂直偏移量",paraId:82,tocIndex:34},{value:"number",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"Function",paraId:82,tocIndex:34},{value:"-",paraId:82,tocIndex:34},{value:"cursor",paraId:82,tocIndex:34},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:82,tocIndex:34},{value:"string",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"Function",paraId:82,tocIndex:34},{value:"default",paraId:82,tocIndex:34},{value:"dx",paraId:82,tocIndex:34},{value:"标签文字在水平方向的偏移量",paraId:82,tocIndex:34},{value:"number",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"Function",paraId:82,tocIndex:34},{value:"0",paraId:82,tocIndex:34},{value:"dy",paraId:82,tocIndex:34},{value:"标签文字在垂直方向的偏移量",paraId:82,tocIndex:34},{value:"number",paraId:82,tocIndex:34},{value:" | ",paraId:82,tocIndex:34},{value:"Function",paraId:82,tocIndex:34},{value:"0",paraId:82,tocIndex:34},{value:"({\n  labels: [\n    {\n      fill: '#000',\n      fontSize: 20,\n      lineHeight: 30,\n      fontWeight: 600,\n      textAlign: 'center',\n      textBaseline: 'middle',\n      fontFamily: 'sans-serif',\n      opacity: 0.9,\n      cursor: 'pointer',\n      lineDash: [3, 4],\n      lineWidth: 2,\n      stroke: '#fff',\n      strokeOpacity: 0.4,\n      shadowOffsetX: 10,\n      shadowOffsetY: 10,\n      shadowColor: '#000',\n      shadowBlur: 2,\n    },\n  ],\n});\n",paraId:83,tocIndex:34},{value:"标签",paraId:84,tocIndex:35},{value:"连接线样式",paraId:84,tocIndex:35},{value:"配置，格式为: ",paraId:84,tocIndex:35},{value:"connector${style}",paraId:84,tocIndex:35},{value:", 如: ",paraId:84,tocIndex:35},{value:"connectorStroke",paraId:84,tocIndex:35},{value:" 代表连接线的颜色。 需要 position ",paraId:84,tocIndex:35},{value:"spider",paraId:84,tocIndex:35},{value:"、",paraId:84,tocIndex:35},{value:"surround",paraId:84,tocIndex:35},{value:" 才会有 connector 元素。",paraId:84,tocIndex:35},{value:"参数",paraId:85,tocIndex:35},{value:"说明",paraId:85,tocIndex:35},{value:"类型",paraId:85,tocIndex:35},{value:"默认值",paraId:85,tocIndex:35},{value:"必选",paraId:85,tocIndex:35},{value:"connectorStroke",paraId:85,tocIndex:35},{value:"连接线的颜色",paraId:85,tocIndex:35},{value:"string",paraId:85,tocIndex:35},{value:"-",paraId:85,tocIndex:35},{value:"connectorStrokeOpacity",paraId:85,tocIndex:35},{value:"连接线的透明度",paraId:85,tocIndex:35},{value:"number",paraId:85,tocIndex:35},{value:"-",paraId:85,tocIndex:35},{value:"connectorLineWidth",paraId:85,tocIndex:35},{value:"连接线描边宽度",paraId:85,tocIndex:35},{value:"number",paraId:85,tocIndex:35},{value:"-",paraId:85,tocIndex:35},{value:"connectorLineDash",paraId:85,tocIndex:35},{value:"连接线虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:85,tocIndex:35},{value:"[number,number]",paraId:85,tocIndex:35},{value:"-",paraId:85,tocIndex:35},{value:"connectorOpacity",paraId:85,tocIndex:35},{value:"连接线的整体透明度",paraId:85,tocIndex:35},{value:"number",paraId:85,tocIndex:35},{value:"-",paraId:85,tocIndex:35},{value:"connectorShadowColor",paraId:85,tocIndex:35},{value:"连接线阴影颜色",paraId:85,tocIndex:35},{value:"string",paraId:85,tocIndex:35},{value:"-",paraId:85,tocIndex:35},{value:"connectorShadowBlur",paraId:85,tocIndex:35},{value:"连接线阴影的高斯模糊系数",paraId:85,tocIndex:35},{value:"number",paraId:85,tocIndex:35},{value:"-",paraId:85,tocIndex:35},{value:"connectorShadowOffsetX",paraId:85,tocIndex:35},{value:"连接线阴影水平偏移量",paraId:85,tocIndex:35},{value:"number",paraId:85,tocIndex:35},{value:"-",paraId:85,tocIndex:35},{value:"connectorShadowOffsetY",paraId:85,tocIndex:35},{value:"连接线阴影垂直偏移量",paraId:85,tocIndex:35},{value:"number",paraId:85,tocIndex:35},{value:"-",paraId:85,tocIndex:35},{value:"connectorCursor",paraId:85,tocIndex:35},{value:"鼠标样式。同 css 的鼠标样式",paraId:85,tocIndex:35},{value:"string",paraId:85,tocIndex:35},{value:"default",paraId:85,tocIndex:35},{value:"connectorDistance",paraId:85,tocIndex:35},{value:"连接线和文本的距离",paraId:85,tocIndex:35},{value:"number",paraId:85,tocIndex:35},{value:"-",paraId:85,tocIndex:35},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  width: 500,\n  height: 400,\n  data: [\n    { id: 'c', value: 526 },\n    { id: 'sass', value: 220 },\n    { id: 'php', value: 325 },\n    { id: 'elixir', value: 561 },\n  ],\n  encode: { y: 'value', color: 'id' },\n  transform: [{ type: 'stackY' }],\n  coordinate: { type: 'theta', innerRadius: 0.25, outerRadius: 0.8 },\n  legend: false,\n  labels: [\n    {\n      text: 'id',\n      position: 'spider',\n      fontWeight: 'bold',\n      fontSize: 14,\n      textBaseline: 'bottom',\n      textAlign: (d) => (['c', 'sass'].includes(d.id) ? 'end' : 'start'),\n      connectorDistance: 5, // 文本和连接线的间距\n      connectorStroke: '#0649f2',\n      connectorLineWidth: 1,\n      connectorLineDash: [3, 4],\n      connectorOpacity: 0.8,\n    },\n  ],\n});\n\nchart.render();\n",paraId:86,tocIndex:35},{value:"标签",paraId:87,tocIndex:36},{value:"文本背景框样式",paraId:87,tocIndex:36},{value:"配置，格式为: ",paraId:87,tocIndex:36},{value:"background${style}",paraId:87,tocIndex:36},{value:", 如: ",paraId:87,tocIndex:36},{value:"backgroundFill",paraId:87,tocIndex:36},{value:" 代表背景框填充色。",paraId:87,tocIndex:36},{value:"参数",paraId:88,tocIndex:36},{value:"说明",paraId:88,tocIndex:36},{value:"类型",paraId:88,tocIndex:36},{value:"默认值",paraId:88,tocIndex:36},{value:"必选",paraId:88,tocIndex:36},{value:"backgroundFill",paraId:88,tocIndex:36},{value:"背景框的填充色",paraId:88,tocIndex:36},{value:"string",paraId:88,tocIndex:36},{value:"-",paraId:88,tocIndex:36},{value:"backgroundFillOpacity",paraId:88,tocIndex:36},{value:"背景框的填充透明度",paraId:88,tocIndex:36},{value:"number",paraId:88,tocIndex:36},{value:"-",paraId:88,tocIndex:36},{value:"backgroundStroke",paraId:88,tocIndex:36},{value:"背景框的描边",paraId:88,tocIndex:36},{value:"string",paraId:88,tocIndex:36},{value:"-",paraId:88,tocIndex:36},{value:"backgroundStrokeOpacity",paraId:88,tocIndex:36},{value:"背景框描边透明度",paraId:88,tocIndex:36},{value:"number",paraId:88,tocIndex:36},{value:"-",paraId:88,tocIndex:36},{value:"backgroundLineWidth",paraId:88,tocIndex:36},{value:"背景框描边宽度",paraId:88,tocIndex:36},{value:"number",paraId:88,tocIndex:36},{value:"-",paraId:88,tocIndex:36},{value:"backgroundLineDash",paraId:88,tocIndex:36},{value:"背景框描边虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:88,tocIndex:36},{value:"[number,number]",paraId:88,tocIndex:36},{value:"-",paraId:88,tocIndex:36},{value:"backgroundOpacity",paraId:88,tocIndex:36},{value:"背景框的整体透明度",paraId:88,tocIndex:36},{value:"number",paraId:88,tocIndex:36},{value:"-",paraId:88,tocIndex:36},{value:"backgroundShadowColor",paraId:88,tocIndex:36},{value:"背景框阴影颜色",paraId:88,tocIndex:36},{value:"string",paraId:88,tocIndex:36},{value:"-",paraId:88,tocIndex:36},{value:"backgroundShadowBlur",paraId:88,tocIndex:36},{value:"背景框阴影的高斯模糊系数",paraId:88,tocIndex:36},{value:"number",paraId:88,tocIndex:36},{value:"-",paraId:88,tocIndex:36},{value:"backgroundShadowOffsetX",paraId:88,tocIndex:36},{value:"背景框阴影水平偏移量",paraId:88,tocIndex:36},{value:"number",paraId:88,tocIndex:36},{value:"-",paraId:88,tocIndex:36},{value:"backgroundShadowOffsetY",paraId:88,tocIndex:36},{value:"背景框阴影垂直偏移量",paraId:88,tocIndex:36},{value:"number",paraId:88,tocIndex:36},{value:"-",paraId:88,tocIndex:36},{value:"backgroundCursor",paraId:88,tocIndex:36},{value:"鼠标样式。同 css 的鼠标样式",paraId:88,tocIndex:36},{value:"string",paraId:88,tocIndex:36},{value:"default",paraId:88,tocIndex:36},{value:"backgroundRadius",paraId:88,tocIndex:36},{value:"背景框圆角半径",paraId:88,tocIndex:36},{value:"number",paraId:88,tocIndex:36},{value:"-",paraId:88,tocIndex:36},{value:"backgroundPadding",paraId:88,tocIndex:36},{value:"背景框内边距",paraId:88,tocIndex:36},{value:"number[]",paraId:88,tocIndex:36},{value:"-",paraId:88,tocIndex:36},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  width: 500,\n  height: 400,\n  data: [\n    { id: 'c', value: 526 },\n    { id: 'sass', value: 220 },\n    { id: 'php', value: 325 },\n    { id: 'elixir', value: 561 },\n  ],\n  encode: { y: 'value', color: 'id' },\n  transform: [{ type: 'stackY' }],\n  coordinate: { type: 'theta', innerRadius: 0.25, outerRadius: 0.8 },\n  legend: false,\n  labels: [\n    {\n      text: 'value',\n      fill: '#0700fa', // 文本样式\n      background: true, // 背景展示\n      backgroundFill: '#fff',\n      backgroundRadius: 4,\n      backgroundPadding: [10, 10, 10, 10],\n      backgroundOpacity: 0.4,\n      backgroundStroke: '#000',\n      backgroundLineDash: [3, 4],\n      backgroundLineWidth: 1,\n    },\n  ],\n});\n\nchart.render();\n",paraId:89,tocIndex:36}]},94665:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(80877);const t=[{value:"G2 中 ",paraId:0,tocIndex:0},{value:"图例（Legend）",paraId:0,tocIndex:0},{value:" 是图表的辅助元素，使用颜色、大小、形状区分不同的数据类型，用于图表中数据的筛选。可以理解为是非空间通道（ ",paraId:0,tocIndex:0},{value:"color",paraId:0,tocIndex:0},{value:"，",paraId:0,tocIndex:0},{value:"opacity",paraId:0,tocIndex:0},{value:"，",paraId:0,tocIndex:0},{value:"size",paraId:0,tocIndex:0},{value:"，",paraId:0,tocIndex:0},{value:"shape",paraId:0,tocIndex:0},{value:"）对应比例尺的可视化，G2 会根据设置图形属性映射以及数据的类型自动生成不同的图例，当一个变量对应了多个图形属性时，G2 会对图例进行合并，以达到精简的目的。",paraId:0,tocIndex:0},{value:"color",paraId:1,tocIndex:0},{value:"，",paraId:1,tocIndex:0},{value:"opacity",paraId:1,tocIndex:0},{value:"，",paraId:1,tocIndex:0},{value:"size",paraId:1,tocIndex:0},{value:"，",paraId:1,tocIndex:0},{value:"shape",paraId:1,tocIndex:0},{value:" 这四个非空间通道如果判断接收的参数是数据源的字段时，会自动生成不同的图例：",paraId:1,tocIndex:0},{value:"视觉通道",paraId:2,tocIndex:0},{value:"解释",paraId:2,tocIndex:0},{value:"color",paraId:2,tocIndex:0},{value:"根据不同的颜色生成图例",paraId:2,tocIndex:0},{value:"opacity",paraId:2,tocIndex:0},{value:"根据不同的透明度生成图例",paraId:2,tocIndex:0},{value:"size",paraId:2,tocIndex:0},{value:"根据不同的大小生成图例",paraId:2,tocIndex:0},{value:"shape",paraId:2,tocIndex:0},{value:"根据不同的形状生成图例",paraId:2,tocIndex:0},{value:"配置图例有两种方式",paraId:3,tocIndex:2},{value:"第一种，传入 ",paraId:4,tocIndex:2},{value:"boolean",paraId:4,tocIndex:2},{value:" 设置是否显示图例。",paraId:4,tocIndex:2},{value:"({\n  type: 'interval',\n  legend: false; // 隐藏所有图例\n})\n",paraId:5,tocIndex:2},{value:"({\n  type: 'interval',\n  legend: {color: false}; // 隐藏 color 通道的图例\n})\n",paraId:6,tocIndex:2},{value:"第二种，传入 ",paraId:7,tocIndex:2},{value:"legendOption",paraId:7,tocIndex:2},{value:" 对图例进行整体配置。",paraId:7,tocIndex:2},{value:"({\n  type: 'interval',\n  legend: {\n    color: {},\n    size: {},\n  },\n});\n",paraId:8,tocIndex:2},{value:"图例可以在 Mark 层级配置。在 G2 中，每个标记（Mark）都有自己的图例。如果标记对应的比例尺是同步的，那么图例也会合并。",paraId:9,tocIndex:3},{value:"({\n  type: 'interval',\n  legend: {\n    color: {},\n    size: {},\n  },\n});\n",paraId:10,tocIndex:3},{value:"图例也可以在 View 层级配置。图例具有传递性。视图上声明的图例会传递给 ",paraId:11,tocIndex:3},{value:"children",paraId:11,tocIndex:3},{value:" 声明的标记，如果该标记有对应通道的图例，就合并；否则不影响。",paraId:11,tocIndex:3},{value:"({\n  type: 'view',\n  legend: {\n    color: {},\n    size: {},\n  },\n});\n",paraId:12,tocIndex:3},{value:"G2 中图例分为 ",paraId:13,tocIndex:4},{value:"连续图例",paraId:13,tocIndex:4},{value:" 和 ",paraId:13,tocIndex:4},{value:"分类图例",paraId:13,tocIndex:4},{value:" 两种，由于这两种图例的结构不同，所以配置项也存在差异。",paraId:13,tocIndex:4},{value:"有的配置项作用范围区分分类图例和连续图例：\n",paraId:14,tocIndex:4},{value:"分类图例",paraId:15,tocIndex:4},{value:"连续图例",paraId:16,tocIndex:4},{value:"属性",paraId:17,tocIndex:4},{value:"描述",paraId:17,tocIndex:4},{value:"类型",paraId:17,tocIndex:4},{value:"默认值",paraId:17,tocIndex:4},{value:"必选",paraId:17,tocIndex:4},{value:"orientation",paraId:17,tocIndex:4},{value:"图例朝向，对于分类图例来说即滚动方向",paraId:17,tocIndex:4},{value:"horizontal",paraId:17,tocIndex:4},{value:" | ",paraId:17,tocIndex:4},{value:"vertical",paraId:17,tocIndex:4},{value:"horizontal",paraId:17,tocIndex:4},{value:"position",paraId:17,tocIndex:4},{value:"图例的位置",paraId:17,tocIndex:4},{value:"top",paraId:17,tocIndex:4},{value:" | ",paraId:17,tocIndex:4},{value:"right",paraId:17,tocIndex:4},{value:" | ",paraId:17,tocIndex:4},{value:"left",paraId:17,tocIndex:4},{value:" | ",paraId:17,tocIndex:4},{value:"bottom",paraId:17,tocIndex:4},{value:"top",paraId:17,tocIndex:4},{value:"layout",paraId:17,tocIndex:4},{value:"调整图例的 flex 布局方式",paraId:17,tocIndex:4},{value:"layout",paraId:18,tocIndex:4},{value:"详见",paraId:17,tocIndex:4},{value:"layout",paraId:19,tocIndex:4},{value:"size",paraId:17,tocIndex:4},{value:"图例容器的尺寸",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"-",paraId:17,tocIndex:4},{value:"length",paraId:17,tocIndex:4},{value:"图例容器的长度",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"-",paraId:17,tocIndex:4},{value:"crossPadding",paraId:17,tocIndex:4},{value:"图例到图表区域的距离",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"12",paraId:17,tocIndex:4},{value:"order",paraId:17,tocIndex:4},{value:"图例在布局的时候的排序",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"1",paraId:17,tocIndex:4},{value:"title",paraId:17,tocIndex:4},{value:"配置图例的标题",paraId:17,tocIndex:4},{value:"title",paraId:20,tocIndex:4},{value:"详见",paraId:17,tocIndex:4},{value:"title",paraId:21,tocIndex:4},{value:"cols ",paraId:17,tocIndex:4},{value:"分类图例",paraId:22,tocIndex:4},{value:"指定每行显示的图例项数量，为空时表示列数不受限制",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"-",paraId:17,tocIndex:4},{value:"colPadding ",paraId:17,tocIndex:4},{value:"分类图例",paraId:23,tocIndex:4},{value:"指定图例项之间的横向间隔",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"12",paraId:17,tocIndex:4},{value:"rowPadding ",paraId:17,tocIndex:4},{value:"分类图例",paraId:24,tocIndex:4},{value:"指定图例项之间的纵向间隔",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"8",paraId:17,tocIndex:4},{value:"maxRows ",paraId:17,tocIndex:4},{value:"分类图例",paraId:25,tocIndex:4},{value:"指定图例最大行数",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"3",paraId:17,tocIndex:4},{value:"maxCols ",paraId:17,tocIndex:4},{value:"分类图例",paraId:26,tocIndex:4},{value:"指定图例最大列数",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"3",paraId:17,tocIndex:4},{value:"itemMarker ",paraId:17,tocIndex:4},{value:"分类图例",paraId:27,tocIndex:4},{value:"配置图例项的图标",paraId:17,tocIndex:4},{value:"itemMarker",paraId:28,tocIndex:4},{value:"详见",paraId:17,tocIndex:4},{value:"itemMarker",paraId:29,tocIndex:4},{value:"itemLabel ",paraId:17,tocIndex:4},{value:"分类图例",paraId:30,tocIndex:4},{value:"配置图例项的标签文字",paraId:17,tocIndex:4},{value:"itemLabel",paraId:31,tocIndex:4},{value:"详见",paraId:17,tocIndex:4},{value:"itemLabel",paraId:32,tocIndex:4},{value:"itemValue ",paraId:17,tocIndex:4},{value:"分类图例",paraId:33,tocIndex:4},{value:"配置图例项的值",paraId:17,tocIndex:4},{value:"itemValue",paraId:34,tocIndex:4},{value:"详见",paraId:17,tocIndex:4},{value:"itemValue",paraId:35,tocIndex:4},{value:"itemBackground ",paraId:17,tocIndex:4},{value:"分类图例",paraId:36,tocIndex:4},{value:"配置图例项的背景",paraId:17,tocIndex:4},{value:"itemBackground",paraId:37,tocIndex:4},{value:"详见",paraId:17,tocIndex:4},{value:"itemBackground",paraId:38,tocIndex:4},{value:"itemWidth ",paraId:17,tocIndex:4},{value:"分类图例",paraId:39,tocIndex:4},{value:"配置图例项的宽度",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"-",paraId:17,tocIndex:4},{value:"itemSpan ",paraId:17,tocIndex:4},{value:"分类图例",paraId:40,tocIndex:4},{value:"配置图例项图标、标签和值的空间划分",paraId:17,tocIndex:4},{value:"number | number[]",paraId:17,tocIndex:4},{value:"[1, 1, 1]",paraId:17,tocIndex:4},{value:"itemSpacing ",paraId:17,tocIndex:4},{value:"分类图例",paraId:41,tocIndex:4},{value:"配置图例项图标、标签、值、聚焦图标之间的间距",paraId:17,tocIndex:4},{value:"number | number[]",paraId:17,tocIndex:4},{value:"[8, 8, 4]",paraId:17,tocIndex:4},{value:"nav ",paraId:17,tocIndex:4},{value:"分类图例",paraId:42,tocIndex:4},{value:"配置图例的分页器",paraId:17,tocIndex:4},{value:"nav",paraId:43,tocIndex:4},{value:"详见",paraId:17,tocIndex:4},{value:"nav",paraId:44,tocIndex:4},{value:"poptip ",paraId:17,tocIndex:4},{value:"分类图例",paraId:45,tocIndex:4},{value:"图例项提示",paraId:17,tocIndex:4},{value:"poptip",paraId:46,tocIndex:4},{value:"详见",paraId:17,tocIndex:4},{value:"poptip",paraId:47,tocIndex:4},{value:"focus    ",paraId:17,tocIndex:4},{value:"分类图例",paraId:48,tocIndex:4},{value:"是否启用图例聚焦",paraId:17,tocIndex:4},{value:"boolean",paraId:17,tocIndex:4},{value:"false",paraId:17,tocIndex:4},{value:"focusMarkerSize     ",paraId:17,tocIndex:4},{value:"分类图例",paraId:49,tocIndex:4},{value:"图例聚焦图标大小",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"12",paraId:17,tocIndex:4},{value:"defaultSelect  ",paraId:17,tocIndex:4},{value:"分类图例",paraId:50,tocIndex:4},{value:"默认选中的图例项",paraId:17,tocIndex:4},{value:"string[]",paraId:17,tocIndex:4},{value:"-",paraId:17,tocIndex:4},{value:"color ",paraId:17,tocIndex:4},{value:"连续图例",paraId:51,tocIndex:4},{value:"配置连续图例的色带颜色",paraId:17,tocIndex:4},{value:"string[] | ",paraId:17,tocIndex:4},{value:"d3-interpolate",paraId:17,tocIndex:4},{value:"-",paraId:17,tocIndex:4},{value:"block ",paraId:17,tocIndex:4},{value:"连续图例",paraId:52,tocIndex:4},{value:"连续图例是否按区间显示",paraId:17,tocIndex:4},{value:"boolean",paraId:17,tocIndex:4},{value:"false",paraId:17,tocIndex:4},{value:"type ",paraId:17,tocIndex:4},{value:"连续图例",paraId:53,tocIndex:4},{value:"配置连续图例的类型",paraId:17,tocIndex:4},{value:"size",paraId:17,tocIndex:4},{value:" |",paraId:17,tocIndex:4},{value:"color",paraId:17,tocIndex:4},{value:"color",paraId:17,tocIndex:4},{value:"ribbon ",paraId:17,tocIndex:4},{value:"连续图例",paraId:54,tocIndex:4},{value:"配置连续图例的色带",paraId:17,tocIndex:4},{value:"ribbon",paraId:55,tocIndex:4},{value:"详见",paraId:17,tocIndex:4},{value:"ribbon",paraId:56,tocIndex:4},{value:"handle ",paraId:17,tocIndex:4},{value:"连续图例",paraId:57,tocIndex:4},{value:"配置连续图例的滑动手柄",paraId:17,tocIndex:4},{value:"handle",paraId:58,tocIndex:4},{value:"详见",paraId:17,tocIndex:4},{value:"handle",paraId:59,tocIndex:4},{value:"label ",paraId:17,tocIndex:4},{value:"连续图例",paraId:60,tocIndex:4},{value:"配置连续图例的标签/刻度值",paraId:17,tocIndex:4},{value:"label",paraId:61,tocIndex:4},{value:"详见",paraId:17,tocIndex:4},{value:"label",paraId:62,tocIndex:4},{value:"indicator ",paraId:17,tocIndex:4},{value:"连续图例",paraId:63,tocIndex:4},{value:"配置连续图例的指示器",paraId:17,tocIndex:4},{value:"indicator",paraId:64,tocIndex:4},{value:"详见",paraId:17,tocIndex:4},{value:"indicator",paraId:65,tocIndex:4},{value:"optional",paraId:66,tocIndex:5},{value:" ",paraId:66,tocIndex:5},{value:"horizontal | vertical",paraId:66,tocIndex:5},{value:" ",paraId:66,tocIndex:5},{value:"图例朝向，对于分类图例来说即滚动方向。默认为 ",paraId:67,tocIndex:5},{value:"horizontal",paraId:67,tocIndex:5},{value:"。",paraId:67,tocIndex:5},{value:" ",paraId:68,tocIndex:6},{value:"optional",paraId:68,tocIndex:6},{value:" ",paraId:68,tocIndex:6},{value:'"top" | "right" | "left" | "bottom"',paraId:68,tocIndex:6},{value:" ",paraId:68,tocIndex:6},{value:"图例的位置。默认为 ",paraId:69,tocIndex:6},{value:"top",paraId:69,tocIndex:6},{value:"。",paraId:69,tocIndex:6},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\nconst positionList = ['top', 'right', 'left', 'bottom'];\nconst positionMap = positionList.map((p) => {\n  return {\n    label: p,\n    value: p,\n  };\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { name: 'London', 月份: 'Jan.', 月均降雨量: 18.9 },\n    { name: 'London', 月份: 'Feb.', 月均降雨量: 28.8 },\n    { name: 'London', 月份: 'Mar.', 月均降雨量: 39.3 },\n    { name: 'London', 月份: 'Apr.', 月均降雨量: 81.4 },\n    { name: 'London', 月份: 'May', 月均降雨量: 47 },\n    { name: 'London', 月份: 'Jun.', 月均降雨量: 20.3 },\n    { name: 'London', 月份: 'Jul.', 月均降雨量: 24 },\n    { name: 'London', 月份: 'Aug.', 月均降雨量: 35.6 },\n    { name: 'Berlin', 月份: 'Jan.', 月均降雨量: 12.4 },\n    { name: 'Berlin', 月份: 'Feb.', 月均降雨量: 23.2 },\n    { name: 'Berlin', 月份: 'Mar.', 月均降雨量: 34.5 },\n    { name: 'Berlin', 月份: 'Apr.', 月均降雨量: 99.7 },\n    { name: 'Berlin', 月份: 'May', 月均降雨量: 52.6 },\n    { name: 'Berlin', 月份: 'Jun.', 月均降雨量: 35.5 },\n    { name: 'Berlin', 月份: 'Jul.', 月均降雨量: 37.4 },\n    { name: 'Berlin', 月份: 'Aug.', 月均降雨量: 42.4 },\n  ],\n  encode: { x: '月份', y: '月均降雨量', color: 'name' },\n  transform: [{ type: 'dodgeX' }],\n});\n\nconst handleSetPosition = (position) => {\n  chart.options({\n    legend: {\n      color: {\n        position,\n      },\n    },\n  });\n  chart.render(); // 重新渲染图表\n};\n\n// 插入Position 选择器\nconst selectorContainer = document.createElement('div');\nselectorContainer.textContent = '选择图例位置 ';\nconst selector = document.createElement('select');\nselector.innerHTML = positionMap.map(\n  (position, index) =>\n    `<option value=\"${position.value}\" ${index === 0 ? 'selected' : ''}>${\n      position.label\n    }</option>`,\n);\nselector.onchange = (e) => {\n  handleSetPosition(e.target.value);\n};\nselectorContainer.appendChild(selector);\ncontainer.insertBefore(selectorContainer, container.childNodes[0]);\n\nchart.render();\n",paraId:70,tocIndex:6},{value:" ",paraId:71,tocIndex:7},{value:"LegendLayoutCfg",paraId:71,tocIndex:7},{value:" ",paraId:71,tocIndex:7},{value:"optional",paraId:71,tocIndex:7},{value:" ",paraId:71,tocIndex:7},{value:"Legend 组件支持调整其在画布中的位置，通过 ",paraId:72,tocIndex:7},{value:"layout",paraId:72,tocIndex:7},{value:" 属性来设置。图例布局采用 ",paraId:72,tocIndex:7},{value:"Flexbox 布局模型",paraId:72,tocIndex:7},{value:"，",paraId:72,tocIndex:7},{value:"position",paraId:72,tocIndex:7},{value:" 决定图例在画布中的基础位置，而 ",paraId:72,tocIndex:7},{value:"layout",paraId:72,tocIndex:7},{value:" 进一步控制图例内部的精确对齐方式。",paraId:72,tocIndex:7},{value:"理解图例布局的关键是掌握",paraId:73,tocIndex:8},{value:"主轴",paraId:73,tocIndex:8},{value:"和",paraId:73,tocIndex:8},{value:"交叉轴",paraId:73,tocIndex:8},{value:"的概念：",paraId:73,tocIndex:8},{value:"position",paraId:74,tocIndex:8},{value:"默认 flexDirection",paraId:74,tocIndex:8},{value:"主轴方向",paraId:74,tocIndex:8},{value:"交叉轴方向",paraId:74,tocIndex:8},{value:"主轴含义",paraId:74,tocIndex:8},{value:"交叉轴含义",paraId:74,tocIndex:8},{value:"top",paraId:74,tocIndex:8},{value:"row",paraId:74,tocIndex:8},{value:"水平 →",paraId:74,tocIndex:8},{value:"垂直 ↓",paraId:74,tocIndex:8},{value:"图例项左右排列",paraId:74,tocIndex:8},{value:"图例区域上下对齐",paraId:74,tocIndex:8},{value:"bottom",paraId:74,tocIndex:8},{value:"row",paraId:74,tocIndex:8},{value:"水平 →",paraId:74,tocIndex:8},{value:"垂直 ↑",paraId:74,tocIndex:8},{value:"图例项左右排列",paraId:74,tocIndex:8},{value:"图例区域上下对齐",paraId:74,tocIndex:8},{value:"left",paraId:74,tocIndex:8},{value:"column",paraId:74,tocIndex:8},{value:"垂直 ↓",paraId:74,tocIndex:8},{value:"水平 →",paraId:74,tocIndex:8},{value:"图例项上下排列",paraId:74,tocIndex:8},{value:"图例区域左右对齐",paraId:74,tocIndex:8},{value:"right",paraId:74,tocIndex:8},{value:"column",paraId:74,tocIndex:8},{value:"垂直 ↓",paraId:74,tocIndex:8},{value:"水平 ←",paraId:74,tocIndex:8},{value:"图例项上下排列",paraId:74,tocIndex:8},{value:"图例区域左右对齐",paraId:74,tocIndex:8},{value:"LegendLayoutCfg",paraId:75,tocIndex:9},{value:" 配置如下：",paraId:75,tocIndex:9},{value:"属性",paraId:76,tocIndex:9},{value:"描述",paraId:76,tocIndex:9},{value:"类型",paraId:76,tocIndex:9},{value:"默认值",paraId:76,tocIndex:9},{value:"作用轴",paraId:76,tocIndex:9},{value:"必选",paraId:76,tocIndex:9},{value:"justifyContent",paraId:76,tocIndex:9},{value:"主轴对齐方式",paraId:76,tocIndex:9},{value:"flex-start",paraId:76,tocIndex:9},{value:" | ",paraId:76,tocIndex:9},{value:"flex-end",paraId:76,tocIndex:9},{value:" | ",paraId:76,tocIndex:9},{value:"center",paraId:76,tocIndex:9},{value:"flex-start",paraId:76,tocIndex:9},{value:"主轴",paraId:76,tocIndex:9},{value:"alignItems",paraId:76,tocIndex:9},{value:"交叉轴对齐",paraId:76,tocIndex:9},{value:"flex-start",paraId:76,tocIndex:9},{value:" | ",paraId:76,tocIndex:9},{value:"flex-end",paraId:76,tocIndex:9},{value:" | ",paraId:76,tocIndex:9},{value:"center",paraId:76,tocIndex:9},{value:"flex-start",paraId:76,tocIndex:9},{value:"交叉轴",paraId:76,tocIndex:9},{value:"flexDirection",paraId:76,tocIndex:9},{value:"主轴方向",paraId:76,tocIndex:9},{value:"row",paraId:76,tocIndex:9},{value:" | ",paraId:76,tocIndex:9},{value:"column",paraId:76,tocIndex:9},{value:"position 为",paraId:76,tocIndex:9},{value:"top",paraId:76,tocIndex:9},{value:"和",paraId:76,tocIndex:9},{value:"bottom",paraId:76,tocIndex:9},{value:"的时候为",paraId:76,tocIndex:9},{value:"row",paraId:76,tocIndex:9},{value:"，其他时候为",paraId:76,tocIndex:9},{value:"column",paraId:76,tocIndex:9},{value:"-",paraId:76,tocIndex:9},{value:"通过 ",paraId:77,tocIndex:10},{value:"position",paraId:77,tocIndex:10},{value:" 和 ",paraId:77,tocIndex:10},{value:"layout",paraId:77,tocIndex:10},{value:" 的组合，可以实现图例的精确定位：",paraId:77,tocIndex:10},{value:"// 1. 顶部居中图例\n({\n  legend: {\n    color: {\n      position: 'top', // 图例位于顶部\n      layout: {\n        justifyContent: 'center', // 主轴（水平）居中\n      },\n    },\n  },\n});\n\n// 2. 右侧垂直居中图例\n({\n  legend: {\n    color: {\n      position: 'right', // 图例位于右侧\n      layout: {\n        justifyContent: 'center', // 主轴（垂直）居中\n      },\n    },\n  },\n});\n\n// 3. 底部右对齐图例\n({\n  legend: {\n    color: {\n      position: 'bottom', // 图例位于底部\n      layout: {\n        justifyContent: 'flex-end', // 主轴（水平）右对齐\n      },\n    },\n  },\n});\n\n// 4. 左侧底部对齐图例\n({\n  legend: {\n    color: {\n      position: 'left', // 图例位于左侧\n      layout: {\n        justifyContent: 'flex-end', // 主轴（垂直）底部对齐\n      },\n    },\n  },\n});\n",paraId:78,tocIndex:10},{value:"通过下面的交互示例，你可以直观地看到不同 ",paraId:79,tocIndex:11},{value:"position",paraId:79,tocIndex:11},{value:" 和 ",paraId:79,tocIndex:11},{value:"layout",paraId:79,tocIndex:11},{value:" 组合的效果：",paraId:79,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 400,\n  width: 600,\n});\nconst container = chart.getContainer();\n\nconst data = [\n  { genre: 'Sports', sold: 50 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\nchart.options({\n  type: 'interval',\n  data,\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  legend: {\n    color: {\n      position: 'top',\n      layout: {\n        justifyContent: 'flex-start',\n        alignItems: 'flex-start',\n      },\n    },\n  },\n});\n\nconst positionOptions = [\n  { value: 'top', label: '顶部 (top)' },\n  { value: 'bottom', label: '底部 (bottom)' },\n  { value: 'left', label: '左侧 (left)' },\n  { value: 'right', label: '右侧 (right)' },\n];\n\nconst justifyOptions = [\n  { value: 'flex-start', label: '起始对齐 (flex-start)' },\n  { value: 'center', label: '居中对齐 (center)' },\n  { value: 'flex-end', label: '末尾对齐 (flex-end)' },\n];\n\nconst alignOptions = [\n  { value: 'flex-start', label: '起始对齐 (flex-start)' },\n  { value: 'center', label: '居中对齐 (center)' },\n  { value: 'flex-end', label: '末尾对齐 (flex-end)' },\n];\n\n// 创建控制面板\nconst controlPanel = document.createElement('div');\ncontrolPanel.style.cssText = `\n  margin-bottom: 16px;\n  padding: 16px;\n  background: #f5f5f5;\n  border-radius: 8px;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  gap: 16px;\n`;\n\n// Position 选择器\nconst positionContainer = document.createElement('div');\npositionContainer.innerHTML = `\n  <label style=\"display: block; margin-bottom: 8px; font-weight: bold;\">\n    图例位置 (position):\n  </label>\n`;\nconst positionSelect = document.createElement('select');\npositionSelect.style.cssText = 'width: 100%; padding: 4px;';\npositionSelect.innerHTML = positionOptions\n  .map(\n    (option, index) =>\n      `<option value=\"${option.value}\" ${index === 0 ? 'selected' : ''}>${\n        option.label\n      }</option>`,\n  )\n  .join('');\npositionContainer.appendChild(positionSelect);\n\n// JustifyContent 选择器\nconst justifyContainer = document.createElement('div');\njustifyContainer.innerHTML = `\n  <label style=\"display: block; margin-bottom: 8px; font-weight: bold;\">\n    主轴对齐 (justifyContent):\n  </label>\n`;\nconst justifySelect = document.createElement('select');\njustifySelect.style.cssText = 'width: 100%; padding: 4px;';\njustifySelect.innerHTML = justifyOptions\n  .map(\n    (option, index) =>\n      `<option value=\"${option.value}\" ${index === 0 ? 'selected' : ''}>${\n        option.label\n      }</option>`,\n  )\n  .join('');\njustifyContainer.appendChild(justifySelect);\n\n// AlignItems 选择器\nconst alignContainer = document.createElement('div');\nalignContainer.innerHTML = `\n  <label style=\"display: block; margin-bottom: 8px; font-weight: bold;\">\n    交叉轴对齐 (alignItems):\n  </label>\n`;\nconst alignSelect = document.createElement('select');\nalignSelect.style.cssText = 'width: 100%; padding: 4px;';\nalignSelect.innerHTML = alignOptions\n  .map(\n    (option, index) =>\n      `<option value=\"${option.value}\" ${index === 0 ? 'selected' : ''}>${\n        option.label\n      }</option>`,\n  )\n  .join('');\nalignContainer.appendChild(alignSelect);\n\ncontrolPanel.appendChild(positionContainer);\ncontrolPanel.appendChild(justifyContainer);\ncontrolPanel.appendChild(alignContainer);\n\n// 状态显示\nconst statusDiv = document.createElement('div');\nstatusDiv.style.cssText = `\n  margin-bottom: 16px;\n  padding: 12px;\n  background: #e6f7ff;\n  border: 1px solid #91d5ff;\n  border-radius: 4px;\n  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\n  font-size: 12px;\n`;\n\nconst updateChart = () => {\n  const position = positionSelect.value;\n  const justifyContent = justifySelect.value;\n  const alignItems = alignSelect.value;\n\n  chart.options({\n    legend: {\n      color: {\n        position,\n        layout: {\n          justifyContent,\n          alignItems,\n        },\n      },\n    },\n  });\n  chart.render();\n\n  // 更新状态显示\n  const isHorizontal = position === 'top' || position === 'bottom';\n  const mainAxis = isHorizontal ? '水平' : '垂直';\n  const crossAxis = isHorizontal ? '垂直' : '水平';\n\n  statusDiv.innerHTML = `\n当前配置：position: \"${position}\", justifyContent: \"${justifyContent}\", alignItems: \"${alignItems}\"<br>\n主轴方向：${mainAxis} | 交叉轴方向：${crossAxis}<br>\n主轴对齐：${justifyContent} | 交叉轴对齐：${alignItems}\n  `;\n};\n\n// 绑定事件\npositionSelect.addEventListener('change', updateChart);\njustifySelect.addEventListener('change', updateChart);\nalignSelect.addEventListener('change', updateChart);\n\n// 插入控制面板\ncontainer.insertBefore(controlPanel, container.firstChild);\ncontainer.insertBefore(statusDiv, container.lastChild);\n\n// 初始渲染\nupdateChart();\n",paraId:80,tocIndex:11},{value:"以下是一些常见的图例布局需求及其配置方式：",paraId:81,tocIndex:12},{value:"// 🎯 场景1：顶部居中显示，适合仪表板\n({\n  legend: {\n    color: {\n      position: 'top',\n      layout: {\n        justifyContent: 'center', // 水平居中\n      },\n    },\n  },\n});\n\n// 🎯 场景2：右侧垂直居中，适合详细图表\n({\n  legend: {\n    color: {\n      position: 'right',\n      layout: {\n        justifyContent: 'center', // 垂直居中\n      },\n    },\n  },\n});\n\n// 🎯 场景3：底部左对齐，节省空间\n({\n  legend: {\n    color: {\n      position: 'bottom',\n      layout: {\n        justifyContent: 'flex-start', // 左对齐\n      },\n    },\n  },\n});\n\n// 🎯 场景4：右侧顶部对齐，紧凑布局\n({\n  legend: {\n    color: {\n      position: 'right',\n      layout: {\n        justifyContent: 'flex-start', // 顶部对齐\n      },\n    },\n  },\n});\n\n// 🎯 场景5：左侧底部对齐，与图表底部对齐\n({\n  legend: {\n    color: {\n      position: 'left',\n      layout: {\n        justifyContent: 'flex-end', // 底部对齐\n      },\n    },\n  },\n});\n",paraId:82,tocIndex:12},{value:"💡 ",paraId:83,tocIndex:12},{value:"布局技巧",paraId:83,tocIndex:12},{value:"水平居中",paraId:84,tocIndex:12},{value:"：",paraId:84,tocIndex:12},{value:"position: 'top'",paraId:84,tocIndex:12},{value:" + ",paraId:84,tocIndex:12},{value:"justifyContent: 'center'",paraId:84,tocIndex:12},{value:"垂直居中",paraId:84,tocIndex:12},{value:"：",paraId:84,tocIndex:12},{value:"position: 'right'",paraId:84,tocIndex:12},{value:" + ",paraId:84,tocIndex:12},{value:"justifyContent: 'center'",paraId:84,tocIndex:12},{value:"紧凑布局",paraId:84,tocIndex:12},{value:"：使用 ",paraId:84,tocIndex:12},{value:"flex-start",paraId:84,tocIndex:12},{value:" 让图例紧贴图表",paraId:84,tocIndex:12},{value:" ",paraId:85,tocIndex:13},{value:"number",paraId:85,tocIndex:13},{value:" ",paraId:85,tocIndex:13},{value:"optional",paraId:85,tocIndex:13},{value:" ",paraId:85,tocIndex:13},{value:"Legend 组件的尺寸，用于 G2 内部布局计算和空间分配。影响组件在",paraId:86,tocIndex:13},{value:"交叉轴",paraId:86,tocIndex:13},{value:"上的大小：",paraId:86,tocIndex:13},{value:"对于水平布局图例（",paraId:87,tocIndex:13},{value:"position: 'top'",paraId:87,tocIndex:13},{value:" 或 ",paraId:87,tocIndex:13},{value:"'bottom'",paraId:87,tocIndex:13},{value:"），控制图例的高度",paraId:87,tocIndex:13},{value:"对于垂直布局图例（",paraId:87,tocIndex:13},{value:"position: 'left'",paraId:87,tocIndex:13},{value:" 或 ",paraId:87,tocIndex:13},{value:"'right'",paraId:87,tocIndex:13},{value:"），控制图例的宽度",paraId:87,tocIndex:13},{value:"手动配置会导致 G2 内部计算逻辑失效，需要自己配置 margin、padding、inset 等大小，详见",paraId:88,tocIndex:13},{value:"图表布局",paraId:89,tocIndex:13},{value:"。除非需要定制化的场景，否则不建议配置。",paraId:88,tocIndex:13},{value:" ",paraId:90,tocIndex:14},{value:"number",paraId:90,tocIndex:14},{value:" ",paraId:90,tocIndex:14},{value:"optional",paraId:90,tocIndex:14},{value:" ",paraId:90,tocIndex:14},{value:"Legend 组件的长度，用于 G2 内部布局计算和空间分配。影响组件在",paraId:91,tocIndex:14},{value:"主轴",paraId:91,tocIndex:14},{value:"上的大小：",paraId:91,tocIndex:14},{value:"对于水平布局图例（",paraId:92,tocIndex:14},{value:"position: 'top'",paraId:92,tocIndex:14},{value:" 或 ",paraId:92,tocIndex:14},{value:"'bottom'",paraId:92,tocIndex:14},{value:"），控制图例的宽度",paraId:92,tocIndex:14},{value:"对于垂直布局图例（",paraId:92,tocIndex:14},{value:"position: 'left'",paraId:92,tocIndex:14},{value:" 或 ",paraId:92,tocIndex:14},{value:"'right'",paraId:92,tocIndex:14},{value:"），控制图例的高度",paraId:92,tocIndex:14},{value:" ",paraId:93,tocIndex:15},{value:"number",paraId:93,tocIndex:15},{value:" ",paraId:93,tocIndex:15},{value:"optional",paraId:93,tocIndex:15},{value:" ",paraId:93,tocIndex:15},{value:"Legend 组件和图表的距离。默认为 ",paraId:94,tocIndex:15},{value:"12",paraId:94,tocIndex:15},{value:"。",paraId:94,tocIndex:15},{value:" ",paraId:95,tocIndex:16},{value:"number",paraId:95,tocIndex:16},{value:" ",paraId:95,tocIndex:16},{value:"optional",paraId:95,tocIndex:16},{value:" ",paraId:95,tocIndex:16},{value:"Legend 组件在布局的时候的排序。默认为 ",paraId:96,tocIndex:16},{value:"1",paraId:96,tocIndex:16},{value:"。G2 内部的组件都有默认的排序大小，值越小越靠近图表区域，例如 Title 组件的默认排序是 ",paraId:96,tocIndex:16},{value:"2",paraId:96,tocIndex:16},{value:"，就比默认排序为 ",paraId:96,tocIndex:16},{value:"1",paraId:96,tocIndex:16},{value:" 的 Legend 组件更远离图表区域。",paraId:96,tocIndex:16},{value:" ",paraId:97,tocIndex:17},{value:"LegendTitleCfg",paraId:97,tocIndex:17},{value:" ",paraId:97,tocIndex:17},{value:"optional",paraId:97,tocIndex:17},{value:" ",paraId:97,tocIndex:17},{value:"图例标题配置项。",paraId:98,tocIndex:17},{value:"LegendTitleCfg",paraId:98,tocIndex:17},{value:" 配置如下：",paraId:98,tocIndex:17},{value:"属性",paraId:99,tocIndex:17},{value:"描述",paraId:99,tocIndex:17},{value:"类型",paraId:99,tocIndex:17},{value:"默认值",paraId:99,tocIndex:17},{value:"必选",paraId:99,tocIndex:17},{value:"title",paraId:99,tocIndex:17},{value:"关闭标题或设置标题内容",paraId:99,tocIndex:17},{value:"false | string",paraId:99,tocIndex:17},{value:"连续图例为 true，分类图例为 false",paraId:99,tocIndex:17},{value:"titleSpacing",paraId:99,tocIndex:17},{value:"标题到内容区域的间距",paraId:99,tocIndex:17},{value:"number | number[]",paraId:99,tocIndex:17},{value:"4",paraId:99,tocIndex:17},{value:"titleInset",paraId:99,tocIndex:17},{value:"标题文本内边距",paraId:99,tocIndex:17},{value:"number | number[]",paraId:99,tocIndex:17},{value:"0",paraId:99,tocIndex:17},{value:"titlePosition",paraId:99,tocIndex:17},{value:"标题所处位置。可采用简写形式，如",paraId:99,tocIndex:17},{value:"i",paraId:99,tocIndex:17},{value:" 表示",paraId:99,tocIndex:17},{value:"inner",paraId:99,tocIndex:17},{value:"，如",paraId:99,tocIndex:17},{value:"lt",paraId:99,tocIndex:17},{value:" 表示",paraId:99,tocIndex:17},{value:"left-top",paraId:99,tocIndex:17},{value:"top",paraId:99,tocIndex:17},{value:" | ",paraId:99,tocIndex:17},{value:"bottom",paraId:99,tocIndex:17},{value:" |",paraId:99,tocIndex:17},{value:"left",paraId:99,tocIndex:17},{value:" |",paraId:99,tocIndex:17},{value:"right",paraId:99,tocIndex:17},{value:" |",paraId:99,tocIndex:17},{value:"left-top",paraId:99,tocIndex:17},{value:" |",paraId:99,tocIndex:17},{value:"left-bottom",paraId:99,tocIndex:17},{value:" |",paraId:99,tocIndex:17},{value:"right-top",paraId:99,tocIndex:17},{value:" |",paraId:99,tocIndex:17},{value:"right-bottom",paraId:99,tocIndex:17},{value:" |",paraId:99,tocIndex:17},{value:"inner",paraId:99,tocIndex:17},{value:"-",paraId:99,tocIndex:17},{value:"titleFontSize",paraId:99,tocIndex:17},{value:"标题文字大小",paraId:99,tocIndex:17},{value:"number | (datum, index, data) => number",paraId:99,tocIndex:17},{value:"12",paraId:99,tocIndex:17},{value:"titleFontFamily",paraId:99,tocIndex:17},{value:"标题文字字体",paraId:99,tocIndex:17},{value:"string | (datum, index, data) => string",paraId:99,tocIndex:17},{value:"-",paraId:99,tocIndex:17},{value:"titleFontWeight",paraId:99,tocIndex:17},{value:"标题字体粗细",paraId:99,tocIndex:17},{value:"number | (datum, index, data) => number",paraId:99,tocIndex:17},{value:"normal",paraId:99,tocIndex:17},{value:"titleLineHeight",paraId:99,tocIndex:17},{value:"标题文字的行高",paraId:99,tocIndex:17},{value:"number | (datum, index, data) => number",paraId:99,tocIndex:17},{value:"-",paraId:99,tocIndex:17},{value:"titleTextAlign",paraId:99,tocIndex:17},{value:"设置标题文本内容的当前对齐方式",paraId:99,tocIndex:17},{value:"center",paraId:99,tocIndex:17},{value:" | ",paraId:99,tocIndex:17},{value:"end",paraId:99,tocIndex:17},{value:" | ",paraId:99,tocIndex:17},{value:"left",paraId:99,tocIndex:17},{value:" | ",paraId:99,tocIndex:17},{value:"right",paraId:99,tocIndex:17},{value:" | ",paraId:99,tocIndex:17},{value:"start",paraId:99,tocIndex:17},{value:"start",paraId:99,tocIndex:17},{value:"titleTextBaseline",paraId:99,tocIndex:17},{value:"设置在绘制标题文本时使用的当前文本基线",paraId:99,tocIndex:17},{value:"top",paraId:99,tocIndex:17},{value:" | ",paraId:99,tocIndex:17},{value:"middle",paraId:99,tocIndex:17},{value:" | ",paraId:99,tocIndex:17},{value:"bottom",paraId:99,tocIndex:17},{value:" | ",paraId:99,tocIndex:17},{value:"alphabetic",paraId:99,tocIndex:17},{value:" | ",paraId:99,tocIndex:17},{value:"hanging",paraId:99,tocIndex:17},{value:"bottom",paraId:99,tocIndex:17},{value:"titleFill",paraId:99,tocIndex:17},{value:"标题字体颜色",paraId:99,tocIndex:17},{value:"string | (datum, index, data) => string",paraId:99,tocIndex:17},{value:"#1D2129",paraId:99,tocIndex:17},{value:"titleFillOpacity",paraId:99,tocIndex:17},{value:"标题字体颜色透明度",paraId:99,tocIndex:17},{value:"number | (datum, index, data) => number",paraId:99,tocIndex:17},{value:"0.65",paraId:99,tocIndex:17},{value:"titleStroke",paraId:99,tocIndex:17},{value:"标题字体描边颜色",paraId:99,tocIndex:17},{value:"string | (datum, index, data) => string",paraId:99,tocIndex:17},{value:"-",paraId:99,tocIndex:17},{value:"titleStrokeOpacity",paraId:99,tocIndex:17},{value:"标题字体描边颜色透明度",paraId:99,tocIndex:17},{value:"number | (datum, index, data) => number",paraId:99,tocIndex:17},{value:"-",paraId:99,tocIndex:17},{value:"titleLineWidth",paraId:99,tocIndex:17},{value:"标题描边宽度",paraId:99,tocIndex:17},{value:"number | (datum, index, data) => number",paraId:99,tocIndex:17},{value:"-",paraId:99,tocIndex:17},{value:"titleLineDash",paraId:99,tocIndex:17},{value:"标题字体描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:99,tocIndex:17},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:99,tocIndex:17},{value:"-",paraId:99,tocIndex:17},{value:"titleOpacity",paraId:99,tocIndex:17},{value:"标题文字的整体透明度",paraId:99,tocIndex:17},{value:"number | (datum, index, data) => number",paraId:99,tocIndex:17},{value:"-",paraId:99,tocIndex:17},{value:"titleShadowColor",paraId:99,tocIndex:17},{value:"标题文字阴影颜色",paraId:99,tocIndex:17},{value:"string | (datum, index, data) => string",paraId:99,tocIndex:17},{value:"-",paraId:99,tocIndex:17},{value:"titleShadowBlur",paraId:99,tocIndex:17},{value:"标题文字阴影的高斯模糊系数",paraId:99,tocIndex:17},{value:"number | (datum, index, data) => number",paraId:99,tocIndex:17},{value:"-",paraId:99,tocIndex:17},{value:"titleShadowOffsetX",paraId:99,tocIndex:17},{value:"标题阴影水平偏移量",paraId:99,tocIndex:17},{value:"number | (datum, index, data) => number",paraId:99,tocIndex:17},{value:"-",paraId:99,tocIndex:17},{value:"titleShadowOffsetY",paraId:99,tocIndex:17},{value:"标题阴影垂直偏移量",paraId:99,tocIndex:17},{value:"number | (datum, index, data) => number",paraId:99,tocIndex:17},{value:"-",paraId:99,tocIndex:17},{value:"titleCursor",paraId:99,tocIndex:17},{value:"标题鼠标样式。同 css 的鼠标样式。",paraId:99,tocIndex:17},{value:"string | (datum, index, data) => string",paraId:99,tocIndex:17},{value:"default",paraId:99,tocIndex:17},{value:"在 Legend 组件中配置标题的时候，不是以对象的形式来配置，而是以 ",paraId:100,tocIndex:17},{value:"title",paraId:100,tocIndex:17},{value:"前缀加属性的方式来配置。",paraId:100,tocIndex:17},{value:"({\n  legend: {\n    size: {\n      title: '图例标题',\n      titleSpacing: 0,\n      titleInset: 0,\n      titlePosition: 't',\n      titleFontSize: 16,\n      titleFontFamily: 'sans-serif',\n      titleFontWeight: 500,\n      titleLineHeight: 20,\n      titleTextAlign: 'center',\n      titleTextBaseline: 'middle',\n      titleFill: '#000',\n      titleFillOpacity: 0.9,\n      titleStroke: '#DAF5EC',\n      titleStrokeOpacity: 0.9,\n      titleLineWidth: 2,\n      titleLineDash: [4, 8],\n      titleOpacity: 1,\n      titleShadowColor: '#d3d3d3',\n      titleShadowBlur: 10,\n      titleShadowOffsetX: 10,\n      titleShadowOffsetY: 10,\n      titleCursor: 'pointer',\n    },\n  },\n});\n",paraId:101,tocIndex:17},{value:"尝试一下:",paraId:102,tocIndex:17},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', height: 300 });\n\nchart.options({\n  type: 'legends',\n  title: '图例标题',\n  titleSpacing: 0,\n  titleInset: 0,\n  titlePosition: 't',\n  titleFontSize: 16,\n  titleFontFamily: 'sans-serif',\n  titleFontWeight: 500,\n  titleLineHeight: 20,\n  titleTextAlign: 'center',\n  titleTextBaseline: 'middle',\n  titleFill: '#000',\n  titleFillOpacity: 0.9,\n  titleStroke: '#DAF5EC',\n  titleStrokeOpacity: 0.9,\n  titleLineWidth: 2,\n  titleLineDash: [4, 8],\n  titleOpacity: 1,\n  titleShadowColor: '#d3d3d3',\n  titleShadowBlur: 10,\n  titleShadowOffsetX: 10,\n  titleShadowOffsetY: 10,\n  titleCursor: 'pointer',\n  scale: {\n    size: {\n      type: 'linear',\n      domain: [0, 10],\n      range: [0, 100],\n    },\n  },\n});\n\nchart.render();\n",paraId:103,tocIndex:17},{value:" ",paraId:104,tocIndex:18},{value:"number",paraId:104,tocIndex:18},{value:" ",paraId:104,tocIndex:18},{value:"optional",paraId:104,tocIndex:18},{value:" ",paraId:104,tocIndex:18},{value:"适用于 ",paraId:105,tocIndex:18},{value:"分类图例",paraId:106,tocIndex:18},{value:" 。指定每行显示的图例项数量，为空时表示列数不受限制。",paraId:105,tocIndex:18},{value:"图例布局默认采用",paraId:107,tocIndex:18},{value:"流式布局",paraId:107,tocIndex:18},{value:"。",paraId:107,tocIndex:18},{value:"当指定 ",paraId:108,tocIndex:18},{value:"cols",paraId:108,tocIndex:18},{value:" 之后会采用",paraId:108,tocIndex:18},{value:"网格布局",paraId:108,tocIndex:18},{value:"。",paraId:108,tocIndex:18},{value:" ",paraId:109,tocIndex:19},{value:"number",paraId:109,tocIndex:19},{value:" ",paraId:109,tocIndex:19},{value:"optional",paraId:109,tocIndex:19},{value:" ",paraId:109,tocIndex:19},{value:"适用于 ",paraId:110,tocIndex:19},{value:"分类图例",paraId:111,tocIndex:19},{value:" 。指定图例项之间的横向间隔。默认为 ",paraId:110,tocIndex:19},{value:"12",paraId:110,tocIndex:19},{value:"。",paraId:110,tocIndex:19},{value:" ",paraId:112,tocIndex:20},{value:"number",paraId:112,tocIndex:20},{value:" ",paraId:112,tocIndex:20},{value:"optional",paraId:112,tocIndex:20},{value:" ",paraId:112,tocIndex:20},{value:"适用于 ",paraId:113,tocIndex:20},{value:"分类图例",paraId:114,tocIndex:20},{value:" 。指定图例项之间的纵向间隔。默认为 ",paraId:113,tocIndex:20},{value:"8",paraId:113,tocIndex:20},{value:"。",paraId:113,tocIndex:20},{value:" ",paraId:115,tocIndex:21},{value:"number",paraId:115,tocIndex:21},{value:" ",paraId:115,tocIndex:21},{value:"optional",paraId:115,tocIndex:21},{value:" ",paraId:115,tocIndex:21},{value:"适用于 ",paraId:116,tocIndex:21},{value:"分类图例",paraId:117,tocIndex:21},{value:" 。指定图例最大行数。默认为 ",paraId:116,tocIndex:21},{value:"3",paraId:116,tocIndex:21},{value:"。",paraId:116,tocIndex:21},{value:"⚠️ ",paraId:118,tocIndex:21},{value:"注意",paraId:118,tocIndex:21},{value:"：此配置仅在",paraId:118,tocIndex:21},{value:"水平布局",paraId:118,tocIndex:21},{value:"（",paraId:118,tocIndex:21},{value:"position: 'top'",paraId:118,tocIndex:21},{value:" 或 ",paraId:118,tocIndex:21},{value:"'bottom'",paraId:118,tocIndex:21},{value:"）时生效。当图例位置为 ",paraId:118,tocIndex:21},{value:"'left'",paraId:118,tocIndex:21},{value:" 或 ",paraId:118,tocIndex:21},{value:"'right'",paraId:118,tocIndex:21},{value:" 时，G2 会根据容器高度自动计算行数，",paraId:118,tocIndex:21},{value:"maxRows",paraId:118,tocIndex:21},{value:" 配置将被忽略。",paraId:118,tocIndex:21},{value:" ",paraId:119,tocIndex:22},{value:"number",paraId:119,tocIndex:22},{value:" ",paraId:119,tocIndex:22},{value:"optional",paraId:119,tocIndex:22},{value:" ",paraId:119,tocIndex:22},{value:"适用于 ",paraId:120,tocIndex:22},{value:"分类图例",paraId:121,tocIndex:22},{value:" 。指定图例最大列数。默认为 ",paraId:120,tocIndex:22},{value:"3",paraId:120,tocIndex:22},{value:"。",paraId:120,tocIndex:22},{value:"⚠️ ",paraId:122,tocIndex:22},{value:"注意",paraId:122,tocIndex:22},{value:"：此配置仅在",paraId:122,tocIndex:22},{value:"垂直布局",paraId:122,tocIndex:22},{value:"（",paraId:122,tocIndex:22},{value:"position: 'left'",paraId:122,tocIndex:22},{value:" 或 ",paraId:122,tocIndex:22},{value:"'right'",paraId:122,tocIndex:22},{value:"）时生效。当图例位置为 ",paraId:122,tocIndex:22},{value:"'top'",paraId:122,tocIndex:22},{value:" 或 ",paraId:122,tocIndex:22},{value:"'bottom'",paraId:122,tocIndex:22},{value:" 时，G2 会根据容器宽度自动计算列数，",paraId:122,tocIndex:22},{value:"maxCols",paraId:122,tocIndex:22},{value:" 配置将被忽略。",paraId:122,tocIndex:22},{value:"💡 ",paraId:123,tocIndex:22},{value:"maxRows 和 maxCols 是怎么作用于图例布局的？",paraId:123,tocIndex:22},{value:"maxRows 和 maxCols 用于限制图例布局的最大行数和列数，但它们在不同布局方向下的作用效果不同：",paraId:124,tocIndex:22},{value:"参数",paraId:125,tocIndex:22},{value:"水平布局（top/bottom）",paraId:125,tocIndex:22},{value:"垂直布局（left/right）",paraId:125,tocIndex:22},{value:"maxRows",paraId:125,tocIndex:22},{value:"✅ 限制行数，控制图例高度",paraId:125,tocIndex:22},{value:"❌ ",paraId:125,tocIndex:22},{value:"不生效",paraId:125,tocIndex:22},{value:"，行数由容器高度自动计算",paraId:125,tocIndex:22},{value:"maxCols",paraId:125,tocIndex:22},{value:"❌ ",paraId:125,tocIndex:22},{value:"不生效",paraId:125,tocIndex:22},{value:"，行数由容器宽度自动计算",paraId:125,tocIndex:22},{value:"✅ 限制列数，控制图例宽度",paraId:125,tocIndex:22},{value:"⚠️ ",paraId:126,tocIndex:22},{value:"注意",paraId:126,tocIndex:22},{value:"：当使用",paraId:126,tocIndex:22},{value:"maxRows",paraId:126,tocIndex:22},{value:" 和 ",paraId:126,tocIndex:22},{value:"maxCols",paraId:126,tocIndex:22},{value:" 的时候，避免手动配置图例容器的 ",paraId:126,tocIndex:22},{value:"size",paraId:126,tocIndex:22},{value:" 和 ",paraId:126,tocIndex:22},{value:"length",paraId:126,tocIndex:22},{value:"。",paraId:126,tocIndex:22},{value:" ",paraId:127,tocIndex:23},{value:"LegendItemMarkerCfg",paraId:127,tocIndex:23},{value:" ",paraId:127,tocIndex:23},{value:"optional",paraId:127,tocIndex:23},{value:" ",paraId:127,tocIndex:23},{value:"适用于 ",paraId:128,tocIndex:23},{value:"分类图例",paraId:129,tocIndex:23},{value:" 。配置图例项的图标。",paraId:128,tocIndex:23},{value:"LegendItemMarkerCfg",paraId:128,tocIndex:23},{value:" 配置如下：",paraId:128,tocIndex:23},{value:"属性",paraId:130,tocIndex:23},{value:"描述",paraId:130,tocIndex:23},{value:"类型",paraId:130,tocIndex:23},{value:"默认值",paraId:130,tocIndex:23},{value:"必选",paraId:130,tocIndex:23},{value:"itemMarker",paraId:130,tocIndex:23},{value:"图例项图标",paraId:130,tocIndex:23},{value:"Symbols",paraId:130,tocIndex:23},{value:" |(datum, index, data)=>",paraId:130,tocIndex:23},{value:"Symbols",paraId:130,tocIndex:23},{value:"circle",paraId:130,tocIndex:23},{value:"itemMarkerSize",paraId:130,tocIndex:23},{value:"图例项图标大小",paraId:130,tocIndex:23},{value:"number | (datum, index, data) => number",paraId:130,tocIndex:23},{value:"8",paraId:130,tocIndex:23},{value:"itemMarkerFill",paraId:130,tocIndex:23},{value:"图例项图标填充色",paraId:130,tocIndex:23},{value:"string | (datum, index, data) => string",paraId:130,tocIndex:23},{value:"-",paraId:130,tocIndex:23},{value:"itemMarkerFillOpacity",paraId:130,tocIndex:23},{value:"图例项图标填充透明度",paraId:130,tocIndex:23},{value:"number | (datum, index, data) => number",paraId:130,tocIndex:23},{value:"1",paraId:130,tocIndex:23},{value:"itemMarkerStroke",paraId:130,tocIndex:23},{value:"图例项图标的描边",paraId:130,tocIndex:23},{value:"string | (datum, index, data) => string",paraId:130,tocIndex:23},{value:"-",paraId:130,tocIndex:23},{value:"itemMarkerStrokeOpacity",paraId:130,tocIndex:23},{value:"图例项图标描边透明度",paraId:130,tocIndex:23},{value:"number | (datum, index, data) => number",paraId:130,tocIndex:23},{value:"-",paraId:130,tocIndex:23},{value:"itemMarkerLineWidth",paraId:130,tocIndex:23},{value:"图例项图标描边的宽度",paraId:130,tocIndex:23},{value:"number | (datum, index, data) => number",paraId:130,tocIndex:23},{value:"线形图标为",paraId:130,tocIndex:23},{value:"4",paraId:130,tocIndex:23},{value:"itemMarkerLineDash",paraId:130,tocIndex:23},{value:"图例项图标描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:130,tocIndex:23},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:130,tocIndex:23},{value:"-",paraId:130,tocIndex:23},{value:"itemMarkerOpacity",paraId:130,tocIndex:23},{value:"图例项图标的整体透明度",paraId:130,tocIndex:23},{value:"number | (datum, index, data) => number",paraId:130,tocIndex:23},{value:"-",paraId:130,tocIndex:23},{value:"itemMarkerShadowColor",paraId:130,tocIndex:23},{value:"图例项图标阴影颜色",paraId:130,tocIndex:23},{value:"string | (datum, index, data) => string",paraId:130,tocIndex:23},{value:"-",paraId:130,tocIndex:23},{value:"itemMarkerShadowBlur",paraId:130,tocIndex:23},{value:"图例项图标阴影的高斯模糊系数",paraId:130,tocIndex:23},{value:"number | (datum, index, data) => number",paraId:130,tocIndex:23},{value:"-",paraId:130,tocIndex:23},{value:"itemMarkerShadowOffsetX",paraId:130,tocIndex:23},{value:"设置阴影距图例项图标的水平距离",paraId:130,tocIndex:23},{value:"number | (datum, index, data) => number",paraId:130,tocIndex:23},{value:"-",paraId:130,tocIndex:23},{value:"itemMarkerShadowOffsetY",paraId:130,tocIndex:23},{value:"设置阴影距图例项图标的垂直距离",paraId:130,tocIndex:23},{value:"number | (datum, index, data) => number",paraId:130,tocIndex:23},{value:"-",paraId:130,tocIndex:23},{value:"itemMarkerCursor",paraId:130,tocIndex:23},{value:"图例项图标鼠标样式。同 css 的鼠标样式。",paraId:130,tocIndex:23},{value:"string | (datum, index, data) => string",paraId:130,tocIndex:23},{value:"default",paraId:130,tocIndex:23},{value:"属性",paraId:131,tocIndex:24},{value:"描述",paraId:131,tocIndex:24},{value:"bowtie",paraId:131,tocIndex:24},{value:"图形类型：蝴蝶结",paraId:131,tocIndex:24},{value:"cross",paraId:131,tocIndex:24},{value:"图形类型：十字",paraId:131,tocIndex:24},{value:"dash",paraId:131,tocIndex:24},{value:"图形类型：短横线",paraId:131,tocIndex:24},{value:"diamond",paraId:131,tocIndex:24},{value:"图形类型：菱形",paraId:131,tocIndex:24},{value:"dot",paraId:131,tocIndex:24},{value:"图形类型：点",paraId:131,tocIndex:24},{value:"hexagon",paraId:131,tocIndex:24},{value:"图形类型：六边形",paraId:131,tocIndex:24},{value:"hollowBowtie",paraId:131,tocIndex:24},{value:"图形类型：空心蝴蝶结",paraId:131,tocIndex:24},{value:"hollowDiamond",paraId:131,tocIndex:24},{value:"图形类型：空心菱形",paraId:131,tocIndex:24},{value:"hollowHexagon",paraId:131,tocIndex:24},{value:"图形类型：空心六边形",paraId:131,tocIndex:24},{value:"hollowPoint",paraId:131,tocIndex:24},{value:"图形类型：空心点",paraId:131,tocIndex:24},{value:"hollowSquare",paraId:131,tocIndex:24},{value:"图形类型：空心正方形",paraId:131,tocIndex:24},{value:"hollowTriangle",paraId:131,tocIndex:24},{value:"图形类型：空心三角形",paraId:131,tocIndex:24},{value:"hollowTriangleDown",paraId:131,tocIndex:24},{value:"图形类型：倒空心三角形",paraId:131,tocIndex:24},{value:"hv",paraId:131,tocIndex:24},{value:"样式类型：HV 路径",paraId:131,tocIndex:24},{value:"hvh",paraId:131,tocIndex:24},{value:"样式类型：HVH 路径",paraId:131,tocIndex:24},{value:"hyphen",paraId:131,tocIndex:24},{value:"图形类型：连字符",paraId:131,tocIndex:24},{value:"line",paraId:131,tocIndex:24},{value:"图形类型：直线",paraId:131,tocIndex:24},{value:"plus",paraId:131,tocIndex:24},{value:"图形类型：加号",paraId:131,tocIndex:24},{value:"point",paraId:131,tocIndex:24},{value:"图形类型：实心点",paraId:131,tocIndex:24},{value:"rect",paraId:131,tocIndex:24},{value:"图形类型：矩形",paraId:131,tocIndex:24},{value:"smooth",paraId:131,tocIndex:24},{value:"样式类型：平滑曲线",paraId:131,tocIndex:24},{value:"square",paraId:131,tocIndex:24},{value:"图形类型：正方形",paraId:131,tocIndex:24},{value:"tick",paraId:131,tocIndex:24},{value:"图形类型：刻度线",paraId:131,tocIndex:24},{value:"triangleDown",paraId:131,tocIndex:24},{value:"图形类型：倒三角形",paraId:131,tocIndex:24},{value:"triangle",paraId:131,tocIndex:24},{value:"图形类型：三角形",paraId:131,tocIndex:24},{value:"vh",paraId:131,tocIndex:24},{value:"样式类型：VH 路径",paraId:131,tocIndex:24},{value:"vhv",paraId:131,tocIndex:24},{value:"样式类型：VHV 路径",paraId:131,tocIndex:24},{value:"尝试一下：",paraId:132,tocIndex:24},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\n// 可选的itemMarker形状\nconst shapeList = [\n  'bowtie',\n  'cross',\n  'dash',\n  'diamond',\n  'dot',\n  'hexagon',\n  'hollowBowtie',\n  'hollowDiamond',\n  'hollowHexagon',\n  'hollowPoint',\n  'hollowSquare',\n  'hollowTriangle',\n  'hollowTriangleDown',\n  'hv',\n  'hvh',\n  'hyphen',\n  'line',\n  'plus',\n  'point',\n  'rect',\n  'smooth',\n  'square',\n  'tick',\n  'triangleDown',\n  'triangle',\n  'vh',\n  'vhv',\n];\nconst shapeMap = shapeList.map((p) => {\n  return {\n    label: p,\n    value: p,\n  };\n});\n\nchart.options({\n  type: 'legends',\n  height: 60,\n  itemMarker: 'bowtie',\n  scale: {\n    color: {\n      type: 'ordinal',\n      domain: ['a', 'b'],\n      range: ['steelblue', 'orange'],\n    },\n  },\n});\n\nconst handleSetShape = (shape) => {\n  chart.options({\n    itemMarker: shape,\n  });\n  chart.render(); // 重新渲染图表\n};\n\nconst selectorContainer = document.createElement('div');\nselectorContainer.textContent = '选择图例项图标的形状 ';\nconst selector = document.createElement('select');\nselector.innerHTML = shapeMap.map(\n  (shape, index) =>\n    `<option value=\"${shape.value}\" ${index === 0 ? 'selected' : ''}>${\n      shape.label\n    }</option>`,\n);\nselector.onchange = (e) => {\n  handleSetShape(e.target.value);\n};\nselectorContainer.appendChild(selector);\ncontainer.insertBefore(selectorContainer, container.childNodes[0]);\n\nchart.render();\n",paraId:133,tocIndex:24},{value:"在 Legend 组件中配置图例项图标的时候，不是以对象的形式来配置，而是以 ",paraId:134,tocIndex:24},{value:"itemMarker",paraId:134,tocIndex:24},{value:"前缀加属性的方式来配置。",paraId:134,tocIndex:24},{value:"({\n  legend: {\n    color: {\n      itemMarker: 'rect',\n      itemMarkerSize: 20,\n      itemMarkerFill: '#000',\n      itemMarkerFillOpacity: 0.9,\n      itemMarkerStroke: '#DAF5EC',\n      itemMarkerStrokeOpacity: 0.9,\n      itemMarkerLineWidth: 2,\n      itemMarkerLineDash: [4, 8],\n      itemMarkerOpacity: 1,\n      itemMarkerShadowColor: '#d3d3d3',\n      itemMarkerShadowBlur: 10,\n      itemMarkerShadowOffsetX: 10,\n      itemMarkerShadowOffsetY: 10,\n      itemMarkerCursor: 'pointer',\n    },\n  },\n});\n",paraId:135,tocIndex:24},{value:" ",paraId:136,tocIndex:25},{value:"LegendItemLabelCfg",paraId:136,tocIndex:25},{value:" ",paraId:136,tocIndex:25},{value:"optional",paraId:136,tocIndex:25},{value:" ",paraId:136,tocIndex:25},{value:"适用于 ",paraId:137,tocIndex:25},{value:"分类图例",paraId:138,tocIndex:25},{value:" 。配置图例项的标签。",paraId:137,tocIndex:25},{value:"LegendItemLabelCfg",paraId:137,tocIndex:25},{value:" 配置如下：",paraId:137,tocIndex:25},{value:"属性",paraId:139,tocIndex:25},{value:"描述",paraId:139,tocIndex:25},{value:"类型",paraId:139,tocIndex:25},{value:"默认值",paraId:139,tocIndex:25},{value:"必选",paraId:139,tocIndex:25},{value:"itemLabelText",paraId:139,tocIndex:25},{value:"图例项标签内容",paraId:139,tocIndex:25},{value:"string | (datum, index, data) => string",paraId:139,tocIndex:25},{value:"-",paraId:139,tocIndex:25},{value:"itemLabelFontSize",paraId:139,tocIndex:25},{value:"图例项标签文字大小",paraId:139,tocIndex:25},{value:"number | (datum, index, data) => number",paraId:139,tocIndex:25},{value:"12",paraId:139,tocIndex:25},{value:"itemLabelFontFamily",paraId:139,tocIndex:25},{value:"图例项标签文字字体",paraId:139,tocIndex:25},{value:"string | (datum, index, data) => string",paraId:139,tocIndex:25},{value:"-",paraId:139,tocIndex:25},{value:"itemLabelFontWeight",paraId:139,tocIndex:25},{value:"图例项标签字体粗细",paraId:139,tocIndex:25},{value:"number | (datum, index, data) => number",paraId:139,tocIndex:25},{value:"normal",paraId:139,tocIndex:25},{value:"itemLabelLineHeight",paraId:139,tocIndex:25},{value:"图例项标签文字的行高",paraId:139,tocIndex:25},{value:"number | (datum, index, data) => number",paraId:139,tocIndex:25},{value:"-",paraId:139,tocIndex:25},{value:"itemLabelTextAlign",paraId:139,tocIndex:25},{value:"设置图例项标签文本内容的当前对齐方式",paraId:139,tocIndex:25},{value:"center",paraId:139,tocIndex:25},{value:" | ",paraId:139,tocIndex:25},{value:"end",paraId:139,tocIndex:25},{value:" | ",paraId:139,tocIndex:25},{value:"left",paraId:139,tocIndex:25},{value:" | ",paraId:139,tocIndex:25},{value:"right",paraId:139,tocIndex:25},{value:" | ",paraId:139,tocIndex:25},{value:"start",paraId:139,tocIndex:25},{value:"start",paraId:139,tocIndex:25},{value:"itemLabelTextBaseline",paraId:139,tocIndex:25},{value:"设置在绘制图例项标签文本时使用的当前文本基线",paraId:139,tocIndex:25},{value:"top",paraId:139,tocIndex:25},{value:" | ",paraId:139,tocIndex:25},{value:"middle",paraId:139,tocIndex:25},{value:" | ",paraId:139,tocIndex:25},{value:"bottom",paraId:139,tocIndex:25},{value:" | ",paraId:139,tocIndex:25},{value:"alphabetic",paraId:139,tocIndex:25},{value:" | ",paraId:139,tocIndex:25},{value:"hanging",paraId:139,tocIndex:25},{value:"bottom",paraId:139,tocIndex:25},{value:"itemLabelFill",paraId:139,tocIndex:25},{value:"图例项标签字体颜色",paraId:139,tocIndex:25},{value:"string | (datum, index, data) => string",paraId:139,tocIndex:25},{value:"#1D2129",paraId:139,tocIndex:25},{value:"itemLabelFillOpacity",paraId:139,tocIndex:25},{value:"图例项标签字体颜色透明度",paraId:139,tocIndex:25},{value:"number | (datum, index, data) => number",paraId:139,tocIndex:25},{value:"0.9",paraId:139,tocIndex:25},{value:"itemLabelStroke",paraId:139,tocIndex:25},{value:"图例项标签字体描边颜色",paraId:139,tocIndex:25},{value:"string | (datum, index, data) => string",paraId:139,tocIndex:25},{value:"-",paraId:139,tocIndex:25},{value:"itemLabelStrokeOpacity",paraId:139,tocIndex:25},{value:"图例项标签字体描边颜色透明度",paraId:139,tocIndex:25},{value:"number | (datum, index, data) => number",paraId:139,tocIndex:25},{value:"-",paraId:139,tocIndex:25},{value:"itemLabelLineWidth",paraId:139,tocIndex:25},{value:"图例项标签字体描边的宽度",paraId:139,tocIndex:25},{value:"number | (datum, index, data) => number",paraId:139,tocIndex:25},{value:"-",paraId:139,tocIndex:25},{value:"itemLabelLineDash",paraId:139,tocIndex:25},{value:"图例项标签字体描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:139,tocIndex:25},{value:"[number,number] | (da tu m, index, data) => [number , number]",paraId:139,tocIndex:25},{value:"-",paraId:139,tocIndex:25},{value:"itemLabelOpacity",paraId:139,tocIndex:25},{value:"图例项标签文字的整体透明度",paraId:139,tocIndex:25},{value:"number | (datum, index, data) => number",paraId:139,tocIndex:25},{value:"-",paraId:139,tocIndex:25},{value:"itemLabelShadowColor",paraId:139,tocIndex:25},{value:"图例项标签文字阴影颜色",paraId:139,tocIndex:25},{value:"string | (datum, index, data) => string",paraId:139,tocIndex:25},{value:"-",paraId:139,tocIndex:25},{value:"itemLabelShadowBlur",paraId:139,tocIndex:25},{value:"图例项标签文字阴影的高斯模糊系数",paraId:139,tocIndex:25},{value:"number | (datum, index, data) => number",paraId:139,tocIndex:25},{value:"-",paraId:139,tocIndex:25},{value:"itemLabelShadowOffsetX",paraId:139,tocIndex:25},{value:"设置阴影距图例项标签文字的水平距离",paraId:139,tocIndex:25},{value:"number | (datum, index, data) => number",paraId:139,tocIndex:25},{value:"-",paraId:139,tocIndex:25},{value:"itemLabelShadowOffsetY",paraId:139,tocIndex:25},{value:"设置阴影距图例项标签文字的垂直距离",paraId:139,tocIndex:25},{value:"number | (datum, index, data) => number",paraId:139,tocIndex:25},{value:"-",paraId:139,tocIndex:25},{value:"itemLabelCursor",paraId:139,tocIndex:25},{value:"图例项标签鼠标样式。同 css 的鼠标样式。",paraId:139,tocIndex:25},{value:"string | (datum, index, data) => string",paraId:139,tocIndex:25},{value:"default",paraId:139,tocIndex:25},{value:"在 Legend 组件中配置图例项标签的时候，不是以对象的形式来配置，而是以 ",paraId:140,tocIndex:25},{value:"itemLabel",paraId:140,tocIndex:25},{value:"前缀加属性的方式来配置。",paraId:140,tocIndex:25},{value:"({\n  legend: {\n    color: {\n      itemLabelText: '图例项标签',\n      itemLabelFontSize: 16,\n      itemLabelFontFamily: 'sans-serif',\n      itemLabelFontWeight: 500,\n      itemLabelLineHeight: 20,\n      itemLabelTextAlign: 'center',\n      itemLabelTextBaseline: 'middle',\n      itemLabelFill: '#000',\n      itemLabelFillOpacity: 0.9,\n      itemLabelStroke: '#DAF5EC',\n      itemLabelStrokeOpacity: 0.9,\n      itemLabelLineWidth: 2,\n      itemLabelLineDash: [4, 8],\n      itemLabelOpacity: 1,\n      itemLabelShadowColor: '#d3d3d3',\n      itemLabelShadowBlur: 10,\n      itemLabelShadowOffsetX: 10,\n      itemLabelShadowOffsetY: 10,\n      itemLabelCursor: 'pointer',\n    },\n  },\n});\n",paraId:141,tocIndex:25},{value:" ",paraId:142,tocIndex:26},{value:"LegendItemValueCfg",paraId:142,tocIndex:26},{value:" ",paraId:142,tocIndex:26},{value:"optional",paraId:142,tocIndex:26},{value:" ",paraId:142,tocIndex:26},{value:"适用于 ",paraId:143,tocIndex:26},{value:"分类图例",paraId:144,tocIndex:26},{value:" 。配置图例项的值。",paraId:143,tocIndex:26},{value:"LegendItemValueCfg",paraId:143,tocIndex:26},{value:" 配置如下：",paraId:143,tocIndex:26},{value:"属性",paraId:145,tocIndex:26},{value:"描述",paraId:145,tocIndex:26},{value:"类型",paraId:145,tocIndex:26},{value:"默认值",paraId:145,tocIndex:26},{value:"必选",paraId:145,tocIndex:26},{value:"itemValueText",paraId:145,tocIndex:26},{value:"图例项值内容",paraId:145,tocIndex:26},{value:"string | (datum, index, data) => string",paraId:145,tocIndex:26},{value:"-",paraId:145,tocIndex:26},{value:"itemValueFontSize",paraId:145,tocIndex:26},{value:"图例项值文字大小",paraId:145,tocIndex:26},{value:"number | (datum, index, data) => number",paraId:145,tocIndex:26},{value:"12",paraId:145,tocIndex:26},{value:"itemValueFontFamily",paraId:145,tocIndex:26},{value:"图例项值文字字体",paraId:145,tocIndex:26},{value:"string | (datum, index, data) => string",paraId:145,tocIndex:26},{value:"-",paraId:145,tocIndex:26},{value:"itemValueFontWeight",paraId:145,tocIndex:26},{value:"图例项值字体粗细",paraId:145,tocIndex:26},{value:"number | (datum, index, data) => number",paraId:145,tocIndex:26},{value:"normal",paraId:145,tocIndex:26},{value:"itemValueLineHeight",paraId:145,tocIndex:26},{value:"图例项值文字的行高",paraId:145,tocIndex:26},{value:"number | (datum, index, data) => number",paraId:145,tocIndex:26},{value:"-",paraId:145,tocIndex:26},{value:"itemValueTextAlign",paraId:145,tocIndex:26},{value:"设置图例项值文本内容的当前对齐方式",paraId:145,tocIndex:26},{value:"center",paraId:145,tocIndex:26},{value:" | ",paraId:145,tocIndex:26},{value:"end",paraId:145,tocIndex:26},{value:" | ",paraId:145,tocIndex:26},{value:"left",paraId:145,tocIndex:26},{value:" | ",paraId:145,tocIndex:26},{value:"right",paraId:145,tocIndex:26},{value:" | ",paraId:145,tocIndex:26},{value:"start",paraId:145,tocIndex:26},{value:"start",paraId:145,tocIndex:26},{value:"itemValueTextBaseline",paraId:145,tocIndex:26},{value:"设置在绘制图例项值文本时使用的当前文本基线",paraId:145,tocIndex:26},{value:"top",paraId:145,tocIndex:26},{value:" | ",paraId:145,tocIndex:26},{value:"middle",paraId:145,tocIndex:26},{value:" | ",paraId:145,tocIndex:26},{value:"bottom",paraId:145,tocIndex:26},{value:" | ",paraId:145,tocIndex:26},{value:"alphabetic",paraId:145,tocIndex:26},{value:" | ",paraId:145,tocIndex:26},{value:"hanging",paraId:145,tocIndex:26},{value:"bottom",paraId:145,tocIndex:26},{value:"itemValueFill",paraId:145,tocIndex:26},{value:"图例项值字体颜色",paraId:145,tocIndex:26},{value:"string | (datum, index, data) => string",paraId:145,tocIndex:26},{value:"#1D2129",paraId:145,tocIndex:26},{value:"itemValueFillOpacity",paraId:145,tocIndex:26},{value:"图例项值字体颜色透明度",paraId:145,tocIndex:26},{value:"number | (datum, index, data) => number",paraId:145,tocIndex:26},{value:"0.65",paraId:145,tocIndex:26},{value:"itemValueStroke",paraId:145,tocIndex:26},{value:"图例项值字体描边颜色",paraId:145,tocIndex:26},{value:"string | (datum, index, data) => string",paraId:145,tocIndex:26},{value:"-",paraId:145,tocIndex:26},{value:"itemValueStrokeOpacity",paraId:145,tocIndex:26},{value:"图例项值字体描边颜色透明度",paraId:145,tocIndex:26},{value:"number | (datum, index, data) => number",paraId:145,tocIndex:26},{value:"-",paraId:145,tocIndex:26},{value:"itemValueLineWidth",paraId:145,tocIndex:26},{value:"图例项值字体描边的宽度",paraId:145,tocIndex:26},{value:"number | (datum, index, data) => number",paraId:145,tocIndex:26},{value:"-",paraId:145,tocIndex:26},{value:"itemValueLineDash",paraId:145,tocIndex:26},{value:"图例项值字体描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:145,tocIndex:26},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:145,tocIndex:26},{value:"-",paraId:145,tocIndex:26},{value:"itemValueOpacity",paraId:145,tocIndex:26},{value:"图例项值文字的整体透明度",paraId:145,tocIndex:26},{value:"number | (datum, index, data) => number",paraId:145,tocIndex:26},{value:"-",paraId:145,tocIndex:26},{value:"itemValueShadowColor",paraId:145,tocIndex:26},{value:"图例项值文字阴影颜色",paraId:145,tocIndex:26},{value:"string | (datum, index, data) => string",paraId:145,tocIndex:26},{value:"-",paraId:145,tocIndex:26},{value:"itemValueShadowBlur",paraId:145,tocIndex:26},{value:"图例项值文字阴影的高斯模糊系数",paraId:145,tocIndex:26},{value:"number | (datum, index, data) => number",paraId:145,tocIndex:26},{value:"-",paraId:145,tocIndex:26},{value:"itemValueShadowOffsetX",paraId:145,tocIndex:26},{value:"设置阴影距图例项值文字的水平距离",paraId:145,tocIndex:26},{value:"number | (datum, index, data) => number",paraId:145,tocIndex:26},{value:"-",paraId:145,tocIndex:26},{value:"itemValueShadowOffsetY",paraId:145,tocIndex:26},{value:"设置阴影距图例项值文字的垂直距离",paraId:145,tocIndex:26},{value:"number | (datum, index, data) => number",paraId:145,tocIndex:26},{value:"-",paraId:145,tocIndex:26},{value:"itemValueCursor",paraId:145,tocIndex:26},{value:"图例项值鼠标样式。同 css 的鼠标样式。",paraId:145,tocIndex:26},{value:"string | (datum, index, data) => string",paraId:145,tocIndex:26},{value:"default",paraId:145,tocIndex:26},{value:"在 Legend 组件中配置图例项值的时候，不是以对象的形式来配置，而是以 ",paraId:146,tocIndex:26},{value:"itemValue",paraId:146,tocIndex:26},{value:"前缀加属性的方式来配置。",paraId:146,tocIndex:26},{value:"({\n  legend: {\n    color: {\n      itemValueText: '图例项值',\n      itemValueFontSize: 16,\n      itemValueFontFamily: 'sans-serif',\n      itemValueFontWeight: 500,\n      itemValueLineHeight: 20,\n      itemValueTextAlign: 'center',\n      itemValueTextBaseline: 'middle',\n      itemValueFill: '#000',\n      itemValueFillOpacity: 0.9,\n      itemValueStroke: '#DAF5EC',\n      itemValueStrokeOpacity: 0.9,\n      itemValueLineWidth: 2,\n      itemValueLineDash: [4, 8],\n      itemValueOpacity: 1,\n      itemValueShadowColor: '#d3d3d3',\n      itemValueShadowBlur: 10,\n      itemValueShadowOffsetX: 10,\n      itemValueShadowOffsetY: 10,\n      itemValueCursor: 'pointer',\n    },\n  },\n});\n",paraId:147,tocIndex:26},{value:" ",paraId:148,tocIndex:27},{value:"LegendItemBackgroundCfg",paraId:148,tocIndex:27},{value:" ",paraId:148,tocIndex:27},{value:"optional",paraId:148,tocIndex:27},{value:" ",paraId:148,tocIndex:27},{value:"适用于 ",paraId:149,tocIndex:27},{value:"分类图例",paraId:150,tocIndex:27},{value:" 。配置图例项的背景。",paraId:149,tocIndex:27},{value:"LegendItemBackgroundCfg",paraId:149,tocIndex:27},{value:" 配置如下：",paraId:149,tocIndex:27},{value:"属性",paraId:151,tocIndex:27},{value:"描述",paraId:151,tocIndex:27},{value:"类型",paraId:151,tocIndex:27},{value:"默认值",paraId:151,tocIndex:27},{value:"必选",paraId:151,tocIndex:27},{value:"itemBackgroundRadius",paraId:151,tocIndex:27},{value:"图例项背景圆角",paraId:151,tocIndex:27},{value:"number | (datum, index, data) => number",paraId:151,tocIndex:27},{value:"0",paraId:151,tocIndex:27},{value:"itemBackgroundFill",paraId:151,tocIndex:27},{value:"图例项背景填充色",paraId:151,tocIndex:27},{value:"string | (datum, index, data) => string",paraId:151,tocIndex:27},{value:"transparent",paraId:151,tocIndex:27},{value:"itemBackgroundFillOpacity",paraId:151,tocIndex:27},{value:"图例项背景填充透明度",paraId:151,tocIndex:27},{value:"number | (datum, index, data) => number",paraId:151,tocIndex:27},{value:"-",paraId:151,tocIndex:27},{value:"itemBackgroundStroke",paraId:151,tocIndex:27},{value:"图例项背景的描边",paraId:151,tocIndex:27},{value:"string | (datum, index, data) => string",paraId:151,tocIndex:27},{value:"-",paraId:151,tocIndex:27},{value:"itemBackgroundStrokeOpacity",paraId:151,tocIndex:27},{value:"图例项背景描边透明度",paraId:151,tocIndex:27},{value:"number | (datum, index, data) => number",paraId:151,tocIndex:27},{value:"-",paraId:151,tocIndex:27},{value:"itemBackgroundLineWidth",paraId:151,tocIndex:27},{value:"图例项背景描边的宽度",paraId:151,tocIndex:27},{value:"number | (datum, index, data) => number",paraId:151,tocIndex:27},{value:"-",paraId:151,tocIndex:27},{value:"itemBackgroundLineDash",paraId:151,tocIndex:27},{value:"图例项背景描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:151,tocIndex:27},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:151,tocIndex:27},{value:"-",paraId:151,tocIndex:27},{value:"itemBackgroundOpacity",paraId:151,tocIndex:27},{value:"图例项背景的整体透明度",paraId:151,tocIndex:27},{value:"number | (datum, index, data) => number",paraId:151,tocIndex:27},{value:"-",paraId:151,tocIndex:27},{value:"itemBackgroundShadowColor",paraId:151,tocIndex:27},{value:"图例项背景阴影颜色",paraId:151,tocIndex:27},{value:"string | (datum, index, data) => string",paraId:151,tocIndex:27},{value:"-",paraId:151,tocIndex:27},{value:"itemBackgroundShadowBlur",paraId:151,tocIndex:27},{value:"图例项背景阴影的高斯模糊系数",paraId:151,tocIndex:27},{value:"number | (datum, index, data) => number",paraId:151,tocIndex:27},{value:"-",paraId:151,tocIndex:27},{value:"itemBackgroundShadowOffsetX",paraId:151,tocIndex:27},{value:"设置阴影距图例项背景的水平距离",paraId:151,tocIndex:27},{value:"number | (datum, index, data) => number",paraId:151,tocIndex:27},{value:"-",paraId:151,tocIndex:27},{value:"itemBackgroundShadowOffsetY",paraId:151,tocIndex:27},{value:"设置阴影距图例项背景的垂直距离",paraId:151,tocIndex:27},{value:"number | (datum, index, data) => number",paraId:151,tocIndex:27},{value:"-",paraId:151,tocIndex:27},{value:"itemBackgroundCursor",paraId:151,tocIndex:27},{value:"图例项背景鼠标样式。同 css 的鼠标样式。",paraId:151,tocIndex:27},{value:"string | (datum, index, data) => string",paraId:151,tocIndex:27},{value:"default",paraId:151,tocIndex:27},{value:"在 Legend 组件中配置图例项背景的时候，不是以对象的形式来配置，而是以 ",paraId:152,tocIndex:27},{value:"itemBackground",paraId:152,tocIndex:27},{value:"前缀加属性的方式来配置。",paraId:152,tocIndex:27},{value:"({\n  legend: {\n    color: {\n      itemBackgroundRadius: 50,\n      itemBackgroundFill: '#000',\n      itemBackgroundFillOpacity: 0.9,\n      itemBackgroundStroke: '#DAF5EC',\n      itemBackgroundStrokeOpacity: 0.9,\n      itemBackgroundLineWidth: 2,\n      itemBackgroundLineDash: [4, 8],\n      itemBackgroundOpacity: 1,\n      itemBackgroundShadowColor: '#d3d3d3',\n      itemBackgroundShadowBlur: 10,\n      itemBackgroundShadowOffsetX: 10,\n      itemBackgroundShadowOffsetY: 10,\n      itemBackgroundCursor: 'pointer',\n    },\n  },\n});\n",paraId:153,tocIndex:27},{value:"接下来，试试结合 ",paraId:154,tocIndex:27},{value:"itemMarker",paraId:154,tocIndex:27},{value:"、",paraId:154,tocIndex:27},{value:"itemLabel",paraId:154,tocIndex:27},{value:"、",paraId:154,tocIndex:27},{value:"itemValue",paraId:154,tocIndex:27},{value:"和",paraId:154,tocIndex:27},{value:"itemBackground",paraId:154,tocIndex:27},{value:"的各种属性，来配置一个自定义的图例吧：",paraId:154,tocIndex:27},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', height: 350 });\nconst shapeList = ['bowtie', 'smooth', 'hv', 'rect', 'hollowPoint'];\nconst data = [\n  { genre: 'Sports', sold: 50 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\nchart.options({\n  type: 'interval',\n  data,\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  legend: {\n    color: {\n      size: 100,\n      itemWidth: 120,\n      // itemMarker\n      itemMarker: (d, index) => shapeList[index],\n      // itemLabel\n      itemLabelFill: 'red',\n      // itemValue\n      itemValueText: (d, index) => data[index]['sold'],\n      // itemBackground\n      itemBackgroundFill: (d) => d.color,\n      itemBackgroundFillOpacity: 0.2,\n    },\n  },\n});\n\nchart.render();\n",paraId:155,tocIndex:27},{value:" ",paraId:156,tocIndex:28},{value:"number",paraId:156,tocIndex:28},{value:" ",paraId:156,tocIndex:28},{value:"optional",paraId:156,tocIndex:28},{value:" ",paraId:156,tocIndex:28},{value:"适用于 ",paraId:157,tocIndex:28},{value:"分类图例",paraId:158,tocIndex:28},{value:" 。配置图例项的宽度。",paraId:157,tocIndex:28},{value:" ",paraId:159,tocIndex:29},{value:"number|number[]",paraId:159,tocIndex:29},{value:" ",paraId:159,tocIndex:29},{value:"optional",paraId:159,tocIndex:29},{value:" ",paraId:159,tocIndex:29},{value:"适用于 ",paraId:160,tocIndex:29},{value:"分类图例",paraId:161,tocIndex:29},{value:" 。配置图例项图标、标签和值的空间划分。默认为",paraId:160,tocIndex:29},{value:"[1, 1, 1]",paraId:160,tocIndex:29},{value:"。",paraId:160,tocIndex:29},{value:" ",paraId:162,tocIndex:30},{value:"number|number[]",paraId:162,tocIndex:30},{value:" ",paraId:162,tocIndex:30},{value:"optional",paraId:162,tocIndex:30},{value:" ",paraId:162,tocIndex:30},{value:"适用于 ",paraId:163,tocIndex:30},{value:"分类图例",paraId:164,tocIndex:30},{value:" 。配置图例项图标、标签、值和聚焦图例之间的间距。默认为",paraId:163,tocIndex:30},{value:"[8, 8, 4]",paraId:163,tocIndex:30},{value:"。",paraId:163,tocIndex:30},{value:" ",paraId:165,tocIndex:31},{value:"LegendNavCfg",paraId:165,tocIndex:31},{value:" ",paraId:165,tocIndex:31},{value:"optional",paraId:165,tocIndex:31},{value:" ",paraId:165,tocIndex:31},{value:"适用于 ",paraId:166,tocIndex:31},{value:"分类图例",paraId:167,tocIndex:31},{value:" 。配置图例的分页器。在网格布局下，页面容量 = ",paraId:166,tocIndex:31},{value:"gridRow",paraId:166,tocIndex:31},{value:" × ",paraId:166,tocIndex:31},{value:"gridCol",paraId:166,tocIndex:31},{value:"，如果分类项数量超出此容量，则分页。在弹性布局下，页面容量动态计算，受容器宽度和高度限制。当分类项超过容器高度或宽度时，进行分页，展示分页器组件。",paraId:166,tocIndex:31},{value:"💡 ",paraId:168,tocIndex:31},{value:"垂直布局图例分页配置",paraId:168,tocIndex:31},{value:"对于垂直布局的图例（",paraId:169,tocIndex:31},{value:"position: 'right'",paraId:169,tocIndex:31},{value:" 或 ",paraId:169,tocIndex:31},{value:"'left'",paraId:169,tocIndex:31},{value:"），由于 ",paraId:169,tocIndex:31},{value:"maxRows",paraId:169,tocIndex:31},{value:" 不生效，建议通过以下方式启用分页：",paraId:169,tocIndex:31},{value:"legend: {\n  color: {\n    position: 'right',\n    size:100, // 限制图例宽度，触发分页\n    length: 200,           // 限制图例高度，触发分页\n    navOrientation: 'vertical', // 垂直方向分页器\n    navDefaultPage: 0,     // 默认显示第一页\n    navLoop: true,         // 启用循环翻页\n  }\n}\n",paraId:170,tocIndex:31},{value:"LegendNavCfg",paraId:171,tocIndex:31},{value:" 配置如下：",paraId:171,tocIndex:31},{value:"属性",paraId:172,tocIndex:31},{value:"描述",paraId:172,tocIndex:31},{value:"类型",paraId:172,tocIndex:31},{value:"默认值",paraId:172,tocIndex:31},{value:"必选",paraId:172,tocIndex:31},{value:"navEffect",paraId:172,tocIndex:31},{value:"翻页显示效果",paraId:172,tocIndex:31},{value:"参见 ",paraId:172,tocIndex:31},{value:"Web Animations API",paraId:172,tocIndex:31},{value:"linear",paraId:172,tocIndex:31},{value:"navDuration",paraId:172,tocIndex:31},{value:"单次翻页动效时长",paraId:172,tocIndex:31},{value:"number",paraId:172,tocIndex:31},{value:"200",paraId:172,tocIndex:31},{value:"navOrientation",paraId:172,tocIndex:31},{value:"翻页滚动方向",paraId:172,tocIndex:31},{value:"- 横向",paraId:172,tocIndex:31},{value:"horizontal",paraId:172,tocIndex:31},{value:"- 纵向",paraId:172,tocIndex:31},{value:"vertical",paraId:172,tocIndex:31},{value:"horizontal",paraId:172,tocIndex:31},{value:" |",paraId:172,tocIndex:31},{value:"vertical",paraId:172,tocIndex:31},{value:"horizontal",paraId:172,tocIndex:31},{value:"navDefaultPage",paraId:172,tocIndex:31},{value:"默认展示页数",paraId:172,tocIndex:31},{value:"number",paraId:172,tocIndex:31},{value:"0",paraId:172,tocIndex:31},{value:"navLoop",paraId:172,tocIndex:31},{value:"是否启用循环翻页",paraId:172,tocIndex:31},{value:"boolean",paraId:172,tocIndex:31},{value:"false",paraId:172,tocIndex:31},{value:"navPageWidth",paraId:172,tocIndex:31},{value:"分页器页宽",paraId:172,tocIndex:31},{value:"number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navPageHeight",paraId:172,tocIndex:31},{value:"分页器页高",paraId:172,tocIndex:31},{value:"number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navControllerPadding",paraId:172,tocIndex:31},{value:"分页器按钮与分页器数字的间隔",paraId:172,tocIndex:31},{value:"number | number[]",paraId:172,tocIndex:31},{value:"5",paraId:172,tocIndex:31},{value:"navControllerSpacing",paraId:172,tocIndex:31},{value:"分页器按钮与页的间隔，可以用来配置分页器与图例的间隔",paraId:172,tocIndex:31},{value:"number | number[]",paraId:172,tocIndex:31},{value:"5",paraId:172,tocIndex:31},{value:"navPageNumFontSize",paraId:172,tocIndex:31},{value:"分页器数字文字大小",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"12",paraId:172,tocIndex:31},{value:"navPageNumFontFamily",paraId:172,tocIndex:31},{value:"分页器数字文字字体",paraId:172,tocIndex:31},{value:"string | (datum, index, data) => string",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navPageNumFontWeight",paraId:172,tocIndex:31},{value:"分页器数字字体粗细",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"normal",paraId:172,tocIndex:31},{value:"navPageNumLineHeight",paraId:172,tocIndex:31},{value:"分页器数字文字的行高",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navPageNumTextAlign",paraId:172,tocIndex:31},{value:"设置分页器数字文本内容的当前对齐方式",paraId:172,tocIndex:31},{value:"center",paraId:172,tocIndex:31},{value:" | ",paraId:172,tocIndex:31},{value:"end",paraId:172,tocIndex:31},{value:" | ",paraId:172,tocIndex:31},{value:"left",paraId:172,tocIndex:31},{value:" | ",paraId:172,tocIndex:31},{value:"right",paraId:172,tocIndex:31},{value:" | ",paraId:172,tocIndex:31},{value:"start",paraId:172,tocIndex:31},{value:"start",paraId:172,tocIndex:31},{value:"navPageNumTextBaseline",paraId:172,tocIndex:31},{value:"设置在绘制分页器数字文本时使用的当前文本基线",paraId:172,tocIndex:31},{value:"top",paraId:172,tocIndex:31},{value:" | ",paraId:172,tocIndex:31},{value:"middle",paraId:172,tocIndex:31},{value:" | ",paraId:172,tocIndex:31},{value:"bottom",paraId:172,tocIndex:31},{value:" | ",paraId:172,tocIndex:31},{value:"alphabetic",paraId:172,tocIndex:31},{value:" | ",paraId:172,tocIndex:31},{value:"hanging",paraId:172,tocIndex:31},{value:"bottom",paraId:172,tocIndex:31},{value:"navPageNumFill",paraId:172,tocIndex:31},{value:"分页器数字字体颜色",paraId:172,tocIndex:31},{value:"string | (datum, index, data) => string",paraId:172,tocIndex:31},{value:"#1D2129",paraId:172,tocIndex:31},{value:"navPageNumFillOpacity",paraId:172,tocIndex:31},{value:"分页器数字字体颜色透明度",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"0.45",paraId:172,tocIndex:31},{value:"navPageNumStroke",paraId:172,tocIndex:31},{value:"分页器数字字体描边颜色",paraId:172,tocIndex:31},{value:"string | (datum, index, data) => string",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navPageNumStrokeOpacity",paraId:172,tocIndex:31},{value:"分页器数字字体描边颜色透明度",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navPageNumLineWidth",paraId:172,tocIndex:31},{value:"分页器数字字体描边的宽度",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navPageNumLineDash",paraId:172,tocIndex:31},{value:"分页器数字字体描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:172,tocIndex:31},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navPageNumOpacity",paraId:172,tocIndex:31},{value:"分页器数字文字的整体透明度",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navPageNumShadowColor",paraId:172,tocIndex:31},{value:"分页器数字文字阴影颜色",paraId:172,tocIndex:31},{value:"string | (datum, index, data) => string",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navPageNumShadowBlur",paraId:172,tocIndex:31},{value:"分页器数字文字阴影的高斯模糊系数",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navPageNumShadowOffsetX",paraId:172,tocIndex:31},{value:"设置阴影距分页器数字文字的水平距离",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navPageNumShadowOffsetY",paraId:172,tocIndex:31},{value:"设置阴影距分页器数字文字的垂直距离",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navPageNumCursor",paraId:172,tocIndex:31},{value:"分页器数字鼠标样式。同 css 的鼠标样式。",paraId:172,tocIndex:31},{value:"string | (datum, index, data) => string",paraId:172,tocIndex:31},{value:"default",paraId:172,tocIndex:31},{value:"navButtonSize",paraId:172,tocIndex:31},{value:"分页器按钮尺寸",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navButtonFill",paraId:172,tocIndex:31},{value:"分页器按钮填充色",paraId:172,tocIndex:31},{value:"string | (datum, index, data) => string",paraId:172,tocIndex:31},{value:"#1D2129",paraId:172,tocIndex:31},{value:"navButtonFillOpacity",paraId:172,tocIndex:31},{value:"分页器按钮填充透明度",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"0.65",paraId:172,tocIndex:31},{value:"navButtonStroke",paraId:172,tocIndex:31},{value:"分页器按钮的描边",paraId:172,tocIndex:31},{value:"string | (datum, index, data) => string",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navButtonStrokeOpacity",paraId:172,tocIndex:31},{value:"分页器按钮描边透明度",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navButtonLineWidth",paraId:172,tocIndex:31},{value:"分页器按钮描边的宽度",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navButtonLineDash",paraId:172,tocIndex:31},{value:"分页器按钮描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:172,tocIndex:31},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navButtonOpacity",paraId:172,tocIndex:31},{value:"分页器按钮的整体透明度",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navButtonShadowColor",paraId:172,tocIndex:31},{value:"分页器按钮阴影颜色",paraId:172,tocIndex:31},{value:"string | (datum, index, data) => string",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navButtonShadowBlur",paraId:172,tocIndex:31},{value:"分页器按钮阴影的高斯模糊系数",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navButtonShadowOffsetX",paraId:172,tocIndex:31},{value:"设置阴影距分页器按钮的水平距离",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navButtonShadowOffsetY",paraId:172,tocIndex:31},{value:"设置阴影距分页器按钮的垂直距离",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navButtonCursor",paraId:172,tocIndex:31},{value:"分页器按钮鼠标样式。同 css 的鼠标样式。",paraId:172,tocIndex:31},{value:"string | (datum, index, data) => string",paraId:172,tocIndex:31},{value:"default",paraId:172,tocIndex:31},{value:"navFormatter",paraId:172,tocIndex:31},{value:"页码文本格式化",paraId:172,tocIndex:31},{value:"(current: number, total: number) => string",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"在 Legend 组件中配置分页器属性的时候，不是以对象的形式来配置，而是以 ",paraId:173,tocIndex:31},{value:"nav",paraId:173,tocIndex:31},{value:"前缀加属性的方式来配置。",paraId:173,tocIndex:31},{value:"({\n  legend: {\n    color: {\n      navEffect: 'cubic-bezier',\n      navDuration: 400,\n      navOrientation: 'vertical',\n      navDefaultPage: 1,\n      navLoop: true,\n      navPageWidth: 10,\n      navPageHeight: 10,\n      navControllerPadding: 10,\n      navControllerSpacing: 10,\n\n      //配置navPageNum的绘图属性\n      navPageNumFontSize: 16,\n      navPageNumFontFamily: 'sans-serif',\n      navPageNumFontWeight: 500,\n      navPageNumLineHeight: 20,\n      navPageNumTextAlign: 'center',\n      navPageNumTextBaseline: 'middle',\n      navPageNumFill: '#000',\n      navPageNumFillOpacity: 0.9,\n      navPageNumStroke: '#DAF5EC',\n      navPageNumStrokeOpacity: 0.9,\n      navPageNumLineWidth: 2,\n      navPageNumLineDash: [4, 8],\n      navPageNumOpacity: 1,\n      navPageNumShadowColor: '#d3d3d3',\n      navPageNumShadowBlur: 10,\n      navPageNumShadowOffsetX: 10,\n      navPageNumShadowOffsetY: 10,\n      navPageNumCursor: 'pointer',\n\n      // 配置navButton的绘图属性\n      navButtonFill: '#000',\n      navButtonFillOpacity: 0.9,\n      navButtonStroke: '#DAF5EC',\n      navButtonStrokeOpacity: 0.9,\n      navButtonLineWidth: 2,\n      navButtonLineDash: [4, 8],\n      navButtonOpacity: 1,\n      navButtonShadowColor: '#d3d3d3',\n      navButtonShadowBlur: 10,\n      navButtonShadowOffsetX: 10,\n      navButtonShadowOffsetY: 10,\n      navButtonCursor: 'pointer',\n    },\n  },\n});\n",paraId:174,tocIndex:31},{value:"尝试一下：",paraId:175,tocIndex:31},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', height: 350 });\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 50 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  legend: {\n    color: {\n      itemWidth: 160,\n      navEffect: 'cubic-bezier',\n      navDuration: 400,\n      navOrientation: 'vertical',\n      navDefaultPage: 2,\n      navLoop: true,\n\n      //配置navPageNum的绘图属性\n      navPageNumFontSize: 16,\n      navPageNumFontFamily: 'sans-serif',\n      navPageNumFontWeight: 500,\n      navPageNumLineHeight: 20,\n      navPageNumTextAlign: 'center',\n      navPageNumTextBaseline: 'middle',\n      navPageNumFill: '#2989FF',\n      navPageNumFillOpacity: 0.9,\n      navPageNumStroke: '#DAF5EC',\n      navPageNumStrokeOpacity: 0.9,\n      navPageNumLineWidth: 2,\n      navPageNumLineDash: [4, 8],\n      navPageNumOpacity: 1,\n      navPageNumShadowColor: '#d3d3d3',\n      navPageNumShadowBlur: 10,\n      navPageNumShadowOffsetX: 10,\n      navPageNumShadowOffsetY: 10,\n      navPageNumCursor: 'pointer',\n\n      // 配置navButton的绘图属性\n      navButtonFill: '#2989FF',\n      navButtonFillOpacity: 0.7,\n      navButtonStroke: '#DAF5EC',\n      navButtonStrokeOpacity: 0.9,\n      navButtonLineWidth: 2,\n      navButtonLineDash: [4, 8],\n      navButtonOpacity: 0.9,\n      navButtonShadowColor: '#d3d3d3',\n      navButtonShadowBlur: 10,\n      navButtonShadowOffsetX: 10,\n      navButtonShadowOffsetY: 10,\n      navButtonCursor: 'pointer',\n\n      navFormatter: (current, total) => `第${current}页/共${total}页`,\n    },\n  },\n});\n\nchart.render();\n",paraId:176,tocIndex:31},{value:" ",paraId:177,tocIndex:32},{value:"LegendPoptipCfg",paraId:177,tocIndex:32},{value:" ",paraId:177,tocIndex:32},{value:"optional",paraId:177,tocIndex:32},{value:" ",paraId:177,tocIndex:32},{value:"适用于 ",paraId:178,tocIndex:32},{value:"分类图例",paraId:179,tocIndex:32},{value:" 。配置图例项的提示信息，一般用于图例过长，无法完全展示时。",paraId:178,tocIndex:32},{value:"属性",paraId:180,tocIndex:32},{value:"描述",paraId:180,tocIndex:32},{value:"类型",paraId:180,tocIndex:32},{value:"默认值",paraId:180,tocIndex:32},{value:"必选",paraId:180,tocIndex:32},{value:"render",paraId:180,tocIndex:32},{value:"可自定义渲染内容，支持 HTML 字符",paraId:180,tocIndex:32},{value:"string",paraId:180,tocIndex:32},{value:" | ",paraId:180,tocIndex:32},{value:"() => string",paraId:180,tocIndex:32},{value:"-",paraId:180,tocIndex:32},{value:"-",paraId:180,tocIndex:32},{value:"position",paraId:180,tocIndex:32},{value:"气泡框位置，可通过 css 样式强制覆盖",paraId:180,tocIndex:32},{value:"top left right bottom top-left top-right bottom-left bottom-right left-top left-bottom right-top right-bottom",paraId:180,tocIndex:32},{value:"-",paraId:180,tocIndex:32},{value:"-",paraId:180,tocIndex:32},{value:"offset",paraId:180,tocIndex:32},{value:"偏移量",paraId:180,tocIndex:32},{value:"[number, number]",paraId:180,tocIndex:32},{value:"[0, 20]",paraId:180,tocIndex:32},{value:"-",paraId:180,tocIndex:32},{value:"follow",paraId:180,tocIndex:32},{value:"是否跟随鼠标。当设置为 true 时，会忽略 position 的设置",paraId:180,tocIndex:32},{value:"boolean",paraId:180,tocIndex:32},{value:"-",paraId:180,tocIndex:32},{value:"-",paraId:180,tocIndex:32},{value:"domStyles",paraId:180,tocIndex:32},{value:"容器样式",paraId:180,tocIndex:32},{value:"object",paraId:180,tocIndex:32},{value:"-",paraId:180,tocIndex:32},{value:"-",paraId:180,tocIndex:32},{value:"domStyles 默认配置如下：",paraId:181,tocIndex:32},{value:"{\n  domStyles: {\n    '.component-poptip': {\n      opacity: '1',\n      padding: '8px 12px',\n      background: '#fff',\n      boxShadow: '0 2px 8px rgba(0, 0, 0, 0.15)',\n    },\n    '.component-poptip-arrow': {\n      display: 'none',\n    },\n    '.component-poptip-text': {\n      color: '#000',\n      lineHeight: '20px',\n    },\n  },\n}\n",paraId:182,tocIndex:32},{value:" ",paraId:183,tocIndex:33},{value:"optional",paraId:183,tocIndex:33},{value:" ",paraId:183,tocIndex:33},{value:"boolean",paraId:183,tocIndex:33},{value:" ",paraId:183,tocIndex:33},{value:"适用于 ",paraId:184,tocIndex:33},{value:"分类图例",paraId:185,tocIndex:33},{value:" 。是否启用图例聚焦功能。默认为 ",paraId:184,tocIndex:33},{value:"false",paraId:184,tocIndex:33},{value:"。",paraId:184,tocIndex:33},{value:"当设置为 ",paraId:186,tocIndex:33},{value:"true",paraId:186,tocIndex:33},{value:" 时，图例项会显示聚焦图标，用户可以通过点击聚焦图标来仅显示对应的图表元素，更好地突出关注的数据。",paraId:186,tocIndex:33},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { name: 'London', 月份: 'Jan.', 月均降雨量: 18.9 },\n    { name: 'London', 月份: 'Feb.', 月均降雨量: 28.8 },\n    { name: 'London', 月份: 'Mar.', 月均降雨量: 39.3 },\n    { name: 'London', 月份: 'Apr.', 月均降雨量: 81.4 },\n    { name: 'London', 月份: 'May', 月均降雨量: 47 },\n    { name: 'London', 月份: 'Jun.', 月均降雨量: 20.3 },\n    { name: 'London', 月份: 'Jul.', 月均降雨量: 24 },\n    { name: 'London', 月份: 'Aug.', 月均降雨量: 35.6 },\n    { name: 'Berlin', 月份: 'Jan.', 月均降雨量: 12.4 },\n    { name: 'Berlin', 月份: 'Feb.', 月均降雨量: 23.2 },\n    { name: 'Berlin', 月份: 'Mar.', 月均降雨量: 34.5 },\n    { name: 'Berlin', 月份: 'Apr.', 月均降雨量: 99.7 },\n    { name: 'Berlin', 月份: 'May', 月均降雨量: 52.6 },\n    { name: 'Berlin', 月份: 'Jun.', 月均降雨量: 35.5 },\n    { name: 'Berlin', 月份: 'Jul.', 月均降雨量: 37.4 },\n    { name: 'Berlin', 月份: 'Aug.', 月均降雨量: 42.4 },\n  ],\n  encode: { x: '月份', y: '月均降雨量', color: 'name' },\n  transform: [{ type: 'dodgeX' }],\n  legend: {\n    color: {\n      focus: true,\n      focusMarkerSize: 12\n    },\n  },\n});\n\nchart.render();\n",paraId:187,tocIndex:33},{value:" ",paraId:188,tocIndex:34},{value:"optional",paraId:188,tocIndex:34},{value:" ",paraId:188,tocIndex:34},{value:"number",paraId:188,tocIndex:34},{value:" ",paraId:188,tocIndex:34},{value:"适用于 ",paraId:189,tocIndex:34},{value:"分类图例",paraId:190,tocIndex:34},{value:" 。调整聚焦图标大小。",paraId:189,tocIndex:34},{value:" ",paraId:191,tocIndex:35},{value:"string[] | ",paraId:191,tocIndex:35},{value:"d3-interpolate",paraId:191,tocIndex:35},{value:" ",paraId:191,tocIndex:35},{value:"optional",paraId:191,tocIndex:35},{value:" ",paraId:191,tocIndex:35},{value:"适用于 ",paraId:192,tocIndex:35},{value:"连续图例",paraId:193,tocIndex:35},{value:" 。配置连续图例的色带颜色，为数组时会从中按序取色。",paraId:192,tocIndex:35},{value:" ",paraId:194,tocIndex:36},{value:"boolean",paraId:194,tocIndex:36},{value:" ",paraId:194,tocIndex:36},{value:"optional",paraId:194,tocIndex:36},{value:" ",paraId:194,tocIndex:36},{value:"适用于 ",paraId:195,tocIndex:36},{value:"连续图例",paraId:196,tocIndex:36},{value:" 。连续图例是否按区间显示。默认为 false。",paraId:195,tocIndex:36},{value:" ",paraId:197,tocIndex:37},{value:"size | color",paraId:197,tocIndex:37},{value:" ",paraId:197,tocIndex:37},{value:"optional",paraId:197,tocIndex:37},{value:" ",paraId:197,tocIndex:37},{value:"适用于 ",paraId:198,tocIndex:37},{value:"连续图例",paraId:199,tocIndex:37},{value:" 。配置连续图例的类型。默认为 ",paraId:198,tocIndex:37},{value:"color",paraId:198,tocIndex:37},{value:"。",paraId:198,tocIndex:37},{value:"结合 ",paraId:200,tocIndex:37},{value:"block",paraId:200,tocIndex:37},{value:" 和 ",paraId:200,tocIndex:37},{value:"type",paraId:200,tocIndex:37},{value:" 属性可以配置不同样式的连续图例。连续数据的图例具有 4 种样式，分别为：",paraId:200,tocIndex:37},{value:"连续表示 ",paraId:201,tocIndex:37},{value:"默认",paraId:201,tocIndex:37},{value:"范围表示 ",paraId:202,tocIndex:37},{value:"block=true",paraId:202,tocIndex:37},{value:"尺寸表示 ",paraId:203,tocIndex:37},{value:"type='size'",paraId:203,tocIndex:37},{value:"尺寸、范围表示 ",paraId:204,tocIndex:37},{value:"type='size'",paraId:204,tocIndex:37},{value:" ",paraId:204,tocIndex:37},{value:"block=true",paraId:204,tocIndex:37},{value:" ",paraId:205,tocIndex:38},{value:"LegendRibbonCfg",paraId:205,tocIndex:38},{value:" ",paraId:205,tocIndex:38},{value:"optional",paraId:205,tocIndex:38},{value:" ",paraId:205,tocIndex:38},{value:"适用于 ",paraId:206,tocIndex:38},{value:"连续图例",paraId:207,tocIndex:38},{value:" 。配置连续图例的色带。",paraId:206,tocIndex:38},{value:"LegendRibbonCfg",paraId:206,tocIndex:38},{value:" 配置如下：",paraId:206,tocIndex:38},{value:"属性",paraId:208,tocIndex:38},{value:"描述",paraId:208,tocIndex:38},{value:"类型",paraId:208,tocIndex:38},{value:"默认值",paraId:208,tocIndex:38},{value:"必选",paraId:208,tocIndex:38},{value:"ribbonSize",paraId:208,tocIndex:38},{value:"色带大小",paraId:208,tocIndex:38},{value:"number | (datum, index, data) => number",paraId:208,tocIndex:38},{value:"12",paraId:208,tocIndex:38},{value:"ribbonFill",paraId:208,tocIndex:38},{value:"色带填充色",paraId:208,tocIndex:38},{value:"string | (datum, index, data) => string",paraId:208,tocIndex:38},{value:"#aaa",paraId:208,tocIndex:38},{value:"ribbonFillOpacity",paraId:208,tocIndex:38},{value:"色带填充透明度",paraId:208,tocIndex:38},{value:"number | (datum, index, data) => number",paraId:208,tocIndex:38},{value:"-",paraId:208,tocIndex:38},{value:"ribbonStroke",paraId:208,tocIndex:38},{value:"色带的描边",paraId:208,tocIndex:38},{value:"string | (datum, index, data) => string",paraId:208,tocIndex:38},{value:"-",paraId:208,tocIndex:38},{value:"ribbonStrokeOpacity",paraId:208,tocIndex:38},{value:"色带描边透明度",paraId:208,tocIndex:38},{value:"number | (datum, index, data) => number",paraId:208,tocIndex:38},{value:"-",paraId:208,tocIndex:38},{value:"ribbonLineWidth",paraId:208,tocIndex:38},{value:"色带描边的宽度",paraId:208,tocIndex:38},{value:"number | (datum, index, data) => number",paraId:208,tocIndex:38},{value:"-",paraId:208,tocIndex:38},{value:"ribbonLineDash",paraId:208,tocIndex:38},{value:"色带描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:208,tocIndex:38},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:208,tocIndex:38},{value:"-",paraId:208,tocIndex:38},{value:"ribbonOpacity",paraId:208,tocIndex:38},{value:"色带的整体透明度",paraId:208,tocIndex:38},{value:"number | (datum, index, data) => number",paraId:208,tocIndex:38},{value:"-",paraId:208,tocIndex:38},{value:"ribbonShadowColor",paraId:208,tocIndex:38},{value:"色带阴影颜色",paraId:208,tocIndex:38},{value:"string | (datum, index, data) => string",paraId:208,tocIndex:38},{value:"-",paraId:208,tocIndex:38},{value:"ribbonShadowBlur",paraId:208,tocIndex:38},{value:"色带阴影的高斯模糊系数",paraId:208,tocIndex:38},{value:"number | (datum, index, data) => number",paraId:208,tocIndex:38},{value:"-",paraId:208,tocIndex:38},{value:"ribbonShadowOffsetX",paraId:208,tocIndex:38},{value:"设置阴影距色带的水平距离",paraId:208,tocIndex:38},{value:"number | (datum, index, data) => number",paraId:208,tocIndex:38},{value:"-",paraId:208,tocIndex:38},{value:"ribbonShadowOffsetY",paraId:208,tocIndex:38},{value:"设置阴影距色带的垂直距离",paraId:208,tocIndex:38},{value:"number | (datum, index, data) => number",paraId:208,tocIndex:38},{value:"-",paraId:208,tocIndex:38},{value:"ribbonCursor",paraId:208,tocIndex:38},{value:"色带鼠标样式。同 css 的鼠标样式。",paraId:208,tocIndex:38},{value:"string | (datum, index, data) => string",paraId:208,tocIndex:38},{value:"default",paraId:208,tocIndex:38},{value:"在 Legend 组件中配置色带的时候，不是以对象的形式来配置，而是以 ",paraId:209,tocIndex:38},{value:"ribbon",paraId:209,tocIndex:38},{value:"前缀加属性的方式来配置。",paraId:209,tocIndex:38},{value:"({\n  legend: {\n    color: {\n      ribbonSize: 20,\n      ribbonFill: '#000',\n      ribbonFillOpacity: 0.9,\n      ribbonStroke: '#DAF5EC',\n      ribbonStrokeOpacity: 0.9,\n      ribbonLineWidth: 2,\n      ribbonLineDash: [4, 8],\n      ribbonOpacity: 1,\n      ribbonShadowColor: '#d3d3d3',\n      ribbonShadowBlur: 10,\n      ribbonShadowOffsetX: 10,\n      ribbonShadowOffsetY: 10,\n      ribbonCursor: 'pointer',\n    },\n  },\n});\n",paraId:210,tocIndex:38},{value:" ",paraId:211,tocIndex:39},{value:"LegendHandleCfg",paraId:211,tocIndex:39},{value:" ",paraId:211,tocIndex:39},{value:"optional",paraId:211,tocIndex:39},{value:" ",paraId:211,tocIndex:39},{value:"滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。",paraId:212,tocIndex:39},{value:"\n ",paraId:213},{value:"适用于 ",paraId:214,tocIndex:39},{value:"连续图例",paraId:215,tocIndex:39},{value:" 。配置连续图例的滑动手柄。 ",paraId:214,tocIndex:39},{value:"LegendHandleCfg",paraId:214,tocIndex:39},{value:" 配置如下：",paraId:214,tocIndex:39},{value:"属性",paraId:216,tocIndex:39},{value:"描述",paraId:216,tocIndex:39},{value:"类型",paraId:216,tocIndex:39},{value:"默认值",paraId:216,tocIndex:39},{value:"必选",paraId:216,tocIndex:39},{value:"handle",paraId:216,tocIndex:39},{value:"是否显示滑动手柄",paraId:216,tocIndex:39},{value:"boolean",paraId:216,tocIndex:39},{value:"true",paraId:216,tocIndex:39},{value:"handleLabel",paraId:216,tocIndex:39},{value:"是否显示滑动手柄标签",paraId:216,tocIndex:39},{value:"boolean",paraId:216,tocIndex:39},{value:"false",paraId:216,tocIndex:39},{value:"slidable",paraId:216,tocIndex:39},{value:"窗口是否可以滑动",paraId:216,tocIndex:39},{value:"boolean",paraId:216,tocIndex:39},{value:"true",paraId:216,tocIndex:39},{value:"range",paraId:216,tocIndex:39},{value:"滑动窗口默认选择范围",paraId:216,tocIndex:39},{value:"[number, number]",paraId:216,tocIndex:39},{value:"[min, max]",paraId:216,tocIndex:39},{value:"step",paraId:216,tocIndex:39},{value:"单次滑动步长",paraId:216,tocIndex:39},{value:"number",paraId:216,tocIndex:39},{value:"1",paraId:216,tocIndex:39},{value:"handleLabelFontSize",paraId:216,tocIndex:39},{value:"手柄标签文字大小",paraId:216,tocIndex:39},{value:"number | (datum, index, data) => number",paraId:216,tocIndex:39},{value:"12",paraId:216,tocIndex:39},{value:"handleLabelFontFamily",paraId:216,tocIndex:39},{value:"手柄标签文字字体",paraId:216,tocIndex:39},{value:"string | (datum, index, data) => string",paraId:216,tocIndex:39},{value:"-",paraId:216,tocIndex:39},{value:"handleLabelFontWeight",paraId:216,tocIndex:39},{value:"手柄标签字体粗细",paraId:216,tocIndex:39},{value:"number | (datum, index, data) => number",paraId:216,tocIndex:39},{value:"normal",paraId:216,tocIndex:39},{value:"handleLabelLineHeight",paraId:216,tocIndex:39},{value:"手柄标签文字的行高",paraId:216,tocIndex:39},{value:"number | (datum, index, data) => number",paraId:216,tocIndex:39},{value:"-",paraId:216,tocIndex:39},{value:"handleLabelTextAlign",paraId:216,tocIndex:39},{value:"设置手柄标签文本内容的当前对齐方式",paraId:216,tocIndex:39},{value:"center",paraId:216,tocIndex:39},{value:" | ",paraId:216,tocIndex:39},{value:"end",paraId:216,tocIndex:39},{value:" | ",paraId:216,tocIndex:39},{value:"left",paraId:216,tocIndex:39},{value:" | ",paraId:216,tocIndex:39},{value:"right",paraId:216,tocIndex:39},{value:" | ",paraId:216,tocIndex:39},{value:"start",paraId:216,tocIndex:39},{value:"start",paraId:216,tocIndex:39},{value:"handleLabelTextBaseline",paraId:216,tocIndex:39},{value:"设置在绘制手柄标签文本时使用的当前文本基线",paraId:216,tocIndex:39},{value:"top",paraId:216,tocIndex:39},{value:" | ",paraId:216,tocIndex:39},{value:"middle",paraId:216,tocIndex:39},{value:" | ",paraId:216,tocIndex:39},{value:"bottom",paraId:216,tocIndex:39},{value:" | ",paraId:216,tocIndex:39},{value:"alphabetic",paraId:216,tocIndex:39},{value:" | ",paraId:216,tocIndex:39},{value:"hanging",paraId:216,tocIndex:39},{value:"bottom",paraId:216,tocIndex:39},{value:"handleLabelFill",paraId:216,tocIndex:39},{value:"手柄标签字体颜色",paraId:216,tocIndex:39},{value:"string | (datum, index, data) => string",paraId:216,tocIndex:39},{value:"#1D2129",paraId:216,tocIndex:39},{value:"handleLabelFillOpacity",paraId:216,tocIndex:39},{value:"手柄标签字体颜色透明度",paraId:216,tocIndex:39},{value:"number | (datum, index, data) => number",paraId:216,tocIndex:39},{value:"0.45",paraId:216,tocIndex:39},{value:"handleLabelStroke",paraId:216,tocIndex:39},{value:"手柄标签字体描边颜色",paraId:216,tocIndex:39},{value:"string | (datum, index, data) => string",paraId:216,tocIndex:39},{value:"-",paraId:216,tocIndex:39},{value:"handleLabelStrokeOpacity",paraId:216,tocIndex:39},{value:"手柄标签字体描边颜色透明度",paraId:216,tocIndex:39},{value:"number | (datum, index, data) => number",paraId:216,tocIndex:39},{value:"-",paraId:216,tocIndex:39},{value:"handleLabelLineWidth",paraId:216,tocIndex:39},{value:"手柄标签字体描边的宽度",paraId:216,tocIndex:39},{value:"number | (datum, index, data) => number",paraId:216,tocIndex:39},{value:"-",paraId:216,tocIndex:39},{value:"handleLabelLineDash",paraId:216,tocIndex:39},{value:"手柄标签字体描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:216,tocIndex:39},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:216,tocIndex:39},{value:"-",paraId:216,tocIndex:39},{value:"handleLabelOpacity",paraId:216,tocIndex:39},{value:"手柄标签文字的整体透明度",paraId:216,tocIndex:39},{value:"number | (datum, index, data) => number",paraId:216,tocIndex:39},{value:"-",paraId:216,tocIndex:39},{value:"handleLabelShadowColor",paraId:216,tocIndex:39},{value:"手柄标签文字阴影颜色",paraId:216,tocIndex:39},{value:"string | (datum, index, data) => string",paraId:216,tocIndex:39},{value:"-",paraId:216,tocIndex:39},{value:"handleLabelShadowBlur",paraId:216,tocIndex:39},{value:"手柄标签文字阴影的高斯模糊系数",paraId:216,tocIndex:39},{value:"number | (datum, index, data) => number",paraId:216,tocIndex:39},{value:"-",paraId:216,tocIndex:39},{value:"handleLabelShadowOffsetX",paraId:216,tocIndex:39},{value:"设置阴影距手柄标签文字的水平距离",paraId:216,tocIndex:39},{value:"number | (datum, index, data) => number",paraId:216,tocIndex:39},{value:"-",paraId:216,tocIndex:39},{value:"handleLabelShadowOffsetY",paraId:216,tocIndex:39},{value:"设置阴影距手柄标签文字的垂直距离",paraId:216,tocIndex:39},{value:"number | (datum, index, data) => number",paraId:216,tocIndex:39},{value:"-",paraId:216,tocIndex:39},{value:"handleLabelCursor",paraId:216,tocIndex:39},{value:"手柄标签鼠标样式。同 css 的鼠标样式。",paraId:216,tocIndex:39},{value:"string | (datum, index, data) => string",paraId:216,tocIndex:39},{value:"default",paraId:216,tocIndex:39},{value:"handleIconSize",paraId:216,tocIndex:39},{value:"手柄图标尺寸色",paraId:216,tocIndex:39},{value:"number | (datum, index, data) => number",paraId:216,tocIndex:39},{value:"-",paraId:216,tocIndex:39},{value:"handleIconFill",paraId:216,tocIndex:39},{value:"手柄图标填充色",paraId:216,tocIndex:39},{value:"string | (datum, index, data) => string",paraId:216,tocIndex:39},{value:"#1D2129",paraId:216,tocIndex:39},{value:"handleIconFillOpacity",paraId:216,tocIndex:39},{value:"手柄图标填充透明度",paraId:216,tocIndex:39},{value:"number | (datum, index, data) => number",paraId:216,tocIndex:39},{value:"0.65",paraId:216,tocIndex:39},{value:"handleIconStroke",paraId:216,tocIndex:39},{value:"手柄图标的描边",paraId:216,tocIndex:39},{value:"string | (datum, index, data) => string",paraId:216,tocIndex:39},{value:"-",paraId:216,tocIndex:39},{value:"handleIconStrokeOpacity",paraId:216,tocIndex:39},{value:"手柄图标描边透明度",paraId:216,tocIndex:39},{value:"number | (datum, index, data) => number",paraId:216,tocIndex:39},{value:"-",paraId:216,tocIndex:39},{value:"handleIconLineWidth",paraId:216,tocIndex:39},{value:"手柄图标描边的宽度",paraId:216,tocIndex:39},{value:"number | (datum, index, data) => number",paraId:216,tocIndex:39},{value:"-",paraId:216,tocIndex:39},{value:"handleIconLineDash",paraId:216,tocIndex:39},{value:"手柄图标描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:216,tocIndex:39},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:216,tocIndex:39},{value:"-",paraId:216,tocIndex:39},{value:"handleIconOpacity",paraId:216,tocIndex:39},{value:"手柄图标的整体透明度",paraId:216,tocIndex:39},{value:"number | (datum, index, data) => number",paraId:216,tocIndex:39},{value:"-",paraId:216,tocIndex:39},{value:"handleIconShadowColor",paraId:216,tocIndex:39},{value:"手柄图标阴影颜色",paraId:216,tocIndex:39},{value:"string | (datum, index, data) => string",paraId:216,tocIndex:39},{value:"-",paraId:216,tocIndex:39},{value:"handleIconShadowBlur",paraId:216,tocIndex:39},{value:"手柄图标阴影的高斯模糊系数",paraId:216,tocIndex:39},{value:"number | (datum, index, data) => number",paraId:216,tocIndex:39},{value:"-",paraId:216,tocIndex:39},{value:"handleIconShadowOffsetX",paraId:216,tocIndex:39},{value:"设置阴影距手柄图标的水平距离",paraId:216,tocIndex:39},{value:"number | (datum, index, data) => number",paraId:216,tocIndex:39},{value:"-",paraId:216,tocIndex:39},{value:"handleIconShadowOffsetY",paraId:216,tocIndex:39},{value:"设置阴影距手柄图标的垂直距离",paraId:216,tocIndex:39},{value:"number | (datum, index, data) => number",paraId:216,tocIndex:39},{value:"-",paraId:216,tocIndex:39},{value:"handleIconCursor",paraId:216,tocIndex:39},{value:"手柄图标鼠标样式。同 css 的鼠标样式。",paraId:216,tocIndex:39},{value:"string | (datum, index, data) => string",paraId:216,tocIndex:39},{value:"default",paraId:216,tocIndex:39},{value:"在 Legend 组件中配置连续图例滑动手柄属性的时候，不是以对象的形式来配置，而是以 ",paraId:217,tocIndex:39},{value:"handle",paraId:217,tocIndex:39},{value:"前缀加属性的方式来配置。",paraId:217,tocIndex:39},{value:"({\n  legend: {\n    color: {\n      handle: true,\n      handleLabel: true,\n      slidable: true,\n      range: [0, 1],\n      step: 1,\n      //配置handleLabel的绘图属性\n      handleLabelFontSize: 16,\n      handleLabelFontFamily: 'sans-serif',\n      handleLabelFontWeight: 500,\n      handleLabelLineHeight: 20,\n      handleLabelTextAlign: 'center',\n      handleLabelTextBaseline: 'middle',\n      handleLabelFill: '#000',\n      handleLabelFillOpacity: 0.9,\n      handleLabelStroke: '#DAF5EC',\n      handleLabelStrokeOpacity: 0.9,\n      handleLabelLineWidth: 2,\n      handleLabelLineDash: [4, 8],\n      handleLabelOpacity: 1,\n      handleLabelShadowColor: '#d3d3d3',\n      handleLabelShadowBlur: 10,\n      handleLabelShadowOffsetX: 10,\n      handleLabelShadowOffsetY: 10,\n      handleLabelCursor: 'pointer',\n\n      handleIconSize: 50,\n      // 配置handleIcon的绘图属性\n      handleIconFill: '#000',\n      handleIconFillOpacity: 0.9,\n      handleIconStroke: '#DAF5EC',\n      handleIconStrokeOpacity: 0.9,\n      handleIconLineWidth: 2,\n      handleIconLineDash: [4, 8],\n      handleIconOpacity: 1,\n      handleIconShadowColor: '#d3d3d3',\n      handleIconShadowBlur: 10,\n      handleIconShadowOffsetX: 10,\n      handleIconShadowOffsetY: 10,\n      handleIconCursor: 'pointer',\n    },\n  },\n});\n",paraId:218,tocIndex:39},{value:" ",paraId:219,tocIndex:40},{value:"LegendLabelCfg",paraId:219,tocIndex:40},{value:" ",paraId:219,tocIndex:40},{value:"optional",paraId:219,tocIndex:40},{value:" ",paraId:219,tocIndex:40},{value:"适用于 ",paraId:220,tocIndex:40},{value:"连续图例",paraId:221,tocIndex:40},{value:" 。配置连续图例的标签/刻度值。 ",paraId:220,tocIndex:40},{value:"LegendLabelCfg",paraId:220,tocIndex:40},{value:" 配置如下：",paraId:220,tocIndex:40},{value:"属性",paraId:222,tocIndex:40},{value:"描述",paraId:222,tocIndex:40},{value:"类型",paraId:222,tocIndex:40},{value:"默认值",paraId:222,tocIndex:40},{value:"必选",paraId:222,tocIndex:40},{value:"label",paraId:222,tocIndex:40},{value:"是否显示连续图例的刻度值",paraId:222,tocIndex:40},{value:"boolean",paraId:222,tocIndex:40},{value:"true",paraId:222,tocIndex:40},{value:"labelFormatter",paraId:222,tocIndex:40},{value:"连续图例的刻度值格式化",paraId:222,tocIndex:40},{value:"(datum, index, data)=>string",paraId:222,tocIndex:40},{value:"-",paraId:222,tocIndex:40},{value:"labelFilter",paraId:222,tocIndex:40},{value:"连续图例的刻度值过滤",paraId:222,tocIndex:40},{value:"(datum, index, data)=>boolean",paraId:222,tocIndex:40},{value:"-",paraId:222,tocIndex:40},{value:"labelDirection",paraId:222,tocIndex:40},{value:"连续图例的刻度值位于色带的位置，参考 ",paraId:222,tocIndex:40},{value:"axis direction",paraId:222,tocIndex:40},{value:"positive",paraId:222,tocIndex:40},{value:" | ",paraId:222,tocIndex:40},{value:"negative",paraId:222,tocIndex:40},{value:"positive",paraId:222,tocIndex:40},{value:"labelSpacing",paraId:222,tocIndex:40},{value:"连续图例的刻度值到色带的间距",paraId:222,tocIndex:40},{value:"number",paraId:222,tocIndex:40},{value:"3",paraId:222,tocIndex:40},{value:"labelAlign",paraId:222,tocIndex:40},{value:"连续图例的刻度值对齐位置",paraId:222,tocIndex:40},{value:" - ",paraId:222,tocIndex:40},{value:"'value'",paraId:222,tocIndex:40},{value:" 对齐到刻度",paraId:222,tocIndex:40},{value:"- ",paraId:222,tocIndex:40},{value:"'range'",paraId:222,tocIndex:40},{value:" 对齐到范围",paraId:222,tocIndex:40},{value:"value",paraId:222,tocIndex:40},{value:" | ",paraId:222,tocIndex:40},{value:"range",paraId:222,tocIndex:40},{value:"value",paraId:222,tocIndex:40},{value:"labelFontSize",paraId:222,tocIndex:40},{value:"连续图例刻度值文字大小",paraId:222,tocIndex:40},{value:"number | (datum, index, data) => number",paraId:222,tocIndex:40},{value:"12",paraId:222,tocIndex:40},{value:"labelFontFamily",paraId:222,tocIndex:40},{value:"连续图例刻度值文字字体",paraId:222,tocIndex:40},{value:"string | (datum, index, data) => string",paraId:222,tocIndex:40},{value:"-",paraId:222,tocIndex:40},{value:"labelFontWeight",paraId:222,tocIndex:40},{value:"连续图例刻度值字体粗细",paraId:222,tocIndex:40},{value:"number | (datum, index, data) => number",paraId:222,tocIndex:40},{value:"normal",paraId:222,tocIndex:40},{value:"labelLineHeight",paraId:222,tocIndex:40},{value:"连续图例刻度值文字的行高",paraId:222,tocIndex:40},{value:"number | (datum, index, data) => number",paraId:222,tocIndex:40},{value:"-",paraId:222,tocIndex:40},{value:"labelTextAlign",paraId:222,tocIndex:40},{value:"设置连续图例刻度值文本内容的当前对齐方式",paraId:222,tocIndex:40},{value:"center",paraId:222,tocIndex:40},{value:" | ",paraId:222,tocIndex:40},{value:"end",paraId:222,tocIndex:40},{value:" | ",paraId:222,tocIndex:40},{value:"left",paraId:222,tocIndex:40},{value:" | ",paraId:222,tocIndex:40},{value:"right",paraId:222,tocIndex:40},{value:" | ",paraId:222,tocIndex:40},{value:"start",paraId:222,tocIndex:40},{value:"start",paraId:222,tocIndex:40},{value:"labelTextBaseline",paraId:222,tocIndex:40},{value:"设置在绘制连续图例刻度值文本时使用的当前文本基线",paraId:222,tocIndex:40},{value:"top",paraId:222,tocIndex:40},{value:" | ",paraId:222,tocIndex:40},{value:"middle",paraId:222,tocIndex:40},{value:" | ",paraId:222,tocIndex:40},{value:"bottom",paraId:222,tocIndex:40},{value:" | ",paraId:222,tocIndex:40},{value:"alphabetic",paraId:222,tocIndex:40},{value:" | ",paraId:222,tocIndex:40},{value:"hanging",paraId:222,tocIndex:40},{value:"bottom",paraId:222,tocIndex:40},{value:"labelFill",paraId:222,tocIndex:40},{value:"连续图例刻度值字体颜色",paraId:222,tocIndex:40},{value:"string | (datum, index, data) => string",paraId:222,tocIndex:40},{value:"#1D2129",paraId:222,tocIndex:40},{value:"labelFillOpacity",paraId:222,tocIndex:40},{value:"连续图例刻度值字体颜色透明度",paraId:222,tocIndex:40},{value:"number | (datum, index, data) => number",paraId:222,tocIndex:40},{value:"0.45",paraId:222,tocIndex:40},{value:"labelStroke",paraId:222,tocIndex:40},{value:"连续图例刻度值字体描边颜色",paraId:222,tocIndex:40},{value:"string | (datum, index, data) => string",paraId:222,tocIndex:40},{value:"-",paraId:222,tocIndex:40},{value:"labelStrokeOpacity",paraId:222,tocIndex:40},{value:"连续图例刻度值字体描边颜色透明度",paraId:222,tocIndex:40},{value:"number | (datum, index, data) => number",paraId:222,tocIndex:40},{value:"-",paraId:222,tocIndex:40},{value:"labelLineWidth",paraId:222,tocIndex:40},{value:"连续图例刻度值字体描边的宽度",paraId:222,tocIndex:40},{value:"number | (datum, index, data) => number",paraId:222,tocIndex:40},{value:"-",paraId:222,tocIndex:40},{value:"labelLineDash",paraId:222,tocIndex:40},{value:"连续图例刻度值字体描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:222,tocIndex:40},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:222,tocIndex:40},{value:"-",paraId:222,tocIndex:40},{value:"labelOpacity",paraId:222,tocIndex:40},{value:"连续图例刻度值文字的整体透明度",paraId:222,tocIndex:40},{value:"number | (datum, index, data) => number",paraId:222,tocIndex:40},{value:"-",paraId:222,tocIndex:40},{value:"labelShadowColor",paraId:222,tocIndex:40},{value:"连续图例刻度值文字阴影颜色",paraId:222,tocIndex:40},{value:"string | (datum, index, data) => string",paraId:222,tocIndex:40},{value:"-",paraId:222,tocIndex:40},{value:"labelShadowBlur",paraId:222,tocIndex:40},{value:"连续图例刻度值文字阴影的高斯模糊系数",paraId:222,tocIndex:40},{value:"number | (datum, index, data) => number",paraId:222,tocIndex:40},{value:"-",paraId:222,tocIndex:40},{value:"labelShadowOffsetX",paraId:222,tocIndex:40},{value:"设置阴影距连续图例刻度值文字的水平距离",paraId:222,tocIndex:40},{value:"number | (datum, index, data) => number",paraId:222,tocIndex:40},{value:"-",paraId:222,tocIndex:40},{value:"labelShadowOffsetY",paraId:222,tocIndex:40},{value:"设置阴影距连续图例刻度值文字的垂直距离",paraId:222,tocIndex:40},{value:"number | (datum, index, data) => number",paraId:222,tocIndex:40},{value:"-",paraId:222,tocIndex:40},{value:"labelCursor",paraId:222,tocIndex:40},{value:"手柄标签鼠标样式。同 css 的鼠标样式。",paraId:222,tocIndex:40},{value:"string | (datum, index, data) => string",paraId:222,tocIndex:40},{value:"default",paraId:222,tocIndex:40},{value:"刻度值对齐方式",paraId:223,tocIndex:40},{value:"对齐到刻度",paraId:224,tocIndex:40},{value:"\n ",paraId:213},{value:"对齐到范围",paraId:225,tocIndex:40},{value:"\n ",paraId:213},{value:"在 Legend 组件中配置连续图例的标签/刻度值属性的时候，不是以对象的形式来配置，而是以 ",paraId:226,tocIndex:40},{value:"label",paraId:226,tocIndex:40},{value:"前缀加属性的方式来配置。",paraId:226,tocIndex:40},{value:"({\n  legend: {\n    color: {\n      label: true,\n      labelFormatter: (d) => {},\n      labelFilter: (datum, index, data) => {},\n      labelDirection: 'positive',\n      labelSpacing: 5,\n      labelAlign: 'range',\n      // 配置连续图例的刻度值label的绘图属性\n      labelFontSize: 16,\n      labelFontFamily: 'sans-serif',\n      labelFontWeight: 500,\n      labelLineHeight: 20,\n      labelTextAlign: 'center',\n      labelTextBaseline: 'middle',\n      labelFill: '#000',\n      labelFillOpacity: 0.9,\n      labelStroke: '#DAF5EC',\n      labelStrokeOpacity: 0.9,\n      labelLineWidth: 2,\n      labelLineDash: [4, 8],\n      labelOpacity: 1,\n      labelShadowColor: '#d3d3d3',\n      labelShadowBlur: 10,\n      labelShadowOffsetX: 10,\n      labelShadowOffsetY: 10,\n      labelCursor: 'pointer',\n    },\n  },\n});\n",paraId:227,tocIndex:40},{value:" ",paraId:228,tocIndex:41},{value:"LegendIndicatorCfg",paraId:228,tocIndex:41},{value:" ",paraId:228,tocIndex:41},{value:"optional",paraId:228,tocIndex:41},{value:" ",paraId:228,tocIndex:41},{value:"适用于 ",paraId:229,tocIndex:41},{value:"连续图例",paraId:230,tocIndex:41},{value:" 。配置连续图例的指示器。指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。",paraId:229,tocIndex:41},{value:"LegendIndicatorCfg",paraId:231,tocIndex:41},{value:" 配置如下：",paraId:231,tocIndex:41},{value:"属性",paraId:232,tocIndex:41},{value:"描述",paraId:232,tocIndex:41},{value:"类型",paraId:232,tocIndex:41},{value:"默认值",paraId:232,tocIndex:41},{value:"必选",paraId:232,tocIndex:41},{value:"indicator",paraId:232,tocIndex:41},{value:"是否显示连续图例的刻值指示器",paraId:232,tocIndex:41},{value:"boolean",paraId:232,tocIndex:41},{value:"false",paraId:232,tocIndex:41},{value:"indicatorFormatter",paraId:232,tocIndex:41},{value:"值指示器格式化",paraId:232,tocIndex:41},{value:"(datum, index, data)=>string",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorLabelFontSize",paraId:232,tocIndex:41},{value:"值指示器文字大小",paraId:232,tocIndex:41},{value:"number | (datum, index, data) => number",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorLabelFontFamily",paraId:232,tocIndex:41},{value:"值指示器文字字体",paraId:232,tocIndex:41},{value:"string | (datum, index, data) => string",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorLabelFontWeight",paraId:232,tocIndex:41},{value:"值指示器字体粗细",paraId:232,tocIndex:41},{value:"number | (datum, index, data) => number",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorLabelLineHeight",paraId:232,tocIndex:41},{value:"值指示器文字的行高",paraId:232,tocIndex:41},{value:"number | (datum, index, data) => number",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorLabelTextAlign",paraId:232,tocIndex:41},{value:"设置值指示器文本内容的当前对齐方式",paraId:232,tocIndex:41},{value:"center",paraId:232,tocIndex:41},{value:" | ",paraId:232,tocIndex:41},{value:"end",paraId:232,tocIndex:41},{value:" | ",paraId:232,tocIndex:41},{value:"left",paraId:232,tocIndex:41},{value:" | ",paraId:232,tocIndex:41},{value:"right",paraId:232,tocIndex:41},{value:" | ",paraId:232,tocIndex:41},{value:"start",paraId:232,tocIndex:41},{value:"start",paraId:232,tocIndex:41},{value:"indicatorLabelTextBaseline",paraId:232,tocIndex:41},{value:"设置在绘制值指示器文本时使用的当前文本基线",paraId:232,tocIndex:41},{value:"top",paraId:232,tocIndex:41},{value:" | ",paraId:232,tocIndex:41},{value:"middle",paraId:232,tocIndex:41},{value:" | ",paraId:232,tocIndex:41},{value:"bottom",paraId:232,tocIndex:41},{value:" | ",paraId:232,tocIndex:41},{value:"alphabetic",paraId:232,tocIndex:41},{value:" | ",paraId:232,tocIndex:41},{value:"hanging",paraId:232,tocIndex:41},{value:"bottom",paraId:232,tocIndex:41},{value:"indicatorLabelFill",paraId:232,tocIndex:41},{value:"值指示器字体颜色",paraId:232,tocIndex:41},{value:"string | (datum, index, data) => string",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorLabelFillOpacity",paraId:232,tocIndex:41},{value:"值指示器字体颜色透明度",paraId:232,tocIndex:41},{value:"number | (datum, index, data) => number",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorLabelStroke",paraId:232,tocIndex:41},{value:"值指示器字体描边颜色",paraId:232,tocIndex:41},{value:"string | (datum, index, data) => string",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorLabelStrokeOpacity",paraId:232,tocIndex:41},{value:"值指示器字体描边颜色透明度",paraId:232,tocIndex:41},{value:"number | (datum, index, data) => number",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorLabelLineWidth",paraId:232,tocIndex:41},{value:"值指示器字体描边的宽度",paraId:232,tocIndex:41},{value:"number | (datum, index, data) => number",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorLabelLineDash",paraId:232,tocIndex:41},{value:"值指示器字体描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:232,tocIndex:41},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorLabelOpacity",paraId:232,tocIndex:41},{value:"值指示器文字的整体透明度",paraId:232,tocIndex:41},{value:"number | (datum, index, data) => number",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorLabelShadowColor",paraId:232,tocIndex:41},{value:"值指示器文字阴影颜色",paraId:232,tocIndex:41},{value:"string | (datum, index, data) => string",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorLabelShadowBlur",paraId:232,tocIndex:41},{value:"值指示器文字阴影的高斯模糊系数",paraId:232,tocIndex:41},{value:"number | (datum, index, data) => number",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorLabelShadowOffsetX",paraId:232,tocIndex:41},{value:"设置阴影距值指示器文字的水平距离",paraId:232,tocIndex:41},{value:"number | (datum, index, data) => number",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorLabelShadowOffsetY",paraId:232,tocIndex:41},{value:"设置阴影距值指示器文字的垂直距离",paraId:232,tocIndex:41},{value:"number | (datum, index, data) => number",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorLabelCursor",paraId:232,tocIndex:41},{value:"值指示器鼠标样式。同 css 的鼠标样式。",paraId:232,tocIndex:41},{value:"string | (datum, index, data) => string",paraId:232,tocIndex:41},{value:"default",paraId:232,tocIndex:41},{value:"indicatorBackgroundFill",paraId:232,tocIndex:41},{value:"值指示器背景填充色",paraId:232,tocIndex:41},{value:"string | (datum, index, data) => string",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorBackgroundFillOpacity",paraId:232,tocIndex:41},{value:"值指示器背景填充透明度",paraId:232,tocIndex:41},{value:"number | (datum, index, data) => number",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorBackgroundStroke",paraId:232,tocIndex:41},{value:"值指示器背景的描边",paraId:232,tocIndex:41},{value:"string | (datum, index, data) => string",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorBackgroundStrokeOpacity",paraId:232,tocIndex:41},{value:"值指示器背景描边透明度",paraId:232,tocIndex:41},{value:"number | (datum, index, data) => number",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorBackgroundLineWidth",paraId:232,tocIndex:41},{value:"值指示器背景描边的宽度",paraId:232,tocIndex:41},{value:"number | (datum, index, data) => number",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorBackgroundLineDash",paraId:232,tocIndex:41},{value:"值指示器背景描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:232,tocIndex:41},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorBackgroundOpacity",paraId:232,tocIndex:41},{value:"值指示器背景的整体透明度",paraId:232,tocIndex:41},{value:"number | (datum, index, data) => number",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorBackgroundShadowColor",paraId:232,tocIndex:41},{value:"值指示器背景阴影颜色",paraId:232,tocIndex:41},{value:"string | (datum, index, data) => string",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorBackgroundShadowBlur",paraId:232,tocIndex:41},{value:"值指示器背景阴影的高斯模糊系数",paraId:232,tocIndex:41},{value:"number | (datum, index, data) => number",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorBackgroundShadowOffsetX",paraId:232,tocIndex:41},{value:"设置阴影距值指示器背景的水平距离",paraId:232,tocIndex:41},{value:"number | (datum, index, data) => number",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorBackgroundShadowOffsetY",paraId:232,tocIndex:41},{value:"设置阴影距值指示器背景的垂直距离",paraId:232,tocIndex:41},{value:"number | (datum, index, data) => number",paraId:232,tocIndex:41},{value:"-",paraId:232,tocIndex:41},{value:"indicatorBackgroundCursor",paraId:232,tocIndex:41},{value:"值指示器背景鼠标样式。同 css 的鼠标样式。",paraId:232,tocIndex:41},{value:"string | (datum, index, data) => string",paraId:232,tocIndex:41},{value:"default",paraId:232,tocIndex:41},{value:"在 Legend 组件中配置值指示器属性的时候，不是以对象的形式来配置，而是以 ",paraId:233,tocIndex:41},{value:"indicator",paraId:233,tocIndex:41},{value:"前缀加属性的方式来配置。",paraId:233,tocIndex:41},{value:"({\n  legend: {\n    color: {\n      indicator: 'true',\n      indicatorFormatter: (d) => {},\n\n      //配置indicatorLabel的绘图属性\n      indicatorLabelFontSize: 16,\n      indicatorLabelFontFamily: 'sans-serif',\n      indicatorLabelFontWeight: 500,\n      indicatorLabelLineHeight: 20,\n      indicatorLabelTextAlign: 'center',\n      indicatorLabelTextBaseline: 'middle',\n      indicatorLabelFill: '#000',\n      indicatorLabelFillOpacity: 0.9,\n      indicatorLabelStroke: '#DAF5EC',\n      indicatorLabelStrokeOpacity: 0.9,\n      indicatorLabelLineWidth: 2,\n      indicatorLabelLineDash: [4, 8],\n      indicatorLabelOpacity: 1,\n      indicatorLabelShadowColor: '#d3d3d3',\n      indicatorLabelShadowBlur: 10,\n      indicatorLabelShadowOffsetX: 10,\n      indicatorLabelShadowOffsetY: 10,\n      indicatorLabelCursor: 'pointer',\n\n      // 配置indicatorBackground的绘图属性\n      indicatorBackgroundFill: '#000',\n      indicatorBackgroundFillOpacity: 0.9,\n      indicatorBackgroundStroke: '#DAF5EC',\n      indicatorBackgroundStrokeOpacity: 0.9,\n      indicatorBackgroundLineWidth: 2,\n      indicatorBackgroundLineDash: [4, 8],\n      indicatorBackgroundOpacity: 1,\n      indicatorBackgroundShadowColor: '#d3d3d3',\n      indicatorBackgroundShadowBlur: 10,\n      indicatorBackgroundShadowOffsetX: 10,\n      indicatorBackgroundShadowOffsetY: 10,\n      indicatorBackgroundCursor: 'pointer',\n    },\n  },\n});\n",paraId:234,tocIndex:41},{value:"图例组件对外暴露了一些特殊的事件，用于获取组件的交互信息。",paraId:235,tocIndex:42},{value:"事件类型",paraId:236,tocIndex:42},{value:"描述",paraId:236,tocIndex:42},{value:"类型",paraId:236,tocIndex:42},{value:"click ",paraId:236,tocIndex:42},{value:"分类图例",paraId:237,tocIndex:42},{value:"点击图例项时触发",paraId:236,tocIndex:42},{value:"(item:Selection)=>void",paraId:236,tocIndex:42},{value:"mouseenter ",paraId:236,tocIndex:42},{value:"分类图例",paraId:238,tocIndex:42},{value:"鼠标移入图例项时触发",paraId:236,tocIndex:42},{value:"(item: Selection)=>void",paraId:236,tocIndex:42},{value:"mouseleave ",paraId:236,tocIndex:42},{value:"分类图例",paraId:239,tocIndex:42},{value:"鼠标移出图例项时触发",paraId:236,tocIndex:42},{value:"(item:Selection)=>void",paraId:236,tocIndex:42},{value:"valuechange ",paraId:236,tocIndex:42},{value:"连续图例",paraId:240,tocIndex:42},{value:"滑动窗口选取范围改变时触发",paraId:236,tocIndex:42},{value:"(range: [number, number])=>void",paraId:236,tocIndex:42},{value:"indicate ",paraId:236,tocIndex:42},{value:"连续图例",paraId:241,tocIndex:42},{value:"指示器值改变时触发",paraId:236,tocIndex:42},{value:"(value: number, range: [number, number])=>void",paraId:236,tocIndex:42},{value:"组件在图表渲染后才会出现，所以要在 ",paraId:242,tocIndex:42},{value:"afterrender",paraId:242,tocIndex:42},{value:" 后挂载组件的事件，以下是一个例子：",paraId:242,tocIndex:42},{value:"chart.on('afterrender', () => {\n  const { canvas } = chart.getContext();\n  const { document } = canvas;\n  document\n    .querySelector('.component')\n    .addEventListener('valuechange', (range) => {});\n});\n",paraId:243,tocIndex:42},{value:"通过 ",paraId:244,tocIndex:44},{value:"defaultSelect",paraId:244,tocIndex:44},{value:" 选项，您可以指定在首次渲染图表时默认选中的图例项：",paraId:244,tocIndex:44},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 100 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  legend: {\n    color: {\n      defaultSelect: ['Sports', 'Strategy', 'Action'],\n    },\n  },\n});\n\nchart.render();\n",paraId:245,tocIndex:44},{value:"你也可以在合适的时间，手动触发 ",paraId:246,tocIndex:44},{value:"legend:filter",paraId:246,tocIndex:44},{value:" 来实现这个效果：",paraId:246,tocIndex:44},{value:"chart.on(ChartEvent.AFTER_RENDER, () => {\n  chart.emit('legend:filter', {\n    data: { channel: 'color', values: ['Sports', 'Strategy', 'Action'] },\n  });\n});\n",paraId:247,tocIndex:44},{value:"当图例位置为 ",paraId:248,tocIndex:45},{value:"right",paraId:248,tocIndex:45},{value:" 或 ",paraId:248,tocIndex:45},{value:"left",paraId:248,tocIndex:45},{value:" 时，由于 ",paraId:248,tocIndex:45},{value:"maxRows",paraId:248,tocIndex:45},{value:" 不生效，需要通过 ",paraId:248,tocIndex:45},{value:"length",paraId:248,tocIndex:45},{value:" 属性控制图例高度来实现分页效果。",paraId:248,tocIndex:45},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 350,\n  width: 600,\n});\n\n// 创建多个图例项的数据\nconst data = [\n  { category: 'Category A', value: 40 },\n  { category: 'Category B', value: 35 },\n  { category: 'Category C', value: 30 },\n  { category: 'Category D', value: 25 },\n  { category: 'Category E', value: 20 },\n  { category: 'Category F', value: 18 },\n  { category: 'Category G', value: 15 },\n  { category: 'Category H', value: 12 },\n  { category: 'Category I', value: 10 },\n  { category: 'Category J', value: 8 },\n  { category: 'Category K', value: 6 },\n  { category: 'Category L', value: 4 },\n];\n\nchart.options({\n  type: 'interval',\n  data,\n  encode: { x: 'category', y: 'value', color: 'category' },\n  legend: {\n    color: {\n      position: 'right',\n      length: 150, // 限制图例高度，触发分页\n      size: 120, // 控制图例宽度\n      navOrientation: 'vertical', // 垂直方向分页器\n      navDefaultPage: 0, // 默认显示第一页\n      navLoop: true, // 启用循环翻页\n      navButtonFill: '#1890ff', // 分页按钮颜色\n      navPageNumFill: '#1890ff', // 页码颜色\n      navFormatter: (current, total) => `${current + 1}/${total}`, // 页码格式\n    },\n  },\n});\n\nchart.render();\n",paraId:249,tocIndex:45},{value:"在具体开发过程中，内置的图例项图标可能无法满足你的要求，不用担心，G2 提供了强大的自定义功能。",paraId:250,tocIndex:46},{value:"每一个符号都可以自定义，主要分为三步：",paraId:251,tocIndex:47},{value:"定义符号路径。",paraId:252,tocIndex:47},{value:"注册符号。",paraId:252,tocIndex:47},{value:"使用符号。",paraId:252,tocIndex:47},{value:"首先我们来看看如何定义符号路径。一个符号路径是一个函数，该函数接受起始点的横向坐标 x、纵向坐标 y 和绘制半径，返回一个路径。",paraId:253,tocIndex:47},{value:"import { type SymbolFactor } from '@antv/g2';\n\nconst triangle: SymbolFactor = (x, y, r) => {\n  const diffY = r * Math.sin((1 / 3) * Math.PI);\n  return [\n    ['M', x - r, y + diffY],\n    ['L', x, y - diffY],\n    ['L', x + r, y + diffY],\n    ['Z'],\n  ];\n};\ntriangle.style = ['fill'];\n",paraId:254,tocIndex:47},{value:"接下来就是注册符号，通过调用 ",paraId:255,tocIndex:47},{value:"G2.register('symbol.${symbol}', Symbol)",paraId:255,tocIndex:47},{value:" 来完成注册。其中 ",paraId:255,tocIndex:47},{value:"symbol",paraId:255,tocIndex:47},{value:" 是符号的名字，",paraId:255,tocIndex:47},{value:"Symbol",paraId:255,tocIndex:47},{value:" 是定义好的符号路径。比如注册一个三角形的符号：",paraId:255,tocIndex:47},{value:"import { register } from '@antv/g2';\n\nregister('symbol.customTriangle', triangle);\n",paraId:256,tocIndex:47},{value:"最后就是使用该符号了",paraId:257,tocIndex:47},{value:"legend: {\n  color: {\n    itemMarker: 'customTriangle';\n  }\n}\n",paraId:258,tocIndex:47},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst logo = [\n  [\n    '抖音',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*8IXHQLvx9QkAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    '快手',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*swueRrrKvbcAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    '小米',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*79G3TIt3mBoAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    '微信',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*_ELBTJLp0dQAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'Keep',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*JzbKRpFhR14AAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'Chrome',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*xLnYTaZfdh8AAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'QQ',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*AbGNTpA5JLwAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    '优酷',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*UL6lS4jw9lUAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    '百度地图',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*I6nrTITAxcoAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    '腾讯视频',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zwVvT5OFnuYAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    '哔哩哔哩',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*6jkAQayTiMMAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'Word',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*FbkXT6K6mVEAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'Excel',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*CKb-R6ZAFpYAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'PowerPoint',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*K7-FT4RYRqIAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    '腾讯会议',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*xbPXR7snu44AAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    '网易云音乐',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*upKlRJ9QB4cAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'Safari',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kjDHRbiW734AAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    '地图',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*tl-2QIB8LKIAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'Docker',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*iJ4dS49yrJ4AAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'VSCode',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*rR6nRInEcz4AAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    '百度网盘',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*futaTbIAkG4AAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    '印象笔记',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Skh1S4BfL9oAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n];\n\nchart\n  .interval()\n  .data(logo)\n  .encode('x', (d) => d[0])\n  .encode('y', () => Math.random())\n  .encode('color', (d) => d[1])\n  .scale('y', { nice: true })\n  .legend({\n    color: {\n      itemMarker: (_, index) => () => {\n        const { document } = chart.getContext().canvas;\n        const image = document.createElement('image', {\n          style: {\n            width: 20,\n            height: 20,\n            transform: `translate(-10, -10)`,\n            src: logo[index][1],\n          },\n        });\n        return image;\n      },\n      itemMarkerSize: 40,\n      itemLabelText: (_, index) => logo[index][0],\n      maxRows: 1,\n    },\n  })\n  .tooltip(false);\n\nchart.render();\n",paraId:259,tocIndex:48},{value:"G2 内置的图例是用 canvas 或者 svg 绘制的，如果希望能用 HTML 渲染图例，就可以按照如下几步自定义图例：",paraId:260,tocIndex:49},{value:"关闭内置图例并且渲染图表。",paraId:261,tocIndex:49},{value:"等待图表渲染完成，根据 scale 数据渲染 HTML 图例。",paraId:261,tocIndex:49},{value:"添加交互（如果需要）。",paraId:261,tocIndex:49},{value:"首先是关闭内置图例，同时渲染图表。",paraId:262,tocIndex:49},{value:"chart.options({ legend: false });\n",paraId:263,tocIndex:49},{value:"然后是等待图表渲染完成，并且调用 ",paraId:264,tocIndex:49},{value:"legendColor",paraId:264,tocIndex:49},{value:" 渲染 HTML 图例：",paraId:264,tocIndex:49},{value:"chart.render().then(legendColor);\n",paraId:265,tocIndex:49},{value:"在 ",paraId:266,tocIndex:49},{value:"legendColor",paraId:266,tocIndex:49},{value:" 里我们首先需要把图例画出来，下面这个例子把图例画出来后，添加到了画布前面：",paraId:266,tocIndex:49},{value:"function legendColor(chart) {\n  const node = chart.getContainer();\n  const legend = document.createElement('div');\n  node.insertBefore(legend, node.childNodes[0]);\n\n  // ...\n}\n",paraId:267,tocIndex:49},{value:"画出了图例之后，我们需要绘制图例项，这个数据从对应通道的比例尺获得：",paraId:268,tocIndex:49},{value:"chart.getScale().color",paraId:268,tocIndex:49},{value:"，并且通过 scale 的 domain 和 range 获得对应的名字和值。",paraId:268,tocIndex:49},{value:"function legendColor(chart) {\n  // ...\n  const scale = chart.getScale().color;\n  const { domain } = scale.getOptions();\n  const items = domain.map(() => {});\n  // ...\n}\n",paraId:269,tocIndex:49},{value:"绘制完图例项之后我们就应该给每个图例项通过 ",paraId:270,tocIndex:49},{value:"item.onclick",paraId:270,tocIndex:49},{value:" 添加交互，收集当前选中的值，并且根据这个值去给图表的声明添加 Filter 转换，最后重新渲染图表。最后完整的实现如下：",paraId:270,tocIndex:49},{value:"import { Chart } from '@antv/g2';\n\n// 添加图例\nfunction legendColor(chart) {\n  // 创建 Legend 并且挂载图例\n  const node = chart.getContainer();\n  const legend = document.createElement('div');\n  legend.style.display = 'flex';\n  node.insertBefore(legend, node.childNodes[0]);\n\n  // 创建并挂载 Items\n  const { color: scale } = chart.getScale();\n  const { domain } = scale.getOptions();\n  const items = domain.map((value) => {\n    const item = document.createElement('div');\n    const color = scale.map(value);\n    item.style.marginLeft = '1em';\n    item.innerHTML = `\n      <span style=\"\n        background-color:${color};\n        display:inline-block;\n        width:10px;\n        height:10px;\"\n      ></span>\n      <span>${value}</span>\n      `;\n    return item;\n  });\n  items.forEach((d) => legend.append(d));\n\n  // 监听事件\n  const selectedValues = [...domain];\n  const options = chart.options();\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    const value = domain[i];\n    item.style.cursor = 'pointer';\n    item.onclick = () => {\n      const index = selectedValues.indexOf(value);\n      if (index !== -1) {\n        selectedValues.splice(index, 1);\n        item.style.opacity = 0.5;\n      } else {\n        selectedValues.push(value);\n        item.style.opacity = 1;\n      }\n      changeColor(selectedValues);\n    };\n  }\n\n  // 重新渲染视图\n  function changeColor(value) {\n    const { transform = [] } = options;\n    const newTransform = [{ type: 'filter', color: { value } }, ...transform];\n    chart.options({\n      ...options,\n      transform: newTransform, // 指定新的 transform\n      scale: { color: { domain } },\n    });\n    chart.render(); // 重新渲染图表\n  }\n}\n\n// 绘制图表\nconst container = document.createElement('div');\n\nconst chart = new Chart({\n  container: 'container',\n  container,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  legend: false,\n});\n\nchart.render().then(legendColor);\n",paraId:271,tocIndex:49},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 300,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { category: '这是一个非常长的类别名称A，超出显示范围', value: 40 },\n    { category: '这是一个非常长的类别名称B，超出显示范围', value: 32 },\n    { category: '这是一个非常长的类别名称C，超出显示范围', value: 28 },\n  ],\n  encode: { x: 'category', y: 'value', color: 'category' },\n  coordinate: {\n    transform: [\n      {\n        type: 'transpose',\n      },\n    ],\n  },\n  legend: {\n    color: {\n      itemWidth: 120, // 限制宽度以触发poptip\n      poptip: {\n        render: (item) => `完整名称：${item.label}\n        `,\n        position: 'top',\n        offset: [0, 20],\n        domStyles: {\n          '.component-poptip': {\n            background: 'rgb(114, 128, 191) ',\n            color: '#fff',\n            padding: '12px 16px',\n            borderRadius: '8px',\n            backdropFilter: 'blur(10px)',\n            fontSize: '14px',\n            lineHeight: '1.5',\n            maxWidth: '280px',\n            zIndex: '1000',\n          },\n          '.component-poptip-arrow': {\n            display: 'block',\n            borderTopColor: '#667eea',\n          },\n          '.component-poptip-text': {\n            color: '#fff',\n            lineHeight: '1.5',\n          },\n        },\n      },\n    },\n  },\n});\n\nchart.render();\n",paraId:272,tocIndex:50}]},21969:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(28264);const t=[{value:"G2 中 ",paraId:0,tocIndex:0},{value:"滚动条（Scrollbar）",paraId:0,tocIndex:0},{value:" 可以用于过滤数据，可以和 x 或者 y 通道绑定的，滚动条默认都是关闭的。解决图表信息过于密集而无法完全展示的问题。",paraId:0,tocIndex:0},{value:"何时使用：内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  height: 300,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency', y1: 0.000001 },\n  scale: { y: { type: 'log' } },\n  scrollbar: {\n    x: {\n      ratio: 0.2,\n      trackSize: 14,\n      trackFill: '#000',\n      trackFillOpacity: 1,\n    },\n    y: {\n      ratio: 0.5,\n      trackSize: 12,\n      value: 0.1,\n      trackFill: '#000',\n      trackFillOpacity: 1,\n    },\n  },\n});\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"滚动条可以在 Mark 层级配置。在 G2 中，每个标记（Mark）都有自己的滚动条。如果标记对应的比例尺是同步的，那么滚动条也会合并。",paraId:3,tocIndex:2},{value:"({\n  type: 'interval',\n  scrollbar: {\n    x: {}, // x轴滚动条\n    y: {}, // y轴滚动条\n  },\n});\n",paraId:4,tocIndex:2},{value:"滚动条也可以在 View 层级配置。滚动条具有传递性。视图上声明的滚动条会传递给 ",paraId:5,tocIndex:2},{value:"children",paraId:5,tocIndex:2},{value:" 声明的标记，如果该标记有对应通道的滚动条，就合并；否则不影响。",paraId:5,tocIndex:2},{value:"({\n  type: 'view',\n  scrollbar: {\n    x: {},\n    y: {},\n  },\n});\n",paraId:6,tocIndex:2},{value:"属性",paraId:7,tocIndex:3},{value:"描述",paraId:7,tocIndex:3},{value:"类型",paraId:7,tocIndex:3},{value:"默认值",paraId:7,tocIndex:3},{value:"必选",paraId:7,tocIndex:3},{value:"ratio",paraId:7,tocIndex:3},{value:"滚动条的比例，为单页显示数据在总数据量上单比例",paraId:7,tocIndex:3},{value:"number",paraId:7,tocIndex:3},{value:"0.5",paraId:7,tocIndex:3},{value:"value",paraId:7,tocIndex:3},{value:"滚动条的起始位置，水平方向默认值为 ",paraId:7,tocIndex:3},{value:"0",paraId:7,tocIndex:3},{value:"，垂直方向默认为 ",paraId:7,tocIndex:3},{value:"1",paraId:7,tocIndex:3},{value:"[0, 1]",paraId:7,tocIndex:3},{value:"slidable",paraId:7,tocIndex:3},{value:"是否可以拖动",paraId:7,tocIndex:3},{value:"boolean",paraId:7,tocIndex:3},{value:"true",paraId:7,tocIndex:3},{value:"position",paraId:7,tocIndex:3},{value:"滚动条相对图表方位",paraId:7,tocIndex:3},{value:"string",paraId:7,tocIndex:3},{value:"bottom",paraId:7,tocIndex:3},{value:"isRound",paraId:7,tocIndex:3},{value:"滚动条样式是否为圆角",paraId:7,tocIndex:3},{value:"boolean",paraId:7,tocIndex:3},{value:"true",paraId:7,tocIndex:3},{value:"style",paraId:7,tocIndex:3},{value:"滚动条样式配置，样式都可以直接在配置项中配置",paraId:7,tocIndex:3},{value:"style",paraId:8,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  autoFit: true,\n  height: 300,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/unemployment-by-industry.json',\n  },\n  encode: {\n    x: (d) => new Date(d.date),\n    y: 'unemployed',\n    color: 'industry',\n    shape: 'smooth',\n  },\n  transform: [{ type: 'stackY' }],\n  scrollbar: {\n    x: {\n      // 配置项\n      ratio: 0.2,\n      value: 0.1,\n      slidable: true,\n      isRound: true,\n      position: 'top',\n\n      // 滚动条滑快样式\n      thumbFillOpacity: 0.2,\n      thumbFill: '#000',\n      thumbStroke: '#000',\n\n      // 滚动条滑轨样式\n      trackFill: '#fa0',\n      trackStroke: '#f00',\n      trackLineWidth: 2,\n      trackFillOpacity: 1,\n      trackSize: 14,\n      trackLength: 300,\n    },\n  },\n});\n\nchart.render();\n",paraId:9,tocIndex:3},{value:"style",paraId:10,tocIndex:4},{value:" 滚动条样式配置，内部做了处理，可以直接在配置项配置样式。具体样式配置，可参考 ",paraId:10,tocIndex:4},{value:"滚动条滑块(thumb)",paraId:11,tocIndex:4},{value:"、",paraId:10,tocIndex:4},{value:"滚动条滑轨(track)",paraId:12,tocIndex:4},{value:"。",paraId:10,tocIndex:4},{value:"属性",paraId:13,tocIndex:5},{value:"描述",paraId:13,tocIndex:5},{value:"类型",paraId:13,tocIndex:5},{value:"默认值",paraId:13,tocIndex:5},{value:"必选",paraId:13,tocIndex:5},{value:"thumbFill",paraId:13,tocIndex:5},{value:"滚动条滑块图形的填充色",paraId:13,tocIndex:5},{value:"string",paraId:13,tocIndex:5},{value:"#000",paraId:13,tocIndex:5},{value:"thumbFillOpacity",paraId:13,tocIndex:5},{value:"滚动条滑块图形的填充透明度",paraId:13,tocIndex:5},{value:"number",paraId:13,tocIndex:5},{value:"0.15",paraId:13,tocIndex:5},{value:"thumbStroke",paraId:13,tocIndex:5},{value:"滚动条滑块图形的描边颜色",paraId:13,tocIndex:5},{value:"string",paraId:13,tocIndex:5},{value:"–",paraId:13,tocIndex:5},{value:"thumbLineWidth",paraId:13,tocIndex:5},{value:"滚动条滑块图形的描边宽度",paraId:13,tocIndex:5},{value:"number",paraId:13,tocIndex:5},{value:"–",paraId:13,tocIndex:5},{value:"thumbStrokeOpacity",paraId:13,tocIndex:5},{value:"滚动条滑块图形的描边透明度",paraId:13,tocIndex:5},{value:"number",paraId:13,tocIndex:5},{value:"–",paraId:13,tocIndex:5},{value:"thumbLineDash",paraId:13,tocIndex:5},{value:"滚动条滑块图形的虚线配置",paraId:13,tocIndex:5},{value:"[number,number]",paraId:13,tocIndex:5},{value:"–",paraId:13,tocIndex:5},{value:"thumbOpacity",paraId:13,tocIndex:5},{value:"滚动条滑块图形的整体透明度",paraId:13,tocIndex:5},{value:"number",paraId:13,tocIndex:5},{value:"–",paraId:13,tocIndex:5},{value:"thumbShadowColor",paraId:13,tocIndex:5},{value:"滚动条滑块图形阴影颜色",paraId:13,tocIndex:5},{value:"string",paraId:13,tocIndex:5},{value:"–",paraId:13,tocIndex:5},{value:"thumbShadowBlur",paraId:13,tocIndex:5},{value:"滚动条滑块图形阴影的高斯模糊系数",paraId:13,tocIndex:5},{value:"number",paraId:13,tocIndex:5},{value:"–",paraId:13,tocIndex:5},{value:"thumbShadowOffsetX",paraId:13,tocIndex:5},{value:"滚动条滑块阴影距图形的水平距离",paraId:13,tocIndex:5},{value:"number",paraId:13,tocIndex:5},{value:"–",paraId:13,tocIndex:5},{value:"thumbShadowOffsetY",paraId:13,tocIndex:5},{value:"滚动条滑块阴影距图形的垂直距离",paraId:13,tocIndex:5},{value:"number",paraId:13,tocIndex:5},{value:"–",paraId:13,tocIndex:5},{value:"thumbCursor",paraId:13,tocIndex:5},{value:"滚动条滑块鼠标样式",paraId:13,tocIndex:5},{value:"string",paraId:13,tocIndex:5},{value:"default",paraId:13,tocIndex:5},{value:"({\n  scrollbar: {\n    x: {\n      thumbFill: '#1173a1',\n      thumbFillOpacity: 1,\n      thumbStroke: 'red',\n      thumbLineWidth: 2,\n      thumbStrokeOpacity: 0.9,\n    },\n    y: {},\n  },\n});\n",paraId:14,tocIndex:5},{value:"属性",paraId:15,tocIndex:6},{value:"描述",paraId:15,tocIndex:6},{value:"类型",paraId:15,tocIndex:6},{value:"默认值",paraId:15,tocIndex:6},{value:"必选",paraId:15,tocIndex:6},{value:"trackSize",paraId:15,tocIndex:6},{value:"滚动条滑轨的轨道宽度",paraId:15,tocIndex:6},{value:"number",paraId:15,tocIndex:6},{value:"10",paraId:15,tocIndex:6},{value:"trackLength",paraId:15,tocIndex:6},{value:"滚动条滑轨的轨道长度",paraId:15,tocIndex:6},{value:"number",paraId:15,tocIndex:6},{value:"–",paraId:15,tocIndex:6},{value:"trackFill",paraId:15,tocIndex:6},{value:"滚动条滑轨图形的填充色",paraId:15,tocIndex:6},{value:"string",paraId:15,tocIndex:6},{value:"–",paraId:15,tocIndex:6},{value:"trackFillOpacity",paraId:15,tocIndex:6},{value:"滚动条滑轨图形的填充透明度",paraId:15,tocIndex:6},{value:"number",paraId:15,tocIndex:6},{value:"0",paraId:15,tocIndex:6},{value:"trackStroke",paraId:15,tocIndex:6},{value:"滚动条滑轨图形的描边颜色",paraId:15,tocIndex:6},{value:"string",paraId:15,tocIndex:6},{value:"–",paraId:15,tocIndex:6},{value:"trackLineWidth",paraId:15,tocIndex:6},{value:"滚动条滑轨图形的描边宽度",paraId:15,tocIndex:6},{value:"number",paraId:15,tocIndex:6},{value:"–",paraId:15,tocIndex:6},{value:"trackStrokeOpacity",paraId:15,tocIndex:6},{value:"滚动条滑轨图形的描边透明度",paraId:15,tocIndex:6},{value:"number",paraId:15,tocIndex:6},{value:"–",paraId:15,tocIndex:6},{value:"trackLineDash",paraId:15,tocIndex:6},{value:"滚动条滑轨图形的虚线配置",paraId:15,tocIndex:6},{value:"[number,number]",paraId:15,tocIndex:6},{value:"–",paraId:15,tocIndex:6},{value:"trackOpacity",paraId:15,tocIndex:6},{value:"滚动条滑轨图形的整体透明度",paraId:15,tocIndex:6},{value:"number",paraId:15,tocIndex:6},{value:"–",paraId:15,tocIndex:6},{value:"trackShadowColor",paraId:15,tocIndex:6},{value:"滚动条滑轨图形阴影颜色",paraId:15,tocIndex:6},{value:"string",paraId:15,tocIndex:6},{value:"–",paraId:15,tocIndex:6},{value:"trackShadowBlur",paraId:15,tocIndex:6},{value:"滚动条滑轨图形阴影的高斯模糊系数",paraId:15,tocIndex:6},{value:"number",paraId:15,tocIndex:6},{value:"–",paraId:15,tocIndex:6},{value:"trackShadowOffsetX",paraId:15,tocIndex:6},{value:"滚动条滑轨阴影距图形的水平距离",paraId:15,tocIndex:6},{value:"number",paraId:15,tocIndex:6},{value:"–",paraId:15,tocIndex:6},{value:"trackShadowOffsetY",paraId:15,tocIndex:6},{value:"滚动条滑轨阴影距图形的垂直距离",paraId:15,tocIndex:6},{value:"number",paraId:15,tocIndex:6},{value:"–",paraId:15,tocIndex:6},{value:"trackCursor",paraId:15,tocIndex:6},{value:"滚动条滑轨鼠标样式",paraId:15,tocIndex:6},{value:"string",paraId:15,tocIndex:6},{value:"default",paraId:15,tocIndex:6},{value:"({\n  scrollbar: {\n    x: {\n      trackSize: 20,\n      trackLength: 300,\n      trackFillOpacity: 1,\n      trackFill: 'red',\n      trackLineWidth: 2,\n      trackStroke: 'red',\n      trackStrokeOpacity: 0.4,\n    },\n    y: {},\n  },\n});\n",paraId:16,tocIndex:6},{value:"属性",paraId:17,tocIndex:7},{value:"描述",paraId:17,tocIndex:7},{value:"类型",paraId:17,tocIndex:7},{value:"valuechange",paraId:17,tocIndex:7},{value:"发生滚动变化时触发，通过事件监听",paraId:17,tocIndex:7},{value:"({detail: { oldValue: any; value: any }}) => void",paraId:17,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  height: 300,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency', y1: 0.000001 },\n  scale: { y: { type: 'log' } },\n  scrollbar: { x: true },\n});\n\n// render 渲染图表之后\nchart.on('afterrender', () => {\n  const { canvas } = chart.getContext();\n  const { document } = canvas;\n  document\n    .querySelector('.g2-scrollbar')\n    .addEventListener('valuechange', (evt) => {\n      console.log(evt.detail.oldValue); // 滑动更新前对应数据\n      console.log(evt.detail.value); // 更新后对应数据\n    });\n});\n\nchart.render();\n",paraId:18,tocIndex:7}]},38238:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(97862);const t=[{value:"G2 中",paraId:0,tocIndex:0},{value:"缩略轴（Slider）",paraId:0,tocIndex:0},{value:" 可以用于过滤数据，让用户在数据量较大的情况下一次只用关注局部的数据，是一种辅助看数据的组件。它将大量数据浓缩到一个轴上，既可以缩小宏观看数据全貌，又可以放大微观看数据的片段，同时还可以拖拽观察数据在一定区间内的演变。缩略轴可以和 x 或者 y 通道绑定，用于显示不同方向的缩略轴，缩略轴默认都是关闭的。",paraId:0,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst formatter = (dateTimeString) => {\n  return new Date(dateTimeString).toLocaleString();\n};\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  },\n  encode: { x: 'date', y: 'close' },\n  slider: {\n    x: {\n      labelFormatter: (d) => `${formatter(d)}`,\n    },\n  },\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"缩略轴可以在 Mark 层级配置。在 G2 中，每个标记（Mark）都有自己的缩略轴。如果标记对应的比例尺是同步的，那么缩略轴也会合并。",paraId:2,tocIndex:1},{value:"({\n  type: 'interval',\n  slider: {\n    x: {},\n    y: {},\n  },\n});\n",paraId:3,tocIndex:1},{value:"缩略轴也可以在 View 层级配置。缩略轴具有传递性。视图上声明的缩略轴会传递给 ",paraId:4,tocIndex:1},{value:"children",paraId:4,tocIndex:1},{value:" 声明的标记，如果该标记有对应通道的缩略轴，就合并；否则不影响。",paraId:4,tocIndex:1},{value:"({\n  type: 'view',\n  slider: {\n    x: {},\n    y: {},\n  },\n});\n",paraId:5,tocIndex:1},{value:"缩略轴是值域数据的浓缩，它跟位置通道 ",paraId:6,tocIndex:2},{value:"x",paraId:6,tocIndex:2},{value:", ",paraId:6,tocIndex:2},{value:"y",paraId:6,tocIndex:2},{value:" 对应的比例尺的类型息息相关。一般来说时间类型上使用缩略轴的频率高，连续轴使用缩略轴频次低、分类轴几乎不会使用到缩略轴。",paraId:6,tocIndex:2},{value:"时间轴，数据跨度非常大，【高频使用】，比如一组时序数据跨度 10 年，需观察这期间数据变化趋势时，建议开启缩略轴；",paraId:7,tocIndex:2},{value:"时间轴，数据密度很高，【高频使用】，比如分钟级更新的实时数据，当需要查看一天内的数据走势时，建议开启缩略轴；",paraId:7,tocIndex:2},{value:"连续轴，数据密度很高，【低频使用】比如查看 1-100 岁平均身高分布，开启缩略轴可以全局查看身高分布；",paraId:7,tocIndex:2},{value:"分类轴【不建议使用】。",paraId:7,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  },\n  encode: { x: 'date', y: 'close' },\n  slider: { y: {} }, // 开启 Y 方向缩略轴\n});\n\nchart.render();\n",paraId:8,tocIndex:3},{value:"属性",paraId:9,tocIndex:4},{value:"描述",paraId:9,tocIndex:4},{value:"类型",paraId:9,tocIndex:4},{value:"默认值",paraId:9,tocIndex:4},{value:"必选",paraId:9,tocIndex:4},{value:"padding",paraId:9,tocIndex:4},{value:"缩略轴内边距",paraId:9,tocIndex:4},{value:"number | number[]",paraId:9,tocIndex:4},{value:"-",paraId:9,tocIndex:4},{value:"values",paraId:9,tocIndex:4},{value:"缩略轴初始选区范围，位于 0 ～ 1 区间",paraId:9,tocIndex:4},{value:"[number, number]",paraId:9,tocIndex:4},{value:"-",paraId:9,tocIndex:4},{value:"slidable",paraId:9,tocIndex:4},{value:"是否允许拖动选取和手柄",paraId:9,tocIndex:4},{value:"boolean",paraId:9,tocIndex:4},{value:"true",paraId:9,tocIndex:4},{value:"brushable",paraId:9,tocIndex:4},{value:"是否启用刷选",paraId:9,tocIndex:4},{value:"boolean",paraId:9,tocIndex:4},{value:"true",paraId:9,tocIndex:4},{value:"labelFormatter",paraId:9,tocIndex:4},{value:"缩略轴拖动手柄标签格式化",paraId:9,tocIndex:4},{value:"(value: number)=>string",paraId:9,tocIndex:4},{value:"-",paraId:9,tocIndex:4},{value:"showHandle",paraId:9,tocIndex:4},{value:"是否显示拖动手柄",paraId:9,tocIndex:4},{value:"boolean",paraId:9,tocIndex:4},{value:"true",paraId:9,tocIndex:4},{value:"showLabel",paraId:9,tocIndex:4},{value:"是否显示拖动手柄文本",paraId:9,tocIndex:4},{value:"boolean",paraId:9,tocIndex:4},{value:"true",paraId:9,tocIndex:4},{value:"showLabelOnInteraction",paraId:9,tocIndex:4},{value:"在调整手柄或刷选时才显示手柄文本，在 showLabel 为 false 时生效",paraId:9,tocIndex:4},{value:"boolean",paraId:9,tocIndex:4},{value:"false",paraId:9,tocIndex:4},{value:"autoFitLabel",paraId:9,tocIndex:4},{value:"是否自动调整拖动手柄文本位置",paraId:9,tocIndex:4},{value:"boolean",paraId:9,tocIndex:4},{value:"true",paraId:9,tocIndex:4},{value:"style",paraId:9,tocIndex:4},{value:"配置缩略轴组件的样式",paraId:9,tocIndex:4},{value:"style",paraId:10,tocIndex:4},{value:"详见 ",paraId:9,tocIndex:4},{value:"style",paraId:11,tocIndex:4},{value:"配置缩略轴组件的样式。",paraId:12,tocIndex:5},{value:"属性",paraId:13,tocIndex:5},{value:"描述",paraId:13,tocIndex:5},{value:"类型",paraId:13,tocIndex:5},{value:"默认值",paraId:13,tocIndex:5},{value:"必选",paraId:13,tocIndex:5},{value:"selection",paraId:13,tocIndex:5},{value:"配置缩略轴选区的样式",paraId:13,tocIndex:5},{value:"selection",paraId:14,tocIndex:5},{value:"详见 ",paraId:13,tocIndex:5},{value:"selection",paraId:15,tocIndex:5},{value:"track",paraId:13,tocIndex:5},{value:"配置缩略轴滑轨的样式",paraId:13,tocIndex:5},{value:"track",paraId:16,tocIndex:5},{value:"详见 ",paraId:13,tocIndex:5},{value:"track",paraId:17,tocIndex:5},{value:"handle",paraId:13,tocIndex:5},{value:"配置缩略轴手柄的样式",paraId:13,tocIndex:5},{value:"handle",paraId:18,tocIndex:5},{value:"详见 ",paraId:13,tocIndex:5},{value:"handle",paraId:19,tocIndex:5},{value:"sparkline",paraId:13,tocIndex:5},{value:"配置缩略轴迷你图的样式",paraId:13,tocIndex:5},{value:"sparkline",paraId:20,tocIndex:5},{value:"详见 ",paraId:13,tocIndex:5},{value:"sparkline",paraId:21,tocIndex:5},{value:"配置缩略轴选区的样式 。",paraId:22,tocIndex:6},{value:"属性",paraId:23,tocIndex:6},{value:"描述",paraId:23,tocIndex:6},{value:"类型",paraId:23,tocIndex:6},{value:"默认值",paraId:23,tocIndex:6},{value:"必选",paraId:23,tocIndex:6},{value:"selectionFill",paraId:23,tocIndex:6},{value:"缩略轴选区的填充色",paraId:23,tocIndex:6},{value:"string",paraId:23,tocIndex:6},{value:"#1783FF",paraId:23,tocIndex:6},{value:"selectionFillOpacity",paraId:23,tocIndex:6},{value:"缩略轴选区的填充透明度",paraId:23,tocIndex:6},{value:"number",paraId:23,tocIndex:6},{value:"0.15",paraId:23,tocIndex:6},{value:"selectionStroke",paraId:23,tocIndex:6},{value:"缩略轴选区的描边",paraId:23,tocIndex:6},{value:"string",paraId:23,tocIndex:6},{value:"-",paraId:23,tocIndex:6},{value:"selectionStrokeOpacity",paraId:23,tocIndex:6},{value:"缩略轴选区的描边透明度",paraId:23,tocIndex:6},{value:"number",paraId:23,tocIndex:6},{value:"-",paraId:23,tocIndex:6},{value:"selectionLineWidth",paraId:23,tocIndex:6},{value:"缩略轴选区的描边宽度",paraId:23,tocIndex:6},{value:"number",paraId:23,tocIndex:6},{value:"-",paraId:23,tocIndex:6},{value:"selectionLineDash",paraId:23,tocIndex:6},{value:"缩略轴选区描边的虚线配置",paraId:23,tocIndex:6},{value:"[number,number]",paraId:23,tocIndex:6},{value:"-",paraId:23,tocIndex:6},{value:"selectionOpacity",paraId:23,tocIndex:6},{value:"缩略轴选区的整体透明度",paraId:23,tocIndex:6},{value:"number",paraId:23,tocIndex:6},{value:"-",paraId:23,tocIndex:6},{value:"selectionShadowColor",paraId:23,tocIndex:6},{value:"缩略轴选区的阴影颜色",paraId:23,tocIndex:6},{value:"string",paraId:23,tocIndex:6},{value:"-",paraId:23,tocIndex:6},{value:"selectionShadowBlur",paraId:23,tocIndex:6},{value:"缩略轴选区阴影的高斯模糊系数",paraId:23,tocIndex:6},{value:"number",paraId:23,tocIndex:6},{value:"-",paraId:23,tocIndex:6},{value:"selectionShadowOffsetX",paraId:23,tocIndex:6},{value:"设置阴影距缩略轴选区的水平距离",paraId:23,tocIndex:6},{value:"number",paraId:23,tocIndex:6},{value:"-",paraId:23,tocIndex:6},{value:"selectionShadowOffsetY",paraId:23,tocIndex:6},{value:"设置阴影距缩略轴选区的垂直距离",paraId:23,tocIndex:6},{value:"number",paraId:23,tocIndex:6},{value:"-",paraId:23,tocIndex:6},{value:"selectionCursor",paraId:23,tocIndex:6},{value:"缩略轴选区的鼠标样式",paraId:23,tocIndex:6},{value:"string",paraId:23,tocIndex:6},{value:"default",paraId:23,tocIndex:6},{value:"在 Slider 组件中配置选区样式的时候，不是以对象的形式来配置，而是以 ",paraId:24,tocIndex:6},{value:"selection",paraId:24,tocIndex:6},{value:"前缀加属性的方式来配置。",paraId:24,tocIndex:6},{value:"({\n  slider: {\n    x: {\n      selectionFill: '#000',\n      selectionFillOpacity: 0.9,\n      selectionStroke: '#DAF5EC',\n      selectionStrokeOpacity: 0.9,\n      selectionLineWidth: 2,\n      selectionLineDash: [4, 8],\n      selectionOpacity: 1,\n      selectionShadowColor: '#d3d3d3',\n      selectionShadowBlur: 10,\n      selectionShadowOffsetX: 10,\n      selectionShadowOffsetY: 10,\n      selectionCursor: 'pointer',\n    },\n  },\n});\n",paraId:25,tocIndex:6},{value:"配置缩略轴滑轨的样式 。",paraId:26,tocIndex:7},{value:"属性",paraId:27,tocIndex:7},{value:"描述",paraId:27,tocIndex:7},{value:"类型",paraId:27,tocIndex:7},{value:"默认值",paraId:27,tocIndex:7},{value:"必选",paraId:27,tocIndex:7},{value:"trackLength",paraId:27,tocIndex:7},{value:"缩略轴滑轨的长度",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:"-",paraId:27,tocIndex:7},{value:"trackSize",paraId:27,tocIndex:7},{value:"缩略轴滑轨的尺寸",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:"16",paraId:27,tocIndex:7},{value:"trackFill",paraId:27,tocIndex:7},{value:"缩略轴滑轨的填充色",paraId:27,tocIndex:7},{value:"string",paraId:27,tocIndex:7},{value:"#416180",paraId:27,tocIndex:7},{value:"trackFillOpacity",paraId:27,tocIndex:7},{value:"缩略轴滑轨的填充透明度",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:"1",paraId:27,tocIndex:7},{value:"trackStroke",paraId:27,tocIndex:7},{value:"缩略轴滑轨的描边",paraId:27,tocIndex:7},{value:"string",paraId:27,tocIndex:7},{value:"-",paraId:27,tocIndex:7},{value:"trackStrokeOpacity",paraId:27,tocIndex:7},{value:"缩略轴滑轨的描边透明度",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:"-",paraId:27,tocIndex:7},{value:"trackLineWidth",paraId:27,tocIndex:7},{value:"缩略轴滑轨的描边宽度",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:"-",paraId:27,tocIndex:7},{value:"trackLineDash",paraId:27,tocIndex:7},{value:"缩略轴滑轨描边的虚线配置",paraId:27,tocIndex:7},{value:"[number,number]",paraId:27,tocIndex:7},{value:"-",paraId:27,tocIndex:7},{value:"trackOpacity",paraId:27,tocIndex:7},{value:"缩略轴滑轨的整体透明度",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:"-",paraId:27,tocIndex:7},{value:"trackShadowColor",paraId:27,tocIndex:7},{value:"缩略轴滑轨的阴影颜色",paraId:27,tocIndex:7},{value:"string",paraId:27,tocIndex:7},{value:"-",paraId:27,tocIndex:7},{value:"trackShadowBlur",paraId:27,tocIndex:7},{value:"缩略轴滑轨阴影的高斯模糊系数",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:"-",paraId:27,tocIndex:7},{value:"trackShadowOffsetX",paraId:27,tocIndex:7},{value:"设置阴影距缩略轴滑轨的水平距离",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:"-",paraId:27,tocIndex:7},{value:"trackShadowOffsetY",paraId:27,tocIndex:7},{value:"设置阴影距缩略轴滑轨的垂直距离",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:"-",paraId:27,tocIndex:7},{value:"trackCursor",paraId:27,tocIndex:7},{value:"缩略轴滑轨的鼠标样式",paraId:27,tocIndex:7},{value:"string",paraId:27,tocIndex:7},{value:"default",paraId:27,tocIndex:7},{value:"在 Slider 组件中配置选区样式的时候，不是以对象的形式来配置，而是以 ",paraId:28,tocIndex:7},{value:"track",paraId:28,tocIndex:7},{value:"前缀加属性的方式来配置。",paraId:28,tocIndex:7},{value:"({\n  slider: {\n    x: {\n      trackSize: 20,\n      trackFill: '#000',\n      trackFillOpacity: 0.9,\n      trackStroke: '#DAF5EC',\n      trackStrokeOpacity: 0.9,\n      trackLineWidth: 2,\n      trackLineDash: [4, 8],\n      trackOpacity: 1,\n      trackShadowColor: '#d3d3d3',\n      trackShadowBlur: 10,\n      trackShadowOffsetX: 10,\n      trackShadowOffsetY: 10,\n      trackCursor: 'pointer',\n    },\n  },\n});\n",paraId:29,tocIndex:7},{value:"配置缩略轴手柄的样式。",paraId:30,tocIndex:8},{value:"属性",paraId:31,tocIndex:8},{value:"描述",paraId:31,tocIndex:8},{value:"类型",paraId:31,tocIndex:8},{value:"默认值",paraId:31,tocIndex:8},{value:"必选",paraId:31,tocIndex:8},{value:"handleLabelFontSize",paraId:31,tocIndex:8},{value:"手柄标签的文字大小",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"12",paraId:31,tocIndex:8},{value:"handleLabelFontFamily",paraId:31,tocIndex:8},{value:"手柄标签的文字字体",paraId:31,tocIndex:8},{value:"string",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleLabelFontWeight",paraId:31,tocIndex:8},{value:"手柄标签的字体粗细",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"normal",paraId:31,tocIndex:8},{value:"handleLabelLineHeight",paraId:31,tocIndex:8},{value:"手柄标签文字的行高",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleLabelTextAlign",paraId:31,tocIndex:8},{value:"设置手柄标签文字的水平对齐方式",paraId:31,tocIndex:8},{value:"center",paraId:31,tocIndex:8},{value:" | ",paraId:31,tocIndex:8},{value:"end",paraId:31,tocIndex:8},{value:" | ",paraId:31,tocIndex:8},{value:"left",paraId:31,tocIndex:8},{value:" | ",paraId:31,tocIndex:8},{value:"right",paraId:31,tocIndex:8},{value:" | ",paraId:31,tocIndex:8},{value:"start",paraId:31,tocIndex:8},{value:"start",paraId:31,tocIndex:8},{value:"handleLabelTextBaseline",paraId:31,tocIndex:8},{value:"设置手柄标签文字的垂直基线",paraId:31,tocIndex:8},{value:"top",paraId:31,tocIndex:8},{value:" | ",paraId:31,tocIndex:8},{value:"middle",paraId:31,tocIndex:8},{value:" | ",paraId:31,tocIndex:8},{value:"bottom",paraId:31,tocIndex:8},{value:" | ",paraId:31,tocIndex:8},{value:"alphabetic",paraId:31,tocIndex:8},{value:" | ",paraId:31,tocIndex:8},{value:"hanging",paraId:31,tocIndex:8},{value:"bottom",paraId:31,tocIndex:8},{value:"handleLabelFill",paraId:31,tocIndex:8},{value:"手柄标签的文字填充色",paraId:31,tocIndex:8},{value:"string",paraId:31,tocIndex:8},{value:"#1D2129",paraId:31,tocIndex:8},{value:"handleLabelFillOpacity",paraId:31,tocIndex:8},{value:"手柄标签的文字填充透明度",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"0.45",paraId:31,tocIndex:8},{value:"handleLabelStroke",paraId:31,tocIndex:8},{value:"手柄标签的文字描边",paraId:31,tocIndex:8},{value:"string",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleLabelStrokeOpacity",paraId:31,tocIndex:8},{value:"手柄标签的文字描边透明度",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleLabelLineWidth",paraId:31,tocIndex:8},{value:"手柄标签文字的描边宽度",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleLabelLineDash",paraId:31,tocIndex:8},{value:"手柄标签文字描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:31,tocIndex:8},{value:"[number , number]",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleLabelOpacity",paraId:31,tocIndex:8},{value:"手柄标签文字的整体透明度",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleLabelShadowColor",paraId:31,tocIndex:8},{value:"手柄标签的文字阴影颜色",paraId:31,tocIndex:8},{value:"string",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleLabelShadowBlur",paraId:31,tocIndex:8},{value:"手柄标签文字阴影的高斯模糊系数",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleLabelShadowOffsetX",paraId:31,tocIndex:8},{value:"设置阴影距手柄标签文字的水平距离",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleLabelShadowOffsetY",paraId:31,tocIndex:8},{value:"设置阴影距手柄标签文字的垂直距离",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleLabelCursor",paraId:31,tocIndex:8},{value:"手柄标签的鼠标样式",paraId:31,tocIndex:8},{value:"string",paraId:31,tocIndex:8},{value:"default",paraId:31,tocIndex:8},{value:"handleLabelDx",paraId:31,tocIndex:8},{value:"手柄标签文字在水平方向的偏移量",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"0",paraId:31,tocIndex:8},{value:"handleLabelDy",paraId:31,tocIndex:8},{value:"手柄标签文字在垂直方向的偏移量",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"0",paraId:31,tocIndex:8},{value:"handleIconRadius",paraId:31,tocIndex:8},{value:"手柄图标的圆角",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"2",paraId:31,tocIndex:8},{value:"handleIconSize",paraId:31,tocIndex:8},{value:"手柄图标的尺寸",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"10",paraId:31,tocIndex:8},{value:"handleIconFill",paraId:31,tocIndex:8},{value:"手柄图标的填充色",paraId:31,tocIndex:8},{value:"string",paraId:31,tocIndex:8},{value:"#f7f7f7",paraId:31,tocIndex:8},{value:"handleIconFillOpacity",paraId:31,tocIndex:8},{value:"手柄图标的填充透明度",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"1",paraId:31,tocIndex:8},{value:"handleIconStroke",paraId:31,tocIndex:8},{value:"手柄图标的描边",paraId:31,tocIndex:8},{value:"string",paraId:31,tocIndex:8},{value:"#1D2129",paraId:31,tocIndex:8},{value:"handleIconStrokeOpacity",paraId:31,tocIndex:8},{value:"手柄图标的描边透明度",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"0.25",paraId:31,tocIndex:8},{value:"handleIconLineWidth",paraId:31,tocIndex:8},{value:"手柄图标的描边宽度",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"1",paraId:31,tocIndex:8},{value:"handleIconLineDash",paraId:31,tocIndex:8},{value:"手柄图标描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:31,tocIndex:8},{value:"[number , number]",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleIconOpacity",paraId:31,tocIndex:8},{value:"手柄图标的整体透明度",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleIconShadowColor",paraId:31,tocIndex:8},{value:"手柄图标的阴影颜色",paraId:31,tocIndex:8},{value:"string",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleIconShadowBlur",paraId:31,tocIndex:8},{value:"手柄图标阴影的高斯模糊系数",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleIconShadowOffsetX",paraId:31,tocIndex:8},{value:"设置阴影距手柄图标的水平距离",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleIconShadowOffsetY",paraId:31,tocIndex:8},{value:"设置阴影距手柄图标的垂直距离",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleIconCursor",paraId:31,tocIndex:8},{value:"手柄图标的鼠标样式",paraId:31,tocIndex:8},{value:"string",paraId:31,tocIndex:8},{value:"default",paraId:31,tocIndex:8},{value:"在 Slider 组件中配置滑动手柄属性的时候，不是以对象的形式来配置，而是以 ",paraId:32,tocIndex:8},{value:"handle",paraId:32,tocIndex:8},{value:"前缀加属性的方式来配置。",paraId:32,tocIndex:8},{value:"({\n  slider: {\n    x: {\n      //配置handleLabel的绘图属性\n      handleLabelFontSize: 16,\n      handleLabelFontFamily: 'sans-serif',\n      handleLabelFontWeight: 500,\n      handleLabelLineHeight: 20,\n      handleLabelTextAlign: 'center',\n      handleLabelTextBaseline: 'middle',\n      handleLabelFill: '#000',\n      handleLabelFillOpacity: 0.9,\n      handleLabelStroke: '#DAF5EC',\n      handleLabelStrokeOpacity: 0.9,\n      handleLabelLineWidth: 2,\n      handleLabelLineDash: [4, 8],\n      handleLabelOpacity: 1,\n      handleLabelShadowColor: '#d3d3d3',\n      handleLabelShadowBlur: 10,\n      handleLabelShadowOffsetX: 10,\n      handleLabelShadowOffsetY: 10,\n      handleLabelCursor: 'pointer',\n\n      handleIconSize: 50,\n      // 配置handleIcon的绘图属性\n      handleIconFill: '#000',\n      handleIconFillOpacity: 0.9,\n      handleIconStroke: '#DAF5EC',\n      handleIconStrokeOpacity: 0.9,\n      handleIconLineWidth: 2,\n      handleIconLineDash: [4, 8],\n      handleIconOpacity: 1,\n      handleIconShadowColor: '#d3d3d3',\n      handleIconShadowBlur: 10,\n      handleIconShadowOffsetX: 10,\n      handleIconShadowOffsetY: 10,\n      handleIconCursor: 'pointer',\n    },\n  },\n});\n",paraId:33,tocIndex:8},{value:"配置缩略轴迷你图的样式。",paraId:34,tocIndex:9},{value:"属性",paraId:35,tocIndex:9},{value:"描述",paraId:35,tocIndex:9},{value:"类型",paraId:35,tocIndex:9},{value:"默认值",paraId:35,tocIndex:9},{value:"必选",paraId:35,tocIndex:9},{value:"sparklineType",paraId:35,tocIndex:9},{value:"迷你图类型：折线图、直方图",paraId:35,tocIndex:9},{value:"line",paraId:35,tocIndex:9},{value:" | ",paraId:35,tocIndex:9},{value:"column",paraId:35,tocIndex:9},{value:"line",paraId:35,tocIndex:9},{value:"sparklineIsStack",paraId:35,tocIndex:9},{value:"是否对数据进行堆叠",paraId:35,tocIndex:9},{value:"boolean",paraId:35,tocIndex:9},{value:"false",paraId:35,tocIndex:9},{value:"sparklineRange",paraId:35,tocIndex:9},{value:"指定值范围，未指定时将使用 data 的最小值和最大值",paraId:35,tocIndex:9},{value:"[number, number]",paraId:35,tocIndex:9},{value:"-",paraId:35,tocIndex:9},{value:"sparklineColor",paraId:35,tocIndex:9},{value:"指定颜色",paraId:35,tocIndex:9},{value:"string | string[] | (index: number)=>string",paraId:35,tocIndex:9},{value:"-",paraId:35,tocIndex:9},{value:"sparklineSmooth",paraId:35,tocIndex:9},{value:"适用于折线图，平滑曲线",paraId:35,tocIndex:9},{value:"boolean",paraId:35,tocIndex:9},{value:"false",paraId:35,tocIndex:9},{value:"sparklineLineStroke",paraId:35,tocIndex:9},{value:"适用于折线图，线的颜色",paraId:35,tocIndex:9},{value:"string",paraId:35,tocIndex:9},{value:"-",paraId:35,tocIndex:9},{value:"sparklineLineStrokeOpacity",paraId:35,tocIndex:9},{value:"适用于折线图，线的透明度",paraId:35,tocIndex:9},{value:"number",paraId:35,tocIndex:9},{value:"-",paraId:35,tocIndex:9},{value:"sparklineLineLineDash",paraId:35,tocIndex:9},{value:"适用于折线图，线的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:35,tocIndex:9},{value:"[number,number]",paraId:35,tocIndex:9},{value:"-",paraId:35,tocIndex:9},{value:"sparklineAreaFill",paraId:35,tocIndex:9},{value:"适用于折线图，填充区域的颜色",paraId:35,tocIndex:9},{value:"string",paraId:35,tocIndex:9},{value:"-",paraId:35,tocIndex:9},{value:"sparklineAreaFillOpacity",paraId:35,tocIndex:9},{value:"适用于折线图，填充区域的透明度",paraId:35,tocIndex:9},{value:"number",paraId:35,tocIndex:9},{value:"-",paraId:35,tocIndex:9},{value:"sparklineColumnFill",paraId:35,tocIndex:9},{value:"适用于直方图，条形的颜色",paraId:35,tocIndex:9},{value:"string",paraId:35,tocIndex:9},{value:"-",paraId:35,tocIndex:9},{value:"sparklineColumnFillOpacity",paraId:35,tocIndex:9},{value:"适用于直方图，条形的透明度",paraId:35,tocIndex:9},{value:"number",paraId:35,tocIndex:9},{value:"-",paraId:35,tocIndex:9},{value:"sparklineIsGroup",paraId:35,tocIndex:9},{value:"适用于直方图，是否分组显示",paraId:35,tocIndex:9},{value:"boolean",paraId:35,tocIndex:9},{value:"false",paraId:35,tocIndex:9},{value:"sparklineSpacing",paraId:35,tocIndex:9},{value:"适用于直方图，分组直方的间距",paraId:35,tocIndex:9},{value:"number",paraId:35,tocIndex:9},{value:"0",paraId:35,tocIndex:9},{value:"在 Slider 组件中配置迷你图属性的时候，不是以对象的形式来配置，而是以 ",paraId:36,tocIndex:9},{value:"sparkline",paraId:36,tocIndex:9},{value:"前缀加属性的方式来配置。",paraId:36,tocIndex:9},{value:"({\n  slider: {\n    x: {\n      sparklineType: 'line',\n      sparklineColor: 'red',\n    },\n  },\n});\n",paraId:37,tocIndex:9},{value:"属性",paraId:38,tocIndex:10},{value:"描述",paraId:38,tocIndex:10},{value:"类型",paraId:38,tocIndex:10},{value:"valuechange",paraId:38,tocIndex:10},{value:"选区发生变化时触发，通过事件监听",paraId:38,tocIndex:10},{value:"({detail: { value: any; }}) => void",paraId:38,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .line()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  })\n  .encode('x', 'date')\n  .encode('y', 'close')\n  // 开启 X 轴缩略轴\n  .slider('x', {});\n\nchart.on('afterrender', () => {\n  const { canvas } = chart.getContext();\n  const { document } = canvas;\n  document.querySelector('.slider').addEventListener('valuechange', (evt) => {\n    console.info(evt.detail);\n  });\n});\n\nchart.render();\n",paraId:39,tocIndex:10},{value:"如果不希望使用 G2 默认的坐标轴，就可以按照以下几步自定义拖拽轴：",paraId:40,tocIndex:12},{value:"在渲染结束后渲染 slider。",paraId:41,tocIndex:12},{value:"监听 slider 事件。",paraId:41,tocIndex:12},{value:"第一步的的关键是通过 ",paraId:42,tocIndex:12},{value:"chart.getCoordinate",paraId:42,tocIndex:12},{value:" 获得的 coordinate 对象确定 slider 的位置和长度。第二步的关键是通过 ",paraId:42,tocIndex:12},{value:"chart.getScale",paraId:42,tocIndex:12},{value:" 获得 scale 对选择的范围进行 invert，最后获得选择的数据范围，然后更新 scale 的定义域。",paraId:42,tocIndex:12},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\n\nfunction sliderX(chart) {\n  // 创建并且挂载 range\n  const container = chart.getContainer();\n  const range = document.createElement('input');\n  container.append(range);\n\n  // 根据 coordinate 设置 range 的宽度等属性\n  const coordinate = chart.getCoordinate();\n  const { paddingLeft, width } = coordinate.getOptions();\n  range.type = 'range';\n  range.min = 0;\n  range.max = width;\n  range.value = width;\n  range.style.display = 'block';\n  range.style.width = width + 'px';\n  range.style.marginLeft = paddingLeft + 'px';\n\n  // 监听 change 事件，通过 scale 获得筛选得到的 domain\n  // 更新 domain 并且渲染\n  const scale = chart.getScaleByChannel('x');\n  const options = chart.options();\n  range.onchange = (event) => {\n    const value = event.target.value;\n    const range = [0, value / width];\n    const domain = range.map((d) => scale.invert(d));\n    chart.options({\n      ...options,\n      scale: { x: { domain } },\n    });\n    chart.render();\n  };\n}\n\n// 渲染图表\nchart.options({\n  type: 'line',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  },\n  encode: { x: 'date', y: 'close' },\n});\n\nchart.render().then(sliderX);\n",paraId:43,tocIndex:12}]},43811:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(60820);const t=[{value:"G2 中",paraId:0,tocIndex:0},{value:"标题（Title）",paraId:0,tocIndex:0},{value:" 用于指定图表的标题内容，可以用于一句话展示图表的概要信息。图表的标题是比较常用的组件，分成为主标题和副标题两部分组成，均使用一个文本来展示，可以通过调整文本的样式来定制图表标题的样式。",paraId:0,tocIndex:0},{value:"第一种，传入 ",paraId:1,tocIndex:1},{value:"boolean",paraId:1,tocIndex:1},{value:" 设置是否显示图表标题，图表标题默认为隐藏状态。",paraId:1,tocIndex:1},{value:"({\n  type: 'interval',\n  title: false; // 隐藏图表标题\n})\n",paraId:2,tocIndex:1},{value:"第二种，传入 ",paraId:3,tocIndex:1},{value:"titleOption",paraId:3,tocIndex:1},{value:" 对图标表进行整体配置。",paraId:3,tocIndex:1},{value:"({\n  type: 'interval',\n  title: {\n    title: 'hello', // 主标题的文本新秀丽\n    subtitle: 'world', // 副标题的文本新秀丽\n  },\n});\n",paraId:4,tocIndex:1},{value:"标题也可以在 View 层级配置：",paraId:5,tocIndex:1},{value:"({\n  type: 'view',\n  title: {\n    title: 'hello',\n    subtitle: 'world',\n  },\n});\n",paraId:6,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  marginTop: 40,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: {\n    x: 'letter',\n    y: 'frequency',\n  },\n  title: {\n    align: 'center', // 图表标题的对齐方式\n    size: 28, // 图表标题的高度，默认为 36\n    spacing: 4, // 主标题和副标题之间的间距\n\n    // 标题\n    title: \"我是一个标题 I'am a title\", // 图表标题的文本\n    titleFontSize: 28, // 图表主标题的字体大小\n    titleFontFamily: 'sans-serif', // 图表主标题的字体\n    titleFontWeight: 600, // 图表主标题的字体粗细\n    titleFill: '#fff', // 图表主标题的文字颜色\n    titleFillOpacity: 1, // 图表主标题的文字透明度\n    titleStroke: '#000', // 图表主标题的文字描边颜色\n    titleLineWidth: 2, // 图表主标题的文字描边线宽\n    titleStrokeOpacity: 1, // 图表主标题的文字描边透明度\n\n    // 副标题\n    subtitle: \"我是一个副标题 I'am a subtitle\", // 图表副标题的文本\n    subtitleFontSize: 16, // 图表副标题的字体大小\n    subtitleFontFamily: 'Arial', // 图表副标题的字体\n    subtitleFontWeight: 300, // 图表副标题的字体粗细\n    subtitleFill: '#2989FF', // 图表副标题的文字颜色\n    subtitleFillOpacity: 1, // 图表副标题的文字透明度\n    subtitleStroke: '#000', // 图表副标题的文字描边颜色\n    subtitleLineWidth: 1, // 图表副标题的文字描边线宽\n    subtitleStrokeOpacity: 0.5, // 图表副标题的文字描边透明度\n  },\n});\n\nchart.render();\n",paraId:7,tocIndex:2},{value:"标题 title 的设置，最简单的设置方式，就是直接指定一个字符串作为标题，这个时候使用默认的样式和位置。当然也可以使用完整的配置项去做一些灵活的自定义。",paraId:8,tocIndex:2},{value:"属性",paraId:9,tocIndex:3},{value:"描述",paraId:9,tocIndex:3},{value:"类型",paraId:9,tocIndex:3},{value:"默认值",paraId:9,tocIndex:3},{value:"size",paraId:9,tocIndex:3},{value:"图表标题的高度",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"36",paraId:9,tocIndex:3},{value:"align",paraId:9,tocIndex:3},{value:"图表标题的对齐方式",paraId:9,tocIndex:3},{value:"left",paraId:9,tocIndex:3},{value:" | ",paraId:9,tocIndex:3},{value:"center",paraId:9,tocIndex:3},{value:" | ",paraId:9,tocIndex:3},{value:"right",paraId:9,tocIndex:3},{value:"left",paraId:9,tocIndex:3},{value:"spacing",paraId:9,tocIndex:3},{value:"图表主标题、副标题之间的上下间距",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"2",paraId:9,tocIndex:3},{value:"title",paraId:9,tocIndex:3},{value:"图表标题的配置项",paraId:9,tocIndex:3},{value:"title",paraId:10,tocIndex:3},{value:"详见 ",paraId:9,tocIndex:3},{value:"title",paraId:11,tocIndex:3},{value:"subtitle",paraId:9,tocIndex:3},{value:"图表副标题的配置项",paraId:9,tocIndex:3},{value:"subtitle",paraId:12,tocIndex:3},{value:"详见 ",paraId:9,tocIndex:3},{value:"subtitle",paraId:13,tocIndex:3},{value:" ",paraId:14,tocIndex:4},{value:"number",paraId:14,tocIndex:4},{value:" ",paraId:14,tocIndex:4},{value:"optional",paraId:14,tocIndex:4},{value:" ",paraId:14,tocIndex:4},{value:"用于配置图表标题的空间高度大小，默认为 ",paraId:15,tocIndex:4},{value:"36px",paraId:15,tocIndex:4},{value:"，如果配置过小，可能导致标题和图表图形之间重叠。",paraId:15,tocIndex:4},{value:" ",paraId:16,tocIndex:5},{value:"string",paraId:16,tocIndex:5},{value:" ",paraId:16,tocIndex:5},{value:"optional",paraId:16,tocIndex:5},{value:" ",paraId:16,tocIndex:5},{value:"用于配置图表标题的的左右对齐方式，默认为 ",paraId:17,tocIndex:5},{value:"left",paraId:17,tocIndex:5},{value:"，可以选择使用 ",paraId:17,tocIndex:5},{value:"left",paraId:17,tocIndex:5},{value:"，",paraId:17,tocIndex:5},{value:"center",paraId:17,tocIndex:5},{value:"，",paraId:17,tocIndex:5},{value:"right",paraId:17,tocIndex:5},{value:"，分别代表着居左对齐、居中对齐、居右对齐。",paraId:17,tocIndex:5},{value:"尝试一下：",paraId:18,tocIndex:5},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n  width: 480,\n  height: 160,\n});\nconst container = chart.getContainer();\n\nconst alignList = ['center', 'right', 'left'];\nconst alignMap = alignList.map((p) => {\n  return {\n    label: p,\n    value: p,\n  };\n});\n\nconst data = [\n  264, 417, 438, 887, 309, 397, 550, 575, 563, 430, 525, 592, 492, 467, 513,\n  546, 983, 340, 539, 243, 226, 192,\n];\n\nchart.options({\n  data,\n  type: 'interval',\n  encode: {\n    x: (_, idx) => idx,\n    y: (d) => d,\n  },\n  title: {\n    align: 'center',\n    title: 'This is a chart title.',\n    subtitle: 'Displayed are sampled values.',\n  },\n  axis: false,\n});\nconst handleSetAlign = (align) => {\n  chart.title({ align });\n  chart.render(); // 重新渲染图表\n};\n\nconst selectorContainer = document.createElement('div');\nselectorContainer.textContent = '选择标题对齐方式 ';\nconst selector = document.createElement('select');\nselector.innerHTML = alignMap.map(\n  (align, index) =>\n    `<option value=\"${align.value}\" ${index === 0 ? 'selected' : ''}>${\n      align.label\n    }</option>`,\n);\nselector.onchange = (e) => {\n  handleSetAlign(e.target.value);\n};\nselectorContainer.appendChild(selector);\ncontainer.insertBefore(selectorContainer, container.childNodes[0]);\nchart.render();\n",paraId:19,tocIndex:5},{value:" ",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:" ",paraId:20,tocIndex:6},{value:"optional",paraId:20,tocIndex:6},{value:" ",paraId:20,tocIndex:6},{value:"用于配置图表主标题和副标题之间的间距，默认为 ",paraId:21,tocIndex:6},{value:"2px",paraId:21,tocIndex:6},{value:"，合适的间距，可以让图表看起来整体更协调。",paraId:21,tocIndex:6},{value:"图表的标题，具体来说是主标题，可以用以下的配置来定制标题的各种样式。",paraId:22,tocIndex:7},{value:"属性",paraId:23,tocIndex:7},{value:"描述",paraId:23,tocIndex:7},{value:"类型",paraId:23,tocIndex:7},{value:"默认值",paraId:23,tocIndex:7},{value:"title",paraId:23,tocIndex:7},{value:"图表标题文字内容",paraId:23,tocIndex:7},{value:"string",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"(datum, index, data) => string",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"titleFontSize",paraId:23,tocIndex:7},{value:"图表标题文字大小",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"(datum, index, data) => number",paraId:23,tocIndex:7},{value:"14",paraId:23,tocIndex:7},{value:"titleFontFamily",paraId:23,tocIndex:7},{value:"图表标题文字字体",paraId:23,tocIndex:7},{value:"string",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"(datum, index, data) => string",paraId:23,tocIndex:7},{value:"sans-serif",paraId:23,tocIndex:7},{value:"titleFontWeight",paraId:23,tocIndex:7},{value:"图表标题字体粗细",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"(datum, index, data) => number",paraId:23,tocIndex:7},{value:"normal",paraId:23,tocIndex:7},{value:"titleLineHeight",paraId:23,tocIndex:7},{value:"图表标题文字的行高",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"(datum, index, data) => number",paraId:23,tocIndex:7},{value:"14",paraId:23,tocIndex:7},{value:"titleTextAlign",paraId:23,tocIndex:7},{value:"图表标题文字行内内容的水平对齐方式",paraId:23,tocIndex:7},{value:"string",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"(datum, index, data) => string",paraId:23,tocIndex:7},{value:"center",paraId:23,tocIndex:7},{value:"titleTextBaseline",paraId:23,tocIndex:7},{value:"图表标题文字垂直方向的基线",paraId:23,tocIndex:7},{value:"string",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"(datum, index, data) => string",paraId:23,tocIndex:7},{value:"middle",paraId:23,tocIndex:7},{value:"titleFill",paraId:23,tocIndex:7},{value:"图表标题文字的填充色",paraId:23,tocIndex:7},{value:"string",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"(datum, index, data) => string",paraId:23,tocIndex:7},{value:"#000",paraId:23,tocIndex:7},{value:"titleFillOpacity",paraId:23,tocIndex:7},{value:"图表标题文字的填充透明度",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"(datum, index, data) => number",paraId:23,tocIndex:7},{value:"1",paraId:23,tocIndex:7},{value:"titleStroke",paraId:23,tocIndex:7},{value:"图表标题文字的描边颜色",paraId:23,tocIndex:7},{value:"string",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"(datum, index, data) => string",paraId:23,tocIndex:7},{value:"transparent",paraId:23,tocIndex:7},{value:"titleStrokeOpacity",paraId:23,tocIndex:7},{value:"图表标题文字的描边透明度",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"(datum, index, data) => number",paraId:23,tocIndex:7},{value:"1",paraId:23,tocIndex:7},{value:"titleLineWidth",paraId:23,tocIndex:7},{value:"图表标题文字描边宽度",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"(datum, index, data) => number",paraId:23,tocIndex:7},{value:"0",paraId:23,tocIndex:7},{value:"titleLineDash",paraId:23,tocIndex:7},{value:"图表标题文字虚线样式",paraId:23,tocIndex:7},{value:"number[]",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"(datum, index, data) => number[]",paraId:23,tocIndex:7},{value:"[]",paraId:23,tocIndex:7},{value:"titleOpacity",paraId:23,tocIndex:7},{value:"图表标题文字整体透明度",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"(datum, index, data) => number",paraId:23,tocIndex:7},{value:"1",paraId:23,tocIndex:7},{value:"titleShadowColor",paraId:23,tocIndex:7},{value:"图表标题文字阴影颜色",paraId:23,tocIndex:7},{value:"string",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"(datum, index, data) => string",paraId:23,tocIndex:7},{value:"transparent",paraId:23,tocIndex:7},{value:"titleShadowBlur",paraId:23,tocIndex:7},{value:"图表标题文字阴影的高斯模糊系数",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"(datum, index, data) => number",paraId:23,tocIndex:7},{value:"0",paraId:23,tocIndex:7},{value:"titleShadowOffsetX",paraId:23,tocIndex:7},{value:"图表标题文字阴影水平偏移量",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"(datum, index, data) => number",paraId:23,tocIndex:7},{value:"0",paraId:23,tocIndex:7},{value:"titleShadowOffsetY",paraId:23,tocIndex:7},{value:"图表标题文字阴影垂直偏移量",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"(datum, index, data) => number",paraId:23,tocIndex:7},{value:"0",paraId:23,tocIndex:7},{value:"titleCursor",paraId:23,tocIndex:7},{value:"图表标题文字鼠标样式",paraId:23,tocIndex:7},{value:"string",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"(datum, index, data) => string",paraId:23,tocIndex:7},{value:"default",paraId:23,tocIndex:7},{value:"titleDx",paraId:23,tocIndex:7},{value:"图表标题文字在水平方向的偏移量",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"(datum, index, data) => number",paraId:23,tocIndex:7},{value:"0",paraId:23,tocIndex:7},{value:"titleDy",paraId:23,tocIndex:7},{value:"图表标题文字在垂直方向的偏移量",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"(datum, index, data) => number",paraId:23,tocIndex:7},{value:"0",paraId:23,tocIndex:7},{value:"图表的副标题，可以用以下的配置来定制副标题的各种样式。",paraId:24,tocIndex:8},{value:"属性",paraId:25,tocIndex:8},{value:"描述",paraId:25,tocIndex:8},{value:"类型",paraId:25,tocIndex:8},{value:"默认值",paraId:25,tocIndex:8},{value:"subtitle",paraId:25,tocIndex:8},{value:"图表副标题文字内容",paraId:25,tocIndex:8},{value:"string",paraId:25,tocIndex:8},{value:" | ",paraId:25,tocIndex:8},{value:"(datum, index, data) => string",paraId:25,tocIndex:8},{value:"-",paraId:25,tocIndex:8},{value:"subtitleFontSize",paraId:25,tocIndex:8},{value:"图表副标题文字大小",paraId:25,tocIndex:8},{value:"number",paraId:25,tocIndex:8},{value:" | ",paraId:25,tocIndex:8},{value:"(datum, index, data) => number",paraId:25,tocIndex:8},{value:"12",paraId:25,tocIndex:8},{value:"subtitleFontFamily",paraId:25,tocIndex:8},{value:"图表副标题文字字体",paraId:25,tocIndex:8},{value:"string",paraId:25,tocIndex:8},{value:" | ",paraId:25,tocIndex:8},{value:"(datum, index, data) => string",paraId:25,tocIndex:8},{value:"sans-serif",paraId:25,tocIndex:8},{value:"subtitleFontWeight",paraId:25,tocIndex:8},{value:"图表副标题字体粗细",paraId:25,tocIndex:8},{value:"number",paraId:25,tocIndex:8},{value:" | ",paraId:25,tocIndex:8},{value:"(datum, index, data) => number",paraId:25,tocIndex:8},{value:"normal",paraId:25,tocIndex:8},{value:"subtitleLineHeight",paraId:25,tocIndex:8},{value:"图表副标题文字的行高",paraId:25,tocIndex:8},{value:"number",paraId:25,tocIndex:8},{value:" | ",paraId:25,tocIndex:8},{value:"(datum, index, data) => number",paraId:25,tocIndex:8},{value:"12",paraId:25,tocIndex:8},{value:"subtitleTextAlign",paraId:25,tocIndex:8},{value:"图表副标题文字行内内容的水平对齐方式",paraId:25,tocIndex:8},{value:"string",paraId:25,tocIndex:8},{value:" | ",paraId:25,tocIndex:8},{value:"(datum, index, data) => string",paraId:25,tocIndex:8},{value:"center",paraId:25,tocIndex:8},{value:"subtitleTextBaseline",paraId:25,tocIndex:8},{value:"图表副标题文字垂直方向的基线",paraId:25,tocIndex:8},{value:"string",paraId:25,tocIndex:8},{value:" | ",paraId:25,tocIndex:8},{value:"(datum, index, data) => string",paraId:25,tocIndex:8},{value:"middle",paraId:25,tocIndex:8},{value:"subtitleFill",paraId:25,tocIndex:8},{value:"图表副标题文字的填充色",paraId:25,tocIndex:8},{value:"string",paraId:25,tocIndex:8},{value:" | ",paraId:25,tocIndex:8},{value:"(datum, index, data) => string",paraId:25,tocIndex:8},{value:"#666",paraId:25,tocIndex:8},{value:"subtitleFillOpacity",paraId:25,tocIndex:8},{value:"图表副标题文字的填充透明度",paraId:25,tocIndex:8},{value:"number",paraId:25,tocIndex:8},{value:" | ",paraId:25,tocIndex:8},{value:"(datum, index, data) => number",paraId:25,tocIndex:8},{value:"1",paraId:25,tocIndex:8},{value:"subtitleStroke",paraId:25,tocIndex:8},{value:"图表副标题文字的描边颜色",paraId:25,tocIndex:8},{value:"string",paraId:25,tocIndex:8},{value:" | ",paraId:25,tocIndex:8},{value:"(datum, index, data) => string",paraId:25,tocIndex:8},{value:"transparent",paraId:25,tocIndex:8},{value:"subtitleStrokeOpacity",paraId:25,tocIndex:8},{value:"图表副标题文字的描边透明度",paraId:25,tocIndex:8},{value:"number",paraId:25,tocIndex:8},{value:" | ",paraId:25,tocIndex:8},{value:"(datum, index, data) => number",paraId:25,tocIndex:8},{value:"1",paraId:25,tocIndex:8},{value:"subtitleLineWidth",paraId:25,tocIndex:8},{value:"图表副标题文字描边宽度",paraId:25,tocIndex:8},{value:"number",paraId:25,tocIndex:8},{value:" | ",paraId:25,tocIndex:8},{value:"(datum, index, data) => number",paraId:25,tocIndex:8},{value:"0",paraId:25,tocIndex:8},{value:"subtitleLineDash",paraId:25,tocIndex:8},{value:"图表副标题文字虚线样式",paraId:25,tocIndex:8},{value:"number[]",paraId:25,tocIndex:8},{value:" | ",paraId:25,tocIndex:8},{value:"(datum, index, data) => number[]",paraId:25,tocIndex:8},{value:"[]",paraId:25,tocIndex:8},{value:"subtitleOpacity",paraId:25,tocIndex:8},{value:"图表副标题文字整体透明度",paraId:25,tocIndex:8},{value:"number",paraId:25,tocIndex:8},{value:" | ",paraId:25,tocIndex:8},{value:"(datum, index, data) => number",paraId:25,tocIndex:8},{value:"1",paraId:25,tocIndex:8},{value:"subtitleShadowColor",paraId:25,tocIndex:8},{value:"图表副标题文字阴影颜色",paraId:25,tocIndex:8},{value:"string",paraId:25,tocIndex:8},{value:" | ",paraId:25,tocIndex:8},{value:"(datum, index, data) => string",paraId:25,tocIndex:8},{value:"transparent",paraId:25,tocIndex:8},{value:"subtitleShadowBlur",paraId:25,tocIndex:8},{value:"图表副标题文字阴影的高斯模糊系数",paraId:25,tocIndex:8},{value:"number",paraId:25,tocIndex:8},{value:" | ",paraId:25,tocIndex:8},{value:"(datum, index, data) => number",paraId:25,tocIndex:8},{value:"0",paraId:25,tocIndex:8},{value:"subtitleShadowOffsetX",paraId:25,tocIndex:8},{value:"图表副标题文字阴影水平偏移量",paraId:25,tocIndex:8},{value:"number",paraId:25,tocIndex:8},{value:" | ",paraId:25,tocIndex:8},{value:"(datum, index, data) => number",paraId:25,tocIndex:8},{value:"0",paraId:25,tocIndex:8},{value:"subtitleShadowOffsetY",paraId:25,tocIndex:8},{value:"图表副标题文字阴影垂直偏移量",paraId:25,tocIndex:8},{value:"number",paraId:25,tocIndex:8},{value:" | ",paraId:25,tocIndex:8},{value:"(datum, index, data) => number",paraId:25,tocIndex:8},{value:"0",paraId:25,tocIndex:8},{value:"subtitleCursor",paraId:25,tocIndex:8},{value:"图表副标题文字鼠标样式",paraId:25,tocIndex:8},{value:"string",paraId:25,tocIndex:8},{value:" | ",paraId:25,tocIndex:8},{value:"(datum, index, data) => string",paraId:25,tocIndex:8},{value:"default",paraId:25,tocIndex:8},{value:"subtitleDx",paraId:25,tocIndex:8},{value:"图表副标题文字在水平方向的偏移量",paraId:25,tocIndex:8},{value:"number",paraId:25,tocIndex:8},{value:" | ",paraId:25,tocIndex:8},{value:"(datum, index, data) => number",paraId:25,tocIndex:8},{value:"0",paraId:25,tocIndex:8},{value:"subtitleDy",paraId:25,tocIndex:8},{value:"图表副标题文字在垂直方向的偏移量",paraId:25,tocIndex:8},{value:"number",paraId:25,tocIndex:8},{value:" | ",paraId:25,tocIndex:8},{value:"(datum, index, data) => number",paraId:25,tocIndex:8},{value:"0",paraId:25,tocIndex:8},{value:"尝试一下：",paraId:26,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.title({\n  align: 'right',\n  title: 'Sold by genre, sorted by sold',\n  titleFontSize: 15,\n  subtitle: 'It shows the sales volume of genre, sored by sold.',\n  subtitleFill: 'red',\n  subtitleFontSize: 12,\n  subtitleShadowColor: 'yellow',\n  subtitleShadowBlur: 5,\n  subtitleFontStyle: 'italic',\n});\n\nchart\n  .interval()\n  .data([\n    { genre: 'Sports', sold: 0 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  .encode('color', 'genre')\n  .style('minHeight', 50);\n\nchart.render();\n",paraId:27,tocIndex:8}]},58154:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(22024);const t=[{value:"Tooltip",paraId:0,tocIndex:0},{value:" 是图表交互的核心组件之一，用于动态展示数据点的详细信息，帮助用户快速理解图表中特定区域的数值、分类或其他维度信息。它能够在鼠标悬停、点击或移动到图表中的某个元素（如柱状图中的柱子、折线图中的数据点）时，动态显示相关的数据信息。",paraId:0,tocIndex:0},{value:"显示详细信息",paraId:1,tocIndex:0},{value:"：Tooltip 可以显示有关数据点的详细信息，例如具体数值、百分比或其他相关属性。这有助于用户更深入地了解数据。",paraId:1,tocIndex:0},{value:"提高可读性",paraId:1,tocIndex:0},{value:"：在复杂的可视化中，Tooltip 可以帮助用户更容易地识别和理解数据点。例如，在散点图中，当数据点密集时，Tooltip 可以显示特定点的详细信息，而无需将鼠标悬停在每个点上。",paraId:1,tocIndex:0},{value:"增强交互性",paraId:1,tocIndex:0},{value:"：Tooltip 可以增强可视化的交互性。用户可以通过悬停或点击数据点来查看更多信息，这使得可视化更加动态和有趣。",paraId:1,tocIndex:0},{value:"突出显示关键信息",paraId:1,tocIndex:0},{value:"：Tooltip 可以用来突出显示关键信息。例如，在时间序列图中，您可以使用 Tooltip 显示特定时间点的重要事件或突变。",paraId:1,tocIndex:0},{value:"支持多种触发方式",paraId:1,tocIndex:0},{value:"：可以通过鼠标悬停（hover）、点击（click）、触摸（touch）等事件触发显示。",paraId:1,tocIndex:0},{value:"chart.options({\n  type: 'interval',\n  tooltip: {\n    title: 'name', // 标题\n    items: ['genre'], // 数据项\n  },\n});\n",paraId:2,tocIndex:2},{value:"并且结合 ",paraId:3,tocIndex:2},{value:"view.interaction.tooltip",paraId:3,tocIndex:2},{value:" 去配置提示信息的渲染和额外配置。",paraId:3,tocIndex:2},{value:"chart.options({\n  type: 'view',\n  interaction: {\n    tooltip: { series: true },\n  },\n});\n",paraId:4,tocIndex:2},{value:"当该视图中只有一个标记的时候，通过 ",paraId:5,tocIndex:2},{value:"mark.interaction.tooltip",paraId:5,tocIndex:2},{value:" 配置提示信息的渲染和额外配置也是可以的。",paraId:5,tocIndex:2},{value:"chart.options({\n  type: 'line',\n  interaction: {\n    tooltip: { series: true },\n  },\n});\n",paraId:6,tocIndex:2},{value:"如果希望不展示该 tooltip 的提示信息，可以通过下面的配置关闭。",paraId:7,tocIndex:2},{value:"chart.options({\n  type: 'interval',\n  tooltip: false,\n});\n",paraId:8,tocIndex:2},{value:"如果希望图表没有提示信息交互，可以通过 ",paraId:9,tocIndex:2},{value:"chart.interaction",paraId:9,tocIndex:2},{value:" 实现。",paraId:9,tocIndex:2},{value:"chart.options({\n  type: 'view',\n  interaction: { tooltip: false },\n});\n",paraId:10,tocIndex:2},{value:"尝试一下",paraId:11,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .line()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/indices.json',\n  })\n  .transform({ type: 'normalizeY', basis: 'first', groupBy: 'color' })\n  .encode('x', (d) => new Date(d.Date))\n  .encode('y', 'Close')\n  .encode('color', 'Symbol')\n  .axis('y', { title: '↑ Change in price (%)' })\n  .tooltip({\n    title: (d) => new Date(d.Date).toUTCString(),\n    items: [\n      (d, i, data, column) => ({\n        name: 'Close',\n        value: column.y.value[i].toFixed(1),\n      }),\n    ],\n  })\n  .label({\n    text: 'Symbol',\n    selector: 'last',\n    fontSize: 10,\n  });\n\nchart.render();\n",paraId:12,tocIndex:2},{value:"配置项分为两个部分",paraId:13,tocIndex:3},{value:"tooltip",paraId:14,tocIndex:3},{value:" 是 G2 中用于展示数据点的详细信息的一个 UI 组件。当用户将鼠标悬停在图表的某个数据点上时，tooltip 会显示该数据点的相关信息，比如坐标值、度量值等。",paraId:14,tocIndex:3},{value:"interaction.tooltip",paraId:15,tocIndex:3},{value:" 是 G2 的交互机制的一部分，属于 interaction（交互）模块。它是一种内置的交互行为，用于增强工具提示的功能，特别是在某些特定的交互场景下（如动态显示或隐藏工具提示）。",paraId:15,tocIndex:3},{value:"tooltip",paraId:16,tocIndex:3},{value:" 和 ",paraId:16,tocIndex:3},{value:"interaction.tooltip",paraId:16,tocIndex:3},{value:" 中的 tooltip 是两个不同维度的配置，但容易混淆。以下是它们的核心区别:",paraId:16,tocIndex:3},{value:"特性",paraId:17,tocIndex:3},{value:"tooltip",paraId:17,tocIndex:3},{value:"interaction.tooltip",paraId:17,tocIndex:3},{value:"职责",paraId:17,tocIndex:3},{value:"定义工具提示的内容、样式和基本行为",paraId:17,tocIndex:3},{value:"定义工具提示在交互场景下的行为",paraId:17,tocIndex:3},{value:"配置方式",paraId:17,tocIndex:3},{value:"通过 chart.tooltip() 配置",paraId:17,tocIndex:3},{value:"通过 chart.interaction() 启用或自定义",paraId:17,tocIndex:3},{value:"作用范围",paraId:17,tocIndex:3},{value:"全局生效，影响整个图表",paraId:17,tocIndex:3},{value:"与特定交互行为绑定",paraId:17,tocIndex:3},{value:"典型用途",paraId:17,tocIndex:3},{value:"设置工具提示的字段、样式、内容等",paraId:17,tocIndex:3},{value:"控制工具提示的动态显示/隐藏或其他交互逻辑",paraId:17,tocIndex:3},{value:"属性",paraId:18,tocIndex:4},{value:"描述",paraId:18,tocIndex:4},{value:"类型",paraId:18,tocIndex:4},{value:"默认值",paraId:18,tocIndex:4},{value:"适用于",paraId:18,tocIndex:4},{value:"title",paraId:18,tocIndex:4},{value:"设置",paraId:18,tocIndex:4},{value:"tooltip",paraId:18,tocIndex:4},{value:"的标题内容：如果值为数据字段名，则会展示数据中对应该字段的数值，如果数据中不存在该字段，将该值作为 title。详见",paraId:18,tocIndex:4},{value:"title 配置",paraId:19,tocIndex:4},{value:"title",paraId:20,tocIndex:4},{value:"nodeTitle",paraId:18,tocIndex:4},{value:"设置复合图形",paraId:18,tocIndex:4},{value:"tooltip",paraId:18,tocIndex:4},{value:"标题的节点",paraId:18,tocIndex:4},{value:"title",paraId:18,tocIndex:4},{value:"属性",paraId:18,tocIndex:4},{value:"title",paraId:21,tocIndex:4},{value:"桑基图等复合图形",paraId:18,tocIndex:4},{value:"linkTitle",paraId:18,tocIndex:4},{value:"设置复合图形",paraId:18,tocIndex:4},{value:"tooltip",paraId:18,tocIndex:4},{value:"标题的弦",paraId:18,tocIndex:4},{value:"title",paraId:18,tocIndex:4},{value:"属性",paraId:18,tocIndex:4},{value:"title",paraId:22,tocIndex:4},{value:"桑基图等复合图形",paraId:18,tocIndex:4},{value:"items",paraId:18,tocIndex:4},{value:"指定",paraId:18,tocIndex:4},{value:"tooltip",paraId:18,tocIndex:4},{value:"中显示的字段，默认不同图表有不同的默认字段列表。配合 channel 配置一起使用，效果更佳。详见",paraId:18,tocIndex:4},{value:"items 配置",paraId:23,tocIndex:4},{value:"items",paraId:24,tocIndex:4},{value:"nodeItems",paraId:18,tocIndex:4},{value:"设置复合图形",paraId:18,tocIndex:4},{value:"tooltip",paraId:18,tocIndex:4},{value:"标题的节点",paraId:18,tocIndex:4},{value:"items",paraId:18,tocIndex:4},{value:"属性",paraId:18,tocIndex:4},{value:"items",paraId:25,tocIndex:4},{value:"桑基图等复合图形",paraId:18,tocIndex:4},{value:"linkItems",paraId:18,tocIndex:4},{value:"设置复合图形",paraId:18,tocIndex:4},{value:"tooltip",paraId:18,tocIndex:4},{value:"标题的弦",paraId:18,tocIndex:4},{value:"items",paraId:18,tocIndex:4},{value:"属性",paraId:18,tocIndex:4},{value:"items",paraId:26,tocIndex:4},{value:"桑基图等复合图形",paraId:18,tocIndex:4},{value:"title",paraId:27,tocIndex:5},{value:"是一个用于显示当前悬停数据点的 主标题 的字段，通常用于表示数据点所属的分类或上下文信息。",paraId:27,tocIndex:5},{value:"title",paraId:28,tocIndex:5},{value:"可以直接写入一个固定显示的字符串，或者一个方法从",paraId:28,tocIndex:5},{value:"data",paraId:28,tocIndex:5},{value:"中动态获取标题",paraId:28,tocIndex:5},{value:"chart.options({\n  type: 'interval',\n  tooltip: {\n    title: (d) => (d.sold > 150 ? 'high' : 'low'), // 设置 title\n  },\n});\n",paraId:29,tocIndex:5},{value:"在不需要自定义 title 的时候，可以直接声明 tooltip 为一个数组，此时的 title 将会使用默认配置：",paraId:30,tocIndex:5},{value:"chart.options({\n  type: 'interval',\n  tooltip: ['genre', 'sold'],\n});\n",paraId:31,tocIndex:5},{value:"其中完整的 title 结构如下：",paraId:32,tocIndex:5},{value:"细分配置项名称",paraId:33,tocIndex:5},{value:"类型",paraId:33,tocIndex:5},{value:"功能描述",paraId:33,tocIndex:5},{value:"channel",paraId:33,tocIndex:5},{value:"string",paraId:33,tocIndex:5},{value:"定义生成 title 的通道",paraId:33,tocIndex:5},{value:"field",paraId:33,tocIndex:5},{value:"string",paraId:33,tocIndex:5},{value:"定义生成 title 的的字段",paraId:33,tocIndex:5},{value:"value",paraId:33,tocIndex:5},{value:"string",paraId:33,tocIndex:5},{value:"title 的值",paraId:33,tocIndex:5},{value:"valueFormatter",paraId:33,tocIndex:5},{value:"string",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"Function",paraId:33,tocIndex:5},{value:"格式化 title",paraId:33,tocIndex:5},{value:"字段",paraId:34,tocIndex:5},{value:"它们的值（value）可以通过来自原始数据，通过字符串或者 ",paraId:35,tocIndex:5},{value:"title.field",paraId:35,tocIndex:5},{value:" 指定。",paraId:35,tocIndex:5},{value:"chart.options({\n  tooltip: {\n    title: 'sold',\n    items: ['genre'],\n  },\n});\n",paraId:36,tocIndex:5},{value:"// 等价于\nchart.options({\n  tooltip: {\n    title: { field: 'sold' },\n    items: [{ field: 'genre' }],\n  },\n});\n",paraId:37,tocIndex:5},{value:"通道",paraId:38,tocIndex:5},{value:"它们的值（value）可以来自通道值，通过 ",paraId:39,tocIndex:5},{value:"title.channel",paraId:39,tocIndex:5},{value:" 指定，常常用于使用 ",paraId:39,tocIndex:5},{value:"mark.transform",paraId:39,tocIndex:5},{value:" 生成新通道的图表。",paraId:39,tocIndex:5},{value:"chart.options({\n  tooltip: {\n    title: { channel: 'x' },\n    items: [{ channel: 'y' }],\n  },\n});\n",paraId:40,tocIndex:5},{value:"格式化",paraId:41,tocIndex:5},{value:"可以通过 ",paraId:42,tocIndex:5},{value:"title.valueFormatter",paraId:42,tocIndex:5},{value:" 去指定 title 值（value）的展示，",paraId:42,tocIndex:5},{value:"title.valueFormatter",paraId:42,tocIndex:5},{value:" 可以是一个函数，也可以一个 d3-format 支持的字符串。",paraId:42,tocIndex:5},{value:"chart.options({\n  tooltip: {\n    title: { field: 'sold', valueFormatter: (sold) => sold.toUpperCase() },\n    items: [{ channel: 'y', valueFormatter: '.0%' }],\n  },\n});\n",paraId:43,tocIndex:5},{value:"个性化配置",paraId:44,tocIndex:5},{value:"当然对于 title 还提供了回调去获得最大的个性化配置能力。",paraId:45,tocIndex:5},{value:"chart.options({\n  tooltip: {\n    title: (datum, index, data, column) => ({\n      value: `<span style=\"color: #00ff00; font-style: italic;\">${datum.letter}</span>`,\n      custom: '...',\n    }),\n    items: [\n      (datum, index, data, column) => ({\n        color: datum.sold > 150 ? 'red' : 'blue', // 指定 item 的颜色\n        name: index === 0 ? datum.genre : `${datum.genre} ${data[index].genre}`, // 指定 item 的名字\n        value: column.y.value[index], // 使用 y 通道的值\n        custom: '...',\n      }),\n    ],\n  },\n});\n",paraId:46,tocIndex:5},{value:"items 返回值可用作 ",paraId:47,tocIndex:5},{value:"interaction.tooltip.render",paraId:47,tocIndex:5},{value:" 的入参，您可以设置一些自定义参数。详见",paraId:47,tocIndex:5},{value:"自定义渲染内容",paraId:48,tocIndex:5},{value:"复合图形配置",paraId:49,tocIndex:5},{value:"复合图形在配置",paraId:50,tocIndex:5},{value:"tooltip.title",paraId:50,tocIndex:5},{value:" 时需要分别配置节点与弦",paraId:50,tocIndex:5},{value:"({\n  tooltip: {\n    nodeTitle: (d) => d.key,\n    linkTitle: (d) => 'link',\n  },\n});\n",paraId:51,tocIndex:5},{value:"items",paraId:52,tocIndex:6},{value:" 是 tooltip 配置中的一个关键属性，",paraId:52,tocIndex:6},{value:"items",paraId:52,tocIndex:6},{value:" 是一个数组，表示工具提示中每一项的内容。每一项通常对应于一个数据字段或一个图形元素（例如柱状图的一根柱子、折线图的一个点等）。通过自定义 ",paraId:52,tocIndex:6},{value:"items",paraId:52,tocIndex:6},{value:"，可以灵活地控制工具提示的显示内容，包括名称、值、颜色等信息。",paraId:52,tocIndex:6},{value:"其中完整的 title 结构如下：",paraId:53,tocIndex:6},{value:"细分配置项名称",paraId:54,tocIndex:6},{value:"类型",paraId:54,tocIndex:6},{value:"功能描述",paraId:54,tocIndex:6},{value:"color",paraId:54,tocIndex:6},{value:"string",paraId:54,tocIndex:6},{value:"marker 的颜色",paraId:54,tocIndex:6},{value:"field",paraId:54,tocIndex:6},{value:"string",paraId:54,tocIndex:6},{value:"定义生成 item 的的字段",paraId:54,tocIndex:6},{value:"name",paraId:54,tocIndex:6},{value:"string",paraId:54,tocIndex:6},{value:"item 的名字",paraId:54,tocIndex:6},{value:"value",paraId:54,tocIndex:6},{value:"string",paraId:54,tocIndex:6},{value:"item 的值",paraId:54,tocIndex:6},{value:"channel",paraId:54,tocIndex:6},{value:"string",paraId:54,tocIndex:6},{value:"定义生成 item 的值的通道",paraId:54,tocIndex:6},{value:"valueFormatter",paraId:54,tocIndex:6},{value:"string",paraId:54,tocIndex:6},{value:" | ",paraId:54,tocIndex:6},{value:"Function",paraId:54,tocIndex:6},{value:"格式化 item",paraId:54,tocIndex:6},{value:"items",paraId:55,tocIndex:6},{value:" 的 ",paraId:55,tocIndex:6},{value:"value",paraId:55,tocIndex:6},{value:"、",paraId:55,tocIndex:6},{value:"channel",paraId:55,tocIndex:6},{value:"、",paraId:55,tocIndex:6},{value:"valueFormatter",paraId:55,tocIndex:6},{value:"属性的配置方式与",paraId:55,tocIndex:6},{value:"title",paraId:55,tocIndex:6},{value:"一致，详细配置请参考",paraId:55,tocIndex:6},{value:"title",paraId:56,tocIndex:6},{value:"名称",paraId:57,tocIndex:6},{value:"通过",paraId:58,tocIndex:6},{value:"name",paraId:58,tocIndex:6},{value:"可以便捷的修改",paraId:58,tocIndex:6},{value:"tooltip",paraId:58,tocIndex:6},{value:"中",paraId:58,tocIndex:6},{value:"item",paraId:58,tocIndex:6},{value:"的名字，通过",paraId:58,tocIndex:6},{value:"channel",paraId:58,tocIndex:6},{value:"来匹配图标中对应的条目。",paraId:58,tocIndex:6},{value:"chart.options({\n  tooltip: {\n    items: [\n      { name: '张三', channel: 'y1' },\n      { name: '李四', channel: 'y2' },\n    ],\n  },\n});\n",paraId:59,tocIndex:6},{value:"颜色",paraId:60,tocIndex:6},{value:"tooltip",paraId:61,tocIndex:6},{value:"会自动根据图标内容分配",paraId:61,tocIndex:6},{value:"tooltip",paraId:61,tocIndex:6},{value:" ",paraId:61,tocIndex:6},{value:"item",paraId:61,tocIndex:6},{value:"的颜色，但是实际应用中，可能需要根据一些规则来指定某些颜色，此时就可以通过",paraId:61,tocIndex:6},{value:"color",paraId:61,tocIndex:6},{value:"属性来配置。通过",paraId:61,tocIndex:6},{value:"channel",paraId:61,tocIndex:6},{value:"来匹配图标中对应的条目。",paraId:61,tocIndex:6},{value:"chart.options({\n  tooltip: {\n    items: [\n      { color: 'pink', channel: 'y1' },\n      { color: '#f00', channel: 'y2' },\n    ],\n  },\n});\n",paraId:62,tocIndex:6},{value:"复合图形配置",paraId:63,tocIndex:6},{value:"复合图形在配置",paraId:64,tocIndex:6},{value:"tooltip.items",paraId:64,tocIndex:6},{value:" 时需要分别配置节点与弦",paraId:64,tocIndex:6},{value:"({\n  tooltip: {\n    nodeItems: [\n      (datum, index, data, column) => {\n        return {\n          color: 'red', // 指定 item 的颜色\n          name: '节点', // 指定 item 的名字\n          value: d.key, // 使用 y 通道的值\n          content: '节点自定义属性',\n        };\n      },\n    ],\n    linkItems: [\n      (datum, index, data, column) => {\n        return {\n          color: 'red', // 指定 item 的颜色\n          name: '连接线', // 指定 item 的名字\n          value: `${d.source.key}-${d.target.key}`, // 使用 y 通道的值\n          content: '连接线自定义属性',\n        };\n      },\n    ],\n  },\n});\n",paraId:65,tocIndex:6},{value:"属性",paraId:66,tocIndex:7},{value:"描述",paraId:66,tocIndex:7},{value:"类型",paraId:66,tocIndex:7},{value:"默认值",paraId:66,tocIndex:7},{value:"适用于",paraId:66,tocIndex:7},{value:"body",paraId:66,tocIndex:7},{value:"是否展示 tooltip",paraId:66,tocIndex:7},{value:"boolean",paraId:66,tocIndex:7},{value:"true",paraId:66,tocIndex:7},{value:"bounding",paraId:66,tocIndex:7},{value:"控制 tooltip 提示框的显示边界，超出会自动调整位置",paraId:66,tocIndex:7},{value:"{ x: number, y: number, width: number, height: number }",paraId:66,tocIndex:7},{value:"图表区域大小",paraId:66,tocIndex:7},{value:"css",paraId:66,tocIndex:7},{value:"设置 tooltip 的 css 样式",paraId:66,tocIndex:7},{value:"css",paraId:67,tocIndex:7},{value:"-",paraId:66,tocIndex:7},{value:"crosshairs",paraId:66,tocIndex:7},{value:"配置十字辅助线 ",paraId:66,tocIndex:7},{value:"crosshairs",paraId:66,tocIndex:7},{value:" 的样式",paraId:66,tocIndex:7},{value:"crosshairs",paraId:68,tocIndex:7},{value:"详见 ",paraId:66,tocIndex:7},{value:"crosshairs",paraId:69,tocIndex:7},{value:"disableNative",paraId:66,tocIndex:7},{value:"禁用原生的 pointerover 和 pointerout 事件，需要自定义 tooltip 交互的时候需要设置为 true",paraId:66,tocIndex:7},{value:"boolean",paraId:66,tocIndex:7},{value:"false",paraId:66,tocIndex:7},{value:"enterable",paraId:66,tocIndex:7},{value:"tooltip 是否允许鼠标滑入",paraId:66,tocIndex:7},{value:"boolean",paraId:66,tocIndex:7},{value:"false",paraId:66,tocIndex:7},{value:"facet",paraId:66,tocIndex:7},{value:"是否是分面图的 tooltip",paraId:66,tocIndex:7},{value:"boolean",paraId:66,tocIndex:7},{value:"false",paraId:66,tocIndex:7},{value:"分面复合图表",paraId:66,tocIndex:7},{value:"filter",paraId:66,tocIndex:7},{value:"item 筛选器",paraId:66,tocIndex:7},{value:"(d: TooltipItemValue) => any",paraId:66,tocIndex:7},{value:"-",paraId:66,tocIndex:7},{value:"groupName",paraId:66,tocIndex:7},{value:"是否使用 groupName",paraId:66,tocIndex:7},{value:"boolean",paraId:66,tocIndex:7},{value:"true",paraId:66,tocIndex:7},{value:"leading",paraId:66,tocIndex:7},{value:"是否在时间间隔开始的时候更新提示信息",paraId:66,tocIndex:7},{value:"boolean",paraId:66,tocIndex:7},{value:"true",paraId:66,tocIndex:7},{value:"marker",paraId:66,tocIndex:7},{value:"配置标记点 ",paraId:66,tocIndex:7},{value:"marker",paraId:66,tocIndex:7},{value:" 的样式",paraId:66,tocIndex:7},{value:"marker",paraId:70,tocIndex:7},{value:"详见 ",paraId:66,tocIndex:7},{value:"marker",paraId:71,tocIndex:7},{value:"markerType",paraId:66,tocIndex:7},{value:"markerType 用于控制显示提示信息时，选中标记点（Marker）的样式是空心还是实心，默认为实心，配置为",paraId:66,tocIndex:7},{value:"'hollow'",paraId:66,tocIndex:7},{value:"则为空心",paraId:66,tocIndex:7},{value:"'hollow' | undefined",paraId:66,tocIndex:7},{value:"undefined",paraId:66,tocIndex:7},{value:"mount",paraId:66,tocIndex:7},{value:"指定提示框的挂载节点",paraId:66,tocIndex:7},{value:"string",paraId:66,tocIndex:7},{value:" | ",paraId:66,tocIndex:7},{value:"HTMLElement",paraId:66,tocIndex:7},{value:"图表容器",paraId:66,tocIndex:7},{value:"position",paraId:66,tocIndex:7},{value:"设置 tooltip 的固定展示位置，相对于数据点",paraId:66,tocIndex:7},{value:"'top'",paraId:66,tocIndex:7},{value:" | ",paraId:66,tocIndex:7},{value:"'bottom'",paraId:66,tocIndex:7},{value:" | ",paraId:66,tocIndex:7},{value:"'left'",paraId:66,tocIndex:7},{value:" | ",paraId:66,tocIndex:7},{value:"'right'",paraId:66,tocIndex:7},{value:" | ",paraId:66,tocIndex:7},{value:"'top-left'",paraId:66,tocIndex:7},{value:" | ",paraId:66,tocIndex:7},{value:"'top-right'",paraId:66,tocIndex:7},{value:" | ",paraId:66,tocIndex:7},{value:"'bottom-left'",paraId:66,tocIndex:7},{value:" | ",paraId:66,tocIndex:7},{value:"'bottom-right'",paraId:66,tocIndex:7},{value:"'right-bottom'",paraId:66,tocIndex:7},{value:"offset",paraId:66,tocIndex:7},{value:"在位置方向上的偏移量",paraId:66,tocIndex:7},{value:"[number, number]",paraId:66,tocIndex:7},{value:"[10, 10]",paraId:66,tocIndex:7},{value:"render",paraId:66,tocIndex:7},{value:"自定义渲染 tooltip 内容",paraId:72,tocIndex:7},{value:"(event, options) => HTMLElement | string",paraId:66,tocIndex:7},{value:"-",paraId:66,tocIndex:7},{value:"series",paraId:66,tocIndex:7},{value:"是否是系列元素的 tooltip",paraId:66,tocIndex:7},{value:"boolean",paraId:66,tocIndex:7},{value:"false",paraId:66,tocIndex:7},{value:"多条折线、多组柱状图",paraId:66,tocIndex:7},{value:"shared",paraId:66,tocIndex:7},{value:"相同 x 的元素是否共享 tooltip",paraId:66,tocIndex:7},{value:"boolean",paraId:66,tocIndex:7},{value:"false",paraId:66,tocIndex:7},{value:"sort",paraId:66,tocIndex:7},{value:"item 排序器",paraId:66,tocIndex:7},{value:"(d: TooltipItemValue) => any",paraId:66,tocIndex:7},{value:"-",paraId:66,tocIndex:7},{value:"trailing",paraId:66,tocIndex:7},{value:"是否在时间间隔结束的时候更新提示信息",paraId:66,tocIndex:7},{value:"boolean",paraId:66,tocIndex:7},{value:"false",paraId:66,tocIndex:7},{value:"wait",paraId:66,tocIndex:7},{value:"提示信息更新的时间间隔，单位为毫秒",paraId:66,tocIndex:7},{value:"number",paraId:66,tocIndex:7},{value:"50",paraId:66,tocIndex:7},{value:"crosshairs",paraId:73,tocIndex:8},{value:" 是提示框（Tooltip）的辅助线功能，用于在图表中标记当前数据点的精确位置，主要用于连续图形，例如折线图、面积图。通常以横向或纵向的参考线形式呈现，帮助用户更直观地定位数据。",paraId:73,tocIndex:8},{value:"另外，通过前缀",paraId:74,tocIndex:8},{value:"crosshairsX",paraId:74,tocIndex:8},{value:" 和 ",paraId:74,tocIndex:8},{value:"crosshairsY",paraId:74,tocIndex:8},{value:" 设置样式的优先级比 ",paraId:74,tocIndex:8},{value:"crosshairs",paraId:74,tocIndex:8},{value:"高，会覆盖后者。",paraId:74,tocIndex:8},{value:"属性",paraId:75,tocIndex:8},{value:"描述",paraId:75,tocIndex:8},{value:"类型",paraId:75,tocIndex:8},{value:"默认值",paraId:75,tocIndex:8},{value:"必选",paraId:75,tocIndex:8},{value:"crosshairs",paraId:75,tocIndex:8},{value:"是否显示十字辅助线",paraId:75,tocIndex:8},{value:"boolean",paraId:75,tocIndex:8},{value:"true",paraId:75,tocIndex:8},{value:"crosshairsStroke",paraId:75,tocIndex:8},{value:"十字辅助线的颜色",paraId:75,tocIndex:8},{value:"string",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsStrokeOpacity",paraId:75,tocIndex:8},{value:"十字辅助线的透明度",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsLineWidth",paraId:75,tocIndex:8},{value:"十字辅助线的描边宽度",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsLineDash",paraId:75,tocIndex:8},{value:"十字辅助线的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离",paraId:75,tocIndex:8},{value:"[number,number]",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsOpacity",paraId:75,tocIndex:8},{value:"十字辅助线的整体透明度",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsShadowColor",paraId:75,tocIndex:8},{value:"十字辅助线的阴影颜色",paraId:75,tocIndex:8},{value:"string",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsShadowBlur",paraId:75,tocIndex:8},{value:"十字辅助线的阴影高斯模糊系数",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsShadowOffsetX",paraId:75,tocIndex:8},{value:"十字辅助线阴影的水平方向偏移量",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsShadowOffsetY",paraId:75,tocIndex:8},{value:"十字辅助线阴影的垂直方向偏移量",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsCursor",paraId:75,tocIndex:8},{value:"十字辅助线的鼠标样式",paraId:75,tocIndex:8},{value:"string",paraId:75,tocIndex:8},{value:"default",paraId:75,tocIndex:8},{value:"crosshairsX",paraId:75,tocIndex:8},{value:"是否显示水平方向辅助线",paraId:75,tocIndex:8},{value:"boolean",paraId:75,tocIndex:8},{value:"false",paraId:75,tocIndex:8},{value:"crosshairsXStroke",paraId:75,tocIndex:8},{value:"水平方向辅助线的颜色",paraId:75,tocIndex:8},{value:"string",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsXStrokeOpacity",paraId:75,tocIndex:8},{value:"水平方向辅助线的透明度",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsXLineWidth",paraId:75,tocIndex:8},{value:"水平方向辅助线的描边宽度",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsXLineDash",paraId:75,tocIndex:8},{value:"水平方向辅助线的虚线配置",paraId:75,tocIndex:8},{value:"[number,number]",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsXOpacity",paraId:75,tocIndex:8},{value:"水平方向辅助线的整体透明度",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsXShadowColor",paraId:75,tocIndex:8},{value:"水平方向辅助线的阴影颜色",paraId:75,tocIndex:8},{value:"string",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsXShadowBlur",paraId:75,tocIndex:8},{value:"水平方向辅助线的阴影高斯模糊系数",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsXShadowOffsetX",paraId:75,tocIndex:8},{value:"水平方向辅助线阴影的水平方向偏移量",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsXShadowOffsetY",paraId:75,tocIndex:8},{value:"水平方向辅助线阴影的垂直方向偏移量",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsXCursor",paraId:75,tocIndex:8},{value:"水平方向辅助线的鼠标样式",paraId:75,tocIndex:8},{value:"string",paraId:75,tocIndex:8},{value:"default",paraId:75,tocIndex:8},{value:"crosshairsY",paraId:75,tocIndex:8},{value:"是否显示垂直方向辅助线",paraId:75,tocIndex:8},{value:"boolean",paraId:75,tocIndex:8},{value:"true",paraId:75,tocIndex:8},{value:"crosshairsYStroke",paraId:75,tocIndex:8},{value:"垂直方向辅助线的颜色",paraId:75,tocIndex:8},{value:"string",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsYStrokeOpacity",paraId:75,tocIndex:8},{value:"垂直方向辅助线的透明度",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsYLineWidth",paraId:75,tocIndex:8},{value:"垂直方向辅助线的描边宽度",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsYLineDash",paraId:75,tocIndex:8},{value:"垂直方向辅助线的虚线配置",paraId:75,tocIndex:8},{value:"[number,number]",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsYOpacity",paraId:75,tocIndex:8},{value:"垂直方向辅助线的整体透明度",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsYShadowColor",paraId:75,tocIndex:8},{value:"垂直方向辅助线的阴影颜色",paraId:75,tocIndex:8},{value:"string",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsYShadowBlur",paraId:75,tocIndex:8},{value:"垂直方向辅助线的阴影高斯模糊系数",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsYShadowOffsetX",paraId:75,tocIndex:8},{value:"垂直方向辅助线阴影的水平方向偏移量",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsYShadowOffsetY",paraId:75,tocIndex:8},{value:"垂直方向辅助线阴影的垂直方向偏移量",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsYCursor",paraId:75,tocIndex:8},{value:"垂直方向辅助线的鼠标样式",paraId:75,tocIndex:8},{value:"string",paraId:75,tocIndex:8},{value:"default",paraId:75,tocIndex:8},{value:"chart.options({\n  interaction: {\n    legendFilter: false,\n    elementPointMove: true,\n    tooltip: {\n      crosshairs: true, // 启用十字辅助线\n      crosshairsStroke: 'red', // 辅助线颜色为红色\n      crosshairsYStroke: 'yellow', // 垂直方向辅助线颜色单独设置为黄色\n      crosshairsLineDash: [4, 4], // 辅助线为虚线样式\n      markerType: 'hollow', // 提示框标记点为空心\n    },\n  },\n});\n",paraId:76,tocIndex:8},{value:"属性",paraId:77,tocIndex:9},{value:"描述",paraId:77,tocIndex:9},{value:"类型",paraId:77,tocIndex:9},{value:"默认值",paraId:77,tocIndex:9},{value:"必选",paraId:77,tocIndex:9},{value:"marker",paraId:77,tocIndex:9},{value:"是否展示标记点",paraId:77,tocIndex:9},{value:"boolean",paraId:77,tocIndex:9},{value:"true",paraId:77,tocIndex:9},{value:"markerFill",paraId:77,tocIndex:9},{value:"标记点的填充色",paraId:77,tocIndex:9},{value:"string",paraId:77,tocIndex:9},{value:"-",paraId:77,tocIndex:9},{value:"markerFillOpacity",paraId:77,tocIndex:9},{value:"标记点的填充透明度",paraId:77,tocIndex:9},{value:"number",paraId:77,tocIndex:9},{value:"-",paraId:77,tocIndex:9},{value:"markerStroke",paraId:77,tocIndex:9},{value:"标记点的描边颜色",paraId:77,tocIndex:9},{value:"string",paraId:77,tocIndex:9},{value:"-",paraId:77,tocIndex:9},{value:"markerStrokeOpacity",paraId:77,tocIndex:9},{value:"标记点的描边透明度",paraId:77,tocIndex:9},{value:"number",paraId:77,tocIndex:9},{value:"-",paraId:77,tocIndex:9},{value:"markerLineWidth",paraId:77,tocIndex:9},{value:"标记点的描边宽度",paraId:77,tocIndex:9},{value:"number",paraId:77,tocIndex:9},{value:"-",paraId:77,tocIndex:9},{value:"markerLineDash",paraId:77,tocIndex:9},{value:"标记点的描边虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离",paraId:77,tocIndex:9},{value:"[number,number]",paraId:77,tocIndex:9},{value:"-",paraId:77,tocIndex:9},{value:"markerOpacity",paraId:77,tocIndex:9},{value:"标记点的整体透明度",paraId:77,tocIndex:9},{value:"number",paraId:77,tocIndex:9},{value:"-",paraId:77,tocIndex:9},{value:"markerShadowColor",paraId:77,tocIndex:9},{value:"标记点的阴影颜色",paraId:77,tocIndex:9},{value:"string",paraId:77,tocIndex:9},{value:"-",paraId:77,tocIndex:9},{value:"markerShadowBlur",paraId:77,tocIndex:9},{value:"标记点的阴影高斯模糊系数",paraId:77,tocIndex:9},{value:"number",paraId:77,tocIndex:9},{value:"-",paraId:77,tocIndex:9},{value:"markerShadowOffsetX",paraId:77,tocIndex:9},{value:"标记点阴影的水平方向偏移量",paraId:77,tocIndex:9},{value:"number",paraId:77,tocIndex:9},{value:"-",paraId:77,tocIndex:9},{value:"markerShadowOffsetY",paraId:77,tocIndex:9},{value:"标记点阴影的垂直方向偏移量",paraId:77,tocIndex:9},{value:"number",paraId:77,tocIndex:9},{value:"-",paraId:77,tocIndex:9},{value:"markerCursor",paraId:77,tocIndex:9},{value:"标记点的鼠标样式",paraId:77,tocIndex:9},{value:"string",paraId:77,tocIndex:9},{value:"default",paraId:77,tocIndex:9},{value:"chart.options({\n  interaction: {\n    tooltip: {\n      marker: true,\n      markerType: 'hollow', // 提示框标记点为空心\n      markerStroke: 'yellow',\n      markerLineWidth: 2,\n      markerLineDash: [4, 4],\n    },\n  },\n});\n",paraId:78,tocIndex:9},{value:"tooltip",paraId:79,tocIndex:10},{value:" 的 cssStyle 配置项允许通过 CSS 样式直接自定义提示框的外观， 可快速实现提示框的视觉定制，适配不同主题或交互场景需求。",paraId:79,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: {\n    x: 'state',\n    y: 'population',\n    color: 'age',\n  },\n  transform: [\n    { type: 'sortX', by: 'y', reverse: true, reducer: 'sum', slice: 6 },\n    { type: 'dodgeX' },\n  ],\n  legend: false,\n  interaction: {\n    tooltip: {\n      shared: true,\n      mount: 'body',\n      css: {\n        '.g2-tooltip': {\n          background: '#eee',\n          'border-radius': ' 0.25em !important',\n        },\n        '.g2-tooltip-title': {\n          'font-size': '20px',\n          'font-weight': 'bold',\n          'padding-bottom': '0.25em',\n        },\n        '.g2-tooltip-list-item': {\n          background: '#ccc',\n          padding: '0.25em',\n          margin: '0.25em',\n          'border-radius': '0.25em',\n        },\n        '.g2-tooltip-list-item-name-label': {\n          'font-weight': 'bold',\n          'font-size': '16px',\n        },\n        'g2-tooltip-list-item-marker': {\n          'border-radius': '0.25em',\n          width: '15px',\n          height: '15px',\n        },\n        '.g2-tooltip-list-item-value': {\n          'font-weight': 'bold',\n          'font-size': '16px',\n        },\n      },\n    },\n  },\n});\n\nchart.render();\n",paraId:80,tocIndex:10},{value:"尝试一下",paraId:81,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  })\n  .transform({ type: 'sortX', by: 'y', reverse: true, slice: 6 })\n  .transform({ type: 'dodgeX' })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .encode('color', 'age')\n  .scale('y', { nice: true })\n  .axis('y', { labelFormatter: '~s' })\n  .interaction('tooltip', {\n    shared: true,\n    css: {\n      '.g2-tooltip': {\n        background: '#eee',\n        'border-radius': ' 0.25em !important',\n      },\n      '.g2-tooltip-title': {\n        'font-size': '20px',\n        'font-weight': 'bold',\n        'padding-bottom': '0.25em',\n      },\n      '.g2-tooltip-list-item': {\n        background: '#ccc',\n        padding: '0.25em',\n        margin: '0.25em',\n        'border-radius': '0.25em',\n      },\n      '.g2-tooltip-list-item-name-label': {\n        'font-weight': 'bold',\n        'font-size': '16px',\n      },\n      'g2-tooltip-list-item-marker': {\n        'border-radius': '0.25em',\n        width: '15px',\n        height: '15px',\n      },\n      '.g2-tooltip-list-item-value': {\n        'font-weight': 'bold',\n        'font-size': '16px',\n      },\n    },\n  });\n\nchart.render();\n",paraId:82,tocIndex:10},{value:"有时候内置的 Tooltip 无法满足需求，这时候可以通过 ",paraId:83,tocIndex:11},{value:"mark.interaction.tooltip.render",paraId:83,tocIndex:11},{value:" 或者 ",paraId:83,tocIndex:11},{value:"view.interaction.tooltip.render",paraId:83,tocIndex:11},{value:" 的 ",paraId:83,tocIndex:11},{value:"render",paraId:83,tocIndex:11},{value:" 函数来渲染自定义的提示。",paraId:83,tocIndex:11},{value:"该 ",paraId:84,tocIndex:11},{value:"render",paraId:84,tocIndex:11},{value:" 函数接受事件对象 ",paraId:84,tocIndex:11},{value:"event",paraId:84,tocIndex:11},{value:" 和提示数据 ",paraId:84,tocIndex:11},{value:"tooltipData",paraId:84,tocIndex:11},{value:"，返回一个 string 或者 DOM 对象。其中 ",paraId:84,tocIndex:11},{value:"event",paraId:84,tocIndex:11},{value:" 是 ",paraId:84,tocIndex:11},{value:"@antv/g",paraId:84,tocIndex:11},{value:" 抛出的鼠标对象，",paraId:84,tocIndex:11},{value:"tooltipData",paraId:84,tocIndex:11},{value:" 是通过 ",paraId:84,tocIndex:11},{value:"mark.tooltip",paraId:84,tocIndex:11},{value:" 声明的 title 和 items 数据。如果返回值是一个 string，那么会作为 tooltip 容器的 innerHTML，否则会挂载该返回值。一个提示的 render 函数的定义大概如下：",paraId:84,tocIndex:11},{value:"function render(event, tooltipData) {\n  const { title, items } = tooltipData;\n  return `<div></div>`;\n}\n",paraId:85,tocIndex:11},{value:"下面是一个简单的例子：",paraId:86,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  })\n  .transform([{ type: 'sortX', by: 'y', reverse: true }])\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .interaction('tooltip', {\n    // render 回调方法返回一个innerHTML 或者 DOM\n    render: (event, { title, items }) => `<div>\n      <h3 style=\"padding:0;margin:0\">${title}</h3>\n      <ul>${items.map(\n        (d) =>\n          `<li><span style=\"color: ${d.color}\">${d.name}</span> ${d.value}</li>`,\n      )}</ul>\n      </div>`,\n  });\n\nchart.render();\n",paraId:87,tocIndex:11},{value:"chart.on() 方法将指定的监听器注册到 chart 上，当该对象触发指定的事件时，指定的回调函数就会被执行。",paraId:88,tocIndex:12},{value:"以下是如何配置配置 tooltip 显示隐藏事件的示例：",paraId:89,tocIndex:12},{value:"chart.on('tooltip:show', (event) => {\n  console.log(event.data.data);\n});\n\nchart.on('tooltip:hide', () => {\n  console.log('hide');\n});\n",paraId:90,tocIndex:12},{value:"尝试一下",paraId:91,tocIndex:12},{value:"/**\n * A recreation of this demo: https://vega.github.io/vega-lite/examples/layer_histogram_global_mean.html\n */\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/movies.json',\n  transform: [\n    {\n      type: 'filter',\n      callback: (d) => d['IMDB Rating'] > 0,\n    },\n  ],\n});\n\nchart\n  .rect()\n  .transform({ type: 'binX', y: 'count', thresholds: 9 })\n  .encode('x', 'IMDB Rating')\n  .scale('y', { domainMax: 1000 })\n  .style('inset', 1);\n\nchart\n  .lineX()\n  .transform({ type: 'groupColor', x: 'mean' }) // groupColor 为分组并对指定的通道进行聚合，可以理解为把数据通过 x 通道的数据 取平均值(mean) 变更为一条数据。\n  .encode('x', 'IMDB Rating')\n  .style('stroke', '#F4664A')\n  .style('strokeOpacity', 1)\n  .style('lineWidth', 2)\n  .style('lineDash', [4, 4]);\n\nchart.render();\n",paraId:92,tocIndex:12},{value:"mark.tooltip({\n  title: 'name', // 字段\n});\n\nmark.tooltip({\n  title: (d) => (d.value > 100 ? d.name : d.age), // transform\n});\n",paraId:93,tocIndex:14},{value:"// 单个字段\nmark.tooltip('a');\nmark.tooltip({ field: 'a' });\n\n// 单个通道\nmark.tooltip({ channel: 'y' });\n\n// transform\nmark.tooltip((d) => (d.value > 100 ? d.name : d.age));\n\n// 格式化\nmark.tooltip({ channel: 'y', valueFormatter: (d) => d.toFixed(1) });\n\n// d3-format 支持的字符\n// https://github.com/d3/d3-format\nmark.tooltip({ channel: 'y', valueFormatter: '~s' });\n\n// 完整信息\nmark.tooltip({ name: 'name', color: 'red', value: 'color' });\n\n// 回调\nmark.tooltip(\n  (\n    d, // 每一个数据项\n    index, // 索引\n    data, // 完整数据\n    column, // 通道\n  ) => ({\n    value: `${column.y.value[index]} - ${column.y1.value[index]}`,\n  }),\n);\n\n// 多个 item\nmark.tooltip({ channel: 'y' }).tooltip({ channel: 'x' });\n",paraId:94,tocIndex:15},{value:"mark.tooltip({\n  title: 'a',\n  items: [{ channel: 'x' }, { channel: 'y' }],\n});\n",paraId:95,tocIndex:16},{value:"当数据中存在 null 或 undefined 值时，可以通过 ",paraId:96,tocIndex:17},{value:"interaction.tooltip.filter",paraId:96,tocIndex:17},{value:" 来过滤掉这些无效数据，避免在 tooltip 中显示。",paraId:96,tocIndex:17},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  data: [\n    { month: 'Jan', city: 'Tokyo', temperature: null },\n    { month: 'Jan', city: 'London', temperature: 3.9 },\n    { month: 'Feb', city: 'Tokyo', temperature: 8 },\n    { month: 'Feb', city: 'London', temperature: 4.2 },\n    { month: 'Mar', city: 'Tokyo', temperature: 9.5 },\n    { month: 'Mar', city: 'London', temperature: 5.7 },\n  ],\n  encode: { x: 'month', y: 'temperature', color: 'city' },\n  // 添加interaction配置来过滤null值\n  interaction: {\n    tooltip: {\n      filter: (d) => d.value !== null && d.value !== undefined,\n    },\n  },\n  children: [\n    {\n      type: 'line',\n      encode: { shape: 'smooth' },\n      tooltip: {\n        items: [{ channel: 'y' }],\n      },\n    },\n    { type: 'point', encode: { shape: 'point' }, tooltip: false },\n  ],\n});\n\nchart.render();\n",paraId:97,tocIndex:17},{value:"更多过滤选项：",paraId:98,tocIndex:17},{value:"// 只过滤null值\nfilter: (d) => d.value !== null;\n\n// 过滤null、undefined和空字符串\nfilter: (d) => d.value !== null && d.value !== undefined && d.value !== '';\n\n// 过滤所有\"假值\"（null, undefined, 0, false, ''等）\nfilter: (d) => Boolean(d.value);\n\n// 按name过滤特定字段（比如只过滤temperature字段的null值）\nfilter: (d) =>\n  d.name !== 'temperature' || (d.value !== null && d.value !== undefined);\n",paraId:99,tocIndex:17},{value:"render 函数提供了强大的个性化配置能力，通过对",paraId:100,tocIndex:18},{value:"tooltip.render",paraId:100,tocIndex:18},{value:"函数返回参数的配置，自定义",paraId:100,tocIndex:18},{value:"interaction.tooltip.render",paraId:100,tocIndex:18},{value:"的入参",paraId:100,tocIndex:18},{value:"chart.options({\n  tooltip: {\n    items: [\n      (datum, index, data, column) => ({\n        color: datum.sold > 150 ? 'red' : 'blue', // 指定 item 的颜色\n        name: index === 0 ? datum.genre : `${datum.genre} ${data[index].genre}`, // 指定 item 的名字\n        value: column.y.value[index], // 使用 y 通道的值\n        custom1: '自定义参数1',\n        custom2: '自定义参数2',\n      }),\n    ],\n  },\n  interaction: {\n    tooltip: {\n      // render 回调方法返回一个innerHTML 或者 DOM\n      render: (event, { title, items }) => {\n        return `<div>\n          <h3 style=\"padding:0;margin:0\">${title}</h3>\n          <ul>${items.map(\n            ({ color, name, value, custom1, custom2 }) => '...',\n          )}</ul>\n        </div>`;\n      },\n    },\n  },\n});\n",paraId:101,tocIndex:18},{value:"对于 Interval、Point 等非系列 Mark，控制展示的方式如下：",paraId:102,tocIndex:19},{value:"// 条形图、点图等\nchart\n  .interval()\n  .data([\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  .encode('color', 'genre');\n\nchart.render().then((chart) =>\n  chart.emit('tooltip:show', {\n    offsetX: 10, // 相对于 plot 区域的位置\n    offsetX: 20, // 相对于 plot 区域的位置\n    data: {\n      data: { genre: 'Sports' }, // 会找从原始数据里面找到匹配的数据\n    },\n  }),\n);\n",paraId:103,tocIndex:19},{value:"对于 Line、Area 等系列 Mark，控制展示的方式如下：",paraId:104,tocIndex:19},{value:"chart\n  .line()\n  .data({ type: 'fetch', value: 'data/aapl.csv' })\n  .encode('x', 'date')\n  .encode('y', 'close');\n\n// 根据数据拾取\nchart.render((chart) =>\n  chart.emit('tooltip:show', {\n    data: {\n      data: { x: new Date('2010-11-16') },\n    },\n  }),\n);\n\n// 根据像素拾取\nchart.render((chart) =>\n  chart.emit('tooltip:show', {\n    offsetX: 200,\n    offsetY: 200,\n  }),\n);\n",paraId:105,tocIndex:19},{value:"隐藏的方式如下：",paraId:106,tocIndex:19},{value:"chart.emit('tooltip:hide');\n",paraId:107,tocIndex:19},{value:"chart.emit('tooltip:disable'); // 禁用 tooltip\nchart.emit('tooltip:enable'); // 启用交互\n",paraId:108,tocIndex:20},{value:"默认情况下，",paraId:109,tocIndex:21},{value:"crosshairsY",paraId:109,tocIndex:21},{value:"是开启的，",paraId:109,tocIndex:21},{value:"crosshairsX",paraId:109,tocIndex:21},{value:"是关闭的，所以如果要开启十字辅助线，有以下两种方式。",paraId:109,tocIndex:21},{value:"设置",paraId:110,tocIndex:21},{value:"crosshairs",paraId:110,tocIndex:21},{value:"为",paraId:110,tocIndex:21},{value:"true",paraId:110,tocIndex:21},{value:"。",paraId:110,tocIndex:21},{value:"chart.interaction('tooltip', {\n  crosshairs: true, // 开启十字辅助线\n  crosshairsXStroke: 'red', // 设置 X 轴辅助线颜色为'red'\n  crosshairsYStroke: 'blue', // 设置 Y 轴辅助线颜色为'blue'\n});\n",paraId:111,tocIndex:21},{value:"设置",paraId:112,tocIndex:21},{value:"crosshairsX",paraId:112,tocIndex:21},{value:"为",paraId:112,tocIndex:21},{value:"true",paraId:112,tocIndex:21},{value:"。",paraId:112,tocIndex:21},{value:"chart.interaction('tooltip', {\n  crosshairsX: true, // 开启crosshairsX辅助线\n  crosshairsXStroke: 'red', // 设置 X 轴辅助线颜色为'red'\n  crosshairsYStroke: 'blue', // 设置 Y 轴辅助线颜色为'blue'\n});\n",paraId:113,tocIndex:21},{value:"crosshairsX",paraId:114,tocIndex:21},{value:"的优先级大于",paraId:114,tocIndex:21},{value:"crosshairs",paraId:114,tocIndex:21},{value:"的优先级。",paraId:114,tocIndex:21},{value:"chart.interaction('tooltip', {\n  markerType: 'hollow', // 设置提示点的样式为空心圆\n});\n",paraId:115,tocIndex:22},{value:"和一般",paraId:116,tocIndex:23},{value:"Mark",paraId:116,tocIndex:23},{value:"自定义",paraId:116,tocIndex:23},{value:"tooltip",paraId:116,tocIndex:23},{value:"交互的方法类似，先在图形的",paraId:116,tocIndex:23},{value:"tooltip.render",paraId:116,tocIndex:23},{value:"里返回自定义属性，然后在",paraId:116,tocIndex:23},{value:"interaction.render",paraId:116,tocIndex:23},{value:"里使用。",paraId:116,tocIndex:23},{value:"({\n  type: 'sankey',\n  data: {\n    value: {\n      nodes: [\n        { id: 'a', key: '首页', des: '节点自定义属性' },\n        { id: 'b', key: '页面1', des: '节点自定义属性' },\n        { id: 'b_1', key: '页面1', des: '节点自定义属性' },\n        { id: 'c', key: '页面2', des: '节点自定义属性' },\n        { id: 'c_1', key: '页面2', des: '节点自定义属性' },\n        { id: 'd', key: '页面3', des: '节点自定义属性' },\n        { id: 'd_1', key: '页面3', des: '节点自定义属性' },\n      ],\n      links: [\n        { source: 'a', target: 'b', value: 100 },\n        { source: 'b', target: 'c', value: 80 },\n        { source: 'b', target: 'd', value: 20 },\n        { source: 'c', target: 'b_1', value: 80 },\n        { source: 'b_1', target: 'c_1', value: 40 },\n        { source: 'b_1', target: 'd_1', value: 40 },\n      ],\n    },\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => ({\n          nodes: data.nodes,\n          links: data.links,\n        }),\n      },\n    ],\n  },\n  tooltip: {\n    nodeItems: [\n      (datum, index, data, column) => {\n        return {\n          content: d.des,\n        };\n        z;\n      },\n    ],\n    linkItems: [\n      (datum, index, data, column) => {\n        return {\n          color: 'red', // 指定 item 的颜色\n          name: '连接线', // 指定 item 的名字\n          value: `${d.source.key}-${d.target.key}`, // 使用 y 通道的值\n          content: '连接线自定义属性',\n        };\n      },\n    ],\n  },\n  layout: {\n    nodeId: (d) => d.id,\n    nodeAlign: 'center',\n    nodePadding: 0.03,\n    iterations: 25,\n  },\n  style: {\n    labelSpacing: 3,\n    labelFontWeight: 'bold',\n    linkFillOpacity: 0.2,\n    linkFill: '#3F96FF',\n  },\n  interaction: {\n    tooltip: {\n      render: (e, { items, title }) => {\n        return `<div>${items[0].content}</div>`;\n      },\n    },\n  },\n});\n",paraId:117,tocIndex:23}]},16997:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(65490);const t=[{value:"fadeIn",paraId:0},{value:" 是渐现动画，影响 ",paraId:0},{value:"opacity",paraId:0},{value:" 透明度属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'fadeIn' });\n",paraId:1,tocIndex:0}]},39546:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(70708);const t=[{value:"fadeOut",paraId:0},{value:" 是渐现动画，影响 ",paraId:0},{value:"opacity",paraId:0},{value:" 透明度属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('exit', { type: 'fadeOut' });\n",paraId:1,tocIndex:0}]},29821:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(20882);const t=[{value:"growInX",paraId:0},{value:" 是容器沿着 x 方向放大的矩阵动画，多用于 G.Group 容器类进行动画。影响图形的 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'growInX' });\n",paraId:1,tocIndex:0}]},96326:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(49564);const t=[{value:"growInY",paraId:0},{value:" 是容器沿着 y 方向放大的矩阵动画，多用于 G.Group 容器类进行动画。影响图形的 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'growInY' });\n",paraId:1,tocIndex:0}]},24690:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(31347);const t=[{value:"morphing",paraId:0},{value:" 图形之间的形变动画，通过 SVG Path 之间的过渡形成的动画。",paraId:0},{value:"chart\n  .area()\n  /* ... */\n  .animate('enter', { type: 'morphing' });\n",paraId:1,tocIndex:0}]},28528:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(98759);const t=[{value:"动画作为可视化的重要组成部分，能显著提高数据可视化的表现力。G2 提供了完善的动画系统，支持图形在进入（enter）、更新（update）和退出（exit）三个阶段的动画效果设置，并且能根据数据特性进行动画编码，实现丰富的交互与过渡效果。",paraId:0},{value:"G2 动画系统的核心特性：",paraId:1},{value:"状态驱动",paraId:2},{value:"：基于图形的三种状态（进入、更新、退出）设置不同的动画效果",paraId:2},{value:"数据驱动",paraId:2},{value:"：可以将数据值映射到动画属性上，如持续时间、延迟时间等",paraId:2},{value:"过渡效果",paraId:2},{value:"：支持形变（morphing）、渐变、缩放等多种过渡效果",paraId:2},{value:"时序控制",paraId:2},{value:"：支持设置动画的顺序、缓动函数、延迟、持续时间等参数",paraId:2},{value:"动画属性可通过 ",paraId:3},{value:"animate",paraId:3},{value:" 配置项设置，既可在图表整体配置中定义，也可针对具体标记设置。",paraId:3},{value:"动画可在图表配置中通过 ",paraId:4,tocIndex:0},{value:"animate",paraId:4,tocIndex:0},{value:" 属性进行设置：",paraId:4,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  },\n  encode: { x: 'date', y: 'close' },\n  animate: { enter: { type: 'pathIn', duration: 1000 } },\n});\nchart.render();\n",paraId:5,tocIndex:0},{value:"可把",paraId:6,tocIndex:0},{value:"type",paraId:6,tocIndex:0},{value:"设置为",paraId:6,tocIndex:0},{value:"null",paraId:6,tocIndex:0},{value:"、",paraId:6,tocIndex:0},{value:"undefined",paraId:6,tocIndex:0},{value:" 或 ",paraId:6,tocIndex:0},{value:"false",paraId:6,tocIndex:0},{value:" 来关闭动画:",paraId:6,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  },\n  encode: { x: 'date', y: 'close' },\n  animate: { enter: { type: 'false' } },\n});\nchart.render();\n",paraId:7,tocIndex:0},{value:"可通过",paraId:8,tocIndex:0},{value:"animate: false",paraId:8,tocIndex:0},{value:"来关闭所有动画:",paraId:8,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  },\n  encode: { x: 'date', y: 'close' },\n  animate: false,\n});\nchart.render();\n",paraId:9,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  animate: {\n    enter: { type: 'fadeIn', duration: 1000 },\n  },\n});\n\nchart.render();\n",paraId:10,tocIndex:1},{value:"标记是通过",paraId:11,tocIndex:2},{value:"mark.animate",paraId:11,tocIndex:2},{value:"指定动画属性的，一共有三个部分的动画可以指定：",paraId:11,tocIndex:2},{value:"enter",paraId:12,tocIndex:2},{value:"- 新增的图形",paraId:12,tocIndex:2},{value:"update",paraId:13,tocIndex:2},{value:"- 更新的图形",paraId:13,tocIndex:2},{value:"exit",paraId:14,tocIndex:2},{value:"- 删除的图形",paraId:14,tocIndex:2},{value:"属性",paraId:15,tocIndex:4},{value:"描述",paraId:15,tocIndex:4},{value:"类型",paraId:15,tocIndex:4},{value:"默认值",paraId:15,tocIndex:4},{value:"必选",paraId:15,tocIndex:4},{value:"enter",paraId:15,tocIndex:4},{value:"入场动画配置",paraId:15,tocIndex:4},{value:"EnterAnimateOptions",paraId:15,tocIndex:4},{value:"-",paraId:15,tocIndex:4},{value:"update",paraId:15,tocIndex:4},{value:"更新动画配置",paraId:15,tocIndex:4},{value:"UpdateAnimateOptions",paraId:15,tocIndex:4},{value:"-",paraId:15,tocIndex:4},{value:"exit",paraId:15,tocIndex:4},{value:"退出动画配置",paraId:15,tocIndex:4},{value:"ExitAnimateOptions",paraId:15,tocIndex:4},{value:"-",paraId:15,tocIndex:4},{value:"enterType",paraId:15,tocIndex:4},{value:"入场动画类型",paraId:15,tocIndex:4},{value:"string",paraId:15,tocIndex:4},{value:"fadeIn",paraId:15,tocIndex:4},{value:"enterDuration",paraId:15,tocIndex:4},{value:"入场动画持续时间（毫秒）",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:"300",paraId:15,tocIndex:4},{value:"enterDelay",paraId:15,tocIndex:4},{value:"入场动画延迟时间（毫秒）",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:"0",paraId:15,tocIndex:4},{value:"enterEasing",paraId:15,tocIndex:4},{value:"入场动画缓动函数",paraId:15,tocIndex:4},{value:"string",paraId:15,tocIndex:4},{value:"ease",paraId:15,tocIndex:4},{value:"enterFill",paraId:15,tocIndex:4},{value:"入场动画非运行状态的展示效果",paraId:15,tocIndex:4},{value:"Fill",paraId:15,tocIndex:4},{value:"both",paraId:15,tocIndex:4},{value:"updateType",paraId:15,tocIndex:4},{value:"更新动画类型",paraId:15,tocIndex:4},{value:"string",paraId:15,tocIndex:4},{value:"morphing",paraId:15,tocIndex:4},{value:"updateDuration",paraId:15,tocIndex:4},{value:"更新动画持续时间（毫秒）",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:"300",paraId:15,tocIndex:4},{value:"updateDelay",paraId:15,tocIndex:4},{value:"更新动画延迟时间（毫秒）",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:"0",paraId:15,tocIndex:4},{value:"updateEasing",paraId:15,tocIndex:4},{value:"更新动画缓动函数",paraId:15,tocIndex:4},{value:"string",paraId:15,tocIndex:4},{value:"ease",paraId:15,tocIndex:4},{value:"updateFill",paraId:15,tocIndex:4},{value:"更新动画非运行状态的展示效果",paraId:15,tocIndex:4},{value:"Fill",paraId:15,tocIndex:4},{value:"both",paraId:15,tocIndex:4},{value:"exitType",paraId:15,tocIndex:4},{value:"退出动画类型",paraId:15,tocIndex:4},{value:"string",paraId:15,tocIndex:4},{value:"fadeOut",paraId:15,tocIndex:4},{value:"exitDuration",paraId:15,tocIndex:4},{value:"退出动画持续时间（毫秒）",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:"300",paraId:15,tocIndex:4},{value:"exitDelay",paraId:15,tocIndex:4},{value:"退出动画延迟时间（毫秒）",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:"0",paraId:15,tocIndex:4},{value:"exitEasing",paraId:15,tocIndex:4},{value:"退出动画缓动函数",paraId:15,tocIndex:4},{value:"string",paraId:15,tocIndex:4},{value:"ease",paraId:15,tocIndex:4},{value:"exitFill",paraId:15,tocIndex:4},{value:"退出动画非运行状态的展示效果",paraId:15,tocIndex:4},{value:"Fill",paraId:15,tocIndex:4},{value:"both",paraId:15,tocIndex:4},{value:"复杂类型说明：",paraId:16,tocIndex:4},{value:"EnterAnimateOptions",paraId:17,tocIndex:4},{value:"：入场动画配置对象，包含 type、duration、delay、easing、fill 属性",paraId:17,tocIndex:4},{value:"UpdateAnimateOptions",paraId:17,tocIndex:4},{value:"：更新动画配置对象，包含 type、duration、delay、easing、fill 属性",paraId:17,tocIndex:4},{value:"ExitAnimateOptions",paraId:17,tocIndex:4},{value:"：退出动画配置对象，包含 type、duration、delay、easing、fill 属性",paraId:17,tocIndex:4},{value:"Fill",paraId:17,tocIndex:4},{value:"：动画填充模式，可选值为 ",paraId:17,tocIndex:4},{value:"'auto'",paraId:17,tocIndex:4},{value:"、",paraId:17,tocIndex:4},{value:"'none'",paraId:17,tocIndex:4},{value:"、",paraId:17,tocIndex:4},{value:"'forwards'",paraId:17,tocIndex:4},{value:"、",paraId:17,tocIndex:4},{value:"'backwards'",paraId:17,tocIndex:4},{value:"、",paraId:17,tocIndex:4},{value:"'both'",paraId:17,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/deaths.json',\n  },\n  encode: { x: 'Month', y: 'Death', color: 'Type' },\n  transform: [\n    { type: 'stackY' },\n    { type: 'stackEnter', groupBy: ['color', 'x'], duration: 2000 },\n  ],\n  scale: { y: { type: 'sqrt' } },\n  coordinate: { type: 'polar' },\n  animate: { enter: { type: 'waveIn' } },\n  axis: { y: false },\n});\n\nchart.render();\n",paraId:18,tocIndex:4},{value:"动画类型 ",paraId:19,tocIndex:5},{value:"Type",paraId:19,tocIndex:5},{value:" 决定了动画的视觉效果。G2 提供了多种内置动画类型，也可设置为 ",paraId:19,tocIndex:5},{value:"null",paraId:19,tocIndex:5},{value:"、",paraId:19,tocIndex:5},{value:"undefined",paraId:19,tocIndex:5},{value:" 或 ",paraId:19,tocIndex:5},{value:"false",paraId:19,tocIndex:5},{value:" 来关闭动画。常见的动画类型包括：",paraId:19,tocIndex:5},{value:"动画类型",paraId:20,tocIndex:5},{value:"作用",paraId:20,tocIndex:5},{value:"fadeIn",paraId:20,tocIndex:5},{value:"淡入效果，图形从透明到可见",paraId:20,tocIndex:5},{value:"growInX",paraId:20,tocIndex:5},{value:"沿 X 轴方向生长效果",paraId:20,tocIndex:5},{value:"growInY",paraId:20,tocIndex:5},{value:"沿 Y 轴方向生长效果",paraId:20,tocIndex:5},{value:"scaleInX",paraId:20,tocIndex:5},{value:"沿 X 轴缩放进入效果",paraId:20,tocIndex:5},{value:"scaleInY",paraId:20,tocIndex:5},{value:"沿 Y 轴缩放进入效果",paraId:20,tocIndex:5},{value:"zoomIn",paraId:20,tocIndex:5},{value:"整体缩放进入效果",paraId:20,tocIndex:5},{value:"pathIn",paraId:20,tocIndex:5},{value:"沿路径进入效果",paraId:20,tocIndex:5},{value:"waveIn",paraId:20,tocIndex:5},{value:"波浪形进入效果",paraId:20,tocIndex:5},{value:"morphing",paraId:20,tocIndex:5},{value:"形变效果，平滑过渡图形变化",paraId:20,tocIndex:5},{value:"fadeOut",paraId:20,tocIndex:5},{value:"淡出效果，图形从可见到透明",paraId:20,tocIndex:5},{value:"scaleOutX",paraId:20,tocIndex:5},{value:"沿 X 轴缩放退出效果",paraId:20,tocIndex:5},{value:"scaleOutY",paraId:20,tocIndex:5},{value:"沿 Y 轴缩放退出效果",paraId:20,tocIndex:5},{value:"zoomOut",paraId:20,tocIndex:5},{value:"整体缩放退出效果",paraId:20,tocIndex:5},{value:"缓动函数控制动画过程中视觉属性变化的插值方式。G2 支持以下内置缓动函数（来自 ",paraId:21,tocIndex:6},{value:"easings.net",paraId:21,tocIndex:6},{value:"）：",paraId:21,tocIndex:6},{value:"constant",paraId:22,tocIndex:6},{value:"accelerate",paraId:22,tocIndex:6},{value:"decelerate",paraId:22,tocIndex:6},{value:"accelerate-decelerate",paraId:22,tocIndex:6},{value:"decelerate-accelerate",paraId:22,tocIndex:6},{value:"linear",paraId:22,tocIndex:6},{value:"ease-in / in",paraId:22,tocIndex:6},{value:"ease-out / out",paraId:22,tocIndex:6},{value:"ease-in-out / in-out",paraId:22,tocIndex:6},{value:"ease-out-in / out-in",paraId:22,tocIndex:6},{value:"ease",paraId:22,tocIndex:6},{value:"in-sine",paraId:22,tocIndex:6},{value:"out-sine",paraId:22,tocIndex:6},{value:"in-out-sine",paraId:22,tocIndex:6},{value:"out-in-sine",paraId:22,tocIndex:6},{value:"steps",paraId:22,tocIndex:6},{value:"in-quad",paraId:22,tocIndex:6},{value:"out-quad",paraId:22,tocIndex:6},{value:"in-out-quad",paraId:22,tocIndex:6},{value:"out-in-quad",paraId:22,tocIndex:6},{value:"step-start",paraId:22,tocIndex:6},{value:"in-cubic",paraId:22,tocIndex:6},{value:"out-cubic",paraId:22,tocIndex:6},{value:"in-out-cubic",paraId:22,tocIndex:6},{value:"out-in-cubic",paraId:22,tocIndex:6},{value:"step-end",paraId:22,tocIndex:6},{value:"in-quart",paraId:22,tocIndex:6},{value:"out-quart",paraId:22,tocIndex:6},{value:"in-out-quart",paraId:22,tocIndex:6},{value:"out-in-quart",paraId:22,tocIndex:6},{value:"in-quint",paraId:22,tocIndex:6},{value:"out-quint",paraId:22,tocIndex:6},{value:"in-out-quint",paraId:22,tocIndex:6},{value:"out-in-quint",paraId:22,tocIndex:6},{value:"in-expo",paraId:22,tocIndex:6},{value:"out-expo",paraId:22,tocIndex:6},{value:"in-out-expo",paraId:22,tocIndex:6},{value:"out-in-expo",paraId:22,tocIndex:6},{value:"in-circ",paraId:22,tocIndex:6},{value:"out-circ",paraId:22,tocIndex:6},{value:"in-out-circ",paraId:22,tocIndex:6},{value:"out-in-circ",paraId:22,tocIndex:6},{value:"in-back",paraId:22,tocIndex:6},{value:"out-back",paraId:22,tocIndex:6},{value:"in-out-back",paraId:22,tocIndex:6},{value:"out-in-back",paraId:22,tocIndex:6},{value:"in-bounce",paraId:22,tocIndex:6},{value:"out-bounce",paraId:22,tocIndex:6},{value:"in-out-bounce",paraId:22,tocIndex:6},{value:"out-in-bounce",paraId:22,tocIndex:6},{value:"in-elastic",paraId:22,tocIndex:6},{value:"out-elastic",paraId:22,tocIndex:6},{value:"in-out-elastic",paraId:22,tocIndex:6},{value:"out-in-elastic",paraId:22,tocIndex:6},{value:"spring / spring-in",paraId:22,tocIndex:6},{value:"spring-out",paraId:22,tocIndex:6},{value:"spring-in-out",paraId:22,tocIndex:6},{value:"spring-out-in",paraId:22,tocIndex:6},{value:"动画填充属性规定了图形在动画非运行状态（如开始前、结束后）时的展示效果：",paraId:23,tocIndex:7},{value:"auto",paraId:24,tocIndex:7},{value:"/",paraId:24,tocIndex:7},{value:"none",paraId:24,tocIndex:7},{value:" - 默认值，动画在第一帧开始前和最后一帧结束后不影响图形展示效果",paraId:24,tocIndex:7},{value:"forwards",paraId:24,tocIndex:7},{value:" - 动画完成后停住，不恢复到初始状态",paraId:24,tocIndex:7},{value:"backwards",paraId:24,tocIndex:7},{value:" - 动画开始前应用第一帧效果",paraId:24,tocIndex:7},{value:"both",paraId:24,tocIndex:7},{value:" - 同时应用 ",paraId:24,tocIndex:7},{value:"forwards",paraId:24,tocIndex:7},{value:" 和 ",paraId:24,tocIndex:7},{value:"backwards",paraId:24,tocIndex:7},{value:" 的效果",paraId:24,tocIndex:7},{value:"G2 支持将数据值映射到动画属性上，使动画也具备数据可视化的意义。通过 ",paraId:25,tocIndex:8},{value:"encode",paraId:25,tocIndex:8},{value:" 可以将数据字段映射到动画属性，如 ",paraId:25,tocIndex:8},{value:"enterDuration",paraId:25,tocIndex:8},{value:"、",paraId:25,tocIndex:8},{value:"enterDelay",paraId:25,tocIndex:8},{value:" 等。",paraId:25,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { name: 'event planning', startTime: 1, endTime: 4 },\n    { name: 'layout logistics', startTime: 3, endTime: 13 },\n    { name: 'select vendors', startTime: 5, endTime: 8 },\n    { name: 'hire venue', startTime: 9, endTime: 13 },\n    { name: 'hire caterer', startTime: 10, endTime: 14 },\n    { name: 'hire event decorators', startTime: 12, endTime: 17 },\n    { name: 'rehearsal', startTime: 14, endTime: 16 },\n    { name: 'event celebration', startTime: 17, endTime: 18 },\n  ],\n  encode: {\n    x: 'name',\n    y: ['endTime', 'startTime'],\n    color: 'name',\n    enterDuration: (d) => (d.endTime - d.startTime) * 300,\n    enterDelay: (d) => d.startTime * 100,\n  },\n  coordinate: { transform: [{ type: 'transpose' }] },\n});\n\nchart.render();\n",paraId:26,tocIndex:8},{value:"G2 提供了 ",paraId:27,tocIndex:9},{value:"stackEnter",paraId:27,tocIndex:9},{value:" 标记转换来实现分组动画，使图形按照特定规则依次出现。该转换会先对图形进行分组，然后将它们的出现时间和持续时间在空间上进行堆叠。",paraId:27,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/doughnut-purchases.json',\n  },\n  children: [\n    {\n      type: 'line',\n      encode: { x: 'year', y: 'count', color: 'year', shape: 'smooth' },\n      scale: { y: { zero: true, nice: true } },\n      style: { gradient: 'x', gradientColor: 'start' },\n      animate: { enter: { type: 'pathIn', duration: 3000 } },\n      axis: { y: { labelFormatter: '~s' } },\n    },\n    {\n      type: 'point',\n      encode: { x: 'year', y: 'count', color: 'year', shape: 'point' },\n      transform: [{ type: 'stackEnter' }],\n      animate: { enter: { duration: 300 } },\n    },\n    {\n      type: 'text',\n      encode: { x: 'year', y: 'count', text: 'year' },\n      transform: [{ type: 'stackEnter' }],\n      style: { lineWidth: 5, stroke: '#fff', textAlign: 'center', dy: -8 },\n      animate: { enter: { duration: 300 } },\n    },\n  ],\n});\n\nchart.render();\n",paraId:28,tocIndex:9},{value:"G2 提供了制作关键帧动画的能力，可以在不同视图间平滑过渡，展示数据变化。通过 ",paraId:29,tocIndex:10},{value:"timingKeyframe",paraId:29,tocIndex:10},{value:" 创建时间容器，使用 ",paraId:29,tocIndex:10},{value:"key",paraId:29,tocIndex:10},{value:" 和 ",paraId:29,tocIndex:10},{value:"groupKey",paraId:29,tocIndex:10},{value:" 通道指定元素之间的对应关系。",paraId:29,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'timingKeyframe',\n  autoFit: true,\n  direction: 'alternate',\n  iterationCount: 2,\n  children: [\n    {\n      type: 'interval',\n      data: [\n        { gender: 'female', height: 161.2, weight: 51.6 },\n        { gender: 'female', height: 167.5, weight: 59 },\n        { gender: 'female', height: 159.5, weight: 49.2 },\n        { gender: 'female', height: 157, weight: 63 },\n        { gender: 'female', height: 155.8, weight: 53.6 },\n        { gender: 'female', height: 170, weight: 59 },\n        { gender: 'man', height: 159.1, weight: 47.6 },\n        { gender: 'man', height: 166, weight: 69.8 },\n        { gender: 'man', height: 176.2, weight: 66.8 },\n        { gender: 'man', height: 160.2, weight: 75.2 },\n        { gender: 'man', height: 172.5, weight: 55.2 },\n      ],\n      encode: { x: 'gender', y: 'weight', color: 'gender', key: 'gender' },\n      transform: [{ type: 'groupX', y: 'mean' }],\n    },\n    {\n      type: 'point',\n      data: [\n        { gender: 'female', height: 161.2, weight: 51.6 },\n        { gender: 'female', height: 167.5, weight: 59 },\n        { gender: 'female', height: 159.5, weight: 49.2 },\n        { gender: 'female', height: 157, weight: 63 },\n        { gender: 'female', height: 155.8, weight: 53.6 },\n        { gender: 'female', height: 170, weight: 59 },\n        { gender: 'man', height: 159.1, weight: 47.6 },\n        { gender: 'man', height: 166, weight: 69.8 },\n        { gender: 'man', height: 176.2, weight: 66.8 },\n        { gender: 'man', height: 160.2, weight: 75.2 },\n        { gender: 'man', height: 172.5, weight: 55.2 },\n      ],\n      encode: {\n        x: 'height',\n        y: 'weight',\n        color: 'gender',\n        shape: 'point',\n        groupKey: 'gender',\n      },\n    },\n  ],\n  duration: 1000,\n});\n\nchart.render();\n",paraId:30,tocIndex:10},{value:"Lottie",paraId:31,tocIndex:11},{value:"能极大丰富动画的描述能力。",paraId:31,tocIndex:11},{value:"具体实现可以参考：",paraId:32,tocIndex:11},{value:"lottie",paraId:32,tocIndex:11},{value:"。",paraId:32,tocIndex:11},{value:"时序动画（timingSequence）还在开发中，敬请期待。",paraId:33,tocIndex:12}]},85495:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(97206);const t=[{value:"pathIn",paraId:0},{value:" 是 SVG Path 路径入场动画。通过影响 ",paraId:0},{value:"lineDash",paraId:0},{value:" 属性来实现。",paraId:0},{value:"chart\n  .line()\n  /* ... */\n  .animate('enter', { type: 'pathIn' });\n",paraId:1,tocIndex:0}]},91096:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(9365);const t=[{value:"scaleInX",paraId:0},{value:" 单个图形沿着 x 方向的生长动画。影响 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'scaleInX' });\n",paraId:1,tocIndex:0}]},76903:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(41704);const t=[{value:"scaleInY",paraId:0},{value:" 单个图形沿着 y 方向的生长动画。影响 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'scaleInY' });\n",paraId:1,tocIndex:0}]},85071:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(19705);const t=[{value:"scaleOutX",paraId:0},{value:" 单个图形沿着 x 方向的消失动画。影响 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('exit', { type: 'scaleOutX' });\n",paraId:1,tocIndex:0}]},87333:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(36552);const t=[{value:"scaleOutY",paraId:0},{value:" 单个图形沿着 y 方向的消失动画。影响 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('exit', { type: 'scaleOutY' });\n",paraId:1,tocIndex:0}]},30531:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(35297);const t=[{value:"waveIn",paraId:0},{value:" 划入入场动画效果，不同坐标系下效果不同。在直角坐标系下，影响 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性，在 polar 坐标系下，影响圆弧的 Path 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'waveIn' });\n",paraId:1,tocIndex:0}]},95370:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(36197);const t=[{value:"zoomIn",paraId:0},{value:" 沿着图形中心点的放大动画。影响 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'zoomIn' });\n",paraId:1,tocIndex:0}]},6057:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(62747);const t=[{value:"zoomOut",paraId:0},{value:" 沿着图形中心点的缩小动画。影响 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('exit', { type: 'zoomOut' });\n",paraId:1,tocIndex:0}]},6888:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(88351);const t=[{value:"为了更好地使用 G2 进行数据可视化，我们需要了解 G2 图表的组成以及相关概念。",paraId:0},{value:"下面是一个基本的 G2 图表，图表由 ",paraId:1,tocIndex:0},{value:"组件（Component）",paraId:1,tocIndex:0},{value:" 和 ",paraId:1,tocIndex:0},{value:"标记（Mark）",paraId:1,tocIndex:0},{value:" 组成。",paraId:1,tocIndex:0},{value:"需要特别注意的是，G2 5.0 中不再需要单独配置标注（Annotation），标注也是一种标记，或者说某些标记也可以用来做标注，比如 Text，Image， Line 等标记。",paraId:2,tocIndex:0},{value:"用于一句话概要说明图表要展示的数据，图表的标题是比较常用的组件，支持标题和副标题，以及他们的样式和位置设置。",paraId:3,tocIndex:1},{value:"查看 ",paraId:4,tocIndex:1},{value:"Title",paraId:5,tocIndex:1},{value:" 教程获取更多信息。",paraId:4,tocIndex:1},{value:"绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。",paraId:6,tocIndex:2},{value:"每个坐标轴由坐标轴线（line）、刻度（tick）、刻度值（label）、标题（title）以及网格线（grid）组成。",paraId:7,tocIndex:2},{value:"查看 ",paraId:8,tocIndex:2},{value:"Axis",paraId:9,tocIndex:2},{value:" 教程获取更多信息。",paraId:8,tocIndex:2},{value:"绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。",paraId:10,tocIndex:3},{value:"查看 ",paraId:11,tocIndex:3},{value:"Legend",paraId:12,tocIndex:3},{value:" 教程获取更多信息。",paraId:11,tocIndex:3},{value:"滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。",paraId:13,tocIndex:4},{value:"内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。",paraId:14,tocIndex:4},{value:"查看 ",paraId:15,tocIndex:4},{value:"Scrollbar",paraId:16,tocIndex:4},{value:" 教程获取更多信息。",paraId:15,tocIndex:4},{value:"缩略轴（slider）是一种辅助看数据的组件，它将大量数据浓缩到一个轴上，既可以缩小宏观看数据全貌，又可以放大微观看数据的片段，同时还可以拖拽观察数据在一定区间内的演变。",paraId:17,tocIndex:5},{value:"缩略轴是值域数据的浓缩，它跟位置通道 x, y 对应的比例尺的类型息息相关。一般来说时间类型上使用缩略轴的频率高，连续轴使用缩略轴频次低、分类轴几乎不会使用到缩略轴。",paraId:18,tocIndex:5},{value:"查看 ",paraId:19,tocIndex:5},{value:"Slider",paraId:20,tocIndex:5},{value:" 教程获取更多信息。",paraId:19,tocIndex:5},{value:"当鼠标悬停在某个点上时，会以提示框的形式显示当前点对应的数据的信息，比如该点的值，数据单位等。数据提示框内提示的信息还可以通过格式化函数动态指定。",paraId:21,tocIndex:6},{value:"查看 ",paraId:22,tocIndex:6},{value:"Tooltip",paraId:23,tocIndex:6},{value:" 教程获取更多信息。",paraId:22,tocIndex:6},{value:"G2 中数据标签（Label） 是给图表添加标注的手段之一。",paraId:24,tocIndex:7},{value:"查看 ",paraId:25,tocIndex:7},{value:"Label",paraId:26,tocIndex:7},{value:" 教程获取更多信息。",paraId:25,tocIndex:7},{value:"不管是单视图图表还是多视图图表，布局信息（图表宽高等）都可以在选项顶层进行指定。",paraId:27,tocIndex:9},{value:"// 标记层级\nconst markLevel = {\n  type: 'interval',\n  width: 640,\n  height: 180,\n  margin: 10,\n};\n// 视图层级\nconst viewLevel = {\n  type: 'view',\n  width: 640,\n  height: 180,\n  margin: 10,\n  // ...\n};\n// 多视图图表\nconst compositionLevel = {\n  type: 'spaceFlex',\n  width: 640,\n  height: 180,\n  margin: 10,\n};\n",paraId:28,tocIndex:9},{value:"同时，也可以在初始化 ",paraId:29,tocIndex:9},{value:"Chart",paraId:29,tocIndex:9},{value:" 对象的时候指定：",paraId:29,tocIndex:9},{value:"const chart = new Chart({\n  type: 'view',\n  width: 640,\n  height: 180,\n  margin: 10,\n  // ...\n});\n",paraId:30,tocIndex:9},{value:"也可以通过 ",paraId:31,tocIndex:9},{value:"node.attr",paraId:31,tocIndex:9},{value:" 指定：",paraId:31,tocIndex:9},{value:"chart.interval().attr('padding', 10).attr('margin', 20);\n\nchart.view().attr('padding', 10).attr('margin', 20);\n\nchart.spaceFlex().attr('padding', 10).attr('margin', 20);\n",paraId:32,tocIndex:9},{value:"在 G2 中，",paraId:33,tocIndex:10},{value:"视图模型",paraId:33,tocIndex:10},{value:" 用于定义图表视图的划分方式，根据划分生成的不同区域可以绘制不同的内容，并通过相应选项进行配置。可以将视图简单理解为一个独立的图表。G2 的视图模型结构如下：",paraId:33,tocIndex:10},{value:"视图区域（View Area）",paraId:34,tocIndex:10},{value:"：表示图表的整体视图区域。在设置图表的宽度和高度时，生效的范围即为视图区域的宽度和高度。视图区域与绘制区域之间的部分称为 ",paraId:34,tocIndex:10},{value:"外边距范围",paraId:34,tocIndex:10},{value:"，该区域的大小可通过配置 margin 属性进行调整，通常用于设置固定组件（如坐标轴、图例等）与边界的距离。",paraId:34,tocIndex:10},{value:"绘制区域（Plot Area）",paraId:35,tocIndex:10},{value:"：表示图表的绘制区域。绘制区域与主区域之间的部分称为 ",paraId:35,tocIndex:10},{value:"内边距范围",paraId:35,tocIndex:10},{value:"，该区域的大小可通过配置 padding 属性进行调整，通常用于绘制图表组件，例如",paraId:35,tocIndex:10},{value:"title",paraId:35,tocIndex:10},{value:"、",paraId:35,tocIndex:10},{value:"legend",paraId:35,tocIndex:10},{value:"、",paraId:35,tocIndex:10},{value:"axis",paraId:35,tocIndex:10},{value:"等。",paraId:35,tocIndex:10},{value:"主区域（Main Area）",paraId:36,tocIndex:10},{value:"：表示图表内容绘制的主要区域。主区域与内容区域之间的部分称为 ",paraId:36,tocIndex:10},{value:"呼吸范围",paraId:36,tocIndex:10},{value:"，该区域的大小可通过配置 inset 属性进行调整，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。",paraId:36,tocIndex:10},{value:"内容区域（Content Area）",paraId:37,tocIndex:10},{value:"：表示标记绘制的内容区域。主要用于绘制标记（图形元素）。",paraId:37,tocIndex:10},{value:"其中内容区域的大小由以下的公式得到：",paraId:38,tocIndex:10},{value:"const contentWidth =\n  width -\n  paddingLeft -\n  paddingRight -\n  marginLeft -\n  marginRight -\n  insetLeft -\n  insetRight;\n\nconst contentHeight =\n  height -\n  paddingTop -\n  paddingBottom -\n  marginTop -\n  marginBottom -\n  insetTop -\n  insetBottom;\n",paraId:39,tocIndex:10},{value:"G2 在内部自己实现了一套布局算法，负责协调外边距（ ",paraId:40,tocIndex:11},{value:"margin",paraId:40,tocIndex:11},{value:" ）、内边距（ ",paraId:40,tocIndex:11},{value:"padding",paraId:40,tocIndex:11},{value:" ）、呼吸范围宽度（ ",paraId:40,tocIndex:11},{value:"inset",paraId:40,tocIndex:11},{value:" ）等布局参数的计算，确保坐标轴、图例等组件在图表容器中合理布局。",paraId:40,tocIndex:11},{value:"也许你曾经有过疑惑，为什么在配置里手动声明 ",paraId:41,tocIndex:12},{value:"padding",paraId:41,tocIndex:12},{value:" 为 ",paraId:41,tocIndex:12},{value:"0",paraId:41,tocIndex:12},{value:"， 图表的 x 轴显示不全了。要回答这个问题，需要深入探究 G2 布局算法里动态计算的部分。",paraId:41,tocIndex:12},{value:"在 G2 的布局算法中，首先会获取所有传入的 ",paraId:42,tocIndex:12},{value:"padding",paraId:42,tocIndex:12},{value:"、",paraId:42,tocIndex:12},{value:"margin",paraId:42,tocIndex:12},{value:"、",paraId:42,tocIndex:12},{value:"inset",paraId:42,tocIndex:12},{value:"属性，如果没有设置，",paraId:42,tocIndex:12},{value:"padding",paraId:42,tocIndex:12},{value:"（包括 ",paraId:42,tocIndex:12},{value:"paddingTop",paraId:42,tocIndex:12},{value:"、",paraId:42,tocIndex:12},{value:"paddingLeft",paraId:42,tocIndex:12},{value:" 等）会被默认赋值为 ",paraId:42,tocIndex:12},{value:"auto",paraId:42,tocIndex:12},{value:"，",paraId:42,tocIndex:12},{value:"margin",paraId:42,tocIndex:12},{value:" 会被默认赋值为 ",paraId:42,tocIndex:12},{value:"16",paraId:42,tocIndex:12},{value:"，而 ",paraId:42,tocIndex:12},{value:"inset",paraId:42,tocIndex:12},{value:" 会被默认赋值为 ",paraId:42,tocIndex:12},{value:"0",paraId:42,tocIndex:12},{value:"。接下来将图表组件按照位置进行分组，方便后续布局计算。",paraId:42,tocIndex:12},{value:"以 ",paraId:43,tocIndex:12},{value:"position = 'top'",paraId:43,tocIndex:12},{value:" 为例，如果配置了明确的 ",paraId:43,tocIndex:12},{value:"paddingTop",paraId:43,tocIndex:12},{value:" 时，不会触发动态计算 ",paraId:43,tocIndex:12},{value:"paddingTop",paraId:43,tocIndex:12},{value:" 的逻辑，此时对于未定义 ",paraId:43,tocIndex:12},{value:"size",paraId:43,tocIndex:12},{value:" 的组件，使用内部定义的默认尺寸 ",paraId:43,tocIndex:12},{value:"defaultSize",paraId:43,tocIndex:12},{value:"；对于分组（group）组件，递归执行上述操作，然后取最大的子组件尺寸作为父组件的尺寸；如果组件中包括坐标轴（axis）组件且未显式设置 ",paraId:43,tocIndex:12},{value:"labelAutoHide",paraId:43,tocIndex:12},{value:"，设置 ",paraId:43,tocIndex:12},{value:"labelAutoHide",paraId:43,tocIndex:12},{value:" 为 true，自动隐藏坐标轴标签以避免溢出。",paraId:43,tocIndex:12},{value:"如果没有配置 ",paraId:44,tocIndex:12},{value:"paddingTop",paraId:44,tocIndex:12},{value:"，则会触发动态计算的逻辑，根据组件的实际尺寸累加边距（",paraId:44,tocIndex:12},{value:"crossPadding",paraId:44,tocIndex:12},{value:" 默认为 ",paraId:44,tocIndex:12},{value:"12",paraId:44,tocIndex:12},{value:"），得出最后的实际",paraId:44,tocIndex:12},{value:"paddingTop",paraId:44,tocIndex:12},{value:" 大小。",paraId:44,tocIndex:12},{value:"要回答最初的问题：在 G2 中，内边距范围（ ",paraId:45,tocIndex:12},{value:"padding",paraId:45,tocIndex:12},{value:" ）用于为图表组件预留展示空间。如果手动将 ",paraId:45,tocIndex:12},{value:"padding",paraId:45,tocIndex:12},{value:" 设置为 ",paraId:45,tocIndex:12},{value:"0",paraId:45,tocIndex:12},{value:" ，会关闭内部的自适应计算逻辑，从而可能导致图表组件显示不完整。因此，当需要个性化配置时，应确保为组件预留足够的空间；否则，建议使用默认的自适应逻辑来避免显示问题。",paraId:45,tocIndex:12},{value:"G2 内部对于图表显示区域设置了一个兜底机制，当视图中存在标记元素（如",paraId:46,tocIndex:13},{value:"line",paraId:46,tocIndex:13},{value:"、",paraId:46,tocIndex:13},{value:"interval",paraId:46,tocIndex:13},{value:"等），触发防挤压机制，来确保图表的主区域（Main Area）最小占比 ",paraId:46,tocIndex:13},{value:"1/4",paraId:46,tocIndex:13},{value:" 。以水平方向为例，假设绘制区域的大小为 ",paraId:46,tocIndex:13},{value:"plotWidth",paraId:46,tocIndex:13},{value:"，如果 ",paraId:46,tocIndex:13},{value:"plotWidth",paraId:46,tocIndex:13},{value:" 减去动态计算后的左内边距 ",paraId:46,tocIndex:13},{value:"pl0",paraId:46,tocIndex:13},{value:" 和 右内边距 ",paraId:46,tocIndex:13},{value:"pr0",paraId:46,tocIndex:13},{value:" 后小于 ",paraId:46,tocIndex:13},{value:"plotWidth * 1/4",paraId:46,tocIndex:13},{value:" 时，会优先保证主区域大小为 ",paraId:46,tocIndex:13},{value:"plotWidth * 1/4",paraId:46,tocIndex:13},{value:"，将内边距等比例缩小，当用户指定 ",paraId:46,tocIndex:13},{value:"paddingLeft",paraId:46,tocIndex:13},{value:" 时会动态计算 ",paraId:46,tocIndex:13},{value:"paddingRight",paraId:46,tocIndex:13},{value:" 的大小，按比例分配剩余空间，尽量避免左右外边距同时设置为固定值，可能会导致自适应算法失效。垂直方向的计算规则同理。",paraId:46,tocIndex:13},{value:"属性",paraId:47,tocIndex:14},{value:"描述",paraId:47,tocIndex:14},{value:"类型",paraId:47,tocIndex:14},{value:"默认值",paraId:47,tocIndex:14},{value:"必选",paraId:47,tocIndex:14},{value:"autoFit",paraId:47,tocIndex:14},{value:"开启后图表的宽高和容器保持一致",paraId:47,tocIndex:14},{value:"boolean",paraId:47,tocIndex:14},{value:"false",paraId:47,tocIndex:14},{value:"width",paraId:47,tocIndex:14},{value:"设置图表的宽度",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"640",paraId:47,tocIndex:14},{value:"height",paraId:47,tocIndex:14},{value:"设置图表的高度",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"480",paraId:47,tocIndex:14},{value:"viewStyle",paraId:47,tocIndex:14},{value:"设置图表的视图样式",paraId:47,tocIndex:14},{value:"viewStyle",paraId:48,tocIndex:14},{value:"详见 ",paraId:47,tocIndex:14},{value:"viewStyle",paraId:49,tocIndex:14},{value:"margin",paraId:47,tocIndex:14},{value:"设置外边距四个方向的值，优先级别比分别设置低",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"16",paraId:47,tocIndex:14},{value:"marginLeft",paraId:47,tocIndex:14},{value:"设置左外边距值",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"16",paraId:47,tocIndex:14},{value:"marginTop",paraId:47,tocIndex:14},{value:"设置上外边距值",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"16",paraId:47,tocIndex:14},{value:"marginRight",paraId:47,tocIndex:14},{value:"设置右外边距值",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"16",paraId:47,tocIndex:14},{value:"marginBottom",paraId:47,tocIndex:14},{value:"设置下外边距值",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"16",paraId:47,tocIndex:14},{value:"padding",paraId:47,tocIndex:14},{value:"设置内边距四个方向的值，优先级别比分别设置低",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"auto",paraId:47,tocIndex:14},{value:"paddingLeft",paraId:47,tocIndex:14},{value:"设置左内边距值",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"auto",paraId:47,tocIndex:14},{value:"paddingTop",paraId:47,tocIndex:14},{value:"设置上内边距值",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"auto",paraId:47,tocIndex:14},{value:"paddingRight",paraId:47,tocIndex:14},{value:"设置右内边距值",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"auto",paraId:47,tocIndex:14},{value:"paddingBottom",paraId:47,tocIndex:14},{value:"设置下内边距值",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"auto",paraId:47,tocIndex:14},{value:"inset",paraId:47,tocIndex:14},{value:"设置呼吸范围四个方向的值，优先级别比分别设置低",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"0",paraId:47,tocIndex:14},{value:"insetLeft",paraId:47,tocIndex:14},{value:"设置左呼吸范围宽度",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"0",paraId:47,tocIndex:14},{value:"insetTop",paraId:47,tocIndex:14},{value:"设置上呼吸范围宽度",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"0",paraId:47,tocIndex:14},{value:"insetRight",paraId:47,tocIndex:14},{value:"设置右呼吸范围宽度",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"0",paraId:47,tocIndex:14},{value:"insetBottom",paraId:47,tocIndex:14},{value:"设置下呼吸范围宽度",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"0",paraId:47,tocIndex:14},{value:"尝试一下：",paraId:50,tocIndex:14},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'point',\n  height: 600,\n  width: 700,\n  margin: 100,\n  padding: 60,\n  paddingLeft: 100, // 单独设置paddingLeft的优先级比padding高\n  insetLeft: 30,\n  insetRight: 30,\n\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/commits.json',\n  },\n  encode: {\n    x: (d) => new Date(d.time).getUTCHours(),\n    y: (d) => new Date(d.time).getUTCDay(),\n    size: 'count',\n    shape: 'point',\n  },\n  transform: [{ type: 'group', size: 'sum' }, { type: 'sortY' }],\n  scale: { y: { type: 'point' } },\n  style: { shape: 'point', fill: '#76b7b2' },\n  axis: {\n    x: { title: 'time (hours)', tickCount: 24 },\n    y: { title: 'time (day)', grid: true },\n  },\n  legend: false,\n  viewStyle: {\n    viewFill: '#DCEEFE',\n    plotFill: '#A2D4F6',\n    mainFill: '#FFC6A1',\n    contentFill: '#FF8E72',\n  },\n});\n\nchart.render();\n",paraId:51,tocIndex:14},{value:"如果希望图表的宽高和容器保持一致，那么可以将 ",paraId:52,tocIndex:15},{value:"options.autoFit",paraId:52,tocIndex:15},{value:" 设置为 ",paraId:52,tocIndex:15},{value:"true",paraId:52,tocIndex:15},{value:"，其优先级比指定宽高低。",paraId:52,tocIndex:15},{value:"({ type: 'view', autoFit: true });\n",paraId:53,tocIndex:15},{value:"配置图表的视图样式。",paraId:54,tocIndex:16},{value:"属性",paraId:55,tocIndex:16},{value:"描述",paraId:55,tocIndex:16},{value:"类型",paraId:55,tocIndex:16},{value:"默认值",paraId:55,tocIndex:16},{value:"必选",paraId:55,tocIndex:16},{value:"view",paraId:55,tocIndex:16},{value:"配置视图区域的样式",paraId:55,tocIndex:16},{value:"view",paraId:56,tocIndex:16},{value:"详见 ",paraId:55,tocIndex:16},{value:"view",paraId:57,tocIndex:16},{value:"plot",paraId:55,tocIndex:16},{value:"配置绘制区域的样式",paraId:55,tocIndex:16},{value:"plot",paraId:58,tocIndex:16},{value:"详见 ",paraId:55,tocIndex:16},{value:"plot",paraId:59,tocIndex:16},{value:"main",paraId:55,tocIndex:16},{value:"配置主区域的样式",paraId:55,tocIndex:16},{value:"main",paraId:60,tocIndex:16},{value:"详见 ",paraId:55,tocIndex:16},{value:"main",paraId:61,tocIndex:16},{value:"content",paraId:55,tocIndex:16},{value:"配置内容区域的样式",paraId:55,tocIndex:16},{value:"content",paraId:62,tocIndex:16},{value:"详见 ",paraId:55,tocIndex:16},{value:"content",paraId:63,tocIndex:16},{value:"配置图表的视图区域的样式。",paraId:64,tocIndex:17},{value:"属性",paraId:65,tocIndex:17},{value:"描述",paraId:65,tocIndex:17},{value:"类型",paraId:65,tocIndex:17},{value:"默认值",paraId:65,tocIndex:17},{value:"必选",paraId:65,tocIndex:17},{value:"viewRadius",paraId:65,tocIndex:17},{value:"图表的视图区域的四个圆角半径大小",paraId:65,tocIndex:17},{value:"number",paraId:65,tocIndex:17},{value:"0",paraId:65,tocIndex:17},{value:"viewFill",paraId:65,tocIndex:17},{value:"图表的视图区域填充颜色",paraId:65,tocIndex:17},{value:"string",paraId:65,tocIndex:17},{value:"-",paraId:65,tocIndex:17},{value:"viewFillOpacity",paraId:65,tocIndex:17},{value:"图表的视图区域填充透明度",paraId:65,tocIndex:17},{value:"number",paraId:65,tocIndex:17},{value:"-",paraId:65,tocIndex:17},{value:"viewStroke",paraId:65,tocIndex:17},{value:"图表的视图区域描边颜色",paraId:65,tocIndex:17},{value:"string",paraId:65,tocIndex:17},{value:"-",paraId:65,tocIndex:17},{value:"viewStrokeOpacity",paraId:65,tocIndex:17},{value:"图表的视图区域描边透明度",paraId:65,tocIndex:17},{value:"number",paraId:65,tocIndex:17},{value:"-",paraId:65,tocIndex:17},{value:"viewLineWidth",paraId:65,tocIndex:17},{value:"图表的视图区域描边宽度",paraId:65,tocIndex:17},{value:"number",paraId:65,tocIndex:17},{value:"-",paraId:65,tocIndex:17},{value:"viewLineDash",paraId:65,tocIndex:17},{value:"图表的视图区域描边虚线配置",paraId:65,tocIndex:17},{value:"[number,number]",paraId:65,tocIndex:17},{value:"-",paraId:65,tocIndex:17},{value:"viewOpacity",paraId:65,tocIndex:17},{value:"图表的视图区域整体透明度",paraId:65,tocIndex:17},{value:"number",paraId:65,tocIndex:17},{value:"-",paraId:65,tocIndex:17},{value:"viewShadowColor",paraId:65,tocIndex:17},{value:"图表的视图区域阴影颜色",paraId:65,tocIndex:17},{value:"string",paraId:65,tocIndex:17},{value:"-",paraId:65,tocIndex:17},{value:"viewShadowBlur",paraId:65,tocIndex:17},{value:"图表的视图区域阴影模糊系数",paraId:65,tocIndex:17},{value:"number",paraId:65,tocIndex:17},{value:"-",paraId:65,tocIndex:17},{value:"viewShadowOffsetX",paraId:65,tocIndex:17},{value:"图表的视图区域阴影水平偏移",paraId:65,tocIndex:17},{value:"number",paraId:65,tocIndex:17},{value:"-",paraId:65,tocIndex:17},{value:"viewShadowOffsetY",paraId:65,tocIndex:17},{value:"图表的视图区域阴影垂直偏移",paraId:65,tocIndex:17},{value:"number",paraId:65,tocIndex:17},{value:"-",paraId:65,tocIndex:17},{value:"viewCursor",paraId:65,tocIndex:17},{value:"图表的视图区域鼠标样式",paraId:65,tocIndex:17},{value:"string",paraId:65,tocIndex:17},{value:"default",paraId:65,tocIndex:17},{value:"配置图表的绘制区域的样式。",paraId:66,tocIndex:18},{value:"属性",paraId:67,tocIndex:18},{value:"描述",paraId:67,tocIndex:18},{value:"类型",paraId:67,tocIndex:18},{value:"默认值",paraId:67,tocIndex:18},{value:"必选",paraId:67,tocIndex:18},{value:"plotRadius",paraId:67,tocIndex:18},{value:"图表的绘制区域的四个圆角半径大小",paraId:67,tocIndex:18},{value:"number",paraId:67,tocIndex:18},{value:"0",paraId:67,tocIndex:18},{value:"plotFill",paraId:67,tocIndex:18},{value:"图表的绘制区域填充颜色",paraId:67,tocIndex:18},{value:"string",paraId:67,tocIndex:18},{value:"-",paraId:67,tocIndex:18},{value:"plotFillOpacity",paraId:67,tocIndex:18},{value:"图表的绘制区域填充透明度",paraId:67,tocIndex:18},{value:"number",paraId:67,tocIndex:18},{value:"-",paraId:67,tocIndex:18},{value:"plotStroke",paraId:67,tocIndex:18},{value:"图表的绘制区域描边颜色",paraId:67,tocIndex:18},{value:"string",paraId:67,tocIndex:18},{value:"-",paraId:67,tocIndex:18},{value:"plotStrokeOpacity",paraId:67,tocIndex:18},{value:"图表的绘制区域描边透明度",paraId:67,tocIndex:18},{value:"number",paraId:67,tocIndex:18},{value:"-",paraId:67,tocIndex:18},{value:"plotLineWidth",paraId:67,tocIndex:18},{value:"图表的绘制区域描边宽度",paraId:67,tocIndex:18},{value:"number",paraId:67,tocIndex:18},{value:"-",paraId:67,tocIndex:18},{value:"plotLineDash",paraId:67,tocIndex:18},{value:"图表的绘制区域描边虚线配置",paraId:67,tocIndex:18},{value:"[number,number]",paraId:67,tocIndex:18},{value:"-",paraId:67,tocIndex:18},{value:"plotOpacity",paraId:67,tocIndex:18},{value:"图表的绘制区域整体透明度",paraId:67,tocIndex:18},{value:"number",paraId:67,tocIndex:18},{value:"-",paraId:67,tocIndex:18},{value:"plotShadowColor",paraId:67,tocIndex:18},{value:"图表的绘制区域阴影颜色",paraId:67,tocIndex:18},{value:"string",paraId:67,tocIndex:18},{value:"-",paraId:67,tocIndex:18},{value:"plotShadowBlur",paraId:67,tocIndex:18},{value:"图表的绘制区域阴影模糊系数",paraId:67,tocIndex:18},{value:"number",paraId:67,tocIndex:18},{value:"-",paraId:67,tocIndex:18},{value:"plotShadowOffsetX",paraId:67,tocIndex:18},{value:"图表的绘制区域阴影水平偏移",paraId:67,tocIndex:18},{value:"number",paraId:67,tocIndex:18},{value:"-",paraId:67,tocIndex:18},{value:"plotShadowOffsetY",paraId:67,tocIndex:18},{value:"图表的绘制区域阴影垂直偏移",paraId:67,tocIndex:18},{value:"number",paraId:67,tocIndex:18},{value:"-",paraId:67,tocIndex:18},{value:"plotCursor",paraId:67,tocIndex:18},{value:"图表的绘制区域鼠标样式",paraId:67,tocIndex:18},{value:"string",paraId:67,tocIndex:18},{value:"default",paraId:67,tocIndex:18},{value:"配置图表的主区域的样式。",paraId:68,tocIndex:19},{value:"属性",paraId:69,tocIndex:19},{value:"描述",paraId:69,tocIndex:19},{value:"类型",paraId:69,tocIndex:19},{value:"默认值",paraId:69,tocIndex:19},{value:"必选",paraId:69,tocIndex:19},{value:"mainRadius",paraId:69,tocIndex:19},{value:"图表的主区域的四个圆角半径大小",paraId:69,tocIndex:19},{value:"number",paraId:69,tocIndex:19},{value:"0",paraId:69,tocIndex:19},{value:"mainFill",paraId:69,tocIndex:19},{value:"图表的主区域填充颜色",paraId:69,tocIndex:19},{value:"string",paraId:69,tocIndex:19},{value:"-",paraId:69,tocIndex:19},{value:"mainFillOpacity",paraId:69,tocIndex:19},{value:"图表的主区域填充透明度",paraId:69,tocIndex:19},{value:"number",paraId:69,tocIndex:19},{value:"-",paraId:69,tocIndex:19},{value:"mainStroke",paraId:69,tocIndex:19},{value:"图表的主区域描边颜色",paraId:69,tocIndex:19},{value:"string",paraId:69,tocIndex:19},{value:"-",paraId:69,tocIndex:19},{value:"mainStrokeOpacity",paraId:69,tocIndex:19},{value:"图表的主区域描边透明度",paraId:69,tocIndex:19},{value:"number",paraId:69,tocIndex:19},{value:"-",paraId:69,tocIndex:19},{value:"mainLineWidth",paraId:69,tocIndex:19},{value:"图表的主区域描边宽度",paraId:69,tocIndex:19},{value:"number",paraId:69,tocIndex:19},{value:"-",paraId:69,tocIndex:19},{value:"mainLineDash",paraId:69,tocIndex:19},{value:"图表的主区域描边虚线配置",paraId:69,tocIndex:19},{value:"[number,number]",paraId:69,tocIndex:19},{value:"-",paraId:69,tocIndex:19},{value:"mainOpacity",paraId:69,tocIndex:19},{value:"图表的主区域整体透明度",paraId:69,tocIndex:19},{value:"number",paraId:69,tocIndex:19},{value:"-",paraId:69,tocIndex:19},{value:"mainShadowColor",paraId:69,tocIndex:19},{value:"图表的主区域阴影颜色",paraId:69,tocIndex:19},{value:"string",paraId:69,tocIndex:19},{value:"-",paraId:69,tocIndex:19},{value:"mainShadowBlur",paraId:69,tocIndex:19},{value:"图表的主区域阴影模糊系数",paraId:69,tocIndex:19},{value:"number",paraId:69,tocIndex:19},{value:"-",paraId:69,tocIndex:19},{value:"mainShadowOffsetX",paraId:69,tocIndex:19},{value:"图表的主区域阴影水平偏移",paraId:69,tocIndex:19},{value:"number",paraId:69,tocIndex:19},{value:"-",paraId:69,tocIndex:19},{value:"mainShadowOffsetY",paraId:69,tocIndex:19},{value:"图表的主区域阴影垂直偏移",paraId:69,tocIndex:19},{value:"number",paraId:69,tocIndex:19},{value:"-",paraId:69,tocIndex:19},{value:"mainCursor",paraId:69,tocIndex:19},{value:"图表的主区域鼠标样式",paraId:69,tocIndex:19},{value:"string",paraId:69,tocIndex:19},{value:"default",paraId:69,tocIndex:19},{value:"配置图表的内容区域的样式。",paraId:70,tocIndex:20},{value:"属性",paraId:71,tocIndex:20},{value:"描述",paraId:71,tocIndex:20},{value:"类型",paraId:71,tocIndex:20},{value:"默认值",paraId:71,tocIndex:20},{value:"必选",paraId:71,tocIndex:20},{value:"contentRadius",paraId:71,tocIndex:20},{value:"图表的内容区域的四个圆角半径大小",paraId:71,tocIndex:20},{value:"number",paraId:71,tocIndex:20},{value:"0",paraId:71,tocIndex:20},{value:"contentFill",paraId:71,tocIndex:20},{value:"图表的内容区域填充颜色",paraId:71,tocIndex:20},{value:"string",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"contentFillOpacity",paraId:71,tocIndex:20},{value:"图表的内容区域填充透明度",paraId:71,tocIndex:20},{value:"number",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"contentStroke",paraId:71,tocIndex:20},{value:"图表的内容区域描边颜色",paraId:71,tocIndex:20},{value:"string",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"contentStrokeOpacity",paraId:71,tocIndex:20},{value:"图表的内容区域描边透明度",paraId:71,tocIndex:20},{value:"number",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"contentLineWidth",paraId:71,tocIndex:20},{value:"图表的内容区域描边宽度",paraId:71,tocIndex:20},{value:"number",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"contentLineDash",paraId:71,tocIndex:20},{value:"图表的内容区域描边虚线配置",paraId:71,tocIndex:20},{value:"[number,number]",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"contentOpacity",paraId:71,tocIndex:20},{value:"图表的内容区域整体透明度",paraId:71,tocIndex:20},{value:"number",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"contentShadowColor",paraId:71,tocIndex:20},{value:"图表的内容区域阴影颜色",paraId:71,tocIndex:20},{value:"string",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"contentShadowBlur",paraId:71,tocIndex:20},{value:"图表的内容区域阴影模糊系数",paraId:71,tocIndex:20},{value:"number",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"contentShadowOffsetX",paraId:71,tocIndex:20},{value:"图表的内容区域阴影水平偏移",paraId:71,tocIndex:20},{value:"number",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"contentShadowOffsetY",paraId:71,tocIndex:20},{value:"图表的内容区域阴影垂直偏移",paraId:71,tocIndex:20},{value:"number",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"contentCursor",paraId:71,tocIndex:20},{value:"图表的内容区域鼠标样式",paraId:71,tocIndex:20},{value:"string",paraId:71,tocIndex:20},{value:"default",paraId:71,tocIndex:20},{value:"在配置视图样式的时候，不是以对象的形式来配置，而是以 ",paraId:72,tocIndex:20},{value:"view",paraId:72,tocIndex:20},{value:"、",paraId:72,tocIndex:20},{value:"plot",paraId:72,tocIndex:20},{value:"、",paraId:72,tocIndex:20},{value:"main",paraId:72,tocIndex:20},{value:"、",paraId:72,tocIndex:20},{value:"content",paraId:72,tocIndex:20},{value:"前缀加属性的方式来配置。",paraId:72,tocIndex:20},{value:"({\n  viewStyle: {\n    // 配置图表的视图区域的样式\n    viewFill: '#DCEEFE',\n    viewRadius: 50,\n\n    // 配置图表的绘制区域的样式\n    plotFill: '#fff',\n    plotFillOpacity: 0.45,\n    plotStroke: 'yellow',\n    plotLineWidth: 4,\n\n    // 配置图表的主区域的样式\n    mainFill: 'l(270) 0:#ffffff 0.5:#7ec2f3 1:#1890ff',\n    mainFillOpacity: 0.75,\n\n    // 配置图表的内容区域的样式\n    contentFill: 'l(90) 0:#ffadad 0.5:#ffd6a5 1:#fdffb6',\n    contentShadowColor: '#5d5d5d',\n    contentShadowBlur: 40,\n    contentShadowOffsetX: 5,\n    contentShadowOffsetY: 5,\n  },\n});\n",paraId:73,tocIndex:20},{value:"尝试一下：",paraId:74,tocIndex:20},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  viewStyle: {\n    // 配置图表的视图区域的样式\n    viewFill: '#DCEEFE',\n    viewRadius: 20,\n\n    // 配置图表的绘制区域的样式\n    plotFill: '#fff',\n    plotFillOpacity: 0.45,\n    plotStroke: 'yellow',\n    plotLineWidth: 4,\n\n    // 配置图表的主区域的样式\n    mainFill: 'l(270) 0:#ffffff 0.5:#7ec2f3 1:#1890ff',\n    mainFillOpacity: 0.75,\n\n    // 配置图表的内容区域的样式\n    contentFill: 'l(90) 0:#ffadad 0.5:#ffd6a5 1:#fdffb6',\n    contentShadowColor: '#5d5d5d',\n    contentShadowBlur: 40,\n    contentShadowOffsetX: 5,\n    contentShadowOffsetY: 5,\n  },\n  type: 'area',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/aapl.json',\n  },\n  encode: {\n    x: (d) => new Date(d.date),\n    y: 'close',\n  },\n  axis: false,\n  style: {\n    fill: 'l(270) 0:#ffffff 0.5:#7ec2f3 1:#1890ff',\n    fillOpacity: 0.9,\n  },\n  height: 350,\n  width: 700,\n  margin: 30,\n  padding: 20,\n  inset: 15,\n  legend: false,\n});\n\nchart.render();\n",paraId:75,tocIndex:20}]},42930:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(5570);const t=[{value:"G2 的大部分能力通过 ",paraId:0},{value:"Chart",paraId:0},{value:" 对象暴露给用户，比如绘制一个简单的条形图：",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data([\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold');\n\nchart.render();\n",paraId:1},{value:"接下来我们就来看看 ",paraId:2},{value:"Chart",paraId:2},{value:" 的核心使用方式。",paraId:2},{value:"每个 G2 的可视化都是通过实例化 ",paraId:3,tocIndex:1},{value:"Chart",paraId:3,tocIndex:1},{value:" 对象创建一个新的",paraId:3,tocIndex:1},{value:"图表实例",paraId:3,tocIndex:1},{value:"：",paraId:3,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  /* 图表选项 */\n});\n",paraId:4,tocIndex:1},{value:"可以通 ",paraId:5,tocIndex:2},{value:"new Chart(options)",paraId:5,tocIndex:2},{value:" 指定一些全局选项：比如挂载的容器，宽度，高度等。所有的选项都是",paraId:5,tocIndex:2},{value:"可选的",paraId:5,tocIndex:2},{value:"。",paraId:5,tocIndex:2},{value:"// 按需指定选项\nconst chart = new Chart({\n  width: 800, // 图表高度\n  height: 400, // 图表宽度\n  container: 'chart', // 挂载容器的 ID\n});\n",paraId:6,tocIndex:2},{value:"图表实例只有挂载了之后才能被渲染到屏幕上，其中有两种挂载的方式。",paraId:7,tocIndex:3},{value:'<div id="chart"></div>\n',paraId:8,tocIndex:3},{value:"第一种，自动挂载。",paraId:9,tocIndex:3},{value:"const chart = new Chart({\n  container: 'chart', // 指定挂载容器 id\n});\n\n// 或者\nconst chart = new Chart({\n  container: document.getElementById('chart'), // 指定挂载容器\n});\n",paraId:10,tocIndex:3},{value:"第二种，手动挂载。",paraId:11,tocIndex:3},{value:"const chart = new Chart();\n\n// 声明可视化\n// ...\n\nconst container = chart.getContainer(); // 获得挂载的容器\ndocument.getElementById('chart').appendChild(container);\n",paraId:12,tocIndex:3},{value:"当然，在能看见图表之前，还需要调用 ",paraId:13,tocIndex:4},{value:"chart.render",paraId:13,tocIndex:4},{value:"。",paraId:13,tocIndex:4},{value:"// 创建图表实例\nconst chart = new Chart({\n  container: 'chart',\n});\n\n// 声明可视化\n// ...\n\n// 渲染\nchart\n  .render()\n  .then(() => {\n    // 渲染成功\n  })\n  .catch((error) => {\n    // 渲染失败\n  });\n",paraId:14,tocIndex:4},{value:"当通过图表实例提供的 API 修改了声明的可视化之后，只用再次调用 ",paraId:15,tocIndex:5},{value:"chart.render",paraId:15,tocIndex:5},{value:" 就可以更新图表了。",paraId:15,tocIndex:5},{value:"// 第一次渲染\nchart.render();\n\n// 更新声明\n// ...\n\n// 更新图表\nchart.render();\n",paraId:16,tocIndex:5},{value:"清空画布和取消事件监听，同时会清空图表配置，常常用于绘制新的图表。",paraId:17,tocIndex:6},{value:"chart.clear();\n",paraId:18,tocIndex:6},{value:"销毁画布和取消事件监听，常常用于销毁组件和页面的时候。",paraId:19,tocIndex:7},{value:"chart.destroy();\n",paraId:20,tocIndex:7}]},87680:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(19999);const t=[{value:"颜色在可视化中起着非常重要的作用。它可以帮助我们更好地理解数据、突出显示关键信息、增强视觉吸引力和提高可读性。在可视化中颜色通常具有以下作用：",paraId:0},{value:"区分数据类别",paraId:1},{value:"：区分不同的数据类别。例如，在柱状图中，我们可以使用不同的颜色表示不同的产品类别，以便更容易地识别和比较它们。",paraId:1},{value:"表示数据的数量",paraId:1},{value:"：表示数据的数量。例如，在热力图中，我们可以使用颜色的深浅来表示数据的大小，深色表示较大的值，浅色表示较小的值。",paraId:1},{value:"突出显示关键信息",paraId:1},{value:"：突出显示关键信息。例如，在折线图中，我们可以使用鲜艳的颜色表示关注的数据点，以便更容易地找到它们。",paraId:1},{value:"增强视觉吸引力",paraId:1},{value:"：使可视化更具吸引力。使用鲜艳的颜色和有趣的配色方案可以让可视化更加生动和有趣。",paraId:1},{value:"提高可读性",paraId:1},{value:"：提高可视化的可读性。例如，在地图上，我们可以使用不同的颜色表示不同的地理区域，以便更容易地识别和理解它们。",paraId:1},{value:"设置数据无关的颜色，通过 ",paraId:2},{value:"mark.style(fill, color)",paraId:2},{value:" 或者 ",paraId:2},{value:"mark.style(stroke, color)",paraId:2},{value:" 即可，如果希望设置数据驱动的颜色，可以使用以下方式来设置颜色：",paraId:2},{value:"编码：",paraId:3},{value:"mark.encode",paraId:3},{value:"样式：",paraId:3},{value:"mark.style",paraId:3},{value:"通过 ",paraId:4,tocIndex:0},{value:"mark.encode",paraId:4,tocIndex:0},{value:" 去设置数据驱动的颜色是最常见的方式，同时通过颜色比例尺去配置最后的视觉展示。",paraId:4,tocIndex:0},{value:"scale.identity",paraId:5,tocIndex:0},{value:"：恒等映射",paraId:5,tocIndex:0},{value:"scale.range",paraId:5,tocIndex:0},{value:"：自定义色板",paraId:5,tocIndex:0},{value:"scale.palette",paraId:5,tocIndex:0},{value:"：内置的色板",paraId:5,tocIndex:0},{value:"scale.relations",paraId:5,tocIndex:0},{value:"：自定义映射关系",paraId:5,tocIndex:0},{value:"当设置颜色比例尺为恒等比例尺（Identity）的时候，color 通道的数据会被作为视觉数据绘制到最后的可视化中，但是不会去生成比例尺。",paraId:6,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data([\n    { genre: 'Sports', sold: 275, color: 'red' },\n    { genre: 'Strategy', sold: 115, color: 'blue' },\n    { genre: 'Action', sold: 120, color: 'green' },\n    { genre: 'Shooter', sold: 350, color: 'red' },\n    { genre: 'Other', sold: 150, color: 'black' },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  .encode('color', 'color')\n  .scale('color', { type: 'identity' }); // 设置该比例尺为恒等映射\n\nchart.render();\n",paraId:7,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('color', 'letter')\n  .axis('y', { labelFormatter: '.0%' })\n  .scale('color', {\n    type: 'ordinal',\n    range: ['#7593ed', '#95e3b0', '#6c7893', '#e7c450', '#7460eb'],\n  });\n\nchart.render();\n",paraId:8,tocIndex:2},{value:"G2 中可以通过设置 ",paraId:9,tocIndex:3},{value:"scale.palette",paraId:9,tocIndex:3},{value:" 去指定色板。这个色板可以是离散的：",paraId:9,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('color', 'letter')\n  .axis('y', { labelFormatter: '.0%' })\n  .scale('color', { palette: 'tableau10' });\n\nchart.render();\n",paraId:10,tocIndex:3},{value:"同时也可以是连续的：",paraId:11,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 320,\n});\n\nchart\n  .cell()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n  })\n  .transform({ type: 'group', color: 'max' })\n  .encode('x', (d) => new Date(d.date).getUTCDate())\n  .encode('y', (d) => new Date(d.date).getUTCMonth())\n  .encode('color', 'temp_max')\n  .scale('color', { palette: 'rainbow' });\n\nchart.render();\n",paraId:12,tocIndex:3},{value:"G2 提供了一些内置的色板，可以直接使用，并支持 ",paraId:13,tocIndex:4},{value:"d3-scale-chromatic",paraId:13,tocIndex:4},{value:"的色板。",paraId:13,tocIndex:4},{value:"离散色板",paraId:14,tocIndex:4},{value:"连续色板",paraId:15,tocIndex:41},{value:"如果内置的色板不能满足你的要求，也可以试试自定义色板，以下是一个简单的例子，展示了如何自定义注册色板和使用。",paraId:16,tocIndex:80},{value:"import { register, Chart } from '@antv/g2';\n\nregister('palette.custom', customPalette);\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nfunction customPalette() {\n  return ['#FFB3BA', '#98FF98', '#89CFF0', '#FFF9B1', '#D1A3FF'];\n}\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('color', 'letter')\n  .axis('y', { labelFormatter: '.0%' })\n  .scale('color', { palette: 'custom' }); // 指定自定义色板\n\nchart.render();\n",paraId:17,tocIndex:80},{value:"可以通过 ",paraId:18,tocIndex:81},{value:"scale.relations",paraId:18,tocIndex:81},{value:" 去指定一系列映射规则，这个优先级别会高于 domain 到 range 的默认映射方式。比如对于 color 通道来讲，如果希望特定的值映射为特定的颜色，或者处理异常值，这个配置会很有用。",paraId:18,tocIndex:81},{value:"chart.interval().scale('color', {\n  relations: [\n    ['dog', 'red'], // dog 恒等映射为红色\n    [(d) => d === undefined, 'grey'], // 如果是值为 undefined，那么为灰色\n  ],\n});\n",paraId:19,tocIndex:81},{value:"通过 ",paraId:20,tocIndex:82},{value:"mark.style",paraId:20,tocIndex:82},{value:" 来设置颜色，这里设置的颜色比 ",paraId:20,tocIndex:82},{value:"encode.color",paraId:20,tocIndex:82},{value:" 的优先级更高，同时不会生成图例。",paraId:20,tocIndex:82},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .style('fill', (datum, index, data) => {\n    const { frequency } = datum;\n    if (frequency > 0.1) return '#3376cd';\n    if (frequency > 0.05) return '#f4bb51';\n    return '#b43a29';\n  });\n\nchart.render();\n",paraId:21,tocIndex:82}]},74439:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(32162);const t=[{value:"根据字段分片数据，利用圆形划分空间，然后进行各个分面的数据可视化。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst M = [\n  'Jan.',\n  'Feb.',\n  'Mar.',\n  'Apr.',\n  'May',\n  'Jun.',\n  'Jul.',\n  'Aug.',\n  'Sept.',\n  'Oct.',\n  'Nov.',\n  'Dec.',\n];\nconst N = ['A', 'B', 'C', 'D'];\nconst data = M.flatMap((month) =>\n  N.map((name) => ({\n    month,\n    name,\n    value: Math.random(),\n  })),\n);\n\nconst chart = new Chart({\n  container: 'container',\n  width: 480,\n  height: 480,\n});\n\nconst facetCircle = chart.facetCircle().data(data).encode('position', 'month');\n\nfacetCircle\n  .interval()\n  .encode('x', 'name')\n  .encode('y', 'value')\n  .encode('color', 'name');\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"facetCircle 的底层实现和 mark 一致，所以在配置上有很多是一样的。",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"类型",paraId:5,tocIndex:1},{value:"默认值",paraId:5,tocIndex:1},{value:"data",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"data",paraId:6,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"Data",paraId:5,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"通道设置，见下表",paraId:5,tocIndex:1},{value:"padding",paraId:5,tocIndex:1},{value:"padding 大小",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingLeft",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingRight",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingTop",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingBottom",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"margin",paraId:5,tocIndex:1},{value:"margin",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginLeft",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginRight",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginTop",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginBottom",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"title",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"title",paraId:7,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"scale",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"scale",paraId:8,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"facetCircle",paraId:9,tocIndex:1},{value:" 对应的配置都可以使用 API 进行设置，例如：",paraId:9,tocIndex:1},{value:"chart.facetCircle().data([1, 2, 3]).encode('position', 'month');\n",paraId:10,tocIndex:1},{value:"对于 facetCircle 有自己独特的 encode 通道。",paraId:11,tocIndex:2},{value:"通道",paraId:12,tocIndex:2},{value:"描述",paraId:12,tocIndex:2},{value:"类型",paraId:12,tocIndex:2},{value:"默认值",paraId:12,tocIndex:2},{value:"position",paraId:12,tocIndex:2},{value:"按照 position 对应的数据去划分圆形空间中的角度",paraId:12,tocIndex:2},{value:"string",paraId:12,tocIndex:2},{value:" | ",paraId:12,tocIndex:2},{value:"(d, idx, arr) => any",paraId:12,tocIndex:2}]},74237:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(76827);const t=[{value:"用 row、column 字段维值对空间和数据进行划分，在各个子空间可视化数据片段。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 928,\n  height: 270,\n  paddingBottom: 50,\n});\n\nconst facetRect = chart\n  .facetRect()\n  .attr('paddingBottom', 50)\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/anscombe.json',\n  })\n  .encode('x', 'series');\n\nfacetRect\n  .point()\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .style('stroke', '#000')\n  .attr('inset', 10);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"facetRect 的底层实现和 mark 一致，所以在配置上有很多是一样的。",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"类型",paraId:5,tocIndex:1},{value:"默认值",paraId:5,tocIndex:1},{value:"data",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"data",paraId:6,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"Data",paraId:5,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"通道设置，见下表",paraId:5,tocIndex:1},{value:"padding",paraId:5,tocIndex:1},{value:"padding 大小",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingLeft",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingRight",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingTop",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingBottom",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"margin",paraId:5,tocIndex:1},{value:"margin",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginLeft",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginRight",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginTop",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginBottom",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"title",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"title",paraId:7,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"scale",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"scale",paraId:8,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"facetRect",paraId:9,tocIndex:1},{value:" 对应的配置都可以使用 API 进行设置，例如：",paraId:9,tocIndex:1},{value:"chart.facetRect().data([1, 2, 3]).encode('x', 'type');\n",paraId:10,tocIndex:1},{value:"对于 facetRect 有自己独特的 encode 通道。",paraId:11,tocIndex:2},{value:"通道",paraId:12,tocIndex:2},{value:"描述",paraId:12,tocIndex:2},{value:"类型",paraId:12,tocIndex:2},{value:"默认值",paraId:12,tocIndex:2},{value:"x",paraId:12,tocIndex:2},{value:"指定 x 方向上分面的字段，可以是常年、字段名、回调函数",paraId:12,tocIndex:2},{value:"string",paraId:12,tocIndex:2},{value:" | ",paraId:12,tocIndex:2},{value:"(d, idx, arr) => any",paraId:12,tocIndex:2},{value:"y",paraId:12,tocIndex:2},{value:"指定 x 方向上分面的字段，可以是常年、字段名、回调函数",paraId:12,tocIndex:2},{value:"string",paraId:12,tocIndex:2},{value:" | ",paraId:12,tocIndex:2},{value:"(d, idx, arr) => any",paraId:12,tocIndex:2},{value:"facetRect 是不是和 repeatMatrix 功能上重复？",paraId:13,tocIndex:3},{value:"facetRect 是通过 x, y encode 字段去划分空间，比如指定 ",paraId:14,tocIndex:3},{value:"encode('x', 'sex')",paraId:14,tocIndex:3},{value:"，那么就会根据性别的枚举值，在 x 方向均分为 2 个分面。而 repeatMatrix 是根据字段的个数来分面空间的。",paraId:14,tocIndex:3}]},2787:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(33072);const t=[{value:"G2 中",paraId:0},{value:"视图复合（View Composition）",paraId:0},{value:" 提供了在一个可视化中绘制多个图表的能力。G2 定义了一个",paraId:0},{value:"视图树（View Graph）",paraId:0},{value:" 去描述",paraId:0},{value:"多视图图表（Multi-View Plot）",paraId:0},{value:"。",paraId:0},{value:"({\n  type: 'spaceLayer',\n  children: [{ type: 'view' }, { type: 'view' }],\n});\n",paraId:1},{value:"// API\nconst layer = chart.spaceLayer();\n\nlayer.view();\n\nlayer.view();\n",paraId:2},{value:"最基础的视图复合方式就是",paraId:3,tocIndex:0},{value:"空间复合（Space Composition）",paraId:3,tocIndex:0},{value:"，只是对空间进行划分。",paraId:3,tocIndex:0},{value:"一个比较常见的复合方式是 ",paraId:4,tocIndex:0},{value:"composition.spaceLayer",paraId:4,tocIndex:0},{value:"：将多个图表重叠在一起。使用场景是这些视图拥有的不同的坐标系，比如下面的条形图和饼图。",paraId:4,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst layer = chart.spaceLayer();\n\n// 条形图\nlayer\n  .interval()\n  .data([\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Other', sold: 150 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Strategy', sold: 115 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold');\n\n// 饼图\nlayer\n  .interval() // 创建一个 interval\n  .attr('paddingLeft', 300) // 设置位置\n  .attr('paddingBottom', 250)\n  .coordinate({ type: 'theta' }) // 指定坐标系\n  .transform({ type: 'stackY' })\n  .data([\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Other', sold: 150 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Strategy', sold: 115 },\n  ])\n  .encode('y', 'sold')\n  .encode('color', 'genre')\n  .legend('color', false);\n\nchart.render();\n",paraId:5,tocIndex:0},{value:"同时也可以使用 ",paraId:6,tocIndex:0},{value:"composition.spaceFlex",paraId:6,tocIndex:0},{value:" 去让视图水平或者竖直排列。",paraId:6,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nconst flex = chart.spaceFlex();\n\n// 条形图\nflex\n  .interval()\n  .data([\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Other', sold: 150 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Strategy', sold: 115 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold');\n\n// 饼图\nflex\n  .interval() // 创建一个 interval\n  .coordinate({ type: 'theta' }) // 指定坐标系\n  .transform({ type: 'stackY' })\n  .data([\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Other', sold: 150 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Strategy', sold: 115 },\n  ])\n  .encode('y', 'sold')\n  .encode('color', 'genre')\n  .legend('color', false);\n\nchart.render();\n",paraId:7,tocIndex:0},{value:"同时这些复合方式是可以嵌套的，所以很容易通过一个单独的声明去实现一个报表。",paraId:8,tocIndex:0},{value:"分面复合（Facet Composition）",paraId:9,tocIndex:1},{value:" 和空间复合的不同在于：它还会对数据划分，每个视图展现原始数据的一个子集。",paraId:9,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 260,\n  width: 800,\n  paddingLeft: 40,\n  paddingBottom: 50,\n});\n\nconst facetRect = chart\n  .facetRect()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/anscombe.json',\n  })\n  // 将数据按照 series 字段划分成一个个子集，\n  // 并且是 x 方向排列\n  .encode('x', 'series');\n\nfacetRect\n  .point()\n  .attr('padding', 'auto')\n  .attr('inset', 10)\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .style('stroke', '#000');\n\nchart.render();\n",paraId:10,tocIndex:1},{value:"重复复合（Repeat Composition）",paraId:11,tocIndex:2},{value:" 和分面的区别在于：它的每个视图展现的是全量数据，只不过会对编码进行重复，从而绘制出多个视图。",paraId:11,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 900,\n  height: 900,\n  padding: 'auto',\n  paddingLeft: 55,\n  paddingBottom: 45,\n});\n\nconst repeatMatrix = chart\n  .repeatMatrix()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n    // 数据处理\n  })\n  // 指定需要重复的编码\n  // 一共会生成 4 * 4 = 16 个视图\n  // 每个视图的 x 和 y 编码是下面字段的叉乘\n  .encode('position', [\n    'culmen_length_mm',\n    'culmen_depth_mm',\n    'flipper_length_mm',\n    'body_mass_g',\n  ]);\n\nrepeatMatrix.point().attr('padding', 'auto').encode('color', 'species');\n\nchart.render();\n",paraId:12,tocIndex:2},{value:"时间复合",paraId:13,tocIndex:3},{value:"在空间上管理视图，用于做动画。",paraId:13,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/fbe4a8c1-ce04-4ba3-912a-0b26d6965333.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const chart = new Chart({\n      container: 'container',\n      paddingTop: 60,\n      paddingLeft: 100,\n    });\n\n    // 参考 css animation 的描述\n    const keyframe = chart\n      .timingKeyframe() // 创建容器\n      .attr('iterationCount', 2) // 迭代次数\n      .attr('direction', 'alternate') // 方向\n      .attr('duration', 1000); // 持续时间\n\n    keyframe\n      .interval()\n      .transform({ type: 'groupX', y: 'mean' })\n      .data(data)\n      .encode('x', 'gender')\n      .encode('y', 'weight')\n      .encode('color', 'gender')\n      .encode('key', 'gender'); // 指定 key\n\n    keyframe\n      .point()\n      .data(data)\n      .encode('x', 'height')\n      .encode('y', 'weight')\n      .encode('color', 'gender')\n      .encode('shape', 'point')\n      .encode('groupKey', 'gender'); // 指定 groupKey\n\n    chart.render();\n  });\n",paraId:14,tocIndex:3}]},68461:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(29051);const t=[{value:"根据字段的数量对空间进行划分，然后利用数据在这些子空间可视化。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 300,\n  height: 720,\n  paddingLeft: 50,\n  paddingBottom: 60,\n});\n\nconst repeatMatrix = chart\n  .repeatMatrix()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/weather.json',\n    transform: [\n      {\n        type: 'map',\n        callback: ({ date, ...d }) => ({\n          ...d,\n          date: new Date(date).getMonth() + '',\n        }),\n      },\n    ],\n  })\n  .encode('y', ['temp_max', 'precipitation', 'wind'])\n  .encode('x', 'date');\n\nrepeatMatrix\n  .line()\n  .transform({ type: 'groupX', y: 'mean' })\n  .encode('color', 'location')\n  .scale('y', { zero: true });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"repeatMatrix 的底层实现和 mark 一致，所以在配置上有很多是一样的。",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"类型",paraId:5,tocIndex:1},{value:"默认值",paraId:5,tocIndex:1},{value:"data",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"data",paraId:6,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"Data",paraId:5,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"通道设置，见下表",paraId:5,tocIndex:1},{value:"padding",paraId:5,tocIndex:1},{value:"padding 大小",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingLeft",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingRight",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingTop",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingBottom",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"margin",paraId:5,tocIndex:1},{value:"margin",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginLeft",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginRight",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginTop",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginBottom",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"title",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"title",paraId:7,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"scale",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"scale",paraId:8,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"repeatMatrix",paraId:9,tocIndex:1},{value:" 对应的配置都可以使用 API 进行设置，例如：",paraId:9,tocIndex:1},{value:"chart.repeatMatrix().data([1, 2, 3]).encode('x', ['f1', 'f2', 'f3']);\n",paraId:10,tocIndex:1},{value:"对于 repeatMatrix 有自己独特的 encode 通道。",paraId:11,tocIndex:2},{value:"通道",paraId:12,tocIndex:2},{value:"描述",paraId:12,tocIndex:2},{value:"类型",paraId:12,tocIndex:2},{value:"默认值",paraId:12,tocIndex:2},{value:"x",paraId:12,tocIndex:2},{value:"指定 x 方向上字段列表，用于 x 方向空间分片",paraId:12,tocIndex:2},{value:"string[]",paraId:12,tocIndex:2},{value:"y",paraId:12,tocIndex:2},{value:"指定 y 方向上字段列表，用于 y 方向空间分片",paraId:12,tocIndex:2},{value:"string[]",paraId:12,tocIndex:2}]},48777:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(80995);const t=[{value:"使用类似 css flex 的布局方式来划分空间区域，常用于多图表对比的视图。",paraId:0},{value:"提供一个两层 flex 容器布局的画布。",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 900,\n});\n\nconst flex = chart\n  .spaceFlex()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n  })\n  .attr('direction', 'col')\n  .attr('ratio', [1, 2]);\n\nflex\n  .interval()\n  .attr('paddingBottom', 0)\n  .attr('paddingRight', 300)\n  .transform({ type: 'groupX', y: 'max' })\n  .axis('x', false)\n  .encode('x', (d) => new Date(d.date).getUTCDate())\n  .encode('y', 'temp_max')\n  .encode('color', 'steelblue');\n\nflex\n  .spaceFlex()\n  .attr('ratio', [2, 1])\n  .call((node) =>\n    node\n      .cell()\n      .attr('paddingRight', 0)\n      .attr('paddingBottom', 50)\n      .transform({ type: 'group', color: 'max' })\n      .encode('x', (d) => new Date(d.date).getUTCDate())\n      .encode('y', (d) => new Date(d.date).getUTCMonth())\n      .encode('color', 'temp_max')\n      .style('inset', 0.5)\n      .axis('x', { title: 'Date' })\n      .axis('y', { title: 'Month' })\n      .legend({ color: false })\n      .scale('color', {\n        type: 'sequential',\n        palette: 'gnBu',\n      }),\n  )\n  .call((node) =>\n    node\n      .interval()\n      .attr('paddingBottom', 50)\n      .transform({ type: 'groupX', y: 'max' })\n      .coordinate({ transform: [{ type: 'transpose' }] });\n      .axis('x', false)\n      .encode('x', (d) => new Date(d.date).getUTCMonth())\n      .encode('y', 'temp_max')\n      .encode('color', 'steelblue'),\n  );\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"更多的案例，可以查看",paraId:3,tocIndex:0},{value:"图表示例",paraId:4,tocIndex:0},{value:"页面。",paraId:3,tocIndex:0},{value:"当前 flex 主要提供了最核心的两个配置，便于空间分片。",paraId:5,tocIndex:1},{value:"属性",paraId:6,tocIndex:1},{value:"描述",paraId:6,tocIndex:1},{value:"类型",paraId:6,tocIndex:1},{value:"默认值",paraId:6,tocIndex:1},{value:"ratio",paraId:6,tocIndex:1},{value:"设置 flex 容器中的子元素占用空间的比例",paraId:6,tocIndex:1},{value:"number[]",paraId:6,tocIndex:1},{value:"均分",paraId:6,tocIndex:1},{value:"direction",paraId:6,tocIndex:1},{value:"设置 flex 划分空间的方向",paraId:6,tocIndex:1},{value:"col",paraId:6,tocIndex:1},{value:" | ",paraId:6,tocIndex:1},{value:"row",paraId:6,tocIndex:1},{value:"row",paraId:6,tocIndex:1},{value:"data",paraId:6,tocIndex:1},{value:"flex 容器的数据",paraId:6,tocIndex:1},{value:"Data",paraId:6,tocIndex:1},{value:"spaceFlex",paraId:7,tocIndex:1},{value:" 对应的配置都可以使用 API 进行设置，例如：",paraId:7,tocIndex:1},{value:"chart.spaceFlex().attr('ratio', [1, 2, 3]).attr('direction', 'col');\n",paraId:8,tocIndex:1},{value:"怎么使用 spaceFlex 定义复杂的图表布局？",paraId:9,tocIndex:2},{value:"spaceFlex 提供了按照比例横向纵向划分空间，对于复杂的布局，理论上都可以通过不断拆分容器层级结构实现。",paraId:10,tocIndex:2}]},72653:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(97646);const t=[{value:"对空间不做任何划分，多个视图使用同一个空间区域，常用于视图的层叠。",paraId:0},{value:"绘制一个常见的柱饼结合的图表。",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst layer = chart.spaceLayer().data({\n  type: 'fetch',\n  value:\n    'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  format: 'csv',\n});\n\n// 柱图\nlayer\n  .interval()\n  .attr('paddingLeft', 50)\n  .transform({ type: 'sortX', reverse: true, by: 'y' })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('color', 'letter');\n\n// 饼图\nlayer\n  .interval()\n  .attr('paddingLeft', 400)\n  .attr('paddingBottom', 200)\n  .coordinate({ type: 'theta' })\n  .transform({ type: 'stackY' })\n  .legend(false)\n  .encode('y', 'frequency')\n  .encode('color', 'letter');\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"更多的案例，可以查看",paraId:3,tocIndex:0},{value:"图表示例",paraId:4,tocIndex:0},{value:"页面。",paraId:3,tocIndex:0},{value:"无额外配置项。",paraId:5,tocIndex:1}]},10271:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(79702);const t=[{value:"在不同视图之间执行连续的过渡动画。通过 ",paraId:0},{value:"mark.key",paraId:0},{value:" 和 ",paraId:0},{value:"mark.groupKey",paraId:0},{value:" 去关联图形。",paraId:0},{value:"fetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/fbe4a8c1-ce04-4ba3-912a-0b26d6965333.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const chart = new Chart({\n      container: 'container',\n      paddingTop: 60,\n      paddingLeft: 100,\n    });\n\n    const keyframe = chart\n      .timingKeyframe()\n      .attr('direction', 'alternate')\n      .attr('iterationCount', 4);\n\n    // 条形图\n    keyframe\n      .interval()\n      .data(data)\n      .transform({ type: 'groupX', y: 'mean' })\n      .encode('x', 'gender')\n      .encode('y', 'weight')\n      .encode('color', 'gender')\n      .encode('key', 'gender'); // 指定 key\n\n    // 散点图\n    keyframe\n      .point()\n      .data(data)\n      .encode('x', 'height')\n      .encode('y', 'weight')\n      .encode('color', 'gender')\n      .encode('groupKey', 'gender') // 指定合并的条的 key\n      .encode('shape', 'point');\n\n    chart.render();\n  });\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"duration",paraId:2,tocIndex:1},{value:"每一视图的动画过渡时间",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"1000",paraId:2,tocIndex:1},{value:"iterationCount",paraId:2,tocIndex:1},{value:"'infinite' | number",paraId:2,tocIndex:1},{value:"1",paraId:2,tocIndex:1},{value:"direction",paraId:2,tocIndex:1},{value:"'normal' | 'reverse' | 'alternate' | 'reverse-alternate'",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"'normal'",paraId:2,tocIndex:1},{value:"children",paraId:2,tocIndex:1},{value:"执行动画的视图节点",paraId:2,tocIndex:1},{value:"Node[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1}]},59556:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(57599);const t=[{value:"本文档详细展示了 G2 的完整配置体系，涵盖了所有可用的配置选项和层级关系。",paraId:0},{value:"在创建图表实例时，可以通过 ",paraId:1,tocIndex:0},{value:"new Chart(params)",paraId:1,tocIndex:0},{value:" 传入以下配置项：",paraId:1,tocIndex:0},{value:"配置项",paraId:2,tocIndex:0},{value:"类型",paraId:2,tocIndex:0},{value:"默认值",paraId:2,tocIndex:0},{value:"描述",paraId:2,tocIndex:0},{value:"container",paraId:2,tocIndex:0},{value:"string | HTMLElement",paraId:2,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"指定图表绘制的 DOM，可以传入 DOM id 或 DOM 实例",paraId:2,tocIndex:0},{value:"autoFit",paraId:2,tocIndex:0},{value:"boolean",paraId:2,tocIndex:0},{value:"false",paraId:2,tocIndex:0},{value:"图表是否自适应容器宽高",paraId:2,tocIndex:0},{value:"clip",paraId:2,tocIndex:0},{value:"boolean",paraId:2,tocIndex:0},{value:"false",paraId:2,tocIndex:0},{value:"是否隐藏超出绘制区域的图形",paraId:2,tocIndex:0},{value:"width",paraId:2,tocIndex:0},{value:"number",paraId:2,tocIndex:0},{value:"640",paraId:2,tocIndex:0},{value:"图表宽度",paraId:2,tocIndex:0},{value:"height",paraId:2,tocIndex:0},{value:"number",paraId:2,tocIndex:0},{value:"480",paraId:2,tocIndex:0},{value:"图表高度",paraId:2,tocIndex:0},{value:"depth",paraId:2,tocIndex:0},{value:"number",paraId:2,tocIndex:0},{value:"0",paraId:2,tocIndex:0},{value:"图表深度，在 3D 图表中使用",paraId:2,tocIndex:0},{value:"padding",paraId:2,tocIndex:0},{value:"'auto' | number",paraId:2,tocIndex:0},{value:"'auto'",paraId:2,tocIndex:0},{value:"图表内边距，使用方式参考 CSS 盒模型",paraId:2,tocIndex:0},{value:"margin",paraId:2,tocIndex:0},{value:"number",paraId:2,tocIndex:0},{value:"16",paraId:2,tocIndex:0},{value:"图表外边距，使用方式参考 CSS 盒模型",paraId:2,tocIndex:0},{value:"inset",paraId:2,tocIndex:0},{value:"number",paraId:2,tocIndex:0},{value:"0",paraId:2,tocIndex:0},{value:"图表呼吸范围宽度",paraId:2,tocIndex:0},{value:"renderer",paraId:2,tocIndex:0},{value:"Canvas | SVG | WebGL",paraId:2,tocIndex:0},{value:"Canvas",paraId:2,tocIndex:0},{value:"指定渲染引擎",paraId:2,tocIndex:0},{value:"theme",paraId:2,tocIndex:0},{value:"'classic' | 'classicDark' | 'academy' | customTheme",paraId:2,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"配置图表主题",paraId:2,tocIndex:0},{value:"plugins",paraId:2,tocIndex:0},{value:"any[]",paraId:2,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"指定渲染时使用的插件",paraId:2,tocIndex:0},{value:"示例：",paraId:3,tocIndex:0},{value:"const chart = new Chart({\n  container: 'container',     // DOM 容器\n  autoFit: true,              // 自适应容器大小\n  clip: true,                 // 裁剪超出区域\n  padding: 20,                // 内边距\n  margin: 16,                 // 外边距\n  theme: 'classicDark',       // 深色主题\n  plugins: [new Plugin()]     // 插件\n});\n",paraId:4,tocIndex:0},{value:"创建图表实例后，可以通过以下两种方式进行配置：",paraId:5,tocIndex:1},{value:"chart\n  .data(data)\n  .encode('x', 'field1')\n  .encode('y', 'field2')\n  .scale('x', { type: 'band' })\n  .axis('x', { title: 'X轴标题' });\n",paraId:6,tocIndex:2},{value:"chart.options({\n  type: 'interval',\n  data: data,\n  encode: { x: 'field1', y: 'field2' },\n  scale: { x: { type: 'band' } },\n  axis: { x: { title: 'X轴标题' } }\n});\n",paraId:7,tocIndex:3},{value:"以下是完整的图表配置项层级关系：",paraId:8,tocIndex:3}]},90338:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(54142);const t=[{value:"在 2D 笛卡尔坐标系基础上，通过增加 Z 轴扩展而来。",paraId:0},{value:"示例",paraId:1},{value:"import { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\n\nconst Chart = extend(Runtime, { ...corelib(), ...threedlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  depth: 400,\n});\n\nchart.coordinate({\n  type: 'cartesian3D',\n});\n\nchart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('size', 'Origin')\n  .encode('color', 'Cylinders')\n  .encode('shape', 'cube')\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render();\n",paraId:2,tocIndex:0}]},5780:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(33662);const t=[{value:"鱼眼坐标系（Fisheye）是一种特殊的坐标系变换，它对输入的维度应用笛卡尔鱼眼效果，使得焦点区域被放大，而远离焦点的区域则被压缩。这种变换类似于鱼眼镜头的视觉效果，能够在保持全局视图的同时突出显示局部细节。",paraId:0,tocIndex:0},{value:"鱼眼坐标系变换主要用于以下场景：",paraId:1,tocIndex:0},{value:"数据探索",paraId:2,tocIndex:0},{value:"：当需要同时关注数据的整体分布和局部细节时",paraId:2,tocIndex:0},{value:"可视化密集数据",paraId:2,tocIndex:0},{value:"：当数据点过于密集，难以区分个体时",paraId:2,tocIndex:0},{value:"交互式数据分析",paraId:2,tocIndex:0},{value:"：结合鼠标交互，动态调整焦点位置，实现数据的动态放大和缩小",paraId:2,tocIndex:0},{value:"在 G2 中，鱼眼坐标系可以通过坐标系变换来实现，也可以通过交互组件来动态应用。",paraId:3,tocIndex:0},{value:"鱼眼坐标系的基本原理是：",paraId:4,tocIndex:1},{value:"定义一个焦点位置（focusX, focusY）",paraId:5,tocIndex:1},{value:"设置畸变程度（distortionX, distortionY）",paraId:5,tocIndex:1},{value:"根据点到焦点的距离，应用非线性变换",paraId:5,tocIndex:1},{value:"距离焦点越近的点变换后间距越大（放大效果）",paraId:5,tocIndex:1},{value:"距离焦点越远的点变换后间距越小（压缩效果）",paraId:5,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  coordinate: {\n    transform: [{ type: 'fisheye', focusX: 0.5, focusY: 0.5 }],\n  },\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n  },\n  encode: {\n    x: 'GDP',\n    y: 'LifeExpectancy',\n    size: 'Population',\n    color: 'continent',\n    shape: 'point',\n  },\n  scale: {\n    size: {\n      type: 'log',\n      range: [4, 20],\n    },\n  },\n  style: {\n    fillOpacity: 0.3,\n    lineWidth: 1,\n  },\n});\n\nchart.render();\n",paraId:6,tocIndex:2},{value:"鱼眼坐标系特别适合以下场景：",paraId:7,tocIndex:3},{value:"密集数据可视化",paraId:8,tocIndex:3},{value:"：当数据点过于密集时，鱼眼效果可以帮助用户聚焦于特定区域，同时保持对整体数据的感知",paraId:8,tocIndex:3},{value:"网络图分析",paraId:8,tocIndex:3},{value:"：在大型网络图中，鱼眼效果可以放大关注的节点和连接，同时保持网络的整体结构",paraId:8,tocIndex:3},{value:"地图导航",paraId:8,tocIndex:3},{value:"：在地图可视化中，鱼眼效果可以放大特定区域，同时保持对周围环境的感知",paraId:8,tocIndex:3},{value:"交互式数据探索",paraId:8,tocIndex:3},{value:"：结合鼠标交互，用户可以动态调整焦点位置，实现数据的动态放大和缩小",paraId:8,tocIndex:3},{value:"畸变程度",paraId:9,tocIndex:4},{value:"：畸变程度（distortionX/distortionY）设置过大会导致视觉失真严重，建议根据实际数据分布调整",paraId:9,tocIndex:4},{value:"焦点位置",paraId:9,tocIndex:4},{value:"：焦点位置（focusX/focusY）应该根据数据分布和用户关注点来设置",paraId:9,tocIndex:4},{value:"交互体验",paraId:9,tocIndex:4},{value:"：在交互式应用中，鱼眼效果的变化应该平滑，避免突变导致的视觉不适",paraId:9,tocIndex:4},{value:"鱼眼坐标系的配置项如下：",paraId:10,tocIndex:5},{value:"属性",paraId:11,tocIndex:5},{value:"描述",paraId:11,tocIndex:5},{value:"类型",paraId:11,tocIndex:5},{value:"默认值",paraId:11,tocIndex:5},{value:"必选",paraId:11,tocIndex:5},{value:"focusX",paraId:11,tocIndex:5},{value:"鱼眼变换中心点 x 方向位置",paraId:11,tocIndex:5},{value:"number",paraId:11,tocIndex:5},{value:"0",paraId:11,tocIndex:5},{value:"focusY",paraId:11,tocIndex:5},{value:"鱼眼变换中心点 y 方向位置",paraId:11,tocIndex:5},{value:"number",paraId:11,tocIndex:5},{value:"0",paraId:11,tocIndex:5},{value:"distortionX",paraId:11,tocIndex:5},{value:"鱼眼变换 x 方向畸变大小",paraId:11,tocIndex:5},{value:"number",paraId:11,tocIndex:5},{value:"2",paraId:11,tocIndex:5},{value:"distortionY",paraId:11,tocIndex:5},{value:"鱼眼变换 y 方向畸变大小",paraId:11,tocIndex:5},{value:"number",paraId:11,tocIndex:5},{value:"2",paraId:11,tocIndex:5},{value:"visual",paraId:11,tocIndex:5},{value:"focusX 和 focusY 的值是否是视觉坐标点",paraId:11,tocIndex:5},{value:"boolean",paraId:11,tocIndex:5},{value:"false",paraId:11,tocIndex:5},{value:"focusX/focusY",paraId:12,tocIndex:6},{value:"：定义鱼眼效果的焦点位置。当 ",paraId:12,tocIndex:6},{value:"visual=false",paraId:12,tocIndex:6},{value:" 时，取值范围为 [0, 1]，表示归一化坐标；当 ",paraId:12,tocIndex:6},{value:"visual=true",paraId:12,tocIndex:6},{value:" 时，表示实际的视觉坐标点。",paraId:12,tocIndex:6},{value:"distortionX/distortionY",paraId:12,tocIndex:6},{value:"：控制鱼眼效果的畸变程度，值越大，畸变效果越明显。",paraId:12,tocIndex:6},{value:"visual",paraId:12,tocIndex:6},{value:"：决定 focusX 和 focusY 的坐标系统。设为 true 时，使用视觉坐标系统；设为 false 时，使用归一化坐标系统。",paraId:12,tocIndex:6},{value:"最简单的用法是设置一个固定的鱼眼焦点，适用于需要突出显示特定区域的场景。",paraId:13,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  coordinate: {\n    transform: [\n      {\n        type: 'fisheye',\n        focusX: 0.7,\n        focusY: 0.3,\n        distortionX: 3,\n        distortionY: 3,\n      },\n    ],\n  },\n  type: 'point',\n  data: [\n    { x: 1, y: 1, category: 'A' },\n    { x: 2, y: 2, category: 'B' },\n    { x: 3, y: 3, category: 'C' },\n    { x: 4, y: 4, category: 'D' },\n    { x: 5, y: 5, category: 'E' },\n    { x: 6, y: 6, category: 'F' },\n    { x: 7, y: 7, category: 'G' },\n    { x: 8, y: 8, category: 'H' },\n    { x: 9, y: 9, category: 'I' },\n  ],\n  encode: {\n    x: 'x',\n    y: 'y',\n    color: 'category',\n    shape: 'point',\n  },\n  style: {\n    r: 6,\n    lineWidth: 1,\n  },\n});\n\nchart.render();\n",paraId:14,tocIndex:8},{value:"通过添加交互组件，可以实现动态的鱼眼效果，焦点随鼠标移动而变化。",paraId:15,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n  },\n  encode: {\n    x: 'GDP',\n    y: 'LifeExpectancy',\n    size: 'Population',\n    color: 'continent',\n    shape: 'point',\n  },\n  scale: {\n    size: {\n      type: 'log',\n      range: [4, 20],\n    },\n  },\n  style: {\n    fillOpacity: 0.3,\n    lineWidth: 1,\n  },\n  interaction: {\n    fisheye: true, // 启用鱼眼交互\n  },\n});\n\nchart.render();\n",paraId:16,tocIndex:9},{value:"以下是一个结合了鱼眼坐标系和散点图的完整示例，展示了如何使用鱼眼效果来分析多维数据：",paraId:17,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  width: 800,\n  height: 500,\n  padding: [40, 60, 60, 80],\n  coordinate: {\n    transform: [\n      {\n        type: 'fisheye',\n        focusX: 0.6,\n        focusY: 0.4,\n        distortionX: 2.5,\n        distortionY: 2.5,\n      },\n    ],\n  },\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n  },\n  encode: {\n    x: 'GDP',\n    y: 'LifeExpectancy',\n    size: 'Population',\n    color: 'continent',\n    shape: 'point',\n  },\n  scale: {\n    size: {\n      type: 'log',\n      range: [4, 20],\n    },\n    x: {\n      nice: true,\n    },\n    y: {\n      nice: true,\n    },\n  },\n  style: {\n    fillOpacity: 0.6,\n    lineWidth: 1,\n    stroke: '#fff',\n  },\n  legend: {\n    color: {\n      position: 'bottom',\n      layout: 'horizontal',\n    },\n    size: false,\n  },\n  axis: {\n    x: {\n      title: 'GDP',\n      titleFill: '#333',\n      labelFontSize: 12,\n    },\n    y: {\n      title: '预期寿命',\n      titleFill: '#333',\n      labelFontSize: 12,\n    },\n  },\n  tooltip: {\n    title: (d) => d.country,\n    items: [\n      (d) => ({ name: 'GDP', value: d.GDP }),\n      (d) => ({ name: '预期寿命', value: d.LifeExpectancy }),\n      (d) => ({ name: '人口', value: d.Population }),\n    ],\n  },\n});\n\nchart.render();\n",paraId:18,tocIndex:10},{value:"这个示例展示了如何创建一个功能完整的鱼眼坐标系散点图，包括以下特性：",paraId:19,tocIndex:10},{value:"设置适当的鱼眼焦点和畸变程度，突出显示关键区域",paraId:20,tocIndex:10},{value:"使用多个数据维度（GDP、预期寿命、人口）创建散点图",paraId:20,tocIndex:10},{value:"根据大洲设置点的颜色，使用人口大小设置点的大小",paraId:20,tocIndex:10},{value:"自定义坐标轴和图例样式，提高可读性",paraId:20,tocIndex:10},{value:"添加交互式提示信息，显示详细数据",paraId:20,tocIndex:10},{value:"鱼眼坐标系变换可以与其他坐标系变换组合使用，例如与 transpose 变换组合：",paraId:21,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  coordinate: {\n    transform: [\n      { type: 'transpose' },\n      {\n        type: 'fisheye',\n        focusX: 0.5,\n        focusY: 0.5,\n        distortionX: 2,\n        distortionY: 2,\n      },\n    ],\n  },\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    color: 'genre',\n  },\n});\n\nchart.render();\n",paraId:22,tocIndex:11},{value:"鱼眼坐标系是一种强大的可视化工具，特别适合处理密集数据和需要关注局部细节的场景。通过合理设置焦点位置和畸变程度，可以在保持全局视图的同时突出显示关键区域。结合交互功能，鱼眼效果可以提供更加灵活和直观的数据探索体验。",paraId:23,tocIndex:12},{value:"在实际应用中，建议根据数据分布和用户需求调整鱼眼参数，避免过度畸变导致的视觉失真。同时，考虑与其他坐标系变换和交互组件的组合，可以创建更加丰富和有效的可视化效果。",paraId:24,tocIndex:12}]},92061:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(71765);const t=[{value:"helix",paraId:0},{value:" 坐标系是一种将二维数据沿螺旋线展开的坐标系统。它常用于可视化时间序列数据或基因表达数据，通过螺旋的延伸来展示数据的周期性或趋势。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  height: 500,\n});\n\n// 模拟数据\nconst data = [];\nfor (let i = 0; i < 372; i++) {\n  const time = new Date(Date.now() + i * 1000 * 3600 * 24)\n    .toISOString()\n    .split('T')[0];\n  data.push({ time, value: Math.random() * 100 });\n}\n\nchart.data(data);\n\nchart.coordinate({\n  type: 'helix',\n  startAngle: 0.5 * Math.PI, // 起始角度\n  endAngle: 12.5 * Math.PI, // 结束角度\n});\n\nchart\n  .interval()\n  .encode('x', 'time')\n  .encode('y', 'value')\n  .encode('color', 'value')\n  .scale('color', { range: ['#ffffff', '#1890FF'] });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"参数",paraId:2,tocIndex:0},{value:"说明",paraId:2,tocIndex:0},{value:"类型",paraId:2,tocIndex:0},{value:"默认值",paraId:2,tocIndex:0},{value:"startAngle",paraId:2,tocIndex:0},{value:"螺旋线的起始角度（弧度）",paraId:2,tocIndex:0},{value:"number",paraId:2,tocIndex:0},{value:"0",paraId:2,tocIndex:0},{value:"endAngle",paraId:2,tocIndex:0},{value:"螺旋线的结束角度（弧度）",paraId:2,tocIndex:0},{value:"number",paraId:2,tocIndex:0},{value:"Math.PI * 6",paraId:2,tocIndex:0},{value:"innerRadius",paraId:2,tocIndex:0},{value:"螺旋线的内半径（0 到 1）",paraId:2,tocIndex:0},{value:"number",paraId:2,tocIndex:0},{value:"0",paraId:2,tocIndex:0},{value:"outerRadius",paraId:2,tocIndex:0},{value:"螺旋线的外半径（0 到 1）",paraId:2,tocIndex:0},{value:"number",paraId:2,tocIndex:0},{value:"1",paraId:2,tocIndex:0}]},48037:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(63873);const t=[{value:"在可视化的视觉通道(Channels)中，位置(Position)是最具有感知优势的视觉编码方式。它不仅具有最高的识别准确度，而且能够同时有效地表达定性数据（类别）和定量数据。为了系统地组织这种空间位置映射，我们引入了 ",paraId:0},{value:"坐标系（Coordinate）",paraId:0},{value:" 的概念。在 G2 的实现中，坐标系统负责管理一系列的空间变换。具体来说，图形标记（Mark）的位置属性（x 和 y）首先会通过比例尺（Scale）映射到标准化的 ",paraId:0},{value:"[0, 1]",paraId:0},{value:" 区间，随后坐标系统会将这些标准化的位置信息转换为最终的画布坐标，从而实现不同空间布局形式的可视化表达。",paraId:0},{value:"坐标系配置主要关注坐标转换，起始结束弧度，内外半径等，有关坐标轴刻度，刻度值配置等内容请前往 ",paraId:1},{value:"图表组件-坐标轴",paraId:2},{value:"。",paraId:1},{value:"坐标系可以设置在 View 层级：",paraId:3,tocIndex:0},{value:"({\n  type: 'view',\n  coordinate: { type: 'polar' },\n});\n",paraId:4,tocIndex:0},{value:"// API\nchart.coordinate({ type: 'polar' });\n",paraId:5,tocIndex:0},{value:"每一个视图只能拥有一个坐标系。坐标系除了本身的属性之外，还包含一系列",paraId:6,tocIndex:0},{value:"坐标系变换（Coordinate Transform）",paraId:6,tocIndex:0},{value:"。",paraId:6,tocIndex:0},{value:"({\n  type: 'polar', // 类型\n  innerRadius: 0.6, // 本身的属性\n  outerRadius: 0.8,\n  transform: [{ type: 'transpose' }], // 坐标系变换\n});\n",paraId:7,tocIndex:0},{value:"也可以设置在 Mark 层级：",paraId:8,tocIndex:0},{value:"({\n  type: 'interval',\n  coordinate: { type: 'polar' },\n});\n",paraId:9,tocIndex:0},{value:"// API\nchart.interval().coordinate({ type: 'polar' });\n",paraId:10,tocIndex:0},{value:"标记层级的坐标系拥有 ",paraId:11,tocIndex:0},{value:"冒泡性",paraId:11,tocIndex:0},{value:"。标记层级的坐标系会和视图的坐标系进行合并，并且第一个标记的坐标系优先级最高。",paraId:11,tocIndex:0},{value:"chart.coordinate({ type: 'theta' });\nchart.line().coordinate({ type: 'polar' });\nchart.area().coordinate({ type: 'radial' });\n",paraId:12,tocIndex:0},{value:"和下面的情况等价：",paraId:13,tocIndex:0},{value:"chart.coordinate({ type: 'polar' });\nchart.line();\nchart.area():\n",paraId:14,tocIndex:0},{value:"这个特性有利于封装和坐标系相关的复合标记，比如饼图：",paraId:15,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nfunction Pie({ encode = {}, ...rest } = {}) {\n  const { value, ...restEncode } = encode;\n  return {\n    ...rest,\n    type: 'interval',\n    coordinate: { type: 'theta' }, // 封装坐标系\n    transform: [{ type: 'stackY' }],\n    encode: {\n      ...restEncode,\n      y: value,\n    },\n  };\n}\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: Pie, // 使用该复合 Mark\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { value: 'sold', color: 'genre' },\n  labels: [\n    {\n      text: 'sold',\n    },\n  ],\n});\n\nchart.render();\n",paraId:16,tocIndex:0},{value:'默认的坐标系是笛卡尔坐标系，除此之外，还有一类坐标系是把图表转换到极坐标系下，用于绘制一系列"圆"形的图，这类坐标系被称为',paraId:17,tocIndex:1},{value:"径向坐标系（Radial Coordinate）",paraId:17,tocIndex:1},{value:"。",paraId:17,tocIndex:1},{value:"坐标系名称",paraId:18,tocIndex:1},{value:"描述",paraId:18,tocIndex:1},{value:"示例",paraId:18,tocIndex:1},{value:"cartesian",paraId:18,tocIndex:1},{value:"笛卡尔坐标系，G2 默认的坐标系。",paraId:18,tocIndex:1},{value:"helix",paraId:18,tocIndex:1},{value:"螺旋坐标系，基于阿基米德螺旋线。",paraId:18,tocIndex:1},{value:"parallel",paraId:18,tocIndex:1},{value:"平行坐标系，将多个数据维度映射到平行排列的坐标轴。",paraId:18,tocIndex:1},{value:"polar",paraId:18,tocIndex:1},{value:"极坐标系，角度和半径构建成的二维坐标系。",paraId:18,tocIndex:1},{value:"  ",paraId:18,tocIndex:1},{value:"radar",paraId:18,tocIndex:1},{value:"雷达坐标系，结合了平行坐标系和极坐标系的特点，用于绘制雷达图。",paraId:18,tocIndex:1},{value:" ",paraId:18,tocIndex:1},{value:"radial",paraId:18,tocIndex:1},{value:"一种特殊的极坐标系，它通过将极坐标系进行转置得到，常用于绘制玉珏图等。",paraId:18,tocIndex:1},{value:"theta",paraId:18,tocIndex:1},{value:"一种特殊的极坐标系，半径长度固定，仅仅将数据映射到角度，常用于饼图的绘制。",paraId:18,tocIndex:1},{value:" ",paraId:18,tocIndex:1},{value:"笛卡尔坐标系，G2 中默认的坐标系。",paraId:19,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 0 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  style: { minHeight: 50 },\n});\n\nchart.render();\n",paraId:20,tocIndex:2},{value:"螺旋坐标系是一种基于阿基米德螺旋线的极坐标系变体，通过螺旋形参数化方式将数据映射到平面上。它继承了极坐标系的角度-半径维度特性，但增加了螺旋线的动态扩展特征，特别适合展示具有周期性、累积性或多层级关系的数据。",paraId:21,tocIndex:3},{value:"坐标变换",paraId:22,tocIndex:3},{value:"：",paraId:22,tocIndex:3},{value:"半径扩展：r = r0 + kθ（r0 为起始半径，k 为螺旋间距系数，θ 为旋转角度）",paraId:23,tocIndex:3},{value:"角度映射：θ 由数据值线性转换而来，范围通过 startAngle 和 endAngle 定义",paraId:23,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\n// mock data\nconst data = [];\nconst n = 31;\nfor (let i = 0; i < 372; i++) {\n  const now = new Date();\n  const currentTime = new Date(now.getTime() + i * 1000 * 3600 * 24);\n  const formattedTime = `${currentTime.getFullYear()}.${String(\n    currentTime.getMonth() + 1,\n  ).padStart(2, '0')}.${String(currentTime.getDate()).padStart(2, '0')}`;\n\n  data[i] = {};\n  data[i].time = formattedTime;\n\n  const random = Math.floor(Math.random() * 10);\n  if ((i % n > 2 && i % n < 4) || (i % n >= 6 && i % n < 7)) {\n    data[i].value = 30 + random * 7;\n  } else if (i % n >= 4 && i % n < 6) {\n    data[i].value = 60 + random * 8;\n  } else {\n    data[i].value = 10 + random * 5;\n  }\n}\n\nchart.options({\n  type: 'interval',\n  height: 500,\n  data: {\n    value: data,\n  },\n  encode: { x: 'time', y: 'value', color: 'value' },\n  scale: { color: { type: 'linear', range: ['#ffffff', '#1890FF'] } },\n  coordinate: {\n    type: 'helix',\n    startAngle: 0.5 * Math.PI,\n    endAngle: 12.5 * Math.PI,\n  },\n  animate: { enter: { type: 'fadeIn' } },\n  tooltip: { title: 'time' },\n});\n\nchart.render();\n",paraId:24,tocIndex:3},{value:"平行坐标系是一种用于可视化多维数据的坐标系，它将多个变量映射到平行的坐标轴上，每条数据记录表示为连接各个坐标轴上对应值的折线。",paraId:25,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst baseAxis = {\n  zIndex: 1,\n  titlePosition: 'right',\n  line: true,\n  labelStroke: '#fff',\n  labelLineWidth: 5,\n  labelFontSize: 10,\n  labelStrokeLineJoin: 'round',\n  titleStroke: '#fff',\n  titleFontSize: 10,\n  titleLineWidth: 5,\n  titleStrokeLineJoin: 'round',\n  titleTransform: 'translate(-50%, 0) rotate(-90)',\n  lineStroke: 'black',\n  tickStroke: 'black',\n  lineLineWidth: 1,\n};\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/cars3.json',\n  },\n  encode: {\n    position: [\n      'economy (mpg)',\n      'cylinders',\n      'displacement (cc)',\n      'power (hp)',\n      'weight (lb)',\n      '0-60 mph (s)',\n      'year',\n    ],\n    color: 'weight (lb)',\n  },\n  scale: { color: { palette: 'brBG', offset: (t) => 1 - t } },\n  coordinate: { type: 'parallel' },\n  style: { lineWidth: 1.5, strokeOpacity: 0.4 },\n  legend: { color: { length: 400, layout: { justifyContent: 'center' } } },\n  interaction: { tooltip: { series: false } },\n  axis: {\n    position: baseAxis,\n    position1: baseAxis,\n    position2: baseAxis,\n    position3: baseAxis,\n    position4: baseAxis,\n    position5: baseAxis,\n    position6: baseAxis,\n    position7: baseAxis,\n  },\n});\n\nchart.render();\n",paraId:26,tocIndex:4},{value:"极坐标系，是一种非笛卡尔坐标系，将直角坐标系的点 (x, y) 转换为极坐标系下的点 (r, θ)，其中 r 是半径，θ 是角度。极坐标系在可视化中常用于展示周期性数据、相对关系或分布差异。",paraId:27,tocIndex:5},{value:"坐标变换",paraId:28,tocIndex:5},{value:"：",paraId:28,tocIndex:5},{value:"极坐标系将笛卡尔坐标系中的点 (x, y) 转换为极坐标系下的点 (r, θ)。",paraId:29,tocIndex:5},{value:"其中 r 表示到原点的距离（半径），θ 表示与 x 轴的夹角（弧度）。",paraId:29,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  coordinate: { type: 'polar' },\n  axis: { y: false },\n});\nchart.render();\n",paraId:30,tocIndex:5},{value:"雷达坐标系是极坐标系的特化形式，结合平行坐标系，通过等角分布的 N 个独立维度轴构建星形网格，专为多维数据对比分析设计。每个轴代表一个独立度量维度，数据点通过封闭多边形呈现多维度特征。",paraId:31,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst position = ['Points', 'Rebounds', 'Assists', 'Steals', 'Blocks'];\nconst data = [\n  {\n    name: 'Jordan',\n    Points: 30.1,\n    Rebounds: 6.2,\n    Assists: 5.3,\n    Steals: 2.3,\n    Blocks: 0.8,\n  },\n  {\n    name: 'LeBron James',\n    Points: 27.0,\n    Rebounds: 7.4,\n    Assists: 7.4,\n    Steals: 1.6,\n    Blocks: 0.8,\n  },\n];\n\nchart.options({\n  type: 'line',\n  title: 'Jordan vs LeBron James NBA Stats Comparison',\n  data,\n  coordinate: { type: 'radar' },\n  encode: {\n    position: ['Points', 'Rebounds', 'Assists', 'Steals', 'Blocks'],\n    color: 'name',\n  },\n  style: {\n    lineWidth: 1.5,\n    strokeOpacity: 0.4,\n  },\n  scale: Object.fromEntries(\n    Array.from({ length: position.length }, (_, i) => [\n      `position${i === 0 ? '' : i}`,\n      {\n        domainMin: 0,\n        nice: true,\n      },\n    ]),\n  ),\n  interaction: { tooltip: { series: false } },\n  axis: Object.fromEntries(\n    Array.from({ length: position.length }, (_, i) => [\n      `position${i === 0 ? '' : i}`,\n      {\n        zIndex: 1,\n        titleFontSize: 10,\n        titleSpacing: 8,\n        label: true,\n        labelFill: '#000',\n        labelOpacity: 0.45,\n        labelFontSize: 10,\n        line: true,\n        lineFill: '#000',\n        lineOpacity: 0.25,\n      },\n    ]),\n  ),\n});\nchart.render();\n",paraId:32,tocIndex:6},{value:"径向坐标系是极坐标系的扩展实现，通过环形空间布局增强数据层次表现力。",paraId:33,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  coordinate: { type: 'radial', innerRadius: 0.1, endAngle: Math.PI },\n  axis: {\n    y: false,\n    x: {\n      title: null,\n    },\n  },\n  legend: false,\n  transform: [{ type: 'sortX', by: 'y' }],\n});\nchart.render();\n",paraId:34,tocIndex:7},{value:"Theta 坐标系是极坐标系的特化形式，通过固定半径维度、强化角度维度分析能力，专为环形数据可视化设计。在 G2 中主要应用于饼图等角度主导型图表。",paraId:35,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { y: 'sold', color: 'genre' },\n  coordinate: { type: 'theta' },\n  transform: [{ type: 'stackY' }],\n});\nchart.render();\n",paraId:36,tocIndex:8},{value:"上面的坐标系都可以和坐标系变换结合使用。",paraId:37,tocIndex:9},{value:"坐标系变换的配置方式如下，可以同时配置多个 transform ：",paraId:38,tocIndex:9},{value:"({\n  coordinate: {\n    transform: [\n      { type: 'transpose' },\n      {\n        type: 'fisheye',\n        focusX: 0.1,\n        focusY: 0.1,\n        distortionX: 4,\n        distortionY: 4,\n      },\n    ],\n  },\n});\n",paraId:39,tocIndex:9},{value:"比较常用的一种变换是转置变换，主要用来改变图表的方向。比如绘制水平的条形图。",paraId:40,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold' },\n  coordinate: { transform: [{ type: 'transpose' }] },\n});\nchart.render();\n",paraId:41,tocIndex:10},{value:"鱼眼坐标系是一种特殊的坐标系变换，它对输入的维度应用笛卡尔鱼眼效果，使得焦点区域被放大，而远离焦点的区域则被压缩。这种变换类似于鱼眼镜头的视觉效果，能够在保持全局视图的同时突出显示局部细节。",paraId:42,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  width: 800,\n  height: 500,\n  padding: [40, 60, 60, 80],\n  coordinate: {\n    transform: [\n      {\n        type: 'fisheye',\n        focusX: 0.1,\n        focusY: 0.1,\n        distortionX: 4,\n        distortionY: 4,\n      },\n    ],\n  },\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n  },\n  encode: {\n    x: 'GDP',\n    y: 'LifeExpectancy',\n    size: 'Population',\n    color: 'continent',\n    shape: 'point',\n  },\n  scale: {\n    size: {\n      type: 'log',\n      range: [4, 20],\n    },\n    x: {\n      nice: true,\n    },\n    y: {\n      nice: true,\n    },\n  },\n  style: {\n    fillOpacity: 0.6,\n    lineWidth: 1,\n    stroke: '#fff',\n  },\n  legend: {\n    color: {\n      position: 'bottom',\n      layout: 'horizontal',\n    },\n    size: false,\n  },\n  axis: {\n    x: {\n      title: 'GDP',\n      titleFill: '#333',\n      labelFontSize: 12,\n    },\n    y: {\n      title: '预期寿命',\n      titleFill: '#333',\n      labelFontSize: 12,\n    },\n  },\n  tooltip: {\n    title: (d) => d.country,\n    items: [\n      (d) => ({ name: 'GDP', value: d.GDP }),\n      (d) => ({ name: '预期寿命', value: d.LifeExpectancy }),\n      (d) => ({ name: '人口', value: d.Population }),\n    ],\n  },\n});\n\nchart.render();\n",paraId:43,tocIndex:11},{value:"目前我们仅支持 ",paraId:44,tocIndex:12},{value:"cartesian3D",paraId:44,tocIndex:12},{value:" 坐标系，cartesian3D 在 2D 笛卡尔坐标系基础上，通过增加 Z 轴扩展而来。",paraId:44,tocIndex:12},{value:"import { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\nimport { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\n\n// Create a WebGL renderer.\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ThreeDPlugin());\nrenderer.registerPlugin(new ControlPlugin());\n\n// Customize our own Chart with threedlib.\nconst Chart = extend(Runtime, { ...corelib(), ...threedlib() });\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  depth: 400, // Define the depth of chart.\n});\n\nchart.options({\n  type: 'point3D',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  },\n  encode: {\n    x: 'Horsepower',\n    y: 'Miles_per_Gallon',\n    z: 'Weight_in_lbs',\n    color: 'Origin',\n    shape: 'cube',\n  },\n  coordinate: { type: 'cartesian3D' },\n  scale: {\n    x: {\n      nice: true,\n    },\n    y: {\n      nice: true,\n    },\n    z: {\n      nice: true,\n    },\n  },\n  legend: false,\n  axis: {\n    x: {\n      gridLineWidth: 2,\n    },\n    y: {\n      gridLineWidth: 2,\n      titleBillboardRotation: -Math.PI / 2,\n    },\n    z: {\n      gridLineWidth: 2,\n    },\n  },\n});\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setType(CameraType.ORBITING);\n\n  // Add a directional light into scene.\n  const light = new DirectionalLight({\n    style: {\n      intensity: 3,\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n});\n",paraId:45,tocIndex:12}]},40003:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(24828);const t=[{value:"平行坐标系（Parallel）是一种用于可视化多维数据的坐标系，它将多个变量映射到平行的坐标轴上，每条数据记录表示为连接各个坐标轴上对应值的折线。平行坐标系特别适合用于分析多个变量之间的关系和模式，以及识别数据集中的异常值和聚类。",paraId:0,tocIndex:0},{value:"在 G2 中，平行坐标系通过将笛卡尔直角坐标系变换为平行坐标系来实现，每个数据维度对应一个垂直的坐标轴。",paraId:1,tocIndex:0},{value:"平行坐标系的基本原理是：",paraId:2,tocIndex:1},{value:"将多个数据维度映射到平行排列的坐标轴上",paraId:3,tocIndex:1},{value:"每条数据记录表示为穿过所有坐标轴的折线",paraId:3,tocIndex:1},{value:"线在每个坐标轴上的位置对应该维度的数据值",paraId:3,tocIndex:1},{value:"平行坐标系有两种常见的布局方式：",paraId:4,tocIndex:1},{value:"垂直布局：坐标轴垂直排列（默认）",paraId:5,tocIndex:1},{value:"水平布局：通过 transpose 变换将坐标轴水平排列",paraId:5,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// 定义维度数组\nconst dimensions = [\n  'Cylinders',\n  'Displacement',\n  'Weight_in_lbs',\n  'Horsepower',\n  'Acceleration',\n  'Miles_per_Gallon',\n  'Year',\n];\n\nchart.options({\n  type: 'line',\n  width: 720,\n  paddingLeft: 60,\n  coordinate: { type: 'parallel' },\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/96cd81b5-54a4-4fe8-b778-502b2114df58.json',\n    callback: (d) => Object.assign(d, { year: new Date(d.year) }),\n    transform: [\n      {\n        type: 'filter',\n        callback: (d) => d.Horsepower != null && d.Miles_per_Gallon != null,\n      },\n    ],\n  },\n  encode: {\n    position: dimensions,\n    color: 'Origin',\n    size: 1.01,\n  },\n  style: {\n    strokeOpacity: 0.3,\n  },\n  scale: {\n    position: { nice: true },\n    position1: { nice: true },\n    position2: { nice: true },\n    position3: { nice: true },\n    position4: { nice: true },\n    position5: { nice: true },\n  },\n  axis: {\n    position: { zIndex: 1 },\n    position1: { zIndex: 1 },\n    position2: { zIndex: 1 },\n    position3: { zIndex: 1 },\n    position4: { zIndex: 1 },\n    position5: { zIndex: 1 },\n  },\n});\n\nchart.render();\n",paraId:6,tocIndex:2},{value:"平行坐标系特别适合以下场景：",paraId:7,tocIndex:3},{value:"多维数据分析",paraId:8,tocIndex:3},{value:"：当需要同时分析多个变量之间的关系时，平行坐标系可以在一个视图中展示所有维度",paraId:8,tocIndex:3},{value:"模式识别",paraId:8,tocIndex:3},{value:"：通过观察线条的走向，可以识别数据中的模式和趋势",paraId:8,tocIndex:3},{value:"异常值检测",paraId:8,tocIndex:3},{value:"：异常数据通常会表现为与大多数线条路径明显不同的线条",paraId:8,tocIndex:3},{value:"聚类分析",paraId:8,tocIndex:3},{value:"：相似的数据记录会形成相似的线条路径，便于识别数据聚类",paraId:8,tocIndex:3},{value:"数据量",paraId:9,tocIndex:4},{value:"：当数据记录过多时，线条会重叠导致视觉混乱，建议使用透明度或交互式筛选",paraId:9,tocIndex:4},{value:"轴的顺序",paraId:9,tocIndex:4},{value:"：坐标轴的排列顺序会影响可视化效果，相关性强的变量放在相邻位置通常更有利于分析",paraId:9,tocIndex:4},{value:"轴的缩放",paraId:9,tocIndex:4},{value:"：不同维度的数据范围可能差异很大，需要适当设置比例尺以便更好地比较",paraId:9,tocIndex:4},{value:"平行坐标系的配置项相对简单，主要通过 ",paraId:10,tocIndex:5},{value:"coordinate",paraId:10,tocIndex:5},{value:" 属性进行设置：",paraId:10,tocIndex:5},{value:"属性",paraId:11,tocIndex:5},{value:"说明",paraId:11,tocIndex:5},{value:"类型",paraId:11,tocIndex:5},{value:"默认值",paraId:11,tocIndex:5},{value:"必选",paraId:11,tocIndex:5},{value:"transform",paraId:11,tocIndex:5},{value:"坐标系变换，可用于实现水平布局",paraId:11,tocIndex:5},{value:"Transform[]",paraId:11,tocIndex:5},{value:"[]",paraId:11,tocIndex:5},{value:"平行坐标系支持以下坐标系变换：",paraId:12,tocIndex:6},{value:"变换类型",paraId:13,tocIndex:6},{value:"说明",paraId:13,tocIndex:6},{value:"示例",paraId:13,tocIndex:6},{value:"transpose",paraId:13,tocIndex:6},{value:"将垂直布局转换为水平布局",paraId:13,tocIndex:6},{value:"{ transform: [{ type: 'transpose' }] }",paraId:13,tocIndex:6},{value:"垂直平行坐标系是最常见的平行坐标系布局，坐标轴垂直排列。",paraId:14,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  coordinate: { type: 'parallel' },\n  data: [\n    { dim1: 10, dim2: 30, dim3: 20, dim4: 60, category: 'A' },\n    { dim1: 20, dim2: 20, dim3: 30, dim4: 40, category: 'B' },\n    { dim1: 30, dim2: 10, dim3: 40, dim4: 20, category: 'C' },\n  ],\n  encode: {\n    position: ['dim1', 'dim2', 'dim3', 'dim4'],\n    color: 'category',\n  },\n  style: {\n    lineWidth: 2,\n    strokeOpacity: 0.7,\n  },\n  scale: {\n    color: {\n      palette: 'spectral',\n    },\n  },\n  axis: {\n    position: { zIndex: 1 },\n    position1: { zIndex: 1 },\n    position2: { zIndex: 1 },\n    position3: { zIndex: 1 },\n  },\n});\n\nchart.render();\n",paraId:15,tocIndex:8},{value:"通过添加 transpose 变换，可以将坐标轴水平排列，创建水平平行坐标系。",paraId:16,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  coordinate: {\n    type: 'parallel',\n    transform: [{ type: 'transpose' }],\n  },\n  data: [\n    { dim1: 10, dim2: 30, dim3: 20, dim4: 60, category: 'A' },\n    { dim1: 20, dim2: 20, dim3: 30, dim4: 40, category: 'B' },\n    { dim1: 30, dim2: 10, dim3: 40, dim4: 20, category: 'C' },\n  ],\n  encode: {\n    position: ['dim1', 'dim2', 'dim3', 'dim4'],\n    color: 'category',\n  },\n  style: {\n    lineWidth: 2,\n    strokeOpacity: 0.7,\n  },\n  scale: {\n    color: {\n      palette: 'spectral',\n    },\n  },\n  axis: {\n    position: { zIndex: 1 },\n    position1: { zIndex: 1 },\n    position2: { zIndex: 1 },\n    position3: { zIndex: 1 },\n  },\n});\n\nchart.render();\n",paraId:17,tocIndex:9},{value:"平行坐标系通常需要交互来增强分析能力，例如添加轴的高亮和筛选功能。",paraId:18,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// 定义维度数组\nconst dimensions = [\n  'economy (mpg)',\n  'cylinders',\n  'displacement (cc)',\n  'power (hp)',\n  'weight (lb)',\n];\n\nchart.options({\n  type: 'line',\n  coordinate: { type: 'parallel' },\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/cars3.json',\n  },\n  encode: {\n    position: dimensions,\n    color: 'cylinders',\n  },\n  style: {\n    lineWidth: 1.5,\n    strokeOpacity: 0.4,\n  },\n  scale: {\n    color: {\n      palette: 'brBG',\n    },\n  },\n  axis: {\n    position: { zIndex: 1 },\n    position1: { zIndex: 1 },\n    position2: { zIndex: 1 },\n    position3: { zIndex: 1 },\n    position4: { zIndex: 1 },\n  },\n  interaction: {\n    tooltip: { series: false },\n    brushAxisHighlight: true,\n  },\n  state: {\n    active: { lineWidth: 3 },\n    inactive: { stroke: 'grey', opacity: 0.3 },\n  },\n});\n\nchart.render();\n",paraId:19,tocIndex:10},{value:"以下是一个完整的平行坐标系示例，展示了如何使用平行坐标系分析多维数据：",paraId:20,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// 定义维度数组\nconst dimensions = [\n  'Cylinders',\n  'Displacement',\n  'Weight_in_lbs',\n  'Horsepower',\n  'Acceleration',\n  'Miles_per_Gallon',\n  'Year',\n];\n\nchart.options({\n  type: 'line',\n  width: 800,\n  height: 500,\n  padding: [40, 100, 60, 100], // 增加四周的内边距，给标签留出更多空间\n  coordinate: { type: 'parallel' },\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/96cd81b5-54a4-4fe8-b778-502b2114df58.json',\n    callback: (d) => Object.assign(d, { year: new Date(d.year) }),\n    transform: [\n      {\n        type: 'filter',\n        callback: (d) => d.Horsepower != null && d.Miles_per_Gallon != null,\n      },\n    ],\n  },\n  encode: {\n    position: dimensions,\n    color: 'Origin',\n    size: 1.01,\n  },\n  style: {\n    strokeOpacity: 0.3,\n  },\n  scale: {\n    // 为所有position设置相同的配置\n    ...Object.fromEntries(\n      dimensions.map((_, i) => [`position${i > 0 ? i : ''}`, { nice: true }]),\n    ),\n    // 为年份设置时间格式\n    Year: {\n      type: 'time',\n      tickCount: 6,\n      mask: 'YYYY',\n    },\n  },\n  axis: {\n    // 定义基础轴配置\n    ...(() => {\n      // 创建基础配置对象\n      const baseAxisConfig = {\n        zIndex: 1,\n        line: true,\n        labelStroke: '#fff',\n        labelLineWidth: 5,\n        labelFontSize: 12,\n        labelStrokeLineJoin: 'round',\n        titleStroke: '#fff',\n        titleFontSize: 14,\n        titleLineWidth: 5,\n        titleStrokeLineJoin: 'round',\n        lineStroke: 'black',\n        tickStroke: 'black',\n        lineLineWidth: 1,\n        grid: null, // 移除网格线\n        tickCount: 5, // 减少刻度数量\n        labelSpacing: 8, // 增加标签与轴的距离\n      };\n\n      // 为每个维度创建配置\n      return Object.fromEntries(\n        dimensions.map((dim, i) => {\n          const key = `position${i > 0 ? i : ''}`;\n          // 为最后一个维度（Year）添加特殊配置\n          if (i === dimensions.length - 1) {\n            return [\n              key,\n              {\n                ...baseAxisConfig,\n                labelFormatter: (text) => text.slice(0, 4), // 只显示年份\n              },\n            ];\n          }\n          return [key, baseAxisConfig];\n        }),\n      );\n    })(),\n  },\n  legend: {\n    color: {\n      position: 'bottom', // 将图例放在底部\n      layout: 'horizontal',\n    },\n  },\n  interaction: {\n    tooltip: { series: false },\n    brushAxisHighlight: {\n      maskFill: '#d8d0c0',\n      maskOpacity: 0.3,\n    },\n  },\n  state: {\n    active: { lineWidth: 3, strokeOpacity: 1 },\n    inactive: { stroke: '#ccc', opacity: 0.3 },\n  },\n});\n\nchart.render();\n",paraId:21,tocIndex:11},{value:"这个示例展示了如何创建一个功能完整的平行坐标系图表，包括以下特性：",paraId:22,tocIndex:11},{value:"使用多个数据维度创建平行坐标轴",paraId:23,tocIndex:11},{value:"根据数据值设置线条颜色",paraId:23,tocIndex:11},{value:"自定义坐标轴样式，提高可读性",paraId:23,tocIndex:11},{value:"添加交互功能，支持轴的高亮和筛选",paraId:23,tocIndex:11},{value:"设置活动和非活动状态样式，增强交互体验",paraId:23,tocIndex:11},{value:"添加图例，帮助理解颜色编码",paraId:23,tocIndex:11},{value:"通过这些配置，可以创建出既美观又实用的平行坐标系可视化，有效地分析多维数据之间的关系。",paraId:24,tocIndex:11}]},49339:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(73479);const t=[{value:"polar",paraId:0,tocIndex:0},{value:"（极坐标系）是一种非笛卡尔坐标系，通过将直角坐标系的点 (x, y) 转换为极坐标系下的点 (r, θ)，其中 r 是半径，θ 是角度。极坐标系在可视化中常用于展示周期性数据、相对关系或分布差异。",paraId:0,tocIndex:0},{value:"圆心作为极点（原点），从圆心向外辐射的直线为极轴",paraId:1,tocIndex:1},{value:"数据点位置由到圆心的距离（半径 r）和与极轴的夹角（角度 θ）共同决定",paraId:2,tocIndex:1},{value:"适合展示循环、周期性、分布型数据",paraId:3,tocIndex:1},{value:"玫瑰图：展示分类数据的数值差异",paraId:4,tocIndex:2},{value:"雷达图：多维度数据比较",paraId:5,tocIndex:2},{value:"极坐标散点图：展示角度与半径的相关性",paraId:6,tocIndex:2},{value:"需要环形布局的各类可视化",paraId:7,tocIndex:2},{value:"属性",paraId:8,tocIndex:3},{value:"描述",paraId:8,tocIndex:3},{value:"类型",paraId:8,tocIndex:3},{value:"默认值",paraId:8,tocIndex:3},{value:"必选",paraId:8,tocIndex:3},{value:"type",paraId:8,tocIndex:3},{value:"坐标系类型，设置为 'polar'",paraId:8,tocIndex:3},{value:"string",paraId:8,tocIndex:3},{value:"无",paraId:8,tocIndex:3},{value:"✓",paraId:8,tocIndex:3},{value:"startAngle",paraId:8,tocIndex:3},{value:"极坐标系起始弧度",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"-Math.PI / 2",paraId:8,tocIndex:3},{value:"endAngle",paraId:8,tocIndex:3},{value:"极坐标系结束弧度",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"(Math.PI * 3) / 2",paraId:8,tocIndex:3},{value:"innerRadius",paraId:8,tocIndex:3},{value:"极坐标内半径，表示为画布高度的百分比 (0-1)",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"0",paraId:8,tocIndex:3},{value:"outerRadius",paraId:8,tocIndex:3},{value:"极坐标外半径，表示为画布高度的百分比 (0-1)",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"1",paraId:8,tocIndex:3},{value:"transform",paraId:8,tocIndex:3},{value:"坐标系变换配置",paraId:8,tocIndex:3},{value:"CoordinateTransform[]",paraId:8,tocIndex:3},{value:"undefined",paraId:8,tocIndex:3},{value:"复杂类型说明：",paraId:9,tocIndex:3},{value:"startAngle",paraId:10,tocIndex:3},{value:" 和 ",paraId:10,tocIndex:3},{value:"endAngle",paraId:10,tocIndex:3},{value:" 以弧度为单位，默认值分别为 -π/2 和 3π/2，构成一个完整圆（2π）。",paraId:10,tocIndex:3},{value:"innerRadius",paraId:10,tocIndex:3},{value:" 和 ",paraId:10,tocIndex:3},{value:"outerRadius",paraId:10,tocIndex:3},{value:" 的值域为 [0-1]，分别表示极坐标内半径和外半径相对于画布高度的比例。",paraId:10,tocIndex:3},{value:"transform",paraId:10,tocIndex:3},{value:" 用于配置额外的坐标系变换。",paraId:10,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  width: 720,\n  height: 720,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/87b2ff47-2a33-4509-869c-dae4cdd81163.csv',\n  },\n  encode: { x: 'year', y: 'people' },\n  transform: [{ type: 'groupX', y: 'sum' }],\n  scale: { y: { type: 'sqrt' } },\n  coordinate: { type: 'polar' },\n  animate: { enter: { type: 'waveIn' } },\n  axis: {\n    y: {\n      titleSpacing: 28,\n      labelFormatter: '~s',\n      tickCount: 5,\n      tickFilter: (d, i) => i !== 0,\n      direction: 'right',\n    },\n  },\n  tooltip: { items: [{ channel: 'y', valueFormatter: '~s' }] },\n});\n\nchart.render();\n",paraId:11,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { item: 'Design', type: 'a', score: 70 },\n    { item: 'Design', type: 'b', score: 30 },\n    { item: 'Development', type: 'a', score: 60 },\n    { item: 'Development', type: 'b', score: 70 },\n    { item: 'Marketing', type: 'a', score: 50 },\n    { item: 'Marketing', type: 'b', score: 60 },\n    { item: 'Users', type: 'a', score: 40 },\n    { item: 'Users', type: 'b', score: 50 },\n    { item: 'Test', type: 'a', score: 60 },\n    { item: 'Test', type: 'b', score: 70 },\n    { item: 'Language', type: 'a', score: 70 },\n    { item: 'Language', type: 'b', score: 50 },\n    { item: 'Technology', type: 'a', score: 50 },\n    { item: 'Technology', type: 'b', score: 40 },\n    { item: 'Support', type: 'a', score: 30 },\n    { item: 'Support', type: 'b', score: 40 },\n    { item: 'Sales', type: 'a', score: 60 },\n    { item: 'Sales', type: 'b', score: 40 },\n    { item: 'UX', type: 'a', score: 50 },\n    { item: 'UX', type: 'b', score: 60 },\n  ],\n  scale: { x: { padding: 0.5, align: 0 }, y: { tickCount: 5 } },\n  coordinate: { type: 'polar' },\n  axis: { x: { grid: true }, y: { zIndex: 1, title: false } },\n  interaction: { tooltip: { crosshairsLineDash: [4, 4] } },\n  children: [\n    {\n      type: 'area',\n      encode: { x: 'item', y: 'score', color: 'type', shape: 'smooth' },\n      scale: { y: { domainMax: 80 } },\n      style: { fillOpacity: 0.5 },\n    },\n    {\n      type: 'line',\n      encode: { x: 'item', y: 'score', color: 'type', shape: 'smooth' },\n      style: { lineWidth: 2 },\n    },\n  ],\n});\n\nchart.render();\n",paraId:12,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'vector',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antfincdn/F5VcgnqRku/wind.json',\n  },\n  encode: {\n    x: 'longitude',\n    y: 'latitude',\n    rotate: ({ u, v }) => (Math.atan2(v, u) * 180) / Math.PI,\n    size: ({ u, v }) => Math.hypot(v, u),\n    color: ({ u, v }) => Math.hypot(v, u),\n  },\n  scale: { size: { range: [6, 20] }, color: { palette: 'viridis' } },\n  coordinate: { type: 'polar' },\n  axis: { x: { grid: false }, y: { grid: false } },\n  legend: false,\n  tooltip: { title: { channel: 'color', valueFormatter: '.1f' } },\n});\n\nchart.render();\n",paraId:13,tocIndex:7}]},90872:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(29018);const t=[{value:"径向坐标系（Radial）是一种特殊的极坐标系，它通过将极坐标系进行转置操作得到。在径向坐标系中，角度被映射到 Y 轴，半径被映射到 X 轴，这与传统极坐标系的映射方式相反。",paraId:0,tocIndex:0},{value:"径向坐标系常用于绘制以下类型的图表：",paraId:1,tocIndex:0},{value:"玉珏图",paraId:2,tocIndex:0},{value:"径向条形图",paraId:2,tocIndex:0},{value:"径向堆叠条形图",paraId:2,tocIndex:0},{value:"Apple 活动图等特殊可视化",paraId:2,tocIndex:0},{value:"这类图表通常使用 ",paraId:3,tocIndex:0},{value:"interval",paraId:3,tocIndex:0},{value:" 标记来展示数据，能够有效地展示数据的分布和比较情况。",paraId:3,tocIndex:0},{value:"径向坐标系是通过对极坐标系进行以下变换得到的：",paraId:4,tocIndex:1},{value:"转置（transpose）：交换 X 轴和 Y 轴的映射",paraId:5,tocIndex:1},{value:"平移（translate）和反射（reflect）：调整坐标系的位置和方向",paraId:5,tocIndex:1},{value:"这种变换使得数据在视觉上呈现出不同于传统条形图的放射状效果，特别适合展示周期性数据或需要强调中心辐射效果的场景。",paraId:6,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  coordinate: {\n    type: 'radial',\n    innerRadius: 0.1,\n    endAngle: Math.PI,\n  },\n  data: [\n    { question: '问题 1', percent: 0.21 },\n    { question: '问题 2', percent: 0.4 },\n    { question: '问题 3', percent: 0.49 },\n    { question: '问题 4', percent: 0.52 },\n    { question: '问题 5', percent: 0.53 },\n    { question: '问题 6', percent: 0.84 },\n    { question: '问题 7', percent: 1.0 },\n    { question: '问题 8', percent: 1.2 },\n  ],\n  encode: {\n    x: 'question',\n    y: 'percent',\n    color: 'percent',\n  },\n  style: {\n    stroke: 'white',\n  },\n  scale: {\n    color: {\n      range: '#BAE7FF-#1890FF-#0050B3',\n    },\n  },\n  legend: {\n    color: {\n      length: 400,\n      position: 'bottom',\n      layout: { justifyContent: 'center' },\n    },\n  },\n  axis: {\n    y: {\n      tickFilter: (d, i) => i !== 0,\n    },\n  },\n});\n\nchart.render();\n",paraId:7,tocIndex:2},{value:"径向坐标系适合以下场景：",paraId:8,tocIndex:3},{value:"需要强调中心辐射效果",paraId:9,tocIndex:3},{value:"：当数据具有从中心向外辐射的概念时，如资源分配、影响力等",paraId:9,tocIndex:3},{value:"展示周期性数据",paraId:9,tocIndex:3},{value:"：当数据具有循环特性，但不适合使用传统极坐标系时",paraId:9,tocIndex:3},{value:"需要节省空间",paraId:9,tocIndex:3},{value:"：相比于传统条形图，径向条形图在保持数据可读性的同时可以更紧凑地展示",paraId:9,tocIndex:3},{value:"美观需求",paraId:9,tocIndex:3},{value:"：当需要创建视觉上更具吸引力的可视化时",paraId:9,tocIndex:3},{value:"数据量",paraId:10,tocIndex:4},{value:"：径向坐标系适合展示中等数量的类别（约 5-15 个），过多或过少的类别可能不适合",paraId:10,tocIndex:4},{value:"标签放置",paraId:10,tocIndex:4},{value:"：在径向坐标系中，标签的放置需要特别注意，可以使用 ",paraId:10,tocIndex:4},{value:"label",paraId:10,tocIndex:4},{value:" 配置中的 ",paraId:10,tocIndex:4},{value:"autoRotate",paraId:10,tocIndex:4},{value:" 和 ",paraId:10,tocIndex:4},{value:"rotateToAlignArc",paraId:10,tocIndex:4},{value:" 属性",paraId:10,tocIndex:4},{value:"半径设置",paraId:10,tocIndex:4},{value:"：适当设置 ",paraId:10,tocIndex:4},{value:"innerRadius",paraId:10,tocIndex:4},{value:" 可以提高可读性，特别是当数据值差异较小时",paraId:10,tocIndex:4},{value:"径向坐标系主要负责将数据空间的位置映射到画布空间。而其他视觉属性，例如颜色、大小等，仍然通过相应的比例尺进行映射。关于比例尺的详细信息，请参考",paraId:11,tocIndex:5},{value:"比例尺",paraId:12,tocIndex:5},{value:"文档。",paraId:11,tocIndex:5},{value:"参数",paraId:13,tocIndex:5},{value:"说明",paraId:13,tocIndex:5},{value:"类型",paraId:13,tocIndex:5},{value:"默认值",paraId:13,tocIndex:5},{value:"必选",paraId:13,tocIndex:5},{value:"startAngle",paraId:13,tocIndex:5},{value:"极坐标系起始弧度",paraId:13,tocIndex:5},{value:"number",paraId:13,tocIndex:5},{value:"-Math.PI / 2",paraId:13,tocIndex:5},{value:"endAngle",paraId:13,tocIndex:5},{value:"极坐标系结束弧度",paraId:13,tocIndex:5},{value:"number",paraId:13,tocIndex:5},{value:"(Math.PI \\* 3) / 2",paraId:13,tocIndex:5},{value:"innerRadius",paraId:13,tocIndex:5},{value:"极坐标内半径，范围 0-1",paraId:13,tocIndex:5},{value:"number",paraId:13,tocIndex:5},{value:"0",paraId:13,tocIndex:5},{value:"outerRadius",paraId:13,tocIndex:5},{value:"极坐标半径，范围 0-1",paraId:13,tocIndex:5},{value:"number",paraId:13,tocIndex:5},{value:"1",paraId:13,tocIndex:5},{value:"在径向坐标系中，角度使用弧度（radians）作为单位，而非角度（degrees）。以下是常用角度的弧度对照：",paraId:14,tocIndex:6},{value:"角度",paraId:15,tocIndex:6},{value:"弧度",paraId:15,tocIndex:6},{value:"位置",paraId:15,tocIndex:6},{value:"0°",paraId:15,tocIndex:6},{value:"0",paraId:15,tocIndex:6},{value:"3 点钟方向",paraId:15,tocIndex:6},{value:"90°",paraId:15,tocIndex:6},{value:"π/2",paraId:15,tocIndex:6},{value:"12 点钟方向",paraId:15,tocIndex:6},{value:"180°",paraId:15,tocIndex:6},{value:"π",paraId:15,tocIndex:6},{value:"9 点钟方向",paraId:15,tocIndex:6},{value:"270°",paraId:15,tocIndex:6},{value:"3π/2",paraId:15,tocIndex:6},{value:"6 点钟方向",paraId:15,tocIndex:6},{value:"360°",paraId:15,tocIndex:6},{value:"2π",paraId:15,tocIndex:6},{value:"3 点钟方向（一周）",paraId:15,tocIndex:6},{value:"可以使用 ",paraId:16,tocIndex:6},{value:"Math.PI",paraId:16,tocIndex:6},{value:" 来表示 π，例如 ",paraId:16,tocIndex:6},{value:"Math.PI / 2",paraId:16,tocIndex:6},{value:" 表示 90°。",paraId:16,tocIndex:6},{value:"玉珏图是径向坐标系最常见的应用之一，它将传统条形图在径向坐标系下展示，形成放射状的视觉效果。",paraId:17,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.coordinate({ type: 'radial', innerRadius: 0.1, endAngle: Math.PI });\n\nchart\n  .interval()\n  .data([\n    { category: '类别 A', value: 40 },\n    { category: '类别 B', value: 60 },\n    { category: '类别 C', value: 80 },\n  ])\n  .encode('x', 'category')\n  .encode('y', 'value')\n  .encode('color', 'value');\n\nchart.render();\n",paraId:18,tocIndex:8},{value:"通过在径向坐标系中应用堆叠变换，可以创建径向堆叠条形图，适合展示具有层次关系的数据。",paraId:19,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.coordinate({ type: 'radial' });\n\nchart\n  .interval()\n  .data([\n    { category: '类别 A', type: '类型1', value: 40 },\n    { category: '类别 A', type: '类型2', value: 20 },\n    { category: '类别 B', type: '类型1', value: 30 },\n    { category: '类别 B', type: '类型2', value: 50 },\n    { category: '类别 C', type: '类型1', value: 25 },\n    { category: '类别 C', type: '类型2', value: 35 },\n  ])\n  .encode('x', 'category')\n  .encode('y', 'value')\n  .encode('color', 'type')\n  .transform({ type: 'stackY' });\n\nchart.render();\n",paraId:20,tocIndex:9},{value:"通过设置适当的内半径和样式，可以创建类似 Apple Watch 活动环的可视化效果。",paraId:21,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  { name: 'activity1', percent: 0.6, color: '#1ad5de' },\n  { name: 'activity2', percent: 0.2, color: '#a0ff03' },\n  { name: 'activity3', percent: 0.3, color: '#e90b3a' },\n];\n\nchart.coordinate({ type: 'radial', innerRadius: 0.2 });\n\n// 背景环\nchart\n  .interval()\n  .data(data)\n  .encode('x', 'name')\n  .encode('y', 1)\n  .style('fillOpacity', 0.25);\n\n// 数据环\nchart\n  .interval()\n  .data(data)\n  .encode('x', 'name')\n  .encode('y', 'percent')\n  .encode('color', 'color')\n  .scale('color', { type: 'identity' })\n  .style('radius', 26);\n\nchart.render();\n",paraId:22,tocIndex:10},{value:"以下是一个带有标签和动画效果的径向条形图完整示例：",paraId:23,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  coordinate: {\n    type: 'radial',\n    innerRadius: 0.1,\n    endAngle: Math.PI,\n  },\n  data: [\n    { category: '类别 A', value: 21 },\n    { category: '类别 B', value: 40 },\n    { category: '类别 C', value: 49 },\n    { category: '类别 D', value: 52 },\n    { category: '类别 E', value: 53 },\n    { category: '类别 F', value: 84 },\n    { category: '类别 G', value: 100 },\n    { category: '类别 H', value: 120 },\n  ],\n  encode: {\n    x: 'category',\n    y: 'value',\n    color: 'value',\n  },\n  style: {\n    stroke: 'white',\n  },\n  scale: {\n    color: {\n      range: '#BAE7FF-#1890FF-#0050B3',\n    },\n  },\n  axis: {\n    y: {\n      tickFilter: (d, i) => i !== 0,\n    },\n  },\n  legend: {\n    color: {\n      length: 400,\n      position: 'bottom',\n      layout: { justifyContent: 'center' },\n    },\n  },\n  label: {\n    text: 'value',\n    position: 'outside',\n    autoRotate: true,\n    rotateToAlignArc: true,\n    dx: 4,\n  },\n  animate: {\n    enter: {\n      type: 'waveIn',\n      duration: 800,\n    },\n  },\n});\n\nchart.render();\n",paraId:24,tocIndex:11},{value:"这个示例展示了如何创建一个带有标签和动画效果的径向条形图，包括以下特性：",paraId:25,tocIndex:11},{value:"设置径向坐标系，内半径为 0.1，结束角度为 π（半圆）",paraId:26,tocIndex:11},{value:"使用连续色板展示数据值的大小",paraId:26,tocIndex:11},{value:"添加外部标签，并使用 ",paraId:26,tocIndex:11},{value:"autoRotate",paraId:26,tocIndex:11},{value:" 和 ",paraId:26,tocIndex:11},{value:"rotateToAlignArc",paraId:26,tocIndex:11},{value:" 使标签沿着弧线排列",paraId:26,tocIndex:11},{value:"添加波浪进入动画效果",paraId:26,tocIndex:11},{value:"自定义 Y 轴刻度，过滤掉第一个刻度（通常是 0）",paraId:26,tocIndex:11},{value:"在底部居中放置图例",paraId:26,tocIndex:11},{value:"通过这些配置，可以创建出既美观又信息丰富的径向条形图。",paraId:27,tocIndex:11}]},68035:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(19195);const t=[{value:"Theta 是一种特殊的极坐标系，结合了 Transpose 和 Polar 坐标系的特点。它将数据映射到固定半径的角度上，常用于柱状图和饼图/环图/扇图的转化。",paraId:0,tocIndex:0},{value:"Theta 坐标系本质上是 Transpose 和 Polar 坐标系的组合。",paraId:1,tocIndex:0},{value:"首先通过 Transpose 交换 x/y 轴",paraId:2,tocIndex:0},{value:"然后通过 Polar 将直角坐标转换为极坐标",paraId:2,tocIndex:0},{value:"最终实现数据在固定半径上的角度编码",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"必选",paraId:3,tocIndex:1},{value:"startAngle",paraId:3,tocIndex:1},{value:"起始弧度(弧度制)，控制饼图/环图的起始角度位置",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"-Math.PI / 2",paraId:3,tocIndex:1},{value:"endAngle",paraId:3,tocIndex:1},{value:"结束弧度(弧度制)，控制饼图/环图的结束角度位置",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"(Math.PI * 3) / 2",paraId:3,tocIndex:1},{value:"innerRadius",paraId:3,tocIndex:1},{value:"内半径(比例 0-1)，控制环图的内圈半径大小，0 表示实心饼图，大于 0 表示环图。一般我们会让该值小于 outerRadius，如果超出也可以展示，但可能会影响 label 的展示",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"0",paraId:3,tocIndex:1},{value:"outerRadius",paraId:3,tocIndex:1},{value:"外半径(比例 0-1)，控制饼图/环图的外圈半径大小，1 表示占满整个绘图区域。大于 1 的值会超出容器(超出部分会被截取)",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"1",paraId:3,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { category: 'A', value: 40 },\n    { category: 'B', value: 25 },\n    { category: 'C', value: 20 },\n    { category: 'D', value: 15 },\n  ],\n  encode: { y: 'value', color: 'category' },\n  transform: [{ type: 'stackY' }],\n  coordinate: { type: 'theta' },\n  style: { stroke: 'white' },\n  labels: [{ text: 'category', radius: 0.8 }],\n});\n\nchart.render();\n",paraId:4,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { category: 'A', value: 40 },\n    { category: 'B', value: 25 },\n    { category: 'C', value: 20 },\n    { category: 'D', value: 15 },\n  ],\n  encode: { y: 'value', color: 'category' },\n  transform: [{ type: 'stackY' }],\n  coordinate: {\n    type: 'theta',\n    innerRadius: 0.5, // 设置内半径创建环图\n  },\n  style: { stroke: 'white' },\n  labels: [\n    { text: 'category', radius: 0.5 },\n    { text: 'value', radius: 0.5, style: { dy: 12 } },\n  ],\n});\n\nchart.render();\n",paraId:5,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { category: 'A', value: 40 },\n    { category: 'B', value: 25 },\n    { category: 'C', value: 20 },\n    { category: 'D', value: 15 },\n  ],\n  encode: { y: 'value', color: 'category' },\n  transform: [{ type: 'stackY' }],\n  coordinate: {\n    type: 'theta',\n    startAngle: -Math.PI / 2, // 从π弧度开始\n    endAngle: Math.PI * 3, // 到3π弧度结束\n  },\n  style: { stroke: 'white' },\n  labels: [{ text: 'category', radius: 0.8 }],\n});\n\nchart.render();\n",paraId:6,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { item: '事例一', count: 40, percent: 0.4 },\n  { item: '事例二', count: 21, percent: 0.21 },\n  { item: '事例三', count: 17, percent: 0.17 },\n  { item: '事例四', count: 13, percent: 0.13 },\n  { item: '事例五', count: 9, percent: 0.09 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.coordinate({ type: 'theta' });\n\nchart\n  .interval()\n  .data(data)\n  .transform({ type: 'stackY' })\n  .encode('y', 'percent')\n  .encode('color', 'item')\n  .legend('color', { position: 'bottom', layout: { justifyContent: 'center' } })\n  .label({\n    position: 'outside',\n    text: (data) => `${data.item}: ${data.percent * 100}%`,\n  })\n  .tooltip((data) => ({\n    name: data.item,\n    value: `${data.percent * 100}%`,\n  }));\n\nchart.render();\n",paraId:7,tocIndex:6}]},80245:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(18610);const t=[{value:"Transpose 是坐标系的转置变换，将 (x, y) 变换成 (y, x)，常用于条形图和柱状图之间的转换。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({});\n\nchart.coordinate({ transform: [{ type: 'transpose' }] });\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n    format: 'csv',\n  })\n  .transform({\n    type: 'sortX',\n    reverse: true,\n  })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('color', 'steelblue')\n  .axis('y', { labelFormatter: '.0%' })\n  .label({\n    text: 'frequency',\n    formatter: '.1%',\n    style: {\n      textAnchor: (d) => (+d.frequency > 0.008 ? 'right' : 'start'),\n      fill: (d) => (+d.frequency > 0.008 ? '#fff' : '#000'),\n      dx: (d) => (+d.frequency > 0.008 ? -5 : 5),\n    },\n  });\n\nchart.render();\n",paraId:1,tocIndex:0}]},931:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(99608);const t=[{value:"使用自定义函数的方式来进行数据的加工和处理，这是最为灵活的一种方式。",paraId:0},{value:"chart.data({\n  type: 'custom',\n  callback: (data) => {\n    /* your code */\n    return [];\n  },\n});\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"callback",paraId:2,tocIndex:1},{value:"函数，传入当前数据，输出处理后的数据",paraId:2,tocIndex:1},{value:"(data: any) => any",paraId:2,tocIndex:1},{value:"(d) => d",paraId:2,tocIndex:1}]},63253:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(78711);const t=[{value:"EMA（Exponential Moving Average，指数移动平均）是一种常用的数据平滑算法，它通过对最近的数据点赋予更高的权重，来减少数据的波动性，从而更清晰地观察数据的趋势变化。",paraId:0,tocIndex:0},{value:"在 G2 的实现中，EMA 的计算方式如下：",paraId:1,tocIndex:0},{value:"其中：",paraId:2,tocIndex:0},{value:"P",paraId:3,tocIndex:0},{value:"t",paraId:3,tocIndex:0},{value:"：当前时刻的原始数据值；",paraId:3,tocIndex:0},{value:"EMA",paraId:3,tocIndex:0},{value:"t-1",paraId:3,tocIndex:0},{value:"：上一个时刻的 EMA 值；",paraId:3,tocIndex:0},{value:"α：平滑因子，范围在 (0, 1) 之间。",paraId:3,tocIndex:0},{value:"⚠️ 注意：G2 中 EMA 的实现与传统定义中的 α 权重位置相反，因此：",paraId:4,tocIndex:0},{value:"α",paraId:5,tocIndex:0},{value:" 越接近 1，平滑效果越明显；",paraId:5,tocIndex:0},{value:"α",paraId:5,tocIndex:0},{value:" 越接近 0，EMA 越接近原始数据。",paraId:5,tocIndex:0},{value:"时间序列中数据存在剧烈波动，希望突出趋势时；",paraId:6,tocIndex:1},{value:"金融数据如股票价格的技术分析；",paraId:6,tocIndex:1},{value:"模型训练过程中的指标平滑与动态跟踪。",paraId:6,tocIndex:1},{value:"属性",paraId:7,tocIndex:2},{value:"描述",paraId:7,tocIndex:2},{value:"类型",paraId:7,tocIndex:2},{value:"默认值",paraId:7,tocIndex:2},{value:"是否必选",paraId:7,tocIndex:2},{value:"field",paraId:7,tocIndex:2},{value:"需要平滑的字段名",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:"'y'",paraId:7,tocIndex:2},{value:"✓",paraId:7,tocIndex:2},{value:"alpha",paraId:7,tocIndex:2},{value:"平滑因子，控制平滑程度（越大越平滑）",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:"0.6",paraId:7,tocIndex:2},{value:"as",paraId:7,tocIndex:2},{value:"生成的新字段名，若不指定将覆盖原字段",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:"同 ",paraId:7,tocIndex:2},{value:"field",paraId:7,tocIndex:2},{value:"若需保留原字段，建议设置 ",paraId:8,tocIndex:2},{value:"as",paraId:8,tocIndex:2},{value:" 属性以输出到新字段。\n该默认值由组件内部定义，非来源于主题。\n⚠️ 注意：",paraId:8,tocIndex:2},{value:"field",paraId:8,tocIndex:2},{value:" 字段必须为数值型，否则将导致计算错误。",paraId:8,tocIndex:2},{value:"以下示例展示如何在 G2 中对数据字段 ",paraId:9,tocIndex:3},{value:"close",paraId:9,tocIndex:3},{value:" 应用 EMA 平滑变换。",paraId:9,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  children: [\n    {\n      type: 'line',\n      data: {\n        type: 'fetch',\n        value:\n          'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n        transform: [\n          {\n            type: 'ema',\n            field: 'close',\n            alpha: 0.8,\n            as: 'emaClose',\n          },\n        ],\n      },\n      encode: {\n        x: 'date',\n        y: 'emaClose',\n      },\n    },\n    {\n      type: 'line',\n      style: {\n        opacity: 0.3,\n      },\n      data: {\n        type: 'fetch',\n        value:\n          'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n      },\n      encode: {\n        x: 'date',\n        y: 'close',\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:10,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'view',\n  children: [\n    {\n      type: 'line',\n      data: {\n        type: 'inline',\n        value: [\n          { t: 0, y: 100 },\n          { t: 1, y: 180 },\n          { t: 2, y: 120 },\n          { t: 3, y: 200 },\n          { t: 4, y: 150 },\n          { t: 5, y: 250 },\n        ],\n        transform: [\n          {\n            type: 'ema',\n            field: 'y',\n            alpha: 0.6,\n            as: 'emaY',\n          },\n        ],\n      },\n      encode: { x: 't', y: 'emaY' },\n      style: { stroke: '#f90' },\n    },\n    {\n      type: 'line',\n      data: {\n        type: 'inline',\n        value: [\n          { t: 0, y: 100 },\n          { t: 1, y: 180 },\n          { t: 2, y: 120 },\n          { t: 3, y: 200 },\n          { t: 4, y: 150 },\n          { t: 5, y: 250 },\n        ],\n      },\n      encode: { x: 't', y: 'y' },\n      style: { stroke: '#ccc', lineDash: [4, 2] },\n    },\n  ],\n});\nchart.render();\n",paraId:11,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = Array.from({ length: 30 }, (_, i) => ({\n  date: `2024-01-${String(i + 1).padStart(2, '0')}`,\n  close:\n    100 + Math.sin(i / 3) * 20 + (i % 5 === 0 ? 20 : 0) + Math.random() * 10,\n}));\n\nchart.options({\n  type: 'view',\n  children: [\n    {\n      type: 'line',\n      data: {\n        type: 'inline',\n        value: data,\n        transform: [\n          {\n            type: 'ema',\n            field: 'close',\n            alpha: 0.7,\n            as: 'emaClose',\n          },\n        ],\n      },\n      encode: {\n        x: 'date',\n        y: 'emaClose',\n      },\n      style: {\n        stroke: '#007aff',\n        lineWidth: 2,\n      },\n    },\n    {\n      type: 'line',\n      data: {\n        type: 'inline',\n        value: data,\n      },\n      encode: {\n        x: 'date',\n        y: 'close',\n      },\n      style: {\n        stroke: '#bbb',\n        lineDash: [4, 2],\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:12,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'view',\n  children: [\n    {\n      type: 'line',\n      data: {\n        type: 'inline',\n        value: Array.from({ length: 50 }, (_, i) => ({\n          epoch: i,\n          loss: Math.sin(i / 5) * 20 + 60 + Math.random() * 5,\n        })),\n        transform: [\n          {\n            type: 'ema',\n            field: 'loss',\n            alpha: 0.4,\n            as: 'emaLoss',\n          },\n        ],\n      },\n      encode: {\n        x: 'epoch',\n        y: 'emaLoss',\n      },\n      style: { stroke: '#52c41a' },\n    },\n    {\n      type: 'line',\n      data: {\n        type: 'inline',\n        value: Array.from({ length: 50 }, (_, i) => ({\n          epoch: i,\n          loss: Math.sin(i / 5) * 20 + 60 + Math.random() * 5,\n        })),\n      },\n      encode: {\n        x: 'epoch',\n        y: 'loss',\n      },\n      style: { stroke: '#ddd', lineDash: [4, 2] },\n    },\n  ],\n});\nchart.render();\n",paraId:13,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  height: 300,\n});\n\nchart.options({\n  type: 'view',\n  children: [\n    {\n      type: 'line',\n      data: {\n        type: 'inline',\n        value: [\n          { x: 0, y: 30 },\n          { x: 1, y: 80 },\n          { x: 2, y: 45 },\n          { x: 3, y: 90 },\n          { x: 4, y: 20 },\n          { x: 5, y: 60 },\n          { x: 6, y: 30 },\n          { x: 7, y: 85 },\n          { x: 8, y: 40 },\n          { x: 9, y: 70 },\n        ],\n        transform: [\n          {\n            type: 'ema',\n            field: 'y',\n            alpha: 0.6,\n            as: 'emaY',\n          },\n        ],\n      },\n      encode: {\n        x: 'x',\n        y: 'emaY',\n      },\n      style: {\n        stroke: '#f90',\n        lineWidth: 2,\n      },\n    },\n    {\n      type: 'line',\n      data: {\n        type: 'inline',\n        value: [\n          { x: 0, y: 30 },\n          { x: 1, y: 80 },\n          { x: 2, y: 45 },\n          { x: 3, y: 90 },\n          { x: 4, y: 20 },\n          { x: 5, y: 60 },\n          { x: 6, y: 30 },\n          { x: 7, y: 85 },\n          { x: 8, y: 40 },\n          { x: 9, y: 70 },\n        ],\n      },\n      encode: {\n        x: 'x',\n        y: 'y',\n      },\n      style: {\n        stroke: '#ccc',\n        lineDash: [4, 2],\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:14,tocIndex:7}]},29325:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(83443);const t=[{value:"G2 的数据源来源有两种，一种是 ",paraId:0,tocIndex:0},{value:"inline",paraId:0,tocIndex:0},{value:"，即直接传入具体的数据，这种是 G2 默认的数据源类型；另外一种数据源类型是 ",paraId:0,tocIndex:0},{value:"fetch",paraId:0,tocIndex:0},{value:"，即从远程接口获取数据。",paraId:0,tocIndex:0},{value:"G2 的 ",paraId:1,tocIndex:0},{value:"fetch",paraId:1,tocIndex:0},{value:" 支持从远程接口获得数据，让数据源具备一定的动态性，支持 JSON、CSV 等格式解析，适配多场景数据集成，提升大屏、监控等应用的开发效率与交互体验。配置上，根据 ",paraId:1,tocIndex:0},{value:"value",paraId:1,tocIndex:0},{value:" 指定的 ",paraId:1,tocIndex:0},{value:"url",paraId:1,tocIndex:0},{value:" 获取远程的数据。可以通过 ",paraId:1,tocIndex:0},{value:"format",paraId:1,tocIndex:0},{value:" 去指定数据类型，G2 默认会根据 ",paraId:1,tocIndex:0},{value:"value",paraId:1,tocIndex:0},{value:" 指定的文件后缀名去推断数据类型，记得保证远程的地址没有设置鉴权。",paraId:1,tocIndex:0},{value:"直接在设置数据得时候，传入一个对象，并设置类型 type 为 ",paraId:2,tocIndex:1},{value:"fetch",paraId:2,tocIndex:1},{value:"。",paraId:2,tocIndex:1},{value:"// Spec\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch', // 指定 fetch 类型\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json', // 远程地址\n  },\n});\n",paraId:3,tocIndex:1},{value:"举一个例子如下：",paraId:4,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  },\n  encode: {\n    x: 'weight',\n    y: 'height',\n    color: 'gender',\n  },\n});\n\nchart.render();\n",paraId:5,tocIndex:2},{value:"属性",paraId:6,tocIndex:3},{value:"描述",paraId:6,tocIndex:3},{value:"类型",paraId:6,tocIndex:3},{value:"默认值",paraId:6,tocIndex:3},{value:"value",paraId:6,tocIndex:3},{value:"fetch 请求的网络地址",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"[]",paraId:6,tocIndex:3},{value:"format",paraId:6,tocIndex:3},{value:"远程文件的数据格式类型，决定用什么方式解析",paraId:6,tocIndex:3},{value:"'json' | 'csv'",paraId:6,tocIndex:3},{value:"默认取 value 末尾 ",paraId:6,tocIndex:3},{value:".",paraId:6,tocIndex:3},{value:" 后的后缀",paraId:6,tocIndex:3},{value:"delimiter",paraId:6,tocIndex:3},{value:"如果是 csv 文件，解析的时候分割符",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:",",paraId:6,tocIndex:3},{value:"autoType",paraId:6,tocIndex:3},{value:"如果是 csv 文件，解析的时候是否自动判断列数据类型",paraId:6,tocIndex:3},{value:"boolean",paraId:6,tocIndex:3},{value:"true",paraId:6,tocIndex:3},{value:"transform",paraId:6,tocIndex:3},{value:"对加载后的数据进行变换操作",paraId:6,tocIndex:3},{value:"DataTransform",paraId:7,tocIndex:3},{value:"[]",paraId:6,tocIndex:3},{value:"在 ",paraId:8,tocIndex:3},{value:"fetch",paraId:8,tocIndex:3},{value:" 实现上，如果 format 为 ",paraId:8,tocIndex:3},{value:"json",paraId:8,tocIndex:3},{value:"，则使用 JavaScript 的 ",paraId:8,tocIndex:3},{value:"fetch",paraId:8,tocIndex:3},{value:" API 然后将返回值转成 JSON Object；如果 format 为 ",paraId:8,tocIndex:3},{value:"csv",paraId:8,tocIndex:3},{value:"，则调用 ",paraId:8,tocIndex:3},{value:"d3-dsv",paraId:8,tocIndex:3},{value:" 去解析接口返回值。",paraId:8,tocIndex:3}]},62959:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(39605);const t=[{value:"对数据进行指定条件的过滤。类似于 ",paraId:0},{value:"Array.prototype.filter",paraId:0},{value:"。",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart.data({\n  type: 'inline',\n  value: data,\n  transform: [\n    {\n      type: 'filter',\n      callback: (d) => d.a < 3,\n    },\n  ],\n});\n",paraId:1,tocIndex:0},{value:"上述例子处理之后，数据变成为：",paraId:2,tocIndex:0},{value:"[{ a: 1, b: 2, c: 3 }];\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"callback",paraId:4,tocIndex:1},{value:"函数，传入当前数据，输出处理后的数据",paraId:4,tocIndex:1},{value:"(d: any, idx: number, arr: any[]) => boolean",paraId:4,tocIndex:1},{value:"(d) => d !== undefined && d !== null && !Number.isNaN(d)",paraId:4,tocIndex:1}]},57494:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(37145);const t=[{value:"将多个字段展开成按照指定的 key value 组织形式。",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart.data({\n  type: 'inline',\n  value: data,\n  transform: [\n    {\n      type: 'fold',\n      fields: ['a', 'b'],\n      key: 'key',\n      value: 'value',\n    },\n  ],\n});\n",paraId:1,tocIndex:0},{value:"上述例子处理之后，数据变成为：",paraId:2,tocIndex:0},{value:"[\n  { a: 1, b: 2, c: 3, key: 'a', value: 1 },\n  { a: 1, b: 2, c: 3, key: 'b', value: 2 },\n  { a: 4, b: 5, c: 6, key: 'a', value: 4 },\n  { a: 4, b: 5, c: 6, key: 'b', value: 5 },\n];\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"fields",paraId:4,tocIndex:1},{value:"需要展开的字段列表",paraId:4,tocIndex:1},{value:"string[]",paraId:4,tocIndex:1},{value:"key",paraId:4,tocIndex:1},{value:"展开之后，字段枚举值对应字段名",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"key",paraId:4,tocIndex:1},{value:"value",paraId:4,tocIndex:1},{value:"展开之后，数据值对应字段名",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"value",paraId:4,tocIndex:1}]},35992:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(20228);const t=[{value:"G2 的数据源来源有两种，一种是 ",paraId:0,tocIndex:0},{value:"inline",paraId:0,tocIndex:0},{value:"，即直接传入具体的数据，这种是 G2 默认的数据源类型；另外一种数据源类型是 ",paraId:0,tocIndex:0},{value:"fetch",paraId:0,tocIndex:0},{value:"，即从远程接口获取数据。",paraId:0,tocIndex:0},{value:"显式的指定 ",paraId:1,tocIndex:1},{value:"type",paraId:1,tocIndex:1},{value:" 为 ",paraId:1,tocIndex:1},{value:"inline",paraId:1,tocIndex:1},{value:"，完整的写法如下：",paraId:1,tocIndex:1},{value:"chart.data({\n  type: 'inline',\n  value: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n});\n",paraId:2,tocIndex:1},{value:"因为 G2 默认的数据类型就是 ",paraId:3,tocIndex:1},{value:"inline",paraId:3,tocIndex:1},{value:"，所以也可以简写为如下：",paraId:3,tocIndex:1},{value:"chart.data([\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n]);\n",paraId:4,tocIndex:1},{value:"举一个例子如下：",paraId:5,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre',\n    y: 'sold',\n  },\n});\n\nchart.render();\n",paraId:6,tocIndex:2},{value:"属性",paraId:7,tocIndex:3},{value:"描述",paraId:7,tocIndex:3},{value:"类型",paraId:7,tocIndex:3},{value:"默认值",paraId:7,tocIndex:3},{value:"value",paraId:7,tocIndex:3},{value:"具体的 object 数组数据",paraId:7,tocIndex:3},{value:"object[]",paraId:7,tocIndex:3},{value:"[]",paraId:7,tocIndex:3},{value:"transform",paraId:7,tocIndex:3},{value:"针对数据 inline 数据进行变换",paraId:7,tocIndex:3},{value:"DataTransform",paraId:8,tocIndex:3},{value:"[]",paraId:7,tocIndex:3},{value:"这个数据源比较简单，相当于传入的数据，直接作为数据源进行 transform 处理加工，然后走渲染逻辑。",paraId:9,tocIndex:3},{value:"⚠️ G2 支持了一些关系图的数据结构，这些数据结构是一个 JavaScript 的 Object 类型，所以使用简写传入的时候，可能会导致 G2 识别出错，所以建议如果图表的数据是 Object 对象，使用完整的写法传入数据。",paraId:10,tocIndex:3},{value:"const graphData = {\n  nodes: [\n    /** */\n  ],\n  edges: [\n    /** */\n  ],\n};\n\nchart.data(graphData); // ❌ 不建议这么写，G2 在处理的时候可能识别出错\n\nchart.data({\n  // ✅ 建议完整写法，语义更明确，不会因为歧义带来识别错误\n  type: 'inline',\n  value: graphData,\n});\n",paraId:11,tocIndex:3}]},23894:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(36687);const t=[{value:"join",paraId:0,tocIndex:0},{value:" 的功能是用于将两份数据连接在一起，类似于 SQL 中的 ",paraId:0,tocIndex:0},{value:"JOIN",paraId:0,tocIndex:0},{value:" 操作。该功能通常用于合并两个数据源中基于共同字段的数据，可以按指定条件将两个数据源中的记录结合起来，形成一个新的数据集。这个功能对于在可视化中展示多个数据源之间的关联信息非常有用。该操作在数据预处理阶段完成，生成的新字段可直接用于图形绘制、字段映射、标注等操作。",paraId:0,tocIndex:0},{value:"属性",paraId:1,tocIndex:1},{value:"描述",paraId:1,tocIndex:1},{value:"类型",paraId:1,tocIndex:1},{value:"默认值",paraId:1,tocIndex:1},{value:"必选",paraId:1,tocIndex:1},{value:"join",paraId:1,tocIndex:1},{value:"需要连接的数据源",paraId:1,tocIndex:1},{value:"object[]",paraId:1,tocIndex:1},{value:"-",paraId:1,tocIndex:1},{value:"是",paraId:1,tocIndex:1},{value:"on",paraId:1,tocIndex:1},{value:"两个数据源连接的字段",paraId:1,tocIndex:1},{value:"[string | ((d: any) => string), string | ((d: any) => string)]",paraId:1,tocIndex:1},{value:"-",paraId:1,tocIndex:1},{value:"是",paraId:1,tocIndex:1},{value:"select",paraId:1,tocIndex:1},{value:"从被连接的数据源中选择要显示的字段",paraId:1,tocIndex:1},{value:"string[]",paraId:1,tocIndex:1},{value:"[]",paraId:1,tocIndex:1},{value:"否",paraId:1,tocIndex:1},{value:"as",paraId:1,tocIndex:1},{value:"为 ",paraId:1,tocIndex:1},{value:"select",paraId:1,tocIndex:1},{value:" 出来的字段重命名",paraId:1,tocIndex:1},{value:"string[]",paraId:1,tocIndex:1},{value:"不做重命名",paraId:1,tocIndex:1},{value:"否",paraId:1,tocIndex:1},{value:"unknown",paraId:1,tocIndex:1},{value:"如果没有匹配到连接的数据，指定一个默认值",paraId:1,tocIndex:1},{value:"any",paraId:1,tocIndex:1},{value:"NaN",paraId:1,tocIndex:1},{value:"否",paraId:1,tocIndex:1},{value:"join",paraId:2,tocIndex:2},{value:"：指定需要连接的第二份数据源，可以是一个对象数组，表示所有的连接数据。",paraId:2,tocIndex:2},{value:"on",paraId:2,tocIndex:2},{value:"：定义连接条件，传入一个包含两个字段的数组，或者是可以返回字段名的函数数组。用于在两个数据源中根据这些字段进行匹配。",paraId:2,tocIndex:2},{value:"select",paraId:2,tocIndex:2},{value:"：指定从被连接的数据源中选择哪些字段。默认为空数组，表示连接后的数据源包含所有字段。",paraId:2,tocIndex:2},{value:"as",paraId:2,tocIndex:2},{value:"：为 ",paraId:2,tocIndex:2},{value:"select",paraId:2,tocIndex:2},{value:" 选择的字段指定别名。如果不指定，则默认为字段原名。",paraId:2,tocIndex:2},{value:"unknown",paraId:2,tocIndex:2},{value:"：当两个数据源中没有匹配的数据时，使用此值作为默认值。",paraId:2,tocIndex:2},{value:"📌 join 在复杂场景下能显著增强数据组织能力，是组合和清洗数据不可或缺的工具。",paraId:3,tocIndex:2},{value:"数据合并",paraId:4,tocIndex:3},{value:"：合并多源数据，补全缺失字段。将两个具有相关字段的数据源合并成一个数据源，进行进一步分析或可视化。",paraId:4,tocIndex:3},{value:"数据对齐",paraId:4,tocIndex:3},{value:"：根据共同的字段对两个数据集进行对齐，生成可视化所需的结构。",paraId:4,tocIndex:3},{value:"条件选择",paraId:4,tocIndex:3},{value:"：将代码（如用户 ID、产品 ID）映射为描述信息。从被连接的数据源中选择指定的字段进行展示，同时避免冗余数据。",paraId:4,tocIndex:3},{value:"on: ['id', 'code']\n// 或使用函数方式\non: [(d) => d.id, (d) => d.code]",paraId:5,tocIndex:6},{value:"将两个数据源按字段连接，并从外部数据中提取字段合并：",paraId:6,tocIndex:6},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nconst joinData = [\n  { c: 1, d: 2, e: 3 },\n  { c: 4, d: 5, e: 6 },\n];\n\nchart.options({\n  data: {\n    type: 'inline',\n    value: data,\n    transform: [\n      {\n        type: 'join',\n        join: joinData,\n        on: ['a', 'c'],\n        select: ['d', 'e'],\n      },\n    ],\n  },\n});\n",paraId:7,tocIndex:6},{value:"转换结果为：",paraId:8,tocIndex:6},{value:"[\n  { a: 1, b: 2, c: 3, d: 2, e: 3 },\n  { a: 4, b: 5, c: 6, d: 5, e: 6 },\n];\n",paraId:9,tocIndex:6},{value:"使用 as 为 select 出来的字段重命名：",paraId:10,tocIndex:7},{value:"chart.options({\n  data: {\n    type: 'inline',\n    value: data,\n    transform: [\n      {\n        type: 'join',\n        join: joinData,\n        on: ['a', 'c'],\n        select: ['d', 'e'],\n        as: ['dd', 'ee'],\n      },\n    ],\n  },\n});\n",paraId:11,tocIndex:7},{value:"转换结果为：",paraId:12,tocIndex:7},{value:"[\n  { a: 1, b: 2, c: 3, dd: 2, ee: 3 },\n  { a: 4, b: 5, c: 6, dd: 5, ee: 6 },\n];\n",paraId:13,tocIndex:7},{value:"当两个数据源中没有匹配的数据时，使用 unknown 指定一个默认值：",paraId:14,tocIndex:8},{value:"const data = [{ id: 1 }, { id: 2 }];\nconst joinData = [{ code: 1, label: 'A' }];\n\nchart.options({\n  data: {\n    type: 'inline',\n    value: data,\n    transform: [\n      {\n        type: 'join',\n        join: joinData,\n        on: ['id', 'code'],\n        select: ['label'],\n        unknown: '未知',\n      },\n    ],\n  },\n});\n",paraId:15,tocIndex:8},{value:"转换结果为：",paraId:16,tocIndex:8},{value:"[\n  { id: 1, label: 'A' },\n  { id: 2, label: '未知' },\n];\n",paraId:17,tocIndex:8},{value:"join 是一种 左连接（left join），意味着主数据一定保留。",paraId:18,tocIndex:9},{value:"select 不指定时默认不提取字段，只用于判断连接关系。",paraId:19,tocIndex:9},{value:"推荐提前对 join 数据做去重处理，避免多对一连接时的歧义。",paraId:20,tocIndex:9},{value:"支持动态函数提取连接字段，适配复杂结构。",paraId:21,tocIndex:9}]},51753:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(74254);const t=[{value:"核密度估计（Kernel Density Estimation，简称 KDE）是一种非参数统计方法，用于估计随机变量的概率密度函数。在 G2 中，KDE 数据转换可以对指定的数据进行核密度算法处理，生成概率密度函数（PDF）数据，底层使用开源库 ",paraId:0,tocIndex:0},{value:"pdfast",paraId:0,tocIndex:0},{value:"，该库使用三角形核函数，优化为 O(N + K) 时间复杂度。",paraId:0,tocIndex:0},{value:"在数据处理后，数据会增加两个字段（默认为 ",paraId:1,tocIndex:0},{value:"y",paraId:1,tocIndex:0},{value:" 和 ",paraId:1,tocIndex:0},{value:"size",paraId:1,tocIndex:0},{value:"），均为数组类型，用于表示密度分布的点和对应的密度值。",paraId:1,tocIndex:0},{value:"密度图（Density Plot）",paraId:2,tocIndex:1},{value:"：展示数据分布的连续估计，比直方图更平滑地展示数据分布。",paraId:2,tocIndex:1},{value:"小提琴图（Violin Plot）",paraId:3,tocIndex:1},{value:"：结合箱线图和密度图的特点，既可以展示数据的分布形状，又能显示关键统计信息。",paraId:3,tocIndex:1},{value:"多组数据分布比较",paraId:4,tocIndex:1},{value:"：通过 ",paraId:4,tocIndex:1},{value:"groupBy",paraId:4,tocIndex:1},{value:" 参数，可以同时展示和比较多个分组的数据分布情况。",paraId:4,tocIndex:1},{value:"平滑的数据可视化",paraId:5,tocIndex:1},{value:"：当需要对离散数据点进行平滑处理，展示其整体趋势和分布时。",paraId:5,tocIndex:1},{value:"不同坐标系下的密度分析",paraId:6,tocIndex:1},{value:"：可以在直角坐标系或极坐标系中应用，创建不同视角的数据分布可视化。",paraId:6,tocIndex:1},{value:"属性",paraId:7,tocIndex:2},{value:"描述",paraId:7,tocIndex:2},{value:"类型",paraId:7,tocIndex:2},{value:"默认值",paraId:7,tocIndex:2},{value:"必选",paraId:7,tocIndex:2},{value:"field",paraId:7,tocIndex:2},{value:"进行核密度算法的数据字段",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"是",paraId:7,tocIndex:2},{value:"groupBy",paraId:7,tocIndex:2},{value:"对数据进行分组的分组字段，可以指定多个",paraId:7,tocIndex:2},{value:"string[]",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"是",paraId:7,tocIndex:2},{value:"as",paraId:7,tocIndex:2},{value:"进行 KDE 处理之后，存储的字段",paraId:7,tocIndex:2},{value:"[string, string]",paraId:7,tocIndex:2},{value:"['y', 'size']",paraId:7,tocIndex:2},{value:"否",paraId:7,tocIndex:2},{value:"min",paraId:7,tocIndex:2},{value:"指定处理范围的最小值",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:"数据最小值",paraId:7,tocIndex:2},{value:"否",paraId:7,tocIndex:2},{value:"max",paraId:7,tocIndex:2},{value:"指定处理范围的最大值",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:"数据最大值",paraId:7,tocIndex:2},{value:"否",paraId:7,tocIndex:2},{value:"size",paraId:7,tocIndex:2},{value:"算法最终生成数据的条数，值越大密度曲线越精细",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:"10",paraId:7,tocIndex:2},{value:"否",paraId:7,tocIndex:2},{value:"width",paraId:7,tocIndex:2},{value:"确定一个元素左右影响多少点，类似于 bandWidth，值越大曲线越平滑",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:"2",paraId:7,tocIndex:2},{value:"否",paraId:7,tocIndex:2},{value:"as",paraId:8,tocIndex:3},{value:"：指定 KDE 处理后生成的两个字段名，第一个字段存储 x 值（即数据点的位置），第二个字段存储 y 值（即对应的密度值）。这两个字段都是数组类型，长度由 ",paraId:8,tocIndex:3},{value:"size",paraId:8,tocIndex:3},{value:" 参数决定。",paraId:8,tocIndex:3},{value:"size",paraId:9,tocIndex:4},{value:"：该参数决定了生成的密度曲线的精细程度。值越大，生成的点越多，密度曲线越精细。在示例中可以看到从默认的 10 增加到 20 或 30 的效果。",paraId:9,tocIndex:4},{value:"width",paraId:10,tocIndex:4},{value:"：该参数控制密度曲线的平滑程度，类似于核密度估计中的带宽参数。值越大，曲线越平滑，但可能会丢失一些细节。",paraId:10,tocIndex:4},{value:"下面的示例展示了如何创建基本的密度图，展示不同物种的数据分布：",paraId:11,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'density', // 设置图表类型为密度图\n  data: {\n    type: 'fetch', // 指定数据类型为通过网络获取\n    value: 'https://assets.antv.antgroup.com/g2/species.json', // 设置数据的 URL 地址\n    transform: [\n      {\n        type: 'kde', // 使用核密度估计（KDE）进行数据转换\n        field: 'y', // 指定 KDE 计算的字段为 'y'\n        groupBy: ['x', 'species'], // 按 'x' 和 'species' 字段对数据进行分组\n        size: 20, // 生成 20 个数据点表示概率密度函数\n      },\n    ],\n  },\n  encode: {\n    x: 'x', // 将 'x' 字段映射到 x 轴\n    y: 'y', // 将 'y' 字段映射到 y 轴\n    color: 'species', // 将 'species' 字段映射到颜色\n    size: 'size', // 将 'size' 字段映射到图形大小\n  },\n  tooltip: false, // 关闭图表的 tooltip 功能\n});\nchart.render();\n",paraId:12,tocIndex:6},{value:"在这个示例中，我们将 ",paraId:13,tocIndex:6},{value:"size",paraId:13,tocIndex:6},{value:" 参数设置为 20，比默认值 10 更大，从而获得更精细的密度曲线。",paraId:13,tocIndex:6},{value:"在极坐标系中使用 KDE 可以创建环形的小提琴图，为数据分布可视化提供新的视角：",paraId:14,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/species.json',\n  },\n  coordinate: { type: 'polar' }, // 设置为极坐标系\n  children: [\n    {\n      type: 'density', // 密度图组件\n      data: {\n        transform: [{ type: 'kde', field: 'y', groupBy: ['x', 'species'] }],\n      },\n      encode: {\n        x: 'x',\n        y: 'y',\n        series: 'species',\n        color: 'species',\n        size: 'size',\n      },\n      tooltip: false,\n    },\n    {\n      type: 'boxplot', // 箱线图组件，用于显示小提琴图\n      encode: {\n        x: 'x',\n        y: 'y',\n        series: 'species',\n        color: 'species',\n        shape: 'violin', // 设置形状为小提琴\n      },\n      style: { opacity: 0.5, strokeOpacity: 0.5, point: false },\n    },\n  ],\n});\nchart.render();\n",paraId:15,tocIndex:7},{value:"这个示例展示了如何将 KDE 与箱线图结合使用，创建小提琴图。在极坐标系中，小提琴图呈环形分布，提供了不同的视角来观察数据分布。",paraId:16,tocIndex:7},{value:"通过调整 KDE 的参数，可以控制密度估计的平滑程度和精度：",paraId:17,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'density',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/species.json',\n    transform: [\n      {\n        type: 'kde',\n        field: 'y',\n        groupBy: ['x'],\n        size: 30, // 增加采样点数量，获得更精细的密度曲线\n        width: 3, // 增加带宽，使曲线更平滑\n        min: 0, // 指定处理范围的最小值\n        max: 8, // 指定处理范围的最大值\n        as: ['density_x', 'density_y'], // 自定义输出字段名\n      },\n    ],\n  },\n  encode: {\n    x: 'x',\n    y: 'density_x', // 使用自定义的输出字段\n    color: 'x',\n    size: 'density_y', // 使用自定义的输出字段\n  },\n  tooltip: false,\n});\nchart.render();\n",paraId:18,tocIndex:8},{value:"这个示例展示了如何自定义 KDE 的各种参数：",paraId:19,tocIndex:8},{value:"size: 30",paraId:20,tocIndex:8},{value:" - 增加采样点数量，获得更精细的密度曲线",paraId:20,tocIndex:8},{value:"width: 3",paraId:20,tocIndex:8},{value:" - 增加带宽，使曲线更平滑",paraId:20,tocIndex:8},{value:"min: 0",paraId:20,tocIndex:8},{value:" 和 ",paraId:20,tocIndex:8},{value:"max: 8",paraId:20,tocIndex:8},{value:" - 指定处理范围的最小值和最大值",paraId:20,tocIndex:8},{value:"as: ['density_x', 'density_y']",paraId:20,tocIndex:8},{value:" - 自定义输出字段名",paraId:20,tocIndex:8},{value:"这些参数的调整可以帮助你获得更精细或更平滑的密度曲线，根据实际需求进行调整。",paraId:21,tocIndex:8},{value:"KDE 数据转换是 G2 中一个强大的工具，可以帮助你创建各种密度相关的可视化，如密度图和小提琴图。通过调整其参数，你可以控制密度曲线的精细度和平滑度，以满足不同的可视化需求。",paraId:22,tocIndex:9},{value:"在不同的坐标系中使用 KDE，可以为数据分布提供不同的视角。结合其他图表类型，如箱线图，可以创建更丰富的数据可视化。",paraId:23,tocIndex:9},{value:"更多的案例，可以查看",paraId:24,tocIndex:9},{value:"图表示例 - 小提琴图",paraId:25,tocIndex:9},{value:"页面。",paraId:24,tocIndex:9}]},23860:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(82332);const t=[{value:"将当前数据变换（Data Transform）流中的片面数据打印到控制台，用于开发者调试数据处理过程。",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart.data({\n  type: 'inline',\n  value: data,\n  transform: [\n    { type: 'slice', start: 1 },\n    { type: 'log' },\n    { type: 'filter', callback: (d) => d.a < 3 },\n  ],\n});\n",paraId:1,tocIndex:0},{value:"上述 ",paraId:2,tocIndex:0},{value:"log",paraId:2,tocIndex:0},{value:" 加入之后，会打印出经过 ",paraId:2,tocIndex:0},{value:"slice",paraId:2,tocIndex:0},{value:" 处理之后的数据，并且这个数据会作为下一个 transform ",paraId:2,tocIndex:0},{value:"filter",paraId:2,tocIndex:0},{value:" 的输入。",paraId:2,tocIndex:0}]},72758:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(50565);const t=[{value:"对数据进行过滤。类似于 ",paraId:0},{value:"Array.prototype.map",paraId:0},{value:"。",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart\n  .data({\n    type: 'inline',\n    value: data,\n    transform: [\n      {\n        type: 'map',\n        callback: (datum, idx) => { ...datum, idx },\n      },\n    ],\n  });\n",paraId:1,tocIndex:0},{value:"上述例子处理之后，数据变成为：",paraId:2,tocIndex:0},{value:"[\n  { a: 1, b: 2, c: 3, idx: 0 },\n  { a: 4, b: 5, c: 6, idx: 1 },\n];\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"callback",paraId:4,tocIndex:1},{value:"函数，传入当前数据，输出处理后的数据",paraId:4,tocIndex:1},{value:"(datum: any) => any",paraId:4,tocIndex:1},{value:"(d) => d",paraId:4,tocIndex:1}]},15653:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(68249);const t=[{value:"G2 中的",paraId:0},{value:"数据（Data）",paraId:0},{value:" 主要用于指定需要可视化的数据和数据转换（预处理）。",paraId:0},{value:"配置数据主要有三种方式。",paraId:1,tocIndex:0},{value:"第一种：设置 ",paraId:2,tocIndex:0},{value:"type: inline",paraId:2,tocIndex:0},{value:"，这种方式定义了一个内联连接器，直接传入具体的数据，这种是 G2 默认的数据源类型。",paraId:2,tocIndex:0},{value:"({\n  data: {\n    type: 'inline', // 指定 inline 类型\n    value: [\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ],\n  },\n});\n",paraId:3,tocIndex:0},{value:"第二种：设置 ",paraId:4,tocIndex:0},{value:"type: fetch",paraId:4,tocIndex:0},{value:"，这种方式定义了一个远程连接器，从远程接口获得数据，让数据源具备一定的动态性，支持 JSON、CSV 等格式解析，适配多场景数据集成，提升大屏、监控等应用的开发效率与交互体验。",paraId:4,tocIndex:0},{value:"({\n  data: {\n    type: 'fetch', // 指定 fetch 类型\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json', // 远程地址\n  },\n});\n",paraId:5,tocIndex:0},{value:"第三种：这种方式是第一种的语法糖，如果数据满足以下三个条件可以直接指定 data 的值：",paraId:6,tocIndex:0},{value:"内联数据",paraId:7,tocIndex:0},{value:"是数组",paraId:7,tocIndex:0},{value:"没有数据转换",paraId:7,tocIndex:0},{value:"({\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n});\n",paraId:8,tocIndex:0},{value:"数据可以指定在 View 层级：",paraId:9,tocIndex:1},{value:"({\n  type: 'view',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n});\n",paraId:10,tocIndex:1},{value:"视图绑定的数据具有传递性：会传递给 ",paraId:11,tocIndex:1},{value:"view.children",paraId:11,tocIndex:1},{value:" 里面的标记，如果该标记没有数据，那么就设置其数据，否则没有任何影响。这意味着对于共享数据的标记，可以把数据和视图绑定。",paraId:11,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  children: [\n    { type: 'line', encode: { x: 'year', y: 'value' } },\n    { type: 'point', encode: { x: 'year', y: 'value' } },\n  ],\n});\nchart.render();\n",paraId:12,tocIndex:1},{value:"也可以指定在 Mark 层级：",paraId:13,tocIndex:1},{value:"({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n});\n",paraId:14,tocIndex:1},{value:"每一个标记都有自己的数据，这意味着我们可以在一个视图中可视化多份数据，比如下面的区间标注图：",paraId:15,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  children: [\n    {\n      type: 'rangeX',\n      data: [\n        { year: [new Date('1933'), new Date('1945')], event: 'Nazi Rule' },\n        {\n          year: [new Date('1948'), new Date('1989')],\n          event: 'GDR (East Germany)',\n        },\n      ],\n      encode: { x: 'year', color: 'event' },\n      scale: { color: { independent: true, range: ['#FAAD14', '#30BF78'] } },\n      style: { fillOpacity: 0.75 },\n      tooltip: false,\n    },\n    {\n      type: 'line',\n      data: {\n        type: 'fetch',\n        value: 'https://assets.antv.antgroup.com/g2/year-population.json',\n      },\n      encode: { x: (d) => new Date(d.year), y: 'population', color: '#333' },\n    },\n  ],\n});\n\nchart.render();\n",paraId:16,tocIndex:1},{value:"一个完整的数据声明由两部分构成：",paraId:17,tocIndex:2},{value:"连接器（Connector）",paraId:17,tocIndex:2},{value:" 和",paraId:17,tocIndex:2},{value:"数据转换（DataTransform）",paraId:17,tocIndex:2},{value:" 。其中连接器是获得数据的方式，通过 ",paraId:17,tocIndex:2},{value:"data.type",paraId:17,tocIndex:2},{value:" 指定，数据转换是预处理函数，通过 ",paraId:17,tocIndex:2},{value:"data.transform",paraId:17,tocIndex:2},{value:" 指定。",paraId:17,tocIndex:2},{value:"({\n  data: {\n    type: 'fetch', // 指定连接器类型\n    // 指定连接器的值\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n    transform: [\n      // 指定转换，可以多个\n      { type: 'filter', callback: (d) => d.sex === 'gender' },\n      {\n        type: 'sort',\n        callback: (a, b) => b.a - a.a,\n      },\n    ],\n  },\n});\n",paraId:18,tocIndex:2},{value:"目前 G2 内置的数据转换有以下几种：",paraId:19,tocIndex:2},{value:"type",paraId:20,tocIndex:2},{value:"描述",paraId:20,tocIndex:2},{value:"属性",paraId:20,tocIndex:2},{value:"custom",paraId:20,tocIndex:2},{value:"自定义数据处理逻辑，允许用户定义自己的操作方式",paraId:20,tocIndex:2},{value:"custom",paraId:21,tocIndex:2},{value:"ema",paraId:20,tocIndex:2},{value:"计算指数移动平均值，用于数据平滑处理",paraId:20,tocIndex:2},{value:"ema",paraId:22,tocIndex:2},{value:"filter",paraId:20,tocIndex:2},{value:"筛选数据，根据条件过滤掉不符合要求的数据",paraId:20,tocIndex:2},{value:"filter",paraId:23,tocIndex:2},{value:"fold",paraId:20,tocIndex:2},{value:"将多个字段展开成按照指定的 ",paraId:20,tocIndex:2},{value:"key",paraId:20,tocIndex:2},{value:" ",paraId:20,tocIndex:2},{value:"value",paraId:20,tocIndex:2},{value:" 组织形式，便于处理和分析",paraId:20,tocIndex:2},{value:"fold",paraId:24,tocIndex:2},{value:"join",paraId:20,tocIndex:2},{value:"合并两个数据表，根据某些条件关联相应的数据行",paraId:20,tocIndex:2},{value:"join",paraId:25,tocIndex:2},{value:"kde",paraId:20,tocIndex:2},{value:"估算数据分布的密度，通常用于概率密度分析",paraId:20,tocIndex:2},{value:"kde",paraId:26,tocIndex:2},{value:"log",paraId:20,tocIndex:2},{value:"将当前数据变换流中的片面数据打印到控制台，用于开发者调试数据处理过程",paraId:20,tocIndex:2},{value:"log",paraId:27,tocIndex:2},{value:"map",paraId:20,tocIndex:2},{value:"对数据进行映射操作，将某种值转换为另一种值",paraId:20,tocIndex:2},{value:"map",paraId:28,tocIndex:2},{value:"pick",paraId:20,tocIndex:2},{value:"从数据中选择指定的字段，用于提取特定信息",paraId:20,tocIndex:2},{value:"pick",paraId:29,tocIndex:2},{value:"rename",paraId:20,tocIndex:2},{value:"重命名数据字段，便于后续处理和阅读",paraId:20,tocIndex:2},{value:"rename",paraId:30,tocIndex:2},{value:"slice",paraId:20,tocIndex:2},{value:"截取数据的部分范围，相当于数据的分页或裁剪",paraId:20,tocIndex:2},{value:"slice",paraId:31,tocIndex:2},{value:"sort",paraId:20,tocIndex:2},{value:"对数据进行排序处理，支持自定义排序规则",paraId:20,tocIndex:2},{value:"sort",paraId:32,tocIndex:2},{value:"sortBy",paraId:20,tocIndex:2},{value:"按照指定的字段进行排序",paraId:20,tocIndex:2},{value:"sortBy",paraId:33,tocIndex:2},{value:"因为数据是和标记绑定的，所以数据更新会稍微复杂一点。以下面的案例作为例子：",paraId:34,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst interval = chart\n  .interval()\n  .data([\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold');\n\nchart.render();\n",paraId:35,tocIndex:3},{value:"更新上面例子 interval 的数据有以下几种方法：",paraId:36,tocIndex:3},{value:"第一种：最基础的方式。",paraId:37,tocIndex:3},{value:"// 更新 interval 绑定的数据\ninterval.data(newData);\n\n// 通过 chart 更新图表的渲染\nchart.render();\n",paraId:38,tocIndex:3},{value:"第二种：上面的方式的语法糖。",paraId:39,tocIndex:3},{value:"// 更新 interval 数据并且渲染图表\ninterval.changeData(newData);\n",paraId:40,tocIndex:3},{value:"第三种：通过查询 API 获得 interval 对象，然后更新数据。",paraId:41,tocIndex:3},{value:"chart.getNodesByType('rect')[0].changeData(data);\n",paraId:42,tocIndex:3},{value:"以下是一个实时改变数据的折线图的例子。",paraId:43,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// 格式化函数：将时间戳转换为 hh:mm:ss 格式\nfunction formatTime(timestamp) {\n  const date = new Date(timestamp);\n  const hours = String(date.getHours()).padStart(2, '0'); // 补齐两位\n  const minutes = String(date.getMinutes()).padStart(2, '0');\n  const seconds = String(date.getSeconds()).padStart(2, '0');\n  return `${hours}:${minutes}:${seconds}`;\n}\n\nconst data = [];\n\nchart.options({\n  type: 'line',\n  data: [],\n  encode: {\n    x: (d) => formatTime(d.time),\n    y: 'temperature',\n    color: 'type',\n    shape: 'smooth',\n    size: 2,\n  },\n  scale: {\n    x: {\n      nice: true,\n    },\n  },\n});\n\nchart.render();\n\nsetInterval(function () {\n  const now = new Date();\n  const time = now.getTime();\n\n  const temperature1 = ~~(Math.random() * 5) + 22;\n  const temperature2 = ~~(Math.random() * 7) + 17;\n\n  if (data.length >= 200) {\n    data.shift();\n    data.shift();\n  }\n\n  data.push({\n    time, // 使用格式化后的时间\n    temperature: temperature1,\n    type: '记录1',\n  });\n  data.push({\n    time, // 使用格式化后的时间\n    temperature: temperature2,\n    type: '记录2',\n  });\n\n  chart.changeData(data);\n}, 1000);\n",paraId:44,tocIndex:3},{value:"如何使用第三方库绘制统计回归线？",paraId:45,tocIndex:4},{value:"借助自定义数据转换能力，我们可以配置：",paraId:46,tocIndex:4},{value:"({\n  data: {\n    transform: [\n      {\n        type: 'custom',\n        callback: customFn(), // 自定义的数据处理函数\n      },\n    ],\n  },\n});\n",paraId:47,tocIndex:4},{value:"这里的",paraId:48,tocIndex:4},{value:"customFn",paraId:48,tocIndex:4},{value:"可以使用外部的数据处理相关的库，极大地拓展了 G2 的数据处理能力。下面的例子中，我们使用第三方库 ",paraId:48,tocIndex:4},{value:"d3-regression",paraId:48,tocIndex:4},{value:" 来生成线性统计回归线：",paraId:48,tocIndex:4},{value:"import { regressionLinear } from 'd3-regression';\n\nnode.data({\n  // 利用 D3 的 regressionLinear 对数据进行线性回归处理\n  transform: [\n    {\n      type: 'custom',\n      callback: regressionLinear(),\n    },\n  ],\n});\n",paraId:49,tocIndex:4},{value:"更多统计回归线案例见 ",paraId:50,tocIndex:4},{value:"数据分析-回归线",paraId:51,tocIndex:4},{value:"。",paraId:50,tocIndex:4}]},68815:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(7341);const t=[{value:"从数据中，按照字段抽取一个数据子集。",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart.data({\n  type: 'inline',\n  value: data,\n  transform: [\n    {\n      type: 'pick',\n      fields: ['a', 'b'],\n    },\n  ],\n});\n",paraId:1,tocIndex:0},{value:"上述例子处理之后，数据变成为：",paraId:2,tocIndex:0},{value:"[\n  { a: 1, b: 2 },\n  { a: 4, b: 5 },\n];\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"fields",paraId:4,tocIndex:1},{value:"抽取的数据字段",paraId:4,tocIndex:1},{value:"string[]",paraId:4,tocIndex:1}]},60028:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(25538);const t=[{value:"重命名数据中的一些字段。",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart.data({\n  type: 'inline',\n  value: data,\n  transform: [\n    {\n      type: 'rename',\n      a: 'x',\n      b: 'y',\n    },\n  ],\n});\n",paraId:1,tocIndex:0},{value:"上述例子处理之后，数据变成为：",paraId:2,tocIndex:0},{value:"[\n  { x: 1, y: 2, c: 3 },\n  { x: 4, y: 5, c: 6 },\n];\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"[key]",paraId:4,tocIndex:1},{value:"重命名数据中的字段 [key] 为 指定的名称",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1}]},54885:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(15849);const t=[{value:"对数据进行分片，获得子集。类似于 ",paraId:0},{value:"Array.prototype.slice",paraId:0},{value:"。",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart.data({\n  type: 'inline',\n  value: data,\n  transform: [\n    {\n      type: 'slice',\n      start: 1,\n    },\n  ],\n});\n",paraId:1,tocIndex:0},{value:"上述例子处理之后，数据变成为：",paraId:2,tocIndex:0},{value:"[{ a: 4, b: 5, c: 6 }];\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"start",paraId:4,tocIndex:1},{value:"分片的起始索引",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:"0",paraId:4,tocIndex:1},{value:"end",paraId:4,tocIndex:1},{value:"分片的结束索引",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:"arr.length - 1",paraId:4,tocIndex:1}]},11231:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(15005);const t=[{value:"对数据按照指定的 callback 进行排序。类似于 ",paraId:0,tocIndex:0},{value:"Array.prototype.sort",paraId:0,tocIndex:0},{value:"，G2 实现 ",paraId:0,tocIndex:0},{value:"sort",paraId:0,tocIndex:0},{value:" 的时候有两个改动点：",paraId:0,tocIndex:0},{value:"JavaScript 中的 sort 函数是会修改原始数组的，在 G2 中改成了 immutable 的写法，防止修改原数组。",paraId:1,tocIndex:0},{value:"如果传入的数据不是数组，那么不会对数据进行任何处理，比如在绘制一些关系图的时候，",paraId:1,tocIndex:0},{value:"data",paraId:1,tocIndex:0},{value:" 一般是 ",paraId:1,tocIndex:0},{value:"object",paraId:1,tocIndex:0},{value:" 类型，这个时候，sort 功能失效，返回原数据。",paraId:1,tocIndex:0},{value:"sort",paraId:2,tocIndex:1},{value:" 用于对数据排序，例如在饼图、排行榜条形图中，需要按照数据从大到小排列，便于更好的看清楚 TOP N 的数据项。",paraId:2,tocIndex:1},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart.options({\n  data: {\n    type: 'inline',\n    value: data,\n    transform: [\n      {\n        type: 'sort',\n        callback: (a, b) => b.a - a.a,\n      },\n    ],\n  },\n});\n",paraId:3,tocIndex:1},{value:"上述例子处理之后，数据变成为：",paraId:4,tocIndex:1},{value:"[\n  { a: 4, b: 5, c: 6 },\n  { a: 1, b: 2, c: 3 },\n];\n",paraId:5,tocIndex:1},{value:"注意：",paraId:6,tocIndex:1},{value:"sort",paraId:6,tocIndex:1},{value:" 数据变换是在 ",paraId:6,tocIndex:1},{value:"data.transform",paraId:6,tocIndex:1},{value:" 中的，在 data 配置简写的情况下是无法配置 transform 的。",paraId:6,tocIndex:1},{value:"属性",paraId:7,tocIndex:2},{value:"描述",paraId:7,tocIndex:2},{value:"类型",paraId:7,tocIndex:2},{value:"默认值",paraId:7,tocIndex:2},{value:"callback",paraId:7,tocIndex:2},{value:"Array.sort 的 comparator，返回 1，0，-1 代表 > = <",paraId:7,tocIndex:2},{value:"(a: any, b: any) => number",paraId:7,tocIndex:2},{value:"(a, b) => 0",paraId:7,tocIndex:2}]},72843:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(92485);const t=[{value:"对数据按照指定的字段进行排序。默认的排序方式为升序排列。",paraId:0},{value:"const data = [\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\nchart.data({\n  type: 'inline',\n  value: data,\n  transform: [\n    {\n      type: 'sortBy',\n      fields: ['sold'], // 根据 sold 字段排序\n    },\n  ],\n});\n",paraId:1,tocIndex:0},{value:"当存在排序字段时，你可以为每一个字段提供一个布尔值 boolean 来改变排序方式，默认值为 true。",paraId:2,tocIndex:0},{value:"chart.data({\n  type: 'inline',\n  value: data,\n  transform: [\n    {\n      type: 'sortBy',\n      fields: [['sold', false]], // 排序方式变为降序\n    },\n  ],\n});\n",paraId:3,tocIndex:0},{value:"当存在多个排序字段时，若前一个字段相同，则继续比较下一个字段。",paraId:4,tocIndex:0},{value:"const options = {\n  fields: [\n    ['name', true],\n    ['age', false],\n  ],\n};\n\nconst data = [\n  { name: 'Alice', age: 25 },\n  { name: 'Bob', age: 23 },\n  { name: 'Alice', age: 22 },\n];\n",paraId:5,tocIndex:0},{value:"此结果按照 name 升序排列，而当 name 相同时，按照 age 降序排列",paraId:6,tocIndex:0},{value:"属性",paraId:7,tocIndex:1},{value:"描述",paraId:7,tocIndex:1},{value:"类型",paraId:7,tocIndex:1},{value:"默认值",paraId:7,tocIndex:1},{value:"fields",paraId:7,tocIndex:1},{value:"排序的字段",paraId:7,tocIndex:1},{value:"(string | [string, boolean])[]",paraId:7,tocIndex:1},{value:"[]",paraId:7,tocIndex:1}]},2645:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(52516);const t=[{value:"数据可视化的核心内容是可视化编码，是将数据信息映射成可视化元素的技术。就像数据包含属性和值，可视化编码也由两部分组成：",paraId:0,tocIndex:0},{value:"图形标记（Mark）",paraId:0,tocIndex:0},{value:" 和 ",paraId:0,tocIndex:0},{value:"视觉通道（Channel）",paraId:0,tocIndex:0},{value:"。",paraId:0,tocIndex:0},{value:"数据属性",paraId:1,tocIndex:0},{value:" -> 标记：直观的代表数据的性质分类，通常是几何图形元素，例如：点、线、面、体。",paraId:1,tocIndex:0},{value:"数据值",paraId:1,tocIndex:0},{value:" -> 视觉通道：用于表现数据属性的定量信息，包括标记的位置、大小、形状、方向、色调、饱和度、亮度等。",paraId:1,tocIndex:0},{value:"视觉通道也可以称为图表属性，原始数据与视觉通道之间的映射关系使我们能迅速获取信息。所以我们可以把图表看成一组图形标记的组合，这些图形标记中携带了一些信息，我们称作它 ",paraId:2,tocIndex:0},{value:"编码",paraId:2,tocIndex:0},{value:" 了一些信息。而当人们从这些符号中读取信息时，我们称作我们 ",paraId:2,tocIndex:0},{value:"解码",paraId:2,tocIndex:0},{value:" 了一些信息。",paraId:2,tocIndex:0},{value:"人类对视觉通道的识别有两种基本的感知模式。第一种感知模式得到的信息是关于对象本身的特征和位置等，对应视觉通道的定性性质和分类性质；第二种感知模式得到的信息是对象某一属性在数值上的大小，对应视觉通道的定量性质或者定序性质。因此我们将视觉通道分为 两大类：",paraId:3,tocIndex:1},{value:"定性（分类）",paraId:4,tocIndex:1},{value:" 的视觉通道，如形状、颜色的色调、控件位置。",paraId:4,tocIndex:1},{value:"定量（连续、有序）",paraId:4,tocIndex:1},{value:" 的视觉通道，如直线的长度、区域的面积、空间的体积、斜度、角度、颜色的饱和度和亮度等。",paraId:4,tocIndex:1},{value:"然而两种分类不是绝对的，例如位置信息，既可以区分不同的分类，又可以分辨连续数据的差异。",paraId:5,tocIndex:1},{value:"进行可视化编码时我们需要考虑不同视觉通道的表现力和有效性，主要体现在下面几个方面：",paraId:6,tocIndex:2},{value:"准确性，是否能够准确的表达视觉数据之间的变化",paraId:7,tocIndex:2},{value:"可辨认性，同一个视觉通道能够编码的分类个数，即可辨识的分类个数上限",paraId:7,tocIndex:2},{value:"可分离性，不同视觉通道的编码对象放置到一起，是否容易分辨",paraId:7,tocIndex:2},{value:"视觉突出，重要的信息，是否用更加突出的视觉通道进行编码",paraId:7,tocIndex:2},{value:"以下是视觉通道的表现力从最好到最差的示意图：",paraId:8,tocIndex:2},{value:"对应视觉编码中的视觉通道，G2 中的视觉通道可以分为以下五种",paraId:9,tocIndex:3},{value:"图形属性",paraId:9,tocIndex:3},{value:"：",paraId:9,tocIndex:3},{value:"视觉通道",paraId:10,tocIndex:4},{value:"描述",paraId:10,tocIndex:4},{value:"x",paraId:10,tocIndex:4},{value:"定义元素在水平方向的位置",paraId:10,tocIndex:4},{value:"y",paraId:10,tocIndex:4},{value:"定义元素在垂直方向的位置",paraId:10,tocIndex:4},{value:"z",paraId:10,tocIndex:4},{value:"定义元素在三维空间中的深度位置",paraId:10,tocIndex:4},{value:"x1",paraId:10,tocIndex:4},{value:"定义元素水平方向的终止位置",paraId:10,tocIndex:4},{value:"y1",paraId:10,tocIndex:4},{value:"定义元素垂直方向的终止位置，堆叠柱状图的内部实现就是计算了 ",paraId:10,tocIndex:4},{value:"y1",paraId:10,tocIndex:4},{value:" 通道的值",paraId:10,tocIndex:4},{value:"series",paraId:10,tocIndex:4},{value:"通过空间位置区分不同数据系列",paraId:10,tocIndex:4},{value:"position",paraId:10,tocIndex:4},{value:"自定义复合图表显示位置，用于平行坐标系和圆形分面图等",paraId:10,tocIndex:4},{value:"position${number}",paraId:10,tocIndex:4},{value:"自定义复合图表显示位置，用于平行坐标系和圆形分面图等",paraId:10,tocIndex:4},{value:"视觉通道",paraId:11,tocIndex:5},{value:"描述",paraId:11,tocIndex:5},{value:"color",paraId:11,tocIndex:5},{value:"通过色调映射数据分类属性",paraId:11,tocIndex:5},{value:"opacity",paraId:11,tocIndex:5},{value:"控制元素的透明度，常用于突出焦点或表达数值强度（如热力图的渐变透明度）",paraId:11,tocIndex:5},{value:"视觉通道",paraId:12,tocIndex:6},{value:"描述",paraId:12,tocIndex:6},{value:"shape",paraId:12,tocIndex:6},{value:"通过几何形态区分数据类别，适合分类数据编码",paraId:12,tocIndex:6},{value:"视觉通道",paraId:13,tocIndex:7},{value:"描述",paraId:13,tocIndex:7},{value:"size",paraId:13,tocIndex:7},{value:"控制元素的物理尺寸（点半径/线宽/柱宽），适合编码定量数据",paraId:13,tocIndex:7},{value:"视觉通道",paraId:14,tocIndex:8},{value:"描述",paraId:14,tocIndex:8},{value:"key",paraId:14,tocIndex:8},{value:"动画元素唯一标识符，用于数据更新",paraId:14,tocIndex:8},{value:"groupKey",paraId:14,tocIndex:8},{value:"动画分组标识符，用于数据更新",paraId:14,tocIndex:8},{value:"enterType",paraId:14,tocIndex:8},{value:"元素进入场景的动画类型（如缩放/淡入）",paraId:14,tocIndex:8},{value:"enterEasing",paraId:14,tocIndex:8},{value:"进入动画的缓动函数",paraId:14,tocIndex:8},{value:"enterDuration",paraId:14,tocIndex:8},{value:"进入动画持续时间",paraId:14,tocIndex:8},{value:"enterDelay",paraId:14,tocIndex:8},{value:"进入动画延迟时间",paraId:14,tocIndex:8},{value:"updateType",paraId:14,tocIndex:8},{value:"数据更新时的过渡动画类型",paraId:14,tocIndex:8},{value:"updateEasing",paraId:14,tocIndex:8},{value:"更新动画的缓动函数",paraId:14,tocIndex:8},{value:"updateDuration",paraId:14,tocIndex:8},{value:"更新动画持续时间",paraId:14,tocIndex:8},{value:"updateDelay",paraId:14,tocIndex:8},{value:"更新动画延迟时间",paraId:14,tocIndex:8},{value:"exitType",paraId:14,tocIndex:8},{value:"元素退出场景的动画类型（如滑动消失）",paraId:14,tocIndex:8},{value:"exitEasing",paraId:14,tocIndex:8},{value:"退出动画的缓动函数",paraId:14,tocIndex:8},{value:"exitDuration",paraId:14,tocIndex:8},{value:"退出动画持续时间",paraId:14,tocIndex:8},{value:"exitDelay",paraId:14,tocIndex:8},{value:"退出动画延迟时间",paraId:14,tocIndex:8},{value:"为了控制标记的样式，我们往往会把一列数据和它的某一项视觉通道绑定。",paraId:15,tocIndex:9},{value:"下面是一组筹备活动的时间数据：",paraId:16,tocIndex:9},{value:"table([\n  { name: '活动策划', startTime: 1, endTime: 4 },\n  { name: '场地物流规划', startTime: 3, endTime: 13 },\n  { name: '选择供应商', startTime: 5, endTime: 8 },\n  { name: '租赁场地', startTime: 9, endTime: 13 },\n  { name: '预定餐饮服务商', startTime: 10, endTime: 14 },\n  { name: '租赁活动装饰团队', startTime: 12, endTime: 17 },\n  { name: '彩排', startTime: 14, endTime: 16 },\n  { name: '活动庆典', startTime: 17, endTime: 18 },\n]);\n",paraId:17,tocIndex:9},{value:"在下面的例子中，我们把数据中 ",paraId:18,tocIndex:9},{value:"name",paraId:18,tocIndex:9},{value:" 一列数据和 ",paraId:18,tocIndex:9},{value:"x",paraId:18,tocIndex:9},{value:" 通道绑定，",paraId:18,tocIndex:9},{value:"endTime",paraId:18,tocIndex:9},{value:" 列数据减去 ",paraId:18,tocIndex:9},{value:"startTime",paraId:18,tocIndex:9},{value:" 列数据的值和 ",paraId:18,tocIndex:9},{value:"y",paraId:18,tocIndex:9},{value:" 通道绑定。这种绑定的过程被称为",paraId:18,tocIndex:9},{value:"编码（Encode）",paraId:18,tocIndex:9},{value:"，我们常常说图形的某个视觉属性编码了一列数据，这种数据驱动的属性被称为",paraId:18,tocIndex:9},{value:"通道（Channel）",paraId:18,tocIndex:9},{value:"。比如下面的 interval 标记 的 ",paraId:18,tocIndex:9},{value:"x",paraId:18,tocIndex:9},{value:"，",paraId:18,tocIndex:9},{value:"y",paraId:18,tocIndex:9},{value:" 通道都分别编码了对应列的数据，可以清晰地显示不同事项和消耗时间的关系。",paraId:18,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { name: '活动策划', startTime: 1, endTime: 4 },\n    { name: '场地物流规划', startTime: 3, endTime: 13 },\n    { name: '选择供应商', startTime: 5, endTime: 8 },\n    { name: '租赁场地', startTime: 9, endTime: 13 },\n    { name: '预定餐饮服务商', startTime: 10, endTime: 14 },\n    { name: '租赁活动装饰团队', startTime: 12, endTime: 17 },\n    { name: '彩排', startTime: 14, endTime: 16 },\n    { name: '活动庆典', startTime: 17, endTime: 18 },\n  ],\n  encode: {\n    x: 'name', // 事项名称字段映射X轴位置\n    y: (datum) => datum.endTime - datum.startTime, // 结束时间减去开始时间映射Y轴位置\n  },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  axis: {\n    x: {\n      title: '事项',\n    },\n    y: {\n      title: '消耗时间',\n    },\n  },\n});\n\nchart.render();\n",paraId:19,tocIndex:9},{value:"当我们想进一步分析事项的时序关系的时候，就需要借助其他的视觉通道。",paraId:20,tocIndex:9},{value:"在下面的例子中，我们把数据中 ",paraId:21,tocIndex:9},{value:"startTime",paraId:21,tocIndex:9},{value:" 一列数据和 ",paraId:21,tocIndex:9},{value:"y",paraId:21,tocIndex:9},{value:" 通道绑定，",paraId:21,tocIndex:9},{value:"endTime",paraId:21,tocIndex:9},{value:" 一列数据和 ",paraId:21,tocIndex:9},{value:"y1",paraId:21,tocIndex:9},{value:" 通道绑定（当然，你也可以将",paraId:21,tocIndex:9},{value:"[startTime, endTime]",paraId:21,tocIndex:9},{value:"绑定到 ",paraId:21,tocIndex:9},{value:"y",paraId:21,tocIndex:9},{value:" 通道，详见",paraId:21,tocIndex:9},{value:"数组通道",paraId:22,tocIndex:9},{value:"），通过这样的数据编码方式来实现一个甘特图的效果。为了更好的区分不同事项，在 ",paraId:21,tocIndex:9},{value:"x",paraId:21,tocIndex:9},{value:" 通道编码了 ",paraId:21,tocIndex:9},{value:"name",paraId:21,tocIndex:9},{value:" 列的数据以外，额外把数据中 ",paraId:21,tocIndex:9},{value:"name",paraId:21,tocIndex:9},{value:" 一列数据和 ",paraId:21,tocIndex:9},{value:"color",paraId:21,tocIndex:9},{value:" 通道也进行绑定，这样通过不同的颜色以及不同的 x 轴位置，我们能够更好地区分不同事项。",paraId:21,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { name: '活动策划', startTime: 1, endTime: 4 },\n    { name: '场地物流规划', startTime: 3, endTime: 13 },\n    { name: '选择供应商', startTime: 5, endTime: 8 },\n    { name: '租赁场地', startTime: 9, endTime: 13 },\n    { name: '预定餐饮服务商', startTime: 10, endTime: 14 },\n    { name: '租赁活动装饰团队', startTime: 12, endTime: 17 },\n    { name: '彩排', startTime: 14, endTime: 16 },\n    { name: '活动庆典', startTime: 17, endTime: 18 },\n  ],\n  encode: {\n    x: 'name', // 事项名称字段映射X轴位置\n    y: 'startTime', // 事项开始时间字段映射y位置\n    y1: 'endTime', // 事项结束时间字段映射y1轴位置\n    color: 'name', // 事项名称字段映射颜色\n  },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  axis: {\n    x: {\n      title: '事项',\n    },\n    y: {\n      title: '时间',\n    },\n  },\n});\n\nchart.render();\n",paraId:23,tocIndex:9},{value:"这已经是一个较为完整的甘特图了，如果想强化时间顺序，可以借助 G2 中动画相关的视觉通道来实现时序动画的效果，下面的例子对 ",paraId:24,tocIndex:9},{value:"enterDuration",paraId:24,tocIndex:9},{value:" 通道和 ",paraId:24,tocIndex:9},{value:"enterDelay",paraId:24,tocIndex:9},{value:" 通道进行了编码，使得不同事项对应的标记的进入动画延迟时间和持续时间跟数据里的开始时间和结束时间相关联。",paraId:24,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { name: '活动策划', startTime: 1, endTime: 4 },\n    { name: '场地物流规划', startTime: 3, endTime: 13 },\n    { name: '选择供应商', startTime: 5, endTime: 8 },\n    { name: '租赁场地', startTime: 9, endTime: 13 },\n    { name: '预定餐饮服务商', startTime: 10, endTime: 14 },\n    { name: '租赁活动装饰团队', startTime: 12, endTime: 17 },\n    { name: '彩排', startTime: 14, endTime: 16 },\n    { name: '活动庆典', startTime: 17, endTime: 18 },\n  ],\n  encode: {\n    x: 'name', // 事项名称字段映射X轴位置\n    y: 'startTime', // 事项开始时间字段映射y位置\n    y1: 'endTime', // 事项结束时间字段映射y1轴位置\n    color: 'name', // 事项名称字段映射颜色\n    enterDuration: (datum) => datum.endTime - datum.startTime, // 事项结束时间减去开始时间映射进入动画持续时间\n    enterDelay: 'startTime', // 事项开始时间映射进入动画延迟时间\n  },\n  scale: { enterDuration: { zero: true, range: [0, 3000] } },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  axis: {\n    x: {\n      title: '事项',\n    },\n    y: {\n      title: '时间',\n    },\n  },\n});\n\nchart.render();\n",paraId:25,tocIndex:9},{value:"G2 中",paraId:26,tocIndex:10},{value:"编码（Encode）",paraId:26,tocIndex:10},{value:" 主要用于指定视觉元素属性和数据之间的关系，可以在 Mark 层级指定编码：",paraId:26,tocIndex:10},{value:"({\n  type: 'interval',\n  encode: {\n    x: 'name',\n    y: 'value',\n  },\n});\n",paraId:27,tocIndex:10},{value:"// API\n// 第一种\nchart.interval().encode('x', 'name').encode('y', 'value');\n\n// 第二种\nchart.interval().encode({ x: 'name', y: 'value' });\n",paraId:28,tocIndex:10},{value:"也可以在 View 层级指定编码：",paraId:29,tocIndex:10},{value:"({\n  type: 'view',\n  encode: {\n    x: 'name',\n    y: 'value',\n  },\n});\n",paraId:30,tocIndex:10},{value:"// API\n// 第一种\nchart.encode('x', 'name').encode('y', 'value');\n\n// 第二种\nchart.encode({ x: 'name', y: 'value' });\n",paraId:31,tocIndex:10},{value:"通道编码具有传递性，视图的编码会传递给 ",paraId:32,tocIndex:10},{value:"children",paraId:32,tocIndex:10},{value:" 指定的标记，如果该标记没有对应通道的编码，那么就设置，否则不做任何事情。比如绘制一个点线图：",paraId:32,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .data([\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ])\n  .encode('x', 'year') // 视图层级的编码\n  .encode('y', 'value');\n\nchart.line();\n\nchart.point();\n\nchart.render();\n",paraId:33,tocIndex:10},{value:"一个完整的编码是由 ",paraId:34,tocIndex:11},{value:"encode.type",paraId:34,tocIndex:11},{value:" 和 ",paraId:34,tocIndex:11},{value:"encode.value",paraId:34,tocIndex:11},{value:" 组成的。",paraId:34,tocIndex:11},{value:"编码后会按照编码方式生成指定通道下的数组。",paraId:35,tocIndex:11},{value:"编码方式",paraId:36,tocIndex:11},{value:"type",paraId:36,tocIndex:11},{value:"value",paraId:36,tocIndex:11},{value:"描述",paraId:36,tocIndex:11},{value:"字段编码",paraId:36,tocIndex:11},{value:"field",paraId:36,tocIndex:11},{value:"string",paraId:36,tocIndex:11},{value:"数据某一列的字段名",paraId:36,tocIndex:11},{value:"函数编码",paraId:36,tocIndex:11},{value:"transform",paraId:36,tocIndex:11},{value:"(value, index, array) => number | string | boolean | Date",paraId:36,tocIndex:11},{value:"通过回调函数指定通道和新生成的一些绑定",paraId:36,tocIndex:11},{value:"常量编码",paraId:36,tocIndex:11},{value:"constant",paraId:36,tocIndex:11},{value:"any",paraId:36,tocIndex:11},{value:"指定通道值为常量",paraId:36,tocIndex:11},{value:"数据编码",paraId:36,tocIndex:11},{value:"column",paraId:36,tocIndex:11},{value:"number[] | string[] | boolean[] | Date[]",paraId:36,tocIndex:11},{value:"指定通道值为一个数组",paraId:36,tocIndex:11},{value:"在 G2 中提供了语法糖，在大部分情况下 ",paraId:37,tocIndex:11},{value:"encode.type",paraId:37,tocIndex:11},{value:"可以省略。",paraId:37,tocIndex:11},{value:"({\n  type: 'point',\n  encode: {\n    x: { type: 'field', value: 'weight' },\n    y: { type: 'field', value: 'height' },\n    color: { type: 'field', value: 'gender' },\n  },\n});\n",paraId:38,tocIndex:11},{value:"也可以利用语法糖简化写法：",paraId:39,tocIndex:11},{value:"// 语法糖\n({\n  type: 'point',\n  encode: {\n    x: 'weight',\n    y: 'height',\n    color: 'gender',\n  },\n});\n",paraId:40,tocIndex:11},{value:"指定通道和数据的某一列绑定：",paraId:41,tocIndex:12},{value:"(data) => data.map((d) => d[value]);\n",paraId:42,tocIndex:12},{value:"({\n  type: 'interval',\n  encode: { x: { type: 'field', value: 'name' } },\n});\n",paraId:43,tocIndex:12},{value:"// 语法糖\n({\n  type: 'interval',\n  encode: { x: 'name' },\n});\n",paraId:44,tocIndex:12},{value:"指定通道和新生成的一些绑定：",paraId:45,tocIndex:13},{value:"(data) => data.map(value);\n",paraId:46,tocIndex:13},{value:"({\n  type: 'interval',\n  encode: {\n    color: {\n      type: 'transform',\n      value: (d) => (d.value > 100 ? 'high' : 'low'),\n    },\n  },\n});\n",paraId:47,tocIndex:13},{value:"// 语法糖\n({\n  type: 'interval',\n  encode: {\n    color: (d) => (d.value > 100 ? 'high' : 'low'),\n  },\n});\n",paraId:48,tocIndex:13},{value:"还可以通过函数编码的方式在多轴图中生成对应通道的图例。",paraId:49,tocIndex:13},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { time: '10:10', call: 4, waiting: 2, people: 2 },\n    { time: '10:15', call: 2, waiting: 6, people: 3 },\n    { time: '10:20', call: 13, waiting: 2, people: 5 },\n    { time: '10:25', call: 9, waiting: 9, people: 1 },\n    { time: '10:30', call: 5, waiting: 2, people: 3 },\n    { time: '10:35', call: 8, waiting: 2, people: 1 },\n    { time: '10:40', call: 13, waiting: 1, people: 2 },\n  ],\n  children: [\n    {\n      type: 'interval',\n      encode: {\n        x: 'time',\n        y: 'waiting',\n        color: () => 'waiting',\n        series: () => 'waiting',\n      },\n      scale: { y: { nice: true } },\n      axis: { y: { title: 'Waiting' } },\n    },\n    {\n      type: 'interval',\n      encode: {\n        x: 'time',\n        y: 'people',\n        color: () => 'people',\n        series: () => 'people',\n      },\n      scale: { y: { independent: true } },\n      axis: { y: { position: 'right', grid: null, title: 'People' } },\n    },\n    {\n      type: 'line',\n      encode: { x: 'time', y: 'call', color: () => 'call' },\n      scale: { series: { independent: true } },\n    },\n  ],\n});\n\nchart.render();\n",paraId:50,tocIndex:13},{value:"通过函数编码还可以在某些时候禁用某些通道。在 G2 中，当未定义 ",paraId:51,tocIndex:13},{value:"series",paraId:51,tocIndex:13},{value:" 通道，且 ",paraId:51,tocIndex:13},{value:"color",paraId:51,tocIndex:13},{value:" 通道已定义的情况下，会复制一份值到 ",paraId:51,tocIndex:13},{value:"series",paraId:51,tocIndex:13},{value:" 通道，以实现分类的效果。 下面的例子中 ",paraId:51,tocIndex:13},{value:"color",paraId:51,tocIndex:13},{value:" 通道被映射到连续字段上，此时如果 ",paraId:51,tocIndex:13},{value:"series",paraId:51,tocIndex:13},{value:" 再被映射到连续字段上会影响渐变折线的显示，需要通过 ",paraId:51,tocIndex:13},{value:"series: () => undefined",paraId:51,tocIndex:13},{value:" 的方式禁用。",paraId:51,tocIndex:13},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/temperatures3.json',\n  },\n  encode: {\n    x: (d) => new Date(d.date),\n    y: ['low', 'high'],\n    color: (d) => d.high - d.low,\n    series: () => undefined,\n  },\n  scale: { color: { palette: 'reds' } },\n  style: { gradient: 'x' },\n  axis: { x: { title: 'date' } },\n});\n\nchart.render();\n",paraId:52,tocIndex:13},{value:"指定通道值为常量，常常用于指定颜色通道或者大小通道，指定标记为某种颜色或者某个尺寸，这种编码方式不会生成对应通道的图例。",paraId:53,tocIndex:14},{value:"(data) => data.map(() => value);\n",paraId:54,tocIndex:14},{value:"({\n  type: 'point',\n  encode: {\n    color: { type: 'constant', value: 'steelblue' },\n    size: { type: 'constant', value: 10 },\n  },\n});\n",paraId:55,tocIndex:14},{value:"// 语法糖\n({\n  type: 'interval',\n  encode: {\n    color: 'steelblue',\n    size: 10,\n  },\n});\n",paraId:56,tocIndex:14},{value:"指定某个通道的值为一个数组。",paraId:57,tocIndex:15},{value:"() => value;\n",paraId:58,tocIndex:15},{value:"({\n  type: 'line',\n  encode: {\n    x: { type: 'column', value: [0, 1, , 2, 3] },\n  },\n});\n",paraId:59,tocIndex:15},{value:"对于一些大数据的场景，使用数组列会更适合，下面是一个简单的例子。",paraId:60,tocIndex:15},{value:"import { Chart } from '@antv/g2';\n\nconst I = [0, 1, 2, 3, 4];\nconst X = I.map((i) => ((i - 2) * Math.PI) / 2);\nconst Y = X.map((x) => Math.sin(x));\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  data: I,\n  encode: {\n    x: {\n      type: 'column',\n      value: X,\n    },\n    y: {\n      type: 'column',\n      value: Y,\n    },\n    shape: 'smooth',\n  },\n});\n\nchart.render();\n",paraId:61,tocIndex:15},{value:"当然，对于位置相关的视觉通道来说：例如 x 和 y 通道，往往不只需要一列数据，比如一个瀑布图，这个时候可以通过数组给一个通道指定多个列。",paraId:62,tocIndex:16},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { month: 'Jan.', profit: 387264, start: 0, end: 387264 },\n    { month: 'Feb.', profit: 772096, start: 387264, end: 1159360 },\n    { month: 'Mar.', profit: 638075, start: 1159360, end: 1797435 },\n    { month: 'Apr.', profit: -211386, start: 1797435, end: 1586049 },\n    { month: 'May', profit: -138135, start: 1586049, end: 1447914 },\n    { month: 'Jun', profit: -267238, start: 1447914, end: 1180676 },\n    { month: 'Jul.', profit: 431406, start: 1180676, end: 1612082 },\n    { month: 'Aug.', profit: 363018, start: 1612082, end: 1975100 },\n    { month: 'Sep.', profit: -224638, start: 1975100, end: 1750462 },\n    { month: 'Oct.', profit: -299867, start: 1750462, end: 1450595 },\n    { month: 'Nov.', profit: 607365, start: 1450595, end: 2057960 },\n    { month: 'Dec.', profit: 1106986, start: 2057960, end: 3164946 },\n    { month: 'Total', start: 0, end: 3164946 },\n  ],\n  encode: {\n    x: 'month',\n    y: ['end', 'start'], // 等价于 y:'end', y1:'start'\n    color: (d) =>\n      d.month === 'Total' ? 'Total' : d.profit > 0 ? 'Increase' : 'Decrease',\n  },\n  axis: { y: { labelFormatter: '~s' } },\n});\n\nchart.render();\n",paraId:63,tocIndex:16},{value:"同时也可以通过 ",paraId:64,tocIndex:16},{value:"${channel}${index}",paraId:64,tocIndex:16},{value:" 的形式去分别指定：",paraId:64,tocIndex:16},{value:"// 和上面的形式等价\nchart.encode('y', 'end').encode('y1', 'start');\n",paraId:65,tocIndex:16}]},92851:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(43132);const t=[{value:"G2 对外暴露了一些事件，用于获取图表的生命周期，以及交互信息。G2 导出了一个 ",paraId:0},{value:"ChartEvent",paraId:0},{value:" 类型，用于定义事件的类型。",paraId:0},{value:"import { Chart, ChartEvent } from '@antv/g2';\n\nconst chart = new Chart({\n  container,\n  canvas,\n});\n\nchart.data([\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n]);\n\nchart\n  .interval()\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  .encode('color', 'genre')\n  .axis({ x: { animate: false }, y: { animate: false } });\n\nchart.on('interval:click', (e) => {\n  console.log(e.data.data); // 展示点击的数据\n});\n\nchart.on('element:click', (e) => {\n  console.log(e.data.data); // 展示点击的数据\n});\n\nchart.render();\n",paraId:1},{value:"如果想要获取图表的生命周期信息，可以通过下面的方式：",paraId:2,tocIndex:0},{value:"chart.on(ChartEvent.AFTER_RENDER, (ev) => {\n  console.log(ev);\n});\n",paraId:3,tocIndex:0},{value:"G2 目前提供了以下生命周期事件：",paraId:4,tocIndex:0},{value:"事件名",paraId:5,tocIndex:0},{value:"说明",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"BEFORE_RENDER",paraId:5,tocIndex:0},{value:"渲染前",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"BEFORE_PAINT",paraId:5,tocIndex:0},{value:"绘制前",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"AFTER_PAINT",paraId:5,tocIndex:0},{value:"绘制后",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"AFTER_RENDER",paraId:5,tocIndex:0},{value:"渲染后",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"BEFORE_CHANGE_DATA",paraId:5,tocIndex:0},{value:"更改数据前",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"AFTER_CHANGE_DATA",paraId:5,tocIndex:0},{value:"更改数据后",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"BEFORE_CLEAR",paraId:5,tocIndex:0},{value:"清理画布前",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"AFTER_CLEAR",paraId:5,tocIndex:0},{value:"清理画布后",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"BEFORE_DESTROY",paraId:5,tocIndex:0},{value:"销毁画布前",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"AFTER_DESTROY",paraId:5,tocIndex:0},{value:"销毁画布后",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"BEFORE_CHANGE_SIZE",paraId:5,tocIndex:0},{value:"更改画布尺寸前",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"AFTER_CHANGE_SIZE",paraId:5,tocIndex:0},{value:"更改画布尺寸后",paraId:5,tocIndex:0},{value:"渲染前",paraId:6,tocIndex:0},{value:"：指 G2 着手开始处理数据，进行布局，绘制图形等操作。",paraId:6,tocIndex:0},{value:"绘制前",paraId:6,tocIndex:0},{value:"： 指完成数据处理，布局，绘制图形等操作，但是还没有进行绘制。",paraId:6,tocIndex:0},{value:"绘制后",paraId:6,tocIndex:0},{value:"： 指 G2 完成所有的绘制操作，但可能存在动画，动画结束后，图表才算真正的渲染完成。",paraId:6,tocIndex:0},{value:"渲染后",paraId:6,tocIndex:0},{value:"： 指 G2 完成所有的绘制操作，包括动画。",paraId:6,tocIndex:0},{value:"清理画布后",paraId:6,tocIndex:0},{value:"： 容器中的图表已经被清理，但是 G2 实例还存在，可以继续使用。",paraId:6,tocIndex:0},{value:"销毁画布后",paraId:6,tocIndex:0},{value:"： G2 实例已经被销毁，无法再使用。",paraId:6,tocIndex:0},{value:"如果你想要获取图表的交互信息，可以通过下面的方式：",paraId:7,tocIndex:1},{value:"监听全局 ",paraId:8,tocIndex:1},{value:"element",paraId:8,tocIndex:1},{value:" 事件",paraId:8,tocIndex:1},{value:"chart.on(`element:${ChartEvent.EventType}`, (ev) => {\n  console.log(ev);\n});\n",paraId:9,tocIndex:1},{value:"监听指定 ",paraId:10,tocIndex:1},{value:"element",paraId:10,tocIndex:1},{value:" 事件",paraId:10,tocIndex:1},{value:"chart.on(`${markType}:${ChartEvent.EventType}`, (ev) => {\n  console.log(ev);\n});\n\n// 如，监听柱状图中的柱子的点击事件\nchart.on(`interval:${ChartEvent.CLICK}`, (ev) => {\n  console.log(ev);\n});\n",paraId:11,tocIndex:1},{value:"监听 plot 区域事件",paraId:12,tocIndex:1},{value:"chart.on('plot:click', (event) => console.log(event));\n",paraId:13,tocIndex:1},{value:"监听全局 component 事件",paraId:14,tocIndex:1},{value:"chart.on('component:click', (event) => console.log(event));\n",paraId:15,tocIndex:1},{value:"监听全局 label 事件",paraId:16,tocIndex:1},{value:"chart.on('label:click', (event) => console.log(event));\n",paraId:17,tocIndex:1},{value:"事件名",paraId:18,tocIndex:2},{value:"说明",paraId:18,tocIndex:2},{value:"回调参数",paraId:18,tocIndex:2},{value:"ChartEvent.",paraId:18,tocIndex:2},{value:"CLICK",paraId:18,tocIndex:2},{value:"点击",paraId:18,tocIndex:2},{value:"Event",paraId:18,tocIndex:2},{value:"ChartEvent.",paraId:18,tocIndex:2},{value:"DBLCLICK",paraId:18,tocIndex:2},{value:"双击",paraId:18,tocIndex:2},{value:"Event",paraId:18,tocIndex:2},{value:"事件名",paraId:19,tocIndex:3},{value:"说明",paraId:19,tocIndex:3},{value:"回调参数",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_TAP",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_DOWN",paraId:19,tocIndex:3},{value:"当指针按下时",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_UP",paraId:19,tocIndex:3},{value:"当指针松开时",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_OVER",paraId:19,tocIndex:3},{value:"当指针进入目标元素时",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_OUT",paraId:19,tocIndex:3},{value:"当指针离开目标元素时",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_MOVE",paraId:19,tocIndex:3},{value:"当指针改变坐标时",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_ENTER",paraId:19,tocIndex:3},{value:"当指针进入目标元素或其子元素时",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_LEAVE",paraId:19,tocIndex:3},{value:"当指针离开目标元素或其子元素时",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_UPOUTSIDE",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"如果希望监听拖拽事件，需要设置 draggable 和 droppable 属性",paraId:20,tocIndex:4},{value:"chart.interval().style('draggable', true).style('droppable', true);\n",paraId:21,tocIndex:4},{value:"事件名",paraId:22,tocIndex:4},{value:"说明",paraId:22,tocIndex:4},{value:"回调参数",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DRAG_START",paraId:22,tocIndex:4},{value:"开始拖拽时",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DRAG",paraId:22,tocIndex:4},{value:"拖拽过程中",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DRAG_END",paraId:22,tocIndex:4},{value:"拖拽完成时",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DRAG_ENTER",paraId:22,tocIndex:4},{value:"元素被拖拽进入目标元素内时",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DRAG_LEAVE",paraId:22,tocIndex:4},{value:"元素被拖拽离开目标元素时",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DRAG_OVER",paraId:22,tocIndex:4},{value:"元素被拖拽悬停在目标元素内时",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DROP",paraId:22,tocIndex:4},{value:"元素被放置到目标元素内时",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4},{value:"详见交互-事件",paraId:23,tocIndex:5},{value:"示例",paraId:24,tocIndex:5}]},916:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(33950);const t=[{value:"brushAxisHighlight",paraId:0,tocIndex:0},{value:" 交互的对象是坐标轴，通过在坐标轴上框选区域来高亮显示对应的图表元素。这种交互方式特别适合于平行坐标系图表，可以帮助用户快速筛选和分析多维数据。",paraId:0,tocIndex:0},{value:"触发",paraId:1,tocIndex:0},{value:"：在坐标轴上进行框选操作。",paraId:1,tocIndex:0},{value:"结束",paraId:1,tocIndex:0},{value:"：点击非框选范围的坐标轴区域或双击已有的框选区域。",paraId:1,tocIndex:0},{value:"影响状态",paraId:1,tocIndex:0},{value:"：\n",paraId:1,tocIndex:0},{value:"框选范围内的元素变为 ",paraId:2,tocIndex:0},{value:"active",paraId:2,tocIndex:0},{value:" 状态。",paraId:2,tocIndex:0},{value:"框选范围外的元素变为 ",paraId:2,tocIndex:0},{value:"inactive",paraId:2,tocIndex:0},{value:" 状态。",paraId:2,tocIndex:0},{value:"交互内置状态：",paraId:3,tocIndex:0},{value:"({\n  // 定义 inactive 状态下的元素透明度为0.5\n  state: { inactive: { opacity: 0.5 } },\n});\n",paraId:4,tocIndex:0},{value:"配置 ",paraId:5,tocIndex:1},{value:"brushAxisHighlight",paraId:5,tocIndex:1},{value:" 交互有两种方式：",paraId:5,tocIndex:1},{value:"第一种，传入 ",paraId:6,tocIndex:1},{value:"boolean",paraId:6,tocIndex:1},{value:" 设置是否开启交互。",paraId:6,tocIndex:1},{value:"({\n  type: 'line',\n  interaction: { brushAxisHighlight: true }, // 采用默认配置\n});\n",paraId:7,tocIndex:1},{value:"第二种，传入 ",paraId:8,tocIndex:1},{value:"配置项",paraId:9,tocIndex:1},{value:" 对交互进行配置。",paraId:8,tocIndex:1},{value:"({\n  type: 'line',\n  interaction: {\n    brushAxisHighlight: {\n      maskFill: 'red',\n      maskOpacity: 0.8,\n    },\n  },\n});\n",paraId:10,tocIndex:1},{value:"交互可以配置在 Mark 层级：",paraId:11,tocIndex:2},{value:"({\n  type: 'line',\n  interaction: { brushAxisHighlight: true },\n});\n",paraId:12,tocIndex:2},{value:"也可以配置在 View 层级，视图上声明的交互会传递给 ",paraId:13,tocIndex:2},{value:"children",paraId:13,tocIndex:2},{value:" 声明的标记：",paraId:13,tocIndex:2},{value:"({\n  type: 'view',\n  interaction: { brushAxisHighlight: true },\n  children: [\n    {\n      type: 'line',\n      // 继承父级的交互配置\n    },\n  ],\n});\n",paraId:14,tocIndex:2},{value:"属性",paraId:15,tocIndex:3},{value:"描述",paraId:15,tocIndex:3},{value:"类型",paraId:15,tocIndex:3},{value:"默认值",paraId:15,tocIndex:3},{value:"必选",paraId:15,tocIndex:3},{value:"reverse",paraId:15,tocIndex:3},{value:"brush 是否反转，反转后选中区域外的元素会被高亮",paraId:15,tocIndex:3},{value:"boolean",paraId:15,tocIndex:3},{value:"false",paraId:15,tocIndex:3},{value:"facet",paraId:15,tocIndex:3},{value:"brush 是否跨分面，控制交互方式",paraId:15,tocIndex:3},{value:"boolean",paraId:15,tocIndex:3},{value:"false",paraId:15,tocIndex:3},{value:"selectedHandles",paraId:15,tocIndex:3},{value:"可以 resize 的手柄方向",paraId:15,tocIndex:3},{value:"string[]",paraId:15,tocIndex:3},{value:"['handle-n','handle-e','handle-s','handle-w','handle-nw','handle-ne','handle-se','handle-sw']",paraId:15,tocIndex:3},{value:"brushRegion",paraId:15,tocIndex:3},{value:"自定义框选区域，一般不用配置，G2 内部用来配置 brushXHighlight 和 brushYHighlight",paraId:15,tocIndex:3},{value:"(x, y, x1, y1, extent) => any",paraId:15,tocIndex:3},{value:"(x, y, x1, y1) => [x, y, x1, y1]",paraId:15,tocIndex:3},{value:"mask",paraId:15,tocIndex:3},{value:"框选区域的蒙版样式",paraId:15,tocIndex:3},{value:"对象",paraId:15,tocIndex:3},{value:"详见下方 mask 部分",paraId:15,tocIndex:3},{value:"maskHandle",paraId:15,tocIndex:3},{value:"框选区域的手柄样式",paraId:15,tocIndex:3},{value:"对象",paraId:15,tocIndex:3},{value:"详见下方 maskHandle 部分",paraId:15,tocIndex:3},{value:"配置框选区域的蒙版的样式。",paraId:16,tocIndex:4},{value:"属性",paraId:17,tocIndex:4},{value:"描述",paraId:17,tocIndex:4},{value:"类型",paraId:17,tocIndex:4},{value:"默认值",paraId:17,tocIndex:4},{value:"必选",paraId:17,tocIndex:4},{value:"maskFill",paraId:17,tocIndex:4},{value:"蒙版的填充色",paraId:17,tocIndex:4},{value:"string",paraId:17,tocIndex:4},{value:"#777",paraId:17,tocIndex:4},{value:"maskFillOpacity",paraId:17,tocIndex:4},{value:"蒙版的填充透明度",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"0.3",paraId:17,tocIndex:4},{value:"maskStroke",paraId:17,tocIndex:4},{value:"蒙版的描边",paraId:17,tocIndex:4},{value:"string",paraId:17,tocIndex:4},{value:"#fff",paraId:17,tocIndex:4},{value:"maskStrokeOpacity",paraId:17,tocIndex:4},{value:"描边透明度",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"maskLineWidth",paraId:17,tocIndex:4},{value:"蒙版描边的宽度",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"maskLineDash",paraId:17,tocIndex:4},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离",paraId:17,tocIndex:4},{value:"[number,number]",paraId:17,tocIndex:4},{value:"maskOpacity",paraId:17,tocIndex:4},{value:"蒙版的整体透明度",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"maskShadowColor",paraId:17,tocIndex:4},{value:"蒙版阴影颜色",paraId:17,tocIndex:4},{value:"string",paraId:17,tocIndex:4},{value:"maskShadowBlur",paraId:17,tocIndex:4},{value:"蒙版阴影的高斯模糊系数",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"maskShadowOffsetX",paraId:17,tocIndex:4},{value:"设置阴影距蒙版的水平距离",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"maskShadowOffsetY",paraId:17,tocIndex:4},{value:"设置阴影距蒙版的垂直距离",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"maskCursor",paraId:17,tocIndex:4},{value:"鼠标样式。同 css 的鼠标样式",paraId:17,tocIndex:4},{value:"string",paraId:17,tocIndex:4},{value:"default",paraId:17,tocIndex:4},{value:"在配置框选区域的蒙版样式的时候，不是以对象的形式来配置，而是以 ",paraId:18,tocIndex:4},{value:"mask",paraId:18,tocIndex:4},{value:"前缀加属性的方式来配置。",paraId:18,tocIndex:4},{value:"({\n  interaction: {\n    brushAxisHighlight: {\n      maskFill: '#000',\n      maskFillOpacity: 0.2,\n      maskStroke: 'red',\n      maskStrokeOpacity: 0.9,\n      maskLineWidth: 2,\n      maskLineDash: [4, 8],\n      maskOpacity: 0.2,\n      maskShadowColor: '#d3d3d3',\n      maskShadowBlur: 10,\n      maskShadowOffsetX: 10,\n      maskShadowOffsetY: 10,\n      maskCursor: 'pointer',\n    },\n  },\n});\n",paraId:19,tocIndex:4},{value:"八个方向的 handle 的名字分别如下（按照东南西北命名），按照 ",paraId:20,tocIndex:5},{value:"mask[handleName][styleAttribute]",paraId:20,tocIndex:5},{value:" 格式设置对应的属性，也可以通过 ",paraId:20,tocIndex:5},{value:"maskHandleSize",paraId:20,tocIndex:5},{value:" 设置宽度。",paraId:20,tocIndex:5},{value:"属性",paraId:21,tocIndex:5},{value:"描述",paraId:21,tocIndex:5},{value:"类型",paraId:21,tocIndex:5},{value:"默认值",paraId:21,tocIndex:5},{value:"必选",paraId:21,tocIndex:5},{value:"mask[handleName]Render",paraId:21,tocIndex:5},{value:"自定义蒙版手柄的渲染函数",paraId:21,tocIndex:5},{value:"(g, options, document) => DisplayObject",paraId:21,tocIndex:5},{value:"mask[handleName]Size",paraId:21,tocIndex:5},{value:"蒙版手柄的宽度",paraId:21,tocIndex:5},{value:"string",paraId:21,tocIndex:5},{value:"mask[handleName]Fill",paraId:21,tocIndex:5},{value:"蒙版手柄的填充色",paraId:21,tocIndex:5},{value:"string",paraId:21,tocIndex:5},{value:"mask[handleName]FillOpacity",paraId:21,tocIndex:5},{value:"蒙版手柄的填充透明度",paraId:21,tocIndex:5},{value:"number",paraId:21,tocIndex:5},{value:"mask[handleName]Stroke",paraId:21,tocIndex:5},{value:"蒙版手柄的描边",paraId:21,tocIndex:5},{value:"string",paraId:21,tocIndex:5},{value:"mask[handleName]StrokeOpacity",paraId:21,tocIndex:5},{value:"描边透明度",paraId:21,tocIndex:5},{value:"number",paraId:21,tocIndex:5},{value:"mask[handleName]LineWidth",paraId:21,tocIndex:5},{value:"蒙版手柄描边的宽度",paraId:21,tocIndex:5},{value:"number",paraId:21,tocIndex:5},{value:"mask[handleName]LineDash",paraId:21,tocIndex:5},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离",paraId:21,tocIndex:5},{value:"[number,number]",paraId:21,tocIndex:5},{value:"mask[handleName]Opacity",paraId:21,tocIndex:5},{value:"蒙版手柄的整体透明度",paraId:21,tocIndex:5},{value:"number",paraId:21,tocIndex:5},{value:"mask[handleName]ShadowColor",paraId:21,tocIndex:5},{value:"蒙版手柄阴影颜色",paraId:21,tocIndex:5},{value:"string",paraId:21,tocIndex:5},{value:"mask[handleName]ShadowBlur",paraId:21,tocIndex:5},{value:"蒙版手柄阴影的高斯模糊系数",paraId:21,tocIndex:5},{value:"number",paraId:21,tocIndex:5},{value:"mask[handleName]ShadowOffsetX",paraId:21,tocIndex:5},{value:"设置阴影距蒙版手柄的水平距离",paraId:21,tocIndex:5},{value:"number",paraId:21,tocIndex:5},{value:"mask[handleName]ShadowOffsetY",paraId:21,tocIndex:5},{value:"设置阴影距蒙版手柄的垂直距离",paraId:21,tocIndex:5},{value:"number",paraId:21,tocIndex:5},{value:"mask[handleName]Cursor",paraId:21,tocIndex:5},{value:"鼠标样式。同 css 的鼠标样式",paraId:21,tocIndex:5},{value:"string",paraId:21,tocIndex:5},{value:"default",paraId:21,tocIndex:5},{value:"支持以下的事件：",paraId:22,tocIndex:7},{value:"brushAxis:start",paraId:23,tocIndex:7},{value:" - 开始创建 brush 的时候触发",paraId:23,tocIndex:7},{value:"brushAxis:end",paraId:23,tocIndex:7},{value:" - brush 更新大小和位置完成时候触发",paraId:23,tocIndex:7},{value:"brushAxis:remove",paraId:23,tocIndex:7},{value:" - brush 移除的时候触发",paraId:23,tocIndex:7},{value:"brushAxis:highlight",paraId:23,tocIndex:7},{value:" - brush 改变大小和位置时触发",paraId:23,tocIndex:7},{value:"chart.on('brushAxis:highlight', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('brushAxis:highlight', data);\n});\n\nchart.on('brushAxis:remove', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('brushAxis:remove', data);\n});\n",paraId:24,tocIndex:7},{value:"支持以下的事件：",paraId:25,tocIndex:8},{value:"brushAxis:highlight",paraId:26,tocIndex:8},{value:" - 高亮数据",paraId:26,tocIndex:8},{value:"brushAxis:remove",paraId:26,tocIndex:8},{value:" - 移除 brush",paraId:26,tocIndex:8},{value:"chart.emit('brushAxis:highlight', {\n  data: { selection: [[20, 30], undefined, [100, 300]] },\n});\n\nchart.emit('brushAxis:remove', {});\n",paraId:27,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst axis = {\n  zIndex: 1,\n  titlePosition: 'right',\n  line: true,\n  style: {\n    labelStroke: '#fff',\n    labelStrokeWidth: 5,\n    labelFontSize: 10,\n    labelStrokeLineJoin: 'round',\n    titleStroke: '#fff',\n    titleFontSize: 10,\n    titleStrokeWidth: 5,\n    titleStrokeLineJoin: 'round',\n    titleTransform: 'translate(-50%, 0) rotate(-90)',\n    lineStroke: 'black',\n    tickStroke: 'black',\n    lineStrokeWidth: 1,\n  },\n};\n\nchart.options({\n  type: 'line',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/cars3.json',\n  },\n  coordinate: { type: 'parallel' },\n  encode: {\n    position: [\n      'economy (mpg)',\n      'cylinders',\n      'displacement (cc)',\n      'power (hp)',\n      'weight (lb)',\n      '0-60 mph (s)',\n      'year',\n    ],\n    color: 'weight (lb)',\n  },\n  style: {\n    lineWidth: 1.5,\n    strokeOpacity: 0.4,\n  },\n  scale: {\n    color: {\n      type: 'sequential',\n      palette: 'brBG',\n      offset: (t) => 1 - t,\n    },\n  },\n  legend: {\n    color: {\n      length: 400,\n      layout: { justifyContent: 'center' },\n    },\n  },\n  state: {\n    active: { lineWidth: 5 },\n    inactive: { stroke: '#eee', opacity: 0.5 },\n  },\n  axis: Object.fromEntries(\n    Array.from({ length: 7 }, (_, i) => [\n      `position${i === 0 ? '' : i}`,\n      {\n        ...axis,\n        title: true,\n      },\n    ]),\n  ),\n  interaction: {\n    brushAxisHighlight: {\n      maskFill: '#000',\n      maskFillOpacity: 0.2,\n      maskStroke: '#1890ff',\n      maskLineWidth: 1,\n    },\n    tooltip: false,\n  },\n});\n\nchart.render();\n",paraId:28,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  data: [\n    { x: 10, y: 5, category: 'A' },\n    { x: 15, y: 8, category: 'A' },\n    { x: 20, y: 12, category: 'A' },\n    { x: 25, y: 15, category: 'A' },\n    { x: 30, y: 10, category: 'B' },\n    { x: 35, y: 7, category: 'B' },\n    { x: 40, y: 13, category: 'B' },\n    { x: 45, y: 18, category: 'B' },\n    { x: 50, y: 20, category: 'C' },\n    { x: 55, y: 16, category: 'C' },\n    { x: 60, y: 9, category: 'C' },\n    { x: 65, y: 6, category: 'C' },\n  ],\n  encode: {\n    color: 'category',\n    x: 'x',\n    y: 'y',\n  },\n  state: {\n    inactive: { stroke: 'gray', opacity: 0.5 },\n  },\n  interaction: {\n    brushAxisHighlight: {\n      maskHandleSize: 20,\n      maskHandleNFill: 'blue',\n      maskHandleEFill: 'red',\n      maskHandleSFill: 'green',\n      maskHandleWFill: 'yellow',\n      maskHandleNWFill: 'black',\n      maskHandleNEFill: 'steelblue',\n      maskHandleSEFill: 'pink',\n      maskHandleSWFill: 'orange',\n    },\n  },\n});\n\nchart.render();\n",paraId:29,tocIndex:11}]},87822:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(24287);const t=[{value:"brushFilter",paraId:0,tocIndex:0},{value:" 交互主要用于实现图表元素的动态范围筛选功能。通过鼠标刷选操作，用户可以在图表上划定特定区域（基于 x/y 轴坐标系），G2 会重新渲染该区域内符合筛选条件的图表元素。",paraId:0,tocIndex:0},{value:"典型应用场景：",paraId:1,tocIndex:0},{value:"数据探索：快速聚焦特定数据区间进行深入分析",paraId:2,tocIndex:0},{value:"异常检测：定位分布异常的离散数据点",paraId:3,tocIndex:0},{value:"对比分析：横向/纵向对比不同区间的数据特征",paraId:4,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  },\n  encode: { x: 'height', y: 'weight', color: 'gender' },\n  state: { inactive: { stroke: 'gray' } },\n  interaction: { brushFilter: true },\n});\n\nchart.render();\n",paraId:5,tocIndex:0},{value:"配置 ",paraId:6,tocIndex:1},{value:"brushFilter",paraId:6,tocIndex:1},{value:" 交互有两种方式",paraId:6,tocIndex:1},{value:"通过布尔值开启交互，使用默认配置：",paraId:7,tocIndex:2},{value:"({\n  type: 'interval',\n  interaction: { brushFilter: true }, // 启用默认配置的刷选过滤\n});\n",paraId:8,tocIndex:2},{value:"通过",paraId:9,tocIndex:3},{value:"配置项",paraId:10,tocIndex:3},{value:" 精细化控制交互行为：",paraId:9,tocIndex:3},{value:"({\n  type: 'interval',\n  interaction: {\n    brushFilter: {\n      reverse: false, // 关闭反向选择\n      maskFill: '#rgba(0,0,0,0.3)', // 自定义蒙版颜色\n    },\n  },\n});\n",paraId:11,tocIndex:3},{value:"交互可以配置在 Mark 层级：",paraId:12,tocIndex:4},{value:"({\n  type: 'interval',\n  interaction: { brushFilter: true },\n});\n",paraId:13,tocIndex:4},{value:"也可以配置在 View 层级，视图上声明的交互会传递给 ",paraId:14,tocIndex:4},{value:"children",paraId:14,tocIndex:4},{value:" 声明的标记，如果该标记有声明对应的交互，就合并；否则不影响。",paraId:14,tocIndex:4},{value:"({\n  type: 'view',\n  interaction: { brushFilter: true },\n});\n",paraId:15,tocIndex:4},{value:"属性",paraId:16,tocIndex:5},{value:"描述",paraId:16,tocIndex:5},{value:"类型",paraId:16,tocIndex:5},{value:"默认值",paraId:16,tocIndex:5},{value:"必选",paraId:16,tocIndex:5},{value:"reverse",paraId:16,tocIndex:5},{value:"brush 是否反转",paraId:16,tocIndex:5},{value:"boolean",paraId:16,tocIndex:5},{value:"false",paraId:16,tocIndex:5},{value:"mask",paraId:16,tocIndex:5},{value:"框选区域的蒙版样式",paraId:16,tocIndex:5},{value:"mask",paraId:17,tocIndex:5},{value:"详见 ",paraId:16,tocIndex:5},{value:"mask",paraId:18,tocIndex:5},{value:"配置框选区域的蒙版的样式。",paraId:19,tocIndex:6},{value:"属性",paraId:20,tocIndex:6},{value:"描述",paraId:20,tocIndex:6},{value:"类型",paraId:20,tocIndex:6},{value:"默认值",paraId:20,tocIndex:6},{value:"必选",paraId:20,tocIndex:6},{value:"maskFill",paraId:20,tocIndex:6},{value:"蒙版的填充色",paraId:20,tocIndex:6},{value:"string",paraId:20,tocIndex:6},{value:"#777",paraId:20,tocIndex:6},{value:"maskFillOpacity",paraId:20,tocIndex:6},{value:"蒙版的填充透明度",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"0.3",paraId:20,tocIndex:6},{value:"maskStroke",paraId:20,tocIndex:6},{value:"蒙版的描边",paraId:20,tocIndex:6},{value:"string",paraId:20,tocIndex:6},{value:"#fff",paraId:20,tocIndex:6},{value:"maskStrokeOpacity",paraId:20,tocIndex:6},{value:"描边透明度",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskLineWidth",paraId:20,tocIndex:6},{value:"蒙版描边的宽度",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskLineDash",paraId:20,tocIndex:6},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:20,tocIndex:6},{value:"[number,number]",paraId:20,tocIndex:6},{value:"maskOpacity",paraId:20,tocIndex:6},{value:"蒙版的整体透明度",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskShadowColor",paraId:20,tocIndex:6},{value:"蒙版阴影颜色",paraId:20,tocIndex:6},{value:"string",paraId:20,tocIndex:6},{value:"maskShadowBlur",paraId:20,tocIndex:6},{value:"蒙版阴影的高斯模糊系数",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskShadowOffsetX",paraId:20,tocIndex:6},{value:"设置阴影距蒙版的水平距离",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskShadowOffsetY",paraId:20,tocIndex:6},{value:"设置阴影距蒙版的垂直距离",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskCursor",paraId:20,tocIndex:6},{value:"鼠标样式。同 css 的鼠标样式",paraId:20,tocIndex:6},{value:"string",paraId:20,tocIndex:6},{value:"default",paraId:20,tocIndex:6},{value:"在配置框选区域的蒙版样式的时候，不是以对象的形式来配置，而是以 ",paraId:21,tocIndex:6},{value:"mask",paraId:21,tocIndex:6},{value:"前缀加属性的方式来配置。",paraId:21,tocIndex:6},{value:"样式配置示例：",paraId:22,tocIndex:6},{value:"({\n  interaction: {\n    brushFilter: {\n      maskFill: '#000',\n      maskFillOpacity: 0.2,\n      maskStroke: 'red',\n      maskStrokeOpacity: 0.9,\n      maskLineWidth: 2,\n      maskLineDash: [4, 8],\n      maskOpacity: 0.2,\n      maskShadowColor: '#d3d3d3',\n      maskShadowBlur: 10,\n      maskShadowOffsetX: 10,\n      maskShadowOffsetY: 10,\n      maskCursor: 'pointer',\n    },\n  },\n});\n",paraId:23,tocIndex:6},{value:"监听刷选过滤动作：",paraId:24,tocIndex:8},{value:"chart.on('brush:filter', (event) => {\n  const {\n    data, // 筛选后的数据集合\n    nativeEvent, // 原始 DOM 事件\n  } = event;\n  console.log('当前选中范围:', data.selection);\n});\n",paraId:25,tocIndex:8},{value:"通过编程方式触发筛选：",paraId:26,tocIndex:9},{value:"// 设置 x 轴范围 [50,100]，y 轴范围 [20,80]\nchart.emit('brush:filter', {\n  data: {\n    selection: [\n      [50, 100],\n      [20, 80],\n    ],\n  },\n});\n",paraId:27,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { letter: 'A', frequency: 0.08167 },\n  { letter: 'B', frequency: 0.01492 },\n  { letter: 'C', frequency: 0.02782 },\n  { letter: 'D', frequency: 0.04253 },\n  { letter: 'E', frequency: 0.12702 },\n  { letter: 'F', frequency: 0.02288 },\n  { letter: 'G', frequency: 0.02015 },\n  { letter: 'H', frequency: 0.06094 },\n  { letter: 'I', frequency: 0.06966 },\n  { letter: 'J', frequency: 0.00153 },\n  { letter: 'K', frequency: 0.00772 },\n  { letter: 'L', frequency: 0.04025 },\n  { letter: 'M', frequency: 0.02406 },\n  { letter: 'N', frequency: 0.06749 },\n  { letter: 'O', frequency: 0.07507 },\n  { letter: 'P', frequency: 0.01929 },\n  { letter: 'Q', frequency: 0.00095 },\n  { letter: 'R', frequency: 0.05987 },\n  { letter: 'S', frequency: 0.06327 },\n  { letter: 'T', frequency: 0.09056 },\n  { letter: 'U', frequency: 0.02758 },\n  { letter: 'V', frequency: 0.00978 },\n  { letter: 'W', frequency: 0.0236 },\n  { letter: 'X', frequency: 0.0015 },\n  { letter: 'Y', frequency: 0.01974 },\n  { letter: 'Z', frequency: 0.00074 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  autoFit: true,\n  interaction: {\n    brushFilter: {\n      maskFill: '#000',\n      maskFillOpacity: 0.2,\n      maskStroke: 'red',\n      maskStrokeOpacity: 0.9,\n      maskLineWidth: 2,\n      maskLineDash: [4, 8],\n      maskOpacity: 0.2,\n      maskShadowColor: '#d3d3d3',\n      maskShadowBlur: 10,\n      maskShadowOffsetX: 10,\n      maskShadowOffsetY: 10,\n      maskCursor: 'pointer',\n    },\n  },\n});\n\nchart.interval().data(data).encode('x', 'letter').encode('y', 'frequency');\n\nchart.render();\n",paraId:28,tocIndex:10}]},18638:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(60611);const t=[{value:"brushHighlight",paraId:0,tocIndex:0},{value:" 交互的对象是图表元素 element ，将框选的区域的图表元素高亮显示，支持对框选区域的拖动和 resize。",paraId:0,tocIndex:0},{value:"触发：框选元素。",paraId:1,tocIndex:0},{value:"结束：单击图表区域。",paraId:2,tocIndex:0},{value:"影响状态：",paraId:3,tocIndex:0},{value:"框选范围的元素变为 ",paraId:4,tocIndex:0},{value:"active",paraId:4,tocIndex:0},{value:" 状态。",paraId:4,tocIndex:0},{value:"框选范围以外的元素变为 ",paraId:5,tocIndex:0},{value:"inactive",paraId:5,tocIndex:0},{value:" 状态。",paraId:5,tocIndex:0},{value:"交互内置状态：",paraId:6,tocIndex:0},{value:"({\n  // 定义 inactive 状态下的元素透明度为0.5\n  state: { inactive: { opacity: 0.5 } },\n});\n",paraId:7,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  },\n  encode: { x: 'height', y: 'weight', color: 'gender' },\n  state: { inactive: { stroke: 'gray' } },\n  interaction: { brushHighlight: true },\n});\n\nchart.render();\n",paraId:8,tocIndex:0},{value:"配置 ",paraId:9,tocIndex:1},{value:"brushHighlight",paraId:9,tocIndex:1},{value:" 交互有两种方式",paraId:9,tocIndex:1},{value:"第一种，传入 ",paraId:10,tocIndex:1},{value:"boolean",paraId:10,tocIndex:1},{value:" 设置是否开启交互。",paraId:10,tocIndex:1},{value:"({\n  type: 'interval',\n  interaction: { brushHighlight: true }, // 采用默认配置\n});\n",paraId:11,tocIndex:1},{value:"第二种，传入 ",paraId:12,tocIndex:1},{value:"配置项",paraId:13,tocIndex:1},{value:" 对交互进行配置。",paraId:12,tocIndex:1},{value:"({\n  type: 'line',\n  interaction: {\n    brushHighlight: {\n      series: true,\n    },\n  },\n});\n",paraId:14,tocIndex:1},{value:"交互可以配置在 Mark 层级：",paraId:15,tocIndex:2},{value:"({\n  type: 'interval',\n  interaction: { brushHighlight: true },\n});\n",paraId:16,tocIndex:2},{value:"也可以配置在 View 层级，视图上声明的交互会传递给 ",paraId:17,tocIndex:2},{value:"children",paraId:17,tocIndex:2},{value:" 声明的标记，如果该标记有声明对应的交互，就合并；否则不影响。",paraId:17,tocIndex:2},{value:"({\n  type: 'view',\n  interaction: { brushHighlight: true },\n});\n",paraId:18,tocIndex:2},{value:"属性",paraId:19,tocIndex:3},{value:"描述",paraId:19,tocIndex:3},{value:"类型",paraId:19,tocIndex:3},{value:"默认值",paraId:19,tocIndex:3},{value:"必选",paraId:19,tocIndex:3},{value:"reverse",paraId:19,tocIndex:3},{value:"brush 是否反转",paraId:19,tocIndex:3},{value:"boolean",paraId:19,tocIndex:3},{value:"false",paraId:19,tocIndex:3},{value:"series",paraId:19,tocIndex:3},{value:"brush 作用的是否是系列元素，控制高亮选择元素的模式",paraId:19,tocIndex:3},{value:"boolean",paraId:19,tocIndex:3},{value:"false",paraId:19,tocIndex:3},{value:"facet",paraId:19,tocIndex:3},{value:"brush 是否跨分面，控制交互方式",paraId:19,tocIndex:3},{value:"boolean",paraId:19,tocIndex:3},{value:"false",paraId:19,tocIndex:3},{value:"selectedHandles",paraId:19,tocIndex:3},{value:"可以 resize 的手柄方向",paraId:19,tocIndex:3},{value:"string[]",paraId:19,tocIndex:3},{value:"['handle-n','handle-e','handle-s','handle-w','handle-nw','handle-ne','handle-se','handle-sw']",paraId:19,tocIndex:3},{value:"brushRegion",paraId:19,tocIndex:3},{value:"自定义框选区域，一般不用配置，G2 内部用来配置 brushXHighlight 和 brushYHighlight",paraId:19,tocIndex:3},{value:"(x, y, x1, y1, extent) => any",paraId:19,tocIndex:3},{value:"(x, y, x1, y1) => [x, y, x1, y1]",paraId:19,tocIndex:3},{value:"mask",paraId:19,tocIndex:3},{value:"框选区域的蒙版样式",paraId:19,tocIndex:3},{value:"mask",paraId:20,tocIndex:3},{value:"详见 ",paraId:19,tocIndex:3},{value:"mask",paraId:21,tocIndex:3},{value:"maskHandle",paraId:19,tocIndex:3},{value:"框选区域的手柄样式",paraId:19,tocIndex:3},{value:"maskHandle",paraId:22,tocIndex:3},{value:"详见 ",paraId:19,tocIndex:3},{value:"maskHandle",paraId:23,tocIndex:3},{value:"series",paraId:24,tocIndex:4},{value:" 参数是一个控制刷选高亮模式的关键开关，它决定了如何对图形元素进行视觉反馈。当配置 ",paraId:24,tocIndex:4},{value:"series: false",paraId:24,tocIndex:4},{value:"时，更适合散点图、柱状图等离散元素，此时直接修改元素状态（如果是折线图这种连续图形，会改变整条线的状态）；当配置",paraId:24,tocIndex:4},{value:"series: true",paraId:24,tocIndex:4},{value:"时，折线图、面积图等连续图形会局部路径高亮，请根据需要开启或关闭。",paraId:24,tocIndex:4},{value:"series: false",paraId:25,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nconst config = {\n  type: 'line',\n  interaction: { brushHighlight: { series: false } },\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: { x: { range: [0, 1] }, y: { domainMin: 0, nice: true } },\n  state: { active: { stroke: 'red' } },\n  labels: [{ text: 'value', style: { dx: -10, dy: -12 } }],\n};\nchart.options(config);\n\nchart.render();\n",paraId:26,tocIndex:4},{value:"series: true",paraId:27,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nconst config = {\n  type: 'line',\n  interaction: { brushHighlight: { series: true } },\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: { x: { range: [0, 1] }, y: { domainMin: 0, nice: true } },\n  state: { active: { stroke: 'red' } },\n  labels: [{ text: 'value', style: { dx: -10, dy: -12 } }],\n};\nchart.options(config);\n\nchart.render();\n",paraId:28,tocIndex:4},{value:"配置框选区域的蒙版的样式。",paraId:29,tocIndex:5},{value:"属性",paraId:30,tocIndex:5},{value:"描述",paraId:30,tocIndex:5},{value:"类型",paraId:30,tocIndex:5},{value:"默认值",paraId:30,tocIndex:5},{value:"必选",paraId:30,tocIndex:5},{value:"maskFill",paraId:30,tocIndex:5},{value:"蒙版的填充色",paraId:30,tocIndex:5},{value:"string",paraId:30,tocIndex:5},{value:"#777",paraId:30,tocIndex:5},{value:"maskFillOpacity",paraId:30,tocIndex:5},{value:"蒙版的填充透明度",paraId:30,tocIndex:5},{value:"number",paraId:30,tocIndex:5},{value:"0.3",paraId:30,tocIndex:5},{value:"maskStroke",paraId:30,tocIndex:5},{value:"蒙版的描边",paraId:30,tocIndex:5},{value:"string",paraId:30,tocIndex:5},{value:"#fff",paraId:30,tocIndex:5},{value:"maskStrokeOpacity",paraId:30,tocIndex:5},{value:"描边透明度",paraId:30,tocIndex:5},{value:"number",paraId:30,tocIndex:5},{value:"maskLineWidth",paraId:30,tocIndex:5},{value:"蒙版描边的宽度",paraId:30,tocIndex:5},{value:"number",paraId:30,tocIndex:5},{value:"maskLineDash",paraId:30,tocIndex:5},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:30,tocIndex:5},{value:"[number,number]",paraId:30,tocIndex:5},{value:"maskOpacity",paraId:30,tocIndex:5},{value:"蒙版的整体透明度",paraId:30,tocIndex:5},{value:"number",paraId:30,tocIndex:5},{value:"maskShadowColor",paraId:30,tocIndex:5},{value:"蒙版阴影颜色",paraId:30,tocIndex:5},{value:"string",paraId:30,tocIndex:5},{value:"maskShadowBlur",paraId:30,tocIndex:5},{value:"蒙版阴影的高斯模糊系数",paraId:30,tocIndex:5},{value:"number",paraId:30,tocIndex:5},{value:"maskShadowOffsetX",paraId:30,tocIndex:5},{value:"设置阴影距蒙版的水平距离",paraId:30,tocIndex:5},{value:"number",paraId:30,tocIndex:5},{value:"maskShadowOffsetY",paraId:30,tocIndex:5},{value:"设置阴影距蒙版的垂直距离",paraId:30,tocIndex:5},{value:"number",paraId:30,tocIndex:5},{value:"maskCursor",paraId:30,tocIndex:5},{value:"鼠标样式。同 css 的鼠标样式",paraId:30,tocIndex:5},{value:"string",paraId:30,tocIndex:5},{value:"default",paraId:30,tocIndex:5},{value:"在配置框选区域的蒙版样式的时候，不是以对象的形式来配置，而是以 ",paraId:31,tocIndex:5},{value:"mask",paraId:31,tocIndex:5},{value:"前缀加属性的方式来配置。",paraId:31,tocIndex:5},{value:"({\n  interaction: {\n    brushHighlight: {\n      maskFill: '#000',\n      maskFillOpacity: 0.2,\n      maskStroke: 'red',\n      maskStrokeOpacity: 0.9,\n      maskLineWidth: 2,\n      maskLineDash: [4, 8],\n      maskOpacity: 0.2,\n      maskShadowColor: '#d3d3d3',\n      maskShadowBlur: 10,\n      maskShadowOffsetX: 10,\n      maskShadowOffsetY: 10,\n      maskCursor: 'pointer',\n    },\n  },\n});\n",paraId:32,tocIndex:5},{value:"八个方向的 handle 的名字分别如下（按照东南西北命名），按照 ",paraId:33,tocIndex:6},{value:"mask[handleName][styleAttribute]",paraId:33,tocIndex:6},{value:" 格式设置对应的属性，也可以通过 ",paraId:33,tocIndex:6},{value:"maskHandleSize",paraId:33,tocIndex:6},{value:" 设置宽度。",paraId:33,tocIndex:6},{value:"属性",paraId:34,tocIndex:6},{value:"描述",paraId:34,tocIndex:6},{value:"类型",paraId:34,tocIndex:6},{value:"默认值",paraId:34,tocIndex:6},{value:"必选",paraId:34,tocIndex:6},{value:"mask[handleName]Render",paraId:34,tocIndex:6},{value:"自定义蒙版手柄的渲染函数",paraId:34,tocIndex:6},{value:"(g, options, document) => DisplayObject",paraId:34,tocIndex:6},{value:"mask[handleName]Size",paraId:34,tocIndex:6},{value:"蒙版手柄的宽度",paraId:34,tocIndex:6},{value:"string",paraId:34,tocIndex:6},{value:"mask[handleName]Fill",paraId:34,tocIndex:6},{value:"蒙版手柄的填充色",paraId:34,tocIndex:6},{value:"string",paraId:34,tocIndex:6},{value:"mask[handleName]FillOpacity",paraId:34,tocIndex:6},{value:"蒙版手柄的填充透明度",paraId:34,tocIndex:6},{value:"number",paraId:34,tocIndex:6},{value:"mask[handleName]Stroke",paraId:34,tocIndex:6},{value:"蒙版手柄的描边",paraId:34,tocIndex:6},{value:"string",paraId:34,tocIndex:6},{value:"mask[handleName]StrokeOpacity",paraId:34,tocIndex:6},{value:"描边透明度",paraId:34,tocIndex:6},{value:"number",paraId:34,tocIndex:6},{value:"mask[handleName]LineWidth",paraId:34,tocIndex:6},{value:"蒙版手柄描边的宽度",paraId:34,tocIndex:6},{value:"number",paraId:34,tocIndex:6},{value:"mask[handleName]LineDash",paraId:34,tocIndex:6},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:34,tocIndex:6},{value:"[number,number]",paraId:34,tocIndex:6},{value:"mask[handleName]Opacity",paraId:34,tocIndex:6},{value:"蒙版手柄的整体透明度",paraId:34,tocIndex:6},{value:"number",paraId:34,tocIndex:6},{value:"mask[handleName]ShadowColor",paraId:34,tocIndex:6},{value:"蒙版手柄阴影颜色",paraId:34,tocIndex:6},{value:"string",paraId:34,tocIndex:6},{value:"mask[handleName]ShadowBlur",paraId:34,tocIndex:6},{value:"蒙版手柄阴影的高斯模糊系数",paraId:34,tocIndex:6},{value:"number",paraId:34,tocIndex:6},{value:"mask[handleName]ShadowOffsetX",paraId:34,tocIndex:6},{value:"设置阴影距蒙版手柄的水平距离",paraId:34,tocIndex:6},{value:"number",paraId:34,tocIndex:6},{value:"mask[handleName]ShadowOffsetY",paraId:34,tocIndex:6},{value:"设置阴影距蒙版手柄的垂直距离",paraId:34,tocIndex:6},{value:"number",paraId:34,tocIndex:6},{value:"mask[handleName]Cursor",paraId:34,tocIndex:6},{value:"鼠标样式。同 css 的鼠标样式",paraId:34,tocIndex:6},{value:"string",paraId:34,tocIndex:6},{value:"default",paraId:34,tocIndex:6},{value:"chart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'data/penguins.csv',\n  },\n  encode: {\n    color: 'species',\n    x: 'culmen_length_mm',\n    y: 'culmen_depth_mm',\n  },\n  state: {\n    inactive: { stroke: 'gray', opacity: 0.5 },\n  },\n  interaction: {\n    brushHighlight: {\n      maskHandleNFill: 'blue',\n      maskHandleEFill: 'red',\n      maskHandleSFill: 'green',\n      maskHandleWFill: 'yellow',\n      maskHandleNWFill: 'black',\n      maskHandleNEFill: 'steelblue',\n      maskHandleSEFill: 'pink',\n      maskHandleSWFill: 'orange',\n    },\n  },\n});\n",paraId:35,tocIndex:6},{value:"支持以下的事件：",paraId:36,tocIndex:8},{value:"brush:start",paraId:37,tocIndex:8},{value:" - 开始创建 brush 的时候触发",paraId:37,tocIndex:8},{value:"brush:end",paraId:37,tocIndex:8},{value:" - brush 更新大小和位置完成时候触发",paraId:37,tocIndex:8},{value:"brush:remove",paraId:37,tocIndex:8},{value:" - brush 移除的时候触发",paraId:37,tocIndex:8},{value:"brush:highlight",paraId:37,tocIndex:8},{value:" - brush 改变大小和位置时触发",paraId:37,tocIndex:8},{value:"chart.on('brush:highlight', (e) => {\n  console.log(e.data.selection);\n  console.log(e.nativeEvent);\n});\n",paraId:38,tocIndex:8},{value:"支持以下的事件：",paraId:39,tocIndex:9},{value:"brush:highlight",paraId:40,tocIndex:9},{value:" - 高亮数据",paraId:40,tocIndex:9},{value:"brush:remove",paraId:40,tocIndex:9},{value:" - 移除 brush",paraId:40,tocIndex:9},{value:"chart.emit('brush:remove');\nchart.emit('brush:highlight', { data: { selection } });\n",paraId:41,tocIndex:9},{value:"可以通过 ",paraId:42,tocIndex:11},{value:"mask[handleName]Render",paraId:42,tocIndex:11},{value:" 指定 handle 的渲染函数，用于渲染自定义的 handle。其中该函数签名如下。",paraId:42,tocIndex:11},{value:"function render(\n  g, // 挂载容器\n  options, // 样式属性，通过 mask[handleName][styleAttribute] 设置\n  document, // 画布 document，用于创建自图形\n) {\n  // 需要返回创建的图形\n}\n",paraId:43,tocIndex:11},{value:"下面是一个创建 path handle 的例子：",paraId:44,tocIndex:11},{value:"function renderPath(group, options, document) {\n  // 创建逻辑\n  // 如果是第一次渲染，就创建并且挂在图形\n  if (!group.handle) {\n    // 通过 document.createElement 去新建图形\n    const path = document.createElement('path');\n    group.handle = path;\n    group.appendChild(group.handle);\n  }\n\n  // 更新逻辑\n  const { handle } = group;\n  const { width, height, ...rest } = options;\n  if (width === undefined || height === undefined) return handle;\n  handle.attr(rest);\n\n  // 返回对应的 value\n  return handle;\n}\n",paraId:45,tocIndex:11},{value:"function createPathRender(path) {\n  return (group, options, document) => {\n    if (!group.handle) {\n      const path = document.createElement('path');\n      group.handle = path;\n      group.appendChild(group.handle);\n    }\n    const { handle } = group;\n    const { x, y, width, height, ...rest } = options;\n    if (width === undefined || height === undefined) return handle;\n    handle.style.d = path(x, y, width, height);\n    handle.attr(rest);\n    return handle;\n  };\n}\n\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'data/penguins.csv',\n  },\n  encode: {\n    color: 'species',\n    x: 'culmen_length_mm',\n    y: 'culmen_depth_mm',\n  },\n  state: {\n    inactive: { stroke: 'gray', opacity: 0.5 },\n  },\n  interaction: {\n    brushHighlight: {\n      maskHandleSize: 30,\n      maskHandleNRender: createPathRender((x, y, width, height) => {\n        return `M${x},${y + height / 2}L${x + width / 2},${y - height / 2}L${\n          x + width\n        },${y + height / 2},Z`;\n      }),\n      maskHandleERender: createPathRender(\n        (x, y, width, height) =>\n          `M${x + width / 2},${y}L${x + (width * 3) / 2},${y + height / 2}L${\n            x + width / 2\n          },${y + height},Z`,\n      ),\n      maskHandleSRender: createPathRender(\n        (x, y, width, height) =>\n          `M${x},${y + height / 2}L${x + width / 2},${y + (height / 2) * 3}L${\n            x + width\n          },${y + height / 2},Z`,\n      ),\n      maskHandleWRender: createPathRender(\n        (x, y, width, height) =>\n          `M${x + width / 2},${y}L${x - width},${y + height / 2}L${\n            x + width / 2\n          },${y + height},Z`,\n      ),\n      maskHandleNWRender: createPathRender(\n        (x, y, width, height) =>\n          `M${x},${y}L${x + width},${y + height / 2}L${x + width / 2},${\n            y + height\n          },Z`,\n      ),\n      maskHandleNERender: createPathRender(\n        (x, y, width, height) =>\n          `M${x},${y + height / 2}L${x + width},${y}L${x + width / 2},${\n            y + height\n          },Z`,\n      ),\n      maskHandleSERender: createPathRender(\n        (x, y, width, height) =>\n          `M${x + width / 2},${y}L${x + width},${y + height}L${x},${\n            y + height / 2\n          },Z`,\n      ),\n      maskHandleSWRender: createPathRender(\n        (x, y, width, height) =>\n          `M${x + width / 2},${y}L${x + width},${y + height / 2}L${x},${\n            y + height\n          },Z`,\n      ),\n      maskHandleNFill: 'blue',\n      maskHandleEFill: 'red',\n      maskHandleSFill: 'green',\n      maskHandleWFill: 'yellow',\n      maskHandleNWFill: 'black',\n      maskHandleNEFill: 'steelblue',\n      maskHandleSEFill: 'pink',\n      maskHandleSWFill: 'orange',\n    },\n  },\n});\n",paraId:46,tocIndex:11},{value:"有些交互会改变元素状态，我们可以通过配置元素状态的表现来改变交互的效果。",paraId:47,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'view',\n  autoFit: true,\n  interaction: { brushHighlight: { series: true } },\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: { x: { range: [0, 1] }, y: { domainMin: 0, nice: true } },\n  children: [\n    {\n      type: 'line',\n      labels: [{ text: 'value', style: { dx: -10, dy: -12 } }],\n      state: {\n        active: {\n          lineWidth: 4,\n          lineDash: [0, 0],\n        },\n        inactive: {\n          lineDash: [2, 4],\n        },\n      },\n    },\n    {\n      type: 'point',\n      style: { fill: 'white' },\n      tooltip: false,\n      state: {\n        active: {\n          fill: 'yellow',\n        },\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:48,tocIndex:12}]},79010:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(69360);const t=[{value:"brushXFilter",paraId:0,tocIndex:0},{value:" 交互是 brushFilter 的横向限定版本，专门用于基于 X 轴维度的数据筛选。该交互限制用户只能通过水平方向的框选操作（沿 X 轴方向），对图表元素进行范围过滤，特别适用于时间序列分析、横向对比等场景。",paraId:0,tocIndex:0},{value:"核心特征：",paraId:1,tocIndex:0},{value:"单向操作：仅允许水平方向框选，Y 轴范围自动全选",paraId:2,tocIndex:0},{value:"维度聚焦：精准控制 X 轴数据范围（如时间范围、数值区间）",paraId:3,tocIndex:0},{value:"响应式更新：动态过滤后自动触发视图更新",paraId:4,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/antvdemo/assets/data/blockchain.json',\n  },\n  encode: {\n    x: (d) => new Date(d.date), // X 轴绑定时间数据\n    y: 'total',\n  },\n  interaction: {\n    brushXFilter: true, // 启用横向筛选\n  },\n});\n\nchart.render();\n",paraId:5,tocIndex:0},{value:"配置 ",paraId:6,tocIndex:1},{value:"brushXFilter",paraId:6,tocIndex:1},{value:" 交互有两种方式",paraId:6,tocIndex:1},{value:"通过布尔值开启交互，使用默认配置：",paraId:7,tocIndex:2},{value:"({\n  type: 'interval',\n  interaction: { brushXFilter: true }, // 启用默认配置的X轴刷选过滤\n});\n",paraId:8,tocIndex:2},{value:"通过",paraId:9,tocIndex:3},{value:"配置项",paraId:10,tocIndex:3},{value:" 精细化控制交互行为：",paraId:9,tocIndex:3},{value:"({\n  type: 'interval',\n  interaction: {\n    brushXFilter: {\n      reverse: false, // 关闭反向选择\n      maskFill: '#rgba(0,0,0,0.3)', // 自定义蒙版颜色\n    },\n  },\n});\n",paraId:11,tocIndex:3},{value:"交互可以配置在 Mark 层级：",paraId:12,tocIndex:4},{value:"({\n  type: 'interval',\n  interaction: { brushXFilter: true },\n});\n",paraId:13,tocIndex:4},{value:"也可以配置在 View 层级，视图上声明的交互会传递给 ",paraId:14,tocIndex:4},{value:"children",paraId:14,tocIndex:4},{value:" 声明的标记，如果该标记有声明对应的交互，就合并；否则不影响。",paraId:14,tocIndex:4},{value:"({\n  type: 'view',\n  interaction: { brushXFilter: true },\n});\n",paraId:15,tocIndex:4},{value:"属性",paraId:16,tocIndex:5},{value:"描述",paraId:16,tocIndex:5},{value:"类型",paraId:16,tocIndex:5},{value:"默认值",paraId:16,tocIndex:5},{value:"必选",paraId:16,tocIndex:5},{value:"reverse",paraId:16,tocIndex:5},{value:"brush 是否反转",paraId:16,tocIndex:5},{value:"boolean",paraId:16,tocIndex:5},{value:"false",paraId:16,tocIndex:5},{value:"mask",paraId:16,tocIndex:5},{value:"框选区域的蒙版样式",paraId:16,tocIndex:5},{value:"mask",paraId:17,tocIndex:5},{value:"详见 ",paraId:16,tocIndex:5},{value:"mask",paraId:18,tocIndex:5},{value:"配置框选区域的蒙版的样式。",paraId:19,tocIndex:6},{value:"属性",paraId:20,tocIndex:6},{value:"描述",paraId:20,tocIndex:6},{value:"类型",paraId:20,tocIndex:6},{value:"默认值",paraId:20,tocIndex:6},{value:"必选",paraId:20,tocIndex:6},{value:"maskFill",paraId:20,tocIndex:6},{value:"蒙版的填充色",paraId:20,tocIndex:6},{value:"string",paraId:20,tocIndex:6},{value:"#777",paraId:20,tocIndex:6},{value:"maskFillOpacity",paraId:20,tocIndex:6},{value:"蒙版的填充透明度",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"0.3",paraId:20,tocIndex:6},{value:"maskStroke",paraId:20,tocIndex:6},{value:"蒙版的描边",paraId:20,tocIndex:6},{value:"string",paraId:20,tocIndex:6},{value:"#fff",paraId:20,tocIndex:6},{value:"maskStrokeOpacity",paraId:20,tocIndex:6},{value:"描边透明度",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskLineWidth",paraId:20,tocIndex:6},{value:"蒙版描边的宽度",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskLineDash",paraId:20,tocIndex:6},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:20,tocIndex:6},{value:"[number,number]",paraId:20,tocIndex:6},{value:"maskOpacity",paraId:20,tocIndex:6},{value:"蒙版的整体透明度",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskShadowColor",paraId:20,tocIndex:6},{value:"蒙版阴影颜色",paraId:20,tocIndex:6},{value:"string",paraId:20,tocIndex:6},{value:"maskShadowBlur",paraId:20,tocIndex:6},{value:"蒙版阴影的高斯模糊系数",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskShadowOffsetX",paraId:20,tocIndex:6},{value:"设置阴影距蒙版的水平距离",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskShadowOffsetY",paraId:20,tocIndex:6},{value:"设置阴影距蒙版的垂直距离",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskCursor",paraId:20,tocIndex:6},{value:"鼠标样式。同 css 的鼠标样式",paraId:20,tocIndex:6},{value:"string",paraId:20,tocIndex:6},{value:"default",paraId:20,tocIndex:6},{value:"在配置框选区域的蒙版样式的时候，不是以对象的形式来配置，而是以 ",paraId:21,tocIndex:6},{value:"mask",paraId:21,tocIndex:6},{value:"前缀加属性的方式来配置。",paraId:21,tocIndex:6},{value:"样式配置示例：",paraId:22,tocIndex:6},{value:"({\n  interaction: {\n    brushXFilter: {\n      maskFill: '#000',\n      maskFillOpacity: 0.2,\n      maskStroke: 'red',\n      maskStrokeOpacity: 0.9,\n      maskLineWidth: 2,\n      maskLineDash: [4, 8],\n      maskOpacity: 0.2,\n      maskShadowColor: '#d3d3d3',\n      maskShadowBlur: 10,\n      maskShadowOffsetX: 10,\n      maskShadowOffsetY: 10,\n      maskCursor: 'pointer',\n    },\n  },\n});\n",paraId:23,tocIndex:6},{value:"监听刷选过滤动作：",paraId:24,tocIndex:8},{value:"chart.on('brush:filter', (event) => {\n  const {\n    data, // 筛选后的数据集合\n    nativeEvent, // 原始 DOM 事件\n  } = event;\n  const [xStart, xEnd] = data.selection[0];\n  console.log(`筛选范围：${xStart} ~ ${xEnd}`);\n});\n",paraId:25,tocIndex:8},{value:"通过编程方式触发筛选：",paraId:26,tocIndex:9},{value:"// 设置 X 轴筛选范围（时间戳示例）\nchart.emit('brush:filter', {\n  data: {\n    selection: [\n      [new Date('2023-01-01').getTime(), new Date('2023-06-30').getTime()],\n    ],\n  },\n});\n",paraId:27,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { letter: 'A', frequency: 0.08167 },\n  { letter: 'B', frequency: 0.01492 },\n  { letter: 'C', frequency: 0.02782 },\n  { letter: 'D', frequency: 0.04253 },\n  { letter: 'E', frequency: 0.12702 },\n  { letter: 'F', frequency: 0.02288 },\n  { letter: 'G', frequency: 0.02015 },\n  { letter: 'H', frequency: 0.06094 },\n  { letter: 'I', frequency: 0.06966 },\n  { letter: 'J', frequency: 0.00153 },\n  { letter: 'K', frequency: 0.00772 },\n  { letter: 'L', frequency: 0.04025 },\n  { letter: 'M', frequency: 0.02406 },\n  { letter: 'N', frequency: 0.06749 },\n  { letter: 'O', frequency: 0.07507 },\n  { letter: 'P', frequency: 0.01929 },\n  { letter: 'Q', frequency: 0.00095 },\n  { letter: 'R', frequency: 0.05987 },\n  { letter: 'S', frequency: 0.06327 },\n  { letter: 'T', frequency: 0.09056 },\n  { letter: 'U', frequency: 0.02758 },\n  { letter: 'V', frequency: 0.00978 },\n  { letter: 'W', frequency: 0.0236 },\n  { letter: 'X', frequency: 0.0015 },\n  { letter: 'Y', frequency: 0.01974 },\n  { letter: 'Z', frequency: 0.00074 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  autoFit: true,\n  interaction: {\n    brushXFilter: {\n      maskFill: '#000',\n      maskFillOpacity: 0.2,\n      maskStroke: 'red',\n      maskStrokeOpacity: 0.9,\n      maskLineWidth: 2,\n      maskLineDash: [4, 8],\n      maskOpacity: 0.2,\n      maskShadowColor: '#d3d3d3',\n      maskShadowBlur: 10,\n      maskShadowOffsetX: 10,\n      maskShadowOffsetY: 10,\n      maskCursor: 'pointer',\n    },\n  },\n});\n\nchart.interval().data(data).encode('x', 'letter').encode('y', 'frequency');\n\nchart.render();\n",paraId:28,tocIndex:10}]},1882:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(61);const t=[{value:"brushXHighlight",paraId:0,tocIndex:0},{value:" 是一种特殊的",paraId:0,tocIndex:0},{value:"brushHighlight",paraId:0,tocIndex:0},{value:" 交互。在保留基础高亮功能的同时，将 y 轴框选范围固定为全域（从最小值到最大值），专注于 x 轴方向的数据选区操作。适用于需要横向数据对比的场景（如时间序列分析），通过消除垂直方向干扰提升操作精度。",paraId:0,tocIndex:0},{value:"触发：框选元素。",paraId:1,tocIndex:0},{value:"结束：单击图表区域。",paraId:2,tocIndex:0},{value:"影响状态：",paraId:3,tocIndex:0},{value:"框选范围的元素变为 ",paraId:4,tocIndex:0},{value:"active",paraId:4,tocIndex:0},{value:" 状态。",paraId:4,tocIndex:0},{value:"框选范围以外的元素变为 ",paraId:5,tocIndex:0},{value:"inactive",paraId:5,tocIndex:0},{value:" 状态。",paraId:5,tocIndex:0},{value:"交互内置状态：",paraId:6,tocIndex:0},{value:"({\n  inactive: { opacity: 0.5 },\n});\n",paraId:7,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  },\n  encode: { x: 'height', y: 'weight', color: 'gender' },\n  state: { inactive: { stroke: 'gray' } },\n  interaction: { brushXHighlight: true },\n});\n\nchart.render();\n",paraId:8,tocIndex:0},{value:"配置 ",paraId:9,tocIndex:1},{value:"brushXHighlight",paraId:9,tocIndex:1},{value:" 交互有两种方式",paraId:9,tocIndex:1},{value:"第一种，传入 ",paraId:10,tocIndex:1},{value:"boolean",paraId:10,tocIndex:1},{value:" 设置是否开启交互。",paraId:10,tocIndex:1},{value:"({\n  type: 'interval',\n  interaction: { brushXHighlight: true },\n});\n",paraId:11,tocIndex:1},{value:"第二种，传入 ",paraId:12,tocIndex:1},{value:"配置项",paraId:13,tocIndex:1},{value:" 对交互进行配置。",paraId:12,tocIndex:1},{value:"({\n  type: 'line',\n  interaction: {\n    brushXHighlight: {\n      series: true,\n    },\n  },\n});\n",paraId:14,tocIndex:1},{value:"交互可以配置在 Mark 层级：",paraId:15,tocIndex:2},{value:"({\n  type: 'interval',\n  interaction: { brushXHighlight: true },\n});\n",paraId:16,tocIndex:2},{value:"也可以配置在 View 层级，视图上声明的交互会传递给 ",paraId:17,tocIndex:2},{value:"children",paraId:17,tocIndex:2},{value:" 声明的标记，如果该标记有声明对应的交互，就合并；否则不影响。",paraId:17,tocIndex:2},{value:"({\n  type: 'view',\n  interaction: { brushXHighlight: true },\n});\n",paraId:18,tocIndex:2},{value:"属性",paraId:19,tocIndex:3},{value:"描述",paraId:19,tocIndex:3},{value:"类型",paraId:19,tocIndex:3},{value:"默认值",paraId:19,tocIndex:3},{value:"必选",paraId:19,tocIndex:3},{value:"reverse",paraId:19,tocIndex:3},{value:"brush 是否反转",paraId:19,tocIndex:3},{value:"boolean",paraId:19,tocIndex:3},{value:"false",paraId:19,tocIndex:3},{value:"series",paraId:19,tocIndex:3},{value:"是否是系列元素",paraId:19,tocIndex:3},{value:"boolean",paraId:19,tocIndex:3},{value:"false",paraId:19,tocIndex:3},{value:"facet",paraId:19,tocIndex:3},{value:"是否跨分面",paraId:19,tocIndex:3},{value:"boolean",paraId:19,tocIndex:3},{value:"false",paraId:19,tocIndex:3},{value:"selectedHandles",paraId:19,tocIndex:3},{value:"可以 resize 的手柄方向",paraId:19,tocIndex:3},{value:"string[]",paraId:19,tocIndex:3},{value:"['handle-e', 'handle-w']",paraId:19,tocIndex:3},{value:"brushRegion",paraId:19,tocIndex:3},{value:"框选区域",paraId:19,tocIndex:3},{value:"(x, y, x1, y1, extent) => any",paraId:19,tocIndex:3},{value:"(x, y, x1, y1,[minX, minY, maxX, maxY]) => [x, minY, x1, maxY]",paraId:19,tocIndex:3},{value:"mask",paraId:19,tocIndex:3},{value:"框选区域的蒙版样式",paraId:19,tocIndex:3},{value:"mask",paraId:20,tocIndex:3},{value:"详见 ",paraId:19,tocIndex:3},{value:"mask",paraId:21,tocIndex:3},{value:"maskHandle",paraId:19,tocIndex:3},{value:"框选区域的手柄样式",paraId:19,tocIndex:3},{value:"maskHandle",paraId:22,tocIndex:3},{value:"详见 ",paraId:19,tocIndex:3},{value:"maskHandle",paraId:23,tocIndex:3},{value:"配置框选区域的蒙版的样式。",paraId:24,tocIndex:4},{value:"属性",paraId:25,tocIndex:4},{value:"描述",paraId:25,tocIndex:4},{value:"类型",paraId:25,tocIndex:4},{value:"默认值",paraId:25,tocIndex:4},{value:"必选",paraId:25,tocIndex:4},{value:"maskFill",paraId:25,tocIndex:4},{value:"蒙版的填充色",paraId:25,tocIndex:4},{value:"string",paraId:25,tocIndex:4},{value:"#777",paraId:25,tocIndex:4},{value:"maskFillOpacity",paraId:25,tocIndex:4},{value:"蒙版的填充透明度",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"0.3",paraId:25,tocIndex:4},{value:"maskStroke",paraId:25,tocIndex:4},{value:"蒙版的描边",paraId:25,tocIndex:4},{value:"string",paraId:25,tocIndex:4},{value:"#fff",paraId:25,tocIndex:4},{value:"maskStrokeOpacity",paraId:25,tocIndex:4},{value:"描边透明度",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"maskLineWidth",paraId:25,tocIndex:4},{value:"蒙版描边的宽度",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"maskLineDash",paraId:25,tocIndex:4},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:25,tocIndex:4},{value:"[number,number]",paraId:25,tocIndex:4},{value:"maskOpacity",paraId:25,tocIndex:4},{value:"蒙版的整体透明度",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"maskShadowColor",paraId:25,tocIndex:4},{value:"蒙版阴影颜色",paraId:25,tocIndex:4},{value:"string",paraId:25,tocIndex:4},{value:"maskShadowBlur",paraId:25,tocIndex:4},{value:"蒙版阴影的高斯模糊系数",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"maskShadowOffsetX",paraId:25,tocIndex:4},{value:"设置阴影距蒙版的水平距离",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"maskShadowOffsetY",paraId:25,tocIndex:4},{value:"设置阴影距蒙版的垂直距离",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"maskCursor",paraId:25,tocIndex:4},{value:"鼠标样式。同 css 的鼠标样式",paraId:25,tocIndex:4},{value:"string",paraId:25,tocIndex:4},{value:"default",paraId:25,tocIndex:4},{value:"在配置框选区域的蒙版样式的时候，不是以对象的形式来配置，而是以 ",paraId:26,tocIndex:4},{value:"mask",paraId:26,tocIndex:4},{value:"前缀加属性的方式来配置。",paraId:26,tocIndex:4},{value:"({\n  interaction: {\n    brushXHighlight: {\n      maskFill: '#000',\n      maskFillOpacity: 0.2,\n      maskStroke: 'red',\n      maskStrokeOpacity: 0.9,\n      maskLineWidth: 2,\n      maskLineDash: [4, 8],\n      maskOpacity: 0.2,\n      maskShadowColor: '#d3d3d3',\n      maskShadowBlur: 10,\n      maskShadowOffsetX: 10,\n      maskShadowOffsetY: 10,\n      maskCursor: 'pointer',\n    },\n  },\n});\n",paraId:27,tocIndex:4},{value:"八个方向的 handle 的名字分别如下（按照东南西北命名），按照 ",paraId:28,tocIndex:5},{value:"mask[handleName][styleAttribute]",paraId:28,tocIndex:5},{value:" 格式设置对应的属性，也可以通过 ",paraId:28,tocIndex:5},{value:"maskHandleSize",paraId:28,tocIndex:5},{value:" 设置宽度。",paraId:28,tocIndex:5},{value:"属性",paraId:29,tocIndex:5},{value:"描述",paraId:29,tocIndex:5},{value:"类型",paraId:29,tocIndex:5},{value:"默认值",paraId:29,tocIndex:5},{value:"必选",paraId:29,tocIndex:5},{value:"mask[handleName]Render",paraId:29,tocIndex:5},{value:"自定义蒙版手柄的渲染函数",paraId:29,tocIndex:5},{value:"(g, options, document) => DisplayObject",paraId:29,tocIndex:5},{value:"mask[handleName]Size",paraId:29,tocIndex:5},{value:"蒙版手柄的宽度",paraId:29,tocIndex:5},{value:"string",paraId:29,tocIndex:5},{value:"mask[handleName]Fill",paraId:29,tocIndex:5},{value:"蒙版手柄的填充色",paraId:29,tocIndex:5},{value:"string",paraId:29,tocIndex:5},{value:"mask[handleName]FillOpacity",paraId:29,tocIndex:5},{value:"蒙版手柄的填充透明度",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]Stroke",paraId:29,tocIndex:5},{value:"蒙版手柄的描边",paraId:29,tocIndex:5},{value:"string",paraId:29,tocIndex:5},{value:"mask[handleName]StrokeOpacity",paraId:29,tocIndex:5},{value:"描边透明度",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]LineWidth",paraId:29,tocIndex:5},{value:"蒙版手柄描边的宽度",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]LineDash",paraId:29,tocIndex:5},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:29,tocIndex:5},{value:"[number,number]",paraId:29,tocIndex:5},{value:"mask[handleName]Opacity",paraId:29,tocIndex:5},{value:"蒙版手柄的整体透明度",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]ShadowColor",paraId:29,tocIndex:5},{value:"蒙版手柄阴影颜色",paraId:29,tocIndex:5},{value:"string",paraId:29,tocIndex:5},{value:"mask[handleName]ShadowBlur",paraId:29,tocIndex:5},{value:"蒙版手柄阴影的高斯模糊系数",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]ShadowOffsetX",paraId:29,tocIndex:5},{value:"设置阴影距蒙版手柄的水平距离",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]ShadowOffsetY",paraId:29,tocIndex:5},{value:"设置阴影距蒙版手柄的垂直距离",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]Cursor",paraId:29,tocIndex:5},{value:"鼠标样式。同 css 的鼠标样式",paraId:29,tocIndex:5},{value:"string",paraId:29,tocIndex:5},{value:"default",paraId:29,tocIndex:5},{value:"支持以下的事件：",paraId:30,tocIndex:7},{value:"brush:start",paraId:31,tocIndex:7},{value:" - 开始创建 brush 的时候触发",paraId:31,tocIndex:7},{value:"brush:end",paraId:31,tocIndex:7},{value:" - brush 更新大小和位置完成时候触发",paraId:31,tocIndex:7},{value:"brush:remove",paraId:31,tocIndex:7},{value:" - brush 移除的时候触发",paraId:31,tocIndex:7},{value:"brush:highlight",paraId:31,tocIndex:7},{value:" - brush 改变大小和位置时触发",paraId:31,tocIndex:7},{value:"chart.on('brush:highlight', (e) => {\n  console.log(e.data.selection);\n  console.log(e.nativeEvent);\n});\n",paraId:32,tocIndex:7},{value:"支持以下的事件：",paraId:33,tocIndex:8},{value:"brush:highlight",paraId:34,tocIndex:8},{value:" - 高亮数据",paraId:34,tocIndex:8},{value:"brush:remove",paraId:34,tocIndex:8},{value:" - 移除 brush",paraId:34,tocIndex:8},{value:"chart.emit('brush:remove');\nchart.emit('brush:highlight', { data: { selection } });\n",paraId:35,tocIndex:8},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\nconst focusContainer = document.createElement('div');\nconst contextContainer = document.createElement('div');\ncontainer.append(focusContainer);\ncontainer.append(contextContainer);\n\nfunction createPathRender(compute) {\n  return (group, options, document) => {\n    if (!group.handle) {\n      const path = document.createElement('path');\n      group.handle = path;\n      group.appendChild(group.handle);\n    }\n    const { handle } = group;\n    const { x, y, width, height, ...rest } = options;\n    if (width === undefined || height === undefined) return handle;\n    handle.attr({ ...compute(x, y, width, height), ...rest });\n    return handle;\n  };\n}\n\n// 渲染 focus 视图\n\nconst focus = new G2.Chart({\n  container: focusContainer,\n  height: 360,\n  paddingLeft: 50,\n});\n\nfocus\n  .area()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  })\n  .encode('x', 'date')\n  .encode('y', 'close')\n  .animate(false)\n  .axis('x', { grid: false, title: false, tickCount: 5 })\n  .axis('y', { grid: false, tickCount: 5 })\n  .interaction('tooltip', false)\n  .interaction('brushXFilter', true);\n\nfocus.render();\n\n// 渲染 context 视图\n\nconst context = new G2.Chart({\n  container: 'container',\n  container: contextContainer,\n  paddingLeft: 50,\n  paddingTop: 0,\n  paddingBottom: 0,\n  height: 60,\n});\n\ncontext\n  .area()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  })\n  .encode('x', 'date')\n  .encode('y', 'close')\n  .animate(false)\n  .axis(false)\n  .interaction('tooltip', false)\n  .interaction('brushXHighlight', {\n    series: true,\n    maskOpacity: 0.3,\n    maskFill: '#777',\n    maskHandleWRender: createPathRender((x, y, width, height) => ({\n      d: 'M-0.5,31.5c-2.5,0,-4.5,2,-4.5,4.5v30c0,2.5,2,4.5,4.5,4.5V31.5z',\n      transform: `translate(${x + width / 2}, ${y - height / 2})`,\n    })),\n    maskHandleERender: createPathRender((x, y, width, height) => ({\n      d: 'M0.5,31.5c2.5,0,4.5,2,4.5,4.5v30c0,2.5,-2,4.5,-4.5,4.5V31.5z',\n      transform: `translate(${x + width / 2}, ${y - height / 2})`,\n    })),\n    maskHandleEFill: '#D3D8E0',\n    maskHandleWFill: '#D3D8E0',\n  });\n\ncontext.render();\n\n// 添加事件监听器在不同图表之间交流\nfocus.on('brush:filter', (e) => {\n  const { nativeEvent } = e;\n  if (!nativeEvent) return;\n  const { selection } = e.data;\n  const { x: scaleX } = focus.getScale();\n  const [[x1, x2]] = selection;\n  const domainX = scaleX.getOptions().domain;\n  if (x1 === domainX[0] && x2 === domainX[1]) {\n    context.emit('brush:remove', {});\n  } else {\n    context.emit('brush:highlight', { data: { selection } });\n  }\n});\n\ncontext.on('brush:highlight', (e) => {\n  const { nativeEvent, data } = e;\n  if (!nativeEvent) return;\n  const { selection } = data;\n  focus.emit('brush:filter', { data: { selection } });\n});\n\ncontext.on('brush:remove', (e) => {\n  const { nativeEvent } = e;\n  if (!nativeEvent) return;\n  const { x: scaleX, y: scaleY } = context.getScale();\n  const selection = [scaleX.getOptions().domain, scaleY.getOptions().domain];\n  focus.emit('brush:filter', { data: { selection } });\n});\n",paraId:36,tocIndex:10}]},57749:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(90113);const t=[{value:"brushYFilter",paraId:0,tocIndex:0},{value:" 交互是 brushFilter 的纵向限定版本，专用于基于 Y 轴维度的数据筛选。该交互限制用户只能通过垂直方向的框选操作（沿 Y 轴方向），对图表元素进行范围过滤，特别适用于数值区间分析、纵向对比等场景。",paraId:0,tocIndex:0},{value:"核心特征：",paraId:1,tocIndex:0},{value:"垂直操作：仅允许垂直方向框选，X 轴范围自动全选",paraId:2,tocIndex:0},{value:"数值聚焦：精准控制 Y 轴数值范围（如价格区间、温度范围）",paraId:3,tocIndex:0},{value:"动态响应：筛选结果实时映射到关联视图",paraId:4,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  },\n  encode: {\n    x: 'height',\n    y: 'weight', // Y 轴绑定数值型数据\n  },\n  interaction: {\n    brushYFilter: { maskStroke: '#52c41a' }, // 启用绿色边框的纵向筛选\n  },\n});\n\nchart.render();\n",paraId:5,tocIndex:0},{value:"配置 ",paraId:6,tocIndex:1},{value:"brushYFilter",paraId:6,tocIndex:1},{value:" 交互有两种方式",paraId:6,tocIndex:1},{value:"通过布尔值开启交互，使用默认配置：",paraId:7,tocIndex:2},{value:"({\n  type: 'interval',\n  interaction: { brushYFilter: true }, // 启用默认配置的Y轴刷选过滤\n});\n",paraId:8,tocIndex:2},{value:"通过",paraId:9,tocIndex:3},{value:"配置项",paraId:10,tocIndex:3},{value:" 精细化控制交互行为：",paraId:9,tocIndex:3},{value:"({\n  type: 'interval',\n  interaction: {\n    brushYFilter: {\n      reverse: false, // 关闭反向选择\n      maskFill: '#rgba(0,0,0,0.3)', // 自定义蒙版颜色\n    },\n  },\n});\n",paraId:11,tocIndex:3},{value:"交互可以配置在 Mark 层级：",paraId:12,tocIndex:4},{value:"({\n  type: 'interval',\n  interaction: { brushYFilter: true },\n});\n",paraId:13,tocIndex:4},{value:"也可以配置在 View 层级，视图上声明的交互会传递给 ",paraId:14,tocIndex:4},{value:"children",paraId:14,tocIndex:4},{value:" 声明的标记，如果该标记有声明对应的交互，就合并；否则不影响。",paraId:14,tocIndex:4},{value:"({\n  type: 'view',\n  interaction: { brushYFilter: true },\n});\n",paraId:15,tocIndex:4},{value:"属性",paraId:16,tocIndex:5},{value:"描述",paraId:16,tocIndex:5},{value:"类型",paraId:16,tocIndex:5},{value:"默认值",paraId:16,tocIndex:5},{value:"必选",paraId:16,tocIndex:5},{value:"reverse",paraId:16,tocIndex:5},{value:"brush 是否反转",paraId:16,tocIndex:5},{value:"boolean",paraId:16,tocIndex:5},{value:"false",paraId:16,tocIndex:5},{value:"mask",paraId:16,tocIndex:5},{value:"框选区域的蒙版样式",paraId:16,tocIndex:5},{value:"mask",paraId:17,tocIndex:5},{value:"详见 ",paraId:16,tocIndex:5},{value:"mask",paraId:18,tocIndex:5},{value:"配置框选区域的蒙版的样式。",paraId:19,tocIndex:6},{value:"属性",paraId:20,tocIndex:6},{value:"描述",paraId:20,tocIndex:6},{value:"类型",paraId:20,tocIndex:6},{value:"默认值",paraId:20,tocIndex:6},{value:"必选",paraId:20,tocIndex:6},{value:"maskFill",paraId:20,tocIndex:6},{value:"蒙版的填充色",paraId:20,tocIndex:6},{value:"string",paraId:20,tocIndex:6},{value:"#777",paraId:20,tocIndex:6},{value:"maskFillOpacity",paraId:20,tocIndex:6},{value:"蒙版的填充透明度",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"0.3",paraId:20,tocIndex:6},{value:"maskStroke",paraId:20,tocIndex:6},{value:"蒙版的描边",paraId:20,tocIndex:6},{value:"string",paraId:20,tocIndex:6},{value:"#fff",paraId:20,tocIndex:6},{value:"maskStrokeOpacity",paraId:20,tocIndex:6},{value:"描边透明度",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskLineWidth",paraId:20,tocIndex:6},{value:"蒙版描边的宽度",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskLineDash",paraId:20,tocIndex:6},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:20,tocIndex:6},{value:"[number,number]",paraId:20,tocIndex:6},{value:"maskOpacity",paraId:20,tocIndex:6},{value:"蒙版的整体透明度",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskShadowColor",paraId:20,tocIndex:6},{value:"蒙版阴影颜色",paraId:20,tocIndex:6},{value:"string",paraId:20,tocIndex:6},{value:"maskShadowBlur",paraId:20,tocIndex:6},{value:"蒙版阴影的高斯模糊系数",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskShadowOffsetX",paraId:20,tocIndex:6},{value:"设置阴影距蒙版的水平距离",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskShadowOffsetY",paraId:20,tocIndex:6},{value:"设置阴影距蒙版的垂直距离",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskCursor",paraId:20,tocIndex:6},{value:"鼠标样式。同 css 的鼠标样式",paraId:20,tocIndex:6},{value:"string",paraId:20,tocIndex:6},{value:"default",paraId:20,tocIndex:6},{value:"在配置框选区域的蒙版样式的时候，不是以对象的形式来配置，而是以 ",paraId:21,tocIndex:6},{value:"mask",paraId:21,tocIndex:6},{value:"前缀加属性的方式来配置。",paraId:21,tocIndex:6},{value:"样式配置示例：",paraId:22,tocIndex:6},{value:"({\n  interaction: {\n    brushYFilter: {\n      maskFill: '#000',\n      maskFillOpacity: 0.2,\n      maskStroke: 'red',\n      maskStrokeOpacity: 0.9,\n      maskLineWidth: 2,\n      maskLineDash: [4, 8],\n      maskOpacity: 0.2,\n      maskShadowColor: '#d3d3d3',\n      maskShadowBlur: 10,\n      maskShadowOffsetX: 10,\n      maskShadowOffsetY: 10,\n      maskCursor: 'pointer',\n    },\n  },\n});\n",paraId:23,tocIndex:6},{value:"监听刷选过滤动作：",paraId:24,tocIndex:8},{value:"chart.on('brush:filter', (event) => {\n  const {\n    data, // 筛选后的数据集合\n    nativeEvent, // 原始 DOM 事件\n  } = event;\n  const [yMin, yMax] = data.selection[1]; // 注意数据结构差异\n  console.log(`数值区间：${yMin.toFixed(2)} - ${yMax.toFixed(2)}`);\n});\n",paraId:25,tocIndex:8},{value:"通过编程方式触发筛选：",paraId:26,tocIndex:9},{value:"/// 设置 Y 轴筛选范围（数值型示例）\nchart.emit('brush:filter', {\n  data: {\n    selection: [\n      null, // X 轴保持全选\n      [20, 60], // Y 轴范围 20-60\n    ],\n  },\n});\n",paraId:27,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { letter: 'A', frequency: 0.08167 },\n  { letter: 'B', frequency: 0.01492 },\n  { letter: 'C', frequency: 0.02782 },\n  { letter: 'D', frequency: 0.04253 },\n  { letter: 'E', frequency: 0.12702 },\n  { letter: 'F', frequency: 0.02288 },\n  { letter: 'G', frequency: 0.02015 },\n  { letter: 'H', frequency: 0.06094 },\n  { letter: 'I', frequency: 0.06966 },\n  { letter: 'J', frequency: 0.00153 },\n  { letter: 'K', frequency: 0.00772 },\n  { letter: 'L', frequency: 0.04025 },\n  { letter: 'M', frequency: 0.02406 },\n  { letter: 'N', frequency: 0.06749 },\n  { letter: 'O', frequency: 0.07507 },\n  { letter: 'P', frequency: 0.01929 },\n  { letter: 'Q', frequency: 0.00095 },\n  { letter: 'R', frequency: 0.05987 },\n  { letter: 'S', frequency: 0.06327 },\n  { letter: 'T', frequency: 0.09056 },\n  { letter: 'U', frequency: 0.02758 },\n  { letter: 'V', frequency: 0.00978 },\n  { letter: 'W', frequency: 0.0236 },\n  { letter: 'X', frequency: 0.0015 },\n  { letter: 'Y', frequency: 0.01974 },\n  { letter: 'Z', frequency: 0.00074 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  autoFit: true,\n  interaction: {\n    brushYFilter: {\n      maskFill: '#000',\n      maskFillOpacity: 0.2,\n      maskStroke: 'red',\n      maskStrokeOpacity: 0.9,\n      maskLineWidth: 2,\n      maskLineDash: [4, 8],\n      maskOpacity: 0.2,\n      maskShadowColor: '#d3d3d3',\n      maskShadowBlur: 10,\n      maskShadowOffsetX: 10,\n      maskShadowOffsetY: 10,\n      maskCursor: 'pointer',\n    },\n  },\n});\n\nchart.interval().data(data).encode('x', 'letter').encode('y', 'frequency');\n\nchart.render();\n",paraId:28,tocIndex:10}]},39245:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(15547);const t=[{value:"brushYHighlight",paraId:0,tocIndex:0},{value:" 是一种特殊的",paraId:0,tocIndex:0},{value:"brushHighlight",paraId:0,tocIndex:0},{value:" 交互。在保留基础高亮功能的同时，将 x 轴框选范围固定为全域（从最小值到最大值），专注于 y 轴方向的数据选区操作。纵向对比分析（如金融产品的收益率对比、实验数据的垂直分布研究），通过消除水平方向干扰提升操作精度。",paraId:0,tocIndex:0},{value:"触发：框选元素。",paraId:1,tocIndex:0},{value:"结束：单击图表区域。",paraId:2,tocIndex:0},{value:"影响状态：",paraId:3,tocIndex:0},{value:"框选范围的元素变为 ",paraId:4,tocIndex:0},{value:"active",paraId:4,tocIndex:0},{value:" 状态。",paraId:4,tocIndex:0},{value:"框选范围以外的元素变为 ",paraId:5,tocIndex:0},{value:"inactive",paraId:5,tocIndex:0},{value:" 状态。",paraId:5,tocIndex:0},{value:"交互内置状态：",paraId:6,tocIndex:0},{value:"({\n  inactive: { opacity: 0.5 },\n});\n",paraId:7,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  },\n  encode: { x: 'height', y: 'weight', color: 'gender' },\n  state: { inactive: { stroke: 'gray' } },\n  interaction: { brushYHighlight: true },\n});\n\nchart.render();\n",paraId:8,tocIndex:0},{value:"配置 ",paraId:9,tocIndex:1},{value:"brushYHighlight",paraId:9,tocIndex:1},{value:" 交互有两种方式",paraId:9,tocIndex:1},{value:"第一种，传入 ",paraId:10,tocIndex:1},{value:"boolean",paraId:10,tocIndex:1},{value:" 设置是否开启交互。",paraId:10,tocIndex:1},{value:"({\n  type: 'interval',\n  interaction: { brushYHighlight: true },\n});\n",paraId:11,tocIndex:1},{value:"第二种，传入 ",paraId:12,tocIndex:1},{value:"配置项",paraId:13,tocIndex:1},{value:" 对交互进行配置。",paraId:12,tocIndex:1},{value:"({\n  type: 'line',\n  interaction: {\n    brushYHighlight: {\n      series: true,\n    },\n  },\n});\n",paraId:14,tocIndex:1},{value:"交互可以配置在 Mark 层级：",paraId:15,tocIndex:2},{value:"({\n  type: 'interval',\n  interaction: { brushYHighlight: true },\n});\n",paraId:16,tocIndex:2},{value:"也可以配置在 View 层级，视图上声明的交互会传递给 ",paraId:17,tocIndex:2},{value:"children",paraId:17,tocIndex:2},{value:" 声明的标记，如果该标记有声明对应的交互，就合并；否则不影响。",paraId:17,tocIndex:2},{value:"({\n  type: 'view',\n  interaction: { brushYHighlight: true },\n});\n",paraId:18,tocIndex:2},{value:"属性",paraId:19,tocIndex:3},{value:"描述",paraId:19,tocIndex:3},{value:"类型",paraId:19,tocIndex:3},{value:"默认值",paraId:19,tocIndex:3},{value:"必选",paraId:19,tocIndex:3},{value:"reverse",paraId:19,tocIndex:3},{value:"brush 是否反转",paraId:19,tocIndex:3},{value:"boolean",paraId:19,tocIndex:3},{value:"false",paraId:19,tocIndex:3},{value:"series",paraId:19,tocIndex:3},{value:"是否是系列元素",paraId:19,tocIndex:3},{value:"boolean",paraId:19,tocIndex:3},{value:"false",paraId:19,tocIndex:3},{value:"facet",paraId:19,tocIndex:3},{value:"是否跨分面",paraId:19,tocIndex:3},{value:"boolean",paraId:19,tocIndex:3},{value:"false",paraId:19,tocIndex:3},{value:"selectedHandles",paraId:19,tocIndex:3},{value:"可以 resize 的手柄方向",paraId:19,tocIndex:3},{value:"string[]",paraId:19,tocIndex:3},{value:"['handle-n', 'handle-s']",paraId:19,tocIndex:3},{value:"brushRegion",paraId:19,tocIndex:3},{value:"框选区域",paraId:19,tocIndex:3},{value:"(x, y, x1, y1, extent) => any",paraId:19,tocIndex:3},{value:"(x, y, x1, y1,[minX, minY, maxX, maxY]) => [minX, y, maxX, y1]",paraId:19,tocIndex:3},{value:"mask",paraId:19,tocIndex:3},{value:"框选区域的蒙版样式",paraId:19,tocIndex:3},{value:"mask",paraId:20,tocIndex:3},{value:"详见 ",paraId:19,tocIndex:3},{value:"mask",paraId:21,tocIndex:3},{value:"maskHandle",paraId:19,tocIndex:3},{value:"框选区域的手柄样式",paraId:19,tocIndex:3},{value:"maskHandle",paraId:22,tocIndex:3},{value:"详见 ",paraId:19,tocIndex:3},{value:"maskHandle",paraId:23,tocIndex:3},{value:"配置框选区域的蒙版的样式。",paraId:24,tocIndex:4},{value:"属性",paraId:25,tocIndex:4},{value:"描述",paraId:25,tocIndex:4},{value:"类型",paraId:25,tocIndex:4},{value:"默认值",paraId:25,tocIndex:4},{value:"必选",paraId:25,tocIndex:4},{value:"maskFill",paraId:25,tocIndex:4},{value:"蒙版的填充色",paraId:25,tocIndex:4},{value:"string",paraId:25,tocIndex:4},{value:"#777",paraId:25,tocIndex:4},{value:"maskFillOpacity",paraId:25,tocIndex:4},{value:"蒙版的填充透明度",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"0.3",paraId:25,tocIndex:4},{value:"maskStroke",paraId:25,tocIndex:4},{value:"蒙版的描边",paraId:25,tocIndex:4},{value:"string",paraId:25,tocIndex:4},{value:"#fff",paraId:25,tocIndex:4},{value:"maskStrokeOpacity",paraId:25,tocIndex:4},{value:"描边透明度",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"maskLineWidth",paraId:25,tocIndex:4},{value:"蒙版描边的宽度",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"maskLineDash",paraId:25,tocIndex:4},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:25,tocIndex:4},{value:"[number,number]",paraId:25,tocIndex:4},{value:"maskOpacity",paraId:25,tocIndex:4},{value:"蒙版的整体透明度",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"maskShadowColor",paraId:25,tocIndex:4},{value:"蒙版阴影颜色",paraId:25,tocIndex:4},{value:"string",paraId:25,tocIndex:4},{value:"maskShadowBlur",paraId:25,tocIndex:4},{value:"蒙版阴影的高斯模糊系数",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"maskShadowOffsetX",paraId:25,tocIndex:4},{value:"设置阴影距蒙版的水平距离",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"maskShadowOffsetY",paraId:25,tocIndex:4},{value:"设置阴影距蒙版的垂直距离",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"maskCursor",paraId:25,tocIndex:4},{value:"鼠标样式。同 css 的鼠标样式",paraId:25,tocIndex:4},{value:"string",paraId:25,tocIndex:4},{value:"default",paraId:25,tocIndex:4},{value:"在配置框选区域的蒙版样式的时候，不是以对象的形式来配置，而是以 ",paraId:26,tocIndex:4},{value:"mask",paraId:26,tocIndex:4},{value:"前缀加属性的方式来配置。",paraId:26,tocIndex:4},{value:"({\n  interaction: {\n    brushYHighlight: {\n      maskFill: '#000',\n      maskFillOpacity: 0.2,\n      maskStroke: 'red',\n      maskStrokeOpacity: 0.9,\n      maskLineWidth: 2,\n      maskLineDash: [4, 8],\n      maskOpacity: 0.2,\n      maskShadowColor: '#d3d3d3',\n      maskShadowBlur: 10,\n      maskShadowOffsetX: 10,\n      maskShadowOffsetY: 10,\n      maskCursor: 'pointer',\n    },\n  },\n});\n",paraId:27,tocIndex:4},{value:"八个方向的 handle 的名字分别如下（按照东南西北命名），按照 ",paraId:28,tocIndex:5},{value:"mask[handleName][styleAttribute]",paraId:28,tocIndex:5},{value:" 格式设置对应的属性，也可以通过 ",paraId:28,tocIndex:5},{value:"maskHandleSize",paraId:28,tocIndex:5},{value:" 设置宽度。",paraId:28,tocIndex:5},{value:"属性",paraId:29,tocIndex:5},{value:"描述",paraId:29,tocIndex:5},{value:"类型",paraId:29,tocIndex:5},{value:"默认值",paraId:29,tocIndex:5},{value:"必选",paraId:29,tocIndex:5},{value:"mask[handleName]Render",paraId:29,tocIndex:5},{value:"自定义蒙版手柄的渲染函数",paraId:29,tocIndex:5},{value:"(g, options, document) => DisplayObject",paraId:29,tocIndex:5},{value:"mask[handleName]Size",paraId:29,tocIndex:5},{value:"蒙版手柄的宽度",paraId:29,tocIndex:5},{value:"string",paraId:29,tocIndex:5},{value:"mask[handleName]Fill",paraId:29,tocIndex:5},{value:"蒙版手柄的填充色",paraId:29,tocIndex:5},{value:"string",paraId:29,tocIndex:5},{value:"mask[handleName]FillOpacity",paraId:29,tocIndex:5},{value:"蒙版手柄的填充透明度",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]Stroke",paraId:29,tocIndex:5},{value:"蒙版手柄的描边",paraId:29,tocIndex:5},{value:"string",paraId:29,tocIndex:5},{value:"mask[handleName]StrokeOpacity",paraId:29,tocIndex:5},{value:"描边透明度",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]LineWidth",paraId:29,tocIndex:5},{value:"蒙版手柄描边的宽度",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]LineDash",paraId:29,tocIndex:5},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:29,tocIndex:5},{value:"[number,number]",paraId:29,tocIndex:5},{value:"mask[handleName]Opacity",paraId:29,tocIndex:5},{value:"蒙版手柄的整体透明度",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]ShadowColor",paraId:29,tocIndex:5},{value:"蒙版手柄阴影颜色",paraId:29,tocIndex:5},{value:"string",paraId:29,tocIndex:5},{value:"mask[handleName]ShadowBlur",paraId:29,tocIndex:5},{value:"蒙版手柄阴影的高斯模糊系数",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]ShadowOffsetX",paraId:29,tocIndex:5},{value:"设置阴影距蒙版手柄的水平距离",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]ShadowOffsetY",paraId:29,tocIndex:5},{value:"设置阴影距蒙版手柄的垂直距离",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]Cursor",paraId:29,tocIndex:5},{value:"鼠标样式。同 css 的鼠标样式",paraId:29,tocIndex:5},{value:"string",paraId:29,tocIndex:5},{value:"default",paraId:29,tocIndex:5},{value:"支持以下的事件：",paraId:30,tocIndex:7},{value:"brush:start",paraId:31,tocIndex:7},{value:" - 开始创建 brush 的时候触发",paraId:31,tocIndex:7},{value:"brush:end",paraId:31,tocIndex:7},{value:" - brush 更新大小和位置完成时候触发",paraId:31,tocIndex:7},{value:"brush:remove",paraId:31,tocIndex:7},{value:" - brush 移除的时候触发",paraId:31,tocIndex:7},{value:"brush:highlight",paraId:31,tocIndex:7},{value:" - brush 改变大小和位置时触发",paraId:31,tocIndex:7},{value:"chart.on('brush:highlight', (e) => {\n  console.log(e.data.selection);\n  console.log(e.nativeEvent);\n});\n",paraId:32,tocIndex:7},{value:"支持以下的事件：",paraId:33,tocIndex:8},{value:"brush:highlight",paraId:34,tocIndex:8},{value:" - 高亮数据",paraId:34,tocIndex:8},{value:"brush:remove",paraId:34,tocIndex:8},{value:" - 移除 brush",paraId:34,tocIndex:8},{value:"chart.emit('brush:remove');\nchart.emit('brush:highlight', { data: { selection } });\n",paraId:35,tocIndex:8}]},84026:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(19434);const t=[{value:"chartIndex",paraId:0,tocIndex:0},{value:" 是一种交互组件，用于查看折线图相对于某个时间点的相对趋势。",paraId:0,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 50,\n});\n\nchart.options({\n  type: 'line',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/indices.json',\n  },\n  encode: {\n    x: (d) => new Date(d.Date),\n    y: 'Close',\n    color: 'Symbol',\n    key: 'Symbol',\n    title: (d) => d.Date.toLocaleString(),\n  },\n  axis: {\n    y: {\n      title: '↑ Change in price (%)',\n      labelAutoRotate: false,\n    },\n  },\n  scale: {\n    y: {\n      type: 'log',\n    },\n  },\n  label: {\n    text: 'Symbol',\n    selector: 'last',\n    style: {\n      fontSize: 10,\n    },\n  },\n  interaction: {\n    chartIndex: {\n      ruleStroke: '#aaa',\n      labelDx: 5,\n      labelTextAlign: 'center',\n      labelStroke: '#fff',\n      labelLineWidth: 5,\n      labelFormatter: (d) => `${d.toLocaleDateString()}`,\n    },\n  },\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"chartIndex",paraId:2,tocIndex:1},{value:" 通过传入 ",paraId:2,tocIndex:1},{value:"配置项",paraId:3,tocIndex:1},{value:" 对交互进行配置",paraId:2,tocIndex:1},{value:"({\n  type: 'line',\n  interaction: {\n    chartIndex: {},\n  },\n});\n",paraId:4,tocIndex:1},{value:"交互可以配置在 Mark 层级：",paraId:5,tocIndex:2},{value:"({\n  type: 'line',\n  interaction: { chartIndex: {} },\n});\n",paraId:6,tocIndex:2},{value:"也可以配置在 View 层级，视图上声明的交互会传递给 ",paraId:7,tocIndex:2},{value:"children",paraId:7,tocIndex:2},{value:" 声明的标记，如果该标记有声明对应的交互，就合并；否则不影响。",paraId:7,tocIndex:2},{value:"({\n  type: 'view',\n  children: [\n    {\n      type: 'line',\n      interaction: { chartIndex: {} },\n    },\n  ],\n});\n",paraId:8,tocIndex:2},{value:"属性",paraId:9,tocIndex:3},{value:"描述",paraId:9,tocIndex:3},{value:"类型",paraId:9,tocIndex:3},{value:"默认值",paraId:9,tocIndex:3},{value:"必选",paraId:9,tocIndex:3},{value:"ruleStroke",paraId:9,tocIndex:3},{value:"指示线的颜色",paraId:9,tocIndex:3},{value:"string",paraId:9,tocIndex:3},{value:"black",paraId:9,tocIndex:3},{value:"ruleLineWidth",paraId:9,tocIndex:3},{value:"指示线宽",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"1",paraId:9,tocIndex:3},{value:"ruleLineDash",paraId:9,tocIndex:3},{value:"虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。ruleLineDash 设为[0,0]的效果为没有描边。",paraId:9,tocIndex:3},{value:"[number,number]",paraId:9,tocIndex:3},{value:"ruleStrokeOpacity",paraId:9,tocIndex:3},{value:"指示线的透明度",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"ruleOpacity",paraId:9,tocIndex:3},{value:"整体透明度",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"ruleShadowColor",paraId:9,tocIndex:3},{value:"指示线阴影颜色",paraId:9,tocIndex:3},{value:"string",paraId:9,tocIndex:3},{value:"ruleShadowBlur",paraId:9,tocIndex:3},{value:"指示线高斯模糊系数",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"ruleShadowOffsetX",paraId:9,tocIndex:3},{value:"指示线阴影距图形的水平距离",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"ruleShadowOffsetY",paraId:9,tocIndex:3},{value:"指示线阴影距图形的垂直距离",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"labelFontSize",paraId:9,tocIndex:3},{value:"文字大小",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"labelFontFamily",paraId:9,tocIndex:3},{value:"文字字体",paraId:9,tocIndex:3},{value:"string",paraId:9,tocIndex:3},{value:"labelFontWeight",paraId:9,tocIndex:3},{value:"字体粗细",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"labelLineHeight",paraId:9,tocIndex:3},{value:"文字的行高",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"labelTextAlign",paraId:9,tocIndex:3},{value:"设置文本内容的当前对齐方式",paraId:9,tocIndex:3},{value:"center",paraId:9,tocIndex:3},{value:" | ",paraId:9,tocIndex:3},{value:"end",paraId:9,tocIndex:3},{value:" | ",paraId:9,tocIndex:3},{value:"left",paraId:9,tocIndex:3},{value:" | ",paraId:9,tocIndex:3},{value:"right",paraId:9,tocIndex:3},{value:" | ",paraId:9,tocIndex:3},{value:"start",paraId:9,tocIndex:3},{value:"labelTextBaseline",paraId:9,tocIndex:3},{value:"设置在绘制文本时使用的当前文本基线",paraId:9,tocIndex:3},{value:"top",paraId:9,tocIndex:3},{value:" | ",paraId:9,tocIndex:3},{value:"middle",paraId:9,tocIndex:3},{value:" | ",paraId:9,tocIndex:3},{value:"bottom",paraId:9,tocIndex:3},{value:" | ",paraId:9,tocIndex:3},{value:"alphabetic",paraId:9,tocIndex:3},{value:" | ",paraId:9,tocIndex:3},{value:"hanging",paraId:9,tocIndex:3},{value:"labelFill",paraId:9,tocIndex:3},{value:"文字的填充色",paraId:9,tocIndex:3},{value:"string",paraId:9,tocIndex:3},{value:"labelFillOpacity",paraId:9,tocIndex:3},{value:"文字的填充透明度",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"labelStroke",paraId:9,tocIndex:3},{value:"文字的描边",paraId:9,tocIndex:3},{value:"string",paraId:9,tocIndex:3},{value:"labelLineWidth",paraId:9,tocIndex:3},{value:"文字描边的宽度",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"labelLineDash",paraId:9,tocIndex:3},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。labelLineDash 设为[0,0]的效果为没有描边。",paraId:9,tocIndex:3},{value:"[number,number] ",paraId:9,tocIndex:3},{value:"labelStrokeOpacity",paraId:9,tocIndex:3},{value:"描边透明度",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"labelOpacity",paraId:9,tocIndex:3},{value:"文字的整体透明度",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"labelShadowColor",paraId:9,tocIndex:3},{value:"文字阴影颜色",paraId:9,tocIndex:3},{value:"string",paraId:9,tocIndex:3},{value:"labelShadowBlur",paraId:9,tocIndex:3},{value:"文字阴影的高斯模糊系数",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"labelShadowOffsetX",paraId:9,tocIndex:3},{value:"设置阴影距文字的水平距离",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"labelShadowOffsetY",paraId:9,tocIndex:3},{value:"设置阴影距文字的垂直距离",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"labelDx",paraId:9,tocIndex:3},{value:"文字在 x 方向偏移",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"labelDy",paraId:9,tocIndex:3},{value:"文字在 y 方向偏移",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"labelFormatter",paraId:9,tocIndex:3},{value:"格式化日期",paraId:9,tocIndex:3},{value:"FormatterFunction",paraId:9,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/indices.json',\n  },\n  encode: {\n    x: (d) => new Date(d.Date),\n    y: 'Close',\n    color: 'Symbol',\n    key: 'Symbol',\n    title: (d) => d.Date.toLocaleString(),\n  },\n  axis: {\n    y: {\n      title: '↑ Change in price (%)',\n      labelAutoRotate: false,\n    },\n  },\n  scale: {\n    y: {\n      type: 'log',\n    },\n  },\n  label: {\n    text: 'Symbol',\n    selector: 'last',\n    style: {\n      fontSize: 10,\n    },\n  },\n  interaction: {\n    tooltip: {\n      crosshairs: false, // 关闭辅助线\n    },\n    chartIndex: {\n      ruleStroke: 'pink',\n      ruleLineWidth: 8,\n      ruleLineDash: [4, 8],\n      ruleShadowColor: 'green',\n      ruleShadowBlur: 5,\n      ruleShadowOffsetX: 5,\n      ruleShadowOffsetY: 5,\n      ruleOpacity: 0.9,\n      labelDy: 30,\n      labelFontSize: 20,\n      labelTextAlign: 'center',\n      labelFill: 'red',\n      labelStroke: 'yellow',\n      labelLineWidth: 2,\n      labelFormatter: (d) => `${d.toLocaleDateString()}`,\n    },\n  },\n});\n\nchart.render();\n",paraId:10,tocIndex:5}]},68076:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(70482);const t=[{value:"elementHighlight",paraId:0,tocIndex:0},{value:" 交互的对象是图表元素 element，当鼠标悬浮在元素上时，将该元素高亮显示。",paraId:0,tocIndex:0},{value:"触发：鼠标悬浮在元素上。",paraId:1,tocIndex:0},{value:"结束：鼠标移出元素。",paraId:2,tocIndex:0},{value:"影响状态：",paraId:3,tocIndex:0},{value:"悬浮的元素变为 ",paraId:4,tocIndex:0},{value:"active",paraId:4,tocIndex:0},{value:" 状态。",paraId:4,tocIndex:0},{value:"其他元素变为 ",paraId:5,tocIndex:0},{value:"inactive",paraId:5,tocIndex:0},{value:" 状态。",paraId:5,tocIndex:0},{value:"交互内置状态：",paraId:6,tocIndex:0},{value:"({\n  // active 状态下的元素为1px黑色边框\n  state: { active: { lineWidth: '1', stroke: '#000' } },\n});\n",paraId:7,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency' },\n  state: { active: { fill: 'orange' }, inactive: { opacity: 0.5 } },\n  axis: { y: { labelFormatter: '.0%' } },\n  interaction: { elementHighlight: true },\n});\n\nchart.render();\n",paraId:8,tocIndex:0},{value:"配置 ",paraId:9,tocIndex:1},{value:"elementHighlight",paraId:9,tocIndex:1},{value:" 交互有两种方式：",paraId:9,tocIndex:1},{value:"第一种，传入 ",paraId:10,tocIndex:1},{value:"boolean",paraId:10,tocIndex:1},{value:" 设置是否开启交互。",paraId:10,tocIndex:1},{value:"({\n  type: 'interval',\n  interaction: { elementHighlight: true }, // 采用默认配置\n});\n",paraId:11,tocIndex:1},{value:"第二种，传入 ",paraId:12,tocIndex:1},{value:"配置项",paraId:13,tocIndex:1},{value:" 对交互进行配置。",paraId:12,tocIndex:1},{value:"({\n  type: 'line',\n  interaction: {\n    elementHighlight: {\n      background: true,\n    },\n  },\n});\n",paraId:14,tocIndex:1},{value:"交互可以配置在 Mark 层级：",paraId:15,tocIndex:2},{value:"({\n  type: 'interval',\n  interaction: { elementHighlight: true },\n});\n",paraId:16,tocIndex:2},{value:"也可以配置在 View 层级，视图上声明的交互会传递给 ",paraId:17,tocIndex:2},{value:"children",paraId:17,tocIndex:2},{value:" 声明的标记，如果该标记有声明对应的交互，就合并；否则不影响。",paraId:17,tocIndex:2},{value:"({\n  type: 'view',\n  interaction: { elementHighlight: true },\n});\n",paraId:18,tocIndex:2},{value:"元素高亮交互配置有两处：",paraId:19,tocIndex:3},{value:"交互配置",paraId:20,tocIndex:3},{value:"元素高亮的样式",paraId:20,tocIndex:3},{value:"属性",paraId:21,tocIndex:4},{value:"描述",paraId:21,tocIndex:4},{value:"类型",paraId:21,tocIndex:4},{value:"默认值",paraId:21,tocIndex:4},{value:"background",paraId:21,tocIndex:4},{value:"是否高亮背景",paraId:21,tocIndex:4},{value:"boolean",paraId:21,tocIndex:4},{value:"false",paraId:21,tocIndex:4},{value:"region",paraId:21,tocIndex:4},{value:"鼠标移动到元素空白区域时是否触发高亮(效果见下图)",paraId:21,tocIndex:4},{value:"boolean",paraId:21,tocIndex:4},{value:"false",paraId:21,tocIndex:4},{value:"元素高亮样式，效果见示例",paraId:22,tocIndex:5},{value:"自定义高亮",paraId:23,tocIndex:5},{value:"属性",paraId:24,tocIndex:5},{value:"描述",paraId:24,tocIndex:5},{value:"类型",paraId:24,tocIndex:5},{value:"默认值",paraId:24,tocIndex:5},{value:"必选",paraId:24,tocIndex:5},{value:"offset",paraId:24,tocIndex:5},{value:"主方向上的便偏移量",paraId:24,tocIndex:5},{value:"number",paraId:24,tocIndex:5},{value:"0",paraId:24,tocIndex:5},{value:"backgroundRadius",paraId:24,tocIndex:5},{value:"背景圆角",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"0",paraId:24,tocIndex:5},{value:"backgroundFill",paraId:24,tocIndex:5},{value:"背景填充色",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"transparent",paraId:24,tocIndex:5},{value:"backgroundFillOpacity",paraId:24,tocIndex:5},{value:"背景填充透明度",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundStroke",paraId:24,tocIndex:5},{value:"背景的描边",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundStrokeOpacity",paraId:24,tocIndex:5},{value:"背景描边透明度",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundLineWidth",paraId:24,tocIndex:5},{value:"背景描边的宽度",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundLineDash",paraId:24,tocIndex:5},{value:"背景描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:24,tocIndex:5},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundOpacity",paraId:24,tocIndex:5},{value:"背景的整体透明度",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundShadowColor",paraId:24,tocIndex:5},{value:"背景阴影颜色",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundShadowBlur",paraId:24,tocIndex:5},{value:"背景阴影的高斯模糊系数",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundShadowOffsetX",paraId:24,tocIndex:5},{value:"设置阴影距背景的水平距离",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundShadowOffsetY",paraId:24,tocIndex:5},{value:"设置阴影距背景的垂直距离",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundCursor",paraId:24,tocIndex:5},{value:"背景鼠标样式。同 css 的鼠标样式。",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"default",paraId:24,tocIndex:5},{value:"在 active 元素中配置背景的时候，不是以对象的形式来配置，而是以 ",paraId:25,tocIndex:5},{value:"background",paraId:25,tocIndex:5},{value:"前缀加属性的方式来配置。",paraId:25,tocIndex:5},{value:"({\n  state: {\n    active: {\n      backgroundRadius: 50,\n      backgroundFill: '#000',\n      backgroundFillOpacity: 0.9,\n      backgroundStroke: '#DAF5EC',\n      backgroundStrokeOpacity: 0.9,\n      backgroundLineWidth: 2,\n      backgroundLineDash: [4, 8],\n      backgroundOpacity: 1,\n      backgroundShadowColor: '#d3d3d3',\n      backgroundShadowBlur: 10,\n      backgroundShadowOffsetX: 10,\n      backgroundShadowOffsetY: 10,\n      backgroundCursor: 'pointer',\n    },\n  },\n});\n",paraId:26,tocIndex:5},{value:"支持以下的事件：",paraId:27,tocIndex:7},{value:"element:highlight",paraId:28,tocIndex:7},{value:" - 元素高亮时触发",paraId:28,tocIndex:7},{value:"element:unhighlight",paraId:28,tocIndex:7},{value:" - 元素取消高亮时触发",paraId:28,tocIndex:7},{value:"chart.on('element:highlight', (e) => {\n  console.log(e.data.data);\n  console.log(e.data.group);\n  console.log(e.nativeEvent);\n});\n\nchart.on('element:unhighlight', (e) => {\n  console.log(e.nativeEvent);\n});\n",paraId:29,tocIndex:7},{value:"支持以下的事件：",paraId:30,tocIndex:8},{value:"element:highlight",paraId:31,tocIndex:8},{value:" - 高亮数据",paraId:31,tocIndex:8},{value:"element:unhighlight",paraId:31,tocIndex:8},{value:" - 取消高亮",paraId:31,tocIndex:8},{value:"chart.emit('element:highlight', {\n  data: { data: { population: 5038433 } },\n});\n\nchart.emit('element:unhighlight', {});\n",paraId:32,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency' },\n  transform: [{ type: 'sortX', by: 'y', reverse: true, slice: 5 }],\n  axis: { y: { labelFormatter: '.0%' } },\n  interaction: { elementHighlight: { background: true, region: true } },\n});\n\nchart.render();\n",paraId:33,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency' },\n  transform: [{ type: 'sortX', by: 'y', reverse: true, slice: 5 }],\n  axis: { y: { labelFormatter: '.0%' } },\n  scale: {\n    y: {\n      nice: true,\n    },\n  },\n  state: {\n    active: {\n      offset: 1,\n      backgroundRadius: 8,\n      backgroundFill: (d) => (d.frequency > 0.1 ? '#EF4444' : '#3B82F6'),\n      backgroundFillOpacity: 0.15,\n      backgroundStroke: (d) => (d.frequency > 0.1 ? '#EF4444' : '#3B82F6'),\n      backgroundStrokeOpacity: 0.8,\n      backgroundLineWidth: 2,\n      backgroundShadowColor: (d) => (d.frequency > 0.1 ? '#EF4444' : '#3B82F6'),\n      backgroundShadowBlur: 8,\n      backgroundShadowOffsetX: 0,\n      backgroundShadowOffsetY: 2,\n      backgroundCursor: 'pointer',\n      fill: '#FFFFFF',\n      stroke: (d) => (d.frequency > 0.1 ? '#EF4444' : '#3B82F6'),\n      strokeWidth: 2,\n    },\n  },\n  interaction: {\n    elementHighlight: {\n      background: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:34,tocIndex:11},{value:"Line Mark 的特点",paraId:35,tocIndex:12},{value:"：",paraId:35,tocIndex:12},{value:"每条线对应一个图形元素（Path），包含多个数据点",paraId:36,tocIndex:12},{value:"线的 ",paraId:36,tocIndex:12},{value:"__data__",paraId:36,tocIndex:12},{value:" 包含所有点的聚合数据，其中 x / y 值通常是第一个数据点的坐标",paraId:36,tocIndex:12},{value:"当渲染背景高亮时，",paraId:36,tocIndex:12},{value:"renderBackground",paraId:36,tocIndex:12},{value:" 函数基于第一个数据点的位置计算背景矩形",paraId:36,tocIndex:12},{value:"如果 x 轴是序数比例尺（band scale），背景矩形只覆盖第一个数据点对应的带宽范围",paraId:36,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'line',\n  state: {\n    active: {\n      backgroundFill: 'red',\n    },\n  },\n  interaction: {\n    elementHighlight: {\n      background: true,\n    },\n  },\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: { x: { range: [0, 1] }, y: { domainMin: 0, nice: true } },\n});\n\nchart.render();\n",paraId:37,tocIndex:12},{value:"从上面的示例里我们可以看出，背景高亮只显示在线条的起点位置，看起来效果不完整，对于 Line Mark，推荐使用 ",paraId:38,tocIndex:12},{value:"stroke",paraId:38,tocIndex:12},{value:"、",paraId:38,tocIndex:12},{value:"strokeWidth",paraId:38,tocIndex:12},{value:" 等样式属性进行高亮，但如果想要实现背景高亮也不是没有办法，这需要结合 G2 中的其他标记，例如 ",paraId:38,tocIndex:12},{value:"point",paraId:38,tocIndex:12},{value:"标记。",paraId:38,tocIndex:12},{value:"Point Mark 的特点",paraId:39,tocIndex:12},{value:"：",paraId:39,tocIndex:12},{value:"每个数据点对应一个独立的图形元素（如 Circle）",paraId:40,tocIndex:12},{value:"每个点都有自己独立的 ",paraId:40,tocIndex:12},{value:"__data__",paraId:40,tocIndex:12},{value:"，包含该点的完整坐标信息",paraId:40,tocIndex:12},{value:"背景高亮为每个点单独计算和渲染背景矩形",paraId:40,tocIndex:12},{value:"每个点的背景矩形完整覆盖其对应的带宽范围",paraId:40,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'view',\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: { x: { range: [0, 1] }, y: { domainMin: 0, nice: true } },\n  children: [\n    {\n      type: 'line',\n      interaction: {\n        elementHighlight: false, // 不开启高亮交互\n      },\n    },\n    {\n      type: 'point',\n      style: { fill: 'white', stroke: '#1890ff', strokeWidth: 2 },\n      // Point 使用背景高亮效果更佳\n      state: {\n        active: {\n          backgroundFill: 'red',\n          backgroundFillOpacity: 0.3,\n          fill: 'red',\n          r: 6,\n        },\n      },\n      interaction: {\n        elementHighlight: { background: true, region: true },\n      },\n      tooltip: false, //关闭 point 的tooltip，避免重复显示\n    },\n  ],\n});\n\nchart.render();\n",paraId:41,tocIndex:12}]},48764:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(99e3);const t=[{value:"elementHighlightByColor",paraId:0,tocIndex:0},{value:" 交互的对象是图表元素 element，当鼠标悬浮在元素上时，高亮和鼠标悬浮的元素拥有相同 color 通道值的元素。",paraId:0,tocIndex:0},{value:"触发：鼠标悬浮在元素上。",paraId:1,tocIndex:0},{value:"结束：鼠标移出元素。",paraId:2,tocIndex:0},{value:"影响状态：",paraId:3,tocIndex:0},{value:"悬浮的元素变为 ",paraId:4,tocIndex:0},{value:"active",paraId:4,tocIndex:0},{value:" 状态。",paraId:4,tocIndex:0},{value:"其他元素变为 ",paraId:5,tocIndex:0},{value:"inactive",paraId:5,tocIndex:0},{value:" 状态。",paraId:5,tocIndex:0},{value:"交互内置状态：",paraId:6,tocIndex:0},{value:"({\n  // active 状态下的元素为1px黑色边框\n  state: { active: { lineWidth: '1', stroke: '#000' } },\n});\n",paraId:7,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'stackY' },\n    { type: 'sortX', by: 'y', reverse: true, slice: 5 },\n  ],\n  state: {\n    active: { fill: 'red', linkFillOpacity: 0.5 },\n    inactive: { opacity: 0.5 },\n  },\n  axis: { y: { labelFormatter: '~s' } },\n  interaction: { elementHighlightByColor: { link: true } },\n});\n\nchart.render();\n",paraId:8,tocIndex:0},{value:"配置 ",paraId:9,tocIndex:1},{value:"elementHighlightByColor",paraId:9,tocIndex:1},{value:" 交互有两种方式：",paraId:9,tocIndex:1},{value:"第一种，传入 ",paraId:10,tocIndex:1},{value:"boolean",paraId:10,tocIndex:1},{value:" 设置是否开启交互。",paraId:10,tocIndex:1},{value:"({\n  type: 'interval',\n  interaction: { elementHighlightByColor: true }, // 采用默认配置\n});\n",paraId:11,tocIndex:1},{value:"第二种，传入 ",paraId:12,tocIndex:1},{value:"配置项",paraId:13,tocIndex:1},{value:" 对交互进行配置。",paraId:12,tocIndex:1},{value:"({\n  type: 'line',\n  interaction: {\n    elementHighlightByColor: {\n      background: true,\n    },\n  },\n});\n",paraId:14,tocIndex:1},{value:"交互可以配置在 Mark 层级：",paraId:15,tocIndex:2},{value:"({\n  type: 'interval',\n  interaction: { elementHighlightByColor: true },\n});\n",paraId:16,tocIndex:2},{value:"也可以配置在 View 层级，视图上声明的交互会传递给 ",paraId:17,tocIndex:2},{value:"children",paraId:17,tocIndex:2},{value:" 声明的标记，如果该标记有声明对应的交互，就合并；否则不影响。",paraId:17,tocIndex:2},{value:"({\n  type: 'view',\n  interaction: { elementHighlightByColor: true },\n});\n",paraId:18,tocIndex:2},{value:"元素高亮交互配置有两处：",paraId:19,tocIndex:3},{value:"交互配置",paraId:20,tocIndex:3},{value:"元素高亮的样式",paraId:20,tocIndex:3},{value:"交互配置",paraId:21,tocIndex:3},{value:"属性",paraId:22,tocIndex:3},{value:"描述",paraId:22,tocIndex:3},{value:"类型",paraId:22,tocIndex:3},{value:"默认值",paraId:22,tocIndex:3},{value:"background",paraId:22,tocIndex:3},{value:"是否高亮背景",paraId:22,tocIndex:3},{value:"boolean",paraId:22,tocIndex:3},{value:"false",paraId:22,tocIndex:3},{value:"region",paraId:22,tocIndex:3},{value:"鼠标移动到元素空白区域时是否触发高亮(效果见下图)",paraId:22,tocIndex:3},{value:"boolean",paraId:22,tocIndex:3},{value:"false",paraId:22,tocIndex:3},{value:"link",paraId:22,tocIndex:3},{value:"是否展示连接线",paraId:22,tocIndex:3},{value:"boolean",paraId:22,tocIndex:3},{value:"false",paraId:22,tocIndex:3},{value:"元素高亮样式配置",paraId:23,tocIndex:3},{value:"属性",paraId:24,tocIndex:3},{value:"描述",paraId:24,tocIndex:3},{value:"类型",paraId:24,tocIndex:3},{value:"默认值",paraId:24,tocIndex:3},{value:"offset",paraId:24,tocIndex:3},{value:"主方向上的便偏移量",paraId:24,tocIndex:3},{value:"number",paraId:24,tocIndex:3},{value:"0",paraId:24,tocIndex:3},{value:"background",paraId:24,tocIndex:3},{value:"是否高亮背景",paraId:24,tocIndex:3},{value:"backgroundStyle",paraId:25,tocIndex:3},{value:"详见",paraId:24,tocIndex:3},{value:"backgroundstyle",paraId:26,tocIndex:3},{value:"link",paraId:24,tocIndex:3},{value:"是否展示连接线",paraId:24,tocIndex:3},{value:"linkStyle",paraId:27,tocIndex:3},{value:"详见",paraId:24,tocIndex:3},{value:"linkStyle",paraId:28,tocIndex:3},{value:"元素高亮背景样式详见",paraId:29,tocIndex:4},{value:"自定义高亮",paraId:29,tocIndex:4},{value:"属性",paraId:30,tocIndex:4},{value:"描述",paraId:30,tocIndex:4},{value:"类型",paraId:30,tocIndex:4},{value:"默认值",paraId:30,tocIndex:4},{value:"必选",paraId:30,tocIndex:4},{value:"backgroundRadius",paraId:30,tocIndex:4},{value:"背景圆角",paraId:30,tocIndex:4},{value:"number | (datum, index, data) => number",paraId:30,tocIndex:4},{value:"0",paraId:30,tocIndex:4},{value:"backgroundFill",paraId:30,tocIndex:4},{value:"背景填充色",paraId:30,tocIndex:4},{value:"string | (datum, index, data) => string",paraId:30,tocIndex:4},{value:"transparent",paraId:30,tocIndex:4},{value:"backgroundFillOpacity",paraId:30,tocIndex:4},{value:"背景填充透明度",paraId:30,tocIndex:4},{value:"number | (datum, index, data) => number",paraId:30,tocIndex:4},{value:"-",paraId:30,tocIndex:4},{value:"backgroundStroke",paraId:30,tocIndex:4},{value:"背景的描边",paraId:30,tocIndex:4},{value:"string | (datum, index, data) => string",paraId:30,tocIndex:4},{value:"-",paraId:30,tocIndex:4},{value:"backgroundStrokeOpacity",paraId:30,tocIndex:4},{value:"背景描边透明度",paraId:30,tocIndex:4},{value:"number | (datum, index, data) => number",paraId:30,tocIndex:4},{value:"-",paraId:30,tocIndex:4},{value:"backgroundLineWidth",paraId:30,tocIndex:4},{value:"背景描边的宽度",paraId:30,tocIndex:4},{value:"number | (datum, index, data) => number",paraId:30,tocIndex:4},{value:"-",paraId:30,tocIndex:4},{value:"backgroundLineDash",paraId:30,tocIndex:4},{value:"背景描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:30,tocIndex:4},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:30,tocIndex:4},{value:"-",paraId:30,tocIndex:4},{value:"backgroundOpacity",paraId:30,tocIndex:4},{value:"背景的整体透明度",paraId:30,tocIndex:4},{value:"number | (datum, index, data) => number",paraId:30,tocIndex:4},{value:"-",paraId:30,tocIndex:4},{value:"backgroundShadowColor",paraId:30,tocIndex:4},{value:"背景阴影颜色",paraId:30,tocIndex:4},{value:"string | (datum, index, data) => string",paraId:30,tocIndex:4},{value:"-",paraId:30,tocIndex:4},{value:"backgroundShadowBlur",paraId:30,tocIndex:4},{value:"背景阴影的高斯模糊系数",paraId:30,tocIndex:4},{value:"number | (datum, index, data) => number",paraId:30,tocIndex:4},{value:"-",paraId:30,tocIndex:4},{value:"backgroundShadowOffsetX",paraId:30,tocIndex:4},{value:"设置阴影距背景的水平距离",paraId:30,tocIndex:4},{value:"number | (datum, index, data) => number",paraId:30,tocIndex:4},{value:"-",paraId:30,tocIndex:4},{value:"backgroundShadowOffsetY",paraId:30,tocIndex:4},{value:"设置阴影距背景的垂直距离",paraId:30,tocIndex:4},{value:"number | (datum, index, data) => number",paraId:30,tocIndex:4},{value:"-",paraId:30,tocIndex:4},{value:"backgroundCursor",paraId:30,tocIndex:4},{value:"背景鼠标样式。同 css 的鼠标样式。",paraId:30,tocIndex:4},{value:"string | (datum, index, data) => string",paraId:30,tocIndex:4},{value:"default",paraId:30,tocIndex:4},{value:"({\n  state: {\n    active: {\n      backgroundRadius: 50,\n      backgroundFill: '#000',\n      backgroundFillOpacity: 0.9,\n      backgroundStroke: '#DAF5EC',\n      backgroundStrokeOpacity: 0.9,\n      backgroundLineWidth: 2,\n      backgroundLineDash: [4, 8],\n      backgroundOpacity: 1,\n      backgroundShadowColor: '#d3d3d3',\n      backgroundShadowBlur: 10,\n      backgroundShadowOffsetX: 10,\n      backgroundShadowOffsetY: 10,\n      backgroundCursor: 'pointer',\n    },\n  },\n});\n",paraId:31,tocIndex:4},{value:"连接样式详见示例",paraId:32,tocIndex:5},{value:"连接线",paraId:33,tocIndex:5},{value:"属性",paraId:34,tocIndex:5},{value:"描述",paraId:34,tocIndex:5},{value:"类型",paraId:34,tocIndex:5},{value:"默认值",paraId:34,tocIndex:5},{value:"必选",paraId:34,tocIndex:5},{value:"linkRadius",paraId:34,tocIndex:5},{value:"连接线圆角",paraId:34,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:34,tocIndex:5},{value:"0",paraId:34,tocIndex:5},{value:"linkFill",paraId:34,tocIndex:5},{value:"连接线填充色",paraId:34,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:34,tocIndex:5},{value:"transparent",paraId:34,tocIndex:5},{value:"linkFillOpacity",paraId:34,tocIndex:5},{value:"连接线填充透明度",paraId:34,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:34,tocIndex:5},{value:"-",paraId:34,tocIndex:5},{value:"linkStroke",paraId:34,tocIndex:5},{value:"连接线的描边",paraId:34,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:34,tocIndex:5},{value:"-",paraId:34,tocIndex:5},{value:"linkStrokeOpacity",paraId:34,tocIndex:5},{value:"连接线描边透明度",paraId:34,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:34,tocIndex:5},{value:"-",paraId:34,tocIndex:5},{value:"linkLineWidth",paraId:34,tocIndex:5},{value:"连接线描边的宽度",paraId:34,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:34,tocIndex:5},{value:"-",paraId:34,tocIndex:5},{value:"linkLineDash",paraId:34,tocIndex:5},{value:"连接线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:34,tocIndex:5},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:34,tocIndex:5},{value:"-",paraId:34,tocIndex:5},{value:"linkOpacity",paraId:34,tocIndex:5},{value:"连接线的整体透明度",paraId:34,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:34,tocIndex:5},{value:"-",paraId:34,tocIndex:5},{value:"linkShadowColor",paraId:34,tocIndex:5},{value:"连接线阴影颜色",paraId:34,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:34,tocIndex:5},{value:"-",paraId:34,tocIndex:5},{value:"linkShadowBlur",paraId:34,tocIndex:5},{value:"连接线阴影的高斯模糊系数",paraId:34,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:34,tocIndex:5},{value:"-",paraId:34,tocIndex:5},{value:"linkShadowOffsetX",paraId:34,tocIndex:5},{value:"设置阴影距连接线的水平距离",paraId:34,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:34,tocIndex:5},{value:"-",paraId:34,tocIndex:5},{value:"linkShadowOffsetY",paraId:34,tocIndex:5},{value:"设置阴影距连接线的垂直距离",paraId:34,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:34,tocIndex:5},{value:"-",paraId:34,tocIndex:5},{value:"linkCursor",paraId:34,tocIndex:5},{value:"连接线鼠标样式。同 css 的鼠标样式。",paraId:34,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:34,tocIndex:5},{value:"default",paraId:34,tocIndex:5},{value:"({\n  state: {\n    active: {\n      linkRadius: 50,\n      linkFill: '#000',\n      linkFillOpacity: 0.9,\n      linkStroke: '#DAF5EC',\n      linkStrokeOpacity: 0.9,\n      linkLineWidth: 2,\n      linkLineDash: [4, 8],\n      linkOpacity: 1,\n      linkShadowColor: '#d3d3d3',\n      linkShadowBlur: 10,\n      linkShadowOffsetX: 10,\n      linkShadowOffsetY: 10,\n      linkCursor: 'pointer',\n    },\n  },\n});\n",paraId:35,tocIndex:5},{value:"支持以下的事件：",paraId:36,tocIndex:7},{value:"element:highlight",paraId:37,tocIndex:7},{value:" - 元素高亮时触发",paraId:37,tocIndex:7},{value:"element:unhighlight",paraId:37,tocIndex:7},{value:" - 元素取消高亮时触发",paraId:37,tocIndex:7},{value:"chart.on('element:highlight', (e) => {\n  console.log(e.data.data);\n  console.log(e.data.group);\n  console.log(e.nativeEvent);\n});\n\nchart.on('element:unhighlight', (e) => {\n  console.log(e.nativeEvent);\n});\n",paraId:38,tocIndex:7},{value:"支持以下的事件：",paraId:39,tocIndex:8},{value:"element:highlight",paraId:40,tocIndex:8},{value:" - 高亮数据",paraId:40,tocIndex:8},{value:"element:unhighlight",paraId:40,tocIndex:8},{value:" - 取消高亮",paraId:40,tocIndex:8},{value:"chart.emit('element:highlight', {\n  data: { data: { population: 5038433 } },\n});\n\nchart.emit('element:unhighlight', {});\n",paraId:41,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'stackY' },\n    { type: 'sortX', by: 'y', reverse: true, slice: 5 },\n  ],\n  state: {\n    active: { fill: 'red', linkFillOpacity: 0.5 },\n    inactive: { opacity: 0.5 },\n  },\n  axis: { y: { labelFormatter: '~s' } },\n  interaction: { elementHighlightByColor: true },\n});\n\nchart.render();\n",paraId:42,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'stackY' },\n    { type: 'sortX', by: 'y', reverse: true, slice: 5 },\n  ],\n  state: {\n    active: {\n      fill: 'red',\n      linkRadius: 50,\n      linkFill: 'green',\n      linkFillOpacity: 0.9,\n      linkStroke: '#DAF5EC',\n      linkStrokeOpacity: 0.9,\n      linkLineWidth: 2,\n      linkOpacity: 1,\n      linkCursor: 'pointer',\n    },\n    inactive: { opacity: 0.5 },\n  },\n  axis: { y: { labelFormatter: '~s' } },\n  interaction: {\n    elementHighlightByColor: { link: true, background: true },\n  },\n});\n\nchart.render();\n",paraId:43,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  height: 600,\n  transform: [\n    { type: 'stackY' },\n    { type: 'sortX', by: 'y', reverse: true, slice: 5 },\n  ],\n  coordinate: { transform: [{ type: 'transpose' }] },\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  legend: false,\n  encode: {\n    x: 'state',\n    y: 'population',\n    color: 'age',\n  },\n  axis: {\n    y: { labelFormatter: '~s' },\n  },\n  scale: {\n    x: { paddingInner: 0.2 },\n  },\n  state: {\n    active: {\n      linkFill: (d) => (d.state === 'CA' ? 'red' : undefined),\n      stroke: '#000',\n      lineWidth: 1,\n      linkFillOpacity: 0.5,\n    },\n    inactive: {\n      opacity: 0.6,\n    },\n  },\n  interaction: {\n    elementHighlightByColor: {\n      link: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:44,tocIndex:12}]},28180:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(38496);const t=[{value:"elementHighlightByX",paraId:0,tocIndex:0},{value:" 交互的对象是图表元素 element，当鼠标悬浮在元素上时，高亮和鼠标悬浮的元素拥有相同 x 通道值的元素。",paraId:0,tocIndex:0},{value:"触发：鼠标悬浮在元素上。",paraId:1,tocIndex:0},{value:"结束：鼠标移出元素。",paraId:2,tocIndex:0},{value:"影响状态：",paraId:3,tocIndex:0},{value:"悬浮的元素变为 ",paraId:4,tocIndex:0},{value:"active",paraId:4,tocIndex:0},{value:" 状态。",paraId:4,tocIndex:0},{value:"其他元素变为 ",paraId:5,tocIndex:0},{value:"inactive",paraId:5,tocIndex:0},{value:" 状态。",paraId:5,tocIndex:0},{value:"交互内置状态：",paraId:6,tocIndex:0},{value:"({\n  // active 状态下的元素为1px黑色边框\n  state: { active: { lineWidth: '1', stroke: '#000' } },\n});\n",paraId:7,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  paddingLeft: 50,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'sortX', by: 'y', reverse: true, slice: 6 },\n    { type: 'dodgeX' },\n  ],\n  state: { active: { fill: 'red' }, inactive: { opacity: 0.5 } },\n  axis: { y: { labelFormatter: '~s' } },\n  interaction: { elementHighlightByX: true },\n});\n\nchart.render();\n",paraId:8,tocIndex:1},{value:"配置 ",paraId:9,tocIndex:2},{value:"elementHighlightByX",paraId:9,tocIndex:2},{value:" 交互有两种方式：",paraId:9,tocIndex:2},{value:"第一种，传入 ",paraId:10,tocIndex:2},{value:"boolean",paraId:10,tocIndex:2},{value:" 设置是否开启交互。",paraId:10,tocIndex:2},{value:"({\n  type: 'interval',\n  interaction: { elementHighlightByX: true }, // 采用默认配置\n});\n",paraId:11,tocIndex:2},{value:"第二种，传入 ",paraId:12,tocIndex:2},{value:"配置项",paraId:13,tocIndex:2},{value:" 对交互进行配置。",paraId:12,tocIndex:2},{value:"({\n  type: 'line',\n  interaction: {\n    elementHighlightByX: {\n      background: true,\n    },\n  },\n});\n",paraId:14,tocIndex:2},{value:"交互可以配置在 Mark 层级：",paraId:15,tocIndex:3},{value:"({\n  type: 'interval',\n  interaction: { elementHighlightByX: true },\n});\n",paraId:16,tocIndex:3},{value:"也可以配置在 View 层级，视图上声明的交互会传递给 ",paraId:17,tocIndex:3},{value:"children",paraId:17,tocIndex:3},{value:" 声明的标记，如果该标记有声明对应的交互，就合并；否则不影响。",paraId:17,tocIndex:3},{value:"({\n  type: 'view',\n  interaction: { elementHighlightByX: true },\n});\n",paraId:18,tocIndex:3},{value:"交互配置",paraId:19,tocIndex:4},{value:"属性",paraId:20,tocIndex:4},{value:"描述",paraId:20,tocIndex:4},{value:"类型",paraId:20,tocIndex:4},{value:"默认值",paraId:20,tocIndex:4},{value:"background",paraId:20,tocIndex:4},{value:"是否高亮背景",paraId:20,tocIndex:4},{value:"boolean",paraId:20,tocIndex:4},{value:"false",paraId:20,tocIndex:4},{value:"region",paraId:20,tocIndex:4},{value:"鼠标移动到元素空白区域时是否触发高亮(效果见下图)",paraId:20,tocIndex:4},{value:"boolean",paraId:20,tocIndex:4},{value:"false",paraId:20,tocIndex:4},{value:"元素高亮样式配置",paraId:21,tocIndex:4},{value:"属性",paraId:22,tocIndex:4},{value:"描述",paraId:22,tocIndex:4},{value:"类型",paraId:22,tocIndex:4},{value:"默认值",paraId:22,tocIndex:4},{value:"offset",paraId:22,tocIndex:4},{value:"主方向上的便偏移量",paraId:22,tocIndex:4},{value:"number",paraId:22,tocIndex:4},{value:"0",paraId:22,tocIndex:4},{value:"background",paraId:22,tocIndex:4},{value:"是否高亮背景",paraId:22,tocIndex:4},{value:"backgroundStyle",paraId:22,tocIndex:4},{value:"详见",paraId:22,tocIndex:4},{value:"backgroundStyle",paraId:22,tocIndex:4},{value:"支持以下的事件：",paraId:23,tocIndex:6},{value:"element:highlight",paraId:24,tocIndex:6},{value:" - 元素高亮时触发",paraId:24,tocIndex:6},{value:"element:unhighlight",paraId:24,tocIndex:6},{value:" - 元素取消高亮时触发",paraId:24,tocIndex:6},{value:"chart.on('element:highlight', (e) => {\n  console.log(e.data.data);\n  console.log(e.data.group);\n  console.log(e.nativeEvent);\n});\n\nchart.on('element:unhighlight', (e) => {\n  console.log(e.nativeEvent);\n});\n",paraId:25,tocIndex:6},{value:"支持以下的事件：",paraId:26,tocIndex:7},{value:"element:highlight",paraId:27,tocIndex:7},{value:" - 高亮数据",paraId:27,tocIndex:7},{value:"element:unhighlight",paraId:27,tocIndex:7},{value:" - 取消高亮",paraId:27,tocIndex:7},{value:"chart.emit('element:highlight', {\n  data: { data: { population: 5038433 } },\n});\n\nchart.emit('element:unhighlight', {});\n",paraId:28,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  paddingLeft: 50,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'sortX', by: 'y', reverse: true, slice: 6 },\n    { type: 'dodgeX' },\n  ],\n  axis: { y: { labelFormatter: '~s' } },\n  interaction: { elementHighlightByX: true },\n});\n\nchart.render();\n",paraId:29,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'stackY' },\n    { type: 'sortX', by: 'y', reverse: true, slice: 5 },\n  ],\n  state: {\n    active: { fill: 'red', linkFillOpacity: 0.5 },\n    inactive: { opacity: 0.5 },\n  },\n  axis: { y: { labelFormatter: '~s' } },\n  interaction: { elementHighlightByX: true },\n});\n\nchart.render();\n",paraId:30,tocIndex:10}]},56731:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(96347);const t=[{value:"elementSelect",paraId:0,tocIndex:0},{value:" 交互的对象是图表元素 element，当点击元素时，将该元素选中。",paraId:0,tocIndex:0},{value:"触发：点击元素。",paraId:1,tocIndex:0},{value:"结束：再次点击选中的元素。",paraId:2,tocIndex:0},{value:"影响状态：",paraId:3,tocIndex:0},{value:"选中的元素变为 ",paraId:4,tocIndex:0},{value:"selected",paraId:4,tocIndex:0},{value:" 状态。",paraId:4,tocIndex:0},{value:"其他元素变为 ",paraId:5,tocIndex:0},{value:"unselected",paraId:5,tocIndex:0},{value:" 状态。",paraId:5,tocIndex:0},{value:"交互内置状态：",paraId:6,tocIndex:0},{value:"({\n  // selected 状态下的元素为1px黑色边框\n  state: { selected: { lineWidth: '1', stroke: '#000' } },\n});\n",paraId:7,tocIndex:0},{value:"交互支持两种模式：",paraId:8,tocIndex:0},{value:"多选模式（默认）：可以同时选中多个元素",paraId:9,tocIndex:0},{value:"单选模式：通过设置 ",paraId:9,tocIndex:0},{value:"single: true",paraId:9,tocIndex:0},{value:" 启用，每次只能选中一个元素",paraId:9,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency' },\n  state: { selected: { fill: 'orange' }, unselected: { opacity: 0.5 } },\n  axis: { y: { labelFormatter: '.0%' } },\n  interaction: { elementSelect: true },\n});\n\nchart.render();\n",paraId:10,tocIndex:0},{value:"配置 ",paraId:11,tocIndex:1},{value:"elementSelect",paraId:11,tocIndex:1},{value:" 交互有两种方式：",paraId:11,tocIndex:1},{value:"第一种，传入 ",paraId:12,tocIndex:1},{value:"boolean",paraId:12,tocIndex:1},{value:" 设置是否开启交互。",paraId:12,tocIndex:1},{value:"({\n  type: 'interval',\n  interaction: { elementSelect: true }, // 采用默认配置\n});\n",paraId:13,tocIndex:1},{value:"第二种，传入 ",paraId:14,tocIndex:1},{value:"配置项",paraId:15,tocIndex:1},{value:" 对交互进行配置。",paraId:14,tocIndex:1},{value:"({\n  type: 'line',\n  interaction: {\n    elementSelect: {\n      background: true,\n      single: true, // 设置为单选模式\n    },\n  },\n});\n",paraId:16,tocIndex:1},{value:"交互可以配置在 Mark 层级：",paraId:17,tocIndex:2},{value:"({\n  type: 'interval',\n  interaction: { elementSelect: true },\n});\n",paraId:18,tocIndex:2},{value:"也可以配置在 View 层级，视图上声明的交互会传递给 ",paraId:19,tocIndex:2},{value:"children",paraId:19,tocIndex:2},{value:" 声明的标记，如果该标记有声明对应的交互，就合并；否则不影响。",paraId:19,tocIndex:2},{value:"({\n  type: 'view',\n  interaction: { elementSelect: true },\n});\n",paraId:20,tocIndex:2},{value:"元素选择交互配置有两处：",paraId:21,tocIndex:3},{value:"交互配置",paraId:22,tocIndex:3},{value:"元素选中的样式",paraId:22,tocIndex:3},{value:"属性",paraId:23,tocIndex:4},{value:"描述",paraId:23,tocIndex:4},{value:"类型",paraId:23,tocIndex:4},{value:"默认值",paraId:23,tocIndex:4},{value:"background",paraId:23,tocIndex:4},{value:"是否高亮背景",paraId:23,tocIndex:4},{value:"boolean",paraId:23,tocIndex:4},{value:"false",paraId:23,tocIndex:4},{value:"region",paraId:23,tocIndex:4},{value:"点击空白区域是否触发选择",paraId:23,tocIndex:4},{value:"boolean",paraId:23,tocIndex:4},{value:"false",paraId:23,tocIndex:4},{value:"single",paraId:23,tocIndex:4},{value:"是否单选，设置为 true 时每次只能选中一个元素，再次点击已选中的元素会取消选中状态",paraId:23,tocIndex:4},{value:"boolean",paraId:23,tocIndex:4},{value:"false",paraId:23,tocIndex:4},{value:"multipleSelectHotkey",paraId:23,tocIndex:4},{value:"多选热键的 code，按住热键后变为多选，设置此属性后",paraId:23,tocIndex:4},{value:"single",paraId:23,tocIndex:4},{value:"无效。不设置时默认为多选模式",paraId:23,tocIndex:4},{value:"string",paraId:23,tocIndex:4},{value:" | ",paraId:23,tocIndex:4},{value:"string[]",paraId:23,tocIndex:4},{value:"-",paraId:23,tocIndex:4},{value:"元素选中样式，效果见示例",paraId:24,tocIndex:5},{value:"自定义选中",paraId:25,tocIndex:5},{value:"属性",paraId:26,tocIndex:5},{value:"描述",paraId:26,tocIndex:5},{value:"类型",paraId:26,tocIndex:5},{value:"默认值",paraId:26,tocIndex:5},{value:"必选",paraId:26,tocIndex:5},{value:"offset",paraId:26,tocIndex:5},{value:"主方向上的便偏移量",paraId:26,tocIndex:5},{value:"number",paraId:26,tocIndex:5},{value:"0",paraId:26,tocIndex:5},{value:"radius",paraId:26,tocIndex:5},{value:"元素圆角",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"0",paraId:26,tocIndex:5},{value:"fill",paraId:26,tocIndex:5},{value:"元素填充色",paraId:26,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"fillOpacity",paraId:26,tocIndex:5},{value:"元素填充透明度",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"stroke",paraId:26,tocIndex:5},{value:"元素的描边",paraId:26,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"strokeOpacity",paraId:26,tocIndex:5},{value:"元素描边透明度",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"lineWidth",paraId:26,tocIndex:5},{value:"元素描边的宽度",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"lineDash",paraId:26,tocIndex:5},{value:"元素描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:26,tocIndex:5},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"opacity",paraId:26,tocIndex:5},{value:"元素的整体透明度",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"shadowColor",paraId:26,tocIndex:5},{value:"元素阴影颜色",paraId:26,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"shadowBlur",paraId:26,tocIndex:5},{value:"元素阴影的高斯模糊系数",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"shadowOffsetX",paraId:26,tocIndex:5},{value:"设置阴影距元素的水平距离",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"shadowOffsetY",paraId:26,tocIndex:5},{value:"设置阴影距元素的垂直距离",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"cursor",paraId:26,tocIndex:5},{value:"元素鼠标样式。同 css 的鼠标样式。",paraId:26,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:26,tocIndex:5},{value:"default",paraId:26,tocIndex:5},{value:"backgroundRadius",paraId:26,tocIndex:5},{value:"背景圆角",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"0",paraId:26,tocIndex:5},{value:"backgroundFill",paraId:26,tocIndex:5},{value:"背景填充色",paraId:26,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:26,tocIndex:5},{value:"transparent",paraId:26,tocIndex:5},{value:"backgroundFillOpacity",paraId:26,tocIndex:5},{value:"背景填充透明度",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"backgroundStroke",paraId:26,tocIndex:5},{value:"背景的描边",paraId:26,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"backgroundStrokeOpacity",paraId:26,tocIndex:5},{value:"背景描边透明度",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"backgroundLineWidth",paraId:26,tocIndex:5},{value:"背景描边的宽度",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"backgroundLineDash",paraId:26,tocIndex:5},{value:"背景描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:26,tocIndex:5},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"backgroundOpacity",paraId:26,tocIndex:5},{value:"背景的整体透明度",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"backgroundShadowColor",paraId:26,tocIndex:5},{value:"背景阴影颜色",paraId:26,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"backgroundShadowBlur",paraId:26,tocIndex:5},{value:"背景阴影的高斯模糊系数",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"backgroundShadowOffsetX",paraId:26,tocIndex:5},{value:"设置阴影距背景的水平距离",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"backgroundShadowOffsetY",paraId:26,tocIndex:5},{value:"设置阴影距背景的垂直距离",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"backgroundCursor",paraId:26,tocIndex:5},{value:"背景鼠标样式。同 css 的鼠标样式。",paraId:26,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:26,tocIndex:5},{value:"default",paraId:26,tocIndex:5},{value:"在 selected 元素中配置背景的时候，不是以对象的形式来配置，而是以 ",paraId:27,tocIndex:5},{value:"background",paraId:27,tocIndex:5},{value:"前缀加属性的方式来配置。",paraId:27,tocIndex:5},{value:"({\n  state: {\n    selected: {\n      offset: 10,\n      radius: 50,\n      fill: '#1890FF',\n      fillOpacity: 0.9,\n      stroke: '#40A9FF',\n      strokeOpacity: 0.9,\n      lineWidth: 2,\n      lineDash: [4, 8],\n      opacity: 1,\n      shadowColor: '#1890FF',\n      shadowBlur: 10,\n      shadowOffsetX: 5,\n      shadowOffsetY: 5,\n      cursor: 'pointer',\n      backgroundRadius: 50,\n      backgroundFill: '#E6F7FF',\n      backgroundFillOpacity: 0.9,\n      backgroundStroke: '#91D5FF',\n      backgroundStrokeOpacity: 0.9,\n      backgroundLineWidth: 2,\n      backgroundLineDash: [4, 8],\n      backgroundOpacity: 1,\n      backgroundShadowColor: '#91D5FF',\n      backgroundShadowBlur: 10,\n      backgroundShadowOffsetX: 5,\n      backgroundShadowOffsetY: 5,\n      backgroundCursor: 'pointer',\n    },\n  },\n});\n",paraId:28,tocIndex:5},{value:"支持以下的事件：",paraId:29,tocIndex:7},{value:"element:select",paraId:30,tocIndex:7},{value:" - 元素选中时触发",paraId:30,tocIndex:7},{value:"element:unselect",paraId:30,tocIndex:7},{value:" - 元素取消选中时触发",paraId:30,tocIndex:7},{value:"chart.on('element:select', (e) => {\n  console.log(e.data.data);\n  console.log(e.nativeEvent);\n});\n\nchart.on('element:unselect', (e) => {\n  console.log(e.nativeEvent);\n});\n",paraId:31,tocIndex:7},{value:"支持以下的事件：",paraId:32,tocIndex:8},{value:"element:select",paraId:33,tocIndex:8},{value:" - 选中数据",paraId:33,tocIndex:8},{value:"element:unselect",paraId:33,tocIndex:8},{value:" - 取消选中",paraId:33,tocIndex:8},{value:"chart.emit('element:select', {\n  data: { data: [{ population: 5038433 }, { population: 3983091 }] },\n});\n\nchart.emit('element:unselect', {});\n",paraId:34,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency' },\n  transform: [{ type: 'sortX', by: 'y', reverse: true, slice: 5 }],\n  axis: { y: { labelFormatter: '.0%' } },\n  interaction: { elementSelect: { background: true } },\n});\n\nchart.render();\n",paraId:35,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency' },\n  transform: [{ type: 'sortX', by: 'y', reverse: true, slice: 5 }],\n  axis: { y: { labelFormatter: '.0%' } },\n  state: {\n    selected: {\n      offset: 10,\n      radius: 50,\n      fill: (d) => (d.frequency > 0.1 ? '#F5222D' : '#1890FF'),\n      fillOpacity: 0.9,\n      stroke: (d) => (d.frequency > 0.1 ? '#FF4D4F' : '#40A9FF'),\n      strokeOpacity: 0.9,\n      lineWidth: 2,\n      lineDash: [4, 8],\n      opacity: 1,\n      shadowColor: (d) => (d.frequency > 0.1 ? '#F5222D' : '#1890FF'),\n      shadowBlur: 10,\n      shadowOffsetX: 5,\n      shadowOffsetY: 5,\n      cursor: 'pointer',\n      backgroundRadius: 50,\n      backgroundFill: (d) => (d.frequency > 0.1 ? '#FFF1F0' : '#E6F7FF'),\n      backgroundFillOpacity: 0.9,\n      backgroundStroke: (d) => (d.frequency > 0.1 ? '#FFA39E' : '#91D5FF'),\n      backgroundStrokeOpacity: 0.9,\n      backgroundLineWidth: 2,\n      backgroundLineDash: [4, 8],\n      backgroundOpacity: 1,\n      backgroundShadowColor: (d) => (d.frequency > 0.1 ? '#FFA39E' : '#91D5FF'),\n      backgroundShadowBlur: 10,\n      backgroundShadowOffsetX: 5,\n      backgroundShadowOffsetY: 5,\n      backgroundCursor: 'pointer',\n    },\n  },\n  interaction: {\n    elementSelect: {\n      background: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:36,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency' },\n  transform: [{ type: 'sortX', by: 'y', reverse: true, slice: 5 }],\n  axis: { y: { labelFormatter: '.0%' } },\n  interaction: {\n    elementSelect: {\n      single: true, // 设置为单选模式\n      background: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:37,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency' },\n  transform: [{ type: 'sortX', by: 'y', reverse: true, slice: 5 }],\n  axis: { y: { labelFormatter: '.0%' } },\n  interaction: {\n    elementSelect: {\n      multipleSelectHotkey: 'ShiftLeft', // 按住左 Shift 键进入多选模式\n      background: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:38,tocIndex:13}]},38335:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(59999);const t=[{value:"elementSelectByColor",paraId:0,tocIndex:0},{value:" 交互的对象是图表元素 element，当点击元素时，选中所有具有相同 color 通道值的元素。",paraId:0,tocIndex:0},{value:"触发：点击元素。",paraId:1,tocIndex:0},{value:"结束：再次点击选中的元素。",paraId:2,tocIndex:0},{value:"影响状态：",paraId:3,tocIndex:0},{value:"选中的元素变为 ",paraId:4,tocIndex:0},{value:"selected",paraId:4,tocIndex:0},{value:" 状态。",paraId:4,tocIndex:0},{value:"其他元素变为 ",paraId:5,tocIndex:0},{value:"unselected",paraId:5,tocIndex:0},{value:" 状态。",paraId:5,tocIndex:0},{value:"交互内置状态：",paraId:6,tocIndex:0},{value:"({\n  // selected 状态下的元素为1px黑色边框\n  state: { selected: { lineWidth: '1', stroke: '#000' } },\n});\n",paraId:7,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  transform: [\n    { type: 'stackY' },\n    { type: 'sortX', by: 'y', reverse: true, slice: 5 },\n  ],\n  encode: {\n    x: 'state',\n    y: 'population',\n    color: 'age',\n  },\n  axis: { y: { labelFormatter: '~s' } },\n  state: {\n    selected: { fill: 'red', linkFillOpacity: 0.5 },\n    unselected: { opacity: 0.5 },\n  },\n  interaction: {\n    elementSelectByColor: {\n      link: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:8,tocIndex:0},{value:"配置 ",paraId:9,tocIndex:1},{value:"elementSelectByColor",paraId:9,tocIndex:1},{value:" 交互有两种方式：",paraId:9,tocIndex:1},{value:"第一种，传入 ",paraId:10,tocIndex:1},{value:"boolean",paraId:10,tocIndex:1},{value:" 设置是否开启交互。",paraId:10,tocIndex:1},{value:"({\n  type: 'interval',\n  interaction: { elementSelectByColor: true }, // 采用默认配置\n});\n",paraId:11,tocIndex:1},{value:"第二种，传入 ",paraId:12,tocIndex:1},{value:"配置项",paraId:13,tocIndex:1},{value:" 对交互进行配置。",paraId:12,tocIndex:1},{value:"({\n  type: 'interval',\n  interaction: {\n    elementSelectByColor: {\n      link: true,\n      background: true,\n    },\n  },\n});\n",paraId:14,tocIndex:1},{value:"交互可以配置在 Mark 层级：",paraId:15,tocIndex:2},{value:"({\n  type: 'interval',\n  interaction: { elementSelectByColor: true },\n});\n",paraId:16,tocIndex:2},{value:"也可以配置在 View 层级，视图上声明的交互会传递给 ",paraId:17,tocIndex:2},{value:"children",paraId:17,tocIndex:2},{value:" 声明的标记，如果该标记有声明对应的交互，就合并；否则不影响。",paraId:17,tocIndex:2},{value:"({\n  type: 'view',\n  interaction: { elementSelectByColor: true },\n});\n",paraId:18,tocIndex:2},{value:"元素选择交互配置有两处：",paraId:19,tocIndex:3},{value:"交互配置",paraId:20,tocIndex:3},{value:"元素选中的样式",paraId:20,tocIndex:3},{value:"属性",paraId:21,tocIndex:4},{value:"描述",paraId:21,tocIndex:4},{value:"类型",paraId:21,tocIndex:4},{value:"默认值",paraId:21,tocIndex:4},{value:"background",paraId:21,tocIndex:4},{value:"是否高亮背景",paraId:21,tocIndex:4},{value:"boolean",paraId:21,tocIndex:4},{value:"false",paraId:21,tocIndex:4},{value:"region",paraId:21,tocIndex:4},{value:"点击空白区域是否触发选择",paraId:21,tocIndex:4},{value:"boolean",paraId:21,tocIndex:4},{value:"false",paraId:21,tocIndex:4},{value:"single",paraId:21,tocIndex:4},{value:"是否单选，设置为 true 时每次只能选中一个颜色组",paraId:21,tocIndex:4},{value:"boolean",paraId:21,tocIndex:4},{value:"false",paraId:21,tocIndex:4},{value:"multipleSelectHotkey",paraId:21,tocIndex:4},{value:"多选热键的 code，按住热键后变为多选，设置此属性后",paraId:21,tocIndex:4},{value:"single",paraId:21,tocIndex:4},{value:"无效。不设置时默认为多选模式",paraId:21,tocIndex:4},{value:"string",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"string[]",paraId:21,tocIndex:4},{value:"-",paraId:21,tocIndex:4},{value:"link",paraId:21,tocIndex:4},{value:"是否展示连接线",paraId:21,tocIndex:4},{value:"boolean",paraId:21,tocIndex:4},{value:"false",paraId:21,tocIndex:4},{value:"元素选中样式，效果见示例",paraId:22,tocIndex:5},{value:"自定义选中",paraId:23,tocIndex:5},{value:"属性",paraId:24,tocIndex:5},{value:"描述",paraId:24,tocIndex:5},{value:"类型",paraId:24,tocIndex:5},{value:"默认值",paraId:24,tocIndex:5},{value:"必选",paraId:24,tocIndex:5},{value:"offset",paraId:24,tocIndex:5},{value:"主方向上的便偏移量",paraId:24,tocIndex:5},{value:"number",paraId:24,tocIndex:5},{value:"0",paraId:24,tocIndex:5},{value:"radius",paraId:24,tocIndex:5},{value:"元素圆角",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"0",paraId:24,tocIndex:5},{value:"fill",paraId:24,tocIndex:5},{value:"元素填充色",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"fillOpacity",paraId:24,tocIndex:5},{value:"元素填充透明度",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"stroke",paraId:24,tocIndex:5},{value:"元素的描边",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"strokeOpacity",paraId:24,tocIndex:5},{value:"元素描边透明度",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"lineWidth",paraId:24,tocIndex:5},{value:"元素描边的宽度",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"lineDash",paraId:24,tocIndex:5},{value:"元素描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:24,tocIndex:5},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"opacity",paraId:24,tocIndex:5},{value:"元素的整体透明度",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"shadowColor",paraId:24,tocIndex:5},{value:"元素阴影颜色",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"shadowBlur",paraId:24,tocIndex:5},{value:"元素阴影的高斯模糊系数",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"shadowOffsetX",paraId:24,tocIndex:5},{value:"设置阴影距元素的水平距离",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"shadowOffsetY",paraId:24,tocIndex:5},{value:"设置阴影距元素的垂直距离",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"cursor",paraId:24,tocIndex:5},{value:"元素鼠标样式。同 css 的鼠标样式。",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"default",paraId:24,tocIndex:5},{value:"backgroundRadius",paraId:24,tocIndex:5},{value:"背景圆角",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"0",paraId:24,tocIndex:5},{value:"backgroundFill",paraId:24,tocIndex:5},{value:"背景填充色",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"transparent",paraId:24,tocIndex:5},{value:"backgroundFillOpacity",paraId:24,tocIndex:5},{value:"背景填充透明度",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundStroke",paraId:24,tocIndex:5},{value:"背景的描边",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundStrokeOpacity",paraId:24,tocIndex:5},{value:"背景描边透明度",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundLineWidth",paraId:24,tocIndex:5},{value:"背景描边的宽度",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundLineDash",paraId:24,tocIndex:5},{value:"背景描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:24,tocIndex:5},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundOpacity",paraId:24,tocIndex:5},{value:"背景的整体透明度",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundShadowColor",paraId:24,tocIndex:5},{value:"背景阴影颜色",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundShadowBlur",paraId:24,tocIndex:5},{value:"背景阴影的高斯模糊系数",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundShadowOffsetX",paraId:24,tocIndex:5},{value:"设置阴影距背景的水平距离",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundShadowOffsetY",paraId:24,tocIndex:5},{value:"设置阴影距背景的垂直距离",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundCursor",paraId:24,tocIndex:5},{value:"背景鼠标样式。同 css 的鼠标样式。",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"default",paraId:24,tocIndex:5},{value:"连接样式详见示例",paraId:25,tocIndex:6},{value:"带连接线选择",paraId:26,tocIndex:6},{value:"属性",paraId:27,tocIndex:6},{value:"描述",paraId:27,tocIndex:6},{value:"类型",paraId:27,tocIndex:6},{value:"默认值",paraId:27,tocIndex:6},{value:"必选",paraId:27,tocIndex:6},{value:"linkRadius",paraId:27,tocIndex:6},{value:"连接线圆角",paraId:27,tocIndex:6},{value:"number | (datum, index, data) => number",paraId:27,tocIndex:6},{value:"0",paraId:27,tocIndex:6},{value:"linkFill",paraId:27,tocIndex:6},{value:"连接线填充色",paraId:27,tocIndex:6},{value:"string | (datum, index, data) => string",paraId:27,tocIndex:6},{value:"transparent",paraId:27,tocIndex:6},{value:"linkFillOpacity",paraId:27,tocIndex:6},{value:"连接线填充透明度",paraId:27,tocIndex:6},{value:"number | (datum, index, data) => number",paraId:27,tocIndex:6},{value:"-",paraId:27,tocIndex:6},{value:"linkStroke",paraId:27,tocIndex:6},{value:"连接线的描边",paraId:27,tocIndex:6},{value:"string | (datum, index, data) => string",paraId:27,tocIndex:6},{value:"-",paraId:27,tocIndex:6},{value:"linkStrokeOpacity",paraId:27,tocIndex:6},{value:"连接线描边透明度",paraId:27,tocIndex:6},{value:"number | (datum, index, data) => number",paraId:27,tocIndex:6},{value:"-",paraId:27,tocIndex:6},{value:"linkLineWidth",paraId:27,tocIndex:6},{value:"连接线描边的宽度",paraId:27,tocIndex:6},{value:"number | (datum, index, data) => number",paraId:27,tocIndex:6},{value:"-",paraId:27,tocIndex:6},{value:"linkLineDash",paraId:27,tocIndex:6},{value:"连接线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:27,tocIndex:6},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:27,tocIndex:6},{value:"-",paraId:27,tocIndex:6},{value:"linkOpacity",paraId:27,tocIndex:6},{value:"连接线的整体透明度",paraId:27,tocIndex:6},{value:"number | (datum, index, data) => number",paraId:27,tocIndex:6},{value:"-",paraId:27,tocIndex:6},{value:"linkShadowColor",paraId:27,tocIndex:6},{value:"连接线阴影颜色",paraId:27,tocIndex:6},{value:"string | (datum, index, data) => string",paraId:27,tocIndex:6},{value:"-",paraId:27,tocIndex:6},{value:"linkShadowBlur",paraId:27,tocIndex:6},{value:"连接线阴影的高斯模糊系数",paraId:27,tocIndex:6},{value:"number | (datum, index, data) => number",paraId:27,tocIndex:6},{value:"-",paraId:27,tocIndex:6},{value:"linkShadowOffsetX",paraId:27,tocIndex:6},{value:"设置阴影距连接线的水平距离",paraId:27,tocIndex:6},{value:"number | (datum, index, data) => number",paraId:27,tocIndex:6},{value:"-",paraId:27,tocIndex:6},{value:"linkShadowOffsetY",paraId:27,tocIndex:6},{value:"设置阴影距连接线的垂直距离",paraId:27,tocIndex:6},{value:"number | (datum, index, data) => number",paraId:27,tocIndex:6},{value:"-",paraId:27,tocIndex:6},{value:"linkCursor",paraId:27,tocIndex:6},{value:"连接线鼠标样式。同 css 的鼠标样式。",paraId:27,tocIndex:6},{value:"string | (datum, index, data) => string",paraId:27,tocIndex:6},{value:"default",paraId:27,tocIndex:6},{value:"({\n  state: {\n    selected: {\n      linkRadius: 50,\n      linkFill: '#000',\n      linkFillOpacity: 0.9,\n      linkStroke: '#DAF5EC',\n      linkStrokeOpacity: 0.9,\n      linkLineWidth: 2,\n      linkLineDash: [4, 8],\n      linkOpacity: 1,\n      linkShadowColor: '#d3d3d3',\n      linkShadowBlur: 10,\n      linkShadowOffsetX: 10,\n      linkShadowOffsetY: 10,\n      linkCursor: 'pointer',\n    },\n  },\n});\n",paraId:28,tocIndex:6},{value:"支持以下的事件：",paraId:29,tocIndex:8},{value:"element:select",paraId:30,tocIndex:8},{value:" - 元素选中时触发",paraId:30,tocIndex:8},{value:"element:unselect",paraId:30,tocIndex:8},{value:" - 元素取消选中时触发",paraId:30,tocIndex:8},{value:"chart.on('element:select', (e) => {\n  console.log(e.data.data);\n  console.log(e.nativeEvent);\n});\n\nchart.on('element:unselect', (e) => {\n  console.log(e.nativeEvent);\n});\n",paraId:31,tocIndex:8},{value:"支持以下的事件：",paraId:32,tocIndex:9},{value:"element:select",paraId:33,tocIndex:9},{value:" - 选中数据",paraId:33,tocIndex:9},{value:"element:unselect",paraId:33,tocIndex:9},{value:" - 取消选中",paraId:33,tocIndex:9},{value:"chart.emit('element:select', {\n  data: { data: [{ population: 5038433 }, { population: 3983091 }] },\n});\n\nchart.emit('element:unselect', {});\n",paraId:34,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  transform: [\n    { type: 'stackY' },\n    { type: 'sortX', by: 'y', reverse: true, slice: 5 },\n  ],\n  encode: {\n    x: 'state',\n    y: 'population',\n    color: 'age',\n  },\n  axis: { y: { labelFormatter: '~s' } },\n  interaction: { elementSelectByColor: true },\n});\n\nchart.render();\n",paraId:35,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  transform: [\n    { type: 'stackY' },\n    { type: 'sortX', by: 'y', reverse: true, slice: 5 },\n  ],\n  encode: {\n    x: 'state',\n    y: 'population',\n    color: 'age',\n  },\n  axis: { y: { labelFormatter: '~s' } },\n  state: {\n    selected: {\n      offset: 10,\n      radius: 50,\n      fill: (d) => (d.population > 1000000 ? 'red' : '#000'),\n      fillOpacity: 0.9,\n      stroke: '#DAF5EC',\n      strokeOpacity: 0.9,\n      lineWidth: 2,\n      lineDash: [4, 8],\n      opacity: 1,\n      shadowColor: '#d3d3d3',\n      shadowBlur: 10,\n      shadowOffsetX: 10,\n      shadowOffsetY: 10,\n      cursor: 'pointer',\n      backgroundRadius: 50,\n      backgroundFill: (d) => (d.population > 1000000 ? 'red' : '#000'),\n      backgroundFillOpacity: 0.9,\n      backgroundStroke: '#DAF5EC',\n      backgroundStrokeOpacity: 0.9,\n      backgroundLineWidth: 2,\n      backgroundLineDash: [4, 8],\n      backgroundOpacity: 1,\n      backgroundShadowColor: '#d3d3d3',\n      backgroundShadowBlur: 10,\n      backgroundShadowOffsetX: 10,\n      backgroundShadowOffsetY: 10,\n      backgroundCursor: 'pointer',\n      linkFillOpacity: 0.5,\n    },\n  },\n  interaction: {\n    elementSelectByColor: {\n      background: true,\n      link: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:36,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  transform: [\n    { type: 'stackY' },\n    { type: 'sortX', by: 'y', reverse: true, slice: 5 },\n  ],\n  encode: {\n    x: 'state',\n    y: 'population',\n    color: 'age',\n  },\n  axis: { y: { labelFormatter: '~s' } },\n  interaction: {\n    elementSelectByColor: {\n      single: true, // 设置为单选模式\n      background: true,\n      link: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:37,tocIndex:13},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  transform: [\n    { type: 'stackY' },\n    { type: 'sortX', by: 'y', reverse: true, slice: 5 },\n  ],\n  encode: {\n    x: 'state',\n    y: 'population',\n    color: 'age',\n  },\n  axis: { y: { labelFormatter: '~s' } },\n  state: {\n    selected: { fill: 'red', linkFillOpacity: 0.5 },\n    unselected: { opacity: 0.5 },\n  },\n  interaction: {\n    elementSelectByColor: {\n      multipleSelectHotkey: 'ShiftLeft', // 按住左 Shift 键进入多选模式\n      link: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:38,tocIndex:14}]},8116:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(38836);const t=[{value:"elementSelectByX",paraId:0,tocIndex:0},{value:" 交互的对象是图表元素 element，当点击元素时，选中所有具有相同 x 通道值的元素。",paraId:0,tocIndex:0},{value:"触发：点击元素。",paraId:1,tocIndex:0},{value:"结束：再次点击选中的元素。",paraId:2,tocIndex:0},{value:"影响状态：",paraId:3,tocIndex:0},{value:"选中的元素变为 ",paraId:4,tocIndex:0},{value:"selected",paraId:4,tocIndex:0},{value:" 状态。",paraId:4,tocIndex:0},{value:"其他元素变为 ",paraId:5,tocIndex:0},{value:"unselected",paraId:5,tocIndex:0},{value:" 状态。",paraId:5,tocIndex:0},{value:"交互内置状态：",paraId:6,tocIndex:0},{value:"({\n  // selected 状态下的元素为1px黑色边框\n  state: { selected: { lineWidth: '1', stroke: '#000' } },\n});\n",paraId:7,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', paddingLeft: 50 });\n\nchart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  transform: [\n    { type: 'sortX', by: 'y', reverse: true, slice: 6 },\n    { type: 'dodgeX' },\n  ],\n  encode: { x: 'state', y: 'population', color: 'age' },\n  axis: { y: { labelFormatter: '~s' } },\n  state: { selected: { fill: 'red' }, unselected: { opacity: 0.5 } },\n  interaction: { elementSelectByX: true },\n});\n\nchart.render();\n",paraId:8,tocIndex:0},{value:"配置 ",paraId:9,tocIndex:1},{value:"elementSelectByX",paraId:9,tocIndex:1},{value:" 交互有两种方式：",paraId:9,tocIndex:1},{value:"第一种，传入 ",paraId:10,tocIndex:1},{value:"boolean",paraId:10,tocIndex:1},{value:" 设置是否开启交互。",paraId:10,tocIndex:1},{value:"({\n  type: 'interval',\n  interaction: { elementSelectByX: true }, // 采用默认配置\n});\n",paraId:11,tocIndex:1},{value:"第二种，传入 ",paraId:12,tocIndex:1},{value:"配置项",paraId:13,tocIndex:1},{value:" 对交互进行配置。",paraId:12,tocIndex:1},{value:"({\n  type: 'line',\n  interaction: {\n    elementSelectByX: {\n      background: true,\n    },\n  },\n});\n",paraId:14,tocIndex:1},{value:"交互可以配置在 Mark 层级：",paraId:15,tocIndex:2},{value:"({\n  type: 'interval',\n  interaction: { elementSelectByX: true },\n});\n",paraId:16,tocIndex:2},{value:"也可以配置在 View 层级，视图上声明的交互会传递给 ",paraId:17,tocIndex:2},{value:"children",paraId:17,tocIndex:2},{value:" 声明的标记，如果该标记有声明对应的交互，就合并；否则不影响。",paraId:17,tocIndex:2},{value:"({\n  type: 'view',\n  interaction: { elementSelectByX: true },\n});\n",paraId:18,tocIndex:2},{value:"元素选择交互配置有两处：",paraId:19,tocIndex:3},{value:"交互配置",paraId:20,tocIndex:3},{value:"元素选中的样式",paraId:20,tocIndex:3},{value:"属性",paraId:21,tocIndex:4},{value:"描述",paraId:21,tocIndex:4},{value:"类型",paraId:21,tocIndex:4},{value:"默认值",paraId:21,tocIndex:4},{value:"background",paraId:21,tocIndex:4},{value:"是否高亮背景",paraId:21,tocIndex:4},{value:"boolean",paraId:21,tocIndex:4},{value:"false",paraId:21,tocIndex:4},{value:"region",paraId:21,tocIndex:4},{value:"点击空白区域是否触发选择",paraId:21,tocIndex:4},{value:"boolean",paraId:21,tocIndex:4},{value:"false",paraId:21,tocIndex:4},{value:"single",paraId:21,tocIndex:4},{value:"是否单选，设置为 true 时每次只能选中一个 x 值对应的元素组",paraId:21,tocIndex:4},{value:"boolean",paraId:21,tocIndex:4},{value:"false",paraId:21,tocIndex:4},{value:"multipleSelectHotkey",paraId:21,tocIndex:4},{value:"多选热键的 code，按住热键后变为多选，设置此属性后",paraId:21,tocIndex:4},{value:"single",paraId:21,tocIndex:4},{value:"无效。不设置时默认为多选模式",paraId:21,tocIndex:4},{value:"string",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"string[]",paraId:21,tocIndex:4},{value:"-",paraId:21,tocIndex:4},{value:"元素选中样式，效果见示例",paraId:22,tocIndex:5},{value:"自定义选中",paraId:23,tocIndex:5},{value:"属性",paraId:24,tocIndex:5},{value:"描述",paraId:24,tocIndex:5},{value:"类型",paraId:24,tocIndex:5},{value:"默认值",paraId:24,tocIndex:5},{value:"必选",paraId:24,tocIndex:5},{value:"offset",paraId:24,tocIndex:5},{value:"主方向上的便偏移量",paraId:24,tocIndex:5},{value:"number",paraId:24,tocIndex:5},{value:"0",paraId:24,tocIndex:5},{value:"radius",paraId:24,tocIndex:5},{value:"元素圆角",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"0",paraId:24,tocIndex:5},{value:"fill",paraId:24,tocIndex:5},{value:"元素填充色",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"fillOpacity",paraId:24,tocIndex:5},{value:"元素填充透明度",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"stroke",paraId:24,tocIndex:5},{value:"元素的描边",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"strokeOpacity",paraId:24,tocIndex:5},{value:"元素描边透明度",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"lineWidth",paraId:24,tocIndex:5},{value:"元素描边的宽度",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"lineDash",paraId:24,tocIndex:5},{value:"元素描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:24,tocIndex:5},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"opacity",paraId:24,tocIndex:5},{value:"元素的整体透明度",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"shadowColor",paraId:24,tocIndex:5},{value:"元素阴影颜色",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"shadowBlur",paraId:24,tocIndex:5},{value:"元素阴影的高斯模糊系数",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"shadowOffsetX",paraId:24,tocIndex:5},{value:"设置阴影距元素的水平距离",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"shadowOffsetY",paraId:24,tocIndex:5},{value:"设置阴影距元素的垂直距离",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"cursor",paraId:24,tocIndex:5},{value:"元素鼠标样式。同 css 的鼠标样式。",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"default",paraId:24,tocIndex:5},{value:"backgroundRadius",paraId:24,tocIndex:5},{value:"背景圆角",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"0",paraId:24,tocIndex:5},{value:"backgroundFill",paraId:24,tocIndex:5},{value:"背景填充色",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"transparent",paraId:24,tocIndex:5},{value:"backgroundFillOpacity",paraId:24,tocIndex:5},{value:"背景填充透明度",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundStroke",paraId:24,tocIndex:5},{value:"背景的描边",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundStrokeOpacity",paraId:24,tocIndex:5},{value:"背景描边透明度",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundLineWidth",paraId:24,tocIndex:5},{value:"背景描边的宽度",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundLineDash",paraId:24,tocIndex:5},{value:"背景描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:24,tocIndex:5},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundOpacity",paraId:24,tocIndex:5},{value:"背景的整体透明度",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundShadowColor",paraId:24,tocIndex:5},{value:"背景阴影颜色",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundShadowBlur",paraId:24,tocIndex:5},{value:"背景阴影的高斯模糊系数",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundShadowOffsetX",paraId:24,tocIndex:5},{value:"设置阴影距背景的水平距离",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundShadowOffsetY",paraId:24,tocIndex:5},{value:"设置阴影距背景的垂直距离",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundCursor",paraId:24,tocIndex:5},{value:"背景鼠标样式。同 css 的鼠标样式。",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"default",paraId:24,tocIndex:5},{value:"在 selected 元素中配置背景的时候，不是以对象的形式来配置，而是以 ",paraId:25,tocIndex:5},{value:"background",paraId:25,tocIndex:5},{value:"前缀加属性的方式来配置。",paraId:25,tocIndex:5},{value:"({\n  state: {\n    selected: {\n      offset: 10,\n      radius: 50,\n      fill: '#1890FF',\n      fillOpacity: 0.9,\n      stroke: '#40A9FF',\n      strokeOpacity: 0.9,\n      lineWidth: 2,\n      lineDash: [4, 8],\n      opacity: 1,\n      shadowColor: '#1890FF',\n      shadowBlur: 10,\n      shadowOffsetX: 5,\n      shadowOffsetY: 5,\n      cursor: 'pointer',\n      backgroundRadius: 50,\n      backgroundFill: '#E6F7FF',\n      backgroundFillOpacity: 0.9,\n      backgroundStroke: '#91D5FF',\n      backgroundStrokeOpacity: 0.9,\n      backgroundLineWidth: 2,\n      backgroundLineDash: [4, 8],\n      backgroundOpacity: 1,\n      backgroundShadowColor: '#91D5FF',\n      backgroundShadowBlur: 10,\n      backgroundShadowOffsetX: 5,\n      backgroundShadowOffsetY: 5,\n      backgroundCursor: 'pointer',\n    },\n  },\n});\n",paraId:26,tocIndex:5},{value:"支持以下的事件：",paraId:27,tocIndex:7},{value:"element:select",paraId:28,tocIndex:7},{value:" - 元素选中时触发",paraId:28,tocIndex:7},{value:"element:unselect",paraId:28,tocIndex:7},{value:" - 元素取消选中时触发",paraId:28,tocIndex:7},{value:"chart.on('element:select', (e) => {\n  console.log(e.data.data);\n  console.log(e.nativeEvent);\n});\n\nchart.on('element:unselect', (e) => {\n  console.log(e.nativeEvent);\n});\n",paraId:29,tocIndex:7},{value:"支持以下的事件：",paraId:30,tocIndex:8},{value:"element:select",paraId:31,tocIndex:8},{value:" - 选中数据",paraId:31,tocIndex:8},{value:"element:unselect",paraId:31,tocIndex:8},{value:" - 取消选中",paraId:31,tocIndex:8},{value:"chart.emit('element:select', {\n  data: { data: [{ population: 5038433 }, { population: 3983091 }] },\n});\n\nchart.emit('element:unselect', {});\n",paraId:32,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  paddingLeft: 50,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'sortX', by: 'y', reverse: true, slice: 6 },\n    { type: 'dodgeX' },\n  ],\n  axis: { y: { labelFormatter: '~s' } },\n  interaction: { elementSelectByX: true },\n});\n\nchart.render();\n",paraId:33,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  paddingLeft: 50,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'sortX', by: 'y', reverse: true, slice: 6 },\n    { type: 'dodgeX' },\n  ],\n  axis: { y: { labelFormatter: '~s' } },\n  state: {\n    selected: {\n      offset: 10,\n      radius: 50,\n      fill: (d) => (d.population > 1000000 ? '#F5222D' : '#1890FF'),\n      fillOpacity: 0.9,\n      stroke: (d) => (d.population > 1000000 ? '#FF4D4F' : '#40A9FF'),\n      strokeOpacity: 0.9,\n      lineWidth: 2,\n      lineDash: [4, 8],\n      opacity: 1,\n      shadowColor: (d) => (d.population > 1000000 ? '#F5222D' : '#1890FF'),\n      shadowBlur: 10,\n      shadowOffsetX: 5,\n      shadowOffsetY: 5,\n      cursor: 'pointer',\n      backgroundRadius: 50,\n      backgroundFill: (d) => (d.population > 1000000 ? '#FFF1F0' : '#E6F7FF'),\n      backgroundFillOpacity: 0.9,\n      backgroundStroke: (d) => (d.population > 1000000 ? '#FFA39E' : '#91D5FF'),\n      backgroundStrokeOpacity: 0.9,\n      backgroundLineWidth: 2,\n      backgroundLineDash: [4, 8],\n      backgroundOpacity: 1,\n      backgroundShadowColor: (d) =>\n        d.population > 1000000 ? '#FFA39E' : '#91D5FF',\n      backgroundShadowBlur: 10,\n      backgroundShadowOffsetX: 5,\n      backgroundShadowOffsetY: 5,\n      backgroundCursor: 'pointer',\n    },\n  },\n  interaction: {\n    elementSelectByX: {\n      background: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:34,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  paddingLeft: 50,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'sortX', by: 'y', reverse: true, slice: 6 },\n    { type: 'dodgeX' },\n  ],\n  axis: { y: { labelFormatter: '~s' } },\n  interaction: {\n    elementSelectByX: {\n      single: true, // 设置为单选模式\n      background: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:35,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  paddingLeft: 50,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'sortX', by: 'y', reverse: true, slice: 6 },\n    { type: 'dodgeX' },\n  ],\n  axis: { y: { labelFormatter: '~s' } },\n  interaction: {\n    elementSelectByX: {\n      multipleSelectHotkey: 'ShiftLeft', // 按住左 Shift 键进入多选模式\n      background: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:36,tocIndex:13}]},17426:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(37661);const t=[{value:"鱼眼交互，用于聚焦于局部数据。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n  })\n  .encode('x', 'GDP')\n  .encode('y', 'LifeExpectancy')\n  .encode('size', 'Population')\n  .encode('color', 'continent')\n  .encode('shape', 'point')\n  .scale('size', { type: 'log', range: [4, 20] })\n  .style('fillOpacity', 0.3)\n  .style('lineWidth', 1);\n\nchart.interaction('fisheye');\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"wait",paraId:2,tocIndex:1},{value:"鱼眼更新的时间间隔，单位为毫秒",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"30",paraId:2,tocIndex:1},{value:"leading",paraId:2,tocIndex:1},{value:"是否在时间间隔开始的时候更新鱼眼",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"true",paraId:2,tocIndex:1},{value:"trailing",paraId:2,tocIndex:1},{value:"是否在时间间隔结束的时候更新鱼眼",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1}]},35505:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(30256);const t=[{value:"legendFilter",paraId:0,tocIndex:0},{value:" 是一种交互功能，允许用户通过点击图例项来过滤图表中显示的数据。筛选功能支持两种类型的图例：",paraId:0,tocIndex:0},{value:"分类图例：用于离散数据的筛选",paraId:1,tocIndex:0},{value:"连续图例：用于连续数据的筛选",paraId:1,tocIndex:0},{value:"通过图例筛选，用户可以动态控制图表中显示的数据项，增强数据探索和分析能力。",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .data(temperatures)\n  .encode('x', 'month')\n  .encode('y', 'temperature')\n  .encode('color', 'city')\n  .call((chart) => chart.line())\n  .call((chart) => chart.point());\n\nchart.interaction('legendFilter', true);\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"图例筛选功能会在使用图例时默认开启。",paraId:4,tocIndex:1},{value:"({\n  type: 'interval',\n  legend: {\n    color: {},\n    size: {},\n  },\n});\n",paraId:5,tocIndex:1},{value:"也可以在 interaction 中手动设置是否开启：",paraId:6,tocIndex:1},{value:"({\n  type: 'interval',\n  legend: {\n    color: {},\n    size: {},\n  },\n  interaction: {\n    legendFilter: true, // 启用图例筛选交互\n  },\n});\n",paraId:7,tocIndex:1},{value:"图例筛选交互可以配置在 View 层级：",paraId:8,tocIndex:2},{value:"chart.interaction('legendFilter', true);\n",paraId:9,tocIndex:2},{value:"当前版本的 LegendFilter 插件无可配置参数，调用时仅需指定 type：",paraId:10,tocIndex:3},{value:"属性",paraId:11,tocIndex:3},{value:"描述",paraId:11,tocIndex:3},{value:"类型",paraId:11,tocIndex:3},{value:"默认值",paraId:11,tocIndex:3},{value:"必选",paraId:11,tocIndex:3},{value:"type",paraId:11,tocIndex:3},{value:"交互类型标识符",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:"无",paraId:11,tocIndex:3},{value:"是",paraId:11,tocIndex:3},{value:"LegendFilter 插件内部根据图例类型自动判断是否为类目图例或连续图例，进行不同的处理：",paraId:12,tocIndex:4},{value:"类目图例（className = legend-category）：点击行为绑定筛选，支持多选、取消、重置。",paraId:13,tocIndex:4},{value:"连续图例（className = legend-continuous）：绑定 valuechange 事件监听滑块变化。",paraId:13,tocIndex:4},{value:"插件内部通过图例元素中注入的数据和结构信息来自动识别这些信息，用户无需手动指定。",paraId:14,tocIndex:4},{value:"具体文档看",paraId:15,tocIndex:5},{value:"图例 legend",paraId:15,tocIndex:5},{value:"legend:filter - 当用户通过图例进行筛选时触发",paraId:16,tocIndex:7},{value:"legend:reset - 当所有图例项都被选中时触发（重置状态）",paraId:16,tocIndex:7},{value:"legend:focus - 当图例被聚焦时触发",paraId:16,tocIndex:7},{value:"chart.on('legend:filter', (e) => {\n  const { nativeEvent, data } = e;\n  if (!nativeEvent) return;\n  console.log(data);\n});\n\nchart.on('legend:reset', (e) => {\n  const { nativeEvent } = e;\n  if (!nativeEvent) return;\n  console.log('end');\n});\n\nchart.on('legend:focus', (e) => {\n  const { nativeEvent, data } = e;\n  if (!nativeEvent) return;\n  console.log(data);\n});\n",paraId:17,tocIndex:7},{value:"legend:filter - 触发图例筛选",paraId:18,tocIndex:8},{value:"legend:focus - 触发图例聚焦",paraId:18,tocIndex:8},{value:"legend:reset - 重置筛选状态",paraId:18,tocIndex:8},{value:"chart.emit('legend:filter', {\n  data: { channel: 'color', values: ['Sports', 'Strategy'] },\n});\n\nchart.emit('legend:focus', {\n  data: { channel: 'color', value: 'Sports' },\n});\n\nchart.emit('legend:reset', {});\n",paraId:19,tocIndex:8},{value:"下面展示了一个离散型数据的 legendfilter 交互功能。",paraId:20,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  height: 300,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/temperatures1.json',\n  },\n  encode: {\n    x: (d) => new Date(d.date),\n    y: 'value',\n    color: 'condition',\n  },\n});\n\nchart.render();\n",paraId:21,tocIndex:9}]},90958:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(26996);const t=[{value:"legendHighlight",paraId:0,tocIndex:0},{value:" 交互的对象是图表组件 legend 。",paraId:0,tocIndex:0},{value:"触发：鼠标悬停在图例项。",paraId:1,tocIndex:0},{value:"结束：鼠标离开图例项。",paraId:1,tocIndex:0},{value:"影响状态：",paraId:1,tocIndex:0},{value:"框选范围的元素变为 ",paraId:2,tocIndex:0},{value:"active",paraId:2,tocIndex:0},{value:" 状态。",paraId:2,tocIndex:0},{value:"框选范围以外的元素变为 ",paraId:3,tocIndex:0},{value:"inactive",paraId:3,tocIndex:0},{value:" 状态。",paraId:3,tocIndex:0},{value:"交互内置状态：",paraId:4,tocIndex:0},{value:"({\n  // 定义 inactive 状态下的元素透明度为0.5\n\n  state: { inactive: { opacity: 0.5 } },\n});\n",paraId:5,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data(profit)\n  .axis('y', { labelFormatter: '~s' })\n  .encode('x', 'month')\n  .encode('y', ['end', 'start'])\n  .encode(\n    'color',\n    d.month === 'Total' ? 'Total' : d.profit > 0 ? 'Increase' : 'Decrease',\n  )\n  .state('inactive', { opacity: 0.5 })\n  .legend('color', {\n    state: { inactive: { labelOpacity: 0.5, markerOpacity: 0.5 } },\n  });\n\nchart.interaction('legendHighlight', true);\n\nchart.render();\n",paraId:6,tocIndex:0},{value:"传入 ",paraId:7,tocIndex:1},{value:"boolean",paraId:7,tocIndex:1},{value:" 设置是否开启交互。",paraId:7,tocIndex:1},{value:"({\n  type: 'interval',\n\n  interaction: { legendHighlight: true }, // 采用默认配置\n});\n",paraId:8,tocIndex:1},{value:"图例高亮交互可以配置在 View 层级：",paraId:9,tocIndex:2},{value:"chart.interaction('legendHighlight', true);\n",paraId:10,tocIndex:2},{value:"当前版本的 LegendHighlgiht 交互无可配置参数。",paraId:11,tocIndex:3},{value:"需要设置 state 的 inactive 状态，可以参照",paraId:12,tocIndex:3},{value:"元素状态 state",paraId:12,tocIndex:3},{value:"具体文档看",paraId:13,tocIndex:4},{value:"图例 legend",paraId:13,tocIndex:4},{value:"legend:highlight - 当鼠标悬停在图例项上触发",paraId:14,tocIndex:6},{value:"legend:unhighlight - 当鼠标离开图例时触发",paraId:14,tocIndex:6},{value:"chart.on('legend:highlight', (e) => {\n  const { nativeEvent, data } = e;\n  if (!nativeEvent) return;\n  console.log(data);\n});\n\nchart.on('legend:unhighlight', (e) => {\n  const { nativeEvent } = e;\n  if (!nativeEvent) return;\n  console.log('unhighlight');\n});\n",paraId:15,tocIndex:6},{value:"legend:highlight - 高亮对应于图例值的数据",paraId:16,tocIndex:7},{value:"legend:unhighlight - 取消高亮状态",paraId:16,tocIndex:7},{value:"chart.emit('legend:highlight', {\n  data: { channel: 'color', value: 'Increase' },\n});\n\nchart.emit('legend:unhighlight', {});\n",paraId:17,tocIndex:7},{value:"下面的示例展示了一个",paraId:18,tocIndex:8},{value:"legendHighlight",paraId:18,tocIndex:8},{value:"的基本交互功能。",paraId:18,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  height: 300,\n  data: [\n    { name: 'London', month: 'Jan.', value: 18.9 },\n    { name: 'London', month: 'Feb.', value: 28.8 },\n    { name: 'London', month: 'Mar.', value: 39.3 },\n    { name: 'London', month: 'Apr.', value: 81.4 },\n    { name: 'London', month: 'May', value: 47 },\n    { name: 'London', month: 'Jun.', value: 20.3 },\n    { name: 'London', month: 'Jul.', value: 24 },\n    { name: 'London', month: 'Aug.', value: 35.6 },\n    { name: 'Berlin', month: 'Jan.', value: 12.4 },\n    { name: 'Berlin', month: 'Feb.', value: 23.2 },\n    { name: 'Berlin', month: 'Mar.', value: 34.5 },\n    { name: 'Berlin', month: 'Apr.', value: 99.7 },\n    { name: 'Berlin', month: 'May', value: 52.6 },\n    { name: 'Berlin', month: 'Jun.', value: 35.5 },\n    { name: 'Berlin', month: 'Jul.', value: 37.4 },\n    { name: 'Berlin', month: 'Aug.', value: 42.4 },\n  ],\n  encode: {\n    x: 'month',\n    y: 'value',\n    color: 'name',\n  },\n  transform: [\n    {\n      type: 'dodgeX',\n      groupBy: 'x',\n      orderBy: 'value',\n      padding: 0.1,\n    },\n  ],\n  interaction: {\n    legendHighlight: {\n      series: true,\n    },\n  },\n  state: { inactive: { opacity: 0.5 } },\n});\n\nchart.render();\n",paraId:19,tocIndex:8}]},70050:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(88848);const t=[{value:"G2 中",paraId:0},{value:"交互（Interaction）",paraId:0},{value:" 提供了按需探索数据的能力。",paraId:0},{value:"交互可以设置在视图层级：",paraId:1},{value:"({\n  type: 'view',\n  interaction: {\n    tooltip: {},\n    brushHighlight: {},\n  },\n});\n",paraId:2},{value:"// API\n// 第一种方式\nchart.interaction('tooltip', {}).interaction('brushHighlight', {});\n\n// 第二种方式\nchart.interaction({\n  tooltip: {},\n  brushHighlight: {},\n});\n",paraId:3},{value:"交互也可以设置在标记层级：",paraId:4},{value:"({\n  type: 'interval',\n  interaction: {\n    tooltip: {},\n    brushHighlight: {},\n  },\n});\n",paraId:5},{value:"// API\n// 第一种方式\nchart.interval().interaction('tooltip', {}).interaction('brushHighlight', {});\n\n// 第二种方式\nchart.interval().interaction({\n  tooltip: {},\n  brushHighlight: {},\n});\n",paraId:6},{value:"G2 的交互都是对每一个视图生效，如果希望关掉交互，可以如下：",paraId:7,tocIndex:0},{value:"({\n  type: 'view',\n  interaction: {\n    tooltip: false,\n    brushHighlight: false,\n  },\n});\n",paraId:8,tocIndex:0},{value:"交互拥有冒泡性，视图交互会被它的标记所设置交互覆盖，并且最后一个标记所对应的坐标系优先级最高。",paraId:9,tocIndex:1},{value:"chart.interaction('elementHighlight', { link: true, background: true });\nchart.line().interaction('elementHighlight', { link: false });\nchart.area().interaction('elementHighlight', { background: false });\n",paraId:10,tocIndex:1},{value:"和下面的情况等价：",paraId:11,tocIndex:1},{value:"chart.interaction('elementHighlight', { link: false, background: false });\nchart.line();\nchart.area():\n",paraId:12,tocIndex:1},{value:"在 G2 中可以通过 ",paraId:13,tocIndex:2},{value:"mark.state",paraId:13,tocIndex:2},{value:" 去设置标记的交互状态，比如如下设置 select 和 unselect 的状态，当使用 elementSelect 的时候会消费这两个状态。",paraId:13,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  })\n  .transform({ type: 'sortX', by: 'y', reverse: true })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .axis('y', { labelFormatter: '.0%' })\n  .state({\n    selected: { fill: '#f4bb51' }, // 设置选中状态\n    unselected: { opacity: 0.6 }, // 设置非选中状态\n  })\n  .interaction('elementSelect', true);\n\nchart.render();\n",paraId:14,tocIndex:2},{value:"除了 selected 和 unselected 之外，还有如下的内置状态类型：",paraId:15,tocIndex:2},{value:"active",paraId:16,tocIndex:2},{value:"inactive",paraId:16,tocIndex:2},{value:"所以的交互事件都可以监听，语法如下:",paraId:17,tocIndex:4},{value:"chart.on('interaction name（eg: brushFilter）', (e) => {});\n",paraId:18,tocIndex:4},{value:"以鼠标刷选 ",paraId:19,tocIndex:4},{value:"brushFilter",paraId:20,tocIndex:4},{value:" 为例，当用户进行鼠标刷选时，将对应的刷选阈值压入 brushHistory，当点击 reset 按钮时，依次弹出并通过 ",paraId:19,tocIndex:4},{value:"chart.emit()",paraId:19,tocIndex:4},{value:" 主动触发 brushFilter 进行刷选覆盖即可：",paraId:19,tocIndex:4},{value:"const { Chart, ChartEvent } = G2;\n\nconst chart = new Chart({\n  container: 'container',\n  clip: true,\n});\n\nconst brushHistory = [];\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  })\n  .encode('x', 'weight')\n  .encode('y', 'height')\n  .encode('color', 'gender')\n  .encode('shape', 'point')\n  .interaction('brushFilter', true);\n\n// 监听刷选事件\nchart.on('brush:filter', (e) => {\n  if (e.target) brushHistory.push(e.data.selection);\n});\n\nchart.render();\n\nchart.on(ChartEvent.AFTER_RENDER, () => {\n  const scale = chart.getScale();\n  const { x1, y1 } = scale;\n  const domainX = x1.options.domain;\n  const domainY = y1.options.domain;\n  brushHistory.push([domainX, domainY]);\n});\n\nconst container = chart.getContainer();\nconst button = document.createElement('button');\nbutton.innerText = 'reset';\nbutton.onclick = () => {\n  if (brushHistory.length < 2) return;\n  brushHistory.pop();\n  // 主动触发刷选事件\n  chart.emit('brush:filter', {\n    data: {\n      selection: brushHistory[brushHistory.length - 1],\n    },\n  });\n};\n\ncontainer.appendChild(button);\n",paraId:21,tocIndex:4},{value:"触发和监听一般是同时出现，用于主动触发某个事件，形参中的 data 会作用于对应的交互事件，起到重置、覆盖的效果。例如重置筛选区域，以 ",paraId:22,tocIndex:5},{value:"brushFilter",paraId:23,tocIndex:5},{value:" 为例，语法如下。",paraId:22,tocIndex:5},{value:"chart.emit('brush:filter', {\n  data: {\n    selection: brushHistory[brushHistory.length - 1],\n  },\n});\n",paraId:24,tocIndex:5},{value:"如果内置的交互不能满足你的需求，也可以通过自定义交互的方式去实现一些交互。下面自定义一个高亮交互。",paraId:25,tocIndex:6},{value:"const { Chart, PLOT_CLASS_NAME, ELEMENT_CLASS_NAME, register } = G2;\n\nregister('interaction.customElementHighlight', () => {\n  return (context, _, emitter) => {\n    const { container } = context;\n    const plotArea = container.querySelector(`.${PLOT_CLASS_NAME}`);\n    const elements = plotArea.querySelectorAll(`.${ELEMENT_CLASS_NAME}`);\n    const elementSet = new Set(elements);\n\n    const pointerover = (e) => {\n      const { target: element } = e;\n      if (!elementSet.has(element)) return;\n      element.style.stroke = 'red';\n      element.style.lineWidth = 2;\n    };\n\n    const pointerout = (e) => {\n      const { target: element } = e;\n      if (!elementSet.has(element)) return;\n      element.style.stroke = null;\n    };\n\n    plotArea.addEventListener('pointerover', pointerover);\n    plotArea.addEventListener('pointerout', pointerout);\n    return () => {\n      plotArea.removeEventListener('pointerover', pointerover);\n      plotArea.removeEventListener('pointerout', pointerout);\n    };\n  };\n});\n\nconst chart = new Chart({ container: 'container' });\n\nchart\n  .interval()\n  .data([\n    { name: 'London', 月份: 'Jan.', 月均降雨量: 18.9 },\n    { name: 'London', 月份: 'Feb.', 月均降雨量: 28.8 },\n    { name: 'London', 月份: 'Mar.', 月均降雨量: 39.3 },\n    { name: 'London', 月份: 'Apr.', 月均降雨量: 81.4 },\n    { name: 'London', 月份: 'May', 月均降雨量: 47 },\n    { name: 'London', 月份: 'Jun.', 月均降雨量: 20.3 },\n    { name: 'London', 月份: 'Jul.', 月均降雨量: 24 },\n    { name: 'London', 月份: 'Aug.', 月均降雨量: 35.6 },\n    { name: 'Berlin', 月份: 'Jan.', 月均降雨量: 12.4 },\n    { name: 'Berlin', 月份: 'Feb.', 月均降雨量: 23.2 },\n    { name: 'Berlin', 月份: 'Mar.', 月均降雨量: 34.5 },\n    { name: 'Berlin', 月份: 'Apr.', 月均降雨量: 99.7 },\n    { name: 'Berlin', 月份: 'May', 月均降雨量: 52.6 },\n    { name: 'Berlin', 月份: 'Jun.', 月均降雨量: 35.5 },\n    { name: 'Berlin', 月份: 'Jul.', 月均降雨量: 37.4 },\n    { name: 'Berlin', 月份: 'Aug.', 月均降雨量: 42.4 },\n  ])\n  .transform({ type: 'dodgeX' })\n  .encode('x', '月份')\n  .encode('y', '月均降雨量')\n  .encode('color', 'name')\n  .interaction('customElementHighlight', true);\n\nchart.render();\n",paraId:26,tocIndex:6}]},17931:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(30160);const t=[{value:"poptip 是 G2 中的一种交互类型，用于在用户与图表元素交互时显示简洁的提示信息。它提供了一种轻量级的方式来展示数据点的详细信息，而不会干扰用户对整体图表的浏览体验。与完整的 tooltip 相比，poptip 更加简洁，通常只显示最基本的信息。",paraId:0,tocIndex:0},{value:"要启用 poptip 交互，只需在图表配置中添加 ",paraId:1,tocIndex:1},{value:"interaction: 'poptip'",paraId:1,tocIndex:1},{value:" 或使用 ",paraId:1,tocIndex:1},{value:"chart.interaction('poptip', true)",paraId:1,tocIndex:1},{value:" 方法。",paraId:1,tocIndex:1},{value:"chart.options({\n  // 其他配置...\n  interaction: { poptip: true },\n});\n",paraId:2,tocIndex:1},{value:"或者使用方法调用的方式：",paraId:3,tocIndex:1},{value:"chart.interaction('poptip', true);\n",paraId:4,tocIndex:1},{value:"poptip 交互的配置可以在图表的 ",paraId:5,tocIndex:2},{value:"options",paraId:5,tocIndex:2},{value:" 对象中的 ",paraId:5,tocIndex:2},{value:"interaction",paraId:5,tocIndex:2},{value:" 属性下进行设置：",paraId:5,tocIndex:2},{value:"chart.options({\n  // 其他图表配置...\n  interaction: {\n    poptip: {\n      // poptip 配置项\n      offsetX: 10,\n      offsetY: 10,\n      // tip 样式配置\n      tipBackgroundColor: 'rgba(0, 0, 0, 0.75)',\n      tipColor: '#fff',\n    },\n  },\n});\n",paraId:6,tocIndex:2},{value:"poptip 交互支持以下配置项：",paraId:7,tocIndex:3},{value:"属性",paraId:8,tocIndex:3},{value:"描述",paraId:8,tocIndex:3},{value:"类型",paraId:8,tocIndex:3},{value:"默认值",paraId:8,tocIndex:3},{value:"必选",paraId:8,tocIndex:3},{value:"offsetX",paraId:8,tocIndex:3},{value:"提示框相对于触发点的 X 方向偏移量",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"8",paraId:8,tocIndex:3},{value:"offsetY",paraId:8,tocIndex:3},{value:"提示框相对于触发点的 Y 方向偏移量",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"8",paraId:8,tocIndex:3},{value:"poptip 的样式配置项需要以 ",paraId:9,tocIndex:4},{value:"tip",paraId:9,tocIndex:4},{value:" 为前缀：",paraId:9,tocIndex:4},{value:"属性",paraId:10,tocIndex:4},{value:"描述",paraId:10,tocIndex:4},{value:"类型",paraId:10,tocIndex:4},{value:"默认值",paraId:10,tocIndex:4},{value:"必选",paraId:10,tocIndex:4},{value:"tipBackgroundColor",paraId:10,tocIndex:4},{value:"提示框背景色",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"'rgba(0,0,0,0.75)'",paraId:10,tocIndex:4},{value:"tipColor",paraId:10,tocIndex:4},{value:"文本颜色",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"'#fff'",paraId:10,tocIndex:4},{value:"tipWidth",paraId:10,tocIndex:4},{value:"提示框宽度",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"'max-content'",paraId:10,tocIndex:4},{value:"tipPadding",paraId:10,tocIndex:4},{value:"提示框内边距",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"'1px 4px'",paraId:10,tocIndex:4},{value:"tipFontSize",paraId:10,tocIndex:4},{value:"文本字体大小",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"'12px'",paraId:10,tocIndex:4},{value:"tipBorderRadius",paraId:10,tocIndex:4},{value:"提示框圆角半径",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"'2.5px'",paraId:10,tocIndex:4},{value:"tipBoxShadow",paraId:10,tocIndex:4},{value:"提示框阴影",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"'0 3px 6px -4px rgba(0,0,0,0.12), 0 6px 16px 0 rgba(0,0,0,0.08), 0 9px 28px 8px rgba(0,0,0,0.05)'",paraId:10,tocIndex:4},{value:"poptip 交互会触发以下事件：",paraId:11,tocIndex:5},{value:"事件名",paraId:12,tocIndex:5},{value:"描述",paraId:12,tocIndex:5},{value:"回调参数",paraId:12,tocIndex:5},{value:"poptip:show",paraId:12,tocIndex:5},{value:"当 poptip 显示时触发",paraId:12,tocIndex:5},{value:"{ data, target, x, y }",paraId:12,tocIndex:5},{value:"poptip:hide",paraId:12,tocIndex:5},{value:"当 poptip 隐藏时触发",paraId:12,tocIndex:5},{value:"{ target }",paraId:12,tocIndex:5},{value:"可以通过以下方式监听这些事件：",paraId:13,tocIndex:5},{value:"chart.on('poptip:show', (event) => {\n  console.log('Poptip shown:', event.data);\n});\n\nchart.on('poptip:hide', (event) => {\n  console.log('Poptip hidden');\n});\n",paraId:14,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// 生成模拟数据\nconst generateScatterData = () => {\n  const data = [];\n  const groups = ['组A', '组B', '组C', '组D'];\n  const centers = [\n    [3, 3],\n    [7, 7],\n    [3, 7],\n    [7, 3],\n  ];\n\n  groups.forEach((group, i) => {\n    const [centerX, centerY] = centers[i];\n    for (let j = 0; j < 30; j++) {\n      // 生成围绕中心点的随机散点\n      const x = centerX + (Math.random() - 0.5) * 4;\n      const y = centerY + (Math.random() - 0.5) * 4;\n      const size = Math.random() * 20 + 5;\n      data.push({\n        x,\n        y,\n        size,\n        group,\n        id: `${group}-${j}`,\n        value: Math.round(x * y),\n      });\n    }\n  });\n  return data;\n};\n\nconst data = generateScatterData();\n\nchart.options({\n  type: 'point',\n  data,\n  encode: {\n    x: 'x',\n    y: 'y',\n    color: 'group',\n    size: 'size',\n    shape: 'circle',\n  },\n  scale: {\n    x: {\n      nice: true,\n      domain: [0, 10],\n    },\n    y: {\n      nice: true,\n      domain: [0, 10],\n    },\n    size: {\n      domain: [5, 25],\n    },\n    color: {\n      palette: 'category10',\n    },\n  },\n  style: {\n    fillOpacity: 0.65,\n    stroke: '#fff',\n    lineWidth: 1,\n  },\n  axis: {\n    x: {\n      title: 'X 轴',\n      grid: true,\n    },\n    y: {\n      title: 'Y 轴',\n      grid: true,\n    },\n  },\n  legend: {\n    color: {\n      position: 'top',\n      flipPage: false,\n      maxItemWidth: 80,\n      itemMarginBottom: 8,\n      layout: 'horizontal',\n    },\n  },\n  animate: {\n    enter: {\n      type: 'fadeIn',\n      duration: 800,\n      delay: (d, i) => i * 10,\n    },\n  },\n});\n\nchart.render();\n\nchart.interaction('poptip', {\n  offsetX: 15,\n  offsetY: 15,\n  tipBackgroundColor: 'rgba(0, 0, 0, 0.85)',\n  tipBorderRadius: '6px',\n  tipPadding: '10px 12px',\n  tipFontSize: '12px',\n  tipColor: '#fff',\n  tipBoxShadow: '0 3px 6px -4px rgba(0, 0, 0, 0.48)',\n});\n\nchart.on('element:mouseenter', (event) => {\n  const { element } = event;\n  element.style.fillOpacity = 1;\n  element.style.stroke = '#000';\n  element.style.lineWidth = 2;\n  chart.render();\n});\n\nchart.on('element:mouseleave', (event) => {\n  const { element } = event;\n  element.style.fillOpacity = 0.65;\n  element.style.stroke = '#fff';\n  element.style.lineWidth = 1;\n  chart.render();\n});\n",paraId:15,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// 简化的数据集\nconst data = [\n  { category: '类别A', value: 27 },\n  { category: '类别B', value: 25 },\n  { category: '类别C', value: 23 },\n  { category: '类别D', value: 21 },\n  { category: '类别E', value: 19 },\n  { category: '类别F', value: 17 },\n  { category: '类别G', value: 12 },\n  { category: '类别H', value: 10 },\n  { category: '类别I', value: 6 },\n];\n\nchart.options({\n  type: 'interval',\n  data,\n  coordinate: {\n    type: 'polar',\n    innerRadius: 0.2,\n    endAngle: Math.PI * 2,\n  },\n  encode: {\n    x: 'category',\n    y: 'value',\n    color: 'category',\n  },\n  transform: [\n    {\n      type: 'stackY',\n    },\n  ],\n  scale: {\n    color: {\n      palette: 'spectral',\n    },\n  },\n  style: {\n    stroke: '#fff',\n    lineWidth: 1,\n  },\n  legend: {\n    color: {\n      position: 'right',\n    },\n  },\n  animate: {\n    enter: {\n      type: 'fadeIn',\n      duration: 800,\n    },\n  },\n});\n\nchart.render();\n\nchart.interaction('poptip', true);\n\nchart.on('element:mouseenter', (event) => {\n  const { element } = event;\n  element.style.fillOpacity = 1;\n  element.style.stroke = '#000';\n  element.style.lineWidth = 2;\n  chart.render();\n});\n\nchart.on('element:mouseleave', (event) => {\n  const { element } = event;\n  element.style.fillOpacity = 0.85;\n  element.style.stroke = '#fff';\n  element.style.lineWidth = 1;\n  chart.render();\n});\n",paraId:16,tocIndex:9}]},25249:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(8712);const t=[{value:"scrollbarFilter",paraId:0,tocIndex:0},{value:" 是一个默认交互，当设置了 scrollbar 组件后会自动启用。它允许用户通过滚动条来筛选和浏览数据，特别适用于大量数据的可视化场景。滚动条筛选可以应用于 x 轴和 y 轴，帮助用户聚焦于感兴趣的数据区域。",paraId:0,tocIndex:0},{value:"触发：拖动滚动条。",paraId:1,tocIndex:0},{value:"结束：释放滚动条。",paraId:2,tocIndex:0},{value:"影响：更新图表显示的数据范围。",paraId:3,tocIndex:0},{value:"配置 ",paraId:4,tocIndex:1},{value:"scrollbarFilter",paraId:4,tocIndex:1},{value:" 交互有两种方式：",paraId:4,tocIndex:1},{value:"第一种，通过配置 scrollbar 组件自动启用滚动条筛选交互：",paraId:5,tocIndex:1},{value:"({\n  scrollbar: {\n    x: { ratio: 0.5 }, // x 轴滚动条，显示 50% 的数据\n    y: { ratio: 0.3 }, // y 轴滚动条，显示 30% 的数据\n  },\n});\n",paraId:6,tocIndex:1},{value:"第二种，直接在 interaction 中配置：",paraId:7,tocIndex:1},{value:"({\n  scrollbar: {\n    x: { ratio: 0.5 },\n    y: { ratio: 0.3 },\n  },\n  interaction: {\n    scrollbarFilter: true, // 启用滚动条筛选交互\n  },\n});\n",paraId:8,tocIndex:1},{value:"滚动条筛选交互可以配置在 View 层级：",paraId:9,tocIndex:2},{value:"({\n  type: 'view',\n  scrollbar: {\n    x: { ratio: 0.5 },\n    y: { ratio: 0.3 },\n  },\n  interaction: { scrollbarFilter: true },\n});\n",paraId:10,tocIndex:2},{value:"滚动条筛选交互支持以下配置项：",paraId:11,tocIndex:3},{value:"属性",paraId:12,tocIndex:3},{value:"描述",paraId:12,tocIndex:3},{value:"类型",paraId:12,tocIndex:3},{value:"默认值",paraId:12,tocIndex:3},{value:"必选",paraId:12,tocIndex:3},{value:"initDomain",paraId:12,tocIndex:3},{value:"初始化的数据域范围，用于设置滚动条的初始筛选范围",paraId:12,tocIndex:3},{value:"{ x: [number, number], y: [number, number] }",paraId:12,tocIndex:3},{value:"根据数据自动计算",paraId:12,tocIndex:3},{value:"否",paraId:12,tocIndex:3},{value:"className",paraId:12,tocIndex:3},{value:"滚动条的 CSS 类名，用于样式定制和 DOM 选择",paraId:12,tocIndex:3},{value:"string",paraId:12,tocIndex:3},{value:"'g2-scrollbar'",paraId:12,tocIndex:3},{value:"否",paraId:12,tocIndex:3},{value:"prefix",paraId:12,tocIndex:3},{value:"事件前缀，用于定义触发的事件名称",paraId:12,tocIndex:3},{value:"string",paraId:12,tocIndex:3},{value:"'scrollbar'",paraId:12,tocIndex:3},{value:"否",paraId:12,tocIndex:3},{value:"hasState",paraId:12,tocIndex:3},{value:"是否启用状态管理，控制滚动条筛选时的状态变化",paraId:12,tocIndex:3},{value:"boolean",paraId:12,tocIndex:3},{value:"true",paraId:12,tocIndex:3},{value:"否",paraId:12,tocIndex:3},{value:"setValue",paraId:12,tocIndex:3},{value:"自定义设置滚动条值的函数",paraId:12,tocIndex:3},{value:"(component, values) => void",paraId:12,tocIndex:3},{value:"(component, values) => component.setValue(values[0])",paraId:12,tocIndex:3},{value:"否",paraId:12,tocIndex:3},{value:"getInitValues",paraId:12,tocIndex:3},{value:"自定义获取滚动条初始值的函数",paraId:12,tocIndex:3},{value:"(scrollbar) => [number, number]",paraId:12,tocIndex:3},{value:"内部默认实现",paraId:12,tocIndex:3},{value:"否",paraId:12,tocIndex:3},{value:"initDomain",paraId:13,tocIndex:5},{value:" 是一个对象，包含 x 和 y 两个属性，分别表示 x 轴和 y 轴的初始数据域范围。这个配置项允许您精确控制滚动条初始显示的数据范围。",paraId:13,tocIndex:5},{value:"{\n  initDomain: {\n    x: [minX, maxX], // x 轴的数据域范围\n    y: [minY, maxY], // y 轴的数据域范围\n  }\n}\n",paraId:14,tocIndex:5},{value:"例如，如果您想要 x 轴初始显示从第二个数据点到第五个数据点的范围：",paraId:15,tocIndex:5},{value:"({\n  interaction: {\n    scrollbarFilter: {\n      initDomain: {\n        x: [1, 4], // 显示索引为1到4的数据点（第二到第五个）\n      },\n    },\n  },\n});\n",paraId:16,tocIndex:5},{value:"setValue",paraId:17,tocIndex:6},{value:" 是一个函数，用于自定义如何设置滚动条的值。默认实现是 ",paraId:17,tocIndex:6},{value:"(component, values) => component.setValue(values[0])",paraId:17,tocIndex:6},{value:"，它将第一个值设置为滚动条的当前值。",paraId:17,tocIndex:6},{value:"如果您需要自定义滚动条的值设置逻辑，可以提供自己的实现：",paraId:18,tocIndex:6},{value:"({\n  interaction: {\n    scrollbarFilter: {\n      setValue: (component, values) => {\n        // 自定义设置值的逻辑\n        component.setValue(values[0]);\n        // 可以在这里添加其他操作\n      },\n    },\n  },\n});\n",paraId:19,tocIndex:6},{value:"getInitValues",paraId:20,tocIndex:7},{value:" 是一个函数，用于获取滚动条的初始值。默认实现会检查滚动条的值是否为 0，如果不是 0 则返回该值。",paraId:20,tocIndex:7},{value:"您可以自定义这个函数来控制滚动条的初始位置，返回值是一个 0-1 的数组，代表滚动条的起止位置：",paraId:21,tocIndex:7},{value:"({\n  interaction: {\n    scrollbarFilter: {\n      getInitValues: (scrollbar) => {\n        // 自定义获取初始值的逻辑\n        const values = scrollbar.slider.attributes.values;\n        // 例如，总是从中间位置开始\n        return [values.length / 2, 1];\n      },\n    },\n  },\n});\n",paraId:22,tocIndex:7},{value:"除了 scrollbarFilter 交互的配置外，scrollbar 组件本身也有一些重要的配置项，这些配置会影响滚动条筛选的行为：",paraId:23,tocIndex:8},{value:"属性",paraId:24,tocIndex:8},{value:"描述",paraId:24,tocIndex:8},{value:"类型",paraId:24,tocIndex:8},{value:"默认值",paraId:24,tocIndex:8},{value:"必选",paraId:24,tocIndex:8},{value:"ratio",paraId:24,tocIndex:8},{value:"显示数据的比例，值范围 [0, 1]",paraId:24,tocIndex:8},{value:"number",paraId:24,tocIndex:8},{value:"1",paraId:24,tocIndex:8},{value:"否",paraId:24,tocIndex:8},{value:"style",paraId:24,tocIndex:8},{value:"滚动条的样式配置",paraId:24,tocIndex:8},{value:"ScrollbarStyle",paraId:24,tocIndex:8},{value:"-",paraId:24,tocIndex:8},{value:"否",paraId:24,tocIndex:8},{value:"animate",paraId:24,tocIndex:8},{value:"是否启用动画",paraId:24,tocIndex:8},{value:"boolean",paraId:24,tocIndex:8},{value:"true",paraId:24,tocIndex:8},{value:"否",paraId:24,tocIndex:8},{value:"具体文档看",paraId:25,tocIndex:8},{value:"滚动条 Scrollbar",paraId:25,tocIndex:8},{value:"滚动条筛选交互支持以下事件：",paraId:26,tocIndex:10},{value:"scrollbarX:filter",paraId:27,tocIndex:10},{value:" - 当 x 轴滚动条筛选时触发",paraId:27,tocIndex:10},{value:"scrollbarY:filter",paraId:27,tocIndex:10},{value:" - 当 y 轴滚动条筛选时触发",paraId:27,tocIndex:10},{value:"chart.on('scrollbarX:filter', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('scrollbarX:filter', data.selection);\n});\n\nchart.on('scrollbarY:filter', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('scrollbarY:filter', data.selection);\n});\n",paraId:28,tocIndex:10},{value:"可以通过以下方式手动触发滚动条筛选交互：",paraId:29,tocIndex:11},{value:"scrollbarX:filter",paraId:30,tocIndex:11},{value:" - 触发 x 轴滚动条筛选",paraId:30,tocIndex:11},{value:"scrollbarY:filter",paraId:30,tocIndex:11},{value:" - 触发 y 轴滚动条筛选",paraId:30,tocIndex:11},{value:"chart.emit('scrollbarX:filter', {\n  data: { selection: [['2001-03'], undefined] },\n});\n\nchart.emit('scrollbarY:filter', {\n  data: { selection: [undefined, [50, 550]] },\n});\n",paraId:31,tocIndex:11},{value:"下面的示例展示了如何在柱状图上添加基础的 X 轴滚动条筛选功能：",paraId:32,tocIndex:13},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  height: 300,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency', y1: 0.000001 },\n  scale: { y: { type: 'log' } },\n  scrollbar: { x: true }, // 启用 X 轴滚动条\n});\n\nchart.render();\n",paraId:33,tocIndex:13},{value:"这个示例展示了如何监听滚动条的 valuechange 事件，获取滚动条滑动前后的值：",paraId:34,tocIndex:14},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  height: 300,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency', y1: 0.000001 },\n  scale: { y: { type: 'log' } },\n  scrollbar: { x: true },\n});\n\n// render 渲染图表之后\nchart.on('afterrender', () => {\n  const { canvas } = chart.getContext();\n  const { document } = canvas;\n  document\n    .querySelector('.g2-scrollbar')\n    .addEventListener('valuechange', (evt) => {\n      console.log('滑动更新前对应数据:', evt.detail.oldValue);\n      console.log('更新后对应数据:', evt.detail.value);\n    });\n});\n\nchart.render();\n",paraId:35,tocIndex:14},{value:"这个示例展示了如何设置滚动条的初始数据域范围，使图表初始显示指定的数据区间：",paraId:36,tocIndex:15},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// 准备月份数据\nconst data = [\n  { month: '1月', value: 3 },\n  { month: '2月', value: 4 },\n  { month: '3月', value: 3.5 },\n  { month: '4月', value: 5 },\n  { month: '5月', value: 4.9 },\n  { month: '6月', value: 6 },\n  { month: '7月', value: 7 },\n  { month: '8月', value: 9 },\n  { month: '9月', value: 13 },\n  { month: '10月', value: 11 },\n  { month: '11月', value: 8 },\n  { month: '12月', value: 10 },\n];\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  height: 300,\n  data: data,\n  encode: { x: 'month', y: 'value' },\n  scrollbar: {\n    x: { ratio: 0.5 }, // 显示50%的数据\n  },\n});\n\nchart.render();\n\n// 在图表渲染后手动设置滚动条位置\nchart.on('afterrender', () => {\n  // 手动触发滚动条筛选，显示4月到9月的数据\n  chart.emit('scrollbarX:filter', {\n    data: { selection: [['4月'], ['9月']] },\n  });\n\n  console.log('已设置初始数据域范围，显示4月到9月的数据');\n});\n",paraId:37,tocIndex:15}]},19392:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(71186);const t=[{value:"sliderFilter",paraId:0,tocIndex:0},{value:"交互的对象是数据域，通过滑块控件过滤显示的数据范围。它允许用户通过拖拽滑块来动态调整可视化图表中显示的数据范围，从而实现数据的交互式筛选。",paraId:0,tocIndex:0},{value:"触发：拖动滑块组件",paraId:1,tocIndex:0},{value:"结束：释放滑块",paraId:1,tocIndex:0},{value:"影响：更新图表显示的数据范围",paraId:1,tocIndex:0},{value:"配置 ",paraId:2,tocIndex:1},{value:"sliderFilter",paraId:2,tocIndex:1},{value:" 交互有两种方式：\n第一种，通过配置 slider 组件自动启用缩略轴筛选交互：",paraId:2,tocIndex:1},{value:"({\n  slider: {\n    x: true,\n    y: true,\n  },\n});\n",paraId:3,tocIndex:1},{value:"第二种，直接在 interaction 中配置：",paraId:4,tocIndex:1},{value:"({\n  slider: {\n    x: true,\n  },\n  interaction: {\n    sliderFilter: true, //采取默认配置项\n  },\n});\n",paraId:5,tocIndex:1},{value:"交互可以配置在 View 层级：",paraId:6,tocIndex:2},{value:"({\n  type: 'view',\n  slider: { x: true, y: true },\n  interaction: { sliderFilter: true },\n});\n",paraId:7,tocIndex:2},{value:"属性",paraId:8,tocIndex:3},{value:"描述",paraId:8,tocIndex:3},{value:"类型",paraId:8,tocIndex:3},{value:"默认值",paraId:8,tocIndex:3},{value:"必选",paraId:8,tocIndex:3},{value:"initDomain",paraId:8,tocIndex:3},{value:"初始化坐标轴范围",paraId:8,tocIndex:3},{value:"{ x: [number, number], y: [number, number] }",paraId:8,tocIndex:3},{value:"{}",paraId:8,tocIndex:3},{value:"className",paraId:8,tocIndex:3},{value:"滑块组件的 CSS 类名",paraId:8,tocIndex:3},{value:"string",paraId:8,tocIndex:3},{value:"'slider'",paraId:8,tocIndex:3},{value:"prefix",paraId:8,tocIndex:3},{value:"滑块组件前缀，用于标识和事件命名",paraId:8,tocIndex:3},{value:"string",paraId:8,tocIndex:3},{value:"'slider'",paraId:8,tocIndex:3},{value:"setValue",paraId:8,tocIndex:3},{value:"设置滑块值的自定义函数",paraId:8,tocIndex:3},{value:"(component, values) => void",paraId:8,tocIndex:3},{value:"(component, values) => component.setValues(values)",paraId:8,tocIndex:3},{value:"hasState",paraId:8,tocIndex:3},{value:"是否保存滑块比例状态",paraId:8,tocIndex:3},{value:"boolean",paraId:8,tocIndex:3},{value:"false",paraId:8,tocIndex:3},{value:"wait",paraId:8,tocIndex:3},{value:"节流等待时间(毫秒)",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"50",paraId:8,tocIndex:3},{value:"leading",paraId:8,tocIndex:3},{value:"节流时是否在开始前执行",paraId:8,tocIndex:3},{value:"boolean",paraId:8,tocIndex:3},{value:"true",paraId:8,tocIndex:3},{value:"trailing",paraId:8,tocIndex:3},{value:"节流时是否在结束后执行",paraId:8,tocIndex:3},{value:"boolean",paraId:8,tocIndex:3},{value:"false",paraId:8,tocIndex:3},{value:"getInitValues",paraId:8,tocIndex:3},{value:"获取滑块初始值的函数",paraId:8,tocIndex:3},{value:"(slider) => [number, number]",paraId:8,tocIndex:3},{value:"undefined",paraId:8,tocIndex:3},{value:"除了与 sliderFilter 交互的配置外，slider 组件本身也有一些重要的配置项，这些配置会影响缩略轴筛选的行为：",paraId:9,tocIndex:4},{value:"属性",paraId:10,tocIndex:4},{value:"描述",paraId:10,tocIndex:4},{value:"类型",paraId:10,tocIndex:4},{value:"默认值",paraId:10,tocIndex:4},{value:"必选",paraId:10,tocIndex:4},{value:"padding",paraId:10,tocIndex:4},{value:"缩略轴内边距",paraId:10,tocIndex:4},{value:"number | number[]",paraId:10,tocIndex:4},{value:"-",paraId:10,tocIndex:4},{value:"values",paraId:10,tocIndex:4},{value:"缩略轴初始选区范围，位于 0 ～ 1 区间",paraId:10,tocIndex:4},{value:"[number, number]",paraId:10,tocIndex:4},{value:"-",paraId:10,tocIndex:4},{value:"slidable",paraId:10,tocIndex:4},{value:"是否允许拖动选取和手柄",paraId:10,tocIndex:4},{value:"boolean",paraId:10,tocIndex:4},{value:"true",paraId:10,tocIndex:4},{value:"具体文档看",paraId:11,tocIndex:4},{value:"缩略轴 Slider",paraId:11,tocIndex:4},{value:"缩略轴筛选交互支持以下事件：",paraId:12,tocIndex:6},{value:"sliderX:filter",paraId:13,tocIndex:6},{value:" - 触发 X 轴过滤",paraId:13,tocIndex:6},{value:"sliderY:filter",paraId:13,tocIndex:6},{value:" - 触发 Y 轴过滤",paraId:13,tocIndex:6},{value:"chart.emit('sliderX:filter', {\n  data: { selection: [['2001-01', '2001-03'], undefined] },\n});\n\nchart.emit('sliderY:filter', {\n  data: { selection: [undefined, [50, 550]] },\n});\n",paraId:14,tocIndex:6},{value:"sliderX:filter",paraId:15,tocIndex:7},{value:" - X 轴滑块过滤事件",paraId:15,tocIndex:7},{value:"sliderY:filter",paraId:15,tocIndex:7},{value:" - Y 轴滑块过滤事件",paraId:15,tocIndex:7},{value:"chart.on('sliderX:filter', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('sliderX:filter', data.selection);\n});\n\nchart.on('sliderY:filter', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('sliderY:filter', data.selection);\n});\n",paraId:16,tocIndex:7},{value:"下面的示例展示了如何在折线图上添加基础的 X 轴缩略轴筛选功能：",paraId:17,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  height: 300,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency', y1: 0.000001 },\n  slider: { x: true },\n  interaction: {\n    sliderFilter: {\n      wait: 100,\n      leading: false,\n      tariling: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:18,tocIndex:9}]},13612:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(5566);const t=[{value:"面积图（ ",paraId:0,tocIndex:0},{value:"area",paraId:0,tocIndex:0},{value:" ）图形标记大部分场景用来绘制我们常见的面积图，是一种随有序变量的变化，反映数值变化的图形，原理与 ",paraId:0,tocIndex:0},{value:"line",paraId:0,tocIndex:0},{value:" 相似。而面积图的特点在于，折线与自变量坐标轴之间的区域，会由颜色或者纹理填充。",paraId:0,tocIndex:0},{value:"另外，在数据结构上，",paraId:1,tocIndex:0},{value:"area",paraId:1,tocIndex:0},{value:" 和 ",paraId:1,tocIndex:0},{value:"line",paraId:1,tocIndex:0},{value:" 不同的地方在于，",paraId:1,tocIndex:0},{value:"area",paraId:1,tocIndex:0},{value:" 可以设置长度为 ",paraId:1,tocIndex:0},{value:"2",paraId:1,tocIndex:0},{value:" 的数组作为 ",paraId:1,tocIndex:0},{value:"y",paraId:1,tocIndex:0},{value:" 通道的数据，数组的第一个和第二个元素分别代表面积图的上边界和下边界，通过这种方式来绘制区间面积图，如果没有设置，默认下边界为 ",paraId:1,tocIndex:0},{value:"0",paraId:1,tocIndex:0},{value:" 。",paraId:1,tocIndex:0},{value:"面积图也可用于多个系列数据的比较，表达数据的总量和趋势。相较于折线图，面积图不仅可以清晰地反映出数据的趋势变化，也能够强调不同类别的数据间的差距对比。",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/aapl.json',\n  },\n  // 配置视觉通道\n  encode: {\n    x: (d) => new Date(d.date), // 配置x通道\n    y: 'close', // 配置y通道\n    shape: 'area', // 配置shape通道，默认为'area'的时候可以不写。可选'area', 'smooth', 'hvh', 'vh', 'hv'\n  },\n  // 配置样式\n  style: {\n    fill: 'l(270) 0:#ffffff 0.5:#7ec2f3 1:#1890ff', // 配置面积图填充颜色为渐变色\n    fillOpacity: 0.9, // 配置area标记的填充透明度为 0.9\n  },\n  // 配置坐标系\n  coordinate: {},\n});\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"更多的案例，可以查看",paraId:4,tocIndex:0},{value:"图表示例 - 面积图",paraId:5,tocIndex:0},{value:"页面。",paraId:4,tocIndex:0},{value:"属性",paraId:6,tocIndex:1},{value:"描述",paraId:6,tocIndex:1},{value:"类型",paraId:6,tocIndex:1},{value:"默认值",paraId:6,tocIndex:1},{value:"必选",paraId:6,tocIndex:1},{value:"encode",paraId:6,tocIndex:1},{value:"配置 ",paraId:6,tocIndex:1},{value:"area",paraId:6,tocIndex:1},{value:" 标记的视觉通道，包括",paraId:6,tocIndex:1},{value:"x",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"y",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"color",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"shape",paraId:6,tocIndex:1},{value:"等，用于指定视觉元素属性和数据之间的关系",paraId:6,tocIndex:1},{value:"encode",paraId:7,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"✓",paraId:6,tocIndex:1},{value:"coordinate",paraId:6,tocIndex:1},{value:"配置 ",paraId:6,tocIndex:1},{value:"area",paraId:6,tocIndex:1},{value:" 标记的坐标系，坐标系会执行一系列点转换，从而改变标记的空间展示形式",paraId:6,tocIndex:1},{value:"coordinate",paraId:8,tocIndex:1},{value:"{type: 'cartesian' }",paraId:6,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:"配置 ",paraId:6,tocIndex:1},{value:"area",paraId:6,tocIndex:1},{value:" 标记的图形样式",paraId:6,tocIndex:1},{value:"style",paraId:9,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"配置 ",paraId:10,tocIndex:2},{value:"area",paraId:10,tocIndex:2},{value:" 标记的视觉通道。",paraId:10,tocIndex:2},{value:"属性",paraId:11,tocIndex:2},{value:"描述",paraId:11,tocIndex:2},{value:"类型",paraId:11,tocIndex:2},{value:"默认值",paraId:11,tocIndex:2},{value:"必选",paraId:11,tocIndex:2},{value:"x",paraId:11,tocIndex:2},{value:"绑定 ",paraId:11,tocIndex:2},{value:"area",paraId:11,tocIndex:2},{value:" 标记的 ",paraId:11,tocIndex:2},{value:"x",paraId:11,tocIndex:2},{value:" 属性通道，一般是 ",paraId:11,tocIndex:2},{value:"data",paraId:11,tocIndex:2},{value:" 中的时间或有序名词字段",paraId:11,tocIndex:2},{value:"encode",paraId:12,tocIndex:2},{value:"-",paraId:11,tocIndex:2},{value:"✓",paraId:11,tocIndex:2},{value:"y",paraId:11,tocIndex:2},{value:"绑定 ",paraId:11,tocIndex:2},{value:"area",paraId:11,tocIndex:2},{value:" 标记的 ",paraId:11,tocIndex:2},{value:"y",paraId:11,tocIndex:2},{value:" 属性通道，一般是 ",paraId:11,tocIndex:2},{value:"data",paraId:11,tocIndex:2},{value:" 中的数值或数组字段",paraId:11,tocIndex:2},{value:"encode",paraId:13,tocIndex:2},{value:"-",paraId:11,tocIndex:2},{value:"✓",paraId:11,tocIndex:2},{value:"color",paraId:11,tocIndex:2},{value:"绑定 ",paraId:11,tocIndex:2},{value:"area",paraId:11,tocIndex:2},{value:" 标记的 ",paraId:11,tocIndex:2},{value:"color",paraId:11,tocIndex:2},{value:" 属性通道，如果将数据字段映射到颜色通道，会对数据进行分组，将数据拆分成多个不同颜色的区域，一般用来配置堆叠面积图",paraId:11,tocIndex:2},{value:"encode",paraId:14,tocIndex:2},{value:"-",paraId:11,tocIndex:2},{value:"shape",paraId:11,tocIndex:2},{value:"绑定 ",paraId:11,tocIndex:2},{value:"area",paraId:11,tocIndex:2},{value:" 标记的 ",paraId:11,tocIndex:2},{value:"shape",paraId:11,tocIndex:2},{value:" 属性通道，改变图形标记的绘制形状",paraId:11,tocIndex:2},{value:"area",paraId:11,tocIndex:2},{value:" | ",paraId:11,tocIndex:2},{value:"smooth",paraId:11,tocIndex:2},{value:" | ",paraId:11,tocIndex:2},{value:"vh",paraId:11,tocIndex:2},{value:" | ",paraId:11,tocIndex:2},{value:"hv",paraId:11,tocIndex:2},{value:" | ",paraId:11,tocIndex:2},{value:"hvh",paraId:11,tocIndex:2},{value:"area",paraId:11,tocIndex:2},{value:"area",paraId:15,tocIndex:3},{value:" 标记的位置视觉通道需要 ",paraId:15,tocIndex:3},{value:"x",paraId:15,tocIndex:3},{value:", ",paraId:15,tocIndex:3},{value:"y",paraId:15,tocIndex:3},{value:" 两个字段的值，支持的数据格式有以下两种：",paraId:15,tocIndex:3},{value:"x",paraId:16,tocIndex:3},{value:", ",paraId:16,tocIndex:3},{value:"y",paraId:16,tocIndex:3},{value:" 都是数值（分类、连续），由于面积图表示的数据的趋势，所以尽量避免 ",paraId:16,tocIndex:3},{value:"x",paraId:16,tocIndex:3},{value:" 轴对应的字段是无序的分类类型。",paraId:16,tocIndex:3},{value:"x",paraId:16,tocIndex:3},{value:" 是数值（分类、连续），",paraId:16,tocIndex:3},{value:"y",paraId:16,tocIndex:3},{value:" 是数组，表示一个区间值",paraId:16,tocIndex:3},{value:"x 通道绑定的值",paraId:17,tocIndex:3},{value:"y 通道绑定的值",paraId:17,tocIndex:3},{value:"解释",paraId:17,tocIndex:3},{value:"数值",paraId:17,tocIndex:3},{value:"数值",paraId:17,tocIndex:3},{value:"一般的面积图",paraId:17,tocIndex:3},{value:"数值",paraId:17,tocIndex:3},{value:"数组",paraId:17,tocIndex:3},{value:"堆叠面积图和区间面积图",paraId:17,tocIndex:3},{value:"color",paraId:18,tocIndex:4},{value:" 视觉通道影响 ",paraId:18,tocIndex:4},{value:"area",paraId:18,tocIndex:4},{value:" 图形标记包围区域的填充颜色。",paraId:18,tocIndex:4},{value:"area",paraId:18,tocIndex:4},{value:" 标记中单个区域仅能使用一种颜色（或者渐变色），但如果将数据字段映射到颜色通道，会对数据进行分组，将数据拆分成多个区域：",paraId:18,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  data: [\n    { country: 'Asia', year: '1750', value: 502 },\n    { country: 'Asia', year: '1800', value: 635 },\n    { country: 'Asia', year: '1850', value: 809 },\n    { country: 'Asia', year: '1900', value: 947 },\n    { country: 'Asia', year: '1950', value: 1402 },\n    { country: 'Asia', year: '1999', value: 3634 },\n    { country: 'Asia', year: '2050', value: 5268 },\n    { country: 'Africa', year: '1750', value: 106 },\n    { country: 'Africa', year: '1800', value: 107 },\n    { country: 'Africa', year: '1850', value: 111 },\n    { country: 'Africa', year: '1900', value: 133 },\n    { country: 'Africa', year: '1950', value: 221 },\n    { country: 'Africa', year: '1999', value: 767 },\n    { country: 'Africa', year: '2050', value: 1766 },\n    { country: 'Europe', year: '1750', value: 163 },\n    { country: 'Europe', year: '1800', value: 203 },\n    { country: 'Europe', year: '1850', value: 276 },\n    { country: 'Europe', year: '1900', value: 408 },\n    { country: 'Europe', year: '1950', value: 547 },\n    { country: 'Europe', year: '1999', value: 729 },\n    { country: 'Europe', year: '2050', value: 628 },\n  ],\n  encode: {\n    x: 'year', // 配置x通道\n    y: 'value', // 配置y通道\n    color: 'country', // 配置color通道\n  },\n  style: { fillOpacity: 0.3 }, // 配置area标记的填充透明度为 0.3\n});\n\nchart.render();\n",paraId:19,tocIndex:4},{value:"配置图形转换",paraId:20,tocIndex:4},{value:"transform",paraId:20,tocIndex:4},{value:"中的 ",paraId:20,tocIndex:4},{value:"stackY",paraId:21,tocIndex:4},{value:" ，可以对分组的区域进行堆叠，则形成堆叠面积图，避免因为重叠导致的信息模糊：",paraId:20,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  data: [\n    { country: 'Asia', year: '1750', value: 502 },\n    { country: 'Asia', year: '1800', value: 635 },\n    { country: 'Asia', year: '1850', value: 809 },\n    { country: 'Asia', year: '1900', value: 947 },\n    { country: 'Asia', year: '1950', value: 1402 },\n    { country: 'Asia', year: '1999', value: 3634 },\n    { country: 'Asia', year: '2050', value: 5268 },\n    { country: 'Africa', year: '1750', value: 106 },\n    { country: 'Africa', year: '1800', value: 107 },\n    { country: 'Africa', year: '1850', value: 111 },\n    { country: 'Africa', year: '1900', value: 133 },\n    { country: 'Africa', year: '1950', value: 221 },\n    { country: 'Africa', year: '1999', value: 767 },\n    { country: 'Africa', year: '2050', value: 1766 },\n    { country: 'Europe', year: '1750', value: 163 },\n    { country: 'Europe', year: '1800', value: 203 },\n    { country: 'Europe', year: '1850', value: 276 },\n    { country: 'Europe', year: '1900', value: 408 },\n    { country: 'Europe', year: '1950', value: 547 },\n    { country: 'Europe', year: '1999', value: 729 },\n    { country: 'Europe', year: '2050', value: 628 },\n  ],\n  encode: {\n    x: 'year', // 配置x通道\n    y: 'value', // 配置y通道\n    color: 'country', // 配置color通道\n  },\n  transform: [{ type: 'stackY' }], // 按照指定通道分组，对每组的 y 和 y1 通道进行堆叠，实现堆叠效果\n  style: { fillOpacity: 0.3 }, // 配置area标记的填充透明度为 0.3\n});\n\nchart.render();\n",paraId:22,tocIndex:4},{value:"area",paraId:23,tocIndex:5},{value:" 标记的支持的形状如下：",paraId:23,tocIndex:5},{value:"形状",paraId:24,tocIndex:5},{value:"描述",paraId:24,tocIndex:5},{value:"示例",paraId:24,tocIndex:5},{value:"area",paraId:24,tocIndex:5},{value:"绘制直线连接的面积图",paraId:24,tocIndex:5},{value:"smooth",paraId:24,tocIndex:5},{value:"绘制平滑曲线的面积图",paraId:24,tocIndex:5},{value:"vh",paraId:24,tocIndex:5},{value:"绘制阶梯面积图，先竖线后横线连接",paraId:24,tocIndex:5},{value:"hv",paraId:24,tocIndex:5},{value:"绘制阶梯面积图，先横线后竖线连接",paraId:24,tocIndex:5},{value:"hvh",paraId:24,tocIndex:5},{value:"绘制阶梯面积图，竖横竖，中点连接",paraId:24,tocIndex:5},{value:"area",paraId:25,tocIndex:6},{value:" 图形标记在不同坐标系下的展示有所差别。根据坐标系或坐标系转换的不同，可以绘制面积、雷达图等多种图表。",paraId:25,tocIndex:6},{value:"坐标系或坐标系转换",paraId:26,tocIndex:6},{value:"坐标系配置",paraId:26,tocIndex:6},{value:"图表",paraId:26,tocIndex:6},{value:"直角坐标系",paraId:26,tocIndex:6},{value:"{ type: 'cartesian' }",paraId:26,tocIndex:6},{value:"面积图等",paraId:26,tocIndex:6},{value:"极坐标系",paraId:26,tocIndex:6},{value:"{ type: 'polar' }",paraId:26,tocIndex:6},{value:"雷达图等",paraId:26,tocIndex:6},{value:"在",paraId:27,tocIndex:6},{value:"极坐标系",paraId:27,tocIndex:6},{value:"下面积图需要进行闭合。常用来绘制雷达图等。",paraId:27,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  data: [\n    { item: 'Design', type: 'a', score: 70 },\n    { item: 'Design', type: 'b', score: 30 },\n    { item: 'Development', type: 'a', score: 60 },\n    { item: 'Development', type: 'b', score: 70 },\n    { item: 'Marketing', type: 'a', score: 50 },\n    { item: 'Marketing', type: 'b', score: 60 },\n    { item: 'Users', type: 'a', score: 40 },\n    { item: 'Users', type: 'b', score: 50 },\n    { item: 'Test', type: 'a', score: 60 },\n    { item: 'Test', type: 'b', score: 70 },\n    { item: 'Language', type: 'a', score: 70 },\n    { item: 'Language', type: 'b', score: 50 },\n    { item: 'Technology', type: 'a', score: 50 },\n    { item: 'Technology', type: 'b', score: 40 },\n    { item: 'Support', type: 'a', score: 30 },\n    { item: 'Support', type: 'b', score: 40 },\n    { item: 'Sales', type: 'a', score: 60 },\n    { item: 'Sales', type: 'b', score: 40 },\n    { item: 'UX', type: 'a', score: 50 },\n    { item: 'UX', type: 'b', score: 60 },\n  ],\n  encode: { x: 'item', y: 'score', color: 'type' },\n  coordinate: { type: 'polar' }, // 配置坐标系为极坐标系，用于绘制雷达图\n  style: { fillOpacity: 0.5 },\n  axis: { x: { grid: true }, y: { zIndex: 1, title: false } }, // 配置图表组件 - 坐标轴\n  scale: { x: { padding: 0.5, align: 0 }, y: { tickCount: 5 } }, // 配置比例尺，使图表显示效果更好\n});\n\nchart.render();\n",paraId:28,tocIndex:6},{value:"配置 ",paraId:29,tocIndex:7},{value:"area",paraId:29,tocIndex:7},{value:" 标记的样式。",paraId:29,tocIndex:7},{value:"属性",paraId:30,tocIndex:7},{value:"描述",paraId:30,tocIndex:7},{value:"类型",paraId:30,tocIndex:7},{value:"默认值",paraId:30,tocIndex:7},{value:"必选",paraId:30,tocIndex:7},{value:"connect",paraId:30,tocIndex:7},{value:"是否用 ",paraId:30,tocIndex:7},{value:"connector",paraId:30,tocIndex:7},{value:" 图形连接空值",paraId:30,tocIndex:7},{value:"boolean",paraId:30,tocIndex:7},{value:"false",paraId:30,tocIndex:7},{value:"defined",paraId:30,tocIndex:7},{value:"决定数据是否为空值",paraId:30,tocIndex:7},{value:"(d) => boolean",paraId:30,tocIndex:7},{value:"(d) => !Number.isNaN(d) && d !== undefined && d !== null",paraId:30,tocIndex:7},{value:"connectFill",paraId:30,tocIndex:7},{value:"connector",paraId:30,tocIndex:7},{value:" 图形填充色，会被 ",paraId:30,tocIndex:7},{value:"area",paraId:30,tocIndex:7},{value:"标记整体填充色 ",paraId:30,tocIndex:7},{value:"fill",paraId:30,tocIndex:7},{value:" 覆盖",paraId:30,tocIndex:7},{value:"string | (d, index, data, column) => string",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"connectFillOpacity",paraId:30,tocIndex:7},{value:"connector",paraId:30,tocIndex:7},{value:" 图形填充透明度",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"connectStroke",paraId:30,tocIndex:7},{value:"connector",paraId:30,tocIndex:7},{value:" 图形的描边",paraId:30,tocIndex:7},{value:"string | (d, index, data, column) => string",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"connectStrokeOpacity",paraId:30,tocIndex:7},{value:"connector",paraId:30,tocIndex:7},{value:" 图形描边透明度",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"connectLineWidth",paraId:30,tocIndex:7},{value:"connector",paraId:30,tocIndex:7},{value:" 图形描边的宽度",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"connectLineDash",paraId:30,tocIndex:7},{value:"connector",paraId:30,tocIndex:7},{value:" 图形描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:30,tocIndex:7},{value:"[number,number] | (d, index, data, column) => [number , number]",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"connectOpacity",paraId:30,tocIndex:7},{value:"connector",paraId:30,tocIndex:7},{value:" 图形的整体透明度",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"connectShadowColor",paraId:30,tocIndex:7},{value:"connector",paraId:30,tocIndex:7},{value:" 图形阴影颜色",paraId:30,tocIndex:7},{value:"string | (d, index, data, column) => string",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"connectShadowBlur",paraId:30,tocIndex:7},{value:"connector",paraId:30,tocIndex:7},{value:" 图形阴影的高斯模糊系数",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"connectShadowOffsetX",paraId:30,tocIndex:7},{value:"设置阴影距",paraId:30,tocIndex:7},{value:"connector",paraId:30,tocIndex:7},{value:" 图形的水平距离",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"connectShadowOffsetY",paraId:30,tocIndex:7},{value:"设置阴影距",paraId:30,tocIndex:7},{value:"connector",paraId:30,tocIndex:7},{value:" 图形的垂直距离",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"connectCursor",paraId:30,tocIndex:7},{value:"connector",paraId:30,tocIndex:7},{value:" 图形鼠标样式。同 css 的鼠标样式。",paraId:30,tocIndex:7},{value:"string | (d, index, data, column) => string",paraId:30,tocIndex:7},{value:"default",paraId:30,tocIndex:7},{value:"fill",paraId:30,tocIndex:7},{value:"area",paraId:30,tocIndex:7},{value:" 图形填充色",paraId:30,tocIndex:7},{value:"string | (d, index, data, column) => string",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"fillOpacity",paraId:30,tocIndex:7},{value:"area",paraId:30,tocIndex:7},{value:" 图形填充透明度",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"0.85",paraId:30,tocIndex:7},{value:"stroke",paraId:30,tocIndex:7},{value:"area",paraId:30,tocIndex:7},{value:" 图形的描边",paraId:30,tocIndex:7},{value:"string | (d, index, data, column) => string",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"strokeOpacity",paraId:30,tocIndex:7},{value:"area",paraId:30,tocIndex:7},{value:" 图形的描边透明度",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"lineWidth",paraId:30,tocIndex:7},{value:"area",paraId:30,tocIndex:7},{value:" 图形描边的宽度",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"0",paraId:30,tocIndex:7},{value:"lineDash",paraId:30,tocIndex:7},{value:"area",paraId:30,tocIndex:7},{value:" 图形描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:30,tocIndex:7},{value:"[number,number] | (d, index, data, column) => [number , number]",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"opacity",paraId:30,tocIndex:7},{value:"area",paraId:30,tocIndex:7},{value:" 图形的整体透明度",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"shadowColor",paraId:30,tocIndex:7},{value:"area",paraId:30,tocIndex:7},{value:" 图形阴影颜色",paraId:30,tocIndex:7},{value:"string | (d, index, data, column) => string",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"shadowBlur",paraId:30,tocIndex:7},{value:"area",paraId:30,tocIndex:7},{value:" 图形阴影的高斯模糊系数",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"shadowOffsetX",paraId:30,tocIndex:7},{value:"设置阴影距",paraId:30,tocIndex:7},{value:"area",paraId:30,tocIndex:7},{value:" 图形的水平距离",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"shadowOffsetY",paraId:30,tocIndex:7},{value:"设置阴影距",paraId:30,tocIndex:7},{value:"area",paraId:30,tocIndex:7},{value:" 图形的垂直距离",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"cursor",paraId:30,tocIndex:7},{value:"area",paraId:30,tocIndex:7},{value:" 图形的鼠标样式。同 css 的鼠标样式。",paraId:30,tocIndex:7},{value:"string | (d, index, data, column) => string",paraId:30,tocIndex:7},{value:"default",paraId:30,tocIndex:7},{value:"尝试一下：",paraId:31,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'area',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/aapl.json',\n  },\n  encode: {\n    x: (d) => new Date(d.date),\n    // Mock missing data. Set NaN from Jan. to Mar.\n    y: (d) => (new Date(d.date).getUTCMonth() <= 3 ? NaN : d.close),\n  },\n  style: {\n    connect: true,\n    // 配置connector样式\n    connectFill: 'grey', // 被fill的颜色覆盖\n    connectFillOpacity: 0.15,\n    // 配置area样式\n    fill: 'l(270) 0:#ffffff 0.5:#7ec2f3 1:#1890ff',\n    opacity: 0.9,\n    stroke: 'yellow',\n  },\n});\n\nchart.render();\n",paraId:32,tocIndex:7},{value:"使用 connect 功能时，怎么决定什么样的数据为空值？",paraId:33,tocIndex:8},{value:"可以使用 ",paraId:34,tocIndex:8},{value:"defined",paraId:34,tocIndex:8},{value:" 配置去决定是否为非空值，默认 NaN、undefined、null 为空值。假设需要数据为 ",paraId:34,tocIndex:8},{value:"0",paraId:34,tocIndex:8},{value:" 的时候是空值连接。",paraId:34,tocIndex:8},{value:"chart\n  .area()\n  // ...\n  .style('defined', (v) => v === 0);\n",paraId:35,tocIndex:8}]},8868:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(62);const t=[{value:"box",paraId:0,tocIndex:0},{value:" 标记用于绘制箱线图（boxplot），又称盒须图、盒式图，是一种用于展示一组数据分布情况的统计图表。箱线图通常包含以下几个关键统计值：",paraId:0,tocIndex:0},{value:"最小值",paraId:1,tocIndex:0},{value:"：数据集中的最小值（不包括异常值）",paraId:1,tocIndex:0},{value:"下四分位数（Q1）",paraId:1,tocIndex:0},{value:"：数据集中排在 25%位置的值",paraId:1,tocIndex:0},{value:"中位数（Q2）",paraId:1,tocIndex:0},{value:"：数据集中排在 50%位置的值",paraId:1,tocIndex:0},{value:"上四分位数（Q3）",paraId:1,tocIndex:0},{value:"：数据集中排在 75%位置的值",paraId:1,tocIndex:0},{value:"最大值",paraId:1,tocIndex:0},{value:"：数据集中的最大值（不包括异常值）",paraId:1,tocIndex:0},{value:"box",paraId:2,tocIndex:0},{value:" 标记的特殊之处在于，它的 ",paraId:2,tocIndex:0},{value:"y",paraId:2,tocIndex:0},{value:" 通道对应的数据是一个包含这些统计值的数组，G2 会将这些数据映射为箱线图所需的 14 个点集合，形成完整的箱线图图形。",paraId:2,tocIndex:0},{value:"box",paraId:3,tocIndex:0},{value:" 标记与 ",paraId:3,tocIndex:0},{value:"boxplot",paraId:4,tocIndex:0},{value:" 标记的区别在于：",paraId:3,tocIndex:0},{value:"box",paraId:5,tocIndex:0},{value:" 是原子标记，需要开发者手动指定 5 个统计点的数据",paraId:5,tocIndex:0},{value:"boxplot",paraId:5,tocIndex:0},{value:" 是高阶标记，自带数据分组和数据统计聚合功能",paraId:5,tocIndex:0},{value:"因此，",paraId:6,tocIndex:0},{value:"box",paraId:6,tocIndex:0},{value:" 更适用于后端对超大数据进行计算和统计之后的可视化展示，而 ",paraId:6,tocIndex:0},{value:"boxplot",paraId:6,tocIndex:0},{value:" 更适合用于前端数据的探索和分析过程。",paraId:6,tocIndex:0},{value:"box",paraId:7,tocIndex:1},{value:" 标记内部会将数据映射为以下 14 个点的集合，形成完整的箱线图：",paraId:7,tocIndex:1},{value:"p0           p2          p1\n   ──────────┬──────────\n             │\n             │\n             │\n             │ p3\np4 ┌─────────┴──────────┐ p5\n   │                    │\n   │                    │\np8 ├────────────────────┤ p9\n   │                    │\n   │        p10         │\np7 └─────────┬──────────┘ p6\n             │\n             │\n             │\n  ───────────┴───────────\np12         p11           p13\n",paraId:8,tocIndex:1},{value:"属性",paraId:9,tocIndex:2},{value:"描述",paraId:9,tocIndex:2},{value:"类型",paraId:9,tocIndex:2},{value:"默认值",paraId:9,tocIndex:2},{value:"必选",paraId:9,tocIndex:2},{value:"encode",paraId:9,tocIndex:2},{value:"配置 ",paraId:9,tocIndex:2},{value:"box",paraId:9,tocIndex:2},{value:" 标记的视觉通道，包括 ",paraId:9,tocIndex:2},{value:"x",paraId:9,tocIndex:2},{value:"、",paraId:9,tocIndex:2},{value:"y",paraId:9,tocIndex:2},{value:"、",paraId:9,tocIndex:2},{value:"color",paraId:9,tocIndex:2},{value:"、",paraId:9,tocIndex:2},{value:"shape",paraId:9,tocIndex:2},{value:" 等",paraId:9,tocIndex:2},{value:"encode",paraId:10,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"✓",paraId:9,tocIndex:2},{value:"coordinate",paraId:9,tocIndex:2},{value:"配置 ",paraId:9,tocIndex:2},{value:"box",paraId:9,tocIndex:2},{value:" 标记的坐标系，坐标系会执行一系列点转换，从而改变标记的空间展示形式",paraId:9,tocIndex:2},{value:"coordinate",paraId:11,tocIndex:2},{value:"{type: 'cartesian' }",paraId:9,tocIndex:2},{value:"style",paraId:9,tocIndex:2},{value:"配置 ",paraId:9,tocIndex:2},{value:"box",paraId:9,tocIndex:2},{value:" 标记的图形样式",paraId:9,tocIndex:2},{value:"style",paraId:12,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"配置 ",paraId:13,tocIndex:3},{value:"box",paraId:13,tocIndex:3},{value:" 标记的视觉通道。",paraId:13,tocIndex:3},{value:"属性",paraId:14,tocIndex:3},{value:"描述",paraId:14,tocIndex:3},{value:"类型",paraId:14,tocIndex:3},{value:"默认值",paraId:14,tocIndex:3},{value:"必选",paraId:14,tocIndex:3},{value:"x",paraId:14,tocIndex:3},{value:"绑定 ",paraId:14,tocIndex:3},{value:"box",paraId:14,tocIndex:3},{value:" 标记的 ",paraId:14,tocIndex:3},{value:"x",paraId:14,tocIndex:3},{value:" 属性通道，通常是分类字段",paraId:14,tocIndex:3},{value:"encode",paraId:15,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"✓",paraId:14,tocIndex:3},{value:"y",paraId:14,tocIndex:3},{value:"绑定 ",paraId:14,tocIndex:3},{value:"box",paraId:14,tocIndex:3},{value:" 标记的 ",paraId:14,tocIndex:3},{value:"y",paraId:14,tocIndex:3},{value:" 属性通道，通常是包含 5 个统计值的数组，按顺序为：最小值、下四分位数、中位数、上四分位数、最大值",paraId:14,tocIndex:3},{value:"encode",paraId:16,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"✓",paraId:14,tocIndex:3},{value:"color",paraId:14,tocIndex:3},{value:"绑定 ",paraId:14,tocIndex:3},{value:"box",paraId:14,tocIndex:3},{value:" 标记的 ",paraId:14,tocIndex:3},{value:"color",paraId:14,tocIndex:3},{value:" 属性通道，用于区分不同类别的箱线图",paraId:14,tocIndex:3},{value:"encode",paraId:17,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"shape",paraId:14,tocIndex:3},{value:"绑定 ",paraId:14,tocIndex:3},{value:"box",paraId:14,tocIndex:3},{value:" 标记的 ",paraId:14,tocIndex:3},{value:"shape",paraId:14,tocIndex:3},{value:" 属性通道，可选值为 ",paraId:14,tocIndex:3},{value:"box",paraId:14,tocIndex:3},{value:"、",paraId:14,tocIndex:3},{value:"violin",paraId:14,tocIndex:3},{value:"'box'",paraId:14,tocIndex:3},{value:" | ",paraId:14,tocIndex:3},{value:"'violin'",paraId:14,tocIndex:3},{value:"'box'",paraId:14,tocIndex:3},{value:"series",paraId:14,tocIndex:3},{value:"绑定 ",paraId:14,tocIndex:3},{value:"box",paraId:14,tocIndex:3},{value:" 标记的 ",paraId:14,tocIndex:3},{value:"series",paraId:14,tocIndex:3},{value:" 属性通道，用于分组显示箱线图",paraId:14,tocIndex:3},{value:"encode",paraId:18,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"box",paraId:19,tocIndex:4},{value:" 标记在不同坐标系下的展示有所差别。根据坐标系或坐标系转换的不同，可以绘制不同形式的箱线图。",paraId:19,tocIndex:4},{value:"坐标系或坐标系转换",paraId:20,tocIndex:4},{value:"坐标系配置",paraId:20,tocIndex:4},{value:"图表",paraId:20,tocIndex:4},{value:"直角坐标系",paraId:20,tocIndex:4},{value:"{ type: 'cartesian' }",paraId:20,tocIndex:4},{value:"标准箱线图",paraId:20,tocIndex:4},{value:"极坐标系",paraId:20,tocIndex:4},{value:"{ type: 'polar' }",paraId:20,tocIndex:4},{value:"极坐标箱线图",paraId:20,tocIndex:4},{value:"配置 ",paraId:21,tocIndex:5},{value:"box",paraId:21,tocIndex:5},{value:" 标记的图形样式。",paraId:21,tocIndex:5},{value:"box",paraId:21,tocIndex:5},{value:" 标记支持两种形状：",paraId:21,tocIndex:5},{value:"box",paraId:21,tocIndex:5},{value:"（默认）和 ",paraId:21,tocIndex:5},{value:"violin",paraId:21,tocIndex:5},{value:"。",paraId:21,tocIndex:5},{value:"属性",paraId:22,tocIndex:5},{value:"描述",paraId:22,tocIndex:5},{value:"类型",paraId:22,tocIndex:5},{value:"默认值",paraId:22,tocIndex:5},{value:"必选",paraId:22,tocIndex:5},{value:"fill",paraId:22,tocIndex:5},{value:"图形的填充色",paraId:22,tocIndex:5},{value:"string",paraId:22,tocIndex:5},{value:" | ",paraId:22,tocIndex:5},{value:"(datum, index, data, column) => string",paraId:22,tocIndex:5},{value:"-",paraId:22,tocIndex:5},{value:"fillOpacity",paraId:22,tocIndex:5},{value:"图形的填充透明度",paraId:22,tocIndex:5},{value:"number",paraId:22,tocIndex:5},{value:" | ",paraId:22,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:22,tocIndex:5},{value:"0.95",paraId:22,tocIndex:5},{value:"stroke",paraId:22,tocIndex:5},{value:"图形的描边颜色",paraId:22,tocIndex:5},{value:"string",paraId:22,tocIndex:5},{value:" | ",paraId:22,tocIndex:5},{value:"(datum, index, data, column) => string",paraId:22,tocIndex:5},{value:"#000",paraId:22,tocIndex:5},{value:"strokeOpacity",paraId:22,tocIndex:5},{value:"描边透明度",paraId:22,tocIndex:5},{value:"number",paraId:22,tocIndex:5},{value:" | ",paraId:22,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:22,tocIndex:5},{value:"-",paraId:22,tocIndex:5},{value:"lineWidth",paraId:22,tocIndex:5},{value:"图形描边的宽度",paraId:22,tocIndex:5},{value:"number",paraId:22,tocIndex:5},{value:" | ",paraId:22,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:22,tocIndex:5},{value:"1",paraId:22,tocIndex:5},{value:"lineDash",paraId:22,tocIndex:5},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离",paraId:22,tocIndex:5},{value:"[number,number]",paraId:22,tocIndex:5},{value:" | ",paraId:22,tocIndex:5},{value:"(datum, index, data, column) => [number, number]",paraId:22,tocIndex:5},{value:"-",paraId:22,tocIndex:5},{value:"opacity",paraId:22,tocIndex:5},{value:"图形的整体透明度",paraId:22,tocIndex:5},{value:"number",paraId:22,tocIndex:5},{value:" | ",paraId:22,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:22,tocIndex:5},{value:"-",paraId:22,tocIndex:5},{value:"shadowColor",paraId:22,tocIndex:5},{value:"图形阴影颜色",paraId:22,tocIndex:5},{value:"string",paraId:22,tocIndex:5},{value:" | ",paraId:22,tocIndex:5},{value:"(datum, index, data, column) => string",paraId:22,tocIndex:5},{value:"-",paraId:22,tocIndex:5},{value:"shadowBlur",paraId:22,tocIndex:5},{value:"图形阴影的高斯模糊系数",paraId:22,tocIndex:5},{value:"number",paraId:22,tocIndex:5},{value:" | ",paraId:22,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:22,tocIndex:5},{value:"-",paraId:22,tocIndex:5},{value:"shadowOffsetX",paraId:22,tocIndex:5},{value:"设置阴影距图形的水平距离",paraId:22,tocIndex:5},{value:"number",paraId:22,tocIndex:5},{value:" | ",paraId:22,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:22,tocIndex:5},{value:"-",paraId:22,tocIndex:5},{value:"shadowOffsetY",paraId:22,tocIndex:5},{value:"设置阴影距图形的垂直距离",paraId:22,tocIndex:5},{value:"number",paraId:22,tocIndex:5},{value:" | ",paraId:22,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:22,tocIndex:5},{value:"-",paraId:22,tocIndex:5},{value:"cursor",paraId:22,tocIndex:5},{value:"鼠标样式。同 CSS 的鼠标样式",paraId:22,tocIndex:5},{value:"string",paraId:22,tocIndex:5},{value:" | ",paraId:22,tocIndex:5},{value:"(datum, index, data, column) => string",paraId:22,tocIndex:5},{value:"'default'",paraId:22,tocIndex:5},{value:"使用 ",paraId:23,tocIndex:7},{value:"box",paraId:23,tocIndex:7},{value:" 标记可以创建基础箱线图，需要提供包含 5 个统计值的数组数据。",paraId:23,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'box',\n  data: [\n    { x: 'Oceania', y: [1, 9, 16, 22, 24] },\n    { x: 'East Europe', y: [1, 5, 8, 12, 16] },\n    { x: 'Australia', y: [1, 8, 12, 19, 26] },\n    { x: 'South America', y: [2, 8, 12, 21, 28] },\n    { x: 'North Africa', y: [1, 8, 14, 18, 24] },\n    { x: 'North America', y: [3, 10, 17, 28, 30] },\n    { x: 'West Europe', y: [1, 7, 10, 17, 22] },\n    { x: 'West Africa', y: [1, 6, 8, 13, 16] },\n  ],\n  encode: {\n    x: 'x',\n    y: 'y',\n    color: 'x',\n  },\n  scale: {\n    x: { paddingInner: 0.6, paddingOuter: 0.3 },\n    y: { zero: true },\n  },\n  legend: false,\n  style: {\n    stroke: 'black',\n  },\n});\n\nchart.render();\n",paraId:24,tocIndex:7},{value:"使用 ",paraId:25,tocIndex:8},{value:"series",paraId:25,tocIndex:8},{value:" 通道可以创建分组箱线图，对不同类别的数据进行比较。",paraId:25,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'box',\n  data: [\n    { Species: 'I. setosa', type: 'SepalLength', bin: [4.3, 4.8, 5, 5.2, 5.8] },\n    {\n      Species: 'I. setosa',\n      type: 'SepalWidth',\n      bin: [2.3, 3.2, 3.4, 3.7, 4.4],\n    },\n    { Species: 'I. setosa', type: 'PetalLength', bin: [1, 1.4, 1.5, 1.6, 1.9] },\n    {\n      Species: 'I. setosa',\n      type: 'PetalWidth',\n      bin: [0.1, 0.2, 0.2, 0.3, 0.6],\n    },\n    {\n      Species: 'I. versicolor',\n      type: 'SepalLength',\n      bin: [4.9, 5.6, 5.9, 6.3, 7],\n    },\n    {\n      Species: 'I. versicolor',\n      type: 'SepalWidth',\n      bin: [2, 2.5, 2.8, 3, 3.4],\n    },\n    {\n      Species: 'I. versicolor',\n      type: 'PetalLength',\n      bin: [3, 4, 4.35, 4.6, 5.1],\n    },\n    {\n      Species: 'I. versicolor',\n      type: 'PetalWidth',\n      bin: [1, 1.2, 1.3, 1.5, 1.8],\n    },\n    {\n      Species: 'I. virginica',\n      type: 'SepalLength',\n      bin: [4.9, 6.2, 6.5, 6.9, 7.9],\n    },\n    {\n      Species: 'I. virginica',\n      type: 'SepalWidth',\n      bin: [2.2, 2.8, 3, 3.2, 3.8],\n    },\n    {\n      Species: 'I. virginica',\n      type: 'PetalLength',\n      bin: [4.5, 5.1, 5.55, 5.9, 6.9],\n    },\n    {\n      Species: 'I. virginica',\n      type: 'PetalWidth',\n      bin: [1.4, 1.8, 2, 2.3, 2.5],\n    },\n  ],\n  encode: {\n    x: 'type',\n    y: 'bin',\n    series: 'Species',\n    color: 'Species',\n  },\n  scale: {\n    x: { paddingInner: 0.2, paddingOuter: 0.1 },\n    y: { zero: true },\n    series: { paddingInner: 0.3, paddingOuter: 0.1 },\n  },\n  style: {\n    stroke: 'black',\n  },\n  tooltip: [\n    { name: 'min', channel: 'y' },\n    { name: 'q1', channel: 'y1' },\n    { name: 'q2', channel: 'y2' },\n    { name: 'q3', channel: 'y3' },\n    { name: 'max', channel: 'y4' },\n  ],\n});\n\nchart.render();\n",paraId:26,tocIndex:8},{value:"通过配置极坐标系，可以创建极坐标下的箱线图。",paraId:27,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'box',\n  data: [\n    { x: 'Oceania', y: [1, 9, 16, 22, 24] },\n    { x: 'East Europe', y: [1, 5, 8, 12, 16] },\n    { x: 'Australia', y: [1, 8, 12, 19, 26] },\n    { x: 'South America', y: [2, 8, 12, 21, 28] },\n    { x: 'North Africa', y: [1, 8, 14, 18, 24] },\n    { x: 'North America', y: [3, 10, 17, 28, 30] },\n    { x: 'West Europe', y: [1, 7, 10, 17, 22] },\n    { x: 'West Africa', y: [1, 6, 8, 13, 16] },\n  ],\n  coordinate: {\n    type: 'polar',\n    innerRadius: 0.2,\n  },\n  encode: {\n    x: 'x',\n    y: 'y',\n    color: 'x',\n  },\n  scale: {\n    x: { paddingInner: 0.6, paddingOuter: 0.3 },\n    y: { zero: true },\n  },\n  style: {\n    stroke: 'black',\n  },\n  axis: {\n    y: { tickCount: 5 },\n  },\n  tooltip: [\n    { name: 'min', channel: 'y' },\n    { name: 'q1', channel: 'y1' },\n    { name: 'q2', channel: 'y2' },\n    { name: 'q3', channel: 'y3' },\n    { name: 'max', channel: 'y4' },\n  ],\n  legend: false,\n});\n\nchart.render();\n",paraId:28,tocIndex:9},{value:"G2 提供了多种方式来进行数据分布的分析：",paraId:29,tocIndex:11},{value:"使用 ",paraId:30,tocIndex:11},{value:"transform",paraId:30,tocIndex:11},{value:" 进行数据转换，可以实现对数据进行统计分析，计算出最小值、下四分位数、中位数、上四分位数、最大值等统计值：",paraId:30,tocIndex:11},{value:"chart.box().data({\n  type: 'connector',\n  value: [\n    /* your detail data */\n  ],\n  callback: (data) => {\n    // 在这里对数据进行统计分析\n    // 可以使用自定义算法或第三方库\n    return data;\n  },\n});\n",paraId:31,tocIndex:11},{value:"使用社区提供的",paraId:32,tocIndex:11},{value:"算法库",paraId:32,tocIndex:11},{value:"进行数据统计。",paraId:32,tocIndex:11},{value:"直接使用 ",paraId:33,tocIndex:11},{value:"boxplot",paraId:34,tocIndex:11},{value:" 标记，它是一个高阶标记，自带数据分组和统计聚合功能，更适合前端数据的探索和分析：",paraId:33,tocIndex:11},{value:"chart.boxplot().data(data).encode('x', 'category').encode('y', 'value');\n",paraId:35,tocIndex:11}]},4481:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(63360);const t=[{value:"boxplot",paraId:0,tocIndex:0},{value:" 标记用于绘制箱线图（boxplot），又称盒须图、盒式图，是一种用于展示一组数据分布情况的统计图表。箱线图通常包含以下几个关键统计值：",paraId:0,tocIndex:0},{value:"最小值",paraId:1,tocIndex:0},{value:"：数据集中的最小值（不包括异常值）",paraId:1,tocIndex:0},{value:"下四分位数（Q1）",paraId:1,tocIndex:0},{value:"：数据集中排在 25%位置的值",paraId:1,tocIndex:0},{value:"中位数（Q2）",paraId:1,tocIndex:0},{value:"：数据集中排在 50%位置的值",paraId:1,tocIndex:0},{value:"上四分位数（Q3）",paraId:1,tocIndex:0},{value:"：数据集中排在 75%位置的值",paraId:1,tocIndex:0},{value:"最大值",paraId:1,tocIndex:0},{value:"：数据集中的最大值（不包括异常值）",paraId:1,tocIndex:0},{value:"异常值（Outliers）",paraId:1,tocIndex:0},{value:"：超出正常范围的数据点",paraId:1,tocIndex:0},{value:"boxplot",paraId:2,tocIndex:0},{value:" 和 ",paraId:2,tocIndex:0},{value:"box",paraId:3,tocIndex:0},{value:" 标记都可以用来绘制箱线图，但它们有以下区别：",paraId:2,tocIndex:0},{value:"boxplot",paraId:4,tocIndex:0},{value:" 是高阶标记，自带数据分组和数据统计聚合功能",paraId:4,tocIndex:0},{value:"box",paraId:4,tocIndex:0},{value:" 是原子标记，需要开发者手动指定 5 个点的数据",paraId:4,tocIndex:0},{value:"因此，",paraId:5,tocIndex:0},{value:"boxplot",paraId:5,tocIndex:0},{value:" 更适合用于前端数据的探索和分析过程，而 ",paraId:5,tocIndex:0},{value:"box",paraId:5,tocIndex:0},{value:" 更适用于后端对超大数据进行计算和统计之后的可视化展示。",paraId:5,tocIndex:0},{value:"属性",paraId:6,tocIndex:1},{value:"描述",paraId:6,tocIndex:1},{value:"类型",paraId:6,tocIndex:1},{value:"默认值",paraId:6,tocIndex:1},{value:"必选",paraId:6,tocIndex:1},{value:"encode",paraId:6,tocIndex:1},{value:"配置 ",paraId:6,tocIndex:1},{value:"boxplot",paraId:6,tocIndex:1},{value:" 标记的视觉通道，包括 ",paraId:6,tocIndex:1},{value:"x",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"y",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"color",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"shape",paraId:6,tocIndex:1},{value:" 等",paraId:6,tocIndex:1},{value:"encode",paraId:7,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"✓",paraId:6,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:"配置 ",paraId:6,tocIndex:1},{value:"boxplot",paraId:6,tocIndex:1},{value:" 标记的图形样式",paraId:6,tocIndex:1},{value:"style",paraId:8,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"point",paraId:6,tocIndex:1},{value:"是否显示异常点",paraId:6,tocIndex:1},{value:"boolean",paraId:6,tocIndex:1},{value:"true",paraId:6,tocIndex:1},{value:"配置 ",paraId:9,tocIndex:2},{value:"boxplot",paraId:9,tocIndex:2},{value:" 标记的视觉通道。",paraId:9,tocIndex:2},{value:"属性",paraId:10,tocIndex:2},{value:"描述",paraId:10,tocIndex:2},{value:"类型",paraId:10,tocIndex:2},{value:"默认值",paraId:10,tocIndex:2},{value:"必选",paraId:10,tocIndex:2},{value:"x",paraId:10,tocIndex:2},{value:"绑定 ",paraId:10,tocIndex:2},{value:"boxplot",paraId:10,tocIndex:2},{value:" 标记的 ",paraId:10,tocIndex:2},{value:"x",paraId:10,tocIndex:2},{value:" 属性通道，通常是分类字段",paraId:10,tocIndex:2},{value:"encode",paraId:11,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"✓",paraId:10,tocIndex:2},{value:"y",paraId:10,tocIndex:2},{value:"绑定 ",paraId:10,tocIndex:2},{value:"boxplot",paraId:10,tocIndex:2},{value:" 标记的 ",paraId:10,tocIndex:2},{value:"y",paraId:10,tocIndex:2},{value:" 属性通道，通常是数值字段，用于计算箱线图的统计值",paraId:10,tocIndex:2},{value:"encode",paraId:12,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"✓",paraId:10,tocIndex:2},{value:"color",paraId:10,tocIndex:2},{value:"绑定 ",paraId:10,tocIndex:2},{value:"boxplot",paraId:10,tocIndex:2},{value:" 标记的 ",paraId:10,tocIndex:2},{value:"color",paraId:10,tocIndex:2},{value:" 属性通道，用于区分不同类别的箱线图",paraId:10,tocIndex:2},{value:"encode",paraId:13,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"shape",paraId:10,tocIndex:2},{value:"绑定 ",paraId:10,tocIndex:2},{value:"boxplot",paraId:10,tocIndex:2},{value:" 标记的 ",paraId:10,tocIndex:2},{value:"shape",paraId:10,tocIndex:2},{value:" 属性通道，可选值为 ",paraId:10,tocIndex:2},{value:"box",paraId:10,tocIndex:2},{value:"、",paraId:10,tocIndex:2},{value:"violin",paraId:10,tocIndex:2},{value:"'box'",paraId:10,tocIndex:2},{value:" | ",paraId:10,tocIndex:2},{value:"'violin'",paraId:10,tocIndex:2},{value:"'box'",paraId:10,tocIndex:2},{value:"series",paraId:10,tocIndex:2},{value:"绑定 ",paraId:10,tocIndex:2},{value:"boxplot",paraId:10,tocIndex:2},{value:" 标记的 ",paraId:10,tocIndex:2},{value:"series",paraId:10,tocIndex:2},{value:" 属性通道，用于分组显示箱线图",paraId:10,tocIndex:2},{value:"encode",paraId:14,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"配置 ",paraId:15,tocIndex:3},{value:"boxplot",paraId:15,tocIndex:3},{value:" 标记的图形样式。",paraId:15,tocIndex:3},{value:"boxplot",paraId:15,tocIndex:3},{value:" 由两部分组成：箱体（box）和异常点（point）。因此，样式配置也分为两部分，分别以 ",paraId:15,tocIndex:3},{value:"box",paraId:15,tocIndex:3},{value:" 和 ",paraId:15,tocIndex:3},{value:"point",paraId:15,tocIndex:3},{value:" 为前缀。",paraId:15,tocIndex:3},{value:"属性",paraId:16,tocIndex:4},{value:"描述",paraId:16,tocIndex:4},{value:"类型",paraId:16,tocIndex:4},{value:"默认值",paraId:16,tocIndex:4},{value:"必选",paraId:16,tocIndex:4},{value:"boxFill",paraId:16,tocIndex:4},{value:"箱体的填充色",paraId:16,tocIndex:4},{value:"string",paraId:16,tocIndex:4},{value:" | ",paraId:16,tocIndex:4},{value:"(datum, index, data, column) => string",paraId:16,tocIndex:4},{value:"-",paraId:16,tocIndex:4},{value:"boxFillOpacity",paraId:16,tocIndex:4},{value:"箱体的填充透明度",paraId:16,tocIndex:4},{value:"number",paraId:16,tocIndex:4},{value:" | ",paraId:16,tocIndex:4},{value:"(datum, index, data, column) => number",paraId:16,tocIndex:4},{value:"0.95",paraId:16,tocIndex:4},{value:"boxStroke",paraId:16,tocIndex:4},{value:"箱体的描边颜色",paraId:16,tocIndex:4},{value:"string",paraId:16,tocIndex:4},{value:" | ",paraId:16,tocIndex:4},{value:"(datum, index, data, column) => string",paraId:16,tocIndex:4},{value:"#000",paraId:16,tocIndex:4},{value:"boxLineWidth",paraId:16,tocIndex:4},{value:"箱体描边的宽度",paraId:16,tocIndex:4},{value:"number",paraId:16,tocIndex:4},{value:" | ",paraId:16,tocIndex:4},{value:"(datum, index, data, column) => number",paraId:16,tocIndex:4},{value:"1",paraId:16,tocIndex:4},{value:"boxLineDash",paraId:16,tocIndex:4},{value:"箱体描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离",paraId:16,tocIndex:4},{value:"[number,number]",paraId:16,tocIndex:4},{value:" | ",paraId:16,tocIndex:4},{value:"(datum, index, data, column) => [number, number]",paraId:16,tocIndex:4},{value:"-",paraId:16,tocIndex:4},{value:"boxLineOpacity",paraId:16,tocIndex:4},{value:"箱体描边的透明度",paraId:16,tocIndex:4},{value:"number",paraId:16,tocIndex:4},{value:" | ",paraId:16,tocIndex:4},{value:"(datum, index, data, column) => number",paraId:16,tocIndex:4},{value:"-",paraId:16,tocIndex:4},{value:"boxOpacity",paraId:16,tocIndex:4},{value:"箱体的整体透明度",paraId:16,tocIndex:4},{value:"number",paraId:16,tocIndex:4},{value:" | ",paraId:16,tocIndex:4},{value:"(datum, index, data, column) => number",paraId:16,tocIndex:4},{value:"-",paraId:16,tocIndex:4},{value:"boxShadowColor",paraId:16,tocIndex:4},{value:"箱体阴影颜色",paraId:16,tocIndex:4},{value:"string",paraId:16,tocIndex:4},{value:" | ",paraId:16,tocIndex:4},{value:"(datum, index, data, column) => string",paraId:16,tocIndex:4},{value:"-",paraId:16,tocIndex:4},{value:"boxShadowBlur",paraId:16,tocIndex:4},{value:"箱体阴影的高斯模糊系数",paraId:16,tocIndex:4},{value:"number",paraId:16,tocIndex:4},{value:" | ",paraId:16,tocIndex:4},{value:"(datum, index, data, column) => number",paraId:16,tocIndex:4},{value:"-",paraId:16,tocIndex:4},{value:"boxShadowOffsetX",paraId:16,tocIndex:4},{value:"设置阴影距箱体的水平距离",paraId:16,tocIndex:4},{value:"number",paraId:16,tocIndex:4},{value:" | ",paraId:16,tocIndex:4},{value:"(datum, index, data, column) => number",paraId:16,tocIndex:4},{value:"-",paraId:16,tocIndex:4},{value:"boxShadowOffsetY",paraId:16,tocIndex:4},{value:"设置阴影距箱体的垂直距离",paraId:16,tocIndex:4},{value:"number",paraId:16,tocIndex:4},{value:" | ",paraId:16,tocIndex:4},{value:"(datum, index, data, column) => number",paraId:16,tocIndex:4},{value:"-",paraId:16,tocIndex:4},{value:"boxCursor",paraId:16,tocIndex:4},{value:"鼠标样式。同 CSS 的鼠标样式",paraId:16,tocIndex:4},{value:"string",paraId:16,tocIndex:4},{value:" | ",paraId:16,tocIndex:4},{value:"(datum, index, data, column) => string",paraId:16,tocIndex:4},{value:"'default'",paraId:16,tocIndex:4},{value:"属性",paraId:17,tocIndex:5},{value:"描述",paraId:17,tocIndex:5},{value:"类型",paraId:17,tocIndex:5},{value:"默认值",paraId:17,tocIndex:5},{value:"必选",paraId:17,tocIndex:5},{value:"pointFill",paraId:17,tocIndex:5},{value:"异常点的填充色",paraId:17,tocIndex:5},{value:"string",paraId:17,tocIndex:5},{value:" | ",paraId:17,tocIndex:5},{value:"(datum, index, data, column) => string",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"pointFillOpacity",paraId:17,tocIndex:5},{value:"异常点的填充透明度",paraId:17,tocIndex:5},{value:"number",paraId:17,tocIndex:5},{value:" | ",paraId:17,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"pointStroke",paraId:17,tocIndex:5},{value:"异常点的描边颜色",paraId:17,tocIndex:5},{value:"string",paraId:17,tocIndex:5},{value:" | ",paraId:17,tocIndex:5},{value:"(datum, index, data, column) => string",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"pointLineWidth",paraId:17,tocIndex:5},{value:"异常点描边的宽度",paraId:17,tocIndex:5},{value:"number",paraId:17,tocIndex:5},{value:" | ",paraId:17,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"pointLineDash",paraId:17,tocIndex:5},{value:"异常点描边的虚线配置",paraId:17,tocIndex:5},{value:"[number,number]",paraId:17,tocIndex:5},{value:" | ",paraId:17,tocIndex:5},{value:"(datum, index, data, column) => [number, number]",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"pointStrokeOpacity",paraId:17,tocIndex:5},{value:"异常点描边的透明度",paraId:17,tocIndex:5},{value:"number",paraId:17,tocIndex:5},{value:" | ",paraId:17,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"pointOpacity",paraId:17,tocIndex:5},{value:"异常点的整体透明度",paraId:17,tocIndex:5},{value:"number",paraId:17,tocIndex:5},{value:" | ",paraId:17,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"pointShadowColor",paraId:17,tocIndex:5},{value:"异常点阴影颜色",paraId:17,tocIndex:5},{value:"string",paraId:17,tocIndex:5},{value:" | ",paraId:17,tocIndex:5},{value:"(datum, index, data, column) => string",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"pointShadowBlur",paraId:17,tocIndex:5},{value:"异常点阴影的高斯模糊系数",paraId:17,tocIndex:5},{value:"number",paraId:17,tocIndex:5},{value:" | ",paraId:17,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"pointShadowOffsetX",paraId:17,tocIndex:5},{value:"设置阴影距异常点的水平距离",paraId:17,tocIndex:5},{value:"number",paraId:17,tocIndex:5},{value:" | ",paraId:17,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"pointShadowOffsetY",paraId:17,tocIndex:5},{value:"设置阴影距异常点的垂直距离",paraId:17,tocIndex:5},{value:"number",paraId:17,tocIndex:5},{value:" | ",paraId:17,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"pointCursor",paraId:17,tocIndex:5},{value:"鼠标样式。同 CSS 的鼠标样式",paraId:17,tocIndex:5},{value:"string",paraId:17,tocIndex:5},{value:" | ",paraId:17,tocIndex:5},{value:"(datum, index, data, column) => string",paraId:17,tocIndex:5},{value:"'default'",paraId:17,tocIndex:5},{value:"使用 ",paraId:18,tocIndex:7},{value:"boxplot",paraId:18,tocIndex:7},{value:" 标记可以快速创建箱线图，自动计算数据的统计值。",paraId:18,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'boxplot',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/morley.json',\n  },\n  encode: {\n    x: 'Expt',\n    y: 'Speed',\n  },\n  style: {\n    boxFill: '#aaa',\n    pointStroke: '#000',\n  },\n});\n\nchart.render();\n",paraId:19,tocIndex:7},{value:"通过设置 ",paraId:20,tocIndex:8},{value:"point: false",paraId:20,tocIndex:8},{value:" 可以隐藏异常点，只显示箱体部分。",paraId:20,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'boxplot',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/morley.json',\n  },\n  encode: {\n    x: 'Expt',\n    y: 'Speed',\n  },\n  style: {\n    point: false,\n  },\n});\n\nchart.render();\n",paraId:21,tocIndex:8},{value:"使用 ",paraId:22,tocIndex:9},{value:"color",paraId:22,tocIndex:9},{value:" 和 ",paraId:22,tocIndex:9},{value:"series",paraId:22,tocIndex:9},{value:" 通道可以创建分组箱线图。",paraId:22,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'boxplot',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n  },\n  encode: {\n    x: 'species',\n    y: 'flipper_length_mm',\n    color: 'sex',\n    series: 'sex',\n  },\n});\n\nchart.render();\n",paraId:23,tocIndex:9},{value:"通过坐标系转置可以创建横向箱线图。",paraId:24,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'boxplot',\n  coordinate: { transform: [{ type: 'transpose' }] },\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/morley.json',\n    transform: [{ type: 'filter', callback: (d) => d.Expt === 1 }],\n  },\n  encode: {\n    y: 'Speed',\n  },\n  style: {\n    boxFill: '#aaa',\n    pointStroke: '#000',\n  },\n});\n\nchart.render();\n",paraId:25,tocIndex:10},{value:"通过设置 ",paraId:26,tocIndex:11},{value:"shape: 'violin'",paraId:26,tocIndex:11},{value:" 可以创建小提琴图形状的箱线图。",paraId:26,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'boxplot',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n  },\n  encode: {\n    x: 'species',\n    y: 'flipper_length_mm',\n    color: 'species',\n    shape: 'violin',\n  },\n  style: {\n    opacity: 0.5,\n    strokeOpacity: 0.5,\n    point: false,\n  },\n});\n\nchart.render();\n",paraId:27,tocIndex:11},{value:"通过设置 x 轴的 scale 参数可以调整箱体宽度和间距。",paraId:28,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'boxplot',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/morley.json',\n  },\n  encode: {\n    x: 'Expt',\n    y: 'Speed',\n  },\n  scale: {\n    x: {\n      paddingInner: 0.1, // 较小的间距，箱体更宽\n      paddingOuter: 0.05,\n    },\n  },\n  style: {\n    boxFill: '#4e79a7',\n    boxStroke: '#2f4b7c',\n    pointFill: '#e15759',\n    pointStroke: '#c42e32',\n  },\n});\n\nchart.render();\n",paraId:29,tocIndex:12},{value:"boxplot",paraId:30,tocIndex:14},{value:" 标记的箱体宽度由 x 轴的 band scale 控制。可以通过设置 ",paraId:30,tocIndex:14},{value:"scale.x",paraId:30,tocIndex:14},{value:" 的 ",paraId:30,tocIndex:14},{value:"paddingInner",paraId:30,tocIndex:14},{value:"、",paraId:30,tocIndex:14},{value:"paddingOuter",paraId:30,tocIndex:14},{value:" 或 ",paraId:30,tocIndex:14},{value:"padding",paraId:30,tocIndex:14},{value:" 参数来调整箱体宽度：",paraId:30,tocIndex:14},{value:"paddingInner",paraId:31,tocIndex:14},{value:"：控制相邻箱体之间的间距，值越大箱体越窄",paraId:31,tocIndex:14},{value:"paddingOuter",paraId:31,tocIndex:14},{value:"：控制两端的间距，值越大整体布局越紧凑",paraId:31,tocIndex:14},{value:"padding",paraId:31,tocIndex:14},{value:"：同时设置 ",paraId:31,tocIndex:14},{value:"paddingInner",paraId:31,tocIndex:14},{value:" 和 ",paraId:31,tocIndex:14},{value:"paddingOuter",paraId:31,tocIndex:14},{value:" 的快捷方式",paraId:31,tocIndex:14},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n// 调整箱体宽度示例\nchart.options({\n  type: 'boxplot',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/morley.json',\n  },\n  encode: {\n    x: 'Expt',\n    y: 'Speed',\n  },\n  scale: {\n    x: {\n      paddingInner: 0.3, // 箱体间距，值越大箱体越窄\n      paddingOuter: 0.1, // 两端间距\n    },\n    // 或者使用 padding 同时设置\n    // x: { padding: 0.2 }\n  },\n});\n\nchart.render();\n",paraId:32,tocIndex:14},{value:"对于分组箱线图，还可以通过 ",paraId:33,tocIndex:14},{value:"series",paraId:33,tocIndex:14},{value:" 通道的 scale 参数来控制组内箱体的间距：",paraId:33,tocIndex:14},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'boxplot',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n  },\n  encode: {\n    x: 'species',\n    y: 'flipper_length_mm',\n    color: 'sex',\n    series: 'sex',\n  },\n  scale: {\n    x: { paddingInner: 0.2, paddingOuter: 0.1 }, // 控制组间间距\n    series: { paddingInner: 0.1, paddingOuter: 0.05 }, // 控制组内间距\n  },\n});\n\nchart.render();\n",paraId:34,tocIndex:14},{value:"当数据量很大时，可以将异常点以及四分位点的数据放到服务端计算，然后使用 ",paraId:35,tocIndex:15},{value:"box",paraId:35,tocIndex:15},{value:" 标记绘制箱线图。这种情况下，使用 ",paraId:35,tocIndex:15},{value:"box",paraId:35,tocIndex:15},{value:" 标记比 ",paraId:35,tocIndex:15},{value:"boxplot",paraId:35,tocIndex:15},{value:" 标记更高效，因为 ",paraId:35,tocIndex:15},{value:"box",paraId:35,tocIndex:15},{value:" 标记不需要在前端进行数据统计计算。",paraId:35,tocIndex:15},{value:"详细用法请参考 ",paraId:36,tocIndex:15},{value:"box",paraId:37,tocIndex:15},{value:" 标记的文档。",paraId:36,tocIndex:15}]},88294:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(57784);const t=[{value:"cell",paraId:0,tocIndex:0},{value:" 是矩形标记（Rect Shape）的一种抽象表示，主要用于表示分面（facet）或者网格中的单元格，是图表中数据映射到视觉元素的最小单元。它一般是在可视化布局中用来表示网格化结构或数据分割的“单元”。具体来说，它是一种对区域的划分，在不同的分面中通常会对应一个独立的绘图区域，常见于矩阵型图表（如日历图、聚合热力图等）中。",paraId:0,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'cell',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n  },\n  transform: [{ type: 'group', color: 'max' }], // 对数据进行分组变换，按颜色的最大值进行分组\n  encode: {\n    x: (d) => new Date(d.date).getUTCDate(), // 编码 x 轴，使用数据中的日期字段的 UTC 日期部分\n    y: (d) => new Date(d.date).getUTCMonth(), // 编码 y 轴，使用数据中的日期字段的 UTC 月份部分\n    color: 'temp_max', // 编码颜色，使用数据中的 temp_max 字段\n    shape: 'cell',\n  },\n  style: { inset: 0.5 }, // 设置单元格的内边距为 0.5\n  scale: {\n    color: {\n      type: 'sequential', // 设置颜色比例尺为顺序比例尺\n      palette: 'gnBu', // 设置使用 'gnBu' 调色板\n    },\n  },\n});\n\nchart.render(); // 渲染图标\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"必选",paraId:4,tocIndex:1},{value:"encode",paraId:4,tocIndex:1},{value:"配置 ",paraId:4,tocIndex:1},{value:"cell",paraId:4,tocIndex:1},{value:" 标记的视觉通道，包括",paraId:4,tocIndex:1},{value:"x",paraId:4,tocIndex:1},{value:"、",paraId:4,tocIndex:1},{value:"y",paraId:4,tocIndex:1},{value:"、",paraId:4,tocIndex:1},{value:"color",paraId:4,tocIndex:1},{value:"、",paraId:4,tocIndex:1},{value:"shape",paraId:4,tocIndex:1},{value:"等，用于指定视觉元素属性和数据之间的关系",paraId:4,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"✓",paraId:4,tocIndex:1},{value:"scale",paraId:4,tocIndex:1},{value:"配置 ",paraId:4,tocIndex:1},{value:"cell",paraId:4,tocIndex:1},{value:" 标记的图形缩放，包括",paraId:4,tocIndex:1},{value:"x",paraId:4,tocIndex:1},{value:"、",paraId:4,tocIndex:1},{value:"y",paraId:4,tocIndex:1},{value:"、",paraId:4,tocIndex:1},{value:"color",paraId:4,tocIndex:1},{value:"、",paraId:4,tocIndex:1},{value:"shape",paraId:4,tocIndex:1},{value:"等",paraId:4,tocIndex:1},{value:"scale",paraId:6,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"style",paraId:4,tocIndex:1},{value:"配置 ",paraId:4,tocIndex:1},{value:"cell",paraId:4,tocIndex:1},{value:" 图形样式",paraId:4,tocIndex:1},{value:"style",paraId:7,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"transform",paraId:4,tocIndex:1},{value:"配置 ",paraId:4,tocIndex:1},{value:"cell",paraId:4,tocIndex:1},{value:" 数据转换操作（如分箱、排序、过滤等）。",paraId:4,tocIndex:1},{value:"transform",paraId:8,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"配置 ",paraId:9,tocIndex:2},{value:"cell",paraId:9,tocIndex:2},{value:" 标记的视觉通道。",paraId:9,tocIndex:2},{value:"属性",paraId:10,tocIndex:2},{value:"描述",paraId:10,tocIndex:2},{value:"类型",paraId:10,tocIndex:2},{value:"默认值",paraId:10,tocIndex:2},{value:"必选",paraId:10,tocIndex:2},{value:"x",paraId:10,tocIndex:2},{value:"绑定 ",paraId:10,tocIndex:2},{value:"cell",paraId:10,tocIndex:2},{value:" 标记的 ",paraId:10,tocIndex:2},{value:"x",paraId:10,tocIndex:2},{value:" 属性通道，一般是 ",paraId:10,tocIndex:2},{value:"data",paraId:10,tocIndex:2},{value:" 中的时间或有序名词字段",paraId:10,tocIndex:2},{value:"encode",paraId:11,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"✓",paraId:10,tocIndex:2},{value:"y",paraId:10,tocIndex:2},{value:"绑定 ",paraId:10,tocIndex:2},{value:"cell",paraId:10,tocIndex:2},{value:" 标记的 ",paraId:10,tocIndex:2},{value:"y",paraId:10,tocIndex:2},{value:" 属性通道，一般是 ",paraId:10,tocIndex:2},{value:"data",paraId:10,tocIndex:2},{value:" 中的数值或数组字段",paraId:10,tocIndex:2},{value:"encode",paraId:12,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"✓",paraId:10,tocIndex:2},{value:"color",paraId:10,tocIndex:2},{value:"绑定 ",paraId:10,tocIndex:2},{value:"cell",paraId:10,tocIndex:2},{value:" 标记的 ",paraId:10,tocIndex:2},{value:"color",paraId:10,tocIndex:2},{value:" 属性通道，如果将数据字段映射到颜色通道，会对数据进行分组，将数据拆分成多个不同颜色的区域",paraId:10,tocIndex:2},{value:"encode",paraId:13,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"shape",paraId:10,tocIndex:2},{value:"绑定 ",paraId:10,tocIndex:2},{value:"cell",paraId:10,tocIndex:2},{value:" 标记的 ",paraId:10,tocIndex:2},{value:"shape",paraId:10,tocIndex:2},{value:" 属性通道，改变图形标记的绘制形状，支持的属性：",paraId:10,tocIndex:2},{value:"cell",paraId:10,tocIndex:2},{value:" | ",paraId:10,tocIndex:2},{value:"hollow",paraId:10,tocIndex:2},{value:"string",paraId:10,tocIndex:2},{value:"cell",paraId:10,tocIndex:2},{value:"更多的",paraId:14,tocIndex:2},{value:"encode",paraId:14,tocIndex:2},{value:"配置，可以查查看 ",paraId:14,tocIndex:2},{value:"encode",paraId:15,tocIndex:2},{value:" 介绍页面。",paraId:14,tocIndex:2},{value:"通过 ",paraId:16,tocIndex:3},{value:"encode",paraId:16,tocIndex:3},{value:" 的 ",paraId:16,tocIndex:3},{value:"color",paraId:16,tocIndex:3},{value:" 属性，你可以将数据字段映射到颜色值，从而根据数据的变化自动调整标记的颜色。这对于数据可视化来说非常有用，因为它可以帮助您快速识别数据的模式和趋势。",paraId:16,tocIndex:3},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\n\nchart.options({\n  type: 'cell',\n  data: [\n    { x: 'x-a', y: 'y-a', data1: 1, data2: 5 },\n    { x: 'x-a', y: 'y-b', data1: 3, data2: 8 },\n    { x: 'x-a', y: 'y-c', data1: 2, data2: 6 },\n    { x: 'x-b', y: 'y-a', data1: 8, data2: 2 },\n    { x: 'x-b', y: 'y-b', data1: 5, data2: 4 },\n    { x: 'x-b', y: 'y-c', data1: 6, data2: 9 },\n    { x: 'x-c', y: 'y-a', data1: 7, data2: 1 },\n    { x: 'x-c', y: 'y-b', data1: 4, data2: 2 },\n    { x: 'x-c', y: 'y-c', data1: 9, data2: 3 },\n  ],\n  encode: {\n    x: 'x', // 编码 x 轴\n    y: 'y', // 编码 y 轴\n    color: 'data1', // 使用数据中的 data1 字段\n  },\n  style: {\n    inset: 5,\n    lineWidth: 10,\n  },\n});\n\n// 插入Encode-Color 选择器\nconst selectorContainer = document.createElement('div');\nselectorContainer.textContent = '选择映射到颜色的字段 ';\nconst selector = document.createElement('select');\nselector.innerHTML = `\n    <option value=\"data1\" selected>data1</option>\n    <option value=\"data2\">data2</option>\n  `;\n\nselector.onchange = (e) => {\n  chart.options({\n    encode: {\n      color: e.target.value, // 使用选中的字段映射颜色\n    },\n  });\n  chart.render(); // 重新渲染图表\n};\nselectorContainer.appendChild(selector);\ncontainer.insertBefore(selectorContainer, container.childNodes[0]);\n\nchart.render();\n",paraId:17,tocIndex:3},{value:"通过 ",paraId:18,tocIndex:4},{value:"encode",paraId:18,tocIndex:4},{value:" 的 ",paraId:18,tocIndex:4},{value:"shape",paraId:18,tocIndex:4},{value:" 属性，您可以指定单元格的几何形状。shape 决定了每个单元格（cell）在画布上以什么样的形状渲染出来。",paraId:18,tocIndex:4},{value:"shape",paraId:18,tocIndex:4},{value:" 标记的支持的形状如下：",paraId:18,tocIndex:4},{value:"形状",paraId:19,tocIndex:4},{value:"描述",paraId:19,tocIndex:4},{value:"示例",paraId:19,tocIndex:4},{value:"cell",paraId:19,tocIndex:4},{value:"使用颜色填充整个表格",paraId:19,tocIndex:4},{value:"hollow",paraId:19,tocIndex:4},{value:"绘制平滑曲线的面积图",paraId:19,tocIndex:4},{value:"scale",paraId:20,tocIndex:5},{value:"用于定义数据如何映射到视觉属性（如颜色、大小、形状等）。在",paraId:20,tocIndex:5},{value:"cell",paraId:20,tocIndex:5},{value:"的使用场景，scale 的常见作用就是为每个视觉通道（如颜色、大小、位置等）提供映射规则，使数据点能够准确地呈现。",paraId:20,tocIndex:5},{value:"属性",paraId:21,tocIndex:5},{value:"描述",paraId:21,tocIndex:5},{value:"类型",paraId:21,tocIndex:5},{value:"默认值",paraId:21,tocIndex:5},{value:"[channel]",paraId:21,tocIndex:5},{value:"映射到视觉属性的通道",paraId:21,tocIndex:5},{value:"Record<string, ",paraId:21,tocIndex:5},{value:"scale",paraId:22,tocIndex:5},{value:">",paraId:21,tocIndex:5},{value:"-",paraId:21,tocIndex:5},{value:"更多的",paraId:23,tocIndex:5},{value:"scale",paraId:23,tocIndex:5},{value:"配置，可以查查看 ",paraId:23,tocIndex:5},{value:"scale",paraId:24,tocIndex:5},{value:" 介绍页面。",paraId:23,tocIndex:5},{value:"style",paraId:25,tocIndex:6},{value:" 用于设置图表元素的外观样式，包括填充颜色、边框样式、阴影效果等。",paraId:25,tocIndex:6},{value:"属性",paraId:26,tocIndex:6},{value:"描述",paraId:26,tocIndex:6},{value:"类型",paraId:26,tocIndex:6},{value:"默认值",paraId:26,tocIndex:6},{value:"radius",paraId:26,tocIndex:6},{value:"矩形的四个圆角大小",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"0",paraId:26,tocIndex:6},{value:"radiusTopLeft",paraId:26,tocIndex:6},{value:"左上角的圆角",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"0",paraId:26,tocIndex:6},{value:"radiusTopRight",paraId:26,tocIndex:6},{value:"右上角的圆角",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"0",paraId:26,tocIndex:6},{value:"radiusBottomRight",paraId:26,tocIndex:6},{value:"右下角的圆角",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"0",paraId:26,tocIndex:6},{value:"radiusBottomLeft",paraId:26,tocIndex:6},{value:"左下角的圆角",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"0",paraId:26,tocIndex:6},{value:"inset",paraId:26,tocIndex:6},{value:"矩形四个方向的内边距",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"0",paraId:26,tocIndex:6},{value:"insetLeft",paraId:26,tocIndex:6},{value:"左边的内间距",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"0",paraId:26,tocIndex:6},{value:"insetRight",paraId:26,tocIndex:6},{value:"右边的内间距",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"0",paraId:26,tocIndex:6},{value:"insetBottom",paraId:26,tocIndex:6},{value:"下面的内间距",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"0",paraId:26,tocIndex:6},{value:"insetTop",paraId:26,tocIndex:6},{value:"上面的内间距",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"0",paraId:26,tocIndex:6},{value:"fill",paraId:26,tocIndex:6},{value:"图形的填充色",paraId:26,tocIndex:6},{value:"string",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<string>",paraId:26,tocIndex:6},{value:"shape",paraId:26,tocIndex:6},{value:"为",paraId:26,tocIndex:6},{value:"hollow",paraId:26,tocIndex:6},{value:"时，默认值为 ''",paraId:26,tocIndex:6},{value:"fillOpacity",paraId:26,tocIndex:6},{value:"图形的填充透明度",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"shape",paraId:26,tocIndex:6},{value:"为",paraId:26,tocIndex:6},{value:"cell",paraId:26,tocIndex:6},{value:"时，默认值为 0.95",paraId:26,tocIndex:6},{value:"stroke",paraId:26,tocIndex:6},{value:"图形的描边",paraId:26,tocIndex:6},{value:"string",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<string>",paraId:26,tocIndex:6},{value:"-",paraId:26,tocIndex:6},{value:"strokeOpacity",paraId:26,tocIndex:6},{value:"描边透明度",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"shape",paraId:26,tocIndex:6},{value:"为",paraId:26,tocIndex:6},{value:"hollow",paraId:26,tocIndex:6},{value:"时，默认值为 1",paraId:26,tocIndex:6},{value:"lineWidth",paraId:26,tocIndex:6},{value:"图形描边的宽度",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"shape",paraId:26,tocIndex:6},{value:"为",paraId:26,tocIndex:6},{value:"hollow",paraId:26,tocIndex:6},{value:"时，默认值为 2",paraId:26,tocIndex:6},{value:"lineDash",paraId:26,tocIndex:6},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:26,tocIndex:6},{value:"[number,number]",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<[number, number]>",paraId:26,tocIndex:6},{value:"-",paraId:26,tocIndex:6},{value:"opacity",paraId:26,tocIndex:6},{value:"图形的整体透明度",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"-",paraId:26,tocIndex:6},{value:"shadowColor",paraId:26,tocIndex:6},{value:"图形阴影颜色",paraId:26,tocIndex:6},{value:"string",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<string>",paraId:26,tocIndex:6},{value:"-",paraId:26,tocIndex:6},{value:"shadowBlur",paraId:26,tocIndex:6},{value:"图形阴影的高斯模糊系数",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"-",paraId:26,tocIndex:6},{value:"shadowOffsetX",paraId:26,tocIndex:6},{value:"设置阴影距图形的水平距离",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"-",paraId:26,tocIndex:6},{value:"shadowOffsetY",paraId:26,tocIndex:6},{value:"设置阴影距图形的垂直距离",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"-",paraId:26,tocIndex:6},{value:"cursor",paraId:26,tocIndex:6},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:26,tocIndex:6},{value:"string",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<string>",paraId:26,tocIndex:6},{value:"'default'",paraId:26,tocIndex:6},{value:"更多的",paraId:27,tocIndex:6},{value:"style",paraId:27,tocIndex:6},{value:"配置，可以查看 ",paraId:27,tocIndex:6},{value:"style",paraId:28,tocIndex:6},{value:" 介绍页面。",paraId:27,tocIndex:6},{value:"transform",paraId:29,tocIndex:7},{value:" 是用于数据转换的核心配置项，它允许在数据绑定到图形标记之前对原始数据进行预处理。通过对数据的加工，生成更适合可视化的结构化数据，从而更清晰地表达数据分布、密度或统计特征。",paraId:29,tocIndex:7},{value:"属性",paraId:30,tocIndex:7},{value:"描述",paraId:30,tocIndex:7},{value:"类型",paraId:30,tocIndex:7},{value:"默认值",paraId:30,tocIndex:7},{value:"type",paraId:30,tocIndex:7},{value:"针对哪些通道做数据分组聚合",paraId:30,tocIndex:7},{value:"string | string[]",paraId:30,tocIndex:7},{value:"['x', 'y']",paraId:30,tocIndex:7},{value:"[channel]",paraId:30,tocIndex:7},{value:"输出到具体 mark 的 channel 数据的聚合方式",paraId:30,tocIndex:7},{value:"Reducer",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"type Primitive = number | string | boolean | Date;\n\ntype Reducer =\n  | 'mean'\n  | 'max'\n  | 'count'\n  | 'min'\n  | 'median'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:31,tocIndex:7},{value:"更多的",paraId:32,tocIndex:7},{value:"transform",paraId:32,tocIndex:7},{value:"配置，可以查看 ",paraId:32,tocIndex:7},{value:"transform",paraId:33,tocIndex:7},{value:" 介绍页面。",paraId:32,tocIndex:7},{value:"尝试一下：",paraId:34,tocIndex:7},{value:"/**\n * A recreation of this demo: https://observablehq.com/@mbostock/the-impact-of-vaccines\n */\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 1300,\n  height: 900,\n});\n\nchart\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/vaccines.json',\n  })\n  .axis('y', { labelAutoRotate: false })\n  .axis('x', {\n    tickFilter: (d) => d % 10 === 0,\n    position: 'top',\n  })\n  .scale('color', {\n    palette: 'puRd',\n    relations: [\n      [(d) => d === null, '#eee'],\n      [0, '#fff'],\n    ],\n  });\n\nchart\n  .cell()\n  .encode('x', 'year')\n  .encode('y', 'name')\n  .encode('color', 'value')\n  .style('inset', 0.5)\n  .tooltip({ title: { channel: 'color', valueFormatter: '.2f' } });\n\nchart\n  .lineX()\n  .data([1963])\n  .style('stroke', 'black')\n  .label({\n    text: '1963',\n    position: 'bottom',\n    textBaseline: 'top',\n    fontSize: 10,\n  })\n  .label({\n    text: 'Measles vaccine introduced',\n    position: 'bottom',\n    textBaseline: 'top',\n    fontSize: 10,\n    fontWeight: 'bold',\n    dy: 10,\n  })\n  .tooltip(false);\n\nchart.render();\n\n",paraId:35,tocIndex:7}]},90579:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(11227);const t=[{value:"chord",paraId:0},{value:"是一种用于可视化矩阵关系数据的环形图表，通过围绕圆周排列的节点弧及相互连接的带状曲线，直观展示不同类别间的双向流量或关联强度。在",paraId:0},{value:"chord",paraId:0},{value:"中，数据点（节点）通常沿着圆环排列，通过弦（曲线）来连接节点之间的关系或流动。每条弦不仅可以体现两个节点之间的连接，还可以通过视觉通道（如颜色、宽度、透明度等）来表示关系的权重或强度。弦图广泛应用于社交网络、系统调用关系、流量分布和交易流分析等场景，通过清晰地展现节点之间的复杂连接，可以帮助用户快速理解数据中的结构和模式。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'chord',\n  layout: { nodeWidthRatio: 0.05 },\n  data: {\n    value: {\n      links: [\n        { source: '北京', target: '天津', value: 30 },\n        { source: '北京', target: '上海', value: 80 },\n        { source: '北京', target: '河北', value: 46 },\n        { source: '北京', target: '辽宁', value: 49 },\n        { source: '北京', target: '黑龙江', value: 69 },\n        { source: '北京', target: '吉林', value: 19 },\n        { source: '天津', target: '河北', value: 62 },\n        { source: '天津', target: '辽宁', value: 82 },\n        { source: '天津', target: '上海', value: 16 },\n        { source: '上海', target: '黑龙江', value: 16 },\n        { source: '河北', target: '黑龙江', value: 76 },\n        { source: '河北', target: '内蒙古', value: 24 },\n        { source: '内蒙古', target: '北京', value: 32 },\n      ],\n    },\n  },\n  scale: {\n    color: {\n      range: [\n        '#4e79a7',\n        '#f28e2c',\n        '#e15759',\n        '#76b7b2',\n        '#59a14f',\n        '#edc949',\n        '#af7aa1',\n        '#ff9da7',\n        '#9c755f',\n        '#bab0ab',\n      ],\n    },\n  },\n  style: { labelFontSize: 15, linkFillOpacity: 0.6 },\n});\n\nchart.render();\n",paraId:1},{value:"属性",paraId:2,tocIndex:0},{value:"描述",paraId:2,tocIndex:0},{value:"类型",paraId:2,tocIndex:0},{value:"默认值",paraId:2,tocIndex:0},{value:"必选",paraId:2,tocIndex:0},{value:"encode",paraId:2,tocIndex:0},{value:"配置 ",paraId:2,tocIndex:0},{value:"chord",paraId:2,tocIndex:0},{value:" 标记的视觉通道，包括",paraId:2,tocIndex:0},{value:"color",paraId:2,tocIndex:0},{value:"、",paraId:2,tocIndex:0},{value:"shape",paraId:2,tocIndex:0},{value:"等，用于指定视觉元素属性和数据之间的关系",paraId:2,tocIndex:0},{value:"encode",paraId:3,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"layout",paraId:2,tocIndex:0},{value:"配置 ",paraId:2,tocIndex:0},{value:"chord",paraId:2,tocIndex:0},{value:" 布局方式",paraId:2,tocIndex:0},{value:"layout",paraId:4,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"scale",paraId:2,tocIndex:0},{value:"配置 ",paraId:2,tocIndex:0},{value:"chord",paraId:2,tocIndex:0},{value:" 标记的图形缩放，包括",paraId:2,tocIndex:0},{value:"x",paraId:2,tocIndex:0},{value:"、",paraId:2,tocIndex:0},{value:"y",paraId:2,tocIndex:0},{value:"、",paraId:2,tocIndex:0},{value:"color",paraId:2,tocIndex:0},{value:"、",paraId:2,tocIndex:0},{value:"shape",paraId:2,tocIndex:0},{value:"等",paraId:2,tocIndex:0},{value:"scale",paraId:5,tocIndex:0},{value:"{x: { type: 'identity' },y: { type: 'identity' }}",paraId:2,tocIndex:0},{value:"style",paraId:2,tocIndex:0},{value:"配置 ",paraId:2,tocIndex:0},{value:"chord",paraId:2,tocIndex:0},{value:" 图形样式",paraId:2,tocIndex:0},{value:"style",paraId:6,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"属性",paraId:7,tocIndex:1},{value:"描述",paraId:7,tocIndex:1},{value:"类型",paraId:7,tocIndex:1},{value:"默认值",paraId:7,tocIndex:1},{value:"color",paraId:7,tocIndex:1},{value:"映射节点或连接弦的颜色，用于区分不同的类别或关系强度",paraId:7,tocIndex:1},{value:"encode",paraId:8,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"nodeShape",paraId:7,tocIndex:1},{value:"弦图中节点的形状，定义节点在可视化中的具体外观表现。",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:"| Function<",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:">",paraId:7,tocIndex:1},{value:"polygon",paraId:7,tocIndex:1},{value:"linkShape",paraId:7,tocIndex:1},{value:"弦图中连接弦的形状，定义弦在可视化中的具体外观表现。",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:"| Function<",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:">",paraId:7,tocIndex:1},{value:"ribbon",paraId:7,tocIndex:1},{value:"source",paraId:7,tocIndex:1},{value:"定义连接弦的起点，通常映射到一个节点字段",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:"| Function<",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:">",paraId:7,tocIndex:1},{value:"source",paraId:7,tocIndex:1},{value:"target",paraId:7,tocIndex:1},{value:"定义连接弦的终点，通常映射到另一个节点字段",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:"| Function<",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:">",paraId:7,tocIndex:1},{value:"target",paraId:7,tocIndex:1},{value:"source",paraId:9,tocIndex:2},{value:"、",paraId:9,tocIndex:2},{value:"target",paraId:9,tocIndex:2},{value:" 视觉通道影响 chord 图形标记连接弦的起点和终点的重要属性。",paraId:9,tocIndex:2},{value:"source",paraId:9,tocIndex:2},{value:" 映射到数据中表示连接关系的起始节点字段，而 ",paraId:9,tocIndex:2},{value:"target",paraId:9,tocIndex:2},{value:" 则映射到连接关系的终止节点字段。这两个属性共同构建了弦图中节点之间的关系逻辑，通过直观的连接弦表现节点之间的交互或依赖。",paraId:9,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'chord',\n  data: {\n    value: {\n      links: [\n        { begin: '北京', end: '天津', value: 34 },\n        { begin: '北京', end: '上海', value: 95 },\n        { begin: '北京', end: '河北', value: 61 },\n        { begin: '北京', end: '辽宁', value: 32 },\n        { begin: '北京', end: '黑龙江', value: 84 },\n        { begin: '北京', end: '吉林', value: 19 },\n        { begin: '天津', end: '河北', value: 62 },\n        { begin: '天津', end: '辽宁', value: 34 },\n        { begin: '天津', end: '上海', value: 48 },\n        { begin: '上海', end: '黑龙江', value: 67 },\n        { begin: '河北', end: '黑龙江', value: 37 },\n        { begin: '河北', end: '内蒙古', value: 51 },\n        { begin: '内蒙古', end: '北京', value: 56 },\n      ],\n    },\n  },\n  encode: {\n    source: 'begin',\n    target: 'end',\n  },\n});\n\nchart.render();\n",paraId:10,tocIndex:2},{value:"source",paraId:11,tocIndex:2},{value:"、",paraId:11,tocIndex:2},{value:"target",paraId:11,tocIndex:2},{value:"等 encode 属性也支持动态获取数据中的值，可以传入一个方法，chart 在执行时会调用这个方法计算出需要的结果",paraId:11,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'chord',\n  data: {\n    value: {\n      links: [\n        { begin: '北京', end: '天津', value1: 34, value2: 46 },\n        { begin: '北京', end: '上海', value1: 95, value2: 69 },\n        { begin: '北京', end: '河北', value1: 61, value2: 62 },\n        { begin: '北京', end: '辽宁', value1: 32, value2: 82 },\n        { begin: '北京', end: '黑龙江', value1: 84, value2: 30 },\n        { begin: '北京', end: '吉林', value1: 19, value2: 1 },\n        { begin: '天津', end: '河北', value1: 62, value2: 24 },\n        { begin: '天津', end: '辽宁', value1: 34, value2: 16 },\n        { begin: '天津', end: '上海', value1: 48, value2: 49 },\n        { begin: '上海', end: '黑龙江', value1: 67, value2: 80 },\n        { begin: '河北', end: '黑龙江', value1: 37, value2: 67 },\n        { begin: '河北', end: '内蒙古', value1: 51, value2: 16 },\n        { begin: '内蒙古', end: '北京', value1: 56, value2: 76 },\n      ],\n    },\n  },\n  encode: {\n    source: (d) => d.begin,\n    target: (d) => d.end,\n  },\n});\n\nchart.render();\n",paraId:12,tocIndex:2},{value:"更多的",paraId:13,tocIndex:2},{value:"encode",paraId:13,tocIndex:2},{value:"配置，可以查查看 ",paraId:13,tocIndex:2},{value:"encode",paraId:14,tocIndex:2},{value:" 介绍页面。",paraId:13,tocIndex:2},{value:"layout 属性用于控制弦图的布局方式，定义节点和连接弦如何在画布上呈现。弦图的布局通常以圆形（环形）为基础，将所有节点均匀地分布在圆周上，并通过连接弦来展示节点之间的关系和权重。通过 layout 配置，可以进一步调整节点位置、连接方式和图形的结构。",paraId:15,tocIndex:3},{value:"属性",paraId:16,tocIndex:3},{value:"描述",paraId:16,tocIndex:3},{value:"类型",paraId:16,tocIndex:3},{value:"默认值",paraId:16,tocIndex:3},{value:"y",paraId:16,tocIndex:3},{value:"布局时 y 轴的坐标",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:"0",paraId:16,tocIndex:3},{value:"id",paraId:16,tocIndex:3},{value:"节点的键",paraId:16,tocIndex:3},{value:"Function<string | number>",paraId:16,tocIndex:3},{value:"(node) => node.key",paraId:16,tocIndex:3},{value:"source",paraId:16,tocIndex:3},{value:"设置弦图的来源节点数据字段",paraId:16,tocIndex:3},{value:"Function<string>",paraId:16,tocIndex:3},{value:"(edge) => edge.source",paraId:16,tocIndex:3},{value:"target",paraId:16,tocIndex:3},{value:"设置弦图的目标节点数据字段",paraId:16,tocIndex:3},{value:"Function<string>",paraId:16,tocIndex:3},{value:"(edge) => edge.target",paraId:16,tocIndex:3},{value:"sourceWeight",paraId:16,tocIndex:3},{value:"来源的权重",paraId:16,tocIndex:3},{value:"Function<number>",paraId:16,tocIndex:3},{value:"(edge) => edge.value | 1",paraId:16,tocIndex:3},{value:"targetWeight",paraId:16,tocIndex:3},{value:"目标的权重",paraId:16,tocIndex:3},{value:"Function<number>",paraId:16,tocIndex:3},{value:"(edge) => edge.value | 1",paraId:16,tocIndex:3},{value:"sortBy",paraId:16,tocIndex:3},{value:"排序方法，可选 id, weight, frequency 排序或者自定义排序方法",paraId:16,tocIndex:3},{value:"string | Function<number>",paraId:16,tocIndex:3},{value:"null",paraId:16,tocIndex:3},{value:"nodeWidthRatio",paraId:16,tocIndex:3},{value:"弦图节点的宽度配置，0 ~ 1，参考画布的宽度",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:"0.05",paraId:16,tocIndex:3},{value:"nodePaddingRatio",paraId:16,tocIndex:3},{value:"弦图节点之间的间距，0 ~ 1，参考画布的高度",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:"0.1",paraId:16,tocIndex:3},{value:"scale 属性用于定义数据字段如何映射到图形的视觉属性（如节点位置、弦的长度、颜色等），从而影响弦图的呈现方式。通过配置 scale，可以调整节点的排列顺序、连接弦的权重比例或颜色映射，使图表更符合数据特征或用户的分析需求。",paraId:17,tocIndex:4},{value:"属性",paraId:18,tocIndex:4},{value:"描述",paraId:18,tocIndex:4},{value:"类型",paraId:18,tocIndex:4},{value:"默认值",paraId:18,tocIndex:4},{value:"x",paraId:18,tocIndex:4},{value:"定义节点在圆周上的排列位置，可以映射到分类或数值字段",paraId:18,tocIndex:4},{value:"Record<string, ",paraId:18,tocIndex:4},{value:"scale",paraId:19,tocIndex:4},{value:">",paraId:18,tocIndex:4},{value:"{ type: 'identity' }",paraId:18,tocIndex:4},{value:"y",paraId:18,tocIndex:4},{value:"控制节点或弦的投影位置，通常在弦图中不常显式设置",paraId:18,tocIndex:4},{value:"Record<string, ",paraId:18,tocIndex:4},{value:"scale",paraId:20,tocIndex:4},{value:">",paraId:18,tocIndex:4},{value:"{ type: 'identity' }",paraId:18,tocIndex:4},{value:"color",paraId:18,tocIndex:4},{value:"定义节点或连接弦的颜色映射规则，用于区分不同的类别或关系强度",paraId:18,tocIndex:4},{value:"Record<string, ",paraId:18,tocIndex:4},{value:"scale",paraId:21,tocIndex:4},{value:">",paraId:18,tocIndex:4},{value:"-",paraId:18,tocIndex:4},{value:"size",paraId:18,tocIndex:4},{value:"映射连接弦的粗细或节点的大小，以表示权重或强度",paraId:18,tocIndex:4},{value:"Record<string, ",paraId:18,tocIndex:4},{value:"scale",paraId:22,tocIndex:4},{value:">",paraId:18,tocIndex:4},{value:"-",paraId:18,tocIndex:4},{value:"更多的",paraId:23,tocIndex:4},{value:"scale",paraId:23,tocIndex:4},{value:"配置，可以查查看 ",paraId:23,tocIndex:4},{value:"scale",paraId:24,tocIndex:4},{value:" 介绍页面。",paraId:23,tocIndex:4},{value:"style",paraId:25,tocIndex:5},{value:" 属性提供了一系列用于定制弦图视觉效果的配置选项，主要作用于节点（node）、连接弦（link）和标签（label）。",paraId:25,tocIndex:5},{value:"属性",paraId:26,tocIndex:5},{value:"描述",paraId:26,tocIndex:5},{value:"类型",paraId:26,tocIndex:5},{value:"默认值",paraId:26,tocIndex:5},{value:"linkFillOpacity",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" 图形中连接弦(即连接不同节点之间的关系线)的填充透明度的。",paraId:26,tocIndex:5},{value:"number | Function<number>",paraId:26,tocIndex:5},{value:"1",paraId:26,tocIndex:5},{value:"linkFill",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" 图形中连接弦(即连接不同节点之间的关系线)的填充颜色",paraId:26,tocIndex:5},{value:"string | Function<number>",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"linkStroke",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" 图形中连接弦的边框颜色",paraId:26,tocIndex:5},{value:"string | Function<number>",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"linkOpacity",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" 图形中连接弦的整体透明度（包括填充和边框）",paraId:26,tocIndex:5},{value:"number | Function<number>",paraId:26,tocIndex:5},{value:"0.5",paraId:26,tocIndex:5},{value:"linkLineDash",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" 图形中连接弦边框的虚线样式",paraId:26,tocIndex:5},{value:"[number, number]",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"labelFill",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" 图形中节点标签的字体颜色",paraId:26,tocIndex:5},{value:"string | Function<number>",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"labelFillOpacity",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" 图形中节点标签字体颜色的透明度",paraId:26,tocIndex:5},{value:"number | Function<number>",paraId:26,tocIndex:5},{value:"0.6",paraId:26,tocIndex:5},{value:"labelFontSize",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" 图形中节点标签（Label）的字体大小",paraId:26,tocIndex:5},{value:"number | Function<number>",paraId:26,tocIndex:5},{value:"10",paraId:26,tocIndex:5},{value:"labelFontWeight",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" 图形中节点标签的字体粗细（如 ",paraId:26,tocIndex:5},{value:'"normal"',paraId:26,tocIndex:5},{value:"、",paraId:26,tocIndex:5},{value:'"bold"',paraId:26,tocIndex:5},{value:"）",paraId:26,tocIndex:5},{value:"string| number",paraId:26,tocIndex:5},{value:"normal",paraId:26,tocIndex:5},{value:"labelOpacity",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" 图形中节点标签的整体透明度",paraId:26,tocIndex:5},{value:"number | Function<number>",paraId:26,tocIndex:5},{value:"1",paraId:26,tocIndex:5},{value:"nodeFill",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" 图形中节点的填充颜色",paraId:26,tocIndex:5},{value:"string | Function<number>",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"nodeFillOpacity",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" 图形中节点的填充透明度",paraId:26,tocIndex:5},{value:"number | Function<number>",paraId:26,tocIndex:5},{value:"1",paraId:26,tocIndex:5},{value:"nodeStroke",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" 图形中节点的边框颜色",paraId:26,tocIndex:5},{value:"string | Function<number>",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"nodeOpacity",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" 图形中节点的整体透明度",paraId:26,tocIndex:5},{value:"number | Function<number>",paraId:26,tocIndex:5},{value:"1",paraId:26,tocIndex:5},{value:"nodeLineDash",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" 图形中节点边框的虚线样式",paraId:26,tocIndex:5},{value:"[number, number]",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"cursor",paraId:26,tocIndex:5},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:26,tocIndex:5},{value:"string | Function<number>",paraId:26,tocIndex:5},{value:"'default'",paraId:26,tocIndex:5},{value:"更多的",paraId:27,tocIndex:5},{value:"style",paraId:27,tocIndex:5},{value:"配置，可以查看 ",paraId:27,tocIndex:5},{value:"style",paraId:28,tocIndex:5},{value:" 介绍页面。",paraId:27,tocIndex:5},{value:"尝试一下：",paraId:29,tocIndex:5},{value:"import { Chart } from '@antv/g2';\nimport { schemeTableau10 } from 'd3-scale-chromatic';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 900,\n  height: 600,\n});\n\nconst data = [\n  {\n    source: '北京',\n    target: '天津',\n    value: 30,\n  },\n  {\n    source: '北京',\n    target: '上海',\n    value: 80,\n  },\n  {\n    source: '北京',\n    target: '河北',\n    value: 46,\n  },\n  {\n    source: '北京',\n    target: '辽宁',\n    value: 49,\n  },\n  {\n    source: '北京',\n    target: '黑龙江',\n    value: 69,\n  },\n  {\n    source: '北京',\n    target: '吉林',\n    value: 19,\n  },\n  {\n    source: '天津',\n    target: '河北',\n    value: 62,\n  },\n  {\n    source: '天津',\n    target: '辽宁',\n    value: 82,\n  },\n  {\n    source: '天津',\n    target: '上海',\n    value: 16,\n  },\n  {\n    source: '上海',\n    target: '黑龙江',\n    value: 16,\n  },\n  {\n    source: '河北',\n    target: '黑龙江',\n    value: 76,\n  },\n  {\n    source: '河北',\n    target: '内蒙古',\n    value: 24,\n  },\n  {\n    source: '内蒙古',\n    target: '北京',\n    value: 32,\n  },\n];\n\nchart\n  .chord()\n  .data({\n    value: { links: data },\n  })\n  .layout({\n    nodeWidthRatio: 0.05,\n  })\n  .scale('color', { range: schemeTableau10 })\n  .style('labelFontSize', 15)\n  .style('linkFillOpacity', 0.6);\n\nchart.render();\n\n",paraId:30,tocIndex:5}]},33157:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(11462);const t=[{value:"Connector",paraId:0,tocIndex:0},{value:" 组件用于绘制连接线，可以在两个点之间创建带有路径的连接器。它主要用于流程图、关系图、桑基图等需要展示元素间连接关系的可视化场景。",paraId:0,tocIndex:0},{value:"连接器的路径通常包含以下几个关键点：",paraId:1,tocIndex:0},{value:"起点（Source）",paraId:2,tocIndex:0},{value:"：连接的起始位置",paraId:2,tocIndex:0},{value:"终点（Target）",paraId:2,tocIndex:0},{value:"：连接的结束位置",paraId:2,tocIndex:0},{value:"中间点",paraId:2,tocIndex:0},{value:"：根据偏移量和连接长度计算的路径转折点",paraId:2,tocIndex:0},{value:"端点标记",paraId:2,tocIndex:0},{value:"：可选的箭头或标记符号",paraId:2,tocIndex:0},{value:"在标准的直角坐标系中，连接器会创建一个 L 型路径：",paraId:3,tocIndex:2},{value:"  起点\n    ───┐\n       │\n       │(中间段)\n       │\n       └── 终点 →\n\n",paraId:4,tocIndex:2},{value:"在转置坐标系中，路径会相应调整：",paraId:5,tocIndex:3},{value:"起点\n │\n │ (中间段)\n │\n └─────── 终点 →\n",paraId:6,tocIndex:3},{value:"属性",paraId:7,tocIndex:4},{value:"描述",paraId:7,tocIndex:4},{value:"类型",paraId:7,tocIndex:4},{value:"默认值",paraId:7,tocIndex:4},{value:"必选",paraId:7,tocIndex:4},{value:"offsetX",paraId:7,tocIndex:4},{value:"统一的 X 轴偏移量，同时作用于起点和终点",paraId:7,tocIndex:4},{value:"number",paraId:7,tocIndex:4},{value:"0",paraId:7,tocIndex:4},{value:"offsetY",paraId:7,tocIndex:4},{value:"统一的 Y 轴偏移量，同时作用于起点和终点",paraId:7,tocIndex:4},{value:"number",paraId:7,tocIndex:4},{value:"0",paraId:7,tocIndex:4},{value:"sourceOffsetX",paraId:7,tocIndex:4},{value:"起点的 X 轴偏移量",paraId:7,tocIndex:4},{value:"number",paraId:7,tocIndex:4},{value:"offsetX",paraId:7,tocIndex:4},{value:"sourceOffsetY",paraId:7,tocIndex:4},{value:"起点的 Y 轴偏移量",paraId:7,tocIndex:4},{value:"number",paraId:7,tocIndex:4},{value:"offsetY",paraId:7,tocIndex:4},{value:"targetOffsetX",paraId:7,tocIndex:4},{value:"终点的 X 轴偏移量",paraId:7,tocIndex:4},{value:"number",paraId:7,tocIndex:4},{value:"offsetX",paraId:7,tocIndex:4},{value:"targetOffsetY",paraId:7,tocIndex:4},{value:"终点的 Y 轴偏移量",paraId:7,tocIndex:4},{value:"number",paraId:7,tocIndex:4},{value:"offsetY",paraId:7,tocIndex:4},{value:"connectLength1",paraId:7,tocIndex:4},{value:"连接器的中间段长度",paraId:7,tocIndex:4},{value:"number",paraId:7,tocIndex:4},{value:"-",paraId:7,tocIndex:4},{value:"endMarker",paraId:7,tocIndex:4},{value:"是否显示端点标记（箭头）",paraId:7,tocIndex:4},{value:"boolean",paraId:7,tocIndex:4},{value:"true",paraId:7,tocIndex:4},{value:"style",paraId:7,tocIndex:4},{value:"连接器的样式配置",paraId:7,tocIndex:4},{value:"ConnectorPathStyleProps",paraId:8,tocIndex:4},{value:"-",paraId:7,tocIndex:4},{value:"连接器支持所有 Path 元素的样式属性，以及端点标记的样式配置。",paraId:9,tocIndex:5},{value:"属性",paraId:10,tocIndex:5},{value:"描述",paraId:10,tocIndex:5},{value:"类型",paraId:10,tocIndex:5},{value:"默认值",paraId:10,tocIndex:5},{value:"stroke",paraId:10,tocIndex:5},{value:"连接线的颜色",paraId:10,tocIndex:5},{value:"string",paraId:10,tocIndex:5},{value:"-",paraId:10,tocIndex:5},{value:"strokeWidth",paraId:10,tocIndex:5},{value:"连接线的宽度",paraId:10,tocIndex:5},{value:"number",paraId:10,tocIndex:5},{value:"1",paraId:10,tocIndex:5},{value:"strokeOpacity",paraId:10,tocIndex:5},{value:"连接线的透明度",paraId:10,tocIndex:5},{value:"number",paraId:10,tocIndex:5},{value:"1",paraId:10,tocIndex:5},{value:"strokeDasharray",paraId:10,tocIndex:5},{value:"虚线样式",paraId:10,tocIndex:5},{value:"string",paraId:10,tocIndex:5},{value:" | ",paraId:10,tocIndex:5},{value:"number[]",paraId:10,tocIndex:5},{value:"-",paraId:10,tocIndex:5},{value:"fill",paraId:10,tocIndex:5},{value:"填充色（通常用于封闭路径）",paraId:10,tocIndex:5},{value:"string",paraId:10,tocIndex:5},{value:"'none'",paraId:10,tocIndex:5},{value:"endMarkerSize",paraId:10,tocIndex:5},{value:"端点标记的大小",paraId:10,tocIndex:5},{value:"number",paraId:10,tocIndex:5},{value:"-",paraId:10,tocIndex:5},{value:"endMarkerFill",paraId:10,tocIndex:5},{value:"端点标记的填充色",paraId:10,tocIndex:5},{value:"string",paraId:10,tocIndex:5},{value:"-",paraId:10,tocIndex:5},{value:"endMarkerStroke",paraId:10,tocIndex:5},{value:"端点标记的描边色",paraId:10,tocIndex:5},{value:"string",paraId:10,tocIndex:5},{value:"-",paraId:10,tocIndex:5},{value:"使用 connector 标记可以创建基础连接线，连接两个数据点。",paraId:11,tocIndex:7},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'connector',\n  data: [\n    { source: 'A', target: 'B', x1: 100, y1: 100, x2: 300, y2: 200 },\n    { source: 'B', target: 'C', x1: 300, y1: 200, x2: 500, y2: 150 },\n    { source: 'C', target: 'D', x1: 500, y1: 150, x2: 400, y2: 300 },\n  ],\n  encode: {\n    x: ['x1', 'x2'],\n    y: ['y1', 'y2'],\n    color: 'source',\n  },\n  style: {\n    stroke: '#1890ff',\n    strokeWidth: 2,\n    endMarker: true,\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:12,tocIndex:7},{value:"连接器通常和其他 mark 一起使用：",paraId:13,tocIndex:8},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\n\n// 原始数据\nconst data = [\n  { type: '分类一', value: 27 },\n  { type: '分类二', value: 25 },\n  { type: '分类三', value: 18 },\n  { type: '分类四', value: 15 },\n  { type: '分类五', value: 10 },\n  { type: 'Other', value: 5 },\n];\n\nchart.options({\n  type: 'view',\n  children: [\n    {\n      type: 'interval',\n      data: data,\n      encode: {\n        x: 'type',\n        y: 'value',\n        color: 'type',\n      },\n    },\n    {\n      type: 'connector',\n      data: [\n        {\n          source: '分类一',\n          target: '分类三',\n          x1: '分类一',\n          x2: '分类三',\n          y1: 27,\n          y2: 18,\n        },\n      ],\n      encode: {\n        x: ['x1', 'x2'],\n        y: ['y1', 'y2'],\n      },\n      style: {\n        stroke: 'orange',\n        strokeWidth: 2,\n        sourceOffsetX: 15,\n        targetOffsetX: -20,\n      },\n      legend: false,\n    },\n  ],\n});\n\nchart.render();\n",paraId:14,tocIndex:8},{value:"// 根据数据动态调整连接器样式\nconst connector = new Connector({\n  stroke: (d) => (d.type === 'important' ? '#ff4d4f' : '#1890ff'),\n  strokeWidth: (d) => d.weight || 1,\n  connectLength1: (d) => d.distance || 20,\n});\n",paraId:15,tocIndex:10},{value:"// 带动画效果的连接器\nconst connector = new Connector({\n  stroke: '#1890ff',\n  strokeWidth: 2,\n  defaultEnterAnimation: 'growIn',\n  defaultUpdateAnimation: 'morphing',\n  defaultExitAnimation: 'fadeOut',\n});\n",paraId:16,tocIndex:11},{value:"坐标系兼容性",paraId:17,tocIndex:12},{value:"：当前版本主要支持直角坐标系，极坐标系的支持正在开发中",paraId:17,tocIndex:12},{value:"性能优化",paraId:17,tocIndex:12},{value:"：对于大量连接器的场景，建议使用批量渲染或虚拟化技术",paraId:17,tocIndex:12},{value:"路径计算",paraId:17,tocIndex:12},{value:"：复杂的路径可能需要自定义 ",paraId:17,tocIndex:12},{value:"connectorPath",paraId:17,tocIndex:12},{value:" 属性",paraId:17,tocIndex:12},{value:"端点标记",paraId:17,tocIndex:12},{value:"：默认的端点标记是箭头形状，可通过样式配置修改",paraId:17,tocIndex:12}]},78657:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(30948);const t=[{value:"density",paraId:0,tocIndex:0},{value:"是一种用于可视化连续变量分布概率密度的图表类型，通过核密度估计",paraId:0,tocIndex:0},{value:"（Kernel Density Estimation, KDE）",paraId:1,tocIndex:0},{value:" 将离散数据点转化为平滑的连续概率密度曲线，直观反映数据的集中趋势、分布形态及异常值。",paraId:0,tocIndex:0},{value:"density",paraId:2,tocIndex:0},{value:" 的核心目标是从散点或点云数据中提取出其整体分布模式，并将其密度信息映射为一个连续的区域图或渐变效果。这种图表通常用于分析大量数据点的聚集区域、数据集中热点或数据分布的概率密度，例如在地理可视化中用于表示人口分布的密集程度，或者在分析中展示交易频率的区域性。",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'density', // 设置图表类型为密度图\n  data: {\n    type: 'fetch', // 指定数据类型为通过网络获取\n    value: 'https://assets.antv.antgroup.com/g2/species.json', // 设置数据的 URL 地址\n    transform: [\n      {\n        type: 'kde', // 使用核密度估计（KDE）进行数据转换\n        field: 'y', // 指定 KDE 计算的字段为 'y'\n        groupBy: ['x', 'species'], // 按 'x' 和 'species' 字段对数据进行分组\n      },\n    ],\n  },\n  encode: {\n    x: 'x', // 将 'x' 字段映射到 x 轴\n    y: 'y', // 将 'y' 字段映射到 y 轴\n    color: 'species', // 将 'species' 字段映射到颜色\n    size: 'size', // 将 'size' 字段映射到图形大小\n    series: 'species', // 将 'species' 字段映射到系列\n  },\n\n  tooltip: false, // 关闭图表的 tooltip 功能\n});\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"更多的案例，可以查看",paraId:4,tocIndex:0},{value:"图表示例 - 小提琴图",paraId:5,tocIndex:0},{value:"页面。",paraId:4,tocIndex:0},{value:"属性",paraId:6,tocIndex:1},{value:"描述",paraId:6,tocIndex:1},{value:"类型",paraId:6,tocIndex:1},{value:"默认值",paraId:6,tocIndex:1},{value:"必选",paraId:6,tocIndex:1},{value:"coordinate",paraId:6,tocIndex:1},{value:"配置 ",paraId:6,tocIndex:1},{value:"density",paraId:6,tocIndex:1},{value:" 图形坐标系统，支持的属性：",paraId:6,tocIndex:1},{value:"cartesian",paraId:6,tocIndex:1},{value:" | ",paraId:6,tocIndex:1},{value:"polar",paraId:6,tocIndex:1},{value:"coordinate",paraId:7,tocIndex:1},{value:"'cartesian'",paraId:6,tocIndex:1},{value:"encode",paraId:6,tocIndex:1},{value:"配置 ",paraId:6,tocIndex:1},{value:"density",paraId:6,tocIndex:1},{value:" 标记的视觉通道，包括",paraId:6,tocIndex:1},{value:"x",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"y",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"color",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"size",paraId:6,tocIndex:1},{value:"等，用于指定视觉元素属性和数据之间的关系",paraId:6,tocIndex:1},{value:"encode",paraId:8,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"✓",paraId:6,tocIndex:1},{value:"scale",paraId:6,tocIndex:1},{value:"配置 ",paraId:6,tocIndex:1},{value:"density",paraId:6,tocIndex:1},{value:" 标记的图形缩放，包括",paraId:6,tocIndex:1},{value:"x",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"y",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"series",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"size",paraId:6,tocIndex:1},{value:"等",paraId:6,tocIndex:1},{value:"scale",paraId:9,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:"配置 ",paraId:6,tocIndex:1},{value:"density",paraId:6,tocIndex:1},{value:" 图形样式",paraId:6,tocIndex:1},{value:"style",paraId:10,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"coordinate",paraId:11,tocIndex:2},{value:"是数据可视化中定义数据映射到图形空间的核心系统，它决定了数据如何从“数值域”转换为“视觉位置”。坐标系通过不同的空间变换规则，重塑密度分布的视觉表达形式。",paraId:11,tocIndex:2},{value:"坐标系",paraId:12,tocIndex:2},{value:"类型",paraId:12,tocIndex:2},{value:"图表",paraId:12,tocIndex:2},{value:"直角坐标系",paraId:12,tocIndex:2},{value:"'cartesian'",paraId:12,tocIndex:2},{value:"和密度图等",paraId:12,tocIndex:2},{value:"极坐标系",paraId:12,tocIndex:2},{value:"'polar'",paraId:12,tocIndex:2},{value:"极坐标小提琴图等",paraId:12,tocIndex:2},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\nconst coordinateMap = [\n  {\n    coordinate: 'cartesian',\n    label: '直角坐标系',\n  },\n  {\n    coordinate: 'polar',\n    label: '极坐标系',\n  },\n];\n\nchart.options({\n  type: 'density',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/species.json',\n    transform: [\n      {\n        type: 'kde',\n        field: 'y',\n        groupBy: ['x', 'species'],\n      },\n    ],\n  },\n  encode: {\n    x: 'x',\n    y: 'y',\n    color: 'species',\n    size: 'size',\n    series: 'species',\n  },\n  coordinate: { type: coordinateMap[0].coordinate },\n  tooltip: false,\n});\n\nconst handleSetCoordinate = (coordinate) => {\n  // 设置选中的坐标系\n  chart.coordinate({\n    type: coordinate,\n  });\n  chart.render(); // 重新渲染图表\n};\n\n// 插入Encode-Color 选择器\nconst selectorContainer = document.createElement('div');\nselectorContainer.textContent = '选择坐标系 ';\nconst selector = document.createElement('select');\nselector.innerHTML = coordinateMap.map(\n  (coordinate, index) =>\n    `<option value=\"${coordinate.coordinate}\" ${\n      index === 0 ? 'selected' : ''\n    }>${coordinate.label}</option>`,\n);\nselector.onchange = (e) => {\n  handleSetCoordinate(e.target.value);\n};\nselectorContainer.appendChild(selector);\ncontainer.insertBefore(selectorContainer, container.childNodes[0]);\n\nchart.render();\n",paraId:13,tocIndex:2},{value:"更多的",paraId:14,tocIndex:2},{value:"coordinate",paraId:14,tocIndex:2},{value:"配置，可以查查看 ",paraId:14,tocIndex:2},{value:"coordinate",paraId:15,tocIndex:2},{value:" 介绍页面。",paraId:14,tocIndex:2},{value:"配置 ",paraId:16,tocIndex:3},{value:"density",paraId:16,tocIndex:3},{value:" 标记的视觉通道，定义数据字段与视觉属性之间映射关系的重要配置，它决定了数据如何转化为视觉表现。",paraId:16,tocIndex:3},{value:"属性",paraId:17,tocIndex:3},{value:"描述",paraId:17,tocIndex:3},{value:"类型",paraId:17,tocIndex:3},{value:"默认值",paraId:17,tocIndex:3},{value:"必选",paraId:17,tocIndex:3},{value:"x",paraId:17,tocIndex:3},{value:"绑定 ",paraId:17,tocIndex:3},{value:"density",paraId:17,tocIndex:3},{value:" 标记的 ",paraId:17,tocIndex:3},{value:"x",paraId:17,tocIndex:3},{value:" 属性通道，一般是 ",paraId:17,tocIndex:3},{value:"data",paraId:17,tocIndex:3},{value:" 中的时间或有序名词字段",paraId:17,tocIndex:3},{value:"encode",paraId:18,tocIndex:3},{value:"-",paraId:17,tocIndex:3},{value:"✓",paraId:17,tocIndex:3},{value:"y",paraId:17,tocIndex:3},{value:"绑定 ",paraId:17,tocIndex:3},{value:"density",paraId:17,tocIndex:3},{value:" 标记的 ",paraId:17,tocIndex:3},{value:"y",paraId:17,tocIndex:3},{value:" 属性通道，一般是 ",paraId:17,tocIndex:3},{value:"data",paraId:17,tocIndex:3},{value:" 中的数值或数组字段",paraId:17,tocIndex:3},{value:"encode",paraId:19,tocIndex:3},{value:"-",paraId:17,tocIndex:3},{value:"✓",paraId:17,tocIndex:3},{value:"color",paraId:17,tocIndex:3},{value:"绑定 ",paraId:17,tocIndex:3},{value:"density",paraId:17,tocIndex:3},{value:" 标记的 ",paraId:17,tocIndex:3},{value:"color",paraId:17,tocIndex:3},{value:" 属性通道，如果将数据字段映射到颜色通道，会对数据进行分组，将数据拆分成多个不同颜色的区域",paraId:17,tocIndex:3},{value:"encode",paraId:20,tocIndex:3},{value:"-",paraId:17,tocIndex:3},{value:"size",paraId:17,tocIndex:3},{value:"绑定 ",paraId:17,tocIndex:3},{value:"density",paraId:17,tocIndex:3},{value:" 标记的 ",paraId:17,tocIndex:3},{value:"size",paraId:17,tocIndex:3},{value:" 属性通道，用于将数据字段映射为图形元素的尺寸属性，通过调整密度曲线的线条粗细或填充区域的视觉比例，增强数据分布的对比维度与信息密度。",paraId:17,tocIndex:3},{value:"encode",paraId:21,tocIndex:3},{value:"-",paraId:17,tocIndex:3},{value:"✓",paraId:17,tocIndex:3},{value:"series",paraId:17,tocIndex:3},{value:"绑定 ",paraId:17,tocIndex:3},{value:"density",paraId:17,tocIndex:3},{value:" 标记的 ",paraId:17,tocIndex:3},{value:"series",paraId:17,tocIndex:3},{value:" 属性通道， 用于将数据分组字段映射到图表的系列或类别的配置项，根据某个字段对数据进行分类，并为每个类别生成独立的图形表现。",paraId:17,tocIndex:3},{value:"encode",paraId:22,tocIndex:3},{value:"-",paraId:17,tocIndex:3},{value:"✓",paraId:17,tocIndex:3},{value:"更多的",paraId:23,tocIndex:3},{value:"encode",paraId:23,tocIndex:3},{value:"配置，可以查查看 ",paraId:23,tocIndex:3},{value:"encode",paraId:24,tocIndex:3},{value:" 介绍页面。",paraId:23,tocIndex:3},{value:"scale",paraId:25,tocIndex:4},{value:"用于定义数据如何映射到视觉属性（如颜色、大小、形状等）。在",paraId:25,tocIndex:4},{value:"cell",paraId:25,tocIndex:4},{value:"的使用场景，scale 的常见作用就是为每个视觉通道（如颜色、大小、位置等）提供映射规则，使数据点能够准确地呈现。",paraId:25,tocIndex:4},{value:"属性",paraId:26,tocIndex:4},{value:"描述",paraId:26,tocIndex:4},{value:"类型",paraId:26,tocIndex:4},{value:"默认值",paraId:26,tocIndex:4},{value:"必选",paraId:26,tocIndex:4},{value:"x",paraId:26,tocIndex:4},{value:"定义数据字段到 X 轴视觉位置的映射规则",paraId:26,tocIndex:4},{value:"scale",paraId:27,tocIndex:4},{value:"{type: 'band'}",paraId:26,tocIndex:4},{value:"series",paraId:26,tocIndex:4},{value:"控制分类字段（series 编码）到视觉属性（如颜色、线型、符号）的映射规则",paraId:26,tocIndex:4},{value:"scale",paraId:28,tocIndex:4},{value:"{type: 'band'}",paraId:26,tocIndex:4},{value:"size",paraId:26,tocIndex:4},{value:"将数据字段映射到视觉元素（如密度曲线宽度、点面积或区域高度）的尺寸属性",paraId:26,tocIndex:4},{value:"scale",paraId:29,tocIndex:4},{value:"{type: 'identity'}",paraId:26,tocIndex:4},{value:"更多的",paraId:30,tocIndex:4},{value:"scale",paraId:30,tocIndex:4},{value:"配置，可以查查看 ",paraId:30,tocIndex:4},{value:"scale",paraId:31,tocIndex:4},{value:" 介绍页面。",paraId:30,tocIndex:4},{value:"style",paraId:32,tocIndex:5},{value:" 用于设置图表元素的外观样式，包括填充颜色、边框样式、阴影效果等。",paraId:32,tocIndex:5},{value:"属性",paraId:33,tocIndex:5},{value:"描述",paraId:33,tocIndex:5},{value:"类型",paraId:33,tocIndex:5},{value:"默认值",paraId:33,tocIndex:5},{value:"必选",paraId:33,tocIndex:5},{value:"fill",paraId:33,tocIndex:5},{value:"图形的填充色",paraId:33,tocIndex:5},{value:"string",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"Function<string>",paraId:33,tocIndex:5},{value:"-",paraId:33,tocIndex:5},{value:"fillOpacity",paraId:33,tocIndex:5},{value:"图形的填充透明度",paraId:33,tocIndex:5},{value:"number",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"Function<number>",paraId:33,tocIndex:5},{value:"-",paraId:33,tocIndex:5},{value:"stroke",paraId:33,tocIndex:5},{value:"图形的描边",paraId:33,tocIndex:5},{value:"string",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"Function<string>",paraId:33,tocIndex:5},{value:"-",paraId:33,tocIndex:5},{value:"strokeOpacity",paraId:33,tocIndex:5},{value:"描边透明度",paraId:33,tocIndex:5},{value:"number",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"Function<number>",paraId:33,tocIndex:5},{value:"-",paraId:33,tocIndex:5},{value:"lineWidth",paraId:33,tocIndex:5},{value:"图形描边的宽度",paraId:33,tocIndex:5},{value:"number",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"Function<number>",paraId:33,tocIndex:5},{value:"-",paraId:33,tocIndex:5},{value:"lineDash",paraId:33,tocIndex:5},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:33,tocIndex:5},{value:"[number,number]",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"Function<[number, number]>",paraId:33,tocIndex:5},{value:"-",paraId:33,tocIndex:5},{value:"opacity",paraId:33,tocIndex:5},{value:"图形的整体透明度",paraId:33,tocIndex:5},{value:"number",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"Function<number>",paraId:33,tocIndex:5},{value:"-",paraId:33,tocIndex:5},{value:"shadowColor",paraId:33,tocIndex:5},{value:"图形阴影颜色",paraId:33,tocIndex:5},{value:"string",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"Function<string>",paraId:33,tocIndex:5},{value:"-",paraId:33,tocIndex:5},{value:"shadowBlur",paraId:33,tocIndex:5},{value:"图形阴影的高斯模糊系数",paraId:33,tocIndex:5},{value:"number",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"Function<number>",paraId:33,tocIndex:5},{value:"-",paraId:33,tocIndex:5},{value:"shadowOffsetX",paraId:33,tocIndex:5},{value:"设置阴影距图形的水平距离",paraId:33,tocIndex:5},{value:"number",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"Function<number>",paraId:33,tocIndex:5},{value:"-",paraId:33,tocIndex:5},{value:"shadowOffsetY",paraId:33,tocIndex:5},{value:"设置阴影距图形的垂直距离",paraId:33,tocIndex:5},{value:"number",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"Function<number>",paraId:33,tocIndex:5},{value:"-",paraId:33,tocIndex:5},{value:"cursor",paraId:33,tocIndex:5},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:33,tocIndex:5},{value:"string",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"Function<string>",paraId:33,tocIndex:5},{value:"'default'",paraId:33,tocIndex:5},{value:"更多的",paraId:34,tocIndex:5},{value:"style",paraId:34,tocIndex:5},{value:"配置，可以查看 ",paraId:34,tocIndex:5},{value:"style",paraId:35,tocIndex:5},{value:" 介绍页面。",paraId:34,tocIndex:5},{value:"尝试一下：",paraId:36,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/species.json',\n  transform: [\n    {\n      type: 'kde',\n      field: 'y',\n      groupBy: ['x'],\n      size: 20,\n    },\n  ],\n});\n\nchart\n  .density()\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('color', 'x')\n  .encode('size', 'size')\n  .tooltip(false);\n\nchart.render();\n\n",paraId:37,tocIndex:5}]},39087:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(51747);const t=[{value:"gauge",paraId:0,tocIndex:0},{value:" 用于创建仪表盘，它是一种常见的可视化图表，用于展示数据的进度、比例或比较情况。",paraId:0,tocIndex:0},{value:"典型应用场景：",paraId:1,tocIndex:0},{value:"业务指标：销售额达成率、用户增长进度；",paraId:2,tocIndex:0},{value:"系统监控：CPU/内存使用率、磁盘容量预警；",paraId:2,tocIndex:0},{value:"设备仪表：车辆时速表、温度计模拟。",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'gauge', // 设置图表的类型为仪表盘\n  data: {\n    value: {\n      target: 120, // 仪表盘的目标值\n      total: 400, // 仪表盘的总值\n      name: 'score', // 仪表盘数据的名称\n    },\n  },\n});\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"必选",paraId:4,tocIndex:1},{value:"data",paraId:4,tocIndex:1},{value:"定义仪表盘的数值、目标值及分类信息，通过数据绑定驱动表盘指针位置、颜色映射及多仪表分面展示",paraId:4,tocIndex:1},{value:"data",paraId:5,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"✓",paraId:4,tocIndex:1},{value:"encode",paraId:4,tocIndex:1},{value:"配置 ",paraId:4,tocIndex:1},{value:"gauge",paraId:4,tocIndex:1},{value:" 标记的视觉通道，包括",paraId:4,tocIndex:1},{value:"x",paraId:4,tocIndex:1},{value:"、",paraId:4,tocIndex:1},{value:"y",paraId:4,tocIndex:1},{value:"、",paraId:4,tocIndex:1},{value:"color",paraId:4,tocIndex:1},{value:"等，用于指定视觉元素属性和数据之间的关系",paraId:4,tocIndex:1},{value:"encode",paraId:6,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"scale",paraId:4,tocIndex:1},{value:"配置 ",paraId:4,tocIndex:1},{value:"gauge",paraId:4,tocIndex:1},{value:" 标记的比例尺，包括",paraId:4,tocIndex:1},{value:"y",paraId:4,tocIndex:1},{value:"、",paraId:4,tocIndex:1},{value:"size",paraId:4,tocIndex:1},{value:"等",paraId:4,tocIndex:1},{value:"scale",paraId:7,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"style",paraId:4,tocIndex:1},{value:"配置图形样式和标签样式",paraId:4,tocIndex:1},{value:"style",paraId:8,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"data",paraId:9,tocIndex:2},{value:"定义仪表盘的数值、目标值及分类信息，通过数据绑定驱动表盘指针位置、颜色映射及多仪表分面展示。",paraId:9,tocIndex:2},{value:"属性",paraId:10,tocIndex:2},{value:"描述",paraId:10,tocIndex:2},{value:"类型",paraId:10,tocIndex:2},{value:"默认值",paraId:10,tocIndex:2},{value:"必选",paraId:10,tocIndex:2},{value:"target",paraId:10,tocIndex:2},{value:"设置仪表盘指针的目标值",paraId:10,tocIndex:2},{value:"number",paraId:10,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"total",paraId:10,tocIndex:2},{value:"设置仪表盘刻度的最大范围值",paraId:10,tocIndex:2},{value:"number",paraId:10,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"percent",paraId:10,tocIndex:2},{value:"设置仪表盘指针指向的百分比(配置",paraId:10,tocIndex:2},{value:"percent",paraId:10,tocIndex:2},{value:"时，",paraId:10,tocIndex:2},{value:"target",paraId:10,tocIndex:2},{value:"、",paraId:10,tocIndex:2},{value:"total",paraId:10,tocIndex:2},{value:"值会失效，",paraId:10,tocIndex:2},{value:"thresholds",paraId:10,tocIndex:2},{value:"请设置在合理区间，否则会造成渲染错误 )",paraId:10,tocIndex:2},{value:"number",paraId:10,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"thresholds",paraId:10,tocIndex:2},{value:"设置仪表盘刻度阈值区间",paraId:10,tocIndex:2},{value:"number[]",paraId:10,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"更多的",paraId:11,tocIndex:2},{value:"data",paraId:11,tocIndex:2},{value:"配置，可以查查看 ",paraId:11,tocIndex:2},{value:"data",paraId:12,tocIndex:2},{value:" 介绍页面。",paraId:11,tocIndex:2},{value:"配置 ",paraId:13,tocIndex:3},{value:"gauge",paraId:13,tocIndex:3},{value:" 标记的视觉通道，定义数据字段与视觉属性之间映射关系的重要配置，它决定了数据如何转化为视觉表现。",paraId:13,tocIndex:3},{value:"属性",paraId:14,tocIndex:3},{value:"描述",paraId:14,tocIndex:3},{value:"类型",paraId:14,tocIndex:3},{value:"默认值",paraId:14,tocIndex:3},{value:"必选",paraId:14,tocIndex:3},{value:"x",paraId:14,tocIndex:3},{value:"绑定 ",paraId:14,tocIndex:3},{value:"gauge",paraId:14,tocIndex:3},{value:" 标记的 ",paraId:14,tocIndex:3},{value:"x",paraId:14,tocIndex:3},{value:" 属性通道，一般是 ",paraId:14,tocIndex:3},{value:"data",paraId:14,tocIndex:3},{value:" 中的时间或有序名词字段",paraId:14,tocIndex:3},{value:"encode",paraId:15,tocIndex:3},{value:"'x'",paraId:14,tocIndex:3},{value:"y",paraId:14,tocIndex:3},{value:"绑定 ",paraId:14,tocIndex:3},{value:"gauge",paraId:14,tocIndex:3},{value:" 标记的 ",paraId:14,tocIndex:3},{value:"y",paraId:14,tocIndex:3},{value:" 属性通道，一般是 ",paraId:14,tocIndex:3},{value:"data",paraId:14,tocIndex:3},{value:" 中的数值或数组字段",paraId:14,tocIndex:3},{value:"encode",paraId:16,tocIndex:3},{value:"'y'",paraId:14,tocIndex:3},{value:"color",paraId:14,tocIndex:3},{value:"绑定 ",paraId:14,tocIndex:3},{value:"gauge",paraId:14,tocIndex:3},{value:" 标记的 ",paraId:14,tocIndex:3},{value:"color",paraId:14,tocIndex:3},{value:" 属性通道，如果将数据字段映射到颜色通道，会对数据进行分组，将数据拆分成多个不同颜色的区域",paraId:14,tocIndex:3},{value:"encode",paraId:17,tocIndex:3},{value:"'color'",paraId:14,tocIndex:3},{value:"更多的",paraId:18,tocIndex:3},{value:"encode",paraId:18,tocIndex:3},{value:"配置，可以查查看 ",paraId:18,tocIndex:3},{value:"encode",paraId:19,tocIndex:3},{value:" 介绍页面。",paraId:18,tocIndex:3},{value:"scale",paraId:20,tocIndex:4},{value:"用于定义数据如何映射到视觉属性（如颜色、大小、形状等）。",paraId:20,tocIndex:4},{value:"属性",paraId:21,tocIndex:4},{value:"描述",paraId:21,tocIndex:4},{value:"类型",paraId:21,tocIndex:4},{value:"默认值",paraId:21,tocIndex:4},{value:"必选",paraId:21,tocIndex:4},{value:"y",paraId:21,tocIndex:4},{value:"定义数据字段到 Y 轴视觉位置的映射规则",paraId:21,tocIndex:4},{value:"scale",paraId:22,tocIndex:4},{value:"{domain: [0, percent ? 1 : total]}",paraId:21,tocIndex:4},{value:"color",paraId:21,tocIndex:4},{value:"定义仪表盘刻度颜色的映射规则",paraId:21,tocIndex:4},{value:"scale",paraId:23,tocIndex:4},{value:"{range: ['#30BF78', '#D0D0D0']}",paraId:21,tocIndex:4},{value:"颜色的分布与 data 中的数据相关。这里的颜色可以设置为渐变色，用于配置渐变色的仪表盘。",paraId:24,tocIndex:5},{value:"只有",paraId:25,tocIndex:5},{value:"target",paraId:25,tocIndex:5},{value:"或者",paraId:25,tocIndex:5},{value:"percent",paraId:25,tocIndex:5},{value:"，",paraId:25,tocIndex:5},{value:"color",paraId:25,tocIndex:5},{value:"参数",paraId:25,tocIndex:5},{value:"range",paraId:25,tocIndex:5},{value:"可以由两个颜色参数组成，在仪表盘刻度会由这两个颜色将会将仪表盘刻度分成两段",paraId:25,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'gauge',\n  data: {\n    value: {\n      target: 120,\n      total: 400,\n      name: 'score',\n    },\n  },\n  scale: {\n    color: { range: ['#FAAD14', 'green'] },\n  },\n});\n\nchart.render();\n",paraId:26,tocIndex:5},{value:"设置了",paraId:27,tocIndex:5},{value:"thresholds",paraId:27,tocIndex:5},{value:"，",paraId:27,tocIndex:5},{value:"color",paraId:27,tocIndex:5},{value:"参数",paraId:27,tocIndex:5},{value:"range",paraId:27,tocIndex:5},{value:"的颜色与",paraId:27,tocIndex:5},{value:"thresholds",paraId:27,tocIndex:5},{value:"的长度一致，仪表盘刻度会被",paraId:27,tocIndex:5},{value:"thresholds",paraId:27,tocIndex:5},{value:"中的值分段，并填充",paraId:27,tocIndex:5},{value:"scale",paraId:27,tocIndex:5},{value:"参数",paraId:27,tocIndex:5},{value:"color",paraId:27,tocIndex:5},{value:"对应位置的色彩",paraId:27,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'gauge',\n  data: {\n    value: {\n      target: 120,\n      total: 400,\n      name: 'score',\n      thresholds: [100, 200, 400],\n    },\n  },\n  scale: {\n    color: { range: ['#F4664A', '#FAAD14', 'green'] },\n  },\n});\n\nchart.render();\n",paraId:28,tocIndex:5},{value:"更多的",paraId:29,tocIndex:5},{value:"scale",paraId:29,tocIndex:5},{value:"配置，可以查查看 ",paraId:29,tocIndex:5},{value:"scale",paraId:30,tocIndex:5},{value:" 介绍页面。",paraId:29,tocIndex:5},{value:"style",paraId:31,tocIndex:6},{value:" 用于设置图表元素的外观样式，包括填充颜色、边框样式、阴影效果等。",paraId:31,tocIndex:6},{value:"属性",paraId:32,tocIndex:6},{value:"描述",paraId:32,tocIndex:6},{value:"类型",paraId:32,tocIndex:6},{value:"默认值",paraId:32,tocIndex:6},{value:"必选",paraId:32,tocIndex:6},{value:"arc",paraId:32,tocIndex:6},{value:"配置仪表盘圆弧的样式",paraId:32,tocIndex:6},{value:"arc",paraId:33,tocIndex:6},{value:"详见 ",paraId:32,tocIndex:6},{value:"arc",paraId:34,tocIndex:6},{value:"pin",paraId:32,tocIndex:6},{value:"配置仪表盘指针轴心的样式",paraId:32,tocIndex:6},{value:"pin",paraId:35,tocIndex:6},{value:"详见 ",paraId:32,tocIndex:6},{value:"pin",paraId:36,tocIndex:6},{value:"pointer",paraId:32,tocIndex:6},{value:"配置仪表盘指针的样式",paraId:32,tocIndex:6},{value:"pointer",paraId:37,tocIndex:6},{value:"详见 ",paraId:32,tocIndex:6},{value:"pointer",paraId:38,tocIndex:6},{value:"text",paraId:32,tocIndex:6},{value:"配置仪表盘中心文字的样式",paraId:32,tocIndex:6},{value:"text",paraId:39,tocIndex:6},{value:"详见 ",paraId:32,tocIndex:6},{value:"text",paraId:40,tocIndex:6},{value:"复合图形标记需要通过不同的前缀来区分图形的配置。",paraId:41,tocIndex:6},{value:"通过 ",paraId:42,tocIndex:7},{value:"arc",paraId:42,tocIndex:7},{value:" 前缀配置仪表盘圆弧的样式。",paraId:42,tocIndex:7},{value:"属性",paraId:43,tocIndex:7},{value:"描述",paraId:43,tocIndex:7},{value:"类型",paraId:43,tocIndex:7},{value:"默认值",paraId:43,tocIndex:7},{value:"必选",paraId:43,tocIndex:7},{value:"arcShape",paraId:43,tocIndex:7},{value:"仪表盘圆弧形状",paraId:43,tocIndex:7},{value:"'rect'",paraId:43,tocIndex:7},{value:" |",paraId:43,tocIndex:7},{value:"'hollow'",paraId:43,tocIndex:7},{value:"|",paraId:43,tocIndex:7},{value:"'round'",paraId:43,tocIndex:7},{value:"'rect'",paraId:43,tocIndex:7},{value:"arcFill",paraId:43,tocIndex:7},{value:"仪表盘圆弧填充颜色",paraId:43,tocIndex:7},{value:"string | (datum, index, data) => string",paraId:43,tocIndex:7},{value:"-",paraId:43,tocIndex:7},{value:"arcFillOpacity",paraId:43,tocIndex:7},{value:"仪表盘圆弧填充透明度",paraId:43,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:43,tocIndex:7},{value:"-",paraId:43,tocIndex:7},{value:"arcStroke",paraId:43,tocIndex:7},{value:"仪表盘圆弧描边颜色",paraId:43,tocIndex:7},{value:"string | (datum, index, data) => string",paraId:43,tocIndex:7},{value:"-",paraId:43,tocIndex:7},{value:"arcStrokeOpacity",paraId:43,tocIndex:7},{value:"仪表盘圆弧描边透明度",paraId:43,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:43,tocIndex:7},{value:"-",paraId:43,tocIndex:7},{value:"arcLineHeight",paraId:43,tocIndex:7},{value:"仪表盘圆弧行高",paraId:43,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:43,tocIndex:7},{value:"-",paraId:43,tocIndex:7},{value:"arcLineWidth",paraId:43,tocIndex:7},{value:"仪表盘圆弧描边宽度",paraId:43,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:43,tocIndex:7},{value:"-",paraId:43,tocIndex:7},{value:"arcLineDash",paraId:43,tocIndex:7},{value:"仪表盘圆弧虚线配置",paraId:43,tocIndex:7},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:43,tocIndex:7},{value:"-",paraId:43,tocIndex:7},{value:"arcOpacity",paraId:43,tocIndex:7},{value:"仪表盘圆弧整体透明度",paraId:43,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:43,tocIndex:7},{value:"-",paraId:43,tocIndex:7},{value:"arcShadowColor",paraId:43,tocIndex:7},{value:"仪表盘圆弧阴影颜色",paraId:43,tocIndex:7},{value:"string | (datum, index, data) => string",paraId:43,tocIndex:7},{value:"-",paraId:43,tocIndex:7},{value:"arcShadowBlur",paraId:43,tocIndex:7},{value:"仪表盘圆弧阴影模糊系数",paraId:43,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:43,tocIndex:7},{value:"-",paraId:43,tocIndex:7},{value:"arcShadowOffsetX",paraId:43,tocIndex:7},{value:"仪表盘圆弧阴影水平偏移",paraId:43,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:43,tocIndex:7},{value:"-",paraId:43,tocIndex:7},{value:"arcShadowOffsetY",paraId:43,tocIndex:7},{value:"仪表盘圆弧阴影垂直偏移",paraId:43,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:43,tocIndex:7},{value:"-",paraId:43,tocIndex:7},{value:"arcCursor",paraId:43,tocIndex:7},{value:"仪表盘圆弧鼠标样式",paraId:43,tocIndex:7},{value:"string | (datum, index, data) => string",paraId:43,tocIndex:7},{value:"default",paraId:43,tocIndex:7},{value:"通过 ",paraId:44,tocIndex:8},{value:"pin",paraId:44,tocIndex:8},{value:" 前缀配置仪表盘指针轴心的样式。",paraId:44,tocIndex:8},{value:"属性",paraId:45,tocIndex:8},{value:"描述",paraId:45,tocIndex:8},{value:"类型",paraId:45,tocIndex:8},{value:"默认值",paraId:45,tocIndex:8},{value:"必选",paraId:45,tocIndex:8},{value:"pinR",paraId:45,tocIndex:8},{value:"仪表盘指针轴心半径大小",paraId:45,tocIndex:8},{value:"number | (datum, index, data) => number",paraId:45,tocIndex:8},{value:"10",paraId:45,tocIndex:8},{value:"pinFill",paraId:45,tocIndex:8},{value:"仪表盘指针轴心填充颜色",paraId:45,tocIndex:8},{value:"string | (datum, index, data) => string",paraId:45,tocIndex:8},{value:"'#fff'",paraId:45,tocIndex:8},{value:"pinFillOpacity",paraId:45,tocIndex:8},{value:"仪表盘指针轴心填充透明度",paraId:45,tocIndex:8},{value:"number | (datum, index, data) => number",paraId:45,tocIndex:8},{value:"-",paraId:45,tocIndex:8},{value:"pinStroke",paraId:45,tocIndex:8},{value:"仪表盘指针轴心描边颜色",paraId:45,tocIndex:8},{value:"string | (datum, index, data) => string",paraId:45,tocIndex:8},{value:"-",paraId:45,tocIndex:8},{value:"pinStrokeOpacity",paraId:45,tocIndex:8},{value:"仪表盘指针轴心描边透明度",paraId:45,tocIndex:8},{value:"number | (datum, index, data) => number",paraId:45,tocIndex:8},{value:"-",paraId:45,tocIndex:8},{value:"pinLineHeight",paraId:45,tocIndex:8},{value:"仪表盘指针轴心行高",paraId:45,tocIndex:8},{value:"number | (datum, index, data) => number",paraId:45,tocIndex:8},{value:"-",paraId:45,tocIndex:8},{value:"pinLineWidth",paraId:45,tocIndex:8},{value:"仪表盘指针轴心描边宽度",paraId:45,tocIndex:8},{value:"number | (datum, index, data) => number",paraId:45,tocIndex:8},{value:"-",paraId:45,tocIndex:8},{value:"pinLineDash",paraId:45,tocIndex:8},{value:"仪表盘指针轴心虚线配置",paraId:45,tocIndex:8},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:45,tocIndex:8},{value:"-",paraId:45,tocIndex:8},{value:"pinOpacity",paraId:45,tocIndex:8},{value:"仪表盘指针轴心整体透明度",paraId:45,tocIndex:8},{value:"number | (datum, index, data) => number",paraId:45,tocIndex:8},{value:"-",paraId:45,tocIndex:8},{value:"pinShadowColor",paraId:45,tocIndex:8},{value:"仪表盘指针轴心阴影颜色",paraId:45,tocIndex:8},{value:"string | (datum, index, data) => string",paraId:45,tocIndex:8},{value:"-",paraId:45,tocIndex:8},{value:"pinShadowBlur",paraId:45,tocIndex:8},{value:"仪表盘指针轴心阴影模糊系数",paraId:45,tocIndex:8},{value:"number | (datum, index, data) => number",paraId:45,tocIndex:8},{value:"-",paraId:45,tocIndex:8},{value:"pinShadowOffsetX",paraId:45,tocIndex:8},{value:"仪表盘指针轴心阴影水平偏移",paraId:45,tocIndex:8},{value:"number | (datum, index, data) => number",paraId:45,tocIndex:8},{value:"-",paraId:45,tocIndex:8},{value:"pinShadowOffsetY",paraId:45,tocIndex:8},{value:"仪表盘指针轴心阴影垂直偏移",paraId:45,tocIndex:8},{value:"number | (datum, index, data) => number",paraId:45,tocIndex:8},{value:"-",paraId:45,tocIndex:8},{value:"pinCursor",paraId:45,tocIndex:8},{value:"仪表盘指针轴心鼠标样式",paraId:45,tocIndex:8},{value:"string | (datum, index, data) => string",paraId:45,tocIndex:8},{value:"default",paraId:45,tocIndex:8},{value:"通过 ",paraId:46,tocIndex:9},{value:"pointer",paraId:46,tocIndex:9},{value:" 前缀配置仪表盘指针的样式。",paraId:46,tocIndex:9},{value:"属性",paraId:47,tocIndex:9},{value:"描述",paraId:47,tocIndex:9},{value:"类型",paraId:47,tocIndex:9},{value:"默认值",paraId:47,tocIndex:9},{value:"必选",paraId:47,tocIndex:9},{value:"pointerShape",paraId:47,tocIndex:9},{value:"仪表盘指针形状",paraId:47,tocIndex:9},{value:"'line'",paraId:47,tocIndex:9},{value:" |",paraId:47,tocIndex:9},{value:"(points, value, coordinate, theme) => DisplayObject",paraId:47,tocIndex:9},{value:"'line'",paraId:47,tocIndex:9},{value:"pointerStroke",paraId:47,tocIndex:9},{value:"仪表盘指针描边颜色",paraId:47,tocIndex:9},{value:"string | (datum, index, data) => string",paraId:47,tocIndex:9},{value:"-",paraId:47,tocIndex:9},{value:"pointerStrokeOpacity",paraId:47,tocIndex:9},{value:"仪表盘指针描边透明度",paraId:47,tocIndex:9},{value:"number | (datum, index, data) => number",paraId:47,tocIndex:9},{value:"-",paraId:47,tocIndex:9},{value:"pointerLineWidth",paraId:47,tocIndex:9},{value:"仪表盘指针线宽",paraId:47,tocIndex:9},{value:"number | (datum, index, data) => number",paraId:47,tocIndex:9},{value:"-",paraId:47,tocIndex:9},{value:"pointerLineDash",paraId:47,tocIndex:9},{value:"仪表盘指针虚线配置",paraId:47,tocIndex:9},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:47,tocIndex:9},{value:"-",paraId:47,tocIndex:9},{value:"pointerOpacity",paraId:47,tocIndex:9},{value:"仪表盘指针整体透明度",paraId:47,tocIndex:9},{value:"number | (datum, index, data) => number",paraId:47,tocIndex:9},{value:"-",paraId:47,tocIndex:9},{value:"pointerShadowColor",paraId:47,tocIndex:9},{value:"仪表盘指针阴影颜色",paraId:47,tocIndex:9},{value:"string | (datum, index, data) => string",paraId:47,tocIndex:9},{value:"-",paraId:47,tocIndex:9},{value:"pointerShadowBlur",paraId:47,tocIndex:9},{value:"仪表盘指针阴影模糊系数",paraId:47,tocIndex:9},{value:"number | (datum, index, data) => number",paraId:47,tocIndex:9},{value:"-",paraId:47,tocIndex:9},{value:"pointerShadowOffsetX",paraId:47,tocIndex:9},{value:"仪表盘指针阴影水平偏移",paraId:47,tocIndex:9},{value:"number | (datum, index, data) => number",paraId:47,tocIndex:9},{value:"-",paraId:47,tocIndex:9},{value:"pointerShadowOffsetY",paraId:47,tocIndex:9},{value:"仪表盘指针阴影垂直偏移",paraId:47,tocIndex:9},{value:"number | (datum, index, data) => number",paraId:47,tocIndex:9},{value:"-",paraId:47,tocIndex:9},{value:"pointerCursor",paraId:47,tocIndex:9},{value:"仪表盘指针鼠标样式",paraId:47,tocIndex:9},{value:"string | (datum, index, data) => string",paraId:47,tocIndex:9},{value:"default",paraId:47,tocIndex:9},{value:"通过 ",paraId:48,tocIndex:10},{value:"text",paraId:48,tocIndex:10},{value:" 前缀配置仪表盘指示文本的样式。",paraId:48,tocIndex:10},{value:"属性",paraId:49,tocIndex:10},{value:"描述",paraId:49,tocIndex:10},{value:"类型",paraId:49,tocIndex:10},{value:"默认值",paraId:49,tocIndex:10},{value:"必选",paraId:49,tocIndex:10},{value:"textContent",paraId:49,tocIndex:10},{value:"设置仪表盘中心指示文本内容",paraId:49,tocIndex:10},{value:"string",paraId:49,tocIndex:10},{value:"-",paraId:49,tocIndex:10},{value:"textX",paraId:49,tocIndex:10},{value:"仪表盘中心指示文本 x 方向上的偏移量，可以设置为具体数值，也可以设置百分比",paraId:49,tocIndex:10},{value:"number | string",paraId:49,tocIndex:10},{value:"50%",paraId:49,tocIndex:10},{value:"textY",paraId:49,tocIndex:10},{value:"仪表盘中心指示文本 y 方向上的偏移量 ，可以设置为具体数值，也可以设置百分比",paraId:49,tocIndex:10},{value:"number | string",paraId:49,tocIndex:10},{value:"60%",paraId:49,tocIndex:10},{value:"textFontSize",paraId:49,tocIndex:10},{value:"仪表盘指示文本文字大小",paraId:49,tocIndex:10},{value:"number | (datum, index, data) => number",paraId:49,tocIndex:10},{value:"20",paraId:49,tocIndex:10},{value:"textFontFamily",paraId:49,tocIndex:10},{value:"仪表盘指示文本字体",paraId:49,tocIndex:10},{value:"string | (datum, index, data) => string",paraId:49,tocIndex:10},{value:"-",paraId:49,tocIndex:10},{value:"textFontWeight",paraId:49,tocIndex:10},{value:"仪表盘指示文本字重",paraId:49,tocIndex:10},{value:"number | (datum, index, data) => number",paraId:49,tocIndex:10},{value:"800",paraId:49,tocIndex:10},{value:"textTextAlign",paraId:49,tocIndex:10},{value:"仪表盘指示文本对齐方式",paraId:49,tocIndex:10},{value:"center",paraId:49,tocIndex:10},{value:" | ",paraId:49,tocIndex:10},{value:"end",paraId:49,tocIndex:10},{value:" | ",paraId:49,tocIndex:10},{value:"left",paraId:49,tocIndex:10},{value:" | ",paraId:49,tocIndex:10},{value:"right",paraId:49,tocIndex:10},{value:" | ",paraId:49,tocIndex:10},{value:"start",paraId:49,tocIndex:10},{value:"center",paraId:49,tocIndex:10},{value:"textTextBaseline",paraId:49,tocIndex:10},{value:"仪表盘指示文本基线对齐",paraId:49,tocIndex:10},{value:"top",paraId:49,tocIndex:10},{value:" | ",paraId:49,tocIndex:10},{value:"middle",paraId:49,tocIndex:10},{value:" | ",paraId:49,tocIndex:10},{value:"bottom",paraId:49,tocIndex:10},{value:" | ",paraId:49,tocIndex:10},{value:"alphabetic",paraId:49,tocIndex:10},{value:" | ",paraId:49,tocIndex:10},{value:"hanging",paraId:49,tocIndex:10},{value:"middle",paraId:49,tocIndex:10},{value:"textFill",paraId:49,tocIndex:10},{value:"仪表盘指示文本颜色",paraId:49,tocIndex:10},{value:"string | (datum, index, data) => string",paraId:49,tocIndex:10},{value:"#888",paraId:49,tocIndex:10},{value:"textFillOpacity",paraId:49,tocIndex:10},{value:"仪表盘指示文本透明度",paraId:49,tocIndex:10},{value:"number | (datum, index, data) => number",paraId:49,tocIndex:10},{value:"-",paraId:49,tocIndex:10},{value:"textStroke",paraId:49,tocIndex:10},{value:"仪表盘指示文本描边色",paraId:49,tocIndex:10},{value:"string | (datum, index, data) => string",paraId:49,tocIndex:10},{value:"-",paraId:49,tocIndex:10},{value:"textStrokeOpacity",paraId:49,tocIndex:10},{value:"仪表盘指示文本描边透明度",paraId:49,tocIndex:10},{value:"number | (datum, index, data) => number",paraId:49,tocIndex:10},{value:"-",paraId:49,tocIndex:10},{value:"textLineHeight",paraId:49,tocIndex:10},{value:"仪表盘指示文本行高",paraId:49,tocIndex:10},{value:"number | (datum, index, data) => number",paraId:49,tocIndex:10},{value:"-",paraId:49,tocIndex:10},{value:"textLineWidth",paraId:49,tocIndex:10},{value:"仪表盘指示文本描边宽度",paraId:49,tocIndex:10},{value:"number | (datum, index, data) => number",paraId:49,tocIndex:10},{value:"-",paraId:49,tocIndex:10},{value:"textLineDash",paraId:49,tocIndex:10},{value:"仪表盘指示文本虚线配置",paraId:49,tocIndex:10},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:49,tocIndex:10},{value:"-",paraId:49,tocIndex:10},{value:"textOpacity",paraId:49,tocIndex:10},{value:"仪表盘指示文本整体透明度",paraId:49,tocIndex:10},{value:"number | (datum, index, data) => number",paraId:49,tocIndex:10},{value:"-",paraId:49,tocIndex:10},{value:"textShadowColor",paraId:49,tocIndex:10},{value:"仪表盘指示文本阴影颜色",paraId:49,tocIndex:10},{value:"string | (datum, index, data) => string",paraId:49,tocIndex:10},{value:"-",paraId:49,tocIndex:10},{value:"textShadowBlur",paraId:49,tocIndex:10},{value:"仪表盘指示文本阴影模糊",paraId:49,tocIndex:10},{value:"number | (datum, index, data) => number",paraId:49,tocIndex:10},{value:"-",paraId:49,tocIndex:10},{value:"textShadowOffsetX",paraId:49,tocIndex:10},{value:"仪表盘指示文本阴影水平偏移",paraId:49,tocIndex:10},{value:"number | (datum, index, data) => number",paraId:49,tocIndex:10},{value:"-",paraId:49,tocIndex:10},{value:"textShadowOffsetY",paraId:49,tocIndex:10},{value:"仪表盘指示文本阴影垂直偏移",paraId:49,tocIndex:10},{value:"number | (datum, index, data) => number",paraId:49,tocIndex:10},{value:"-",paraId:49,tocIndex:10},{value:"textCursor",paraId:49,tocIndex:10},{value:"仪表盘指示文本鼠标样式",paraId:49,tocIndex:10},{value:"string | (datum, index, data) => string",paraId:49,tocIndex:10},{value:"default",paraId:49,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'gauge',\n  data: {\n    value: {\n      target: 159,\n      total: 400,\n      name: 'score',\n      // thresholds: [200, 400],\n    },\n  },\n  scale: {\n    color: {\n      range: ['l(0):0:#62CFF4 1:#2C67F2', 'l(0):0:#2C67F2 1:#00008B'],\n    },\n    y: {\n      range: [1, -0.5],\n    },\n  },\n  style: {\n    // 配置仪表盘指示文本样式\n    textContent: (target, total) => `占比：${(target / total) * 100}%`,\n    textFill: '#000',\n    textFontSize: 24,\n    textfontWeight: 300,\n    textX: '35%',\n    textY: '75%',\n    // 配置仪表盘指针样式\n    pointerStroke: '#c5c5c5',\n    pointershadowColor: '#333333',\n    pointershadowBlur: 10,\n    pointershadowOffsetX: 5,\n    pointershadowOffsetY: 5,\n    // 配置仪表盘指针轴心样式\n    pinStroke: '#d5d5d5',\n    pinFill: '#d5d5d5',\n    pinlinewidth: 6,\n    pinshadowColor: '#333333',\n    pinshadowBlur: 30,\n    pinshadowOffsetX: 5,\n    pinshadowOffsetY: 5,\n    // 配置仪表盘圆弧样式\n    arcLineWidth: 2,\n    arcStroke: '#fff',\n    arcshadowColor: '#333333',\n    arcshadowBlur: 30,\n    arcshadowOffsetX: 5,\n    arcshadowOffsetY: 5,\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:50,tocIndex:10},{value:"更多的",paraId:51,tocIndex:10},{value:"style",paraId:51,tocIndex:10},{value:"配置，可以查看 ",paraId:51,tocIndex:10},{value:"style",paraId:52,tocIndex:10},{value:" 介绍页面。",paraId:51,tocIndex:10},{value:"尝试一下：",paraId:53,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 350,\n});\n\nchart.options({\n  type: 'gauge',\n  data: {\n    value: { target: 159, total: 400, name: 'score', thresholds: [200, 400] },\n  },\n  scale: {\n    color: { range: ['l(0):0:#37b38e 1:#D9C652', 'l(0):0:#D9C652 1:#f96e3e'] },\n  },\n  style: {\n    textContent: (target, total) => `得分：${target}\n占比：${(target / total) * 100}%`,\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:54,tocIndex:10},{value:"import { Chart } from '@antv/g2';\nimport { Path } from '@antv/g';\n\nconst chart = new Chart({ container: 'container' });\n\nfunction getOrigin(points) {\n  if (points.length === 1) return points[0];\n  const [[x0, y0, z0 = 0], [x2, y2, z2 = 0]] = points;\n  return [(x0 + x2) / 2, (y0 + y2) / 2, (z0 + z2) / 2];\n}\n// 自定义指针形状\nconst customShape = (style) => {\n  return (points, value, coordinate, theme) => {\n    // 获取几何点中心坐标\n    const [x, y] = getOrigin(points);\n    const [cx, cy] = coordinate.getCenter();\n    // 计算指针方向角度\n    const angle = Math.atan2(y - cy, x - cx);\n    const length = 100; // 指针长度\n    const width = 8; // 指针底部宽度\n    // 构造指针三角形路径\n    return new Path({\n      style: {\n        d: [\n          ['M', cx + Math.cos(angle) * length, cy + Math.sin(angle) * length], // 顶点\n          [\n            'L',\n            cx + Math.cos(angle + Math.PI / 2) * width,\n            cy + Math.sin(angle + Math.PI / 2) * width,\n          ], // 底部左点\n          [\n            'L',\n            cx + Math.cos(angle - Math.PI / 2) * width,\n            cy + Math.sin(angle - Math.PI / 2) * width,\n          ], // 底部右点\n          ['Z'], // 闭合路径\n        ],\n        fill: '#30BF78', // 填充色\n      },\n    });\n  };\n};\n\nchart.options({\n  type: 'gauge',\n  data: {\n    value: {\n      target: 159,\n      total: 424,\n      name: 'score',\n    },\n  },\n  style: {\n    pointerShape: customShape,\n    pinShape: false,\n    textContent: (target, total) => {\n      return `得分：${target}\\n占比：${(target / total) * 100}%`;\n    },\n  },\n});\n\nchart.render();\n",paraId:55,tocIndex:12}]},72129:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(97488);const t=[{value:"heatmap",paraId:0,tocIndex:0},{value:"（热力图） 是一种通过颜色强度映射二维数据密度或数值大小的可视化图表，擅长揭示数据分布规律、聚类特征及异常点。\n",paraId:0,tocIndex:0},{value:"heatmap",paraId:0,tocIndex:0},{value:"将两个分类/连续字段（如 x、y）映射为坐标轴，第三个数值字段（如 value）映射为颜色梯度（如 color: 'value'），形成网格化的色块矩阵。\n",paraId:0,tocIndex:0},{value:"heatmap",paraId:0,tocIndex:0},{value:"可以定义色阶，冷色调（如蓝色）表示低值，暖色调（如红色）表示高值，直观地表示数值的大小或频率分布。",paraId:0,tocIndex:0},{value:"典型应用包括：",paraId:1,tocIndex:0},{value:"相关性分析：例如，用于展示变量之间的相关性矩阵，通过颜色深浅快速识别强相关或弱相关的变量。",paraId:2,tocIndex:0},{value:"密度分析：展示二维数据的密度分布，常用于观察热点区域，例如在地理空间数据中用于分析人群聚集分布。",paraId:2,tocIndex:0},{value:"时间序列与类别分析：将时间（如小时、天、周）与类别数据结合，用于分析时序模式或分类分布。",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'heatmap', // 子组件类型为热力图\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/heatmap.json',\n  },\n  encode: { x: 'g', y: 'l', color: 'tmp' }, // 数据编码配置，x 轴为 'g'，y 轴为 'l'，颜色为 'tmp'\n  style: { opacity: 0 }, // 热力图的透明度为 0\n  tooltip: false,\n});\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"更多的案例，可以查看",paraId:4,tocIndex:0},{value:"图表示例 - 热力图",paraId:5,tocIndex:0},{value:"页面。",paraId:4,tocIndex:0},{value:"属性",paraId:6,tocIndex:1},{value:"描述",paraId:6,tocIndex:1},{value:"类型",paraId:6,tocIndex:1},{value:"默认值",paraId:6,tocIndex:1},{value:"必选",paraId:6,tocIndex:1},{value:"encode",paraId:6,tocIndex:1},{value:"配置 ",paraId:6,tocIndex:1},{value:"heatmap",paraId:6,tocIndex:1},{value:" 标记的视觉通道，包括",paraId:6,tocIndex:1},{value:"x",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"y",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"color",paraId:6,tocIndex:1},{value:"等，用于指定视觉元素属性和数据之间的关系",paraId:6,tocIndex:1},{value:"encode",paraId:7,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"✓",paraId:6,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:"配置 ",paraId:6,tocIndex:1},{value:"heatmap",paraId:6,tocIndex:1},{value:" 图形样式",paraId:6,tocIndex:1},{value:"style",paraId:8,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"配置 ",paraId:9,tocIndex:2},{value:"heatmap",paraId:9,tocIndex:2},{value:" 标记的视觉通道，定义数据字段与视觉属性之间映射关系的重要配置，它决定了数据如何转化为视觉表现。",paraId:9,tocIndex:2},{value:"属性",paraId:10,tocIndex:2},{value:"描述",paraId:10,tocIndex:2},{value:"类型",paraId:10,tocIndex:2},{value:"默认值",paraId:10,tocIndex:2},{value:"必选",paraId:10,tocIndex:2},{value:"x",paraId:10,tocIndex:2},{value:"绑定 ",paraId:10,tocIndex:2},{value:"heatmap",paraId:10,tocIndex:2},{value:" 标记的 ",paraId:10,tocIndex:2},{value:"x",paraId:10,tocIndex:2},{value:" 属性通道，一般是 ",paraId:10,tocIndex:2},{value:"data",paraId:10,tocIndex:2},{value:" 中的时间或有序名词字段",paraId:10,tocIndex:2},{value:"encode",paraId:11,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"✓",paraId:10,tocIndex:2},{value:"y",paraId:10,tocIndex:2},{value:"绑定 ",paraId:10,tocIndex:2},{value:"heatmap",paraId:10,tocIndex:2},{value:" 标记的 ",paraId:10,tocIndex:2},{value:"y",paraId:10,tocIndex:2},{value:" 属性通道，一般是 ",paraId:10,tocIndex:2},{value:"data",paraId:10,tocIndex:2},{value:" 中的数值或数组字段",paraId:10,tocIndex:2},{value:"encode",paraId:12,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"✓",paraId:10,tocIndex:2},{value:"color",paraId:10,tocIndex:2},{value:"绑定 ",paraId:10,tocIndex:2},{value:"heatmap",paraId:10,tocIndex:2},{value:" 标记的 ",paraId:10,tocIndex:2},{value:"color",paraId:10,tocIndex:2},{value:" 属性通道，如果将数据字段映射到颜色通道，会对数据进行分组，将数据拆分成多个不同颜色的区域",paraId:10,tocIndex:2},{value:"encode",paraId:13,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"更多的",paraId:14,tocIndex:2},{value:"encode",paraId:14,tocIndex:2},{value:"配置，可以查查看 ",paraId:14,tocIndex:2},{value:"encode",paraId:15,tocIndex:2},{value:" 介绍页面。",paraId:14,tocIndex:2},{value:"属性",paraId:16,tocIndex:3},{value:"描述",paraId:16,tocIndex:3},{value:"类型",paraId:16,tocIndex:3},{value:"默认值",paraId:16,tocIndex:3},{value:"必选",paraId:16,tocIndex:3},{value:"gradient",paraId:16,tocIndex:3},{value:"图形对应的渐变色配置",paraId:16,tocIndex:3},{value:"string",paraId:16,tocIndex:3},{value:" | ",paraId:16,tocIndex:3},{value:"Array<[number, string]>",paraId:16,tocIndex:3},{value:"-",paraId:16,tocIndex:3},{value:"opacity",paraId:16,tocIndex:3},{value:"热力图的透明度 ，如果设置，则会覆盖 ",paraId:16,tocIndex:3},{value:"maxOpacity",paraId:16,tocIndex:3},{value:", ",paraId:16,tocIndex:3},{value:"minOpacity",paraId:16,tocIndex:3},{value:" 配置，范围 0 ~ 1",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:"0.6",paraId:16,tocIndex:3},{value:"maxOpacity",paraId:16,tocIndex:3},{value:"热力图像素点透明度最大值，在 ",paraId:16,tocIndex:3},{value:"opacity = 0",paraId:16,tocIndex:3},{value:" 时候生效，范围 0 ~ 1",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:"1",paraId:16,tocIndex:3},{value:"minOpacity",paraId:16,tocIndex:3},{value:"热力图像素点透明度最小值，在 ",paraId:16,tocIndex:3},{value:"opacity = 0",paraId:16,tocIndex:3},{value:" 时候生效，范围 0 ~ 1",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:"0",paraId:16,tocIndex:3},{value:"blur",paraId:16,tocIndex:3},{value:"热力图的模糊因子，范围 0 ~ 1，越大图形约平滑",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:"0.85",paraId:16,tocIndex:3},{value:"useGradientOpacity",paraId:16,tocIndex:3},{value:"图形的填充色",paraId:16,tocIndex:3},{value:"boolean",paraId:16,tocIndex:3},{value:"false",paraId:16,tocIndex:3},{value:"fill",paraId:16,tocIndex:3},{value:"图形的填充色",paraId:16,tocIndex:3},{value:"string",paraId:16,tocIndex:3},{value:" | ",paraId:16,tocIndex:3},{value:"Function<string>",paraId:16,tocIndex:3},{value:"-",paraId:16,tocIndex:3},{value:"fillOpacity",paraId:16,tocIndex:3},{value:"图形的填充透明度",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:" | ",paraId:16,tocIndex:3},{value:"Function<number>",paraId:16,tocIndex:3},{value:"-",paraId:16,tocIndex:3},{value:"stroke",paraId:16,tocIndex:3},{value:"图形的描边",paraId:16,tocIndex:3},{value:"string",paraId:16,tocIndex:3},{value:" | ",paraId:16,tocIndex:3},{value:"Function<string>",paraId:16,tocIndex:3},{value:"-",paraId:16,tocIndex:3},{value:"strokeOpacity",paraId:16,tocIndex:3},{value:"描边透明度",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:" | ",paraId:16,tocIndex:3},{value:"Function<number>",paraId:16,tocIndex:3},{value:"-",paraId:16,tocIndex:3},{value:"lineWidth",paraId:16,tocIndex:3},{value:"图形描边的宽度",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:" | ",paraId:16,tocIndex:3},{value:"Function<number>",paraId:16,tocIndex:3},{value:"-",paraId:16,tocIndex:3},{value:"lineDash",paraId:16,tocIndex:3},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:16,tocIndex:3},{value:"[number,number]",paraId:16,tocIndex:3},{value:" | ",paraId:16,tocIndex:3},{value:"Function<[number, number]>",paraId:16,tocIndex:3},{value:"-",paraId:16,tocIndex:3},{value:"shadowColor",paraId:16,tocIndex:3},{value:"图形阴影颜色",paraId:16,tocIndex:3},{value:"string",paraId:16,tocIndex:3},{value:" | ",paraId:16,tocIndex:3},{value:"Function<string>",paraId:16,tocIndex:3},{value:"-",paraId:16,tocIndex:3},{value:"shadowBlur",paraId:16,tocIndex:3},{value:"图形阴影的高斯模糊系数",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:" | ",paraId:16,tocIndex:3},{value:"Function<number>",paraId:16,tocIndex:3},{value:"-",paraId:16,tocIndex:3},{value:"shadowOffsetX",paraId:16,tocIndex:3},{value:"设置阴影距图形的水平距离",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:" | ",paraId:16,tocIndex:3},{value:"Function<number>",paraId:16,tocIndex:3},{value:"-",paraId:16,tocIndex:3},{value:"shadowOffsetY",paraId:16,tocIndex:3},{value:"设置阴影距图形的垂直距离",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:" | ",paraId:16,tocIndex:3},{value:"Function<number>",paraId:16,tocIndex:3},{value:"-",paraId:16,tocIndex:3},{value:"cursor",paraId:16,tocIndex:3},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:16,tocIndex:3},{value:"string",paraId:16,tocIndex:3},{value:" | ",paraId:16,tocIndex:3},{value:"Function<string>",paraId:16,tocIndex:3},{value:"'default'",paraId:16,tocIndex:3},{value:"关于 ",paraId:17,tocIndex:3},{value:"gradient",paraId:17,tocIndex:3},{value:" 配置，来一个示例如下，也是 G2 默认内置的渐变色：",paraId:17,tocIndex:3},{value:"const gradient = [\n  [0.25, 'rgb(0,0,255)'],\n  [0.55, 'rgb(0,255,0)'],\n  [0.85, 'yellow'],\n  [1.0, 'rgb(255,0,0)'],\n];\n\nconst gradient =\n  '0.25:rgb(0,0,255) 0.55:rgb(0,255,0) 0.85:yellow 1.0:rgb(255,0,0)';\n",paraId:18,tocIndex:3},{value:"更多的",paraId:19,tocIndex:3},{value:"style",paraId:19,tocIndex:3},{value:"配置，可以查看 ",paraId:19,tocIndex:3},{value:"style",paraId:20,tocIndex:3},{value:" 介绍页面。",paraId:19,tocIndex:3},{value:"尝试一下：",paraId:21,tocIndex:3},{value:"import DataSet from '@antv/data-set';\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/diamond.json',\n});\n\nchart.scale('x', { nice: true, domainMin: -0.5 });\nchart.scale('y', { nice: true, domainMin: -2000 });\nchart.scale('color', { nice: true });\n\nchart\n  .heatmap()\n  .data({\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => {\n          const dv = new DataSet.View().source(data);\n          dv.transform({\n            type: 'kernel-smooth.density',\n            fields: ['carat', 'price'],\n            as: ['carat', 'price', 'density'],\n          });\n          return dv.rows;\n        },\n      },\n    ],\n  })\n  .encode('x', 'carat')\n  .encode('y', 'price')\n  .encode('color', 'density')\n  .style({\n    opacity: 0.3,\n    gradient: [\n      [0, 'white'],\n      [0.2, 'blue'],\n      [0.4, 'cyan'],\n      [0.6, 'lime'],\n      [0.8, 'yellow'],\n      [0.9, 'red'],\n    ],\n  });\n\nchart.point().encode('x', 'carat').encode('y', 'price');\n\nchart.render();\n\n",paraId:22,tocIndex:3},{value:"可以创建一个容器视图，将热力图与地图同时渲染，直观呈现数据在地理位置的差异",paraId:23,tocIndex:4},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  padding: 0,\n  axis: false,\n  children: [\n    {\n      type: 'image',\n      style: {\n        src: 'https://gw.alipayobjects.com/zos/rmsportal/NeUTMwKtPcPxIFNTWZOZ.png',\n        x: '50%',\n        y: '50%',\n        width: '100%',\n        height: '100%',\n      },\n      tooltip: false,\n    },\n    {\n      type: 'heatmap',\n      data: {\n        type: 'fetch',\n        value: 'https://assets.antv.antgroup.com/g2/heatmap.json',\n      },\n      encode: { x: 'g', y: 'l', color: 'tmp' },\n      style: { opacity: 0 },\n      tooltip: false,\n    },\n  ],\n});\n\nchart.render();\n",paraId:24,tocIndex:4}]},68987:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(50861);const t=[{value:"image",paraId:0,tocIndex:0},{value:" 图片标记通常不会单独出现，主要在其他的标记基础上进行添加使用，可以增强数据的可视化效果，帮助更直观地传达信息。和",paraId:0,tocIndex:0},{value:"point",paraId:1,tocIndex:0},{value:" 标记很类似都是以 ",paraId:0,tocIndex:0},{value:"x",paraId:0,tocIndex:0},{value:"，",paraId:0,tocIndex:0},{value:"y",paraId:0,tocIndex:0},{value:" 数据通道作为位置居中定位，区别在于 ",paraId:0,tocIndex:0},{value:"image",paraId:0,tocIndex:0},{value:" 提供一个特殊的 ",paraId:0,tocIndex:0},{value:"src",paraId:0,tocIndex:0},{value:" 数据通道，来指定图片的远程地址或者 base64。",paraId:0,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  width: 200,\n  height: 60,\n  type: 'image',\n  data: [\n    {\n      x: '1',\n      y: 1,\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*TRZHTaTeWfEAAAAAAAAAAAAAemJ7AQ/original',\n    },\n    {\n      x: '2',\n      y: 1,\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*TRZHTaTeWfEAAAAAAAAAAAAAemJ7AQ/original',\n    },\n    {\n      x: '3',\n      y: 1,\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*TRZHTaTeWfEAAAAAAAAAAAAAemJ7AQ/original',\n    },\n    {\n      x: '4',\n      y: 1,\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*qCegRabhuUIAAAAAAAAAAAAAemJ7AQ/original',\n    },\n    {\n      x: '5',\n      y: 1,\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*GNP1RLFfQV0AAAAAAAAAAAAAemJ7AQ/original',\n    },\n\n    {\n      x: '1',\n      y: 2,\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*TRZHTaTeWfEAAAAAAAAAAAAAemJ7AQ/original',\n    },\n    {\n      x: '2',\n      y: 2,\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*TRZHTaTeWfEAAAAAAAAAAAAAemJ7AQ/original',\n    },\n    {\n      x: '3',\n      y: 2,\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*qCegRabhuUIAAAAAAAAAAAAAemJ7AQ/original',\n    },\n    {\n      x: '4',\n      y: 2,\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*GNP1RLFfQV0AAAAAAAAAAAAAemJ7AQ/original',\n    },\n    {\n      x: '5',\n      y: 2,\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*GNP1RLFfQV0AAAAAAAAAAAAAemJ7AQ/original',\n    },\n  ],\n  // 配置视觉通道\n  encode: {\n    x: 'x', // 配置x通道\n    y: 'y', // 配置y通道\n    src: 'url', // 配置 图片src 通道\n  },\n  axis: { x: false, y: false },\n});\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"更多的案例，可以查看",paraId:3,tocIndex:0},{value:"图表示例 - 图片",paraId:4,tocIndex:0},{value:"页面。",paraId:3,tocIndex:0},{value:"属性",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"类型",paraId:5,tocIndex:1},{value:"默认值",paraId:5,tocIndex:1},{value:"必选",paraId:5,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"配置 ",paraId:5,tocIndex:1},{value:"image",paraId:5,tocIndex:1},{value:" 标记的视觉通道，包括",paraId:5,tocIndex:1},{value:"x",paraId:5,tocIndex:1},{value:"、",paraId:5,tocIndex:1},{value:"y",paraId:5,tocIndex:1},{value:"、",paraId:5,tocIndex:1},{value:"src",paraId:5,tocIndex:1},{value:"、",paraId:5,tocIndex:1},{value:"size",paraId:5,tocIndex:1},{value:"等，用于指定视觉元素属性和数据之间的关系",paraId:5,tocIndex:1},{value:"encode",paraId:6,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"✓",paraId:5,tocIndex:1},{value:"style",paraId:5,tocIndex:1},{value:"配置 ",paraId:5,tocIndex:1},{value:"image",paraId:5,tocIndex:1},{value:" 标记的图形样式",paraId:5,tocIndex:1},{value:"style",paraId:7,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"配置 ",paraId:8,tocIndex:2},{value:"image",paraId:8,tocIndex:2},{value:" 标记的视觉通道。",paraId:8,tocIndex:2},{value:"属性",paraId:9,tocIndex:2},{value:"描述",paraId:9,tocIndex:2},{value:"类型",paraId:9,tocIndex:2},{value:"默认值",paraId:9,tocIndex:2},{value:"必选",paraId:9,tocIndex:2},{value:"x",paraId:9,tocIndex:2},{value:"绑定 ",paraId:9,tocIndex:2},{value:"image",paraId:9,tocIndex:2},{value:" 标记的 ",paraId:9,tocIndex:2},{value:"x",paraId:9,tocIndex:2},{value:" 属性通道，一般是 ",paraId:9,tocIndex:2},{value:"data",paraId:9,tocIndex:2},{value:" 中的数值或字符，用于确定图片的 ",paraId:9,tocIndex:2},{value:"x",paraId:9,tocIndex:2},{value:" 位置",paraId:9,tocIndex:2},{value:"encode",paraId:10,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"✓",paraId:9,tocIndex:2},{value:"y",paraId:9,tocIndex:2},{value:"绑定 ",paraId:9,tocIndex:2},{value:"image",paraId:9,tocIndex:2},{value:" 标记的 ",paraId:9,tocIndex:2},{value:"y",paraId:9,tocIndex:2},{value:" 属性通道，一般是 ",paraId:9,tocIndex:2},{value:"data",paraId:9,tocIndex:2},{value:" 中的数值或字符，用于确定图片的 ",paraId:9,tocIndex:2},{value:"y",paraId:9,tocIndex:2},{value:" 位置",paraId:9,tocIndex:2},{value:"encode",paraId:11,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"✓",paraId:9,tocIndex:2},{value:"size",paraId:9,tocIndex:2},{value:"绑定 ",paraId:9,tocIndex:2},{value:"image",paraId:9,tocIndex:2},{value:" 标记的 ",paraId:9,tocIndex:2},{value:"size",paraId:9,tocIndex:2},{value:" 大小通道，用于控制图片展示的大小，一般图片中所存储的信息越多，越需要放大",paraId:9,tocIndex:2},{value:"encode",paraId:12,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"src",paraId:9,tocIndex:2},{value:"绑定 ",paraId:9,tocIndex:2},{value:"image",paraId:9,tocIndex:2},{value:" 标记的 ",paraId:9,tocIndex:2},{value:"src",paraId:9,tocIndex:2},{value:" 图片通道 ，会更具对应的数据显示图片",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"✓",paraId:9,tocIndex:2},{value:"最终的绘制都是调用 G 去渲染，所以支持的数据类型和 G 的原子 Image 图形保持一致，支持：",paraId:13,tocIndex:3},{value:"远程地址",paraId:14,tocIndex:3},{value:"：网络地址",paraId:14,tocIndex:3},{value:"file",paraId:14,tocIndex:3},{value:"：本地图片地址",paraId:14,tocIndex:3},{value:"base64",paraId:14,tocIndex:3},{value:"：图表 base64 格式字符串",paraId:14,tocIndex:3},{value:"blob",paraId:14,tocIndex:3},{value:"：图片请求返回的 Blob 对象",paraId:14,tocIndex:3},{value:"属性",paraId:15,tocIndex:4},{value:"描述",paraId:15,tocIndex:4},{value:"类型",paraId:15,tocIndex:4},{value:"默认值",paraId:15,tocIndex:4},{value:"必选",paraId:15,tocIndex:4},{value:"width",paraId:15,tocIndex:4},{value:"图形的宽度, 如果没有配置 图片按照 自宽高 和 ",paraId:15,tocIndex:4},{value:"size",paraId:15,tocIndex:4},{value:" 大小 默认显示",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"Function<number>",paraId:15,tocIndex:4},{value:"-",paraId:15,tocIndex:4},{value:"height",paraId:15,tocIndex:4},{value:"图形的高度, 如果没有配置 图片按照 自宽高 和 ",paraId:15,tocIndex:4},{value:"size",paraId:15,tocIndex:4},{value:" 大小 默认显示",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"Function<number>",paraId:15,tocIndex:4},{value:"-",paraId:15,tocIndex:4},{value:"opacity",paraId:15,tocIndex:4},{value:"图形的整体透明度",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"Function<number>",paraId:15,tocIndex:4},{value:"-",paraId:15,tocIndex:4},{value:"shadowColor",paraId:15,tocIndex:4},{value:"图形阴影颜色",paraId:15,tocIndex:4},{value:"string",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"Function<string>",paraId:15,tocIndex:4},{value:"-",paraId:15,tocIndex:4},{value:"shadowBlur",paraId:15,tocIndex:4},{value:"图形阴影的高斯模糊系数",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"Function<number>",paraId:15,tocIndex:4},{value:"-",paraId:15,tocIndex:4},{value:"shadowOffsetX",paraId:15,tocIndex:4},{value:"设置阴影距图形的水平距离",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"Function<number>",paraId:15,tocIndex:4},{value:"-",paraId:15,tocIndex:4},{value:"shadowOffsetY",paraId:15,tocIndex:4},{value:"设置阴影距图形的垂直距离",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"Function<number>",paraId:15,tocIndex:4},{value:"-",paraId:15,tocIndex:4},{value:"cursor",paraId:15,tocIndex:4},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:15,tocIndex:4},{value:"string",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"Function<string>",paraId:15,tocIndex:4},{value:"default",paraId:15,tocIndex:4},{value:"尝试一下：",paraId:16,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst Avatars = [\n  'https://gw.alipayobjects.com/zos/antfincdn/z8eXl6l9GM/aiyin.jpg',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*cu6GQ7yNpJIAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*IFYESbDDqI0AAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*z6bUQ7bvuAYAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*zIFOTbhtCoMAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*z9SnQpiMnIgAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*aGTWQKFIx2cAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/zos/antfincdn/n%26uTxqsNHe/IMG_3154.JPG',\n  'http://alipay-rmsdeploy-image.cn-hangzhou.alipay.aliyun-inc.com/antfincdn/sX13FkC4%26C/erling.jpg',\n  'https://gw.alipayobjects.com/zos/antfincdn/4VUXCQEiBd/c4f901c7-f591-4616-8dfc-83aecf839cd8.png',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*5kqTSZE-9KMAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*_OhHTo0gxAMAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/zos/antfincdn/aXQ3OTu6Er/IMG_3509.JPG',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*blSIQbwdOqsAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*rVgGS5sJwHQAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*gB63QppvTsgAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/zos/antfincdn/AefmmqKied/3ca2b3d8-e568-4bec-b10d-e4e432cb6f23.png',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*iBIzSZMCWRcAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*GHQQQYTL4g8AAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*VXoNRoRXPBwAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*WZcQRJtWWlIAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*-wAXRKlOrW4AAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*LSpRS6i_WOcAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*23r_SpWxPdEAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*R3QzTpZM7IUAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*vU-mRr0XrfcAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*LMcOQKUxbUEAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*8CiTTqjnzcEAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/zos/antfincdn/smBVaflWk5/my.jpg',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*V7E0RqRAlG4AAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*_E0SR4LCxaAAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*PmifSa53auQAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*mWkGRqxLexYAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*CPXKQ76YlfwAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/zos/antfincdn/c9K5r1m%26y9/d0b8a090-f034-43e6-aeeb-f59cb6c7c33c.png',\n  'https://gw.alipayobjects.com/zos/antfincdn/L%261dAufvjL/IMG_1477.JPG',\n  'https://gw.alipayobjects.com/zos/antfincdn/NkfCEL7RTL/7cdd44fc-8624-4b6c-8947-67f78e79142f.png',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*dl_gToTY6msAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*QFEMTaidg9QAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/zos/antfincdn/KGawdl9Ahq/touxiang.JPG',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*y1cFS4MDmPIAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*qykaTLGttsgAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/zos/antfincdn/QL5d8rcf%24M/IMG_6534.JPG',\n  'https://gw.alipayobjects.com/mdn/rms_04a9e5/afts/img/A*ZmohRYwarWcAAAAAAAAAAAAAARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_04a9e5/afts/img/A*1O_3R4Wcwy0AAAAAAAAAAAAAARQnAQ',\n];\n\n// Code from https://juejin.cn/post/6995818748191981604\nfunction getLovePoints() {\n  let angle = 0;\n  let x = 0;\n  let y = 0;\n  const a = 6;\n  const points = [];\n  for (let i = 0; i < 20; i += 0.2) {\n    angle = i / Math.PI;\n    x = a * (16 * Math.sin(angle) ** 3);\n    y =\n      a *\n      (13 * Math.cos(angle) -\n        5 * Math.cos(2 * angle) -\n        2 * Math.cos(3 * angle) -\n        Math.cos(4 * angle));\n    points.push({ x, y });\n  }\n  return points;\n}\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  padding: 40,\n});\n\nchart.data(getLovePoints());\n\nchart\n  .image()\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('src', (_, idx) => Avatars[idx % Avatars.length])\n  .encode('size', 48)\n  .style({\n    opacity: 0.7,\n    shadowColor: '#fad7e0',\n    shadowBlur: 40,\n    shadowOffsetY: 20,\n  })\n  .axis(false)\n  .tooltip(false);\n\nchart.render();\n\n",paraId:17,tocIndex:4}]},64010:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(92901);const t=[{value:"区间图（ ",paraId:0,tocIndex:0},{value:"interval",paraId:0,tocIndex:0},{value:" ）图形标记是一种表示数据上下区间的图表的集合。通常用来绘制柱形图、条形图、饼图等，通过坐标系、比例尺、数据 ",paraId:0,tocIndex:0},{value:"Transform",paraId:0,tocIndex:0},{value:" 等的变化，可以产生多种多样的可视化表现样式，例如，将多个并列的类别聚类、形成一组，再在组与组之间进行比较，这种图表叫做 ",paraId:0,tocIndex:0},{value:"分组柱状图",paraId:0,tocIndex:0},{value:" 或 ",paraId:0,tocIndex:0},{value:"簇状柱形图",paraId:0,tocIndex:0},{value:" 。将类别拆分称多个子类别，形成 ",paraId:0,tocIndex:0},{value:"堆叠柱状图",paraId:0,tocIndex:0},{value:"。再如将柱形图与折线图结合起来，共同绘制在一张图上，俗称 ",paraId:0,tocIndex:0},{value:"双轴图",paraId:0,tocIndex:0},{value:"，等等。",paraId:0,tocIndex:0},{value:"interval",paraId:0,tocIndex:0},{value:" 是图形语法中，最常用的 ",paraId:0,tocIndex:0},{value:"Mark",paraId:0,tocIndex:0},{value:"。",paraId:0,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { letter: 'A', frequency: 0.08167 },\n    { letter: 'B', frequency: 0.01492 },\n    { letter: 'C', frequency: 0.02782 },\n    { letter: 'D', frequency: 0.04253 },\n    { letter: 'E', frequency: 0.12702 },\n    { letter: 'F', frequency: 0.02288 },\n    { letter: 'G', frequency: 0.02015 },\n    { letter: 'H', frequency: 0.06094 },\n    { letter: 'I', frequency: 0.06966 },\n    { letter: 'J', frequency: 0.00153 },\n    { letter: 'K', frequency: 0.00772 },\n    { letter: 'L', frequency: 0.04025 },\n    { letter: 'M', frequency: 0.02406 },\n    { letter: 'N', frequency: 0.06749 },\n    { letter: 'O', frequency: 0.07507 },\n    { letter: 'P', frequency: 0.01929 },\n    { letter: 'Q', frequency: 0.00095 },\n    { letter: 'R', frequency: 0.05987 },\n    { letter: 'S', frequency: 0.06327 },\n    { letter: 'T', frequency: 0.09056 },\n    { letter: 'U', frequency: 0.02758 },\n    { letter: 'V', frequency: 0.00978 },\n    { letter: 'W', frequency: 0.0236 },\n    { letter: 'X', frequency: 0.0015 },\n    { letter: 'Y', frequency: 0.01974 },\n    { letter: 'Z', frequency: 0.00074 },\n  ],\n  // 配置视觉通道\n  encode: {\n    x: 'letter', // 配置x通道\n    y: 'frequency', // 配置y通道\n    shape: 'rect', // 配置shape通道，默认为'rect'的时候可以不写。可选'rect', 'hollow', 'funnel', 'pyramid'\n  },\n  style: {\n    columnWidthRatio: 0.5, // 配置柱状图宽度占比为0.5\n  },\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例 - 条形图",paraId:3,tocIndex:0},{value:"、",paraId:2,tocIndex:0},{value:"图表示例 - 饼图",paraId:4,tocIndex:0},{value:"等页面。",paraId:2,tocIndex:0},{value:"属性",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"类型",paraId:5,tocIndex:1},{value:"默认值",paraId:5,tocIndex:1},{value:"必选",paraId:5,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"配置 ",paraId:5,tocIndex:1},{value:"interval",paraId:5,tocIndex:1},{value:" 标记的视觉通道，包括",paraId:5,tocIndex:1},{value:"x",paraId:5,tocIndex:1},{value:"、",paraId:5,tocIndex:1},{value:"y",paraId:5,tocIndex:1},{value:"、",paraId:5,tocIndex:1},{value:"color",paraId:5,tocIndex:1},{value:"、",paraId:5,tocIndex:1},{value:"shape",paraId:5,tocIndex:1},{value:"等，用于指定视觉元素属性和数据之间的关系",paraId:5,tocIndex:1},{value:"encode",paraId:6,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"✓",paraId:5,tocIndex:1},{value:"coordinate",paraId:5,tocIndex:1},{value:"配置 ",paraId:5,tocIndex:1},{value:"interval",paraId:5,tocIndex:1},{value:" 标记的坐标系，坐标系会执行一系列点转换，从而改变标记的空间展示形式",paraId:5,tocIndex:1},{value:"coordinate",paraId:7,tocIndex:1},{value:"{type: 'cartesian' }",paraId:5,tocIndex:1},{value:"style",paraId:5,tocIndex:1},{value:"配置 ",paraId:5,tocIndex:1},{value:"interval",paraId:5,tocIndex:1},{value:" 标记的图形样式",paraId:5,tocIndex:1},{value:"style",paraId:8,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"配置 ",paraId:9,tocIndex:2},{value:"interval",paraId:9,tocIndex:2},{value:" 标记的视觉通道。",paraId:9,tocIndex:2},{value:"属性",paraId:10,tocIndex:2},{value:"描述",paraId:10,tocIndex:2},{value:"类型",paraId:10,tocIndex:2},{value:"默认值",paraId:10,tocIndex:2},{value:"必选",paraId:10,tocIndex:2},{value:"x",paraId:10,tocIndex:2},{value:"绑定 ",paraId:10,tocIndex:2},{value:"interval",paraId:10,tocIndex:2},{value:" 标记的 ",paraId:10,tocIndex:2},{value:"x",paraId:10,tocIndex:2},{value:" 属性通道，一般是 ",paraId:10,tocIndex:2},{value:"data",paraId:10,tocIndex:2},{value:" 中的有序或者无序字段，在绘制饼图的时候可以为空",paraId:10,tocIndex:2},{value:"encode",paraId:11,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"✓",paraId:10,tocIndex:2},{value:"y",paraId:10,tocIndex:2},{value:"绑定 ",paraId:10,tocIndex:2},{value:"interval",paraId:10,tocIndex:2},{value:" 标记的 ",paraId:10,tocIndex:2},{value:"y",paraId:10,tocIndex:2},{value:" 属性通道，一般是 ",paraId:10,tocIndex:2},{value:"data",paraId:10,tocIndex:2},{value:" 中的数值或数组字段",paraId:10,tocIndex:2},{value:"encode",paraId:12,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"✓",paraId:10,tocIndex:2},{value:"color",paraId:10,tocIndex:2},{value:"绑定 ",paraId:10,tocIndex:2},{value:"interval",paraId:10,tocIndex:2},{value:" 标记的 ",paraId:10,tocIndex:2},{value:"color",paraId:10,tocIndex:2},{value:" 属性通道，如果将数据字段映射到颜色通道，会对数据进行分组，将数据拆分成多个不同颜色的图形，一般用来配置堆叠柱状图等",paraId:10,tocIndex:2},{value:"encode",paraId:13,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"series",paraId:10,tocIndex:2},{value:"绑定 ",paraId:10,tocIndex:2},{value:"interval",paraId:10,tocIndex:2},{value:" 标记的 ",paraId:10,tocIndex:2},{value:"series",paraId:10,tocIndex:2},{value:" 属性通道，根据 series 通道实现分组效果",paraId:10,tocIndex:2},{value:"encode",paraId:14,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"shape",paraId:10,tocIndex:2},{value:"绑定 ",paraId:10,tocIndex:2},{value:"interval",paraId:10,tocIndex:2},{value:" 标记的 ",paraId:10,tocIndex:2},{value:"shape",paraId:10,tocIndex:2},{value:" 属性通道，改变图形标记的绘制形状",paraId:10,tocIndex:2},{value:"rect",paraId:10,tocIndex:2},{value:" | ",paraId:10,tocIndex:2},{value:"hollow",paraId:10,tocIndex:2},{value:" | ",paraId:10,tocIndex:2},{value:"funnel",paraId:10,tocIndex:2},{value:" | ",paraId:10,tocIndex:2},{value:"pyramid",paraId:10,tocIndex:2},{value:"rect",paraId:10,tocIndex:2},{value:"interval",paraId:15,tocIndex:3},{value:" 标记的位置视觉通道需要 ",paraId:15,tocIndex:3},{value:"x",paraId:15,tocIndex:3},{value:", ",paraId:15,tocIndex:3},{value:"y",paraId:15,tocIndex:3},{value:" 两个字段的值，支持的数据格式有以下三种：",paraId:15,tocIndex:3},{value:"x",paraId:16,tocIndex:3},{value:", ",paraId:16,tocIndex:3},{value:"y",paraId:16,tocIndex:3},{value:" 都是数值，一般的柱状图、玫瑰图。",paraId:16,tocIndex:3},{value:'{\n  type: "interval",\n  data: [{ name: "分类一", value: 100 }],\n  encode: { x: "name", y: "value" },\n}\n',paraId:17,tocIndex:3},{value:"x",paraId:18,tocIndex:3},{value:" 是数值，",paraId:18,tocIndex:3},{value:"y",paraId:18,tocIndex:3},{value:" 是数组，区间柱状图、区间玫瑰图、堆叠柱状图、堆叠玫瑰图以及对称的柱状图（漏斗图）。",paraId:18,tocIndex:3},{value:'{\n  type: "interval",\n  data: [{ name: \'分类一\', value: [10, 100] },\n  { name: \'分类二\', value: [20, 80] }],\n  encode: { x: "name", y: "value" },\n}\n',paraId:19,tocIndex:3},{value:"x",paraId:20,tocIndex:3},{value:" 为空，",paraId:20,tocIndex:3},{value:"y",paraId:20,tocIndex:3},{value:" 是数值。一般用于绘制饼图时的数据配置，此时的坐标系是 ",paraId:20,tocIndex:3},{value:"theta",paraId:20,tocIndex:3},{value:"，在 G2 的内部补齐了 ",paraId:20,tocIndex:3},{value:"x",paraId:20,tocIndex:3},{value:", ",paraId:20,tocIndex:3},{value:"y",paraId:20,tocIndex:3},{value:"。",paraId:20,tocIndex:3},{value:'{\n  type: "interval",\n  data: [\n    { item: "分类一", count: 40, },\n    { item: "分类二", count: 21, },\n    { item: "分类三", count: 17 },\n    { item: "分类四", count: 13 },\n    { item: "分类五", count: 9 },\n  ],\n  encode: { y: "count", color: "item" },\n  transform: [{ type: "stackY" }], // 配置stackY数据转换，使得饼图的扇区角度和值的大小对应\n  coordinate: { type: "theta", }, // 配置theta坐标系，是一种特殊的极坐标系，常用来绘制饼图\n}\n',paraId:21,tocIndex:3},{value:"x 通道绑定的值",paraId:22,tocIndex:3},{value:"y 通道绑定的值",paraId:22,tocIndex:3},{value:"解释",paraId:22,tocIndex:3},{value:"数值",paraId:22,tocIndex:3},{value:"数值",paraId:22,tocIndex:3},{value:"常规的柱状图、玫瑰图",paraId:22,tocIndex:3},{value:"数值",paraId:22,tocIndex:3},{value:"数组",paraId:22,tocIndex:3},{value:"区间柱状图、区间玫瑰图、堆叠柱状图、堆叠玫瑰图、漏斗图",paraId:22,tocIndex:3},{value:"空",paraId:22,tocIndex:3},{value:"数值",paraId:22,tocIndex:3},{value:"饼图",paraId:22,tocIndex:3},{value:"color",paraId:23,tocIndex:4},{value:" 视觉通道影响 ",paraId:23,tocIndex:4},{value:"interval",paraId:23,tocIndex:4},{value:" 图形标记的填充颜色。在区间图上应用时一般映射分类字段，对数据进行分组。",paraId:23,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { name: 'London', 月份: 'Jan.', 月均降雨量: 18.9 },\n    { name: 'London', 月份: 'Feb.', 月均降雨量: 28.8 },\n    { name: 'London', 月份: 'Mar.', 月均降雨量: 39.3 },\n    { name: 'London', 月份: 'Apr.', 月均降雨量: 81.4 },\n    { name: 'London', 月份: 'May', 月均降雨量: 47 },\n    { name: 'London', 月份: 'Jun.', 月均降雨量: 20.3 },\n    { name: 'London', 月份: 'Jul.', 月均降雨量: 24 },\n    { name: 'London', 月份: 'Aug.', 月均降雨量: 35.6 },\n    { name: 'Berlin', 月份: 'Jan.', 月均降雨量: 12.4 },\n    { name: 'Berlin', 月份: 'Feb.', 月均降雨量: 23.2 },\n    { name: 'Berlin', 月份: 'Mar.', 月均降雨量: 34.5 },\n    { name: 'Berlin', 月份: 'Apr.', 月均降雨量: 99.7 },\n    { name: 'Berlin', 月份: 'May', 月均降雨量: 52.6 },\n    { name: 'Berlin', 月份: 'Jun.', 月均降雨量: 35.5 },\n    { name: 'Berlin', 月份: 'Jul.', 月均降雨量: 37.4 },\n    { name: 'Berlin', 月份: 'Aug.', 月均降雨量: 42.4 },\n  ],\n  encode: {\n    x: '月份',\n    y: '月均降雨量',\n    color: 'name', // 配置color通道，对数据进行分组\n  },\n});\n\nchart.render();\n",paraId:24,tocIndex:4},{value:"但是有些特殊情况下也会映射的连续字段上，对不同区间的数值对应的图形使用不同的颜色：",paraId:25,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { name: 'a1', value: 50 },\n    { name: 'a2', value: 60 },\n    { name: 'a3', value: 40 },\n  ],\n  encode: {\n    x: 'name',\n    y: 'value',\n    // color通道也可以传入一个回调函数，根据条件返回不同的值\n    color: (d) => (d.value > 50 ? 'high' : 'low'),\n  },\n});\n\nchart.render();\n",paraId:26,tocIndex:4},{value:"配置图形转换",paraId:27,tocIndex:4},{value:"transform",paraId:27,tocIndex:4},{value:"中的 ",paraId:27,tocIndex:4},{value:"stackY",paraId:28,tocIndex:4},{value:" ，可以对分组的区域进行堆叠，则形成堆叠面积图，避免因为重叠导致的信息模糊：",paraId:27,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { name: 'London', 月份: 'Jan.', 月均降雨量: 18.9 },\n    { name: 'London', 月份: 'Feb.', 月均降雨量: 28.8 },\n    { name: 'London', 月份: 'Mar.', 月均降雨量: 39.3 },\n    { name: 'London', 月份: 'Apr.', 月均降雨量: 81.4 },\n    { name: 'London', 月份: 'May', 月均降雨量: 47 },\n    { name: 'London', 月份: 'Jun.', 月均降雨量: 20.3 },\n    { name: 'London', 月份: 'Jul.', 月均降雨量: 24 },\n    { name: 'London', 月份: 'Aug.', 月均降雨量: 35.6 },\n    { name: 'Berlin', 月份: 'Jan.', 月均降雨量: 12.4 },\n    { name: 'Berlin', 月份: 'Feb.', 月均降雨量: 23.2 },\n    { name: 'Berlin', 月份: 'Mar.', 月均降雨量: 34.5 },\n    { name: 'Berlin', 月份: 'Apr.', 月均降雨量: 99.7 },\n    { name: 'Berlin', 月份: 'May', 月均降雨量: 52.6 },\n    { name: 'Berlin', 月份: 'Jun.', 月均降雨量: 35.5 },\n    { name: 'Berlin', 月份: 'Jul.', 月均降雨量: 37.4 },\n    { name: 'Berlin', 月份: 'Aug.', 月均降雨量: 42.4 },\n  ],\n  // 配置视觉通道\n  encode: { x: '月份', y: '月均降雨量', color: 'name' },\n  transform: [{ type: 'stackY' }], // 按照指定通道分组，对每组的 y 和 y1 通道进行堆叠，实现堆叠效果\n});\n\nchart.render();\n",paraId:29,tocIndex:4},{value:"series",paraId:30,tocIndex:5},{value:" 视觉通道将 ",paraId:30,tocIndex:5},{value:"interval",paraId:30,tocIndex:5},{value:" 图形标记的数据分成多个系列，一般和 ",paraId:30,tocIndex:5},{value:"color",paraId:30,tocIndex:5},{value:" 通道一起配置，也可以通过配置图形转换",paraId:30,tocIndex:5},{value:"transform",paraId:30,tocIndex:5},{value:"中的 ",paraId:30,tocIndex:5},{value:"dodgeX",paraId:31,tocIndex:5},{value:" ，生成 ",paraId:30,tocIndex:5},{value:"series",paraId:30,tocIndex:5},{value:" 通道值为 ",paraId:30,tocIndex:5},{value:"color",paraId:30,tocIndex:5},{value:" 通道的值，根据 ",paraId:30,tocIndex:5},{value:"series",paraId:30,tocIndex:5},{value:" 通道实现分组效果：",paraId:30,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { name: 'London', 月份: 'Jan.', 月均降雨量: 18.9 },\n    { name: 'London', 月份: 'Feb.', 月均降雨量: 28.8 },\n    { name: 'London', 月份: 'Mar.', 月均降雨量: 39.3 },\n    { name: 'London', 月份: 'Apr.', 月均降雨量: 81.4 },\n    { name: 'London', 月份: 'May', 月均降雨量: 47 },\n    { name: 'London', 月份: 'Jun.', 月均降雨量: 20.3 },\n    { name: 'London', 月份: 'Jul.', 月均降雨量: 24 },\n    { name: 'London', 月份: 'Aug.', 月均降雨量: 35.6 },\n    { name: 'Berlin', 月份: 'Jan.', 月均降雨量: 12.4 },\n    { name: 'Berlin', 月份: 'Feb.', 月均降雨量: 23.2 },\n    { name: 'Berlin', 月份: 'Mar.', 月均降雨量: 34.5 },\n    { name: 'Berlin', 月份: 'Apr.', 月均降雨量: 99.7 },\n    { name: 'Berlin', 月份: 'May', 月均降雨量: 52.6 },\n    { name: 'Berlin', 月份: 'Jun.', 月均降雨量: 35.5 },\n    { name: 'Berlin', 月份: 'Jul.', 月均降雨量: 37.4 },\n    { name: 'Berlin', 月份: 'Aug.', 月均降雨量: 42.4 },\n  ],\n  // 配置视觉通道\n  encode: {\n    x: '月份',\n    y: '月均降雨量',\n    color: 'name', // 配置color通道，对数据进行分组\n    series: 'name', // 配置series通道，将数据分成不同系列\n  },\n  // transform: [{ type: 'dodgeX' }], // 生成 series 通道值为 color 通道的值，根据 series 通道实现分组效果\n});\n\nchart.render();\n",paraId:32,tocIndex:5},{value:"interval",paraId:33,tocIndex:6},{value:" 标记的支持的形状如下：",paraId:33,tocIndex:6},{value:"形状",paraId:34,tocIndex:6},{value:"描述",paraId:34,tocIndex:6},{value:"示例",paraId:34,tocIndex:6},{value:"rect",paraId:34,tocIndex:6},{value:"绘制填充的矩形",paraId:34,tocIndex:6},{value:"hollow",paraId:34,tocIndex:6},{value:"绘制空心的矩形",paraId:34,tocIndex:6},{value:"funnel",paraId:34,tocIndex:6},{value:"绘制漏斗图",paraId:34,tocIndex:6},{value:"pyramid",paraId:34,tocIndex:6},{value:"绘制金字塔形状",paraId:34,tocIndex:6},{value:"interval",paraId:35,tocIndex:7},{value:" 图形标记在不同坐标系下的展示有所差别。根据坐标系或坐标系转换的不同，可以绘制柱状图、条形图、玫瑰图、饼图等多种图表。",paraId:35,tocIndex:7},{value:"坐标系或坐标系转换",paraId:36,tocIndex:7},{value:"坐标系配置",paraId:36,tocIndex:7},{value:"图表",paraId:36,tocIndex:7},{value:"直角坐标系",paraId:36,tocIndex:7},{value:"{ type: 'cartesian' }",paraId:36,tocIndex:7},{value:"柱状图、直方图等",paraId:36,tocIndex:7},{value:"transpose",paraId:36,tocIndex:7},{value:" 坐标系转置变换",paraId:36,tocIndex:7},{value:"{ transform: [{ type: 'transpose' }] }",paraId:36,tocIndex:7},{value:"条形图等",paraId:36,tocIndex:7},{value:"极坐标系",paraId:36,tocIndex:7},{value:"{ type: 'polar' }",paraId:36,tocIndex:7},{value:"玫瑰图等",paraId:36,tocIndex:7},{value:"theta",paraId:36,tocIndex:7},{value:" 坐标系",paraId:36,tocIndex:7},{value:"{ type: 'theta' }",paraId:36,tocIndex:7},{value:"饼图、环图等",paraId:36,tocIndex:7},{value:"radial",paraId:36,tocIndex:7},{value:" 坐标系",paraId:36,tocIndex:7},{value:"{ type: 'radial' }",paraId:36,tocIndex:7},{value:"玉珏图等",paraId:36,tocIndex:7},{value:"在",paraId:37,tocIndex:7},{value:"transpose 坐标系转置变换",paraId:37,tocIndex:7},{value:"后区间图的表现形式为条形图。",paraId:37,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { item: '分类一', count: 40 },\n    { item: '分类二', count: 21 },\n    { item: '分类三', count: 17 },\n    { item: '分类四', count: 13 },\n    { item: '分类五', count: 9 },\n  ],\n  encode: { x: 'item', y: 'count' },\n  coordinate: {\n    transform: [{ type: 'transpose' }], // 配置transpose坐标系转置变换\n  },\n});\n\nchart.render();\n",paraId:38,tocIndex:7},{value:"在",paraId:39,tocIndex:7},{value:"极坐标系",paraId:39,tocIndex:7},{value:"下区间图的表现形式为玫瑰图，使用半径大小对比数据大小。",paraId:39,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/87b2ff47-2a33-4509-869c-dae4cdd81163.csv',\n  },\n  encode: { x: 'year', color: 'year', y: 'people' },\n  transform: [{ type: 'groupX', y: 'sum' }], // 对离散的 x 通道进行分组，并求和\n  coordinate: {\n    type: 'polar', // // 配置坐标系为极坐标系，用于绘制玫瑰图\n  },\n  axis: false, // 不显示坐标轴\n});\n\nchart.render();\n",paraId:40,tocIndex:7},{value:"在",paraId:41,tocIndex:7},{value:"theta 坐标系",paraId:41,tocIndex:7},{value:"下区间图的表现形式为饼图，使用弧度大小对比数据大小。",paraId:41,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { item: '分类一', count: 40 },\n    { item: '分类二', count: 21 },\n    { item: '分类三', count: 17 },\n    { item: '分类四', count: 13 },\n    { item: '分类五', count: 9 },\n  ],\n  encode: { y: 'count', color: 'item' },\n  transform: [{ type: 'stackY' }], // 配置stackY数据转换，使得饼图的扇区角度和值的大小对应\n  coordinate: {\n    type: 'theta', // 配置theta坐标系，是一种特殊的极坐标系，常用来绘制饼图\n    outerRadius: 0.8, // 极坐标半径，范围 0-1\n  },\n});\n\nchart.render();\n",paraId:42,tocIndex:7},{value:"在",paraId:43,tocIndex:7},{value:"radial 坐标系",paraId:43,tocIndex:7},{value:"下区间图的表现形式为玉珏图，同样使用圆弧对比数据大小。",paraId:43,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { question: '问题 1', percent: 0.21 },\n    { question: '问题 2', percent: 0.4 },\n    { question: '问题 3', percent: 0.49 },\n    { question: '问题 4', percent: 0.52 },\n    { question: '问题 5', percent: 0.53 },\n    { question: '问题 6', percent: 0.84 },\n    { question: '问题 7', percent: 1 },\n    { question: '问题 8', percent: 1.2 },\n  ],\n  encode: { x: 'question', y: 'percent', color: 'percent' },\n  scale: { color: { range: ['#BAE7FF', '#1890FF'] } }, // 配置color通道的比例尺，使玉珏图的颜色在两个颜色之间平滑地过渡\n  coordinate: {\n    type: 'radial', // 配置radial坐标系，是一种特殊的极坐标系，常用来绘制玉珏图\n    innerRadius: 0.1, // 极坐标内半径，范围 0-1\n    endAngle: 3.141592653589793, // 极坐标系结束弧度\n  },\n  animate: { enter: { type: 'waveIn', duration: 800 } }, // 配置入场动画\n  axis: { y: { tickFilter: (d, i) => i !== 0 } }, // 刻度值过滤，y坐标轴0刻度不显示\n});\n\nchart.render();\n",paraId:44,tocIndex:7},{value:"配置 ",paraId:45,tocIndex:8},{value:"interval",paraId:45,tocIndex:8},{value:" 标记的样式。",paraId:45,tocIndex:8},{value:"属性",paraId:46,tocIndex:8},{value:"描述",paraId:46,tocIndex:8},{value:"类型",paraId:46,tocIndex:8},{value:"默认值",paraId:46,tocIndex:8},{value:"必选",paraId:46,tocIndex:8},{value:"columnWidthRatio",paraId:46,tocIndex:8},{value:"配置柱状图宽度占比，范围为 ",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:" - ",paraId:46,tocIndex:8},{value:"1",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0.9",paraId:46,tocIndex:8},{value:"minWidth",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形柱子的最小宽度，单位为像素",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"- Infinity",paraId:46,tocIndex:8},{value:"maxWidth",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形柱子的最大宽度，单位为像素",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"Infinity",paraId:46,tocIndex:8},{value:"minHeight",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形柱子的最小高度，单位为像素",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"- Infinity",paraId:46,tocIndex:8},{value:"radius",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形外层矩形的四个圆角大小",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"radiusTopLeft",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形外层矩形左上角的圆角",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"radiusTopRight",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形外层矩形右上角的圆角",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"radiusBottomRight",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形外层矩形右下角的圆角",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"radiusBottomLeft",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形外层矩形左下角的圆角",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"innerRadius",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形内层矩形的四个圆角大小",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"innerRadiusTopLeft",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形内层矩形左上角的圆角",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"innerRadiusTopRight",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形内层矩形右上角的圆角",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"innerRadiusBottomRight",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形内层矩形右下角的圆角",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"innerRadiusBottomLeft",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形内层矩形左下角的圆角",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"inset",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形矩形四个方向的内间距",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"insetLeft",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形左边的内间距",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"insetRight",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形右边的内间距",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"insetBottom",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形下面的内间距",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"insetTop",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形上面的内间距",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"fill",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形的填充色",paraId:46,tocIndex:8},{value:"string | (d, index, data, column) => string",paraId:46,tocIndex:8},{value:"hollow",paraId:46,tocIndex:8},{value:" 为空字符串",paraId:46,tocIndex:8},{value:"'  '",paraId:46,tocIndex:8},{value:"fillOpacity",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形的填充透明度",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"rect",paraId:46,tocIndex:8},{value:" 为",paraId:46,tocIndex:8},{value:"0.95",paraId:46,tocIndex:8},{value:"stroke",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形的描边",paraId:46,tocIndex:8},{value:"string | (d, index, data, column) => string",paraId:46,tocIndex:8},{value:"-",paraId:46,tocIndex:8},{value:"strokeOpacity",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形描边透明度",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"hollow",paraId:46,tocIndex:8},{value:" 为",paraId:46,tocIndex:8},{value:"1",paraId:46,tocIndex:8},{value:"lineWidth",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形描边的宽度",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"hollow",paraId:46,tocIndex:8},{value:" 为",paraId:46,tocIndex:8},{value:"2",paraId:46,tocIndex:8},{value:"lineDash",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:46,tocIndex:8},{value:"[number,number] | (d, index, data, column) => [number , number]",paraId:46,tocIndex:8},{value:"-",paraId:46,tocIndex:8},{value:"opacity",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形的整体透明度",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"-",paraId:46,tocIndex:8},{value:"shadowColor",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形阴影颜色",paraId:46,tocIndex:8},{value:"string | (d, index, data, column) => string",paraId:46,tocIndex:8},{value:"-",paraId:46,tocIndex:8},{value:"shadowBlur",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形阴影的高斯模糊系数",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"-",paraId:46,tocIndex:8},{value:"shadowOffsetX",paraId:46,tocIndex:8},{value:"设置阴影距",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形的水平距离",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"-",paraId:46,tocIndex:8},{value:"shadowOffsetY",paraId:46,tocIndex:8},{value:"设置阴影距",paraId:46,tocIndex:8},{value:"interval",paraId:46,tocIndex:8},{value:" 图形的垂直距离",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"-",paraId:46,tocIndex:8},{value:"cursor",paraId:46,tocIndex:8},{value:"鼠标样式。同 css 的鼠标样式。",paraId:46,tocIndex:8},{value:"string | (d, index, data, column) => string",paraId:46,tocIndex:8},{value:"default",paraId:46,tocIndex:8},{value:"尝试一下：",paraId:47,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', height: 350 });\n\nchart.options({\n  type: 'interval',\n  data: [\n    { name: 'London', 月份: 'Jan.', 月均降雨量: 18.9 },\n    { name: 'London', 月份: 'Feb.', 月均降雨量: 28.8 },\n    { name: 'London', 月份: 'Mar.', 月均降雨量: 39.3 },\n    { name: 'London', 月份: 'Apr.', 月均降雨量: 81.4 },\n    { name: 'London', 月份: 'May', 月均降雨量: 47 },\n    { name: 'London', 月份: 'Jun.', 月均降雨量: 20.3 },\n    { name: 'London', 月份: 'Jul.', 月均降雨量: 24 },\n    { name: 'London', 月份: 'Aug.', 月均降雨量: 35.6 },\n    { name: 'Berlin', 月份: 'Jan.', 月均降雨量: 12.4 },\n    { name: 'Berlin', 月份: 'Feb.', 月均降雨量: 23.2 },\n    { name: 'Berlin', 月份: 'Mar.', 月均降雨量: 34.5 },\n    { name: 'Berlin', 月份: 'Apr.', 月均降雨量: 99.7 },\n    { name: 'Berlin', 月份: 'May', 月均降雨量: 52.6 },\n    { name: 'Berlin', 月份: 'Jun.', 月均降雨量: 35.5 },\n    { name: 'Berlin', 月份: 'Jul.', 月均降雨量: 37.4 },\n    { name: 'Berlin', 月份: 'Aug.', 月均降雨量: 42.4 },\n  ],\n  encode: { x: '月份', y: '月均降雨量', color: 'name' },\n  transform: [{ type: 'stackY' }],\n  style: {\n    minHeight: 20,\n    columnWidthRatio: 0.5,\n    radiusTopLeft: 20,\n    radiusTopRight: 20,\n    insetBottom: 5,\n    // 绘图属性\n    fill: (d) => (d.name === 'London' ? '#688FD4' : '#55BECC'), // 绘图属性也可以是一个回调函数\n    fillOpacity: 0.9,\n    stroke: '#fff',\n    lineWidth: 1,\n    lineDash: [4, 5],\n    strokeOpacity: 0.5,\n    opacity: 1,\n    shadowColor: '#BABBBD',\n    shadowBlur: 10,\n    shadowOffsetX: 5,\n    shadowOffsetY: 5,\n    cursor: 'pointer',\n  },\n});\n\nchart.render();\n",paraId:48,tocIndex:8},{value:"怎么绘制一个对称条形图？",paraId:49,tocIndex:9},{value:"配置 ",paraId:50,tocIndex:9},{value:"y",paraId:50,tocIndex:9},{value:" 通道的时候，返回一个回调函数，根据一个分类字段，将 ",paraId:50,tocIndex:9},{value:"y",paraId:50,tocIndex:9},{value:" 通道的值区分为正值和负值。",paraId:50,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { age: 0, sex: 1, people: 9735380 },\n    { age: 0, sex: 2, people: 9310714 },\n    { age: 5, sex: 1, people: 10552146 },\n    { age: 5, sex: 2, people: 10069564 },\n    { age: 10, sex: 1, people: 10563233 },\n    { age: 10, sex: 2, people: 10022524 },\n    { age: 15, sex: 1, people: 10237419 },\n    { age: 15, sex: 2, people: 9692669 },\n    { age: 20, sex: 1, people: 9731315 },\n    { age: 20, sex: 2, people: 9324244 },\n    { age: 25, sex: 1, people: 9659493 },\n    { age: 25, sex: 2, people: 9518507 },\n    { age: 30, sex: 1, people: 10205879 },\n    { age: 30, sex: 2, people: 10119296 },\n    { age: 35, sex: 1, people: 11475182 },\n    { age: 35, sex: 2, people: 11635647 },\n    { age: 40, sex: 1, people: 11320252 },\n    { age: 40, sex: 2, people: 11488578 },\n    { age: 45, sex: 1, people: 9925006 },\n    { age: 45, sex: 2, people: 10261253 },\n    { age: 50, sex: 1, people: 8507934 },\n    { age: 50, sex: 2, people: 8911133 },\n    { age: 55, sex: 1, people: 6459082 },\n    { age: 55, sex: 2, people: 6921268 },\n    { age: 60, sex: 1, people: 5123399 },\n    { age: 60, sex: 2, people: 5668961 },\n    { age: 65, sex: 1, people: 4453623 },\n    { age: 65, sex: 2, people: 4804784 },\n    { age: 70, sex: 1, people: 3792145 },\n    { age: 70, sex: 2, people: 5184855 },\n    { age: 75, sex: 1, people: 2912655 },\n    { age: 75, sex: 2, people: 4355644 },\n    { age: 80, sex: 1, people: 1902638 },\n    { age: 80, sex: 2, people: 3221898 },\n    { age: 85, sex: 1, people: 970357 },\n    { age: 85, sex: 2, people: 1981156 },\n    { age: 90, sex: 1, people: 336303 },\n    { age: 90, sex: 2, people: 1064581 },\n  ],\n  encode: {\n    x: 'age',\n    y: (d) => (d.sex === 1 ? -d.people : d.people),\n    color: 'sex',\n  },\n  scale: {\n    color: { type: 'ordinal' }, // 将color通道定义域映射到有序离散的值域，通常用于分类的数据\n    x: { range: [1, 0] }, // 将x通道比例尺值域反转\n  },\n  coordinate: { transform: [{ type: 'transpose' }] }, // 配置坐标系转置，绘制条形图\n  axis: { y: { labelFormatter: '~s' } }, // 配置y轴刻度值标签格式化\n  legend: { color: { labelFormatter: (d) => (d === 1 ? 'Male' : 'Female') } }, // 配置color通道图例标签格式化\n  tooltip: {\n    items: [\n      (d) => ({\n        value: d.people,\n        name: d.sex === 1 ? 'Male' : 'Female',\n      }),\n    ],\n  }, // 配置tooltip元素\n});\n\nchart.render();\n",paraId:51,tocIndex:9}]},94941:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(83299);const t=[{value:"折线图（ ",paraId:0,tocIndex:0},{value:"line",paraId:0,tocIndex:0},{value:" ）图形标记根据一系列的点，绘制折线，显示数据在一个具有顺序性的维度上的变化。通常用来绘制折线图，是最常用的 ",paraId:0,tocIndex:0},{value:"Mark",paraId:0,tocIndex:0},{value:" 之一。",paraId:0,tocIndex:0},{value:"折线图用于分析事物随时间或有序类别而变化的趋势。如果有多组数据，则用于分析多组数据随时间变化或有序类别的相互作用和影响。折线的方向表示正/负变化。折线的斜率表示变化的程度。",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  width: 900,\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  },\n  encode: { x: 'date', y: 'close' },\n});\n\nchart.render();\n",paraId:2,tocIndex:1},{value:"更多的案例，可以查看",paraId:3,tocIndex:1},{value:"图表示例 - 折线图",paraId:4,tocIndex:1},{value:"页面。",paraId:3,tocIndex:1},{value:"属性",paraId:5,tocIndex:2},{value:"描述",paraId:5,tocIndex:2},{value:"类型",paraId:5,tocIndex:2},{value:"默认值",paraId:5,tocIndex:2},{value:"必选",paraId:5,tocIndex:2},{value:"encode",paraId:5,tocIndex:2},{value:"配置 ",paraId:5,tocIndex:2},{value:"line",paraId:5,tocIndex:2},{value:" 标记的视觉通道，包括",paraId:5,tocIndex:2},{value:"x",paraId:5,tocIndex:2},{value:"、",paraId:5,tocIndex:2},{value:"y",paraId:5,tocIndex:2},{value:"、",paraId:5,tocIndex:2},{value:"color",paraId:5,tocIndex:2},{value:"、",paraId:5,tocIndex:2},{value:"shape",paraId:5,tocIndex:2},{value:"、 ",paraId:5,tocIndex:2},{value:"size",paraId:5,tocIndex:2},{value:" 等，用于指定视觉元素属性和数据之间的关系",paraId:5,tocIndex:2},{value:"encode",paraId:6,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"✓",paraId:5,tocIndex:2},{value:"coordinate",paraId:5,tocIndex:2},{value:"配置 ",paraId:5,tocIndex:2},{value:"line",paraId:5,tocIndex:2},{value:" 标记的坐标系，坐标系会执行一系列点转换，从而改变标记的空间展示形式",paraId:5,tocIndex:2},{value:"coordinate",paraId:7,tocIndex:2},{value:"{type: 'cartesian' }",paraId:5,tocIndex:2},{value:"style",paraId:5,tocIndex:2},{value:"配置 ",paraId:5,tocIndex:2},{value:"line",paraId:5,tocIndex:2},{value:" 标记的图形样式",paraId:5,tocIndex:2},{value:"style",paraId:8,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"配置 ",paraId:9,tocIndex:3},{value:"line",paraId:9,tocIndex:3},{value:" 标记的视觉通道。",paraId:9,tocIndex:3},{value:"属性",paraId:10,tocIndex:3},{value:"描述",paraId:10,tocIndex:3},{value:"类型",paraId:10,tocIndex:3},{value:"默认值",paraId:10,tocIndex:3},{value:"必选",paraId:10,tocIndex:3},{value:"x",paraId:10,tocIndex:3},{value:"绑定 ",paraId:10,tocIndex:3},{value:"line",paraId:10,tocIndex:3},{value:" 标记的 ",paraId:10,tocIndex:3},{value:"x",paraId:10,tocIndex:3},{value:" 属性通道，一般是 ",paraId:10,tocIndex:3},{value:"data",paraId:10,tocIndex:3},{value:" 中的时间或有序名词字段",paraId:10,tocIndex:3},{value:"encode",paraId:11,tocIndex:3},{value:"-",paraId:10,tocIndex:3},{value:"✓",paraId:10,tocIndex:3},{value:"y",paraId:10,tocIndex:3},{value:"绑定 ",paraId:10,tocIndex:3},{value:"line",paraId:10,tocIndex:3},{value:" 标记的 ",paraId:10,tocIndex:3},{value:"y",paraId:10,tocIndex:3},{value:" 属性通道，一般是 ",paraId:10,tocIndex:3},{value:"data",paraId:10,tocIndex:3},{value:" 中的数值字段",paraId:10,tocIndex:3},{value:"encode",paraId:12,tocIndex:3},{value:"-",paraId:10,tocIndex:3},{value:"✓",paraId:10,tocIndex:3},{value:"color",paraId:10,tocIndex:3},{value:"绑定 ",paraId:10,tocIndex:3},{value:"line",paraId:10,tocIndex:3},{value:" 标记的 ",paraId:10,tocIndex:3},{value:"color",paraId:10,tocIndex:3},{value:" 属性通道，如果将数据字段映射到颜色通道，会对数据进行分组，将数据拆分成多条不同颜色的折线，一般用来配置多折线图等,或者是将一条折线拆分成颜色不同的多段，用来配置多色折线图",paraId:10,tocIndex:3},{value:"encode",paraId:13,tocIndex:3},{value:"-",paraId:10,tocIndex:3},{value:"series",paraId:10,tocIndex:3},{value:"绑定 ",paraId:10,tocIndex:3},{value:"line",paraId:10,tocIndex:3},{value:" 标记的 ",paraId:10,tocIndex:3},{value:"series",paraId:10,tocIndex:3},{value:" 属性通道，根据 series 通道实现系列折线图",paraId:10,tocIndex:3},{value:"encode",paraId:14,tocIndex:3},{value:"-",paraId:10,tocIndex:3},{value:"shape",paraId:10,tocIndex:3},{value:"绑定 ",paraId:10,tocIndex:3},{value:"line",paraId:10,tocIndex:3},{value:" 标记的 ",paraId:10,tocIndex:3},{value:"shape",paraId:10,tocIndex:3},{value:" 属性通道，改变图形标记的绘制形状",paraId:10,tocIndex:3},{value:"line",paraId:10,tocIndex:3},{value:" | ",paraId:10,tocIndex:3},{value:"smooth",paraId:10,tocIndex:3},{value:" | ",paraId:10,tocIndex:3},{value:"vh",paraId:10,tocIndex:3},{value:" | ",paraId:10,tocIndex:3},{value:"hv",paraId:10,tocIndex:3},{value:" | ",paraId:10,tocIndex:3},{value:"hvh",paraId:10,tocIndex:3},{value:" | ",paraId:10,tocIndex:3},{value:"trail",paraId:10,tocIndex:3},{value:"line",paraId:10,tocIndex:3},{value:"size",paraId:10,tocIndex:3},{value:"绑定 ",paraId:10,tocIndex:3},{value:"line",paraId:10,tocIndex:3},{value:" 标记的 ",paraId:10,tocIndex:3},{value:"size",paraId:10,tocIndex:3},{value:" 属性通道，改变图形标记的大小， 对于折线来说，",paraId:10,tocIndex:3},{value:"size",paraId:10,tocIndex:3},{value:" 视觉通道映射在线的宽度上",paraId:10,tocIndex:3},{value:"encode",paraId:15,tocIndex:3},{value:"-",paraId:10,tocIndex:3},{value:"color",paraId:16,tocIndex:4},{value:" 视觉通道影响 ",paraId:16,tocIndex:4},{value:"line",paraId:16,tocIndex:4},{value:" 图形标记的填充颜色。在区间图上应用时一般映射分类字段，对数据进行分组。",paraId:16,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  data: [\n    { name: 'London', 月份: 'Jan.', 月均降雨量: 18.9 },\n    { name: 'London', 月份: 'Feb.', 月均降雨量: 28.8 },\n    { name: 'London', 月份: 'Mar.', 月均降雨量: 39.3 },\n    { name: 'London', 月份: 'Apr.', 月均降雨量: 81.4 },\n    { name: 'London', 月份: 'May', 月均降雨量: 47 },\n    { name: 'London', 月份: 'Jun.', 月均降雨量: 20.3 },\n    { name: 'London', 月份: 'Jul.', 月均降雨量: 24 },\n    { name: 'London', 月份: 'Aug.', 月均降雨量: 35.6 },\n    { name: 'Berlin', 月份: 'Jan.', 月均降雨量: 12.4 },\n    { name: 'Berlin', 月份: 'Feb.', 月均降雨量: 23.2 },\n    { name: 'Berlin', 月份: 'Mar.', 月均降雨量: 34.5 },\n    { name: 'Berlin', 月份: 'Apr.', 月均降雨量: 99.7 },\n    { name: 'Berlin', 月份: 'May', 月均降雨量: 52.6 },\n    { name: 'Berlin', 月份: 'Jun.', 月均降雨量: 35.5 },\n    { name: 'Berlin', 月份: 'Jul.', 月均降雨量: 37.4 },\n    { name: 'Berlin', 月份: 'Aug.', 月均降雨量: 42.4 },\n  ],\n  encode: {\n    x: '月份',\n    y: '月均降雨量',\n    color: 'name', // 配置color通道，对数据进行分组\n  },\n});\n\nchart.render();\n",paraId:17,tocIndex:4},{value:"但是有些特殊情况下也会映射的连续字段上，对不同区间的数值对应的图形使用不同的颜色：",paraId:18,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  data: [\n    { year: '2000', value: 50 },\n    { year: '2001', value: 52 },\n    { year: '2002', value: 40 },\n    { year: '2003', value: 70 },\n    { year: '2004', value: 60 },\n    { year: '2005', value: 80 },\n    { year: '2006', value: 88 },\n    { year: '2007', value: 86 },\n    { year: '2008', value: 90 },\n    { year: '2009', value: 78 },\n    { year: '2010', value: 110 },\n    { year: '2011', value: 115 },\n  ],\n  encode: {\n    x: 'year',\n    y: 'value',\n    color: 'value',\n  },\n  scale: {\n    y: { nice: true },\n    color: { palette: 'turbo' },\n  },\n  style: {\n    gradient: 'y', // 渐变的方向\n    lineWidth: 2,\n    lineJoin: 'bevel', // 连接处样式\n  },\n});\n\nchart.render();\n",paraId:19,tocIndex:4},{value:"series",paraId:20,tocIndex:5},{value:" 视觉通道对数据进行分组，用于绘制系列折线图。",paraId:20,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  data: [\n    { name: 'London', 月份: 'Jan.', 月均降雨量: 18.9 },\n    { name: 'London', 月份: 'Feb.', 月均降雨量: 28.8 },\n    { name: 'London', 月份: 'Mar.', 月均降雨量: 39.3 },\n    { name: 'London', 月份: 'Apr.', 月均降雨量: 81.4 },\n    { name: 'London', 月份: 'May', 月均降雨量: 47 },\n    { name: 'London', 月份: 'Jun.', 月均降雨量: 20.3 },\n    { name: 'London', 月份: 'Jul.', 月均降雨量: 24 },\n    { name: 'London', 月份: 'Aug.', 月均降雨量: 35.6 },\n    { name: 'Berlin', 月份: 'Jan.', 月均降雨量: 12.4 },\n    { name: 'Berlin', 月份: 'Feb.', 月均降雨量: 23.2 },\n    { name: 'Berlin', 月份: 'Mar.', 月均降雨量: 34.5 },\n    { name: 'Berlin', 月份: 'Apr.', 月均降雨量: 99.7 },\n    { name: 'Berlin', 月份: 'May', 月均降雨量: 52.6 },\n    { name: 'Berlin', 月份: 'Jun.', 月均降雨量: 35.5 },\n    { name: 'Berlin', 月份: 'Jul.', 月均降雨量: 37.4 },\n    { name: 'Berlin', 月份: 'Aug.', 月均降雨量: 42.4 },\n    { name: 'Paris', 月份: 'Jan.', 月均降雨量: 14.4 },\n    { name: 'Paris', 月份: 'Feb.', 月均降雨量: 26.2 },\n    { name: 'Paris', 月份: 'Mar.', 月均降雨量: 37.5 },\n    { name: 'Paris', 月份: 'Apr.', 月均降雨量: 120.7 },\n    { name: 'Paris', 月份: 'May', 月均降雨量: 56.6 },\n    { name: 'Paris', 月份: 'Jun.', 月均降雨量: 45.5 },\n    { name: 'Paris', 月份: 'Jul.', 月均降雨量: 47.4 },\n    { name: 'Paris', 月份: 'Aug.', 月均降雨量: 62.4 },\n  ],\n  encode: { x: '月份', y: '月均降雨量', series: 'name', shape: 'smooth' },\n});\n\nchart.render();\n",paraId:21,tocIndex:5},{value:"line",paraId:22,tocIndex:6},{value:" 标记的支持的形状如下：",paraId:22,tocIndex:6},{value:"图形",paraId:23,tocIndex:6},{value:"描述",paraId:23,tocIndex:6},{value:"line",paraId:23,tocIndex:6},{value:"绘制直线连接的折线图",paraId:23,tocIndex:6},{value:"smooth",paraId:23,tocIndex:6},{value:"绘制平滑曲线的折线图",paraId:23,tocIndex:6},{value:"vh",paraId:23,tocIndex:6},{value:"绘制阶梯折线图，先竖线后横线连接",paraId:23,tocIndex:6},{value:"hv",paraId:23,tocIndex:6},{value:"绘制阶梯折线图，先横线后竖线连接",paraId:23,tocIndex:6},{value:"hvh",paraId:23,tocIndex:6},{value:"绘制阶梯折线图，竖横竖，中点连接",paraId:23,tocIndex:6},{value:"trail",paraId:23,tocIndex:6},{value:"绘制轨迹，类似一个笔迹，当配置了 ",paraId:23,tocIndex:6},{value:"size",paraId:23,tocIndex:6},{value:" 通道时，用来绘制粗细变化的线",paraId:23,tocIndex:6},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\n\nconst shapeList = ['line', 'smooth', 'trail', 'vh', 'hv', 'hvh'];\nconst shapeMap = shapeList.map((p) => {\n  return {\n    label: p,\n    value: p,\n  };\n});\n\nchart.options({\n  type: 'line',\n  data: [\n    { name: 'London', 月份: 'Jan.', 月均降雨量: 18.9 },\n    { name: 'London', 月份: 'Feb.', 月均降雨量: 28.8 },\n    { name: 'London', 月份: 'Mar.', 月均降雨量: 39.3 },\n    { name: 'London', 月份: 'Apr.', 月均降雨量: 81.4 },\n    { name: 'London', 月份: 'May', 月均降雨量: 47 },\n    { name: 'London', 月份: 'Jun.', 月均降雨量: 20.3 },\n    { name: 'London', 月份: 'Jul.', 月均降雨量: 24 },\n    { name: 'London', 月份: 'Aug.', 月均降雨量: 35.6 },\n    { name: 'Berlin', 月份: 'Jan.', 月均降雨量: 12.4 },\n    { name: 'Berlin', 月份: 'Feb.', 月均降雨量: 23.2 },\n    { name: 'Berlin', 月份: 'Mar.', 月均降雨量: 34.5 },\n    { name: 'Berlin', 月份: 'Apr.', 月均降雨量: 99.7 },\n    { name: 'Berlin', 月份: 'May', 月均降雨量: 52.6 },\n    { name: 'Berlin', 月份: 'Jun.', 月均降雨量: 35.5 },\n    { name: 'Berlin', 月份: 'Jul.', 月均降雨量: 37.4 },\n    { name: 'Berlin', 月份: 'Aug.', 月均降雨量: 42.4 },\n  ],\n  encode: { x: '月份', y: '月均降雨量', color: 'name', size: '月均降雨量' },\n});\n\nconst handleSetShape = (shape) => {\n  chart.options({\n    encode: {\n      x: '月份',\n      y: '月均降雨量',\n      color: 'name',\n      size: '月均降雨量',\n      shape,\n    },\n  });\n  chart.render(); // 重新渲染图表\n};\n\n// 插入Shape 选择器\nconst selectorContainer = document.createElement('div');\nselectorContainer.textContent = '选择折线形状 ';\nconst selector = document.createElement('select');\nselector.innerHTML = shapeMap.map(\n  (shape, index) =>\n    `<option value=\"${shape.value}\" ${index === 0 ? 'selected' : ''}>${\n      shape.label\n    }</option>`,\n);\nselector.onchange = (e) => {\n  handleSetShape(e.target.value);\n};\nselectorContainer.appendChild(selector);\ncontainer.insertBefore(selectorContainer, container.childNodes[0]);\n\nchart.render();\n",paraId:24,tocIndex:6},{value:"绑定 ",paraId:25,tocIndex:7},{value:"line",paraId:25,tocIndex:7},{value:" 标记的 ",paraId:25,tocIndex:7},{value:"size",paraId:25,tocIndex:7},{value:" 属性通道，改变图形标记的大小， 对于折线来说，",paraId:25,tocIndex:7},{value:"size",paraId:25,tocIndex:7},{value:" 视觉通道映射在线的宽度上，一般配合",paraId:25,tocIndex:7},{value:"shape",paraId:25,tocIndex:7},{value:"通道的 ",paraId:25,tocIndex:7},{value:"trail",paraId:25,tocIndex:7},{value:" 形状一起使用。",paraId:25,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  data: [\n    { name: 'London', 月份: 'Jan.', 月均降雨量: 18.9 },\n    { name: 'London', 月份: 'Feb.', 月均降雨量: 28.8 },\n    { name: 'London', 月份: 'Mar.', 月均降雨量: 39.3 },\n    { name: 'London', 月份: 'Apr.', 月均降雨量: 81.4 },\n    { name: 'London', 月份: 'May', 月均降雨量: 47 },\n    { name: 'London', 月份: 'Jun.', 月均降雨量: 20.3 },\n    { name: 'London', 月份: 'Jul.', 月均降雨量: 24 },\n    { name: 'London', 月份: 'Aug.', 月均降雨量: 35.6 },\n  ],\n  encode: {\n    x: '月份',\n    y: '月均降雨量',\n    size: '月均降雨量',\n    shape: 'trail',\n  },\n});\n\nchart.render();\n",paraId:26,tocIndex:7},{value:"interval",paraId:27,tocIndex:8},{value:" 图形标记在不同坐标系下的展示有所差别。根据坐标系或坐标系转换的不同，可以绘制柱状图、条形图、玫瑰图、饼图等多种图表。",paraId:27,tocIndex:8},{value:"坐标系或坐标系转换",paraId:28,tocIndex:8},{value:"坐标系配置",paraId:28,tocIndex:8},{value:"图表",paraId:28,tocIndex:8},{value:"直角坐标系",paraId:28,tocIndex:8},{value:"{ type: 'cartesian' }",paraId:28,tocIndex:8},{value:"折线图等",paraId:28,tocIndex:8},{value:"极坐标系",paraId:28,tocIndex:8},{value:"{ type: 'polar' }",paraId:28,tocIndex:8},{value:"雷达图等",paraId:28,tocIndex:8},{value:"parallel",paraId:28,tocIndex:8},{value:" 坐标系",paraId:28,tocIndex:8},{value:"{ type: 'parallel' }",paraId:28,tocIndex:8},{value:"平行坐标系等",paraId:28,tocIndex:8},{value:"在",paraId:29,tocIndex:8},{value:"极坐标系",paraId:29,tocIndex:8},{value:"下折线图的表现形式为雷达图，在极坐标下线区域图需要进行闭合。常用来绘制雷达图等。",paraId:29,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  data: [\n    { item: 'Design', type: 'a', score: 70 },\n    { item: 'Design', type: 'b', score: 30 },\n    { item: 'Development', type: 'a', score: 60 },\n    { item: 'Development', type: 'b', score: 70 },\n    { item: 'Marketing', type: 'a', score: 50 },\n    { item: 'Marketing', type: 'b', score: 60 },\n    { item: 'Users', type: 'a', score: 40 },\n    { item: 'Users', type: 'b', score: 50 },\n    { item: 'Test', type: 'a', score: 60 },\n    { item: 'Test', type: 'b', score: 70 },\n    { item: 'Language', type: 'a', score: 70 },\n    { item: 'Language', type: 'b', score: 50 },\n    { item: 'Technology', type: 'a', score: 50 },\n    { item: 'Technology', type: 'b', score: 40 },\n    { item: 'Support', type: 'a', score: 30 },\n    { item: 'Support', type: 'b', score: 40 },\n    { item: 'Sales', type: 'a', score: 60 },\n    { item: 'Sales', type: 'b', score: 40 },\n    { item: 'UX', type: 'a', score: 50 },\n    { item: 'UX', type: 'b', score: 60 },\n  ],\n  encode: { x: 'item', y: 'score', color: 'type' },\n  // 调整比例尺，使得极坐标下的展示更友好\n  scale: {\n    x: { padding: 0.5, align: 0 },\n    y: { tickCount: 5, domainMin: 0, domainMax: 80 },\n  },\n  coordinate: { type: 'polar' }, // 设置极坐标系转换\n  style: { lineWidth: 2 },\n  axis: {\n    x: { grid: true, gridLineWidth: 1, tick: false, gridLineDash: [0, 0] },\n    y: {\n      zIndex: 1,\n      title: false,\n      gridLineWidth: 1, // 网格线宽度\n      gridLineDash: [0, 0], // 网格线虚线样式\n      gridAreaFill: (dataum, index, data) => {\n        return index % 2 === 1 ? 'rgba(0, 0, 0, 0.04)' : '';\n      }, // 网格线区域填充\n    },\n  },\n});\n\nchart.render();\n",paraId:30,tocIndex:8},{value:"在",paraId:31,tocIndex:8},{value:"parallel 坐标系",paraId:31,tocIndex:8},{value:"下折线图常用来绘制平行坐标系。平行坐标系，是一种含有多个垂直平行坐标轴的统计图表。每个垂直坐标轴表示一个字段，每个字段又用刻度来标明范围。这样，一个多维的数据可以很容易的在每一条轴上找到“落点”，从而连接起来，形成一条折线。随着数据增多，折线堆叠，分析者则有可能从中发现特性和规律，比如发现数据之间的聚类关系。",paraId:31,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nconst positionList = [\n  'position',\n  'position1',\n  'position2',\n  'position3',\n  'position4',\n  'position5',\n  'position6',\n  'position7',\n];\nconst axis = {\n  zIndex: 1,\n  titlePosition: 'right',\n  line: true,\n  labelStroke: '#fff',\n  labelLineWidth: 5,\n  labelFontSize: 10,\n  labelStrokeLineJoin: 'round',\n  titleStroke: '#fff',\n  titleFontSize: 10,\n  titleLineWidth: 5,\n  titleStrokeLineJoin: 'round',\n  titleTransform: 'translate(-50%, 0) rotate(-90)',\n  lineStroke: 'black',\n  tickStroke: 'black',\n  lineLineWidth: 1,\n};\n\nchart.options({\n  type: 'line',\n  paddingLeft: 20,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/cars3.json',\n  },\n  encode: {\n    position: [\n      'economy (mpg)',\n      'cylinders',\n      'displacement (cc)',\n      'power (hp)',\n      'weight (lb)',\n      '0-60 mph (s)',\n      'year',\n    ],\n    color: 'weight (lb)',\n  },\n  axis: Object.fromEntries(positionList.map((item) => [item, axis])),\n  scale: { color: { palette: 'brBG', offset: (t) => 1 - t } },\n  coordinate: { type: 'parallel' }, // 配置平行坐标系转转换\n  style: { lineWidth: 1.5, strokeOpacity: 0.4 },\n  legend: { color: { length: 400, layout: { justifyContent: 'center' } } },\n  interaction: { tooltip: { series: false } },\n});\n\nchart.render();\n",paraId:32,tocIndex:8},{value:"配置 ",paraId:33,tocIndex:9},{value:"line",paraId:33,tocIndex:9},{value:" 标记的样式。",paraId:33,tocIndex:9},{value:"属性",paraId:34,tocIndex:9},{value:"描述",paraId:34,tocIndex:9},{value:"类型",paraId:34,tocIndex:9},{value:"默认值",paraId:34,tocIndex:9},{value:"必选",paraId:34,tocIndex:9},{value:"gradient",paraId:34,tocIndex:9},{value:"配置渐变色折线图时，渐变的方向，为 true 的时候默认为",paraId:34,tocIndex:9},{value:"y",paraId:34,tocIndex:9},{value:"x",paraId:34,tocIndex:9},{value:" | ",paraId:34,tocIndex:9},{value:"y",paraId:34,tocIndex:9},{value:" |true",paraId:34,tocIndex:9},{value:"false",paraId:34,tocIndex:9},{value:"gradientColor",paraId:34,tocIndex:9},{value:"每个节点的颜色对应渐变色的部分",paraId:34,tocIndex:9},{value:"between",paraId:34,tocIndex:9},{value:" | ",paraId:34,tocIndex:9},{value:"start",paraId:34,tocIndex:9},{value:" |",paraId:34,tocIndex:9},{value:"end",paraId:34,tocIndex:9},{value:"between",paraId:34,tocIndex:9},{value:"lineJoin",paraId:34,tocIndex:9},{value:"连接处样式,见",paraId:34,tocIndex:9},{value:"lineJoin",paraId:34,tocIndex:9},{value:"miter",paraId:34,tocIndex:9},{value:" | ",paraId:34,tocIndex:9},{value:"round",paraId:34,tocIndex:9},{value:" | ",paraId:34,tocIndex:9},{value:"bevel",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"connect",paraId:34,tocIndex:9},{value:"是否用 ",paraId:34,tocIndex:9},{value:"connector",paraId:34,tocIndex:9},{value:" 图形连接空值",paraId:34,tocIndex:9},{value:"boolean",paraId:34,tocIndex:9},{value:"false",paraId:34,tocIndex:9},{value:"defined",paraId:34,tocIndex:9},{value:"决定数据是否为空值",paraId:34,tocIndex:9},{value:"(d: any) => boolean",paraId:34,tocIndex:9},{value:"(d) => !Number.isNaN(d) && d !== undefined && d !== null",paraId:34,tocIndex:9},{value:"connectFill",paraId:34,tocIndex:9},{value:"connector",paraId:34,tocIndex:9},{value:" 图形填充色",paraId:34,tocIndex:9},{value:"string",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"connectFillOpacity",paraId:34,tocIndex:9},{value:"connector",paraId:34,tocIndex:9},{value:" 图形填充透明度",paraId:34,tocIndex:9},{value:"number",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"connectStroke",paraId:34,tocIndex:9},{value:"connector",paraId:34,tocIndex:9},{value:" 图形的描边",paraId:34,tocIndex:9},{value:"string",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"connectStrokeOpacity",paraId:34,tocIndex:9},{value:"connector",paraId:34,tocIndex:9},{value:" 图形描边透明度",paraId:34,tocIndex:9},{value:"number",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"connectLineWidth",paraId:34,tocIndex:9},{value:"connector",paraId:34,tocIndex:9},{value:" 图形描边的宽度",paraId:34,tocIndex:9},{value:"number",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"connectLineDash",paraId:34,tocIndex:9},{value:"connector",paraId:34,tocIndex:9},{value:" 图形描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:34,tocIndex:9},{value:"[number,number]",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"connectOpacity",paraId:34,tocIndex:9},{value:"connector",paraId:34,tocIndex:9},{value:" 图形的整体透明度",paraId:34,tocIndex:9},{value:"number",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"connectShadowColor",paraId:34,tocIndex:9},{value:"connector",paraId:34,tocIndex:9},{value:" 图形阴影颜色",paraId:34,tocIndex:9},{value:"string",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"connectShadowBlur",paraId:34,tocIndex:9},{value:"connector",paraId:34,tocIndex:9},{value:" 图形阴影的高斯模糊系数",paraId:34,tocIndex:9},{value:"number",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"connectShadowOffsetX",paraId:34,tocIndex:9},{value:"设置阴影距",paraId:34,tocIndex:9},{value:"connector",paraId:34,tocIndex:9},{value:" 图形的水平距离",paraId:34,tocIndex:9},{value:"number",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"connectShadowOffsetY",paraId:34,tocIndex:9},{value:"设置阴影距",paraId:34,tocIndex:9},{value:"connector",paraId:34,tocIndex:9},{value:" 图形的垂直距离",paraId:34,tocIndex:9},{value:"number",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"connectCursor",paraId:34,tocIndex:9},{value:"connector",paraId:34,tocIndex:9},{value:" 图形鼠标样式。同 css 的鼠标样式。",paraId:34,tocIndex:9},{value:"string",paraId:34,tocIndex:9},{value:"default",paraId:34,tocIndex:9},{value:"stroke",paraId:34,tocIndex:9},{value:"line",paraId:34,tocIndex:9},{value:" 图形的描边",paraId:34,tocIndex:9},{value:"string",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"strokeOpacity",paraId:34,tocIndex:9},{value:"line",paraId:34,tocIndex:9},{value:" 图形的描边透明度",paraId:34,tocIndex:9},{value:"number",paraId:34,tocIndex:9},{value:"1",paraId:34,tocIndex:9},{value:"lineWidth",paraId:34,tocIndex:9},{value:"line",paraId:34,tocIndex:9},{value:" 图形描边的宽度",paraId:34,tocIndex:9},{value:"number",paraId:34,tocIndex:9},{value:"1",paraId:34,tocIndex:9},{value:"lineDash",paraId:34,tocIndex:9},{value:"line",paraId:34,tocIndex:9},{value:" 图形描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:34,tocIndex:9},{value:"[number,number]",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"opacity",paraId:34,tocIndex:9},{value:"line",paraId:34,tocIndex:9},{value:" 图形的整体透明度",paraId:34,tocIndex:9},{value:"number",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"shadowColor",paraId:34,tocIndex:9},{value:"line",paraId:34,tocIndex:9},{value:" 图形阴影颜色",paraId:34,tocIndex:9},{value:"string",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"shadowBlur",paraId:34,tocIndex:9},{value:"line",paraId:34,tocIndex:9},{value:" 图形阴影的高斯模糊系数",paraId:34,tocIndex:9},{value:"number",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"shadowOffsetX",paraId:34,tocIndex:9},{value:"设置阴影距",paraId:34,tocIndex:9},{value:"line",paraId:34,tocIndex:9},{value:" 图形的水平距离",paraId:34,tocIndex:9},{value:"number",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"shadowOffsetY",paraId:34,tocIndex:9},{value:"设置阴影距",paraId:34,tocIndex:9},{value:"line",paraId:34,tocIndex:9},{value:" 图形的垂直距离",paraId:34,tocIndex:9},{value:"number",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"cursor",paraId:34,tocIndex:9},{value:"line",paraId:34,tocIndex:9},{value:" 图形的鼠标样式。同 css 的鼠标样式。",paraId:34,tocIndex:9},{value:"string",paraId:34,tocIndex:9},{value:"default",paraId:34,tocIndex:9},{value:"尝试一下：",paraId:35,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', height: 350 });\n\nchart.options({\n  type: 'line',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/doughnut-purchases.json',\n    transform: [\n      // Mock missing data.\n      {\n        type: 'map',\n        callback: (d) => ({\n          ...d,\n          count: ['2004'].includes(d.year) ? NaN : d.count,\n        }),\n      },\n    ],\n  },\n  style: {\n    gradient: 'x',\n    gradientColor: 'start',\n    lineJoin: 'round',\n    connect: true,\n    connectStroke: '#aaa',\n    connectLineWidth: 1,\n    connectLineDash: [2, 4],\n    lineWidth: 3,\n    opacity: 0.9,\n    shadowColor: '#d3d3d3',\n    shadowBlur: 10,\n    shadowOffsetX: 10,\n    shadowOffsetY: 10,\n  },\n  encode: { x: 'year', y: 'count', color: 'year', shape: 'smooth' },\n  scale: { y: { zero: true, nice: true } },\n  axis: { y: { labelFormatter: '~s' } },\n  labels: [\n    {\n      text: 'count',\n    },\n  ],\n});\n\nchart.render();\n\n",paraId:36,tocIndex:9},{value:"怎么绘制一个零值折线图？",paraId:37,tocIndex:10},{value:"配置 ",paraId:38,tocIndex:10},{value:"y",paraId:38,tocIndex:10},{value:" 通道的比例尺 ",paraId:38,tocIndex:10},{value:"scale",paraId:38,tocIndex:10},{value:"，自定义 y 轴的值域。",paraId:38,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  data: [\n    { date: '06-10', count: 0, type: '测试' },\n    { date: '06-11', count: 0, type: '测试' },\n    { date: '06-12', count: 0, type: '测试' },\n    { date: '06-13', count: 0, type: '测试' },\n    { date: '06-14', count: 0, type: '测试' },\n    { date: '06-15', count: 0, type: '测试' },\n    { date: '06-16', count: 0, type: '测试' },\n  ],\n  encode: { x: 'date', y: 'count' },\n  scale: { y: { domain: [0, 1] } },\n});\nchart.render();\n",paraId:39,tocIndex:10}]},5654:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(55418);const t=[{value:"lineX",paraId:0,tocIndex:0},{value:"和",paraId:0,tocIndex:0},{value:"lineY",paraId:0,tocIndex:0},{value:"图形标记配置相似，",paraId:0,tocIndex:0},{value:"lineX",paraId:0,tocIndex:0},{value:"图形标记用于绘制垂直于 x 轴的辅助线，常用于绘制平均值或其他聚合数据辅助线。",paraId:0,tocIndex:0},{value:"lineX",paraId:1,tocIndex:1},{value:" 支持两种配置数据的方式：",paraId:1,tocIndex:1},{value:"当您需要绘制固定位置的垂直线时，可以直接配置 ",paraId:2,tocIndex:2},{value:"data",paraId:2,tocIndex:2},{value:" 为数字数组。G2 会自动将数组转换为 ",paraId:2,tocIndex:2},{value:"x",paraId:2,tocIndex:2},{value:" 通道编码。",paraId:2,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  height: 200,\n  children: [\n    {\n      type: 'rect',\n      data: {\n        type: 'fetch',\n        value: 'https://assets.antv.antgroup.com/g2/unemployment2.json',\n      },\n      encode: { x: 'rate' },\n      transform: [{ type: 'binX', y: 'count' }],\n      style: { inset: 0.5 },\n    },\n    {\n      type: 'lineX',\n      data: [10.2], // 自动转换为 encode: { x: [10.2] }\n      style: { stroke: '#000', strokeOpacity: 0.45, lineDash: [3, 4] },\n      labels: [\n        {\n          text: 'lineX text',\n          position: 'top-left',\n          textBaseline: 'bottom',\n          fill: '#000',\n          fillOpacity: 0.45,\n          background: true,\n          backgroundFill: '#000',\n          backgroundOpacity: 0.15,\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:3,tocIndex:2},{value:"当您需要基于数据字段或配合数据变换时，应显式配置 ",paraId:4,tocIndex:3},{value:"encode",paraId:4,tocIndex:3},{value:" 通道。这种方式更灵活，支持数据字段映射和各种数据变换。",paraId:4,tocIndex:3},{value:"/**\n * A recreation of this demo: https://vega.github.io/vega-lite/examples/layer_histogram_global_mean.html\n */\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/movies.json',\n  transform: [\n    {\n      type: 'filter',\n      callback: (d) => d['IMDB Rating'] > 0,\n    },\n  ],\n});\n\nchart\n  .rect()\n  .transform({ type: 'binX', y: 'count', thresholds: 9 })\n  .encode('x', 'IMDB Rating')\n  .scale('y', { domainMax: 1000 })\n  .style('inset', 1);\n\nchart\n  .lineX()\n  .transform({ type: 'groupColor', x: 'mean' }) // 计算平均值\n  .encode('x', 'IMDB Rating') // 显式配置x通道\n  .style('stroke', '#F4664A')\n  .style('strokeOpacity', 1)\n  .style('lineWidth', 2)\n  .style('lineDash', [4, 4]);\n\nchart.render();\n",paraId:5,tocIndex:3},{value:"配置方式",paraId:6,tocIndex:4},{value:"适用场景",paraId:6,tocIndex:4},{value:"示例",paraId:6,tocIndex:4},{value:"自动转换",paraId:6,tocIndex:4},{value:"data: [value1, value2]",paraId:6,tocIndex:4},{value:"固定位置的辅助线",paraId:6,tocIndex:4},{value:"data: [10, 20]",paraId:6,tocIndex:4},{value:"✅ 自动转换为 ",paraId:6,tocIndex:4},{value:"encode.x",paraId:6,tocIndex:4},{value:"encode: { x: field }",paraId:6,tocIndex:4},{value:"基于数据字段或需要变换",paraId:6,tocIndex:4},{value:"encode('x', 'fieldName')",paraId:6,tocIndex:4},{value:"❌ 显式配置",paraId:6,tocIndex:4},{value:"重要说明：",paraId:7,tocIndex:4},{value:"当同时配置 ",paraId:8,tocIndex:4},{value:"data",paraId:8,tocIndex:4},{value:" 数组和 ",paraId:8,tocIndex:4},{value:"encode.x",paraId:8,tocIndex:4},{value:" 时，",paraId:8,tocIndex:4},{value:"encode.x",paraId:8,tocIndex:4},{value:" 优先级更高",paraId:8,tocIndex:4},{value:"data",paraId:8,tocIndex:4},{value:" 自动转换仅在数组元素为简单值（非对象）时生效",paraId:8,tocIndex:4},{value:"配合 ",paraId:8,tocIndex:4},{value:"transform",paraId:8,tocIndex:4},{value:" 进行数据聚合时，必须使用 ",paraId:8,tocIndex:4},{value:"encode",paraId:8,tocIndex:4},{value:" 方式",paraId:8,tocIndex:4},{value:"更多的案例，可以查看",paraId:9,tocIndex:4},{value:"图表示例 - 线标注",paraId:10,tocIndex:4},{value:"页面。",paraId:9,tocIndex:4},{value:"属性",paraId:11,tocIndex:5},{value:"描述",paraId:11,tocIndex:5},{value:"类型",paraId:11,tocIndex:5},{value:"默认值",paraId:11,tocIndex:5},{value:"必选",paraId:11,tocIndex:5},{value:"data",paraId:11,tocIndex:5},{value:"配置 ",paraId:11,tocIndex:5},{value:"lineX",paraId:11,tocIndex:5},{value:" 标记的数据，支持数字数组（会自动转换为 x 通道）或对象数组",paraId:11,tocIndex:5},{value:"Array",paraId:11,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"encode",paraId:11,tocIndex:5},{value:"配置 ",paraId:11,tocIndex:5},{value:"lineX",paraId:11,tocIndex:5},{value:" 标记的视觉通道，包括",paraId:11,tocIndex:5},{value:"x",paraId:11,tocIndex:5},{value:"、",paraId:11,tocIndex:5},{value:"color",paraId:11,tocIndex:5},{value:"等，用于指定视觉元素属性和数据之间的关系",paraId:11,tocIndex:5},{value:"encode",paraId:12,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"✓",paraId:11,tocIndex:5},{value:"style",paraId:11,tocIndex:5},{value:"配置 ",paraId:11,tocIndex:5},{value:"lineX",paraId:11,tocIndex:5},{value:" 标记的图形样式",paraId:11,tocIndex:5},{value:"style",paraId:13,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"labels",paraId:11,tocIndex:5},{value:"配置 ",paraId:11,tocIndex:5},{value:"lineX",paraId:11,tocIndex:5},{value:" 标记的文本配置",paraId:11,tocIndex:5},{value:"labels",paraId:14,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"配置 ",paraId:15,tocIndex:6},{value:"lineX",paraId:15,tocIndex:6},{value:" 标记的视觉通道。",paraId:15,tocIndex:6},{value:"属性",paraId:16,tocIndex:6},{value:"描述",paraId:16,tocIndex:6},{value:"类型",paraId:16,tocIndex:6},{value:"默认值",paraId:16,tocIndex:6},{value:"必选",paraId:16,tocIndex:6},{value:"x",paraId:16,tocIndex:6},{value:"绑定 ",paraId:16,tocIndex:6},{value:"lineX",paraId:16,tocIndex:6},{value:" 标记的 ",paraId:16,tocIndex:6},{value:"x",paraId:16,tocIndex:6},{value:" 属性通道。支持数据字段映射或配合 transform 计算聚合值（如平均值 mean、中位数 median）。",paraId:16,tocIndex:6},{value:"注意：当直接配置 ",paraId:16,tocIndex:6},{value:"data",paraId:16,tocIndex:6},{value:" 为数组时，会自动转换为 ",paraId:16,tocIndex:6},{value:"x",paraId:16,tocIndex:6},{value:" 通道，无需重复配置。",paraId:16,tocIndex:6},{value:"encode",paraId:17,tocIndex:6},{value:"-",paraId:16,tocIndex:6},{value:"✓",paraId:16,tocIndex:6},{value:"color",paraId:16,tocIndex:6},{value:"绑定 ",paraId:16,tocIndex:6},{value:"lineX",paraId:16,tocIndex:6},{value:" 标记的 ",paraId:16,tocIndex:6},{value:"color",paraId:16,tocIndex:6},{value:" 属性通道，如果将数据字段映射到颜色通道，会对数据进行分组，将数据拆分成多个不同颜色的区域",paraId:16,tocIndex:6},{value:"encode",paraId:18,tocIndex:6},{value:"-",paraId:16,tocIndex:6},{value:"属性",paraId:19,tocIndex:7},{value:"描述",paraId:19,tocIndex:7},{value:"类型",paraId:19,tocIndex:7},{value:"默认值",paraId:19,tocIndex:7},{value:"必选",paraId:19,tocIndex:7},{value:"stroke",paraId:19,tocIndex:7},{value:"图形的描边",paraId:19,tocIndex:7},{value:"string",paraId:19,tocIndex:7},{value:" | ",paraId:19,tocIndex:7},{value:"Function<string>",paraId:19,tocIndex:7},{value:"-",paraId:19,tocIndex:7},{value:"strokeOpacity",paraId:19,tocIndex:7},{value:"描边透明度",paraId:19,tocIndex:7},{value:"number",paraId:19,tocIndex:7},{value:" | ",paraId:19,tocIndex:7},{value:"Function<number>",paraId:19,tocIndex:7},{value:"-",paraId:19,tocIndex:7},{value:"lineWidth",paraId:19,tocIndex:7},{value:"图形描边的宽度",paraId:19,tocIndex:7},{value:"number",paraId:19,tocIndex:7},{value:" | ",paraId:19,tocIndex:7},{value:"Function<number>",paraId:19,tocIndex:7},{value:"-",paraId:19,tocIndex:7},{value:"lineDash",paraId:19,tocIndex:7},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:19,tocIndex:7},{value:"[number,number]",paraId:19,tocIndex:7},{value:" | ",paraId:19,tocIndex:7},{value:"Function<[number, number]>",paraId:19,tocIndex:7},{value:"-",paraId:19,tocIndex:7},{value:"opacity",paraId:19,tocIndex:7},{value:"图形的整体透明度",paraId:19,tocIndex:7},{value:"number",paraId:19,tocIndex:7},{value:" | ",paraId:19,tocIndex:7},{value:"Function<number>",paraId:19,tocIndex:7},{value:"-",paraId:19,tocIndex:7},{value:"shadowColor",paraId:19,tocIndex:7},{value:"图形阴影颜色",paraId:19,tocIndex:7},{value:"string",paraId:19,tocIndex:7},{value:" | ",paraId:19,tocIndex:7},{value:"Function<string>",paraId:19,tocIndex:7},{value:"-",paraId:19,tocIndex:7},{value:"shadowBlur",paraId:19,tocIndex:7},{value:"图形阴影的高斯模糊系数",paraId:19,tocIndex:7},{value:"number",paraId:19,tocIndex:7},{value:" | ",paraId:19,tocIndex:7},{value:"Function<number>",paraId:19,tocIndex:7},{value:"-",paraId:19,tocIndex:7},{value:"shadowOffsetX",paraId:19,tocIndex:7},{value:"设置阴影距图形的水平距离",paraId:19,tocIndex:7},{value:"number",paraId:19,tocIndex:7},{value:" | ",paraId:19,tocIndex:7},{value:"Function<number>",paraId:19,tocIndex:7},{value:"-",paraId:19,tocIndex:7},{value:"shadowOffsetY",paraId:19,tocIndex:7},{value:"设置阴影距图形的垂直距离",paraId:19,tocIndex:7},{value:"number",paraId:19,tocIndex:7},{value:" | ",paraId:19,tocIndex:7},{value:"Function<number>",paraId:19,tocIndex:7},{value:"-",paraId:19,tocIndex:7},{value:"cursor",paraId:19,tocIndex:7},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:19,tocIndex:7},{value:"string",paraId:19,tocIndex:7},{value:" | ",paraId:19,tocIndex:7},{value:"Function<string>",paraId:19,tocIndex:7},{value:"default",paraId:19,tocIndex:7},{value:"展示如何使用不同数据源分别计算统计线，适用于数据对比分析场景。",paraId:20,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\n// 模拟两组不同的数据\nconst data2020 = Array.from({ length: 100 }, (_, i) => ({\n  score: 60 + Math.random() * 30,\n  year: 2020,\n  category: 'A',\n}));\n\nconst data2021 = Array.from({ length: 100 }, (_, i) => ({\n  score: 70 + Math.random() * 25,\n  year: 2021,\n  category: 'B',\n}));\n\nconst allData = [...data2020, ...data2021];\n\nchart.options({\n  type: 'view',\n  children: [\n    // 2020年数据的直方图\n    {\n      type: 'rect',\n      data: data2020,\n      transform: [{ type: 'binX', y: 'count', thresholds: 15 }],\n      encode: { x: 'score' },\n      style: {\n        fill: '#1890ff',\n        fillOpacity: 0.5,\n        stroke: '#1890ff',\n        inset: 0.5,\n      },\n    },\n    // 2021年数据的直方图\n    {\n      type: 'rect',\n      data: data2021,\n      transform: [{ type: 'binX', y: 'count', thresholds: 15 }],\n      encode: { x: 'score' },\n      style: {\n        fill: '#fa8c16',\n        fillOpacity: 0.5,\n        stroke: '#fa8c16',\n        inset: 0.5,\n      },\n    },\n    // 2020年平均值线\n    {\n      type: 'lineX',\n      data: data2020,\n      transform: [{ type: 'groupColor', x: 'mean' }],\n      encode: { x: 'score' },\n      style: {\n        stroke: '#1890ff',\n        strokeOpacity: 1,\n        lineWidth: 3,\n        lineDash: [6, 3],\n      },\n      labels: [\n        {\n          text: '2020年平均分',\n          position: 'top-left',\n          fill: '#1890ff',\n          fontWeight: 'bold',\n          background: true,\n          backgroundFill: '#e6f7ff',\n          backgroundOpacity: 0.9,\n        },\n      ],\n    },\n    // 2021年平均值线\n    {\n      type: 'lineX',\n      data: data2021,\n      transform: [{ type: 'groupColor', x: 'mean' }],\n      encode: { x: 'score' },\n      style: {\n        stroke: '#fa8c16',\n        strokeOpacity: 1,\n        lineWidth: 3,\n        lineDash: [6, 3],\n      },\n      labels: [\n        {\n          text: '2021年平均分',\n          position: 'top-right',\n          fill: '#fa8c16',\n          fontWeight: 'bold',\n          background: true,\n          backgroundFill: '#fff7e6',\n          backgroundOpacity: 0.9,\n        },\n      ],\n    },\n    // 整体平均值线\n    {\n      type: 'lineX',\n      data: allData,\n      transform: [{ type: 'groupColor', x: 'mean' }],\n      encode: { x: 'score' },\n      style: {\n        stroke: '#52c41a',\n        strokeOpacity: 1,\n        lineWidth: 2,\n        lineDash: [8, 4],\n      },\n      labels: [\n        {\n          text: '整体平均分',\n          position: 'bottom',\n          fill: '#52c41a',\n          fontWeight: 'bold',\n          textAlign: 'center',\n          background: true,\n          backgroundFill: '#f6ffed',\n          backgroundOpacity: 0.9,\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:21,tocIndex:9}]},89271:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(40106);const t=[{value:"lineY",paraId:0,tocIndex:0},{value:"和",paraId:0,tocIndex:0},{value:"lineX",paraId:0,tocIndex:0},{value:"图形标记配置相似，",paraId:0,tocIndex:0},{value:"lineY",paraId:0,tocIndex:0},{value:"图形标记用于绘制垂直于 y 轴的辅助线，常用于绘制平均值或其他聚合数据辅助线。",paraId:0,tocIndex:0},{value:"lineY",paraId:1,tocIndex:1},{value:" 支持两种配置数据的方式：",paraId:1,tocIndex:1},{value:"当您需要绘制固定位置的水平线时，可以直接配置 ",paraId:2,tocIndex:2},{value:"data",paraId:2,tocIndex:2},{value:" 为数字数组。G2 会自动将数组转换为 ",paraId:2,tocIndex:2},{value:"y",paraId:2,tocIndex:2},{value:" 通道编码。",paraId:2,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  height: 200,\n  autoFit: true,\n  children: [\n    {\n      type: 'interval',\n      data: [\n        { year: '1951 年', sales: 38 },\n        { year: '1952 年', sales: 52 },\n        { year: '1956 年', sales: 61 },\n        { year: '1957 年', sales: 120 },\n        { year: '1958 年', sales: 48 },\n        { year: '1959 年', sales: 38 },\n      ],\n      encode: { x: 'year', y: 'sales' },\n    },\n    {\n      type: 'lineY',\n      data: [100, 59], // 自动转换为 encode: { y: [100, 59] }\n      style: {\n        stroke: (v) => {\n          if (v >= 60) {\n            return 'green';\n          } else {\n            return 'red';\n          }\n        },\n        lineWidth: 2,\n      },\n      labels: [\n        // 文本具体配置可以参考 mark text\n        {\n          text: (v) => (v >= 60 ? 'lineY 分割线1' : 'lineY 分割线2'),\n          position: 'top-right',\n          textBaseline: 'bottom',\n          fill: '#000',\n          fillOpacity: 0.45,\n          background: true,\n          backgroundFill: '#000',\n          backgroundOpacity: 0.15,\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:3,tocIndex:2},{value:"当您需要基于数据字段或配合数据变换时，应显式配置 ",paraId:4,tocIndex:3},{value:"encode",paraId:4,tocIndex:3},{value:" 通道。这种方式更灵活，支持数据字段映射和各种数据变换。",paraId:4,tocIndex:3},{value:"/**\n * A recreation of this demo: https://vega.github.io/vega-lite/examples/layer_precipitation_mean.html\n */\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n});\n\nchart\n  .interval()\n  .transform({ type: 'groupX', y: 'mean' })\n  .encode('x', (d) => new Date(d.date).getUTCMonth())\n  .encode('y', 'precipitation')\n  .scale('y', { tickCount: 5, domainMax: 6 })\n  .tooltip({ channel: 'y', valueFormatter: '.2f' });\n\nchart\n  .lineY()\n  .transform({ type: 'groupX', y: 'mean' }) // 计算平均值\n  .encode('y', 'precipitation') // 显式配置y通道\n  .style('stroke', '#F4664A')\n  .style('strokeOpacity', 1)\n  .style('lineWidth', 2)\n  .style('lineDash', [3, 3]);\n\nchart.render();\n",paraId:5,tocIndex:3},{value:"配置方式",paraId:6,tocIndex:4},{value:"适用场景",paraId:6,tocIndex:4},{value:"示例",paraId:6,tocIndex:4},{value:"自动转换",paraId:6,tocIndex:4},{value:"data: [value1, value2]",paraId:6,tocIndex:4},{value:"固定位置的辅助线",paraId:6,tocIndex:4},{value:"data: [50, 100]",paraId:6,tocIndex:4},{value:"✅ 自动转换为 ",paraId:6,tocIndex:4},{value:"encode.y",paraId:6,tocIndex:4},{value:"encode: { y: field }",paraId:6,tocIndex:4},{value:"基于数据字段或需要变换",paraId:6,tocIndex:4},{value:"encode('y', 'fieldName')",paraId:6,tocIndex:4},{value:"❌ 显式配置",paraId:6,tocIndex:4},{value:"重要说明：",paraId:7,tocIndex:4},{value:"当同时配置 ",paraId:8,tocIndex:4},{value:"data",paraId:8,tocIndex:4},{value:" 数组和 ",paraId:8,tocIndex:4},{value:"encode.y",paraId:8,tocIndex:4},{value:" 时，",paraId:8,tocIndex:4},{value:"encode.y",paraId:8,tocIndex:4},{value:" 优先级更高",paraId:8,tocIndex:4},{value:"data",paraId:8,tocIndex:4},{value:" 自动转换仅在数组元素为简单值（非对象）时生效",paraId:8,tocIndex:4},{value:"配合 ",paraId:8,tocIndex:4},{value:"transform",paraId:8,tocIndex:4},{value:" 进行数据聚合时，必须使用 ",paraId:8,tocIndex:4},{value:"encode",paraId:8,tocIndex:4},{value:" 方式",paraId:8,tocIndex:4},{value:"更多的案例，可以查看",paraId:9,tocIndex:4},{value:"图表示例 - 线标注",paraId:10,tocIndex:4},{value:"页面。",paraId:9,tocIndex:4},{value:"属性",paraId:11,tocIndex:5},{value:"描述",paraId:11,tocIndex:5},{value:"类型",paraId:11,tocIndex:5},{value:"默认值",paraId:11,tocIndex:5},{value:"必选",paraId:11,tocIndex:5},{value:"data",paraId:11,tocIndex:5},{value:"配置 ",paraId:11,tocIndex:5},{value:"lineY",paraId:11,tocIndex:5},{value:" 标记的数据，支持数字数组（会自动转换为 y 通道）或对象数组",paraId:11,tocIndex:5},{value:"Array",paraId:11,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"encode",paraId:11,tocIndex:5},{value:"配置 ",paraId:11,tocIndex:5},{value:"lineY",paraId:11,tocIndex:5},{value:" 标记的视觉通道，包括",paraId:11,tocIndex:5},{value:"y",paraId:11,tocIndex:5},{value:"、",paraId:11,tocIndex:5},{value:"color",paraId:11,tocIndex:5},{value:"等，用于指定视觉元素属性和数据之间的关系",paraId:11,tocIndex:5},{value:"encode",paraId:12,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"✓",paraId:11,tocIndex:5},{value:"style",paraId:11,tocIndex:5},{value:"配置 ",paraId:11,tocIndex:5},{value:"lineY",paraId:11,tocIndex:5},{value:" 标记的图形样式",paraId:11,tocIndex:5},{value:"style",paraId:13,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"配置 ",paraId:14,tocIndex:6},{value:"lineY",paraId:14,tocIndex:6},{value:" 标记的视觉通道。",paraId:14,tocIndex:6},{value:"属性",paraId:15,tocIndex:6},{value:"描述",paraId:15,tocIndex:6},{value:"类型",paraId:15,tocIndex:6},{value:"默认值",paraId:15,tocIndex:6},{value:"必选",paraId:15,tocIndex:6},{value:"y",paraId:15,tocIndex:6},{value:"绑定 ",paraId:15,tocIndex:6},{value:"lineY",paraId:15,tocIndex:6},{value:" 标记的 ",paraId:15,tocIndex:6},{value:"y",paraId:15,tocIndex:6},{value:" 属性通道。支持数据字段映射或配合 transform 计算聚合值（如平均值 mean、中位数 median）。",paraId:15,tocIndex:6},{value:"注意：当直接配置 ",paraId:15,tocIndex:6},{value:"data",paraId:15,tocIndex:6},{value:" 为数组时，会自动转换为 ",paraId:15,tocIndex:6},{value:"y",paraId:15,tocIndex:6},{value:" 通道，无需重复配置。",paraId:15,tocIndex:6},{value:"encode",paraId:16,tocIndex:6},{value:"-",paraId:15,tocIndex:6},{value:"✓",paraId:15,tocIndex:6},{value:"color",paraId:15,tocIndex:6},{value:"绑定 ",paraId:15,tocIndex:6},{value:"lineY",paraId:15,tocIndex:6},{value:" 标记的 ",paraId:15,tocIndex:6},{value:"color",paraId:15,tocIndex:6},{value:" 属性通道，如果将数据字段映射到颜色通道，会对数据进行分组，将数据拆分成多个不同颜色的区域",paraId:15,tocIndex:6},{value:"encode",paraId:17,tocIndex:6},{value:"-",paraId:15,tocIndex:6},{value:"属性",paraId:18,tocIndex:7},{value:"描述",paraId:18,tocIndex:7},{value:"类型",paraId:18,tocIndex:7},{value:"默认值",paraId:18,tocIndex:7},{value:"必选",paraId:18,tocIndex:7},{value:"stroke",paraId:18,tocIndex:7},{value:"图形的描边",paraId:18,tocIndex:7},{value:"string",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"Function<string>",paraId:18,tocIndex:7},{value:"-",paraId:18,tocIndex:7},{value:"strokeOpacity",paraId:18,tocIndex:7},{value:"描边透明度",paraId:18,tocIndex:7},{value:"number",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"Function<number>",paraId:18,tocIndex:7},{value:"-",paraId:18,tocIndex:7},{value:"lineWidth",paraId:18,tocIndex:7},{value:"图形描边的宽度",paraId:18,tocIndex:7},{value:"number",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"Function<number>",paraId:18,tocIndex:7},{value:"-",paraId:18,tocIndex:7},{value:"lineDash",paraId:18,tocIndex:7},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:18,tocIndex:7},{value:"[number,number]",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"Function<[number, number]>",paraId:18,tocIndex:7},{value:"-",paraId:18,tocIndex:7},{value:"opacity",paraId:18,tocIndex:7},{value:"图形的整体透明度",paraId:18,tocIndex:7},{value:"number",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"Function<number>",paraId:18,tocIndex:7},{value:"-",paraId:18,tocIndex:7},{value:"shadowColor",paraId:18,tocIndex:7},{value:"图形阴影颜色",paraId:18,tocIndex:7},{value:"string",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"Function<string>",paraId:18,tocIndex:7},{value:"-",paraId:18,tocIndex:7},{value:"shadowBlur",paraId:18,tocIndex:7},{value:"图形阴影的高斯模糊系数",paraId:18,tocIndex:7},{value:"number",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"Function<number>",paraId:18,tocIndex:7},{value:"-",paraId:18,tocIndex:7},{value:"shadowOffsetX",paraId:18,tocIndex:7},{value:"设置阴影距图形的水平距离",paraId:18,tocIndex:7},{value:"number",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"Function<number>",paraId:18,tocIndex:7},{value:"-",paraId:18,tocIndex:7},{value:"shadowOffsetY",paraId:18,tocIndex:7},{value:"设置阴影距图形的垂直距离",paraId:18,tocIndex:7},{value:"number",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"Function<number>",paraId:18,tocIndex:7},{value:"-",paraId:18,tocIndex:7},{value:"cursor",paraId:18,tocIndex:7},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:18,tocIndex:7},{value:"string",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"Function<string>",paraId:18,tocIndex:7},{value:"default",paraId:18,tocIndex:7},{value:"展示如何在同一图表中绘制多条不同样式的阈值线，常用于数据监控和预警系统。",paraId:19,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\n// 模拟时间序列数据\nconst data = Array.from({ length: 30 }, (_, i) => ({\n  day: i + 1,\n  value: 50 + Math.sin(i * 0.3) * 20 + Math.random() * 10,\n}));\n\nchart.options({\n  type: 'view',\n  data,\n  children: [\n    // 绘制主要的折线图\n    {\n      type: 'line',\n      encode: { x: 'day', y: 'value' },\n      style: { stroke: '#1890ff', lineWidth: 2 },\n    },\n    // 绘制数据点\n    {\n      type: 'point',\n      encode: { x: 'day', y: 'value' },\n      style: { fill: '#1890ff', r: 3 },\n    },\n    // 危险阈值线（红色）\n    {\n      type: 'lineY',\n      data: [75],\n      style: {\n        stroke: '#ff4d4f',\n        strokeOpacity: 0.8,\n        lineWidth: 2,\n        lineDash: [8, 4],\n      },\n      labels: [\n        {\n          text: '危险阈值',\n          position: 'top-right',\n          fill: '#ff4d4f',\n          fontWeight: 'bold',\n          background: true,\n          backgroundFill: '#fff',\n          backgroundOpacity: 0.9,\n        },\n      ],\n    },\n    // 警告阈值线（橙色）\n    {\n      type: 'lineY',\n      data: [65],\n      style: {\n        stroke: '#fa8c16',\n        strokeOpacity: 0.8,\n        lineWidth: 2,\n        lineDash: [5, 5],\n      },\n      labels: [\n        {\n          text: '警告阈值',\n          position: 'top-right',\n          fill: '#fa8c16',\n          fontWeight: 'bold',\n          background: true,\n          backgroundFill: '#fff',\n          backgroundOpacity: 0.9,\n        },\n      ],\n    },\n    // 正常阈值线（绿色）\n    {\n      type: 'lineY',\n      data: [35],\n      style: {\n        stroke: '#52c41a',\n        strokeOpacity: 0.8,\n        lineWidth: 2,\n        lineDash: [3, 3],\n      },\n      labels: [\n        {\n          text: '正常下限',\n          position: 'bottom-right',\n          fill: '#52c41a',\n          fontWeight: 'bold',\n          background: true,\n          backgroundFill: '#fff',\n          backgroundOpacity: 0.9,\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:20,tocIndex:9}]},65919:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(62907);const t=[{value:"link",paraId:0,tocIndex:0},{value:" 图形标记 虽然类似折线图 通过指定 ",paraId:0,tocIndex:0},{value:"x",paraId:0,tocIndex:0},{value:"，",paraId:0,tocIndex:0},{value:"y",paraId:0,tocIndex:0},{value:" 通道为长度为 2 的字段数组。获取两两对应的 (x,y) 的定位点，并连接对应的定位点，绘制带方向的线段(添加箭头)。",paraId:0,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'link',\n  height: 260,\n  autoFit: true,\n  data: [\n    { x1: 10, y1: 10, x2: 20, y2: 20, type: '1' },\n    { x1: 21, y1: 12, x2: 11, y2: 22, type: '1' },\n    { x1: 20, y1: 21, x2: 10, y2: 11, type: '2' },\n    { x1: 11, y1: 23, x2: 21, y2: 13, type: '2' },\n  ],\n  encode: { x: ['x1', 'x2'], y: ['y1', 'y2'], color: 'type' }, // link 标记 需要 x x1 y y1 通道, 从而达到两个点确定一条线或一条向量\n  style: { arrow: true, arrowSize: 6 }, // arrow 为箭头开关，箭头通常可以代表方向，这个是 link 和 line 标记的区别。\n  legend: false,\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例 - 连接图",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"必选",paraId:4,tocIndex:1},{value:"encode",paraId:4,tocIndex:1},{value:"配置 ",paraId:4,tocIndex:1},{value:"link",paraId:4,tocIndex:1},{value:" 标记的视觉通道，包括",paraId:4,tocIndex:1},{value:"x",paraId:4,tocIndex:1},{value:"、",paraId:4,tocIndex:1},{value:"y",paraId:4,tocIndex:1},{value:"、",paraId:4,tocIndex:1},{value:"color",paraId:4,tocIndex:1},{value:"、",paraId:4,tocIndex:1},{value:"shape",paraId:4,tocIndex:1},{value:"等，用于指定视觉元素属性和数据之间的关系",paraId:4,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"✓",paraId:4,tocIndex:1},{value:"style",paraId:4,tocIndex:1},{value:"配置 ",paraId:4,tocIndex:1},{value:"link",paraId:4,tocIndex:1},{value:" 标记的图形样式",paraId:4,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"配置 ",paraId:7,tocIndex:2},{value:"area",paraId:7,tocIndex:2},{value:" 标记的视觉通道。",paraId:7,tocIndex:2},{value:"属性",paraId:8,tocIndex:2},{value:"描述",paraId:8,tocIndex:2},{value:"类型",paraId:8,tocIndex:2},{value:"默认值",paraId:8,tocIndex:2},{value:"必选",paraId:8,tocIndex:2},{value:"x",paraId:8,tocIndex:2},{value:"绑定 ",paraId:8,tocIndex:2},{value:"link",paraId:8,tocIndex:2},{value:" 标记的 ",paraId:8,tocIndex:2},{value:"x",paraId:8,tocIndex:2},{value:" 属性通道，可以单独字符串代表 ",paraId:8,tocIndex:2},{value:"x",paraId:8,tocIndex:2},{value:" 通道，也可以直接通过 数组 的形式，直接为 ",paraId:8,tocIndex:2},{value:"x",paraId:8,tocIndex:2},{value:" 和 ",paraId:8,tocIndex:2},{value:"x1",paraId:8,tocIndex:2},{value:"通道",paraId:8,tocIndex:2},{value:"encode",paraId:9,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"✓",paraId:8,tocIndex:2},{value:"x1",paraId:8,tocIndex:2},{value:"绑定 ",paraId:8,tocIndex:2},{value:"link",paraId:8,tocIndex:2},{value:" 标记的 ",paraId:8,tocIndex:2},{value:"x1",paraId:8,tocIndex:2},{value:" 属性通道，为结束方向的标点 ",paraId:8,tocIndex:2},{value:"x",paraId:8,tocIndex:2},{value:" 数值。",paraId:8,tocIndex:2},{value:"encode",paraId:10,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"✓",paraId:8,tocIndex:2},{value:"y",paraId:8,tocIndex:2},{value:"绑定 ",paraId:8,tocIndex:2},{value:"link",paraId:8,tocIndex:2},{value:" 标记的 ",paraId:8,tocIndex:2},{value:"y",paraId:8,tocIndex:2},{value:" 属性通道，可以单独字符串代表 ",paraId:8,tocIndex:2},{value:"y",paraId:8,tocIndex:2},{value:" 通道，也可以直接通过 数组 的形式，直接为 ",paraId:8,tocIndex:2},{value:"y",paraId:8,tocIndex:2},{value:" 和 ",paraId:8,tocIndex:2},{value:"y1",paraId:8,tocIndex:2},{value:"通道",paraId:8,tocIndex:2},{value:"encode",paraId:11,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"✓",paraId:8,tocIndex:2},{value:"y1",paraId:8,tocIndex:2},{value:"绑定 ",paraId:8,tocIndex:2},{value:"link",paraId:8,tocIndex:2},{value:" 标记的 ",paraId:8,tocIndex:2},{value:"y1",paraId:8,tocIndex:2},{value:" 属性通道，为结束方向的标点 ",paraId:8,tocIndex:2},{value:"y",paraId:8,tocIndex:2},{value:" 数值。",paraId:8,tocIndex:2},{value:"encode",paraId:12,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"✓",paraId:8,tocIndex:2},{value:"color",paraId:8,tocIndex:2},{value:"绑定 ",paraId:8,tocIndex:2},{value:"link",paraId:8,tocIndex:2},{value:" 标记的 ",paraId:8,tocIndex:2},{value:"color",paraId:8,tocIndex:2},{value:" 属性通道，如果将数据字段映射到颜色通道，会对数据进行分组，将数据拆分成多个不同颜色的区域，可用来划分区域或呈现当前区域的数值",paraId:8,tocIndex:2},{value:"encode",paraId:13,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"shape",paraId:8,tocIndex:2},{value:"绑定 ",paraId:8,tocIndex:2},{value:"link",paraId:8,tocIndex:2},{value:" 标记的 ",paraId:8,tocIndex:2},{value:"shape",paraId:8,tocIndex:2},{value:" 属性通道",paraId:8,tocIndex:2},{value:"encode",paraId:14,tocIndex:2},{value:"link",paraId:8,tocIndex:2},{value:"link",paraId:15,tocIndex:3},{value:" 标记但视觉通道需要 ",paraId:15,tocIndex:3},{value:"x",paraId:15,tocIndex:3},{value:"、",paraId:15,tocIndex:3},{value:"y",paraId:15,tocIndex:3},{value:"、",paraId:15,tocIndex:3},{value:"x1",paraId:15,tocIndex:3},{value:"、",paraId:15,tocIndex:3},{value:"y1",paraId:15,tocIndex:3},{value:" 四个字段的值，支持的数据格式有以下两种：",paraId:15,tocIndex:3},{value:"x",paraId:16,tocIndex:3},{value:"、",paraId:16,tocIndex:3},{value:"y",paraId:16,tocIndex:3},{value:" 直接配置",paraId:16,tocIndex:3},{value:"{\n  type: 'link',\n  data: [\n    { x: 10, y: 10, x1: 20, y1: 20 },\n  ],\n  encode: { x: ['x','x1'], y: ['y','y1'] }\n}\n",paraId:17,tocIndex:3},{value:"x",paraId:18,tocIndex:3},{value:"、",paraId:18,tocIndex:3},{value:"y",paraId:18,tocIndex:3},{value:"、",paraId:18,tocIndex:3},{value:"x1",paraId:18,tocIndex:3},{value:"、",paraId:18,tocIndex:3},{value:"y1",paraId:18,tocIndex:3},{value:" 单独配置",paraId:18,tocIndex:3},{value:"{\n  type: 'link',\n  data: [\n    { x: 10, y: 10, x1: 20, y1: 20 },\n  ],\n  encode: { x: 'x', y: 'y', x1:'x1',y1:'y1' }\n}\n",paraId:19,tocIndex:3},{value:"color",paraId:20,tocIndex:4},{value:" 视觉通道影响 ",paraId:20,tocIndex:4},{value:"link",paraId:20,tocIndex:4},{value:" 图形标记。",paraId:20,tocIndex:4},{value:"link",paraId:20,tocIndex:4},{value:" 标记中单个区域仅能使用一种颜色（或者渐变色），但如果将数据字段映射到颜色通道，会对数据进行分组，将数据拆分成多个区域：",paraId:20,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'link',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antfincdn/SM13%24lHuYH/metros.json',\n  },\n  encode: {\n    x: ['POP_1980', 'POP_2015'],\n    y: ['R90_10_1980', 'R90_10_2015'],\n    color: (d) => d.R90_10_2015 - d.R90_10_1980, // color 为数值映射，会因为映射的数值而改变颜色。 当前代表长度，不同长度展示的颜色会成渐变展示\n  },\n  scale: { x: { type: 'log' } },\n  style: { arrow: true, arrowSize: 6 },\n  axis: { x: { labelFormatter: '~s', labelTransform: 'rotate(90)' } },\n  legend: false,\n  tooltip: { title: { channel: 'color', valueFormatter: '.1f' } },\n});\n\nchart.render();\n",paraId:21,tocIndex:4},{value:"link",paraId:22,tocIndex:5},{value:" 标记内置支持的形状如下：",paraId:22,tocIndex:5},{value:"形状",paraId:23,tocIndex:5},{value:"描述",paraId:23,tocIndex:5},{value:"示例",paraId:23,tocIndex:5},{value:"link",paraId:23,tocIndex:5},{value:"连接线|向量",paraId:23,tocIndex:5},{value:"arc",paraId:23,tocIndex:5},{value:"弧线.",paraId:23,tocIndex:5},{value:"smooth",paraId:23,tocIndex:5},{value:"贝塞尔曲线",paraId:23,tocIndex:5},{value:"vhv",paraId:23,tocIndex:5},{value:"直角折线",paraId:23,tocIndex:5},{value:"属性",paraId:24,tocIndex:6},{value:"描述",paraId:24,tocIndex:6},{value:"类型",paraId:24,tocIndex:6},{value:"默认值",paraId:24,tocIndex:6},{value:"必选",paraId:24,tocIndex:6},{value:"arrow",paraId:24,tocIndex:6},{value:"控制是否展示箭头。本质为线段并非图形，继承直线的所有属性。",paraId:24,tocIndex:6},{value:"boolean",paraId:24,tocIndex:6},{value:"false",paraId:24,tocIndex:6},{value:"arrowSize",paraId:24,tocIndex:6},{value:"箭头图标的大小，可以指定像素值、也可以指定箭头长度的相对值。此属性为箭头长度，宽度为 'lineWidth' 配置",paraId:24,tocIndex:6},{value:"string",paraId:24,tocIndex:6},{value:" | ",paraId:24,tocIndex:6},{value:"number",paraId:24,tocIndex:6},{value:"40%",paraId:24,tocIndex:6},{value:"stroke",paraId:24,tocIndex:6},{value:"图形的颜色",paraId:24,tocIndex:6},{value:"string",paraId:24,tocIndex:6},{value:" | ",paraId:24,tocIndex:6},{value:"Function<string>",paraId:24,tocIndex:6},{value:"-",paraId:24,tocIndex:6},{value:"strokeOpacity",paraId:24,tocIndex:6},{value:"图形透明度",paraId:24,tocIndex:6},{value:"number",paraId:24,tocIndex:6},{value:" | ",paraId:24,tocIndex:6},{value:"Function<number>",paraId:24,tocIndex:6},{value:"-",paraId:24,tocIndex:6},{value:"lineWidth",paraId:24,tocIndex:6},{value:"图形的宽度",paraId:24,tocIndex:6},{value:"number",paraId:24,tocIndex:6},{value:" | ",paraId:24,tocIndex:6},{value:"Function<number>",paraId:24,tocIndex:6},{value:"-",paraId:24,tocIndex:6},{value:"lineDash",paraId:24,tocIndex:6},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。 因为箭头同样为继承直线样式配置，最好不要在有箭头的时候配置这个样式",paraId:24,tocIndex:6},{value:"[number,number]",paraId:24,tocIndex:6},{value:" | ",paraId:24,tocIndex:6},{value:"Function<[number, number]>",paraId:24,tocIndex:6},{value:"-",paraId:24,tocIndex:6},{value:"opacity",paraId:24,tocIndex:6},{value:"图形的整体透明度",paraId:24,tocIndex:6},{value:"number",paraId:24,tocIndex:6},{value:" | ",paraId:24,tocIndex:6},{value:"Function<number>",paraId:24,tocIndex:6},{value:"-",paraId:24,tocIndex:6},{value:"shadowColor",paraId:24,tocIndex:6},{value:"图形阴影颜色",paraId:24,tocIndex:6},{value:"string",paraId:24,tocIndex:6},{value:" | ",paraId:24,tocIndex:6},{value:"Function<string>",paraId:24,tocIndex:6},{value:"-",paraId:24,tocIndex:6},{value:"shadowBlur",paraId:24,tocIndex:6},{value:"图形阴影的高斯模糊系数",paraId:24,tocIndex:6},{value:"number",paraId:24,tocIndex:6},{value:" | ",paraId:24,tocIndex:6},{value:"Function<number>",paraId:24,tocIndex:6},{value:"-",paraId:24,tocIndex:6},{value:"shadowOffsetX",paraId:24,tocIndex:6},{value:"设置阴影距图形的水平距离",paraId:24,tocIndex:6},{value:"number",paraId:24,tocIndex:6},{value:" | ",paraId:24,tocIndex:6},{value:"Function<number>",paraId:24,tocIndex:6},{value:"-",paraId:24,tocIndex:6},{value:"shadowOffsetY",paraId:24,tocIndex:6},{value:"设置阴影距图形的垂直距离",paraId:24,tocIndex:6},{value:"number",paraId:24,tocIndex:6},{value:" | ",paraId:24,tocIndex:6},{value:"Function<number>",paraId:24,tocIndex:6},{value:"-",paraId:24,tocIndex:6},{value:"cursor",paraId:24,tocIndex:6},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:24,tocIndex:6},{value:"string",paraId:24,tocIndex:6},{value:" | ",paraId:24,tocIndex:6},{value:"Function<string>",paraId:24,tocIndex:6},{value:"default",paraId:24,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'link',\n  height: 260,\n  autoFit: true,\n  data: [{ x1: 10, y1: 10, x2: 20, y2: 20 }],\n  encode: { x: ['x1', 'x2'], y: ['y1', 'y2'] },\n  style: {\n    arrow: true,\n    arrowSize: 6, // 箭头长度\n    lineWidth: 8, // 线宽\n    stroke: '#1f1aa1', // 颜色\n    opacity: 0.7,\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:25,tocIndex:6},{value:"怎么指定箭头图标的长度？",paraId:26,tocIndex:7},{value:"有两种指定箭头图标长度的方式，一种是通过填写像素值，比如 ",paraId:27,tocIndex:7},{value:"40",paraId:27,tocIndex:7},{value:"，来指定为固定长度；另外一种是通过指定一个百分比，比如 ",paraId:27,tocIndex:7},{value:"30%",paraId:27,tocIndex:7},{value:"，来指定参考箭头长度的相对长度。默认值为 ",paraId:27,tocIndex:7},{value:"40%",paraId:27,tocIndex:7},{value:"。如下示例：",paraId:27,tocIndex:7},{value:"chart\n  .link()\n  // ...\n  .style({\n    arrowSize: 40,\n    // arrowSize: '30%',\n  });\n",paraId:28,tocIndex:7}]},81856:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(60200);const t=[{value:"liquid",paraId:0,tocIndex:0},{value:" 图形标记可用于绘制各种 水波图（涟漪图或波形图）,通过模拟水面上波纹扩散的动态过程，从视觉上的波动传达信息或增强用户体验。常用于 UI 设计、数据可视化或动画效果中。",paraId:0,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  height: 300,\n  type: 'liquid',\n  data: 0.3, // [0, 1]\n  // 配置样式\n  style: {\n    outlineBorder: 4, // 外部边宽\n    outlineDistance: 8, // 水波运动时间\n    waveLength: 128, // 水波长度\n  },\n  // 配置坐标系\n  coordinate: {},\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例 - 水波图",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"必选",paraId:4,tocIndex:1},{value:"style",paraId:4,tocIndex:1},{value:"配置 ",paraId:4,tocIndex:1},{value:"liquid",paraId:4,tocIndex:1},{value:" 标记的图形样式",paraId:4,tocIndex:1},{value:"style",paraId:5,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"配置 ",paraId:6,tocIndex:2},{value:"liquid",paraId:6,tocIndex:2},{value:" 标记的样式。",paraId:6,tocIndex:2},{value:"属性",paraId:7,tocIndex:2},{value:"描述",paraId:7,tocIndex:2},{value:"类型",paraId:7,tocIndex:2},{value:"默认值",paraId:7,tocIndex:2},{value:"必选",paraId:7,tocIndex:2},{value:"shape",paraId:7,tocIndex:2},{value:"形状",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:"circle",paraId:7,tocIndex:2},{value:"stroke",paraId:7,tocIndex:2},{value:"边框颜色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"fill",paraId:7,tocIndex:2},{value:"水波颜色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"outlineBorder",paraId:7,tocIndex:2},{value:"边框宽度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:"2",paraId:7,tocIndex:2},{value:"outlineDistance",paraId:7,tocIndex:2},{value:"内间距",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:"0",paraId:7,tocIndex:2},{value:"waveLength",paraId:7,tocIndex:2},{value:"波长",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:"192",paraId:7,tocIndex:2},{value:"waveCount",paraId:7,tocIndex:2},{value:"波数",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:"3",paraId:7,tocIndex:2},{value:"backgroundFill",paraId:7,tocIndex:2},{value:"背景颜色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"contentText",paraId:7,tocIndex:2},{value:"文本内容",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"contentFill",paraId:7,tocIndex:2},{value:"文本颜色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"contentFontSize",paraId:7,tocIndex:2},{value:"文本大小",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'liquid',\n  data: 0.75,\n  style: {\n    fill: 'pink', // 水波颜色\n    stroke: 'red', // 描边颜色\n    backgroundFill: '#f5f5f5', // 背景颜色\n    // outline 为描边样式\n    outlineBorder: 10, // 外部边宽\n    outlineDistance: 10, // 水波运动时间\n    // wave为水波配置\n    waveLength: 188, // 水波长度\n    waveCount: 6, // 波数 会自动 从 1 ~ 0.2 分配透明度\n    // content 为中心文本配置\n    contentText: 'center text',\n    contentFill: '#000',\n    contentStroke: '#fff',\n    contentFontSize: 32,\n    contentLineWidth: 3,\n  },\n  // 配置坐标系\n  coordinate: {},\n});\n\nchart.render();\n",paraId:8,tocIndex:2},{value:"liquid",paraId:9,tocIndex:3},{value:" 标记内置支持的形状如下：",paraId:9,tocIndex:3},{value:"形状",paraId:10,tocIndex:3},{value:"描述",paraId:10,tocIndex:3},{value:"示例",paraId:10,tocIndex:3},{value:"rect",paraId:10,tocIndex:3},{value:"矩形",paraId:10,tocIndex:3},{value:"circle",paraId:10,tocIndex:3},{value:"圆形",paraId:10,tocIndex:3},{value:"pin",paraId:10,tocIndex:3},{value:"水滴",paraId:10,tocIndex:3},{value:"triangle",paraId:10,tocIndex:3},{value:"三角",paraId:10,tocIndex:3},{value:"如果需要自定义形状，可以通过自定义 shape 提供实现。 其中， 回调 ",paraId:11,tocIndex:3},{value:"(x, y, r, w, h) => string",paraId:11,tocIndex:3},{value:", 传入参数分别为 x y 中心点坐标， r 图表可画圆最大半径， w h 图表可画宽高，从而画出想要的形状，需要对 svg 或者 canvas 有一定理解。",paraId:11,tocIndex:3},{value:"尝试自己画一下：",paraId:12,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart\n  .liquid()\n  .data(0.3)\n  .style({\n    shape: (x, y, r) => {\n      const path = [];\n      const w = r * 2;\n\n      for (let i = 0; i < 5; i++) {\n        path.push([\n          i === 0 ? 'M' : 'L',\n          (Math.cos(((18 + i * 72) * Math.PI) / 180) * w) / 2 + x,\n          (-Math.sin(((18 + i * 72) * Math.PI) / 180) * w) / 2 + y,\n        ]);\n        path.push([\n          'L',\n          (Math.cos(((54 + i * 72) * Math.PI) / 180) * w) / 4 + x,\n          (-Math.sin(((54 + i * 72) * Math.PI) / 180) * w) / 4 + y,\n        ]);\n      }\n      path.push(['Z']);\n      return path;\n    },\n    outlineBorder: 4,\n    outlineDistance: 8,\n    waveLength: 128,\n  });\n\nchart.render();\n\n",paraId:13,tocIndex:3}]},76057:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(14038);const t=[{value:"在 G2 中",paraId:0},{value:"没有图表的概念",paraId:0},{value:"，而是把 ",paraId:0},{value:"标记（Mark）",paraId:0},{value:" 作为基本的视觉组成单元，任何一个图表都可以由一个或多个标记组合而成。",paraId:0},{value:"标记是 G2 绘图框架中最基础的图形单元，也是构成复杂图表的核心组成部分之一。它具有多样化的特性和强大的表现力，能够作为构建图表的“原子”组件被灵活运用。通过合理地组合、排列和定制标记，用户不仅可以满足常规图表绘制需求，还能创建高度个性化、复杂性较高的可视化作品。这种自由度使得标记在实现数据可视化的过程中具备广泛的应用空间，包括但不限于散点图、柱状图、饼图等基础图形，以及更加结构化或创新性的混合式图表。这种特性使得 G2 在绘图的灵活性和定制能力上展现出极大的优势。",paraId:1},{value:"正如上面所说，我们在一个图表中添加散点图的 Point 标记以及连接图的 Link 标记，便可以得到一个带有标注的点线连接图。",paraId:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 180,\n});\n\nchart.options({\n  type: 'view',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n    transform: [\n      {\n        type: 'map',\n        callback: (d) => ({\n          ...d,\n          body_mass_g: +d.body_mass_g,\n        }),\n      },\n    ],\n  },\n  children: [\n    // point 标记\n    {\n      type: 'point',\n      encode: { x: 'body_mass_g', y: 'species' },\n      style: { stroke: '#000' },\n      tooltip: { items: [{ channel: 'x' }] },\n    },\n    // link 标记\n    {\n      type: 'link',\n      encode: { x: 'body_mass_g', y: 'species' },\n      transform: [{ type: 'groupY', x: 'min', x1: 'max' }],\n      style: { stroke: '#000' },\n      tooltip: false,\n    },\n    // point 标记绘制中位线\n    {\n      type: 'point',\n      encode: { y: 'species', x: 'body_mass_g', shape: 'line', size: 12 },\n      transform: [{ type: 'groupY', x: 'median' }],\n      style: { stroke: 'red' },\n      tooltip: { items: [{ channel: 'x' }] },\n    },\n  ],\n});\n\nchart.render();\n",paraId:3},{value:"根据标记可以代表的数据维度来划分，可以分为：",paraId:4},{value:"零维，点是常见的零维几何标记，点仅有位置信息",paraId:5},{value:"一维，常见的一维几何标记有线",paraId:5},{value:"二维，二维平面",paraId:5},{value:"三维，常见的立方体、圆柱体都是三维的几何标记",paraId:5},{value:"标记的自由度与数据能够映射到图形的视觉通道 ",paraId:6},{value:"size（大小）",paraId:6},{value:" 相关，这个角度上来讲：",paraId:6},{value:"点可以映射两个数据字段字段到点的大小上（当然现实中我们仅仅映射一个）。",paraId:7},{value:"线可以映射一个数据字段字段到线的宽度。",paraId:7},{value:"柱状图的矩形可以映射一个数据字段到宽度上。",paraId:7},{value:"封闭的多边形无法使用数据映射到大小。",paraId:7},{value:"标记的表现形式与数据能够映射到图形的视觉通道 ",paraId:8},{value:"color（颜色）",paraId:8},{value:" 相关，这个角度上来讲：",paraId:8},{value:"表现形式为封闭的有填充色的图形。例如 point 标记的 ",paraId:9},{value:"point",paraId:9},{value:" 形状、interval 标记的 ",paraId:9},{value:"rect",paraId:9},{value:" 形状等，颜色通道一般表现在标记的填充颜色 ",paraId:9},{value:"fill",paraId:9},{value:" 上。",paraId:9},{value:"表现形式为线和空心的图形。例如 line 标记的所有形状、interval 标记的 ",paraId:9},{value:"hollow",paraId:9},{value:" 形状等，颜色通道一般表现在标记的线的颜色 ",paraId:9},{value:"stroke",paraId:9},{value:" 上。",paraId:9},{value:"表现形式为文字。例如 text 标记、wordCloud 标记等，颜色通道一般表现在标记的文字颜色 ",paraId:9},{value:"fill",paraId:9},{value:" 上。",paraId:9},{value:"目前 G2 支持的内置标记如下：",paraId:10},{value:"type",paraId:11},{value:"描述",paraId:11},{value:"属性",paraId:11},{value:"示例",paraId:11},{value:"area",paraId:11},{value:"用面积填充展示数据趋势，适合展示堆积关系",paraId:11},{value:"area",paraId:12},{value:" ",paraId:11},{value:" ",paraId:11},{value:"box",paraId:11},{value:"基础箱线图，展示数据分布和异常值",paraId:11},{value:"box",paraId:13},{value:"boxplot",paraId:11},{value:"带聚合计算的箱线图，自动计算分位数",paraId:11},{value:"boxplot",paraId:14},{value:"cell",paraId:11},{value:"将空间划分为方块进行可视化，常用于日历图、热力图",paraId:11},{value:"cell",paraId:15},{value:"chord",paraId:11},{value:"展示实体间关系强度的弦图",paraId:11},{value:"chord",paraId:16},{value:"density",paraId:11},{value:"核密度估计图，常用于小提琴图",paraId:11},{value:"density",paraId:17},{value:"gauge",paraId:11},{value:"仪表盘图表，展示进度指标",paraId:11},{value:"gauge",paraId:18},{value:"heatmap",paraId:11},{value:"二维密度分布图，用颜色编码数据密度",paraId:11},{value:"heatmap",paraId:19},{value:"image",paraId:11},{value:"在指定位置渲染图像",paraId:11},{value:"image",paraId:20},{value:"interval",paraId:11},{value:"基础柱状图/条形图，通过坐标系变换可生成饼图",paraId:11},{value:"interval",paraId:21},{value:" ",paraId:11},{value:" ",paraId:11},{value:" ",paraId:11},{value:"line",paraId:11},{value:"折线图，支持平滑曲线和阶梯线",paraId:11},{value:"line",paraId:22},{value:" ",paraId:11},{value:" ",paraId:11},{value:" ",paraId:11},{value:" ",paraId:11},{value:"lineX",paraId:11},{value:"垂直辅助线，常用于标注特定值",paraId:11},{value:"lineX",paraId:23},{value:"lineY",paraId:11},{value:"水平辅助线，常用于标注阈值",paraId:11},{value:"lineY",paraId:24},{value:"link",paraId:11},{value:"带方向箭头标记，展示节点间关系",paraId:11},{value:"link",paraId:25},{value:"liquid",paraId:11},{value:"水波图，展示百分比进度",paraId:11},{value:"liquid",paraId:26},{value:"point",paraId:11},{value:"散点图，通过大小/颜色编码多维度数据",paraId:11},{value:"point",paraId:27},{value:"polygon",paraId:11},{value:"多边形标记，常配合布局算法使用",paraId:11},{value:"polygon",paraId:28},{value:"range",paraId:11},{value:"矩形区域标记，用于高亮特定区间",paraId:11},{value:"range",paraId:29},{value:"rangeX",paraId:11},{value:"垂直方向区域标记",paraId:11},{value:"rangeX",paraId:30},{value:"rangeY",paraId:11},{value:"水平方向区域标记",paraId:11},{value:"rangeY",paraId:31},{value:"rect",paraId:11},{value:"基础矩形标记，用于直方图/矩形树图",paraId:11},{value:"rect",paraId:32},{value:"shape",paraId:11},{value:"完全自定义图形标记",paraId:11},{value:"shape",paraId:33},{value:"text",paraId:11},{value:"数据标签标记，支持富文本格式",paraId:11},{value:"text",paraId:34},{value:"vector",paraId:11},{value:"向量场标记，展示方向/强度双维度数据",paraId:11},{value:"vector",paraId:35},{value:"wordCloud",paraId:11},{value:"词云图，通过文字大小编码词频",paraId:11},{value:"wordCloud",paraId:36},{value:"每一个图形标记都是独立的存在，通过 ",paraId:37,tocIndex:0},{value:"type",paraId:37,tocIndex:0},{value:' 属性指定标记类型。标记是 G2 可视化体系的核心原子单位，也是视图树的叶子节点，作为 G2 的"一等公民"，其核心构成包含以下概念：',paraId:37,tocIndex:0},{value:"数据相关",paraId:38,tocIndex:0},{value:"data",paraId:39,tocIndex:0},{value:" 可视化原始数据源，支持多种数据格式和动态更新机制。数据通过编码映射到图形属性空间",paraId:40,tocIndex:0},{value:"encode",paraId:41,tocIndex:0},{value:" 数据到图形属性的编码通道。例如将身高映射到 x 轴，体重映射到 y 轴，性别映射到颜色通道",paraId:40,tocIndex:0},{value:"scale",paraId:42,tocIndex:0},{value:" 控制数据到视觉通道的映射规则。包括连续型、分类型、时间型等多种度量类型",paraId:40,tocIndex:0},{value:"图形生成",paraId:43,tocIndex:0},{value:"transform",paraId:44,tocIndex:0},{value:" 数据转换。支持数据堆叠(stack)、分组(dodge)、扰动(jitter)、对称(symmetric)等调整方法，解决图形重叠问题",paraId:45,tocIndex:0},{value:"coordinate",paraId:46,tocIndex:0},{value:" 坐标系变换。支持笛卡尔坐标、极坐标、螺旋坐标等，同一几何标记在不同坐标系下呈现不同形态",paraId:45,tocIndex:0},{value:"视觉表现",paraId:47,tocIndex:0},{value:"style",paraId:48,tocIndex:0},{value:" 图形元素的视觉样式。支持配置填充色、描边、透明度等属性",paraId:49,tocIndex:0},{value:"viewStyle",paraId:50,tocIndex:0},{value:" 视图容器的背景、边距等样式配置",paraId:49,tocIndex:0},{value:"交互动态",paraId:51,tocIndex:0},{value:"animate",paraId:52,tocIndex:0},{value:" 控制三类动画：\nenter：新增元素动画\nupdate：数据更新动画\nexit：元素销毁动画",paraId:53,tocIndex:0},{value:"state",paraId:54,tocIndex:0},{value:" 定义元素在不同交互状态（active/inactive/selected/unselected）下的样式变化",paraId:53,tocIndex:0},{value:"图表组件",paraId:55,tocIndex:0},{value:"title",paraId:56,tocIndex:0},{value:" 图表标题。支持配置标题和副标题",paraId:57,tocIndex:0},{value:"label",paraId:58,tocIndex:0},{value:" 数据标签系统。支持防重叠布局、自定义内容、连接线等特性，适配不同标记类型",paraId:57,tocIndex:0},{value:"axis",paraId:59,tocIndex:0},{value:" 坐标轴。支持刻度、网格线、标签的自定义配置",paraId:57,tocIndex:0},{value:"legend",paraId:60,tocIndex:0},{value:" 图例。支持连续型/分类型图例交互",paraId:57,tocIndex:0},{value:"tooltip",paraId:61,tocIndex:0},{value:" 提示信息。支持字段映射、格式化、自定义内容",paraId:57,tocIndex:0},{value:"scrollbar",paraId:62,tocIndex:0},{value:" 滚动条组件。滚动条默认都是关闭的。解决图表信息过于密集而无法完全展示的问题。",paraId:57,tocIndex:0},{value:"slider",paraId:63,tocIndex:0},{value:" 缩略轴组件。可以用于过滤数据，让用户在数据量较大的情况下一次只用关注局部的数据，是一种辅助看数据的组件",paraId:57,tocIndex:0},{value:"扩展控制",paraId:64,tocIndex:0},{value:"theme",paraId:65,tocIndex:0},{value:" 主题配置系统。可修改默认颜色板、字体、组件样式等视觉规范，支持主题切换",paraId:66,tocIndex:0},{value:"interaction",paraId:67,tocIndex:0},{value:" 交互行为库。内置元素选取、视图缩放、提示联动等交互模式",paraId:66,tocIndex:0},{value:"({\n  type: 'mark',\n  data: [],\n  encode: {},\n  scale: {},\n  transform: [],\n  coordinate: {},\n  style: {},\n  viewStyle: {},\n  animate: {},\n  state: {},\n  label: {},\n  title: {},\n  axis: {},\n  legend: {},\n  tooltip: {},\n  scrollbar: {},\n  slider: {},\n  interaction: {},\n  theme: {},\n});\n",paraId:68,tocIndex:0},{value:"标记可以作为顶层的类型如下声明：",paraId:69,tocIndex:1},{value:"({\n  type: 'interval',\n  encode: {\n    x: 'name',\n    y: 'value',\n  },\n});\n",paraId:70,tocIndex:1},{value:"也可以放在 View 里面添加多个标记到视图中：",paraId:71,tocIndex:1},{value:"({\n  type: 'view',\n  children: [{ type: 'line' }, { type: 'point' }],\n});\n",paraId:72,tocIndex:1},{value:"G2 中的标记具有许多特性，包括模板化、可叠加、可复合等。合理地运用这些特性，可以快速定义和使用多种图形样式，将多个标记组合展现更丰富的图形效果。这些灵活且高度定制的特性，使标记能够满足从基础图表到复杂可视化的多层次需求。",paraId:73,tocIndex:2},{value:"每个内置标记都是一个图形模版，会生成一系列",paraId:74,tocIndex:3},{value:"数据驱动",paraId:74,tocIndex:3},{value:"的图形，其中每个图形对应一个或者多个",paraId:74,tocIndex:3},{value:"数据项（Data Item）",paraId:74,tocIndex:3},{value:"。比如下面的散点图里只有一个 Point 标记，而这个标记生成了多个圆，每个圆对应一个数据项。",paraId:74,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  },\n  encode: { x: 'height', y: 'weight', color: 'gender' },\n});\n\nchart.render();\n",paraId:75,tocIndex:3},{value:"而在下面的折线图中，一条线对应多个数据项。",paraId:76,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  width: 900,\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  },\n  encode: { x: 'date', y: 'close' },\n});\n\nchart.render();\n",paraId:77,tocIndex:3},{value:"G2 的标记是可以叠加的，换句话说：可以在一个视图里面添加多个标记，丰富图表展示效果。",paraId:78,tocIndex:4},{value:"下面的例子中给图表添加了 line 和 point 两个标记：",paraId:79,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  children: [\n    {\n      type: 'line',\n      encode: { x: 'year', y: 'value' },\n    },\n    {\n      type: 'point',\n      encode: { x: 'year', y: 'value' },\n      tooltip: false, // 如果不希望展示某个标记的tooltip，可以单独关闭\n    },\n  ],\n});\nchart.render();\n",paraId:80,tocIndex:4},{value:"当然，我们也可以结合更多的标记绘制一个具有复杂图形意义的区间曲线面积图。",paraId:81,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/range-spline-area.json',\n    transform: [\n      {\n        type: 'map',\n        callback: ([x, low, high, v2, v3]) => ({\n          x,\n          low,\n          high,\n          v2,\n          v3,\n        }),\n      },\n    ],\n  },\n  scale: { x: { type: 'linear', tickCount: 10 } },\n  axis: { y: { title: false } },\n  children: [\n    {\n      type: 'area',\n      encode: { x: 'x', y: ['low', 'high'], shape: 'smooth' },\n      style: { fillOpacity: 0.65, fill: '#64b5f6', lineWidth: 1 },\n    },\n    {\n      type: 'point',\n      encode: { x: 'x', y: 'v2', size: 2, shape: 'point' },\n      tooltip: { items: ['v2'] },\n    },\n    {\n      type: 'line',\n      encode: { x: 'x', y: 'v3', color: '#FF6B3B', shape: 'smooth' },\n    },\n  ],\n});\nchart.render();\n",paraId:82,tocIndex:4},{value:"G2 里面的标记可以通过一种机制复合成一个标记，然后使用，比如上面的点线图：",paraId:83,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\n// 定义复合 Mark\nfunction PointLine({ encode, data } = {}) {\n  return [\n    { type: 'line', data, encode },\n    { type: 'point', data, encode },\n  ];\n}\n\nconst data = [\n  { year: '1991', value: 3 },\n  { year: '1992', value: 4 },\n  { year: '1993', value: 3.5 },\n  { year: '1994', value: 5 },\n  { year: '1995', value: 4.9 },\n  { year: '1996', value: 6 },\n  { year: '1997', value: 7 },\n  { year: '1998', value: 9 },\n  { year: '1999', value: 13 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// Options 使用复合 Mark\nchart.mark(PointLine).data(data).encode('x', 'year').encode('y', 'value');\n\n// Spec 使用复合 Mark\nchart.options({\n  type: PointLine,\n  data,\n  encode: { x: 'year', y: 'value' },\n});\n\nchart.render();\n",paraId:84,tocIndex:5},{value:"标记可复合的特性提供了一种简单却强大的扩展 G2 能力的方式，G2 内部也是使用这个机制实现了一些比较复杂的标记，比如桑基图：用两个 Polygon 标记进行复合。",paraId:85,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 900,\n  height: 600,\n});\n\n// Sankey 标记\nchart.options({\n  type: 'sankey',\n  layout: { nodeAlign: 'center', nodePadding: 0.03 },\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/energy.json',\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => ({\n          links: data,\n        }),\n      },\n    ],\n  },\n  style: {\n    labelSpacing: 3,\n    labelFontWeight: 'bold',\n    nodeStrokeWidth: 1.2,\n    linkFillOpacity: 0.4,\n  },\n});\n\nchart.render();\n",paraId:86,tocIndex:5},{value:"G2 的标记支持多种 ",paraId:87,tocIndex:6},{value:"转换（Transform）",paraId:88,tocIndex:6},{value:" ，通过对标记的几何形状、样式或空间布局进行灵活调整，实现丰富的视觉表现效果。这些转换不仅可以用于基础图形的变换，如分组、堆叠、分箱等，还能与数据驱动的动态调整结合，以适应复杂的可视化场景需求。通过简单的配置，用户可以在图表中实现数据与视觉元素之间的直观映射，提升图表的表现力和可读性。",paraId:87,tocIndex:6},{value:"以下是一个经过 ",paraId:89,tocIndex:6},{value:"binX",paraId:90,tocIndex:6},{value:" 和 ",paraId:89,tocIndex:6},{value:"stackY",paraId:91,tocIndex:6},{value:" 转换后的颜色分类直方图。",paraId:89,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'rect',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n  },\n  encode: { x: 'weight', color: 'sex' },\n  transform: [\n    { type: 'binX', y: 'count' },\n    { type: 'stackY', orderBy: 'series' },\n  ],\n  style: { inset: 0.5 },\n});\n\nchart.render();\n",paraId:92,tocIndex:6},{value:"通过配置多种转换，我们可以得到特定表现形式的复杂图表，以下是一个经过 ",paraId:93,tocIndex:6},{value:"normalizeY",paraId:94,tocIndex:6},{value:" 和 ",paraId:93,tocIndex:6},{value:"stackY",paraId:95,tocIndex:6},{value:" 等多个转换后得到的聚合归一化堆叠条形图。",paraId:93,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/87b2ff47-2a33-4509-869c-dae4cdd81163.csv',\n    transform: [{ type: 'filter', callback: (d) => d.year === 2000 }],\n  },\n  encode: { x: 'age', y: 'people', color: 'sex' },\n  transform: [\n    { type: 'groupX', y: 'sum' },\n    { type: 'stackY' },\n    { type: 'normalizeY' },\n  ],\n  scale: { color: { type: 'ordinal', range: ['#ca8861', '#675193'] } },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  axis: { y: { labelFormatter: '.0%' } },\n  labels: [{ text: 'people', position: 'inside', fill: 'white' }],\n  tooltip: { items: [{ channel: 'y', valueFormatter: '.0%' }] },\n});\n\nchart.render();\n",paraId:96,tocIndex:6},{value:"标注（Annotation）",paraId:97,tocIndex:7},{value:" 是用于在可视化图表中对需要重点关注区域或信息进行说明与强调的图形元素。在 G2 5.0 中，并未单独提供专门的标注组件，而是通过灵活配置标记来实现标注功能。换言之，标注实际上是一种标记表达形式，部分标记（如 Text、Image 等）可被用于标注的场景。这种设计方式统一了标记与标注的使用逻辑，赋予用户更高的自由度与灵活性，从而能够轻松满足多种标注需求。",paraId:97,tocIndex:7},{value:"既然标注也是一种标记，那么它也可以执行转换。比如下面的 ",paraId:98,tocIndex:8},{value:"Select",paraId:99,tocIndex:8},{value:" 转换。",paraId:98,tocIndex:8},{value:"Select 标记转换提供了从一组图形中根据指定通道和 selector 选择数据的能力。比如在下面的例子中，标注出了每个大陆 Continent 中，GDP 最大的国家。",paraId:100,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/1ecf85d2-8279-46a1-898d-d2e1814617f9.json',\n  },\n  children: [\n    {\n      type: 'point',\n      encode: { x: 'GDP', y: 'LifeExpectancy', color: 'Continent' },\n    },\n    {\n      type: 'text',\n      encode: {\n        text: 'Country',\n        x: 'GDP',\n        y: 'LifeExpectancy',\n        series: 'Continent',\n      },\n      // 将图形按照 series 分组，也就是 Continent\n      // 通过 x 通道选择，选择其中最大的，也就是 GDP 最大的\n      transform: [{ type: 'select', channel: 'x', selector: 'max' }],\n      style: { textAlign: 'end' },\n    },\n  ],\n});\n\nchart.render();\n",paraId:101,tocIndex:8},{value:"对于不需要分组的简单的文本标记，使用 ",paraId:102,tocIndex:8},{value:"数据标签（Label）",paraId:103,tocIndex:8},{value:" 就可以，否则可以考虑上面的方式。",paraId:102,tocIndex:8},{value:"在图形语法中，标注的核心在于准确定位至适当的位置，以便有效传达关键信息。在 G2 中，标注的定位支持以下三种方式：",paraId:104,tocIndex:9},{value:"数据驱动的定位",paraId:105,tocIndex:9},{value:" ：基于数据值，将标注绑定到具体的图表数据点或数据范围之上。此方式能够动态适应数据变动，例如在数据更新或动画交互时，标注位置会随之调整。",paraId:105,tocIndex:9},{value:"绝对定位",paraId:106,tocIndex:9},{value:" ：通过固定的像素坐标将标注放置在画布上的特定位置，与数据无直接关联。此方式适用于添加标题、说明或其他与数据逻辑无关的标注内容。",paraId:106,tocIndex:9},{value:"相对定位",paraId:107,tocIndex:9},{value:" ：以坐标系或图形区域为参考，通过百分比或相对位置参数定义标注的位置。此方式适合在对图表整体进行强调或标注区域时提供灵活的布局。",paraId:107,tocIndex:9},{value:"在 G2 中可以通过 ",paraId:108,tocIndex:10},{value:"data",paraId:108,tocIndex:10},{value:" 去指定数据驱动的定位，比如下面的例子中希望标注每天糖和脂肪的安全摄入量，就可以如下实现。",paraId:108,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  children: [\n    {\n      type: 'point',\n      data: [\n        { x: 95, y: 95, z: 13.8, name: 'BE', country: 'Belgium' },\n        { x: 86.5, y: 102.9, z: 14.7, name: 'DE', country: 'Germany' },\n        { x: 80.8, y: 91.5, z: 15.8, name: 'FI', country: 'Finland' },\n        { x: 80.4, y: 102.5, z: 12, name: 'NL', country: 'Netherlands' },\n        { x: 80.3, y: 86.1, z: 11.8, name: 'SE', country: 'Sweden' },\n        { x: 78.4, y: 70.1, z: 16.6, name: 'ES', country: 'Spain' },\n        { x: 74.2, y: 68.5, z: 14.5, name: 'FR', country: 'France' },\n        { x: 73.5, y: 83.1, z: 10, name: 'NO', country: 'Norway' },\n        { x: 71, y: 93.2, z: 24.7, name: 'UK', country: 'United Kingdom' },\n        { x: 69.2, y: 57.6, z: 10.4, name: 'IT', country: 'Italy' },\n        { x: 68.6, y: 20, z: 16, name: 'RU', country: 'Russia' },\n        { x: 65.5, y: 126.4, z: 35.3, name: 'US', country: 'United States' },\n        { x: 65.4, y: 50.8, z: 28.5, name: 'HU', country: 'Hungary' },\n        { x: 63.4, y: 51.8, z: 15.4, name: 'PT', country: 'Portugal' },\n        { x: 64, y: 82.9, z: 31.3, name: 'NZ', country: 'New Zealand' },\n      ],\n      encode: { x: 'x', y: 'y', size: 'z', shape: 'point' },\n      scale: {\n        x: { nice: true },\n        y: { nice: true, domainMax: 165, zero: true },\n        size: { range: [10, 40] },\n      },\n      style: { stroke: '#1890ff', fillOpacity: 0.3, fill: '#1890ff' },\n      legend: false,\n      labels: [\n        { text: 'name', position: 'inside', fill: '#1890ff', stroke: '#fff' },\n      ],\n    },\n    {\n      type: 'lineY',\n      data: [50],\n      style: { stroke: '#000', strokeOpacity: 0.45, lineDash: [3, 3] },\n      labels: [\n        {\n          text: 'Safe sugar intake 50g/day',\n          position: 'right',\n          textBaseline: 'bottom',\n          fill: '#000',\n          fillOpacity: 0.45,\n          background: true,\n          backgroundFill: '#000',\n          backgroundOpacity: 0.15,\n        },\n      ],\n    },\n    {\n      type: 'lineX',\n      data: [65],\n      style: { stroke: '#000', strokeOpacity: 0.45, lineDash: [3, 3] },\n      labels: [\n        {\n          text: 'Safe fat intake 65g/day',\n          position: 'top-left',\n          textBaseline: 'bottom',\n          fill: '#000',\n          fillOpacity: 0.45,\n          background: true,\n          backgroundFill: '#000',\n          backgroundOpacity: 0.15,\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:109,tocIndex:10},{value:"除了数据驱动的定位，G2 也提供了非数据驱动的定位方式。通过 ",paraId:110,tocIndex:10},{value:"style",paraId:110,tocIndex:10},{value:" 去指定 x 和 y 属性，x 和 y 拥有下面两种类型。分别对应标注的 ",paraId:110,tocIndex:10},{value:"绝对定位",paraId:110,tocIndex:10},{value:" 和 ",paraId:110,tocIndex:10},{value:"相对定位",paraId:110,tocIndex:10},{value:" 。",paraId:110,tocIndex:10},{value:"x 和 y 为数字",paraId:111,tocIndex:11},{value:"：像素为单位的坐标。",paraId:111,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  children: [\n    {\n      type: 'interval',\n      data: [\n        { genre: 'Sports', sold: 275 },\n        { genre: 'Strategy', sold: 115 },\n        { genre: 'Action', sold: 120 },\n        { genre: 'Shooter', sold: 350 },\n        { genre: 'Other', sold: 150 },\n      ],\n      encode: { y: 'sold', color: 'genre' },\n      transform: [{ type: 'stackY' }],\n      coordinate: { type: 'theta', innerRadius: 0.5 },\n    },\n    {\n      type: 'text',\n      style: {\n        x: 290, // 配置具体像素坐标\n        y: 200,\n        text: 'hello',\n        textAlign: 'center',\n        fontSize: 60,\n        textBaseline: 'middle',\n      },\n    },\n  ],\n});\nchart.render();\n",paraId:112,tocIndex:11},{value:"x 和 y 为百分比",paraId:113,tocIndex:12},{value:"：内容区域的百分比。",paraId:113,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  children: [\n    {\n      type: 'interval',\n      data: [\n        { genre: 'Sports', sold: 275 },\n        { genre: 'Strategy', sold: 115 },\n        { genre: 'Action', sold: 120 },\n        { genre: 'Shooter', sold: 350 },\n        { genre: 'Other', sold: 150 },\n      ],\n      encode: { y: 'sold', color: 'genre' },\n      transform: [{ type: 'stackY' }],\n      coordinate: { type: 'theta', innerRadius: 0.5 },\n    },\n    {\n      type: 'text',\n      style: {\n        x: '50%', // 配置百分比坐标\n        y: '50%',\n        text: 'hello',\n        textAlign: 'center',\n        fontSize: 60,\n        textBaseline: 'middle',\n      },\n    },\n  ],\n});\nchart.render();\n",paraId:114,tocIndex:12},{value:"如何自定义标记的形状？",paraId:115,tocIndex:13},{value:"每一个标记都可以自定义形状，形状决定了标记最后的展现形式。自定义形状主要分为三步：",paraId:116,tocIndex:13},{value:"定义形状组件。",paraId:117,tocIndex:13},{value:"注册形状。",paraId:117,tocIndex:13},{value:"使用形状。",paraId:117,tocIndex:13},{value:"首先我们来看看如何定义形状组件。一个形状组件是一个函数，该函数接受图形的样式 ",paraId:118,tocIndex:13},{value:"style",paraId:118,tocIndex:13},{value:" 和上下文 ",paraId:118,tocIndex:13},{value:"context",paraId:118,tocIndex:13},{value:"，返回一个绘制函数 ",paraId:118,tocIndex:13},{value:"render",paraId:118,tocIndex:13},{value:" 。其中 ",paraId:118,tocIndex:13},{value:"style",paraId:118,tocIndex:13},{value:" 是通过 ",paraId:118,tocIndex:13},{value:"mark.style",paraId:118,tocIndex:13},{value:" 指定的经过处理的选项，",paraId:118,tocIndex:13},{value:"context",paraId:118,tocIndex:13},{value:" 包含了 ",paraId:118,tocIndex:13},{value:"@antv/g",paraId:118,tocIndex:13},{value:" 创建图形的 ",paraId:118,tocIndex:13},{value:"document",paraId:118,tocIndex:13},{value:" 。",paraId:118,tocIndex:13},{value:"返回的 ",paraId:119,tocIndex:13},{value:"render",paraId:119,tocIndex:13},{value:" 函数接受图形的控制点 ",paraId:119,tocIndex:13},{value:"P",paraId:119,tocIndex:13},{value:"，映射值 ",paraId:119,tocIndex:13},{value:"value",paraId:119,tocIndex:13},{value:" 和默认值 ",paraId:119,tocIndex:13},{value:"defaults",paraId:119,tocIndex:13},{value:"，返回 @antv/g 的图形。其中 ",paraId:119,tocIndex:13},{value:"P",paraId:119,tocIndex:13},{value:" 是一系列画布坐标构成的数组，",paraId:119,tocIndex:13},{value:"value",paraId:119,tocIndex:13},{value:" 是通过 ",paraId:119,tocIndex:13},{value:"mark.encode",paraId:119,tocIndex:13},{value:" 处理后的值，",paraId:119,tocIndex:13},{value:"defaults",paraId:119,tocIndex:13},{value:" 是主题中 ",paraId:119,tocIndex:13},{value:"theme.mark.shape",paraId:119,tocIndex:13},{value:" 指定的值。一个形状组件的定义大概如下：",paraId:119,tocIndex:13},{value:"function ShapeTriangle(style, context) {\n  const { document } = context;\n  return (P, value, defaults) => {\n    return document.createElement('rect', {\n      //...\n    });\n  };\n}\n",paraId:120,tocIndex:13},{value:"接下来就是注册形状，通过调用 ",paraId:121,tocIndex:13},{value:"G2.register('shape.${mark}.${shape}', Shape)",paraId:121,tocIndex:13},{value:" 来完成注册该形状。其中 ",paraId:121,tocIndex:13},{value:"mark",paraId:121,tocIndex:13},{value:" 是标记的名字，",paraId:121,tocIndex:13},{value:"shape",paraId:121,tocIndex:13},{value:" 是形状的名字，",paraId:121,tocIndex:13},{value:"Shape",paraId:121,tocIndex:13},{value:" 是定义好的形状组件。比如给 Interval 标记注册一个三角形的形状：",paraId:121,tocIndex:13},{value:"import { register } from '@antv/g2';\n\nregister('shape.interval.triangle', ShapeTriangle);\n",paraId:122,tocIndex:13},{value:"最后就是使用该形状了，可以通过 ",paraId:123,tocIndex:13},{value:"mark.encode",paraId:123,tocIndex:13},{value:" 指定，也可以通过 ",paraId:123,tocIndex:13},{value:"mark.style",paraId:123,tocIndex:13},{value:" 指定.",paraId:123,tocIndex:13},{value:"({\n  type: 'interval',\n  encode: { shape: 'triangle' },\n  // 或者\n  style: { shape: 'triangle' },\n});\n",paraId:124,tocIndex:13},{value:"下面是一个完整的例子，展示了如何自定义形状。",paraId:125,tocIndex:13},{value:"import { register, Chart } from '@antv/g2';\n\n// 定义图形组件\nfunction ShapeTriangle(style, context) {\n  const { document } = context;\n  return (P, value, defaults) => {\n    const { color: defaultColor } = defaults;\n    const [p0, p1, p2, p3] = P;\n    const pm = [(p0[0] + p1[0]) / 2, p0[1]];\n    const { color = defaultColor } = value;\n    return document.createElement('polygon', {\n      style: {\n        ...style,\n        fill: color,\n        points: [pm, p2, p3],\n      },\n    });\n  };\n}\n\n// 注册该三角形\nregister('shape.interval.triangle', ShapeTriangle);\n\n// 初始化图表\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    color: 'genre',\n    shape: 'triangle', // 使用这个形状\n  },\n});\n\nchart.render();\n",paraId:126,tocIndex:13}]},54004:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(26307);const t=[{value:"point",paraId:0},{value:" 图形标记主要用于绘制 ",paraId:0},{value:"散点图",paraId:0},{value:"，又名点图、散布图。散点图是将所有的数据以点的形式展现在平面直角坐标系上的统计图表。它至少需要两个不同变量，一个沿 x 轴绘制，另一个沿 y 轴绘制。每个点在 X、Y 轴上都有一个确定的位置。众多的散点叠加后，有助于展示数据集的“整体景观”，从而帮助我们分析两个变量之间的相关性，或找出趋势和规律。此外，我们还可以添加附加的变量，来给散点分组、着色、确定透明度等等。",paraId:0},{value:"当我们对散点图的 ",paraId:1},{value:"size",paraId:1},{value:" 通道进行编码，就能绘制出 ",paraId:1},{value:"气泡图",paraId:1},{value:"。在气泡图中，一般情况下，每一个气泡都代表着一组三个维度的数据（x，y，size）。其中两个决定了气泡在笛卡尔坐标系中的位置（即 x，y 轴上的值），另外一个则通过气泡的大小来表示。",paraId:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n  },\n  encode: {\n    x: 'GDP',\n    y: 'LifeExpectancy',\n    size: 'Population',\n    color: 'continent',\n    shape: 'point',\n  },\n  scale: { size: { type: 'log', range: [4, 20] } }, // Population数据差异较大，使用log比例尺对size通道的数据进行映射后，使得显示更友好\n  legend: { size: false }, // 关闭size通道的图例\n  style: { fillOpacity: 0.3, lineWidth: 1 },\n});\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"更多的案例，可以查看",paraId:3,tocIndex:0},{value:"图表示例 - 散点图",paraId:4,tocIndex:0},{value:"页面。",paraId:3,tocIndex:0},{value:"属性",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"类型",paraId:5,tocIndex:1},{value:"默认值",paraId:5,tocIndex:1},{value:"必选",paraId:5,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"配置 ",paraId:5,tocIndex:1},{value:"point",paraId:5,tocIndex:1},{value:" 标记的视觉通道，包括",paraId:5,tocIndex:1},{value:"x",paraId:5,tocIndex:1},{value:"、",paraId:5,tocIndex:1},{value:"y",paraId:5,tocIndex:1},{value:"、",paraId:5,tocIndex:1},{value:"color",paraId:5,tocIndex:1},{value:"、",paraId:5,tocIndex:1},{value:"shape",paraId:5,tocIndex:1},{value:"、",paraId:5,tocIndex:1},{value:"size",paraId:5,tocIndex:1},{value:" 等，用于指定视觉元素属性和数据之间的关系",paraId:5,tocIndex:1},{value:"encode",paraId:6,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"✓",paraId:5,tocIndex:1},{value:"style",paraId:5,tocIndex:1},{value:"配置 ",paraId:5,tocIndex:1},{value:"point",paraId:5,tocIndex:1},{value:" 标记的图形样式",paraId:5,tocIndex:1},{value:"style",paraId:7,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"配置 ",paraId:8,tocIndex:2},{value:"point",paraId:8,tocIndex:2},{value:" 标记的视觉通道。",paraId:8,tocIndex:2},{value:"属性",paraId:9,tocIndex:2},{value:"描述",paraId:9,tocIndex:2},{value:"类型",paraId:9,tocIndex:2},{value:"默认值",paraId:9,tocIndex:2},{value:"必选",paraId:9,tocIndex:2},{value:"x",paraId:9,tocIndex:2},{value:"绑定 ",paraId:9,tocIndex:2},{value:"point",paraId:9,tocIndex:2},{value:" 标记的 ",paraId:9,tocIndex:2},{value:"x",paraId:9,tocIndex:2},{value:" 属性通道，可以是 ",paraId:9,tocIndex:2},{value:"data",paraId:9,tocIndex:2},{value:" 中的数值字段、有序名词和无序名词",paraId:9,tocIndex:2},{value:"encode",paraId:10,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"✓",paraId:9,tocIndex:2},{value:"y",paraId:9,tocIndex:2},{value:"绑定 ",paraId:9,tocIndex:2},{value:"point",paraId:9,tocIndex:2},{value:" 标记的 ",paraId:9,tocIndex:2},{value:"y",paraId:9,tocIndex:2},{value:" 属性通道，一般是 ",paraId:9,tocIndex:2},{value:"data",paraId:9,tocIndex:2},{value:" 中的数值字段，为空的时候用来绘制一维散点图",paraId:9,tocIndex:2},{value:"encode",paraId:11,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"color",paraId:9,tocIndex:2},{value:"绑定 ",paraId:9,tocIndex:2},{value:"point",paraId:9,tocIndex:2},{value:" 标记的 ",paraId:9,tocIndex:2},{value:"color",paraId:9,tocIndex:2},{value:" 属性通道，一般用于区分不同的数据类型，映射到分类字段",paraId:9,tocIndex:2},{value:"encode",paraId:12,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"shape",paraId:9,tocIndex:2},{value:"绑定 ",paraId:9,tocIndex:2},{value:"point",paraId:9,tocIndex:2},{value:" 标记的 ",paraId:9,tocIndex:2},{value:"shape",paraId:9,tocIndex:2},{value:" 属性通道，改变图形标记的绘制形状",paraId:9,tocIndex:2},{value:"hollow",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"hollowDiamond",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"hollowHexagon",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"hollowSquare",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"hollowTriangleDown",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"hollowTriangle",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"hollowBowtie",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"point",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"plus",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"diamond",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"square",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"triangle",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"triangleDown",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"hexagon",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"cross",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"bowtie",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"hyphen",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"line",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"tick",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"circle",paraId:9,tocIndex:2},{value:"hollow",paraId:9,tocIndex:2},{value:"size",paraId:9,tocIndex:2},{value:"绑定 ",paraId:9,tocIndex:2},{value:"point",paraId:9,tocIndex:2},{value:" 标记的 ",paraId:9,tocIndex:2},{value:"size",paraId:9,tocIndex:2},{value:" 属性通道，数据字段的大小映射到图形的半径（如果是正方形则是 1/2 边长）",paraId:9,tocIndex:2},{value:"encode",paraId:13,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"point",paraId:14,tocIndex:3},{value:" 标记的位置视觉通道需要 ",paraId:14,tocIndex:3},{value:"x",paraId:14,tocIndex:3},{value:", ",paraId:14,tocIndex:3},{value:"y",paraId:14,tocIndex:3},{value:" 两个字段的值，支持的数据格式有以下两种：",paraId:14,tocIndex:3},{value:"x",paraId:15,tocIndex:3},{value:", ",paraId:15,tocIndex:3},{value:"y",paraId:15,tocIndex:3},{value:" 都是数值，一般的散点图。",paraId:15,tocIndex:3},{value:'{\n  type: "point",\n  data: [{ month: \'一月\', temperature: 8 }],\n  encode: { x: "month", y: "temperature" },\n}\n',paraId:16,tocIndex:3},{value:"x",paraId:17,tocIndex:3},{value:" 是数值，",paraId:17,tocIndex:3},{value:"y",paraId:17,tocIndex:3},{value:" 为空，一般用来绘制一维散点图，此时 x 数值一样的点会重合在一起，通常需要结合数据转换 ",paraId:17,tocIndex:3},{value:"transform",paraId:18,tocIndex:3},{value:"，例如 ",paraId:17,tocIndex:3},{value:"stackY",paraId:17,tocIndex:3},{value:" 让可视化结果更清晰。",paraId:17,tocIndex:3},{value:'{\n  type: "point",\n  data: [{ value: 10 }],\n  encode: { x: "value"},\n}\n',paraId:19,tocIndex:3},{value:"color",paraId:20,tocIndex:4},{value:" 视觉通道影响 ",paraId:20,tocIndex:4},{value:"point",paraId:20,tocIndex:4},{value:" 图形标记的 ",paraId:20,tocIndex:4},{value:"填充颜色",paraId:20,tocIndex:4},{value:"（在应用某些空心形状的时候，例如 ",paraId:20,tocIndex:4},{value:"hollow",paraId:20,tocIndex:4},{value:" ，则会改变图形的 ",paraId:20,tocIndex:4},{value:"描边颜色",paraId:20,tocIndex:4},{value:"）。在点图上应用时一般映射分类字段，对数据进行分组。",paraId:20,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  },\n  encode: {\n    x: 'height',\n    y: 'weight',\n    color: 'gender', // color通道映射gender字段，对不同的性别进行分组\n  },\n});\n\nchart.render();\n",paraId:21,tocIndex:4},{value:"但是有些特殊情况下也会映射的连续字段上，对不同区间的数值对应的图形使用不同的颜色：",paraId:22,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  children: [\n    {\n      type: 'point',\n      data: {\n        type: 'fetch',\n        value:\n          'https://gw.alipayobjects.com/os/bmw-prod/56b6b137-e04e-4757-8af5-d75bafaef886.csv',\n      },\n      encode: { x: 'date', y: 'value', color: 'value', shape: 'point' },\n      scale: { color: { palette: 'rdBu', offset: (t) => 1 - t } }, // 配置color通道的比例尺，调整色板和偏移量\n      style: { stroke: '#000', strokeOpacity: 0.2 }, // 配置point标记的样式\n      // 自定义tooltip的items\n      tooltip: {\n        items: [\n          {\n            channel: 'x',\n            name: 'year',\n            valueFormatter: (d) => d.getFullYear(),\n          },\n          { channel: 'y' },\n        ],\n      },\n    },\n    // 添加lineY标记作为辅助线标注\n    {\n      type: 'lineY',\n      data: [0],\n      style: { stroke: '#000', strokeOpacity: 0.2 },\n    },\n  ],\n});\n\nchart.render();\n",paraId:23,tocIndex:4},{value:"point",paraId:24,tocIndex:5},{value:" 标记内置的 shape 图形如下，默认为 ",paraId:24,tocIndex:5},{value:"hollow",paraId:24,tocIndex:5},{value:"。",paraId:24,tocIndex:5},{value:"图形",paraId:25,tocIndex:5},{value:"描述",paraId:25,tocIndex:5},{value:"hollow",paraId:25,tocIndex:5},{value:"空心圆",paraId:25,tocIndex:5},{value:"hollowDiamond",paraId:25,tocIndex:5},{value:"空心菱形",paraId:25,tocIndex:5},{value:"hollowHexagon",paraId:25,tocIndex:5},{value:"空心六边形",paraId:25,tocIndex:5},{value:"hollowSquare",paraId:25,tocIndex:5},{value:"空心方块",paraId:25,tocIndex:5},{value:"hollowTriangleDown",paraId:25,tocIndex:5},{value:"空心倒三角形",paraId:25,tocIndex:5},{value:"hollowTriangle",paraId:25,tocIndex:5},{value:"空心三角形",paraId:25,tocIndex:5},{value:"hollowBowtie",paraId:25,tocIndex:5},{value:"空心蝴蝶结",paraId:25,tocIndex:5},{value:"point",paraId:25,tocIndex:5},{value:"实心圆",paraId:25,tocIndex:5},{value:"plus",paraId:25,tocIndex:5},{value:"加号符号",paraId:25,tocIndex:5},{value:"diamond",paraId:25,tocIndex:5},{value:"实心菱形",paraId:25,tocIndex:5},{value:"square",paraId:25,tocIndex:5},{value:"实心方块",paraId:25,tocIndex:5},{value:"triangle",paraId:25,tocIndex:5},{value:"实心三角形",paraId:25,tocIndex:5},{value:"triangleDown",paraId:25,tocIndex:5},{value:"实心倒三角形",paraId:25,tocIndex:5},{value:"hexagon",paraId:25,tocIndex:5},{value:"实心六边形",paraId:25,tocIndex:5},{value:"cross",paraId:25,tocIndex:5},{value:"十字交叉符号",paraId:25,tocIndex:5},{value:"bowtie",paraId:25,tocIndex:5},{value:"实心蝴蝶结",paraId:25,tocIndex:5},{value:"hyphen",paraId:25,tocIndex:5},{value:"连字符（短横线）",paraId:25,tocIndex:5},{value:"line",paraId:25,tocIndex:5},{value:"竖线符号",paraId:25,tocIndex:5},{value:"tick",paraId:25,tocIndex:5},{value:"短竖线（tick 符号）",paraId:25,tocIndex:5},{value:"circle",paraId:25,tocIndex:5},{value:"圆形符号",paraId:25,tocIndex:5},{value:"尝试一下：",paraId:26,tocIndex:5},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\n// 可选的itemMarker形状\nconst shapeList = [\n  'hollow',\n  'hollowDiamond',\n  'hollowHexagon',\n  'hollowSquare',\n  'hollowTriangleDown',\n  'hollowTriangle',\n  'hollowBowtie',\n  'point',\n  'plus',\n  'diamond',\n  'square',\n  'triangle',\n  'triangleDown',\n  'hexagon',\n  'cross',\n  'bowtie',\n  'hyphen',\n  'line',\n  'tick',\n  'circle',\n];\nconst shapeMap = shapeList.map((p) => {\n  return {\n    label: p,\n    value: p,\n  };\n});\n\nchart.options({\n  type: 'point',\n  height: 150,\n  data: [{ x: 0.5, y: 0.5 }],\n  encode: {\n    x: 'x',\n    y: 'y',\n    size: 10,\n  },\n  scale: {\n    x: { domain: [0, 1], nice: true },\n    y: { domain: [0, 1], nice: true },\n  },\n});\n\nconst handleSetShape = (shape) => {\n  chart.options({\n    encode: {\n      x: 'x',\n      y: 'y',\n      size: 10,\n      shape,\n    },\n  });\n  chart.render(); // 重新渲染图表\n};\n\nconst selectorContainer = document.createElement('div');\nselectorContainer.textContent = '选择point标记的形状 ';\nconst selector = document.createElement('select');\nselector.innerHTML = shapeMap.map(\n  (shape, index) =>\n    `<option value=\"${shape.value}\" ${index === 0 ? 'selected' : ''}>${\n      shape.label\n    }</option>`,\n);\nselector.onchange = (e) => {\n  handleSetShape(e.target.value);\n};\nselectorContainer.appendChild(selector);\ncontainer.insertBefore(selectorContainer, container.childNodes[0]);\n\nchart.render();\n",paraId:27,tocIndex:5},{value:"绑定 ",paraId:28,tocIndex:6},{value:"point",paraId:28,tocIndex:6},{value:" 标记的 ",paraId:28,tocIndex:6},{value:"size",paraId:28,tocIndex:6},{value:" 属性通道，就能绘制出 ",paraId:28,tocIndex:6},{value:"气泡图",paraId:28,tocIndex:6},{value:"，此时数据字段的大小映射到图形的半径（如果是正方形则是 1/2 边长）。",paraId:28,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2b48887c-56fb-437e-a91c-6f48e80e5a91.csv',\n    transform: [\n      {\n        type: 'filter',\n        callback: (d) => d.Entity !== 'All natural disasters',\n      },\n    ],\n  },\n  encode: {\n    x: 'Year',\n    y: 'Entity',\n    size: 'Deaths',\n    color: 'Entity',\n    shape: 'point',\n  },\n  scale: { size: { rangeMax: 35 } }, // 配置size通道的比例尺，设置最大值域为35\n  style: { stroke: 'black', strokeOpacity: 0.1, opacity: 0.8, lineWidth: 1 }, // 配置point标记的样式\n  legend: { color: false }, // 关闭color通道的图例\n});\n\nchart.render();\n",paraId:29,tocIndex:6},{value:"属性",paraId:30,tocIndex:7},{value:"描述",paraId:30,tocIndex:7},{value:"类型",paraId:30,tocIndex:7},{value:"默认值",paraId:30,tocIndex:7},{value:"必选",paraId:30,tocIndex:7},{value:"fill",paraId:30,tocIndex:7},{value:"point",paraId:30,tocIndex:7},{value:" 标记填充颜色",paraId:30,tocIndex:7},{value:"string | (datum, index, data) => string",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"fillOpacity",paraId:30,tocIndex:7},{value:"point",paraId:30,tocIndex:7},{value:" 标记填充透明度",paraId:30,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:30,tocIndex:7},{value:"point: ",paraId:30,tocIndex:7},{value:"0.95",paraId:30,tocIndex:7},{value:"stroke",paraId:30,tocIndex:7},{value:"point",paraId:30,tocIndex:7},{value:" 标记描边颜色",paraId:30,tocIndex:7},{value:"string | (datum, index, data) => string",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"strokeOpacity",paraId:30,tocIndex:7},{value:"point",paraId:30,tocIndex:7},{value:" 标记描边透明度",paraId:30,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:30,tocIndex:7},{value:"hollow, plus, diamond : ",paraId:30,tocIndex:7},{value:"0.95",paraId:30,tocIndex:7},{value:"lineWidth",paraId:30,tocIndex:7},{value:"point",paraId:30,tocIndex:7},{value:" 标记描边宽度",paraId:30,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:30,tocIndex:7},{value:"hollow, diamond: ",paraId:30,tocIndex:7},{value:"1",paraId:30,tocIndex:7},{value:" point: ",paraId:30,tocIndex:7},{value:"0",paraId:30,tocIndex:7},{value:"plus: ",paraId:30,tocIndex:7},{value:"3",paraId:30,tocIndex:7},{value:"lineDash",paraId:30,tocIndex:7},{value:"point",paraId:30,tocIndex:7},{value:" 标记描边虚线配置",paraId:30,tocIndex:7},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"opacity",paraId:30,tocIndex:7},{value:"point",paraId:30,tocIndex:7},{value:" 标记整体透明度",paraId:30,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"shadowColor",paraId:30,tocIndex:7},{value:"point",paraId:30,tocIndex:7},{value:" 标记阴影颜色",paraId:30,tocIndex:7},{value:"string | (datum, index, data) => string",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"shadowBlur",paraId:30,tocIndex:7},{value:"point",paraId:30,tocIndex:7},{value:" 标记阴影模糊系数",paraId:30,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"shadowOffsetX",paraId:30,tocIndex:7},{value:"point",paraId:30,tocIndex:7},{value:" 标记阴影水平偏移",paraId:30,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"shadowOffsetY",paraId:30,tocIndex:7},{value:"point",paraId:30,tocIndex:7},{value:" 标记阴影垂直偏移",paraId:30,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"cursor",paraId:30,tocIndex:7},{value:"point",paraId:30,tocIndex:7},{value:" 标记鼠标样式",paraId:30,tocIndex:7},{value:"string | (datum, index, data) => string",paraId:30,tocIndex:7},{value:"default",paraId:30,tocIndex:7},{value:"尝试一下：",paraId:31,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'point',\n  style: {\n    fill: 'skyblue', // 图形填充颜色，支持颜色字符串，优先级高于color通道\n    fillOpacity: 0.9, // 填充颜色透明度，范围 0-1\n    stroke: '#FADC7C', // 图形描边颜色\n    lineWidth: 3, // 描边宽度（像素）\n    lineDash: [1, 2], // 虚线配置[实线长度, 间隔长度]，[0,0]表示无描边\n    strokeOpacity: 0.95, // 描边透明度，范围 0-1\n    opacity: 0.9, // 整体透明度，影响填充和描边\n    shadowColor: 'black', // 阴影颜色\n    shadowBlur: 10, // 阴影模糊程度（像素）\n    shadowOffsetX: 5, // 阴影水平偏移量（像素）\n    shadowOffsetY: 5, // 阴影垂直偏移量（像素）\n    cursor: 'pointer', // 鼠标悬停样式（同CSS cursor属性）\n  },\n  height: 350,\n  data: [{ x: 0.5, y: 0.5 }],\n  encode: {\n    x: 'x',\n    y: 'y',\n    size: 10,\n    shape: 'point',\n  },\n  scale: {\n    x: { domain: [0, 1], nice: true },\n    y: { domain: [0, 1], nice: true },\n  },\n});\n\nchart.render();\n",paraId:32,tocIndex:7},{value:"怎么用可视化表示一组线性回归的数据？",paraId:33,tocIndex:8},{value:"受益于 G2 里标记的可组合性，你可以将 ",paraId:34,tocIndex:8},{value:"point",paraId:34,tocIndex:8},{value:"标记和 ",paraId:34,tocIndex:8},{value:"line",paraId:34,tocIndex:8},{value:" 标记等其他标记结合，增强图表的表现力，或者是绘制一些类似线性回归的特殊图表。",paraId:34,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nconst d3Regression = window.d3Regression;\n\nchart.options({\n  type: 'view',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/linear-regression.json',\n  },\n  children: [\n    {\n      type: 'point',\n      encode: { x: (d) => d[0], y: (d) => d[1], shape: 'point' },\n      scale: { x: { domain: [0, 1] }, y: { domain: [0, 5] } },\n      style: { fillOpacity: 0.75 },\n    },\n    {\n      type: 'line',\n      // 使用d3Regression的regressionLinear方法处理数据，绘制回归线\n      data: {\n        transform: [\n          {\n            type: 'custom',\n            callback: d3Regression.regressionLinear(),\n          },\n        ],\n      },\n      encode: { x: (d) => d[0], y: (d) => d[1] },\n      style: { stroke: '#30BF78', lineWidth: 2 },\n      labels: [\n        {\n          text: 'y = 1.7x+3.01',\n          selector: 'last',\n          position: 'right',\n          textAlign: 'end',\n          dy: -8,\n        },\n      ],\n      tooltip: false,\n    },\n  ],\n});\n\nchart.render();\n",paraId:35,tocIndex:8},{value:"下面是另一个 ",paraId:36,tocIndex:8},{value:"point",paraId:36,tocIndex:8},{value:" 标记结合其他标记（这个例子中是 ",paraId:36,tocIndex:8},{value:"link",paraId:36,tocIndex:8},{value:" 标记）的例子：",paraId:36,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  width: 800,\n  height: 1200,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/b6f2ff26-b232-447d-a613-0df5e30104a0.csv',\n  },\n  coordinate: { transform: [{ type: 'transpose' }] }, // 配置坐标系transpose转换\n  interaction: { tooltip: { shared: true } }, // 相同 x 的元素共享 tooltip\n  children: [\n    {\n      type: 'link',\n      encode: { x: 'state', y: 'population' },\n      transform: [{ type: 'groupX', y: 'min', y1: 'max' }],\n      scale: { y: { labelFormatter: '.0%' } },\n      style: { stroke: '#000' },\n      tooltip: false,\n    },\n    {\n      type: 'point',\n      encode: { x: 'state', y: 'population', shape: 'point', color: 'age' },\n      scale: { color: { palette: 'spectral' } },\n      tooltip: { title: 'state', items: ['population'] },\n    },\n  ],\n});\n\nchart.render();\n",paraId:37,tocIndex:8},{value:"一维散点图相同 x 坐标的点都重叠在一起怎么办？",paraId:38,tocIndex:8},{value:"配置 ",paraId:39,tocIndex:8},{value:"y",paraId:39,tocIndex:8},{value:" 通道为常数 ",paraId:39,tocIndex:8},{value:"1",paraId:39,tocIndex:8},{value:", 然后配置 ",paraId:39,tocIndex:8},{value:"stackY",paraId:40,tocIndex:8},{value:" 数据转换来将相同 x 坐标的点堆叠起来。",paraId:39,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  height: 200,\n  data: [\n    { x: 1 },\n    { x: 1 },\n    { x: 1 },\n    { x: 2 },\n    { x: 2 },\n    { x: 2 },\n    { x: 2 },\n    { x: 2 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 4 },\n    { x: 5 },\n  ],\n  encode: {\n    x: 'x',\n    y: () => 1,\n    shape: 'point',\n  },\n  transform: [\n    {\n      type: 'stackY', // 按照指定通道分组，对每组的 y 和 y1 通道进行堆叠，实现堆叠效果\n    },\n  ],\n  scale: { x: { nice: true } },\n  tooltip: { items: [{ channel: 'x', name: 'x' }] },\n});\n\nchart.render();\n",paraId:41,tocIndex:8},{value:"或者配置 ",paraId:42,tocIndex:8},{value:"groupX",paraId:43,tocIndex:8},{value:" 数据转换来将相同 x 坐标的点进行求和，然后映射到 ",paraId:42,tocIndex:8},{value:"size",paraId:42,tocIndex:8},{value:"通道。",paraId:42,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  height: 200,\n  data: [\n    { x: 1 },\n    { x: 1 },\n    { x: 1 },\n    { x: 2 },\n    { x: 2 },\n    { x: 2 },\n    { x: 2 },\n    { x: 2 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 4 },\n    { x: 5 },\n  ],\n  encode: {\n    x: 'x',\n    y: () => 1,\n    shape: 'point',\n    size: () => 1,\n  },\n  transform: [{ type: 'groupX', size: 'sum' }], // 对离散的 x 通道进行分组，并且进行求和后映射到size通道\n  scale: {\n    x: { nice: true },\n    size: { rangeMin: 5 }, // 设置size通道的比例尺的最小值域为5\n  },\n  axis: {\n    y: false,\n  },\n  tooltip: { items: [{ channel: 'size', name: '数量' }] },\n});\nchart.render();\n",paraId:44,tocIndex:8}]},24918:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(18760);const t=[{value:"polygon",paraId:0,tocIndex:0},{value:" 图形标记（多边形），利用一组 (x, y) 数据点，来连接形成一个闭合的图形，一般都是结合社区上的可视化布局算法计算之后的数据进行可视化展示。在数据可视化、计算机图形学和地理信息系统等领域中具有重要作用，常用于 矩形树图或地图上的区块映射。",paraId:0,tocIndex:0},{value:"例如在战争沙盘中，可以在地图上分割出多个不规则的图形，来 显示和区分 占领和未占领、己方和敌方、河流和陆地的区域，使得更加直观的感受战场上的态势。",paraId:1,tocIndex:0},{value:"它是数据可视化、图形学和地理信息系统中不可或缺的工具。",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// 生成正多边形的坐标点\nfunction generatePolygon(sides, centerX, centerY, radius, rotation = 0) {\n  const points = [];\n  for (let i = 0; i < sides; i++) {\n    const angle = (2 * Math.PI * i) / sides + rotation;\n    const x = centerX + radius * Math.cos(angle);\n    const y = centerY + radius * Math.sin(angle);\n    points.push([x, y]);\n  }\n  return points;\n}\n\n// 创建多种正多边形数据\nconst polygonData = [\n  {\n    name: '三角形',\n    sides: 3,\n    color: '#FF6B6B',\n    position: [2, 4],\n    size: 0.8,\n    rotation: Math.PI / 6,\n  },\n  {\n    name: '四边形',\n    sides: 4,\n    color: '#4ECDC4',\n    position: [4, 4],\n    size: 0.7,\n    rotation: Math.PI / 4,\n  },\n  {\n    name: '五边形',\n    sides: 5,\n    color: '#45B7D1',\n    position: [6, 4],\n    size: 0.8,\n    rotation: 0,\n  },\n  {\n    name: '六边形',\n    sides: 6,\n    color: '#96CEB4',\n    position: [8, 4],\n    size: 0.8,\n    rotation: 0,\n  },\n  {\n    name: '八边形',\n    sides: 8,\n    color: '#FFEAA7',\n    position: [2, 2],\n    size: 0.8,\n    rotation: Math.PI / 8,\n  },\n  {\n    name: '十边形',\n    sides: 10,\n    color: '#DDA0DD',\n    position: [4, 2],\n    size: 0.8,\n    rotation: 0,\n  },\n  {\n    name: '十二边形',\n    sides: 12,\n    color: '#98D8C8',\n    position: [6, 2],\n    size: 0.8,\n    rotation: 0,\n  },\n  {\n    name: '星形',\n    sides: 5,\n    color: '#F7DC6F',\n    position: [8, 2],\n    size: 0.9,\n    rotation: 0,\n    star: true,\n  },\n];\n\n// 转换为 G2 需要的数据格式\nconst data = polygonData.map((poly) => {\n  let coordinates;\n\n  if (poly.star) {\n    // 生成五角星\n    const outerPoints = generatePolygon(\n      5,\n      poly.position[0],\n      poly.position[1],\n      poly.size,\n      poly.rotation,\n    );\n    const innerPoints = generatePolygon(\n      5,\n      poly.position[0],\n      poly.position[1],\n      poly.size * 0.4,\n      poly.rotation + Math.PI / 5,\n    );\n    coordinates = [];\n    for (let i = 0; i < 5; i++) {\n      coordinates.push(outerPoints[i]);\n      coordinates.push(innerPoints[i]);\n    }\n  } else {\n    coordinates = generatePolygon(\n      poly.sides,\n      poly.position[0],\n      poly.position[1],\n      poly.size,\n      poly.rotation,\n    );\n  }\n\n  return {\n    x: coordinates.map((point) => point[0]),\n    y: coordinates.map((point) => point[1]),\n    name: poly.name,\n    color: poly.color,\n    sides: poly.sides,\n  };\n});\n\nchart.options({\n  type: 'polygon',\n  data: data,\n  encode: {\n    x: 'x',\n    y: 'y',\n    color: 'color',\n    series: 'name',\n  },\n  scale: {\n    x: { domain: [0, 10] },\n    y: { domain: [0, 6] },\n    color: { type: 'identity' },\n  },\n  style: {\n    stroke: '#fff',\n    lineWidth: 2,\n    fillOpacity: 0.8,\n  },\n  labels: [\n    {\n      text: 'name',\n      position: 'inside',\n      style: {\n        fontSize: 12,\n        fontWeight: 'bold',\n        fill: '#333',\n        textAlign: 'center',\n      },\n    },\n  ],\n  tooltip: false,\n});\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"更多的案例，可以查看",paraId:4,tocIndex:0},{value:"图表示例 - 多边形",paraId:5,tocIndex:0},{value:"页面。",paraId:4,tocIndex:0},{value:"属性",paraId:6,tocIndex:1},{value:"描述",paraId:6,tocIndex:1},{value:"类型",paraId:6,tocIndex:1},{value:"默认值",paraId:6,tocIndex:1},{value:"必选",paraId:6,tocIndex:1},{value:"encode",paraId:6,tocIndex:1},{value:"配置 ",paraId:6,tocIndex:1},{value:"polygon",paraId:6,tocIndex:1},{value:" 标记的视觉通道，包括",paraId:6,tocIndex:1},{value:"x",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"y",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"color",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"shape",paraId:6,tocIndex:1},{value:"等，用于指定视觉元素属性和数据之间的关系",paraId:6,tocIndex:1},{value:"encode",paraId:7,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"✓",paraId:6,tocIndex:1},{value:"coordinate",paraId:6,tocIndex:1},{value:"配置 ",paraId:6,tocIndex:1},{value:"polygon",paraId:6,tocIndex:1},{value:" 标记的坐标系，坐标系会执行一系列点转换，从而改变标记的空间展示形式",paraId:6,tocIndex:1},{value:"coordinate",paraId:8,tocIndex:1},{value:"{type: 'cartesian' }",paraId:6,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:"配置 ",paraId:6,tocIndex:1},{value:"polygon",paraId:6,tocIndex:1},{value:" 标记的图形样式",paraId:6,tocIndex:1},{value:"style",paraId:9,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"配置 ",paraId:10,tocIndex:2},{value:"polygon",paraId:10,tocIndex:2},{value:" 标记的视觉通道。",paraId:10,tocIndex:2},{value:"属性",paraId:11,tocIndex:2},{value:"描述",paraId:11,tocIndex:2},{value:"类型",paraId:11,tocIndex:2},{value:"默认值",paraId:11,tocIndex:2},{value:"必选",paraId:11,tocIndex:2},{value:"x",paraId:11,tocIndex:2},{value:"绑定 ",paraId:11,tocIndex:2},{value:"polygon",paraId:11,tocIndex:2},{value:" 标记的 ",paraId:11,tocIndex:2},{value:"x",paraId:11,tocIndex:2},{value:" 属性通道，一般是 ",paraId:11,tocIndex:2},{value:"data",paraId:11,tocIndex:2},{value:" 中的时间或有序名词字段",paraId:11,tocIndex:2},{value:"encode",paraId:12,tocIndex:2},{value:"-",paraId:11,tocIndex:2},{value:"✓",paraId:11,tocIndex:2},{value:"y",paraId:11,tocIndex:2},{value:"绑定 ",paraId:11,tocIndex:2},{value:"polygon",paraId:11,tocIndex:2},{value:" 标记的 ",paraId:11,tocIndex:2},{value:"y",paraId:11,tocIndex:2},{value:" 属性通道，一般是 ",paraId:11,tocIndex:2},{value:"data",paraId:11,tocIndex:2},{value:" 中的数值或数组字段",paraId:11,tocIndex:2},{value:"encode",paraId:13,tocIndex:2},{value:"-",paraId:11,tocIndex:2},{value:"✓",paraId:11,tocIndex:2},{value:"color",paraId:11,tocIndex:2},{value:"绑定 ",paraId:11,tocIndex:2},{value:"polygon",paraId:11,tocIndex:2},{value:" 标记的 ",paraId:11,tocIndex:2},{value:"color",paraId:11,tocIndex:2},{value:" 属性通道，如果将数据字段映射到颜色通道，会对每个 ",paraId:11,tocIndex:2},{value:"polygon",paraId:11,tocIndex:2},{value:" 多边形区块进行颜色区分,可以为温度等数值类型，也可以为分组",paraId:11,tocIndex:2},{value:"encode",paraId:14,tocIndex:2},{value:"-",paraId:11,tocIndex:2},{value:"shape",paraId:11,tocIndex:2},{value:"绑定 ",paraId:11,tocIndex:2},{value:"polygon",paraId:11,tocIndex:2},{value:" 标记的 ",paraId:11,tocIndex:2},{value:"shape",paraId:11,tocIndex:2},{value:" 属性通道，改变图形标记的绘制形状，支持的属性：",paraId:11,tocIndex:2},{value:"polygon",paraId:11,tocIndex:2},{value:" | ",paraId:11,tocIndex:2},{value:"ribbon",paraId:11,tocIndex:2},{value:"string",paraId:11,tocIndex:2},{value:"polygon",paraId:11,tocIndex:2},{value:"color",paraId:15,tocIndex:3},{value:" 视觉通道影响 ",paraId:15,tocIndex:3},{value:"polygon",paraId:15,tocIndex:3},{value:" 图形标记区域的填充颜色。",paraId:15,tocIndex:3},{value:"polygon",paraId:15,tocIndex:3},{value:" 标记中单个区域仅能使用一种颜色（或者渐变色），但如果将数据字段映射到颜色通道，会对数据进行分组，将数据拆分成多个区域：",paraId:15,tocIndex:3},{value:"color",paraId:16,tocIndex:3},{value:" 颜色通道, 传入 ",paraId:16,tocIndex:3},{value:"string",paraId:16,tocIndex:3},{value:" 类型分组",paraId:16,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'polygon',\n  width: 200,\n  height: 200,\n  paddingTop: 0,\n  paddingLeft: 0,\n  paddingBottom: 0,\n  paddingRight: 0,\n  data: [\n    { id: 'Big Triangle 1', x: [0, 2, 0], y: [0, 0, 2] },\n    { id: 'Big Triangle 2', x: [0, -2, 0], y: [0, 0, 2] },\n    { id: 'Medium Triangle', x: [1, 0, -1], y: [-1, -2, -1] },\n    { id: 'Small Triangle 1', x: [-2, -1, -1], y: [0, 0, -1] },\n    { id: 'Small Triangle 2', x: [0, 1, 0], y: [0, 0, -1] },\n    { id: 'Square', x: [0, 0, -1, -1], y: [0, -1, -1, 0] },\n    { id: 'Parallelogram', x: [0, 1, 2, 1], y: [-1, 0, 0, -1] },\n  ],\n  encode: { x: 'x', y: 'y', color: 'id' },\n  scale: { x: { domain: [-2, 2] }, y: { domain: [-2, 2] } },\n  style: { stroke: '#fff', lineWidth: 2 },\n  axis: false,\n});\n\nchart.render();\n",paraId:17,tocIndex:3},{value:"color",paraId:18,tocIndex:3},{value:" 颜色通道, 传入 ",paraId:18,tocIndex:3},{value:"number",paraId:18,tocIndex:3},{value:" 类型分组",paraId:18,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'polygon',\n  width: 200,\n  height: 200,\n  paddingTop: 0,\n  paddingLeft: 0,\n  paddingBottom: 0,\n  paddingRight: 0,\n  data: [\n    { id: 'Big Triangle 1', x: [0, 2, 0], y: [0, 0, 2], area: 2 },\n    { id: 'Big Triangle 2', x: [0, -2, 0], y: [0, 0, 2], area: 2 },\n    { id: 'Medium Triangle', x: [1, 0, -1], y: [-1, -2, -1], area: 1 },\n    { id: 'Small Triangle 1', x: [-2, -1, -1], y: [0, 0, -1], area: 0.5 },\n    { id: 'Small Triangle 2', x: [0, 1, 0], y: [0, 0, -1], area: 0.5 },\n    { id: 'Square', x: [0, 0, -1, -1], y: [0, -1, -1, 0], area: 1 },\n    { id: 'Parallelogram', x: [0, 1, 2, 1], y: [-1, 0, 0, -1], area: 1 },\n  ],\n  encode: { x: 'x', y: 'y', color: 'area' },\n  scale: { x: { domain: [-2, 2] }, y: { domain: [-2, 2] } },\n  style: { stroke: '#fff', lineWidth: 2 },\n  axis: false,\n});\n\nchart.render();\n",paraId:19,tocIndex:3},{value:"目前 ",paraId:20,tocIndex:4},{value:"polygon",paraId:20,tocIndex:4},{value:" 有 2 个内置 shape 图形，默认为 ",paraId:20,tocIndex:4},{value:"polygon",paraId:20,tocIndex:4},{value:"。",paraId:20,tocIndex:4},{value:"图形",paraId:21,tocIndex:4},{value:"描述",paraId:21,tocIndex:4},{value:"示例",paraId:21,tocIndex:4},{value:"polygon",paraId:21,tocIndex:4},{value:"绘制一个闭合的多边形",paraId:21,tocIndex:4},{value:"ribbon",paraId:21,tocIndex:4},{value:"绘制一个彩带，需要 p0，p1，p2，p3 四个点，p0 p1 为起点，p2 p3 为终点",paraId:21,tocIndex:4},{value:"ribbon",paraId:22,tocIndex:4},{value:" 实现的案例，可以通过弦图 ",paraId:22,tocIndex:4},{value:"chord",paraId:22,tocIndex:4},{value:" 和 桑基图",paraId:22,tocIndex:4},{value:"sankey",paraId:22,tocIndex:4},{value:" ，可以查看",paraId:22,tocIndex:4},{value:"图表示例 - 网络",paraId:23,tocIndex:4},{value:"页面。",paraId:22,tocIndex:4},{value:"属性",paraId:24,tocIndex:5},{value:"描述",paraId:24,tocIndex:5},{value:"类型",paraId:24,tocIndex:5},{value:"默认值",paraId:24,tocIndex:5},{value:"必选",paraId:24,tocIndex:5},{value:"fill",paraId:24,tocIndex:5},{value:"图形的填充色",paraId:24,tocIndex:5},{value:"string",paraId:24,tocIndex:5},{value:" | ",paraId:24,tocIndex:5},{value:"Function<string>",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"fillOpacity",paraId:24,tocIndex:5},{value:"图形的填充透明度",paraId:24,tocIndex:5},{value:"number",paraId:24,tocIndex:5},{value:" | ",paraId:24,tocIndex:5},{value:"Function<number>",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"stroke",paraId:24,tocIndex:5},{value:"图形的描边",paraId:24,tocIndex:5},{value:"string",paraId:24,tocIndex:5},{value:" | ",paraId:24,tocIndex:5},{value:"Function<string>",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"strokeOpacity",paraId:24,tocIndex:5},{value:"描边透明度",paraId:24,tocIndex:5},{value:"number",paraId:24,tocIndex:5},{value:" | ",paraId:24,tocIndex:5},{value:"Function<number>",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"lineWidth",paraId:24,tocIndex:5},{value:"图形描边的宽度",paraId:24,tocIndex:5},{value:"number",paraId:24,tocIndex:5},{value:" | ",paraId:24,tocIndex:5},{value:"Function<number>",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"lineDash",paraId:24,tocIndex:5},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:24,tocIndex:5},{value:"[number,number]",paraId:24,tocIndex:5},{value:" | ",paraId:24,tocIndex:5},{value:"Function<[number, number]>",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"opacity",paraId:24,tocIndex:5},{value:"图形的整体透明度",paraId:24,tocIndex:5},{value:"number",paraId:24,tocIndex:5},{value:" | ",paraId:24,tocIndex:5},{value:"Function<number>",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"shadowColor",paraId:24,tocIndex:5},{value:"图形阴影颜色",paraId:24,tocIndex:5},{value:"string",paraId:24,tocIndex:5},{value:" | ",paraId:24,tocIndex:5},{value:"Function<string>",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"shadowBlur",paraId:24,tocIndex:5},{value:"图形阴影的高斯模糊系数",paraId:24,tocIndex:5},{value:"number",paraId:24,tocIndex:5},{value:" | ",paraId:24,tocIndex:5},{value:"Function<number>",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"shadowOffsetX",paraId:24,tocIndex:5},{value:"设置阴影距图形的水平距离",paraId:24,tocIndex:5},{value:"number",paraId:24,tocIndex:5},{value:" | ",paraId:24,tocIndex:5},{value:"Function<number>",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"shadowOffsetY",paraId:24,tocIndex:5},{value:"设置阴影距图形的垂直距离",paraId:24,tocIndex:5},{value:"number",paraId:24,tocIndex:5},{value:" | ",paraId:24,tocIndex:5},{value:"Function<number>",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"cursor",paraId:24,tocIndex:5},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:24,tocIndex:5},{value:"string",paraId:24,tocIndex:5},{value:" | ",paraId:24,tocIndex:5},{value:"Function<string>",paraId:24,tocIndex:5},{value:"'default'",paraId:24,tocIndex:5}]},18188:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(56803);const t=[{value:"range",paraId:0,tocIndex:0},{value:" 是用来定义一个矩形区域的工具。这个矩形的位置和大小可以通过两组数字来确定：一组用于水平方向（x1, x2），另一组用于垂直方向（y1, y2）。它常用于绘制辅助背景区域或标记某个区域。",paraId:0,tocIndex:0},{value:"水平方向（x1, x2）：",paraId:1,tocIndex:0},{value:"x1",paraId:2,tocIndex:0},{value:"：矩形在水平方向上从哪里开始。",paraId:2,tocIndex:0},{value:"x2",paraId:2,tocIndex:0},{value:"：矩形在水平方向上到哪里结束。",paraId:2,tocIndex:0},{value:"垂直方向（y1, y2）：",paraId:3,tocIndex:0},{value:"y1",paraId:4,tocIndex:0},{value:"：矩形在垂直方向上从哪里开始。",paraId:4,tocIndex:0},{value:"y2",paraId:4,tocIndex:0},{value:"：矩形在垂直方向上到哪里结束。",paraId:4,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/0b37279d-1674-42b4-b285-29683747ad9a.json',\n  },\n  children: [\n    { type: 'lineX', data: [0] },\n    { type: 'lineY', data: [0] },\n    {\n      type: 'range',\n      // 区域图的数据\n      data: [\n        { x: [-25, 0], y: [-30, 0], region: '1' },\n        { x: [-25, 0], y: [0, 20], region: '2' },\n        { x: [0, 5], y: [-30, 0], region: '2' },\n        { x: [0, 5], y: [0, 20], region: '1' },\n      ],\n      // 编码规则，x 和 y 对应数据中的字段，color 对应 region 字段\n      encode: { x: 'x', y: 'y', color: 'region' },\n      scale: {\n        color: {\n          range: ['#d8d0c0', '#a3dda1'],\n          independent: true,\n          guide: null,\n        },\n      },\n\n      style: {\n        fillOpacity: 0.2,\n      },\n    },\n    {\n      type: 'point',\n      encode: {\n        x: 'change in female rate',\n        y: 'change in male rate',\n        size: 'pop',\n        color: 'continent',\n        shape: 'point',\n      },\n      scale: {\n        color: {\n          range: ['#ffd500', '#82cab2', '#193442', '#d18768', '#7e827a'],\n        },\n        x: { domain: [-25, 5] },\n        y: { domain: [-30, 20] },\n        size: { range: [4, 30] },\n      },\n      style: { stroke: '#bbb', fillOpacity: 0.8 },\n      axis: { x: { title: false }, y: { title: false } },\n    },\n  ],\n});\n\nchart.render();\n",paraId:5,tocIndex:0},{value:"属性",paraId:6,tocIndex:1},{value:"描述",paraId:6,tocIndex:1},{value:"类型",paraId:6,tocIndex:1},{value:"默认值",paraId:6,tocIndex:1},{value:"必选",paraId:6,tocIndex:1},{value:"encode",paraId:6,tocIndex:1},{value:"配置 ",paraId:6,tocIndex:1},{value:"range",paraId:6,tocIndex:1},{value:" 标记的视觉通道，包括",paraId:6,tocIndex:1},{value:"x",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"y",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"color",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"shape",paraId:6,tocIndex:1},{value:"等，用于指定视觉元素属性和数据之间的关系",paraId:6,tocIndex:1},{value:"encode",paraId:7,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"✓",paraId:6,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:"配置 ",paraId:6,tocIndex:1},{value:"range",paraId:6,tocIndex:1},{value:" 标记的图形样式",paraId:6,tocIndex:1},{value:"style",paraId:8,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"配置 ",paraId:9,tocIndex:2},{value:"range",paraId:9,tocIndex:2},{value:" 标记的视觉通道。",paraId:9,tocIndex:2},{value:"属性",paraId:10,tocIndex:2},{value:"描述",paraId:10,tocIndex:2},{value:"类型",paraId:10,tocIndex:2},{value:"默认值",paraId:10,tocIndex:2},{value:"必选",paraId:10,tocIndex:2},{value:"x",paraId:10,tocIndex:2},{value:"绑定 ",paraId:10,tocIndex:2},{value:"range",paraId:10,tocIndex:2},{value:" 标记的 ",paraId:10,tocIndex:2},{value:"x",paraId:10,tocIndex:2},{value:" 属性通道，一般是 ",paraId:10,tocIndex:2},{value:"data",paraId:10,tocIndex:2},{value:" 中的时间或有序名词字段",paraId:10,tocIndex:2},{value:"string",paraId:10,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"✓",paraId:10,tocIndex:2},{value:"y",paraId:10,tocIndex:2},{value:"绑定 ",paraId:10,tocIndex:2},{value:"range",paraId:10,tocIndex:2},{value:" 标记的 ",paraId:10,tocIndex:2},{value:"y",paraId:10,tocIndex:2},{value:" 属性通道，一般是 ",paraId:10,tocIndex:2},{value:"data",paraId:10,tocIndex:2},{value:" 中的数值或数组字段",paraId:10,tocIndex:2},{value:"string",paraId:10,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"✓",paraId:10,tocIndex:2},{value:"更多的 ",paraId:11,tocIndex:2},{value:"encode",paraId:11,tocIndex:2},{value:" 配置，可以查看 ",paraId:11,tocIndex:2},{value:"编码（Encode）",paraId:12,tocIndex:2},{value:" 介绍页面。",paraId:11,tocIndex:2},{value:"配置 ",paraId:13,tocIndex:3},{value:"range",paraId:13,tocIndex:3},{value:" 标记的样式。",paraId:13,tocIndex:3},{value:"属性",paraId:14,tocIndex:3},{value:"描述",paraId:14,tocIndex:3},{value:"类型",paraId:14,tocIndex:3},{value:"默认值",paraId:14,tocIndex:3},{value:"必选",paraId:14,tocIndex:3},{value:"fill",paraId:14,tocIndex:3},{value:"图形的填充色",paraId:14,tocIndex:3},{value:"string",paraId:14,tocIndex:3},{value:" | ",paraId:14,tocIndex:3},{value:"Function<string>",paraId:14,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"fillOpacity",paraId:14,tocIndex:3},{value:"图形的填充透明度",paraId:14,tocIndex:3},{value:"number",paraId:14,tocIndex:3},{value:" | ",paraId:14,tocIndex:3},{value:"Function<number>",paraId:14,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"stroke",paraId:14,tocIndex:3},{value:"图形的描边",paraId:14,tocIndex:3},{value:"string",paraId:14,tocIndex:3},{value:" | ",paraId:14,tocIndex:3},{value:"Function<string>",paraId:14,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"strokeOpacity",paraId:14,tocIndex:3},{value:"描边透明度",paraId:14,tocIndex:3},{value:"number",paraId:14,tocIndex:3},{value:" | ",paraId:14,tocIndex:3},{value:"Function<number>",paraId:14,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"lineWidth",paraId:14,tocIndex:3},{value:"图形描边的宽度",paraId:14,tocIndex:3},{value:"number",paraId:14,tocIndex:3},{value:" | ",paraId:14,tocIndex:3},{value:"Function<number>",paraId:14,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"lineDash",paraId:14,tocIndex:3},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:14,tocIndex:3},{value:"[number,number]",paraId:14,tocIndex:3},{value:" | ",paraId:14,tocIndex:3},{value:"Function<[number, number]>",paraId:14,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"opacity",paraId:14,tocIndex:3},{value:"图形的整体透明度",paraId:14,tocIndex:3},{value:"number",paraId:14,tocIndex:3},{value:" | ",paraId:14,tocIndex:3},{value:"Function<number>",paraId:14,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"shadowColor",paraId:14,tocIndex:3},{value:"图形阴影颜色",paraId:14,tocIndex:3},{value:"string",paraId:14,tocIndex:3},{value:" | ",paraId:14,tocIndex:3},{value:"Function<string>",paraId:14,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"shadowBlur",paraId:14,tocIndex:3},{value:"图形阴影的高斯模糊系数",paraId:14,tocIndex:3},{value:"number",paraId:14,tocIndex:3},{value:" | ",paraId:14,tocIndex:3},{value:"Function<number>",paraId:14,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"shadowOffsetX",paraId:14,tocIndex:3},{value:"设置阴影距图形的水平距离",paraId:14,tocIndex:3},{value:"number",paraId:14,tocIndex:3},{value:" | ",paraId:14,tocIndex:3},{value:"Function<number>",paraId:14,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"shadowOffsetY",paraId:14,tocIndex:3},{value:"设置阴影距图形的垂直距离",paraId:14,tocIndex:3},{value:"number",paraId:14,tocIndex:3},{value:" | ",paraId:14,tocIndex:3},{value:"Function<number>",paraId:14,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"cursor",paraId:14,tocIndex:3},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:14,tocIndex:3},{value:"string",paraId:14,tocIndex:3},{value:" | ",paraId:14,tocIndex:3},{value:"Function<string>",paraId:14,tocIndex:3},{value:"'default'",paraId:14,tocIndex:3},{value:"更多的 ",paraId:15,tocIndex:3},{value:"style",paraId:15,tocIndex:3},{value:" 配置，可以查看 ",paraId:15,tocIndex:3},{value:"样式（Style）",paraId:16,tocIndex:3},{value:" 介绍页面。",paraId:15,tocIndex:3},{value:"更多的案例，可以查看 ",paraId:17,tocIndex:4},{value:"图表示例 - 数据标注",paraId:18,tocIndex:4},{value:" 页面。",paraId:17,tocIndex:4}]},31235:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(92588);const t=[{value:"使用一组 ",paraId:0,tocIndex:0},{value:"x",paraId:0,tocIndex:0},{value:"(x1, x2) 来定位一个绘制于 x 轴的矩形区域，常用于对特定区域进行高亮显示。",paraId:0,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\n/**\n * A recreation of this demo: https://vega.github.io/vega-lite/examples/layer_falkensee.html\n */\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  width: 600,\n  height: 360,\n  paddingLeft: 60,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/year-population.json',\n  },\n  children: [\n    {\n      type: 'rangeX',\n      data: [\n        { year: [new Date('1933'), new Date('1945')], event: 'Nazi Rule' },\n        {\n          year: [new Date('1948'), new Date('1989')],\n          event: 'GDR (East Germany)',\n        },\n      ],\n      encode: { x: 'year', color: 'event' },\n      scale: { color: { independent: true, range: ['#FAAD14', '#30BF78'] } },\n      style: { fillOpacity: 0.75 },\n    },\n    {\n      type: 'line',\n      encode: { x: (d) => new Date(d.year), y: 'population', color: '#333' },\n    },\n    {\n      type: 'point',\n      encode: { x: (d) => new Date(d.year), y: 'population', color: '#333' },\n      style: { lineWidth: 1.5 },\n    },\n  ],\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"此外，rangeX 还提供了简便写法：",paraId:2,tocIndex:0},{value:"chart\n  .rangeX()\n  .data([[new Date('2010'), new Date('2011')]])\n  .encode('x', (d) => d);\n\n// it can be simplified as follows:\nchart.rangeX().data([new Date('2010'), new Date('2011')]);\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"必选",paraId:4,tocIndex:1},{value:"encode",paraId:4,tocIndex:1},{value:"配置 ",paraId:4,tocIndex:1},{value:"rangeX",paraId:4,tocIndex:1},{value:" 标记的视觉通道，包括",paraId:4,tocIndex:1},{value:"x",paraId:4,tocIndex:1},{value:"、",paraId:4,tocIndex:1},{value:"y",paraId:4,tocIndex:1},{value:"、",paraId:4,tocIndex:1},{value:"color",paraId:4,tocIndex:1},{value:"、",paraId:4,tocIndex:1},{value:"shape",paraId:4,tocIndex:1},{value:"等，用于指定视觉元素属性和数据之间的关系",paraId:4,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"✓",paraId:4,tocIndex:1},{value:"style",paraId:4,tocIndex:1},{value:"配置 ",paraId:4,tocIndex:1},{value:"rangeX",paraId:4,tocIndex:1},{value:" 标记的图形样式",paraId:4,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"配置 ",paraId:7,tocIndex:2},{value:"rangeX",paraId:7,tocIndex:2},{value:" 标记的视觉通道。",paraId:7,tocIndex:2},{value:"属性",paraId:8,tocIndex:2},{value:"描述",paraId:8,tocIndex:2},{value:"类型",paraId:8,tocIndex:2},{value:"默认值",paraId:8,tocIndex:2},{value:"必选",paraId:8,tocIndex:2},{value:"x",paraId:8,tocIndex:2},{value:"绑定 ",paraId:8,tocIndex:2},{value:"rangeX",paraId:8,tocIndex:2},{value:" 标记的 ",paraId:8,tocIndex:2},{value:"x",paraId:8,tocIndex:2},{value:" 属性通道，一般是 ",paraId:8,tocIndex:2},{value:"data",paraId:8,tocIndex:2},{value:" 中的时间或有序名词字段",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"✓",paraId:8,tocIndex:2},{value:"更多的 ",paraId:9,tocIndex:2},{value:"encode",paraId:9,tocIndex:2},{value:" 配置，可以查看 ",paraId:9,tocIndex:2},{value:"编码（Encode）",paraId:10,tocIndex:2},{value:" 介绍页面。",paraId:9,tocIndex:2},{value:"属性",paraId:11,tocIndex:3},{value:"描述",paraId:11,tocIndex:3},{value:"类型",paraId:11,tocIndex:3},{value:"默认值",paraId:11,tocIndex:3},{value:"必选",paraId:11,tocIndex:3},{value:"fill",paraId:11,tocIndex:3},{value:"图形的填充色",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<string>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"fillOpacity",paraId:11,tocIndex:3},{value:"图形的填充透明度",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"stroke",paraId:11,tocIndex:3},{value:"图形的描边",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<string>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"strokeOpacity",paraId:11,tocIndex:3},{value:"描边透明度",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"lineWidth",paraId:11,tocIndex:3},{value:"图形描边的宽度",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"lineDash",paraId:11,tocIndex:3},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:11,tocIndex:3},{value:"[number,number]",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<[number, number]>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"opacity",paraId:11,tocIndex:3},{value:"图形的整体透明度",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"shadowColor",paraId:11,tocIndex:3},{value:"图形阴影颜色",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<string>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"shadowBlur",paraId:11,tocIndex:3},{value:"图形阴影的高斯模糊系数",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"shadowOffsetX",paraId:11,tocIndex:3},{value:"设置阴影距图形的水平距离",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"shadowOffsetY",paraId:11,tocIndex:3},{value:"设置阴影距图形的垂直距离",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"cursor",paraId:11,tocIndex:3},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<string>",paraId:11,tocIndex:3},{value:"'default'",paraId:11,tocIndex:3},{value:"更多的 ",paraId:12,tocIndex:3},{value:"style",paraId:12,tocIndex:3},{value:" 配置，可以查看 ",paraId:12,tocIndex:3},{value:"样式（Style）",paraId:13,tocIndex:3},{value:" 介绍页面。",paraId:12,tocIndex:3},{value:"更多的案例，可以查看 ",paraId:14,tocIndex:4},{value:"图表示例 - 数据标注",paraId:15,tocIndex:4},{value:" 页面。",paraId:14,tocIndex:4}]},34423:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(6668);const t=[{value:"使用一组 ",paraId:0,tocIndex:0},{value:"y",paraId:0,tocIndex:0},{value:"(y1, y2) 来定位一个绘制于 y 轴的矩形区域，常用于对特定区域进行高亮显示。",paraId:0,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  width: 600,\n  height: 470,\n  type: 'view',\n  children: [\n    {\n      type: 'point',\n      data: {\n        type: 'fetch',\n        value:\n          'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n      },\n      encode: { x: 'height', y: 'weight', color: 'gender' },\n    },\n    { type: 'rangeY', data: [{ y: [54, 72] }], encode: { y: 'y' } },\n  ],\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"此外，rangeY 还提供了简便写法：",paraId:2,tocIndex:0},{value:"chart\n  .rangeY()\n  .data([\n    [54, 60],\n    [65, 72],\n  ])\n  .encode('y', (d) => d);\n\n// it can be simplified as follows:\nchart.rangeY().data([\n  [54, 60],\n  [65, 72],\n]);\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"必选",paraId:4,tocIndex:1},{value:"encode",paraId:4,tocIndex:1},{value:"配置 ",paraId:4,tocIndex:1},{value:"rangeY",paraId:4,tocIndex:1},{value:" 标记的视觉通道，包括",paraId:4,tocIndex:1},{value:"x",paraId:4,tocIndex:1},{value:"、",paraId:4,tocIndex:1},{value:"y",paraId:4,tocIndex:1},{value:"、",paraId:4,tocIndex:1},{value:"color",paraId:4,tocIndex:1},{value:"、",paraId:4,tocIndex:1},{value:"shape",paraId:4,tocIndex:1},{value:"等，用于指定视觉元素属性和数据之间的关系",paraId:4,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"✓",paraId:4,tocIndex:1},{value:"style",paraId:4,tocIndex:1},{value:"配置 ",paraId:4,tocIndex:1},{value:"rangeY",paraId:4,tocIndex:1},{value:" 标记的图形样式",paraId:4,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"配置 ",paraId:7,tocIndex:2},{value:"rangeY",paraId:7,tocIndex:2},{value:" 标记的视觉通道。",paraId:7,tocIndex:2},{value:"属性",paraId:8,tocIndex:2},{value:"描述",paraId:8,tocIndex:2},{value:"类型",paraId:8,tocIndex:2},{value:"默认值",paraId:8,tocIndex:2},{value:"必选",paraId:8,tocIndex:2},{value:"y",paraId:8,tocIndex:2},{value:"绑定 ",paraId:8,tocIndex:2},{value:"rangeY",paraId:8,tocIndex:2},{value:" 标记的 ",paraId:8,tocIndex:2},{value:"y",paraId:8,tocIndex:2},{value:" 属性通道，一般是 ",paraId:8,tocIndex:2},{value:"data",paraId:8,tocIndex:2},{value:" 中的时间或有序名词字段",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"✓",paraId:8,tocIndex:2},{value:"更多的 ",paraId:9,tocIndex:2},{value:"encode",paraId:9,tocIndex:2},{value:" 配置，可以查看 ",paraId:9,tocIndex:2},{value:"编码（Encode）",paraId:10,tocIndex:2},{value:" 介绍页面。",paraId:9,tocIndex:2},{value:"属性",paraId:11,tocIndex:3},{value:"描述",paraId:11,tocIndex:3},{value:"类型",paraId:11,tocIndex:3},{value:"默认值",paraId:11,tocIndex:3},{value:"必选",paraId:11,tocIndex:3},{value:"fill",paraId:11,tocIndex:3},{value:"图形的填充色",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<string>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"fillOpacity",paraId:11,tocIndex:3},{value:"图形的填充透明度",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"stroke",paraId:11,tocIndex:3},{value:"图形的描边",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<string>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"strokeOpacity",paraId:11,tocIndex:3},{value:"描边透明度",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"lineWidth",paraId:11,tocIndex:3},{value:"图形描边的宽度",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"lineDash",paraId:11,tocIndex:3},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:11,tocIndex:3},{value:"[number,number]",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<[number, number]>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"opacity",paraId:11,tocIndex:3},{value:"图形的整体透明度",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"shadowColor",paraId:11,tocIndex:3},{value:"图形阴影颜色",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<string>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"shadowBlur",paraId:11,tocIndex:3},{value:"图形阴影的高斯模糊系数",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"shadowOffsetX",paraId:11,tocIndex:3},{value:"设置阴影距图形的水平距离",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"shadowOffsetY",paraId:11,tocIndex:3},{value:"设置阴影距图形的垂直距离",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"cursor",paraId:11,tocIndex:3},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<string>",paraId:11,tocIndex:3},{value:"'default'",paraId:11,tocIndex:3},{value:"更多的 ",paraId:12,tocIndex:3},{value:"style",paraId:12,tocIndex:3},{value:" 配置，可以查看 ",paraId:12,tocIndex:3},{value:"样式（Style）",paraId:13,tocIndex:3},{value:" 介绍页面。",paraId:12,tocIndex:3},{value:"更多的案例，可以查看 ",paraId:14,tocIndex:4},{value:"图表示例 - 数据标注",paraId:15,tocIndex:4},{value:" 页面。",paraId:14,tocIndex:4}]},61422:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(97876);const t=[{value:"rect",paraId:0,tocIndex:0},{value:" 是用于绘制矩形标记的核心图表元素，它通过定义矩形的起点、终点、宽度、高度以及其他图形属性（如颜色、样式），实现不同的可视化需求。",paraId:0,tocIndex:0},{value:"rect",paraId:0,tocIndex:0},{value:"可以根据绑定的数据动态调整矩形的位置、大小和样式，从而直观地展示数据的分布、对比关系或密度信息。",paraId:0,tocIndex:0},{value:"rect",paraId:0,tocIndex:0},{value:"广泛应用于柱状图、热力图、矩阵图等场景。",paraId:0,tocIndex:0},{value:"rect",paraId:1,tocIndex:0},{value:"核心功能特点：",paraId:1,tocIndex:0},{value:"绘制矩形形状",paraId:2,tocIndex:0},{value:"：rect 是构建矩形类图表的基础单元，可以用来构建柱、块、热力等图表。\n每个矩形单元通过映射数据的数值或分类信息，展示具体数据内容。",paraId:2,tocIndex:0},{value:"丰富的编码映射",paraId:2,tocIndex:0},{value:"：用户可以自由将数据字段映射到矩形的 X 轴、Y 轴、大小、颜色等视觉属性。\n提供灵活的自定义能力，通过字段和样式的结合，生成多种样式的矩形图形。",paraId:2,tocIndex:0},{value:"高扩展性和互动性",paraId:2,tocIndex:0},{value:"：支持交互功能（如点击、高亮、缩放等），提升图形与用户间的动态互动。\n适用于不同领域的矩形可视化需求，如栅格图（heatmap）、数据密度分布图等。",paraId:2,tocIndex:0},{value:"与 G2 生态无缝衔接",paraId:2,tocIndex:0},{value:"：作为 G2 Mark 系统的一部分，rect 与其他组件（如 line、point 等）能够自由组合，满足复杂场景的数据可视化需求。",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'rect',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n  },\n  encode: { x: 'weight', y: 'height', color: 'sex' },\n  transform: [{ type: 'bin', opacity: 'count' }],\n  style: { inset: 0.5 },\n});\n\nchart.render(); // 渲染图标\n",paraId:3,tocIndex:1},{value:"更多的案例，可以查看",paraId:4,tocIndex:1},{value:"图表示例",paraId:5,tocIndex:1},{value:"页面。",paraId:4,tocIndex:1},{value:"属性",paraId:6,tocIndex:2},{value:"描述",paraId:6,tocIndex:2},{value:"类型",paraId:6,tocIndex:2},{value:"默认值",paraId:6,tocIndex:2},{value:"必选",paraId:6,tocIndex:2},{value:"encode",paraId:6,tocIndex:2},{value:"配置 ",paraId:6,tocIndex:2},{value:"rect",paraId:6,tocIndex:2},{value:" 标记的视觉通道，包括",paraId:6,tocIndex:2},{value:"x",paraId:6,tocIndex:2},{value:"、",paraId:6,tocIndex:2},{value:"y",paraId:6,tocIndex:2},{value:"、",paraId:6,tocIndex:2},{value:"color",paraId:6,tocIndex:2},{value:"等，用于指定视觉元素属性和数据之间的关系",paraId:6,tocIndex:2},{value:"encode",paraId:7,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"✓",paraId:6,tocIndex:2},{value:"transform",paraId:6,tocIndex:2},{value:"配置 ",paraId:6,tocIndex:2},{value:"rect",paraId:6,tocIndex:2},{value:" 数据转换操作（如分箱、排序、过滤等）。",paraId:6,tocIndex:2},{value:"transform",paraId:8,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"style",paraId:6,tocIndex:2},{value:"配置 ",paraId:6,tocIndex:2},{value:"rect",paraId:6,tocIndex:2},{value:" 图形样式",paraId:6,tocIndex:2},{value:"style",paraId:9,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"配置 ",paraId:10,tocIndex:3},{value:"rect",paraId:10,tocIndex:3},{value:" 标记的视觉通道，定义数据字段与视觉属性之间映射关系的重要配置，它决定了数据如何转化为视觉表现。",paraId:10,tocIndex:3},{value:"属性",paraId:11,tocIndex:3},{value:"描述",paraId:11,tocIndex:3},{value:"类型",paraId:11,tocIndex:3},{value:"默认值",paraId:11,tocIndex:3},{value:"必选",paraId:11,tocIndex:3},{value:"color",paraId:11,tocIndex:3},{value:"绑定 ",paraId:11,tocIndex:3},{value:"rect",paraId:11,tocIndex:3},{value:" 标记的 ",paraId:11,tocIndex:3},{value:"color",paraId:11,tocIndex:3},{value:" 属性通道，如果将数据字段映射到颜色通道，会对数据进行分组，将数据拆分成多个不同颜色的区域",paraId:11,tocIndex:3},{value:"encode",paraId:12,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"shape",paraId:11,tocIndex:3},{value:"绑定 ",paraId:11,tocIndex:3},{value:"rect",paraId:11,tocIndex:3},{value:" 标记的 ",paraId:11,tocIndex:3},{value:"shape",paraId:11,tocIndex:3},{value:" 属性通道，改变图形标记的绘制形状",paraId:11,tocIndex:3},{value:"encode",paraId:13,tocIndex:3},{value:"'rect'",paraId:11,tocIndex:3},{value:"color",paraId:14,tocIndex:3},{value:"color 视觉通道影响 ",paraId:15,tocIndex:3},{value:"rect",paraId:15,tocIndex:3},{value:" 图形标记的填充颜色（在应用某些空心形状的时候，例如 hollow ，则会改变图形的 描边颜色）。在点图上应用时一般映射分类字段，对数据进行分组。",paraId:15,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'rect',\n  data: [\n    { x: 1, y: 1, type: 'type1' },\n    { x: 1, y: 2, type: 'type2' },\n    { x: 2, y: 1, type: 'type3' },\n    { x: 2, y: 2, type: 'type1' },\n  ],\n  transform: [{ type: 'bin' }],\n  encode: { shape: 'rect', x: 'x', y: 'y', color: 'type' },\n  style: { inset: 0.5 },\n});\n\nchart.render(); // 渲染图标\n",paraId:16,tocIndex:3},{value:"shape",paraId:17,tocIndex:3},{value:"通过 ",paraId:18,tocIndex:3},{value:"encode",paraId:18,tocIndex:3},{value:" 的 ",paraId:18,tocIndex:3},{value:"shape",paraId:18,tocIndex:3},{value:" 属性，您可以指定单元格的几何形状。shape 决定了每个单元格在画布上以什么样的形状渲染出来。",paraId:18,tocIndex:3},{value:"shape",paraId:18,tocIndex:3},{value:" 标记的支持的形状如下：",paraId:18,tocIndex:3},{value:"图形",paraId:19,tocIndex:3},{value:"描述",paraId:19,tocIndex:3},{value:"rect",paraId:19,tocIndex:3},{value:"矩形",paraId:19,tocIndex:3},{value:"hollow",paraId:19,tocIndex:3},{value:"空心矩形",paraId:19,tocIndex:3},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\nconst shapeMap = [\n  {\n    shape: 'rect',\n    label: '矩形',\n  },\n  {\n    shape: 'hollow',\n    label: '空心矩形',\n  },\n];\n\nchart.options({\n  type: 'rect',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n  },\n  encode: { shape: 'rect', x: 'weight', y: 'height', color: 'sex' },\n  transform: [{ type: 'bin', opacity: 'count' }],\n  style: { inset: 0.5 },\n});\n\nconst handleSetShape = (shape) => {\n  // 设置选中的坐标系\n  chart.options({\n    encode: { shape },\n  });\n  chart.render(); // 重新渲染图表\n};\n\n// 插入Encode-Color 选择器\nconst selectorContainer = document.createElement('div');\nselectorContainer.textContent = '选择形状 ';\nconst selector = document.createElement('select');\nselector.innerHTML = shapeMap.map(\n  (shape, index) =>\n    `<option value=\"${shape.shape}\" ${index === 0 ? 'selected' : ''}>${\n      shape.label\n    }</option>`,\n);\nselector.onchange = (e) => {\n  handleSetShape(e.target.value);\n};\nselectorContainer.appendChild(selector);\ncontainer.insertBefore(selectorContainer, container.childNodes[0]);\n\nchart.render();\n",paraId:20,tocIndex:3},{value:"更多的",paraId:21,tocIndex:3},{value:"encode",paraId:21,tocIndex:3},{value:"配置，可以查查看 ",paraId:21,tocIndex:3},{value:"encode",paraId:22,tocIndex:3},{value:" 介绍页面。",paraId:21,tocIndex:3},{value:"transform",paraId:23,tocIndex:4},{value:" 是用于数据转换的核心配置项，它允许在数据绑定到图形标记之前对原始数据进行预处理。通过对数据的加工，生成更适合可视化的结构化数据，从而更清晰地表达数据分布、密度或统计特征。",paraId:23,tocIndex:4},{value:"常用的转换类型 type 有以下几个：",paraId:24,tocIndex:4},{value:"bin",paraId:25,tocIndex:4},{value:": 将连续数据分箱，生成直方图矩形",paraId:25,tocIndex:4},{value:"stackY",paraId:25,tocIndex:4},{value:": 垂直方向堆叠矩形，自动计算每个分类的堆叠高度",paraId:25,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'rect',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n  },\n  encode: { x: 'weight', color: 'sex' },\n  transform: [\n    { type: 'binX', y: 'count' },\n    { type: 'stackY', orderBy: 'series' },\n  ],\n});\n\nchart.render();\n",paraId:26,tocIndex:4},{value:"更多的",paraId:27,tocIndex:4},{value:"transform",paraId:27,tocIndex:4},{value:"配置，可以查看 ",paraId:27,tocIndex:4},{value:"transform",paraId:28,tocIndex:4},{value:" 介绍页面。",paraId:27,tocIndex:4},{value:"style",paraId:29,tocIndex:5},{value:" 用于设置图表元素的外观样式，包括填充颜色、边框样式、阴影效果等。",paraId:29,tocIndex:5},{value:"属性",paraId:30,tocIndex:5},{value:"描述",paraId:30,tocIndex:5},{value:"类型",paraId:30,tocIndex:5},{value:"默认值",paraId:30,tocIndex:5},{value:"radius",paraId:30,tocIndex:5},{value:"矩形的四个圆角大小",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"0",paraId:30,tocIndex:5},{value:"radiusTopLeft",paraId:30,tocIndex:5},{value:"左上角的圆角",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"0",paraId:30,tocIndex:5},{value:"radiusTopRight",paraId:30,tocIndex:5},{value:"右上角的圆角",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"0",paraId:30,tocIndex:5},{value:"radiusBottomRight",paraId:30,tocIndex:5},{value:"右下角的圆角",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"0",paraId:30,tocIndex:5},{value:"radiusBottomLeft",paraId:30,tocIndex:5},{value:"左下角的圆角",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"0",paraId:30,tocIndex:5},{value:"inset",paraId:30,tocIndex:5},{value:"矩形四个方向的内边距",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"0",paraId:30,tocIndex:5},{value:"insetLeft",paraId:30,tocIndex:5},{value:"左边的内间距",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"0",paraId:30,tocIndex:5},{value:"insetRight",paraId:30,tocIndex:5},{value:"右边的内间距",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"0",paraId:30,tocIndex:5},{value:"insetBottom",paraId:30,tocIndex:5},{value:"下面的内间距",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"0",paraId:30,tocIndex:5},{value:"insetTop",paraId:30,tocIndex:5},{value:"上面的内间距",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"0",paraId:30,tocIndex:5},{value:"fill",paraId:30,tocIndex:5},{value:"图形的填充色",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => string",paraId:30,tocIndex:5},{value:"-",paraId:30,tocIndex:5},{value:"fillOpacity",paraId:30,tocIndex:5},{value:"图形的填充透明度",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"-",paraId:30,tocIndex:5},{value:"stroke",paraId:30,tocIndex:5},{value:"图形的描边",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => string",paraId:30,tocIndex:5},{value:"-",paraId:30,tocIndex:5},{value:"strokeOpacity",paraId:30,tocIndex:5},{value:"描边透明度",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"-",paraId:30,tocIndex:5},{value:"lineWidth",paraId:30,tocIndex:5},{value:"图形描边的宽度",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"-",paraId:30,tocIndex:5},{value:"lineDash",paraId:30,tocIndex:5},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:30,tocIndex:5},{value:"[number,number] |(datum, index, data, column) => [number, number]",paraId:30,tocIndex:5},{value:"-",paraId:30,tocIndex:5},{value:"opacity",paraId:30,tocIndex:5},{value:"图形的整体透明度",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"-",paraId:30,tocIndex:5},{value:"shadowColor",paraId:30,tocIndex:5},{value:"图形阴影颜色",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => string",paraId:30,tocIndex:5},{value:"-",paraId:30,tocIndex:5},{value:"shadowBlur",paraId:30,tocIndex:5},{value:"图形阴影的高斯模糊系数",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"-",paraId:30,tocIndex:5},{value:"shadowOffsetX",paraId:30,tocIndex:5},{value:"设置阴影距图形的水平距离",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"-",paraId:30,tocIndex:5},{value:"shadowOffsetY",paraId:30,tocIndex:5},{value:"设置阴影距图形的垂直距离",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"-",paraId:30,tocIndex:5},{value:"cursor",paraId:30,tocIndex:5},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => string",paraId:30,tocIndex:5},{value:"'default'",paraId:30,tocIndex:5},{value:"尝试一下",paraId:31,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart\n  .rect()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n  })\n  .encode('x', 'weight')\n  .encode('color', 'sex')\n  .transform({ type: 'binX', y: 'count' })\n  .transform({ type: 'stackY', orderBy: 'series' })\n  .style('inset', 0.5);\n\nchart.render();\n\n",paraId:32,tocIndex:5},{value:"更多的",paraId:33,tocIndex:5},{value:"style",paraId:33,tocIndex:5},{value:"配置，可以查看 ",paraId:33,tocIndex:5},{value:"style",paraId:34,tocIndex:5},{value:" 介绍页面。",paraId:33,tocIndex:5}]},55885:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(67739);const t=[{value:"形状图（ ",paraId:0,tocIndex:0},{value:"shape",paraId:0,tocIndex:0},{value:" ）图形标记是 G2 中一种特殊的 ",paraId:0,tocIndex:0},{value:"Mark",paraId:0,tocIndex:0},{value:" 类型，通常用来在图表上绘制静态的自定义图形，具有较高的灵活性和自由度，",paraId:0,tocIndex:0},{value:"shape",paraId:0,tocIndex:0},{value:" 标记可以用于添加自定义注解、水印、徽章等场景，是实现图表个性化的重要工具。在使用 ",paraId:0,tocIndex:0},{value:"shape",paraId:0,tocIndex:0},{value:" 绘制图形时，可以从图表上下文中获取 ",paraId:0,tocIndex:0},{value:"document",paraId:0,tocIndex:0},{value:" 对象，随后使用 ",paraId:0,tocIndex:0},{value:"document.createElement",paraId:0,tocIndex:0},{value:" 创建完成注册的图形。更复杂的场景，开发者可能需要了解 ",paraId:0,tocIndex:0},{value:"G 自定义图形",paraId:0,tocIndex:0},{value:" 的相关概念。",paraId:0,tocIndex:0},{value:"例如，有时需要在图表中的特定数据点添加标记来突出重要信息。以下示例展示了如何使用 ",paraId:1,tocIndex:0},{value:"shape",paraId:1,tocIndex:0},{value:" 标记在折线图的关键点上添加自定义注解，我们通过创建基础图形 ",paraId:1,tocIndex:0},{value:"Circle",paraId:1,tocIndex:0},{value:" 和基础图形 ",paraId:1,tocIndex:0},{value:"Text",paraId:1,tocIndex:0},{value:"，结合 ",paraId:1,tocIndex:0},{value:"场景图",paraId:1,tocIndex:0},{value:" 能力实现了一个自定义注解。",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst notes = (style, context) => {\n  const { x, y } = style;\n  const { document } = context;\n  const g = document.createElement('g', {});\n  const c1 = document.createElement('circle', {\n    style: {\n      cx: x,\n      cy: y,\n      r: 3,\n      fill: 'red',\n    },\n  });\n  const c2 = document.createElement('circle', {\n    style: {\n      cx: x,\n      cy: y,\n      r: 5,\n      lineWidth: 8,\n      stroke: 'red',\n      opacity: 0.3,\n    },\n  });\n  const text = document.createElement('text', {\n    style: {\n      x: x + 12,\n      y,\n      text: '最高降雨量',\n      fontSize: 12,\n      textAlign: 'left',\n      textBaseline: 'middle',\n    },\n  });\n  g.appendChild(c1);\n  g.appendChild(c2);\n  g.appendChild(text);\n  return g;\n};\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  children: [\n    {\n      type: 'line',\n      data: [\n        { month: 'Jan.', rainfall: 18.9 },\n        { month: 'Feb.', rainfall: 28.8 },\n        { month: 'Mar.', rainfall: 39.3 },\n        { month: 'Apr.', rainfall: 81.4 },\n        { month: 'May', rainfall: 47 },\n        { month: 'Jun.', rainfall: 20.3 },\n      ],\n      encode: {\n        x: 'month',\n        y: 'rainfall',\n      },\n    },\n    {\n      type: 'shape',\n      data: [{ month: 'Apr.', rainfall: 81.4 }],\n      encode: {\n        x: 'month',\n        y: 'rainfall',\n      },\n      style: {\n        render: (style, context) => notes(style, context),\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"更多的案例，可以查看",paraId:3,tocIndex:0},{value:"图形标注 - 徽章水印",paraId:4,tocIndex:0},{value:"页面。",paraId:3,tocIndex:0},{value:"属性",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"类型",paraId:5,tocIndex:1},{value:"默认值",paraId:5,tocIndex:1},{value:"必选",paraId:5,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"配置 ",paraId:5,tocIndex:1},{value:"shape",paraId:5,tocIndex:1},{value:" 标记的视觉通道，包括",paraId:5,tocIndex:1},{value:"x",paraId:5,tocIndex:1},{value:"、",paraId:5,tocIndex:1},{value:"y",paraId:5,tocIndex:1},{value:"，用于指定视觉元素属性和数据之间的关系",paraId:5,tocIndex:1},{value:"encode",paraId:6,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"style",paraId:5,tocIndex:1},{value:"配置 ",paraId:5,tocIndex:1},{value:"shape",paraId:5,tocIndex:1},{value:" 标记的图形样式，包括",paraId:5,tocIndex:1},{value:"x",paraId:5,tocIndex:1},{value:"、",paraId:5,tocIndex:1},{value:"y",paraId:5,tocIndex:1},{value:"、",paraId:5,tocIndex:1},{value:"render",paraId:5,tocIndex:1},{value:"等",paraId:5,tocIndex:1},{value:"style",paraId:7,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"✓",paraId:5,tocIndex:1},{value:"配置 ",paraId:8,tocIndex:2},{value:"shape",paraId:8,tocIndex:2},{value:" 标记的视觉通道，包括 ",paraId:8,tocIndex:2},{value:"x",paraId:8,tocIndex:2},{value:"、",paraId:8,tocIndex:2},{value:"y",paraId:8,tocIndex:2},{value:"，用于指定视觉元素属性和数据之间的关系。",paraId:8,tocIndex:2},{value:"属性",paraId:9,tocIndex:2},{value:"描述",paraId:9,tocIndex:2},{value:"类型",paraId:9,tocIndex:2},{value:"默认值",paraId:9,tocIndex:2},{value:"必选",paraId:9,tocIndex:2},{value:"x",paraId:9,tocIndex:2},{value:"绑定 ",paraId:9,tocIndex:2},{value:"shape",paraId:9,tocIndex:2},{value:" 标记的 ",paraId:9,tocIndex:2},{value:"x",paraId:9,tocIndex:2},{value:" 属性通道，一般是 ",paraId:9,tocIndex:2},{value:"data",paraId:9,tocIndex:2},{value:" 中的数值或字符，用于设置标记的 ",paraId:9,tocIndex:2},{value:"x",paraId:9,tocIndex:2},{value:" 位置",paraId:9,tocIndex:2},{value:"encode",paraId:10,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"若 ",paraId:9,tocIndex:2},{value:"style",paraId:11,tocIndex:2},{value:" 中未配置，则为 ✓",paraId:9,tocIndex:2},{value:"y",paraId:9,tocIndex:2},{value:"绑定 ",paraId:9,tocIndex:2},{value:"shape",paraId:9,tocIndex:2},{value:" 标记的 ",paraId:9,tocIndex:2},{value:"y",paraId:9,tocIndex:2},{value:" 属性通道，一般是 ",paraId:9,tocIndex:2},{value:"data",paraId:9,tocIndex:2},{value:" 中的数值或字符，用于设置标记的 ",paraId:9,tocIndex:2},{value:"y",paraId:9,tocIndex:2},{value:" 位置",paraId:9,tocIndex:2},{value:"encode",paraId:12,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"若 ",paraId:9,tocIndex:2},{value:"style",paraId:13,tocIndex:2},{value:" 中未配置，则为 ✓",paraId:9,tocIndex:2},{value:"配置 ",paraId:14,tocIndex:3},{value:"shape",paraId:14,tocIndex:3},{value:" 标记的图形样式。",paraId:14,tocIndex:3},{value:"属性",paraId:15,tocIndex:3},{value:"描述",paraId:15,tocIndex:3},{value:"类型",paraId:15,tocIndex:3},{value:"默认值",paraId:15,tocIndex:3},{value:"必选",paraId:15,tocIndex:3},{value:"x",paraId:15,tocIndex:3},{value:"统一设置 ",paraId:15,tocIndex:3},{value:"shape",paraId:15,tocIndex:3},{value:" 标记的 x 位置（相对定位的百分比 | 绝对定位的像素值），优先级最高",paraId:15,tocIndex:3},{value:"(string | number)",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"若 ",paraId:15,tocIndex:3},{value:"encode",paraId:16,tocIndex:3},{value:" 中未配置，则为 ✓",paraId:15,tocIndex:3},{value:"y",paraId:15,tocIndex:3},{value:"统一设置 ",paraId:15,tocIndex:3},{value:"shape",paraId:15,tocIndex:3},{value:" 标记的 y 位置（相对定位的百分比 | 绝对定位的像素值），优先级最高",paraId:15,tocIndex:3},{value:"(string | number)",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"若 ",paraId:15,tocIndex:3},{value:"encode",paraId:17,tocIndex:3},{value:" 中未配置，则为 ✓",paraId:15,tocIndex:3},{value:"render",paraId:15,tocIndex:3},{value:"自定义图形渲染函数，接收样式 style 和 上下文 context 参数，返回 G 的 DisplayObject",paraId:15,tocIndex:3},{value:"(style, context) => DisplayObject",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"✓",paraId:15,tocIndex:3},{value:"{ ...rest }",paraId:15,tocIndex:3},{value:"自定义图形的额外参数，都会作为 ",paraId:15,tocIndex:3},{value:"render",paraId:15,tocIndex:3},{value:" 函数的 style 参数",paraId:15,tocIndex:3},{value:"object",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"在图表中添加水印可以保护数据的安全性和知识产权。以下示例展示了如何使用 ",paraId:18,tocIndex:5},{value:"shape",paraId:18,tocIndex:5},{value:" 标记在图表上添加水印。",paraId:18,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// 定义水印渲染方法\nconst watermark = (style, context) => {\n  const { document, canvas } = context;\n  const { width, height } = canvas.context.config;\n  const g = document.createElement('g', {});\n  // 创建重复的水印文字\n  const spacing = 120; // 水印间距\n  for (let x = 0; x < width; x += spacing) {\n    for (let y = 0; y < height; y += spacing) {\n      const text = document.createElement('text', {\n        style: {\n          x: x,\n          y: y,\n          text: 'AntV G2',\n          transformOrigin: 'center',\n          transform: 'rotate(-30)',\n          fontSize: 16,\n          fill: '#000',\n          textAlign: 'center',\n          textBaseline: 'middle',\n          fillOpacity: 0.2,\n        },\n      });\n      g.appendChild(text);\n    }\n  }\n  return g;\n};\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  children: [\n    // 创建饼图\n    {\n      type: 'interval',\n      zIndex: 2,\n      data: [\n        { item: '分类一', count: 40 },\n        { item: '分类二', count: 21 },\n        { item: '分类三', count: 17 },\n        { item: '分类四', count: 13 },\n        { item: '分类五', count: 9 },\n      ],\n      encode: { y: 'count', color: 'item' },\n      transform: [{ type: 'stackY' }],\n      coordinate: {\n        type: 'theta',\n        outerRadius: 0.8,\n      },\n    },\n    // 添加全图水印\n    {\n      type: 'shape',\n      zIndex: 1,\n      style: {\n        x: 0,\n        y: 0,\n        render: (style, context) => watermark(style, context),\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:19,tocIndex:5}]},91251:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(87918);const t=[{value:"旭日图（ ",paraId:0,tocIndex:0},{value:"sunburst",paraId:0,tocIndex:0},{value:" ）作为一种强大且直观的数据可视化手段，在多种领域中的应用及其优势与局限。通过环形布局，旭日图有效地展现了数据间的层次关系和比例分配，尤其适用于那些具有明确父子关系的数据集。尽管存在一些限制，但其独特的设计使其成为商业分析、地理学研究等领域不可或缺的工具之一。融合了饼图和树状图的优点，采用圆形分割的方式来展示多层嵌套的信息结构。这种图表不仅能够清晰地反映出不同组别之间的相对大小，还能保持良好的视觉效果。比起树图，具备节省空间、整体情况更加直观等优点。",paraId:0,tocIndex:0},{value:"sunburst",paraId:1,tocIndex:0},{value:" 通过 ",paraId:1,tocIndex:0},{value:"g2ExtensionPlot",paraId:1,tocIndex:0},{value:" 中以 ",paraId:1,tocIndex:0},{value:"rect",paraId:1,tocIndex:0},{value:" 为基础实现，内部实现下钻事件、极坐标、数据转化、样式优化等。",paraId:1,tocIndex:0},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'sunburst',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  },\n  encode: {\n    value: 'sum',\n  },\n  labels: [\n    {\n      text: 'name',\n      transform: [\n        {\n          type: 'overflowHide',\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"更多的案例，可以查看",paraId:3,tocIndex:0},{value:"图表示例 - 旭日图",paraId:4,tocIndex:0},{value:" 页面。",paraId:3,tocIndex:0},{value:"属性",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"类型",paraId:5,tocIndex:1},{value:"默认值",paraId:5,tocIndex:1},{value:"必选",paraId:5,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"配置 ",paraId:5,tocIndex:1},{value:"sunburst",paraId:5,tocIndex:1},{value:" 标记的视觉通道，包括 ",paraId:5,tocIndex:1},{value:"value",paraId:5,tocIndex:1},{value:" 等，用于指定视觉元素属性和数据之间的关系",paraId:5,tocIndex:1},{value:"encode",paraId:6,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"✓",paraId:5,tocIndex:1},{value:"coordinate",paraId:5,tocIndex:1},{value:"配置 ",paraId:5,tocIndex:1},{value:"sunburst",paraId:5,tocIndex:1},{value:" 标记的坐标系，坐标系会执行一系列点转换，从而改变标记的空间展示形式",paraId:5,tocIndex:1},{value:"coordinate",paraId:7,tocIndex:1},{value:"{type: 'polar' }",paraId:5,tocIndex:1},{value:"interaction",paraId:5,tocIndex:1},{value:"配置 ",paraId:5,tocIndex:1},{value:"sunburst",paraId:5,tocIndex:1},{value:" 标记的交互配置，内置了 ",paraId:5,tocIndex:1},{value:"drillDown",paraId:5,tocIndex:1},{value:" 下钻配置",paraId:5,tocIndex:1},{value:"interaction",paraId:8,tocIndex:1},{value:"{ drillDown: true }",paraId:5,tocIndex:1},{value:"style",paraId:5,tocIndex:1},{value:"配置 ",paraId:5,tocIndex:1},{value:"sunburst",paraId:5,tocIndex:1},{value:" 标记的图形样式",paraId:5,tocIndex:1},{value:"style",paraId:9,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"配置 ",paraId:10,tocIndex:2},{value:"sunburst",paraId:10,tocIndex:2},{value:" 标记的视觉通道。",paraId:10,tocIndex:2},{value:"属性",paraId:11,tocIndex:2},{value:"描述",paraId:11,tocIndex:2},{value:"类型",paraId:11,tocIndex:2},{value:"默认值",paraId:11,tocIndex:2},{value:"必选",paraId:11,tocIndex:2},{value:"value",paraId:11,tocIndex:2},{value:"绑定 ",paraId:11,tocIndex:2},{value:"sunburst",paraId:11,tocIndex:2},{value:" 标记的 ",paraId:11,tocIndex:2},{value:"value",paraId:11,tocIndex:2},{value:" 属性通道，用于数据 ",paraId:11,tocIndex:2},{value:"data",paraId:11,tocIndex:2},{value:" 中的数值字段",paraId:11,tocIndex:2},{value:"encode",paraId:12,tocIndex:2},{value:"-",paraId:11,tocIndex:2},{value:"✓",paraId:11,tocIndex:2},{value:"color",paraId:11,tocIndex:2},{value:"绑定 ",paraId:11,tocIndex:2},{value:"sunburst",paraId:11,tocIndex:2},{value:" 标记的 ",paraId:11,tocIndex:2},{value:"color",paraId:11,tocIndex:2},{value:" 属性通道，如果将数据字段映射到颜色通道，会对数据进行分组，将数据拆分成多个不同颜色的图形，一般用来配置堆叠柱状图等。内置配置为 ",paraId:11,tocIndex:2},{value:"ancestor-node",paraId:11,tocIndex:2},{value:", 用于区分不同的路径分组",paraId:11,tocIndex:2},{value:"encode",paraId:13,tocIndex:2},{value:"ancestor-node",paraId:11,tocIndex:2},{value:"sunburst",paraId:14,tocIndex:3},{value:" 标记的位置视觉通道需要 ",paraId:14,tocIndex:3},{value:"value",paraId:14,tocIndex:3},{value:" 字段的值，在 ",paraId:14,tocIndex:3},{value:"data",paraId:14,tocIndex:3},{value:" 中，会通过字段计算每一个分组中的数值。内部会把树形结构数据，转化为平铺的 ",paraId:14,tocIndex:3},{value:"rect",paraId:14,tocIndex:3},{value:" 需要的数据。",paraId:14,tocIndex:3},{value:"{\n  type: 'sunburst',\n  data: {\n    value: {\n      name: 'root',\n      children: [\n        {\n          name: '分组1', // 自动计算 value 为 220\n          children: [\n            { name: '分组1-1', count: 100 },\n            { name: '分组1-2', count: '120' },\n          ],\n        },\n        {\n          name: '分组2', // 自动计算 value 为 190\n          count: 220, // 为了映射合理，不会采用自身的 value\n          children: [\n            { name: '分组2-1', count: 'aaa' }, // 不符合数值的参数\n            { name: '分组2-2', count: '190' },\n          ],\n        },\n      ],\n    },\n  },\n  encode: { value: 'count' },\n}\n",paraId:15,tocIndex:3},{value:"树形结构数据内部转化为平铺数据：",paraId:16,tocIndex:3},{value:"{\n  data: [\n    { 'ancestor-node': '分组1', path: '分组1', value: 220, x: [0, 0.536...], y: [0.333.., 0.666...], depth: 1, ... },\n    { 'ancestor-node': '分组2', path: '分组2', value: 190, x: [0.536..., 1], y: [0.333.., 0.666...], depth: 1, ... },\n    { 'ancestor-node': '分组1', path: '分组1 / 分组1-2', value: 120, x: [0, 0.292...],y: [0.666..., 1], depth: 2, ... },\n    { 'ancestor-node': '分组1', path: '分组1 / 分组1-1', value: 100, ... },\n    { 'ancestor-node': '分组2', path: '分组2 / 分组2-2', value: 190, ... },\n    { 'ancestor-node': '分组2', path: '分组2 / 分组2-1', value: 0, ... }, // 不符合数值默认为 0\n  ],\n}\n",paraId:17,tocIndex:3},{value:"color",paraId:18,tocIndex:4},{value:" 视觉通道影响 ",paraId:18,tocIndex:4},{value:"sunburst",paraId:18,tocIndex:4},{value:" 图形标记的填充颜色。在区间图上应用时一般映射分类字段，对数据进行分组，默认为内置 ",paraId:18,tocIndex:4},{value:"ancestor-node",paraId:18,tocIndex:4},{value:" 路径分组。",paraId:18,tocIndex:4},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'sunburst',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  },\n  encode: {\n    value: 'sum',\n    color: 'name',\n  },\n});\n\nchart.render();\n",paraId:19,tocIndex:4},{value:"尝试使用回调进行分组：",paraId:20,tocIndex:4},{value:"import { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...g2ExtensionPlot.plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'sunburst',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  },\n  encode: {\n    value: 'sum',\n    color: (data) => {\n      const paths = data.path.split(' / ');\n      return [paths[0], paths[1]].join('/');\n    },\n  },\n});\n\nchart.render();\n",paraId:21,tocIndex:4},{value:"sunburst",paraId:22,tocIndex:5},{value:" 默认配置了极坐标:",paraId:22,tocIndex:5},{value:"{\n  coordinate: {\n    type: 'polar',\n    innerRadius: 0.2,\n  }\n}\n",paraId:23,tocIndex:5},{value:"可外部配置极坐标坐标 ",paraId:24,tocIndex:5},{value:"polar",paraId:24,tocIndex:5},{value:" :",paraId:24,tocIndex:5},{value:"import { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...g2ExtensionPlot.plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'sunburst',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  },\n  encode: { value: 'sum' },\n  coordinate: {\n    type: 'polar',\n    innerRadius: 0.3,\n    outerRadius: 0.9,\n  },\n});\n\nchart.render();\n",paraId:25,tocIndex:5},{value:"还原为直角坐标系 ",paraId:26,tocIndex:5},{value:"cartesian",paraId:26,tocIndex:5},{value:" :",paraId:26,tocIndex:5},{value:"import { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...g2ExtensionPlot.plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'sunburst',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  },\n  encode: { value: 'sum' },\n  coordinate: { type: 'cartesian' },\n});\n\nchart.render();\n",paraId:27,tocIndex:5},{value:"sunburst",paraId:28,tocIndex:6},{value:" 默认配置内置了 ",paraId:28,tocIndex:6},{value:"drillDown",paraId:28,tocIndex:6},{value:" 交互事件,",paraId:28,tocIndex:6},{value:"import { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...g2ExtensionPlot.plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'sunburst',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  },\n  encode: { value: 'sum' },\n  interaction: {\n    drillDown: {\n      // 面包屑样式\n      breadCrumb: {\n        rootText: '总名称',\n        style: {\n          fontSize: '18px',\n          fill: '#333',\n        },\n        active: {\n          fill: 'red',\n        },\n      },\n      // 用于下钻后是否维持原来颜色\n      isFixedColor: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:29,tocIndex:6},{value:"style",paraId:30,tocIndex:7},{value:" 用于设置图表元素的外观样式，包括填充颜色、边框样式、阴影效果等。",paraId:30,tocIndex:7},{value:"属性",paraId:31,tocIndex:7},{value:"描述",paraId:31,tocIndex:7},{value:"类型",paraId:31,tocIndex:7},{value:"默认值",paraId:31,tocIndex:7},{value:"radius",paraId:31,tocIndex:7},{value:"矩形的四个圆角大小",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"0",paraId:31,tocIndex:7},{value:"radiusTopLeft",paraId:31,tocIndex:7},{value:"左上角的圆角",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"0",paraId:31,tocIndex:7},{value:"radiusTopRight",paraId:31,tocIndex:7},{value:"右上角的圆角",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"0",paraId:31,tocIndex:7},{value:"radiusBottomRight",paraId:31,tocIndex:7},{value:"右下角的圆角",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"0",paraId:31,tocIndex:7},{value:"radiusBottomLeft",paraId:31,tocIndex:7},{value:"左下角的圆角",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"0",paraId:31,tocIndex:7},{value:"inset",paraId:31,tocIndex:7},{value:"矩形四个方向的内边距",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"0",paraId:31,tocIndex:7},{value:"insetLeft",paraId:31,tocIndex:7},{value:"左边的内间距",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"0",paraId:31,tocIndex:7},{value:"insetRight",paraId:31,tocIndex:7},{value:"右边的内间距",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"0",paraId:31,tocIndex:7},{value:"insetBottom",paraId:31,tocIndex:7},{value:"下面的内间距",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"0",paraId:31,tocIndex:7},{value:"insetTop",paraId:31,tocIndex:7},{value:"上面的内间距",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"0",paraId:31,tocIndex:7},{value:"fill",paraId:31,tocIndex:7},{value:"图形的填充色",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => string",paraId:31,tocIndex:7},{value:"-",paraId:31,tocIndex:7},{value:"fillOpacity",paraId:31,tocIndex:7},{value:"图形的填充透明度",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"-",paraId:31,tocIndex:7},{value:"stroke",paraId:31,tocIndex:7},{value:"图形的描边",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => string",paraId:31,tocIndex:7},{value:"-",paraId:31,tocIndex:7},{value:"strokeOpacity",paraId:31,tocIndex:7},{value:"描边透明度",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"-",paraId:31,tocIndex:7},{value:"lineWidth",paraId:31,tocIndex:7},{value:"图形描边的宽度",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"-",paraId:31,tocIndex:7},{value:"lineDash",paraId:31,tocIndex:7},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:31,tocIndex:7},{value:"[number,number] |(datum, index, data, column) => [number, number]",paraId:31,tocIndex:7},{value:"-",paraId:31,tocIndex:7},{value:"opacity",paraId:31,tocIndex:7},{value:"图形的整体透明度",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"-",paraId:31,tocIndex:7},{value:"shadowColor",paraId:31,tocIndex:7},{value:"图形阴影颜色",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => string",paraId:31,tocIndex:7},{value:"-",paraId:31,tocIndex:7},{value:"shadowBlur",paraId:31,tocIndex:7},{value:"图形阴影的高斯模糊系数",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"-",paraId:31,tocIndex:7},{value:"shadowOffsetX",paraId:31,tocIndex:7},{value:"设置阴影距图形的水平距离",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"-",paraId:31,tocIndex:7},{value:"shadowOffsetY",paraId:31,tocIndex:7},{value:"设置阴影距图形的垂直距离",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"-",paraId:31,tocIndex:7},{value:"cursor",paraId:31,tocIndex:7},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => string",paraId:31,tocIndex:7},{value:"'default'",paraId:31,tocIndex:7},{value:"尝试一下",paraId:32,tocIndex:7},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart\n  .sunburst()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  })\n  .encode('value', 'sum')\n  .style({\n    radius: 8,\n    // 内置透明度 fillOpacity ，根据 0.85 ** depth 层级计算,\n    fillOpacity: (v) => v['fillOpacity'],\n    fill: (v) => {\n      if (v['path'] === '类别 3') return 'red';\n      if (v['name'] === '类别 2.1.1') return 'red';\n    },\n  });\n\nchart.render();\n\n",paraId:33,tocIndex:7},{value:"更多的",paraId:34,tocIndex:7},{value:"style",paraId:34,tocIndex:7},{value:"配置，可以查看 ",paraId:34,tocIndex:7},{value:"style",paraId:35,tocIndex:7},{value:" 介绍页面。",paraId:34,tocIndex:7}]},58242:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(18841);const t=[{value:"Text",paraId:0,tocIndex:0},{value:" 是一种用于在图表中绘制文本标记的图形元素。它允许用户直接在图表上添加文字注释、标签或其他说明性内容，从而增强数据可视化的效果和可读性。",paraId:0,tocIndex:0},{value:"Text",paraId:0,tocIndex:0},{value:" 标记具备有大量的视觉映射通道：",paraId:0,tocIndex:0},{value:"x",paraId:0,tocIndex:0},{value:"，",paraId:0,tocIndex:0},{value:"y",paraId:0,tocIndex:0},{value:"，",paraId:0,tocIndex:0},{value:"color",paraId:0,tocIndex:0},{value:"，",paraId:0,tocIndex:0},{value:"fontSize",paraId:0,tocIndex:0},{value:"，",paraId:0,tocIndex:0},{value:"rotate",paraId:0,tocIndex:0},{value:" 等，除此之外，还有大量的文本样式相关的配置，可以通过可视化映射的方式，让文本可视化具备有更强的表达性。一般用于几个场景：",paraId:0,tocIndex:0},{value:"文本可视化",paraId:1,tocIndex:0},{value:"数据的标注和辅助",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view', // 图表类型为 'view'\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  children: [\n    // 配置柱状图\n    {\n      type: 'interval',\n      encode: { x: 'letter', y: 'frequency' },\n      axis: { y: { labelFormatter: '.0%' } },\n    },\n    {\n      type: 'text', // 子视图类型为 'text'，表示文本标签\n      encode: { x: 'letter', y: 'frequency', text: 'frequency' }, // 数据编码配置，x 轴对应 'letter' 字段，y 轴对应 'frequency' 字段，文本内容为 'frequency' 字段的值\n      style: { fill: 'black', textAlign: 'center', dy: -5 }, // 文本样式配置，填充颜色为黑色，文本水平居中，y 方向上偏移 -5 像素\n    },\n  ],\n});\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"更多的案例，可以查看",paraId:3,tocIndex:0},{value:"图表示例",paraId:4,tocIndex:0},{value:"页面。",paraId:3,tocIndex:0},{value:"属性",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"类型",paraId:5,tocIndex:1},{value:"默认值",paraId:5,tocIndex:1},{value:"必选",paraId:5,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"配置 ",paraId:5,tocIndex:1},{value:"text",paraId:5,tocIndex:1},{value:" 标记的视觉通道，包括",paraId:5,tocIndex:1},{value:"x",paraId:5,tocIndex:1},{value:"、",paraId:5,tocIndex:1},{value:"y",paraId:5,tocIndex:1},{value:"、",paraId:5,tocIndex:1},{value:"color",paraId:5,tocIndex:1},{value:"、",paraId:5,tocIndex:1},{value:"shape",paraId:5,tocIndex:1},{value:"等，用于指定视觉元素属性和数据之间的关系",paraId:5,tocIndex:1},{value:"encode",paraId:6,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"style",paraId:5,tocIndex:1},{value:"配置 ",paraId:5,tocIndex:1},{value:"text",paraId:5,tocIndex:1},{value:" 图形样式",paraId:5,tocIndex:1},{value:"style",paraId:7,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"scale",paraId:5,tocIndex:1},{value:"配置 ",paraId:5,tocIndex:1},{value:"text",paraId:5,tocIndex:1},{value:" 标记的图形缩放，包括",paraId:5,tocIndex:1},{value:"text",paraId:5,tocIndex:1},{value:"、",paraId:5,tocIndex:1},{value:"fontSize",paraId:5,tocIndex:1},{value:"等",paraId:5,tocIndex:1},{value:"scale",paraId:8,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"配置 ",paraId:9,tocIndex:2},{value:"text",paraId:9,tocIndex:2},{value:" 标记的视觉通道，定义数据字段与视觉属性之间映射关系的重要配置，它决定了数据如何转化为视觉表现。",paraId:9,tocIndex:2},{value:"属性",paraId:10,tocIndex:2},{value:"描述",paraId:10,tocIndex:2},{value:"类型",paraId:10,tocIndex:2},{value:"默认值",paraId:10,tocIndex:2},{value:"x",paraId:10,tocIndex:2},{value:"绑定 ",paraId:10,tocIndex:2},{value:"text",paraId:10,tocIndex:2},{value:" 标记的 ",paraId:10,tocIndex:2},{value:"x",paraId:10,tocIndex:2},{value:" 属性通道",paraId:10,tocIndex:2},{value:"encode",paraId:11,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"y",paraId:10,tocIndex:2},{value:"绑定 ",paraId:10,tocIndex:2},{value:"text",paraId:10,tocIndex:2},{value:" 标记的 ",paraId:10,tocIndex:2},{value:"y",paraId:10,tocIndex:2},{value:" 属性通道",paraId:10,tocIndex:2},{value:"encode",paraId:12,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"text",paraId:10,tocIndex:2},{value:"绑定 ",paraId:10,tocIndex:2},{value:"text",paraId:10,tocIndex:2},{value:" 标记的 ",paraId:10,tocIndex:2},{value:"text",paraId:10,tocIndex:2},{value:" 属性通道",paraId:10,tocIndex:2},{value:"encode",paraId:13,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"shape",paraId:10,tocIndex:2},{value:"绑定 ",paraId:10,tocIndex:2},{value:"text",paraId:10,tocIndex:2},{value:" 标记的 ",paraId:10,tocIndex:2},{value:"shape",paraId:10,tocIndex:2},{value:" 属性通道",paraId:10,tocIndex:2},{value:"encode",paraId:14,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"shape",paraId:15,tocIndex:2},{value:"配置文本容器的形状",paraId:16,tocIndex:2},{value:"图形",paraId:17,tocIndex:2},{value:"描述",paraId:17,tocIndex:2},{value:"示例",paraId:17,tocIndex:2},{value:"text",paraId:17,tocIndex:2},{value:"绘制文本",paraId:17,tocIndex:2},{value:"badge",paraId:17,tocIndex:2},{value:"绘制带有标记的文本，形如一个气球",paraId:17,tocIndex:2},{value:"更多的",paraId:18,tocIndex:2},{value:"encode",paraId:18,tocIndex:2},{value:"配置，可以查查看 ",paraId:18,tocIndex:2},{value:"encode",paraId:19,tocIndex:2},{value:" 介绍页面。",paraId:18,tocIndex:2},{value:"scale",paraId:20,tocIndex:3},{value:"用于定义数据如何映射到视觉属性。",paraId:20,tocIndex:3},{value:"属性",paraId:21,tocIndex:3},{value:"描述",paraId:21,tocIndex:3},{value:"类型",paraId:21,tocIndex:3},{value:"默认值",paraId:21,tocIndex:3},{value:"text",paraId:21,tocIndex:3},{value:"定义文本映射规则",paraId:21,tocIndex:3},{value:"scale",paraId:22,tocIndex:3},{value:">",paraId:21,tocIndex:3},{value:"{type: identity}",paraId:21,tocIndex:3},{value:"fontSize",paraId:21,tocIndex:3},{value:"定义文本字体大小的映射规则",paraId:21,tocIndex:3},{value:"scale",paraId:23,tocIndex:3},{value:">",paraId:21,tocIndex:3},{value:"{type: identity}",paraId:21,tocIndex:3},{value:"rotate",paraId:21,tocIndex:3},{value:"定义文本旋转的映射规则",paraId:21,tocIndex:3},{value:"scale",paraId:24,tocIndex:3},{value:">",paraId:21,tocIndex:3},{value:"{type: identity}",paraId:21,tocIndex:3},{value:"更多的",paraId:25,tocIndex:3},{value:"scale",paraId:25,tocIndex:3},{value:"配置，可以查查看 ",paraId:25,tocIndex:3},{value:"scale",paraId:26,tocIndex:3},{value:" 介绍页面。",paraId:25,tocIndex:3},{value:"style",paraId:27,tocIndex:4},{value:" 用于设置文本的外观样式，包括填充颜色、边框样式、阴影效果等。",paraId:27,tocIndex:4},{value:"属性",paraId:28,tocIndex:4},{value:"描述",paraId:28,tocIndex:4},{value:"类型",paraId:28,tocIndex:4},{value:"默认值",paraId:28,tocIndex:4},{value:"shape",paraId:28,tocIndex:4},{value:"修改文本容器图形，与",paraId:28,tocIndex:4},{value:"encode",paraId:28,tocIndex:4},{value:"中",paraId:28,tocIndex:4},{value:"shape",paraId:28,tocIndex:4},{value:"属性通道配置一致",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<string>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"fontSize",paraId:28,tocIndex:4},{value:"文字大小",paraId:28,tocIndex:4},{value:"number",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<number>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"fontFamily",paraId:28,tocIndex:4},{value:"文字字体",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<string>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"fontWeight",paraId:28,tocIndex:4},{value:"字体粗细",paraId:28,tocIndex:4},{value:"number",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<number>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"lineHeight",paraId:28,tocIndex:4},{value:"文字的行高",paraId:28,tocIndex:4},{value:"number",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<number>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"textAlign",paraId:28,tocIndex:4},{value:"设置文本内容的当前对齐方式, 支持的属性：",paraId:28,tocIndex:4},{value:"center",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"end",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"left",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"right",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"start",paraId:28,tocIndex:4},{value:"，默认值为",paraId:28,tocIndex:4},{value:"start",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<string>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"textBaseline",paraId:28,tocIndex:4},{value:"设置在绘制文本时使用的当前文本基线, 支持的属性:",paraId:28,tocIndex:4},{value:"top",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"middle",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"bottom",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"alphabetic",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"hanging",paraId:28,tocIndex:4},{value:"。默认值为",paraId:28,tocIndex:4},{value:"bottom",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<string>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"fill",paraId:28,tocIndex:4},{value:"图形的填充色",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<string>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"fillOpacity",paraId:28,tocIndex:4},{value:"图形的填充透明度",paraId:28,tocIndex:4},{value:"number",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<number>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"stroke",paraId:28,tocIndex:4},{value:"图形的描边",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<string>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"strokeOpacity",paraId:28,tocIndex:4},{value:"描边透明度",paraId:28,tocIndex:4},{value:"number",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<number>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"lineWidth",paraId:28,tocIndex:4},{value:"图形描边的宽度",paraId:28,tocIndex:4},{value:"number",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<number>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"lineDash",paraId:28,tocIndex:4},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:28,tocIndex:4},{value:"[number,number]",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<[number, number]>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"opacity",paraId:28,tocIndex:4},{value:"图形的整体透明度",paraId:28,tocIndex:4},{value:"number",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<number>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"shadowColor",paraId:28,tocIndex:4},{value:"图形阴影颜色",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<string>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"shadowBlur",paraId:28,tocIndex:4},{value:"图形阴影的高斯模糊系数",paraId:28,tocIndex:4},{value:"number",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<number>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"shadowOffsetX",paraId:28,tocIndex:4},{value:"设置阴影距图形的水平距离",paraId:28,tocIndex:4},{value:"number",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<number>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"shadowOffsetY",paraId:28,tocIndex:4},{value:"设置阴影距图形的垂直距离",paraId:28,tocIndex:4},{value:"number",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<number>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"cursor",paraId:28,tocIndex:4},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<string>",paraId:28,tocIndex:4},{value:"'default'",paraId:28,tocIndex:4},{value:"dx",paraId:28,tocIndex:4},{value:"文本在水平方向的偏移量",paraId:28,tocIndex:4},{value:"number",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"dy",paraId:28,tocIndex:4},{value:"文本在垂直方向的偏移量",paraId:28,tocIndex:4},{value:"number",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"text",paraId:28,tocIndex:4},{value:"要绘制的文本内容",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"x",paraId:28,tocIndex:4},{value:"文本的 x 坐标",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"y",paraId:28,tocIndex:4},{value:"文本的 y 坐标",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"wordWrap",paraId:28,tocIndex:4},{value:"是否启用文本换行",paraId:28,tocIndex:4},{value:"boolean",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"wordWrapWidth",paraId:28,tocIndex:4},{value:"文本换行的最大宽度",paraId:28,tocIndex:4},{value:"number",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"background",paraId:28,tocIndex:4},{value:"文本的背景色",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"backgroundRadius",paraId:28,tocIndex:4},{value:"文本背景的圆角半径",paraId:28,tocIndex:4},{value:"boolean",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"mark",paraId:28,tocIndex:4},{value:"连接线（link）的标记的属性",paraId:28,tocIndex:4},{value:"mark",paraId:29,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"transform",paraId:28,tocIndex:4},{value:"配置文本变形属性",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"color",paraId:28,tocIndex:4},{value:"这是文本颜色",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"mark",paraId:30,tocIndex:4},{value:"当 ",paraId:31,tocIndex:4},{value:"shape",paraId:31,tocIndex:4},{value:"为",paraId:31,tocIndex:4},{value:"badge",paraId:31,tocIndex:4},{value:"时，",paraId:31,tocIndex:4},{value:"style",paraId:31,tocIndex:4},{value:"还有以下配置。",paraId:31,tocIndex:4},{value:"属性",paraId:32,tocIndex:4},{value:"描述",paraId:32,tocIndex:4},{value:"类型",paraId:32,tocIndex:4},{value:"默认值",paraId:32,tocIndex:4},{value:"markerSize",paraId:32,tocIndex:4},{value:"标记大小",paraId:32,tocIndex:4},{value:"number",paraId:32,tocIndex:4},{value:"24",paraId:32,tocIndex:4},{value:"markerFill",paraId:32,tocIndex:4},{value:"标记填充色",paraId:32,tocIndex:4},{value:"string",paraId:32,tocIndex:4},{value:"markerFillOpacity",paraId:32,tocIndex:4},{value:"标记填充色透明度",paraId:32,tocIndex:4},{value:"number",paraId:32,tocIndex:4},{value:"markerStroke",paraId:32,tocIndex:4},{value:"标记描边色",paraId:32,tocIndex:4},{value:"string",paraId:32,tocIndex:4},{value:"markerStrokeOpacity",paraId:32,tocIndex:4},{value:"标记描边色 透明度",paraId:32,tocIndex:4},{value:"number",paraId:32,tocIndex:4},{value:"更多的",paraId:33,tocIndex:4},{value:"style",paraId:33,tocIndex:4},{value:"配置，可以查看 ",paraId:33,tocIndex:4},{value:"style",paraId:34,tocIndex:4},{value:" 介绍页面。",paraId:33,tocIndex:4},{value:"尝试一下：",paraId:35,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/antvdemo/assets/data/blockchain.json',\n    transform: [\n      {\n        type: 'fold',\n        fields: ['blockchain', 'nlp'],\n        key: 'type',\n        value: 'value',\n      },\n    ],\n  })\n  .axis('x', { labelAutoHide: 'greedy' });\n\nchart\n  .line()\n  .encode('x', (d) => new Date(d.date))\n  .encode('y', 'value')\n  .encode('color', 'type');\n\nchart\n  .text()\n  .data([new Date('2017-12-17'), 100])\n  .style({\n    text: `2017-12-17, 受比特币影响，blockchain 搜索热度达到峰值：100`,\n    wordWrap: true,\n    wordWrapWidth: 164,\n    dx: -174,\n    dy: 30,\n    fill: '#2C3542',\n    fillOpacity: 0.65,\n    fontSize: 10,\n    background: true,\n    backgroundRadius: 2,\n    connector: true,\n    startMarker: true,\n    startMarkerFill: '#2C3542',\n    startMarkerFillOpacity: 0.65,\n  })\n  .tooltip(false);\n\nchart.render();\n\n",paraId:36,tocIndex:4},{value:"怎么指定箭头图标的长度？",paraId:37,tocIndex:5},{value:"有两种指定箭头图标长度的方式，一种是通过填写像素值，比如 ",paraId:38,tocIndex:5},{value:"40",paraId:38,tocIndex:5},{value:"，来指定为固定长度；另外一种是通过指定一个百分比，比如 ",paraId:38,tocIndex:5},{value:"30%",paraId:38,tocIndex:5},{value:"，来指定参考箭头长度的相对长度。默认值为 ",paraId:38,tocIndex:5},{value:"40%",paraId:38,tocIndex:5},{value:"。如下示例：",paraId:38,tocIndex:5},{value:"chart\n  .vector()\n  // ...\n  .shape('vector')\n  .style({\n    arrowSize: 40,\n    // arrowSize: '30%',\n  });\n",paraId:39,tocIndex:5},{value:"怎么绘制峰值标记？",paraId:40,tocIndex:5},{value:"配置 ",paraId:41,tocIndex:5},{value:"selectY",paraId:42,tocIndex:5},{value:" 数据转换，设置分组 ",paraId:41,tocIndex:5},{value:"groupBy: 'color'",paraId:41,tocIndex:5},{value:"表示针对 color 通道进行分组，并且设置最大值选择器 ",paraId:41,tocIndex:5},{value:"selector: 'max'",paraId:41,tocIndex:5},{value:"，表示使用 max 选择器进行指定的数据抽取，输出到 y 通道。这样就可以在每条折线的最大值处绘制 text 标记了。",paraId:41,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  data: [\n    { month: 'Jan', city: 'Tokyo', temperature: 7 },\n    { month: 'Jan', city: 'London', temperature: 3.9 },\n    { month: 'Feb', city: 'Tokyo', temperature: 6.9 },\n    { month: 'Feb', city: 'London', temperature: 4.2 },\n    { month: 'Mar', city: 'Tokyo', temperature: 9.5 },\n    { month: 'Mar', city: 'London', temperature: 5.7 },\n    { month: 'Apr', city: 'Tokyo', temperature: 14.5 },\n    { month: 'Apr', city: 'London', temperature: 8.5 },\n    { month: 'May', city: 'Tokyo', temperature: 18.4 },\n    { month: 'May', city: 'London', temperature: 11.9 },\n    { month: 'Jun', city: 'Tokyo', temperature: 21.5 },\n    { month: 'Jun', city: 'London', temperature: 15.2 },\n    { month: 'Jul', city: 'Tokyo', temperature: 25.2 },\n    { month: 'Jul', city: 'London', temperature: 17 },\n    { month: 'Aug', city: 'Tokyo', temperature: 26.5 },\n    { month: 'Aug', city: 'London', temperature: 16.6 },\n    { month: 'Sep', city: 'Tokyo', temperature: 23.3 },\n    { month: 'Sep', city: 'London', temperature: 14.2 },\n    { month: 'Oct', city: 'Tokyo', temperature: 18.3 },\n    { month: 'Oct', city: 'London', temperature: 10.3 },\n    { month: 'Nov', city: 'Tokyo', temperature: 13.9 },\n    { month: 'Nov', city: 'London', temperature: 6.6 },\n    { month: 'Dec', city: 'Tokyo', temperature: 9.6 },\n    { month: 'Dec', city: 'London', temperature: 4.8 },\n  ],\n  encode: { x: 'month', y: 'temperature', color: 'city' },\n  scale: { x: { range: [0, 1] }, y: { nice: true } },\n  axis: { y: { labelFormatter: (d) => d + '°C' } },\n  children: [\n    { type: 'line', encode: { shape: 'smooth' } },\n    {\n      type: 'text',\n      encode: {\n        x: 'month',\n        y: 'temperature',\n        text: (d) => `峰值：${d.temperature}`,\n      },\n      transform: [\n        {\n          type: 'selectY',\n          groupBy: 'color',\n          selector: 'max',\n        },\n      ],\n      style: {\n        fill: 'orange',\n        fontSize: 16,\n        dy: -15,\n      },\n      tooltip: false,\n    },\n    {\n      type: 'point',\n      encode: { x: 'month', y: 'temperature' },\n      transform: [\n        {\n          type: 'selectY',\n          groupBy: 'color',\n          selector: 'max',\n        },\n      ],\n      tooltip: false,\n    },\n  ],\n});\n\nchart.render();\n",paraId:43,tocIndex:5}]},57989:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(71273);const t=[{value:"Vector 图形是将数据映射成为",paraId:0,tocIndex:0},{value:"箭头",paraId:0,tocIndex:0},{value:"的样式去可视化展示，通过控制箭头的位置、大小、颜色、角度等信息，去可视化一些向量场数据。它具备有以下视觉通道：",paraId:0,tocIndex:0},{value:"x",paraId:1,tocIndex:0},{value:"：水平方向的位置，对 x 轴刻度对应",paraId:1,tocIndex:0},{value:"y",paraId:1,tocIndex:0},{value:"：垂直方向的位置，对 y 轴刻度对应，位置锚点定位为箭头的中心",paraId:1,tocIndex:0},{value:"color",paraId:1,tocIndex:0},{value:"：箭头的颜色",paraId:1,tocIndex:0},{value:"size",paraId:1,tocIndex:0},{value:"：箭头的长度",paraId:1,tocIndex:0},{value:"rotate",paraId:1,tocIndex:0},{value:"：箭头的旋转角度，起始角度为直角坐标系中的 ",paraId:1,tocIndex:0},{value:"右边",paraId:1,tocIndex:0},{value:"，旋转方向为 ",paraId:1,tocIndex:0},{value:"顺时针",paraId:1,tocIndex:0},{value:"Vector 图形标记会将数据通过上述通道映射成向量数据：",paraId:2,tocIndex:0},{value:"[start, end]",paraId:2,tocIndex:0},{value:"。",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'vector',\n  data: [\n    { longitude: 3.375, latitude: 45.625, u: -1.3287959, v: -2.6778967 },\n    { longitude: 3.625, latitude: 45.625, u: -1.012322, v: -2.8640392 },\n    { longitude: 3.875, latitude: 45.625, u: -0.7947747, v: -3.0722558 },\n    { longitude: 4.125, latitude: 45.625, u: -0.70024896, v: -3.311115 },\n    { longitude: 4.375, latitude: 45.625, u: -0.62092346, v: -3.5720115 },\n    { longitude: 4.625, latitude: 45.625, u: -0.54210645, v: -3.798527 },\n    { longitude: 4.875, latitude: 45.625, u: -0.531152, v: -3.6907976 },\n    { longitude: 5.125, latitude: 45.625, u: -0.58284736, v: -3.2739944 },\n    { longitude: 5.375, latitude: 45.625, u: -0.6388908, v: -2.8400586 },\n    { longitude: 5.625, latitude: 45.625, u: -0.68683237, v: -2.4499083 },\n    { longitude: 5.875, latitude: 45.625, u: -0.6949226, v: -2.2482452 },\n    { longitude: 6.125, latitude: 45.625, u: -0.67617714, v: -2.189318 },\n    { longitude: 6.375, latitude: 45.625, u: -0.6690367, v: -2.1100578 },\n    { longitude: 6.625, latitude: 45.625, u: -0.6749189, v: -2.0985062 },\n    { longitude: 6.875, latitude: 45.625, u: -0.61023676, v: -2.067676 },\n    { longitude: 7.125, latitude: 45.625, u: -0.46769565, v: -1.9350243 },\n    { longitude: 7.375, latitude: 45.625, u: -0.31841764, v: -1.7978805 },\n    { longitude: 7.625, latitude: 45.625, u: -0.296789, v: -1.6545589 },\n    { longitude: 7.875, latitude: 45.625, u: -0.49164182, v: -1.6660733 },\n    { longitude: 8.125, latitude: 45.625, u: -0.7730643, v: -1.8458021 },\n    { longitude: 8.375, latitude: 45.625, u: -1.0214152, v: -2.0177982 },\n    { longitude: 8.625, latitude: 45.625, u: -1.131555, v: -2.0604942 },\n    { longitude: 8.875, latitude: 45.625, u: -1.143751, v: -1.9134171 },\n    { longitude: 9.125, latitude: 45.625, u: -1.1628431, v: -1.6859006 },\n    { longitude: 9.375, latitude: 45.625, u: -1.1996219, v: -1.4945693 },\n    { longitude: 9.625, latitude: 45.625, u: -1.2651129, v: -1.385864 },\n    { longitude: 9.875, latitude: 45.625, u: -1.340052, v: -1.3189282 },\n  ],\n  encode: {\n    x: 'longitude',\n    y: 'latitude',\n    rotate: ({ u, v }) => (Math.atan2(v, u) * 180) / Math.PI,\n    size: 30,\n    color: ({ u, v }) => Math.hypot(v, u),\n  },\n  scales: {\n    size: { range: [6, 20] },\n    color: { type: 'sequential', palette: 'viridis' },\n  },\n  axis: {\n    x: { grid: false },\n    y: { grid: false },\n  },\n  style: {\n    arrowSize: 10,\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"必选",paraId:4,tocIndex:1},{value:"encode",paraId:4,tocIndex:1},{value:"配置 ",paraId:4,tocIndex:1},{value:"vector",paraId:4,tocIndex:1},{value:" 标记的视觉通道，包括",paraId:4,tocIndex:1},{value:"x",paraId:4,tocIndex:1},{value:"、",paraId:4,tocIndex:1},{value:"y",paraId:4,tocIndex:1},{value:"、",paraId:4,tocIndex:1},{value:"rotate",paraId:4,tocIndex:1},{value:"、",paraId:4,tocIndex:1},{value:"size",paraId:4,tocIndex:1},{value:"等，用于指定视觉元素属性和数据之间的关系",paraId:4,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"✓",paraId:4,tocIndex:1},{value:"style",paraId:4,tocIndex:1},{value:"配置 ",paraId:4,tocIndex:1},{value:"vector",paraId:4,tocIndex:1},{value:" 标记的图形样式",paraId:4,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"属性",paraId:7,tocIndex:2},{value:"描述",paraId:7,tocIndex:2},{value:"类型",paraId:7,tocIndex:2},{value:"默认值",paraId:7,tocIndex:2},{value:"必选",paraId:7,tocIndex:2},{value:"x",paraId:7,tocIndex:2},{value:"绑定 ",paraId:7,tocIndex:2},{value:"vector",paraId:7,tocIndex:2},{value:" 标记的 ",paraId:7,tocIndex:2},{value:"x",paraId:7,tocIndex:2},{value:" 属性通道，绑定水平方向的位置，与 x 轴刻度对应",paraId:7,tocIndex:2},{value:"encode",paraId:8,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"✓",paraId:7,tocIndex:2},{value:"y",paraId:7,tocIndex:2},{value:"绑定 ",paraId:7,tocIndex:2},{value:"vector",paraId:7,tocIndex:2},{value:" 标记的 ",paraId:7,tocIndex:2},{value:"y",paraId:7,tocIndex:2},{value:" 属性通道，绑定垂直方向的位置，与 y 轴刻度对应，位置锚点定位为箭头的中心",paraId:7,tocIndex:2},{value:"encode",paraId:9,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"✓",paraId:7,tocIndex:2},{value:"size",paraId:7,tocIndex:2},{value:"绑定 ",paraId:7,tocIndex:2},{value:"vector",paraId:7,tocIndex:2},{value:" 标记的 ",paraId:7,tocIndex:2},{value:"size",paraId:7,tocIndex:2},{value:" 属性通道，改变图形标记的大小，",paraId:7,tocIndex:2},{value:"size",paraId:7,tocIndex:2},{value:" 视觉通道映射在箭头的长度上",paraId:7,tocIndex:2},{value:"encode",paraId:10,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"✓",paraId:7,tocIndex:2},{value:"rotate",paraId:7,tocIndex:2},{value:"绑定 ",paraId:7,tocIndex:2},{value:"vector",paraId:7,tocIndex:2},{value:" 标记的 ",paraId:7,tocIndex:2},{value:"rotate",paraId:7,tocIndex:2},{value:" 属性通道, 用于将数据字段映射为箭头的旋转角度",paraId:7,tocIndex:2},{value:"encode",paraId:11,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"✓",paraId:7,tocIndex:2},{value:"color",paraId:7,tocIndex:2},{value:"绑定 ",paraId:7,tocIndex:2},{value:"vector",paraId:7,tocIndex:2},{value:" 标记的 color 属性通道，如果将数据字段映射到颜色通道，会对数据进行分组，不同的颜色对应不同的分组, ",paraId:7,tocIndex:2},{value:"color",paraId:7,tocIndex:2},{value:"视觉通道映射在箭头的颜色上。",paraId:7,tocIndex:2},{value:"encode",paraId:12,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"属性",paraId:13,tocIndex:3},{value:"描述",paraId:13,tocIndex:3},{value:"类型",paraId:13,tocIndex:3},{value:"默认值",paraId:13,tocIndex:3},{value:"必选",paraId:13,tocIndex:3},{value:"arrowSize",paraId:13,tocIndex:3},{value:"箭头图标的大小，可以指定像素值、也可以指定箭头长度的相对值。",paraId:13,tocIndex:3},{value:"string",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"number",paraId:13,tocIndex:3},{value:"'40%'",paraId:13,tocIndex:3},{value:"fill",paraId:13,tocIndex:3},{value:"图形的填充色",paraId:13,tocIndex:3},{value:"string",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"Function<string>",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"fillOpacity",paraId:13,tocIndex:3},{value:"图形的填充透明度",paraId:13,tocIndex:3},{value:"number",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"Function<number>",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"stroke",paraId:13,tocIndex:3},{value:"图形的描边",paraId:13,tocIndex:3},{value:"string",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"Function<string>",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"strokeOpacity",paraId:13,tocIndex:3},{value:"描边透明度",paraId:13,tocIndex:3},{value:"number",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"Function<number>",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"lineWidth",paraId:13,tocIndex:3},{value:"图形描边的宽度",paraId:13,tocIndex:3},{value:"number",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"Function<number>",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"lineDash",paraId:13,tocIndex:3},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:13,tocIndex:3},{value:"[number,number]",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"Function<[number, number]>",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"opacity",paraId:13,tocIndex:3},{value:"图形的整体透明度",paraId:13,tocIndex:3},{value:"number",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"Function<number>",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"shadowColor",paraId:13,tocIndex:3},{value:"图形阴影颜色",paraId:13,tocIndex:3},{value:"string",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"Function<string>",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"shadowBlur",paraId:13,tocIndex:3},{value:"图形阴影的高斯模糊系数",paraId:13,tocIndex:3},{value:"number",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"Function<number>",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"shadowOffsetX",paraId:13,tocIndex:3},{value:"设置阴影距图形的水平距离",paraId:13,tocIndex:3},{value:"number",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"Function<number>",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"shadowOffsetY",paraId:13,tocIndex:3},{value:"设置阴影距图形的垂直距离",paraId:13,tocIndex:3},{value:"number",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"Function<number>",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"cursor",paraId:13,tocIndex:3},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:13,tocIndex:3},{value:"string",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"Function<string>",paraId:13,tocIndex:3},{value:"'default'",paraId:13,tocIndex:3},{value:"怎么指定箭头图标的长度？",paraId:14,tocIndex:4},{value:"有两种指定箭头图标长度的方式，一种是通过填写像素值，比如 ",paraId:15,tocIndex:4},{value:"4",paraId:15,tocIndex:4},{value:"，来指定为固定长度；另外一种是通过指定一个百分比，比如 ",paraId:15,tocIndex:4},{value:"30%",paraId:15,tocIndex:4},{value:"，来指定参考箭头长度的相对长度。默认值为 ",paraId:15,tocIndex:4},{value:"40%",paraId:15,tocIndex:4},{value:"。如下示例：",paraId:15,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'vector',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antfincdn/F5VcgnqRku/wind.json',\n  },\n  encode: {\n    x: 'longitude',\n    y: 'latitude',\n    rotate: ({ u, v }) => (Math.atan2(v, u) * 180) / Math.PI,\n    size: ({ u, v }) => Math.hypot(v, u),\n    color: ({ u, v }) => Math.hypot(v, u),\n  },\n  scales: {\n    size: { range: [6, 20] },\n    color: { type: 'sequential', palette: 'viridis' },\n  },\n  axis: {\n    x: { grid: false },\n    y: { grid: false },\n  },\n  style: {\n    arrowSize: 4,\n    // arrowSize: '30%',\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:16,tocIndex:4},{value:"更多的案例，可以查看",paraId:17,tocIndex:4},{value:"图表示例",paraId:18,tocIndex:4},{value:"页面。",paraId:17,tocIndex:4}]},13897:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(1830);const t=[{value:"wordCloud",paraId:0,tocIndex:0},{value:" 是一种专门用于生成词云图的工具。词云图是一种直观展示文本数据中关键词频次的可视化形式，通过不同大小、颜色和位置的文字来反映词语的重要性或权重。",paraId:0,tocIndex:0},{value:"使用 ",paraId:1,tocIndex:0},{value:"wordCloud",paraId:1,tocIndex:0},{value:" 组件时，用户可以轻松地将文本数据转化为视觉化的词云图。支持高度自定义的配置选项，包括文字大小范围、颜色映射、旋转角度以及布局算法等，从而满足多样化的可视化需求。此外，",paraId:1,tocIndex:0},{value:"wordCloud",paraId:1,tocIndex:0},{value:" 还能够与 G2 的其他功能无缝集成，例如数据筛选、交互事件绑定等，进一步增强用户体验。",paraId:1,tocIndex:0},{value:"无论是用于展示社交媒体热点话题、分析用户评论情感，还是呈现关键词分布，",paraId:2,tocIndex:0},{value:"wordCloud",paraId:2,tocIndex:0},{value:" 都能以优雅的方式帮助用户快速洞察数据背后的趋势和模式。",paraId:2,tocIndex:0},{value:"wordCloud",paraId:2,tocIndex:0},{value:" 不仅简单易用，还具备出色的性能表现，是数据可视化领域的理想选择之一。",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'wordCloud', // 指定图表类型为词云图\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/philosophy-word.json',\n  },\n  layout: {\n    spiral: 'rectangular', // 词云布局模式：矩形螺旋布局\n  },\n  encode: { color: 'text' }, // 将数据字段 `text` 映射到词云图的颜色\n  legend: false,\n  axis: false,\n  tooltip: false,\n});\n\nchart.render();\n",paraId:3,tocIndex:1},{value:"更多的案例，可以查看",paraId:4,tocIndex:1},{value:"图表示例 - 文本",paraId:5,tocIndex:1},{value:"页面。",paraId:4,tocIndex:1},{value:"属性",paraId:6,tocIndex:2},{value:"描述",paraId:6,tocIndex:2},{value:"类型",paraId:6,tocIndex:2},{value:"默认值",paraId:6,tocIndex:2},{value:"必选",paraId:6,tocIndex:2},{value:"encode",paraId:6,tocIndex:2},{value:"配置 ",paraId:6,tocIndex:2},{value:"wordCloud",paraId:6,tocIndex:2},{value:" 标记的视觉通道，包括",paraId:6,tocIndex:2},{value:"x",paraId:6,tocIndex:2},{value:"、",paraId:6,tocIndex:2},{value:"y",paraId:6,tocIndex:2},{value:"、",paraId:6,tocIndex:2},{value:"color",paraId:6,tocIndex:2},{value:"、",paraId:6,tocIndex:2},{value:"size",paraId:6,tocIndex:2},{value:"等，用于指定视觉元素属性和数据之间的关系",paraId:6,tocIndex:2},{value:"encode",paraId:7,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"✓",paraId:6,tocIndex:2},{value:"labels",paraId:6,tocIndex:2},{value:"配置 ",paraId:6,tocIndex:2},{value:"wordCloud",paraId:6,tocIndex:2},{value:" 自定义节点数据标签",paraId:6,tocIndex:2},{value:"label[]",paraId:6,tocIndex:2},{value:"[]",paraId:6,tocIndex:2},{value:"layout",paraId:6,tocIndex:2},{value:"配置 ",paraId:6,tocIndex:2},{value:"wordCloud",paraId:6,tocIndex:2},{value:" 布局，包括 ",paraId:6,tocIndex:2},{value:"padding",paraId:6,tocIndex:2},{value:"、",paraId:6,tocIndex:2},{value:"rotate",paraId:6,tocIndex:2},{value:" 等",paraId:6,tocIndex:2},{value:"layout",paraId:8,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"padding",paraId:6,tocIndex:2},{value:"配置 ",paraId:6,tocIndex:2},{value:"wordCloud",paraId:6,tocIndex:2},{value:" 容器的边距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"scale",paraId:6,tocIndex:2},{value:"配置 ",paraId:6,tocIndex:2},{value:"wordCloud",paraId:6,tocIndex:2},{value:" 标记的图形缩放，包括",paraId:6,tocIndex:2},{value:"x",paraId:6,tocIndex:2},{value:"、",paraId:6,tocIndex:2},{value:"y",paraId:6,tocIndex:2},{value:"、",paraId:6,tocIndex:2},{value:"series",paraId:6,tocIndex:2},{value:"、",paraId:6,tocIndex:2},{value:"size",paraId:6,tocIndex:2},{value:"等",paraId:6,tocIndex:2},{value:"scale",paraId:9,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"style",paraId:6,tocIndex:2},{value:"配置 ",paraId:6,tocIndex:2},{value:"wordCloud",paraId:6,tocIndex:2},{value:" 图形样式",paraId:6,tocIndex:2},{value:"style",paraId:10,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"配置 ",paraId:11,tocIndex:3},{value:"wordCloud",paraId:11,tocIndex:3},{value:" 标记的视觉通道，定义数据字段与视觉属性之间映射关系的重要配置，它决定了数据如何转化为视觉表现。",paraId:11,tocIndex:3},{value:"属性",paraId:12,tocIndex:3},{value:"描述",paraId:12,tocIndex:3},{value:"类型",paraId:12,tocIndex:3},{value:"默认值",paraId:12,tocIndex:3},{value:"必选",paraId:12,tocIndex:3},{value:"text",paraId:12,tocIndex:3},{value:"绑定 ",paraId:12,tocIndex:3},{value:"wordCloud",paraId:12,tocIndex:3},{value:" 标记的 ",paraId:12,tocIndex:3},{value:"text",paraId:12,tocIndex:3},{value:" 属性通道",paraId:12,tocIndex:3},{value:"encode",paraId:13,tocIndex:3},{value:"'text'",paraId:12,tocIndex:3},{value:"rotate",paraId:12,tocIndex:3},{value:"绑定 ",paraId:12,tocIndex:3},{value:"wordCloud",paraId:12,tocIndex:3},{value:" 标记的 ",paraId:12,tocIndex:3},{value:"rotate",paraId:12,tocIndex:3},{value:" 属性通道, 用于将数据字段映射为图形元素的字体旋转",paraId:12,tocIndex:3},{value:"encode",paraId:14,tocIndex:3},{value:"'rotate'",paraId:12,tocIndex:3},{value:"fontSize",paraId:12,tocIndex:3},{value:"绑定 ",paraId:12,tocIndex:3},{value:"wordCloud",paraId:12,tocIndex:3},{value:" 标记的 ",paraId:12,tocIndex:3},{value:"fontSize",paraId:12,tocIndex:3},{value:" 属性通道, 用于将数据字段映射为图形元素的字体大小",paraId:12,tocIndex:3},{value:"encode",paraId:15,tocIndex:3},{value:"'size'",paraId:12,tocIndex:3},{value:"color",paraId:12,tocIndex:3},{value:"绑定 ",paraId:12,tocIndex:3},{value:"wordCloud",paraId:12,tocIndex:3},{value:" 标记的 ",paraId:12,tocIndex:3},{value:"color",paraId:12,tocIndex:3},{value:" 属性通道，将数据字段映射到颜色通道",paraId:12,tocIndex:3},{value:"encode",paraId:16,tocIndex:3},{value:"-",paraId:12,tocIndex:3},{value:"更多的",paraId:17,tocIndex:3},{value:"encode",paraId:17,tocIndex:3},{value:"配置，可以查查看 ",paraId:17,tocIndex:3},{value:"encode",paraId:18,tocIndex:3},{value:" 介绍页面。",paraId:17,tocIndex:3},{value:"scale",paraId:19,tocIndex:4},{value:"用于定义数据如何映射到视觉属性（如颜色、大小、形状等）。在",paraId:19,tocIndex:4},{value:"cell",paraId:19,tocIndex:4},{value:"的使用场景，scale 的常见作用就是为每个视觉通道（如颜色、大小、位置等）提供映射规则，使数据点能够准确地呈现。",paraId:19,tocIndex:4},{value:"属性",paraId:20,tocIndex:4},{value:"描述",paraId:20,tocIndex:4},{value:"类型",paraId:20,tocIndex:4},{value:"默认值",paraId:20,tocIndex:4},{value:"必选",paraId:20,tocIndex:4},{value:"x",paraId:20,tocIndex:4},{value:"定义数据字段到 X 轴视觉位置的映射规则",paraId:20,tocIndex:4},{value:"Record<string, ",paraId:20,tocIndex:4},{value:"scale",paraId:21,tocIndex:4},{value:">",paraId:20,tocIndex:4},{value:"{ range: [0, 1] }",paraId:20,tocIndex:4},{value:"y",paraId:20,tocIndex:4},{value:"定义数据字段到 X 轴视觉位置的映射规则",paraId:20,tocIndex:4},{value:"Record<string, ",paraId:20,tocIndex:4},{value:"scale",paraId:22,tocIndex:4},{value:">",paraId:20,tocIndex:4},{value:"{ range: [0, 1] }",paraId:20,tocIndex:4},{value:"更多的",paraId:23,tocIndex:4},{value:"scale",paraId:23,tocIndex:4},{value:"配置，可以查查看 ",paraId:23,tocIndex:4},{value:"scale",paraId:24,tocIndex:4},{value:" 介绍页面。",paraId:23,tocIndex:4},{value:"配置 ",paraId:25,tocIndex:5},{value:"wordCloud",paraId:25,tocIndex:5},{value:" 容器的边，可以通过",paraId:25,tocIndex:5},{value:"padding{Position}",paraId:25,tocIndex:5},{value:"配置不同方向的边距",paraId:25,tocIndex:5},{value:"type Position = 'Top' | 'Bottom' | 'left' | 'right';\n",paraId:26,tocIndex:5},{value:"与 layout 中的 ",paraId:27,tocIndex:5},{value:"padding",paraId:27,tocIndex:5},{value:" 配置项对比",paraId:27,tocIndex:5},{value:"属性",paraId:28,tocIndex:5},{value:"描述",paraId:28,tocIndex:5},{value:"类型",paraId:28,tocIndex:5},{value:"示例",paraId:28,tocIndex:5},{value:"option.padding",paraId:28,tocIndex:5},{value:"配置 ",paraId:28,tocIndex:5},{value:"wordCloud",paraId:28,tocIndex:5},{value:" 容器的边距",paraId:28,tocIndex:5},{value:"number",paraId:28,tocIndex:5},{value:"option.layout.padding",paraId:28,tocIndex:5},{value:"设置单词之间的间距，单位为像素，可以是具体值或动态函数",paraId:28,tocIndex:5},{value:"number | (word: any) => number",paraId:28,tocIndex:5},{value:"属性",paraId:29,tocIndex:6},{value:"描述",paraId:29,tocIndex:6},{value:"类型",paraId:29,tocIndex:6},{value:"默认值",paraId:29,tocIndex:6},{value:"font",paraId:29,tocIndex:6},{value:"设置字体样式，可以是字符串或函数，函数根据单词返回字体，修改 d3 词云配置",paraId:29,tocIndex:6},{value:"string | (word: any) => string",paraId:29,tocIndex:6},{value:"'Impact'",paraId:29,tocIndex:6},{value:"fontSize",paraId:29,tocIndex:6},{value:"设置字体大小，可以是具体值、范围 [min, max] 或函数，修改 d3 词云配置",paraId:29,tocIndex:6},{value:"number | [number, number] | (word: any) => number",paraId:29,tocIndex:6},{value:"-",paraId:29,tocIndex:6},{value:"imageMask",paraId:29,tocIndex:6},{value:"设置图像作为单词布局的遮罩，可以是 HTML 图像元素或图像路径字符串",paraId:29,tocIndex:6},{value:"'HTMLImageElement | string",paraId:29,tocIndex:6},{value:"-",paraId:29,tocIndex:6},{value:"on",paraId:29,tocIndex:6},{value:"配置事件监听器函数，可以监听布局完成 (end) 或单词更新 (word)",paraId:29,tocIndex:6},{value:"((type: 'end', details?: { cloud; words; bounds }) => void) | ((type: 'word', details?: { cloud; word }) => void)",paraId:29,tocIndex:6},{value:"-",paraId:29,tocIndex:6},{value:"padding",paraId:29,tocIndex:6},{value:"设置单词之间的间距，单位为像素，可以是具体值或动态函数",paraId:29,tocIndex:6},{value:"number | (word: any) => number",paraId:29,tocIndex:6},{value:"2",paraId:29,tocIndex:6},{value:"rotate",paraId:29,tocIndex:6},{value:"设置单词的旋转角度，可以是具体值或动态函数",paraId:29,tocIndex:6},{value:"number | word => number",paraId:29,tocIndex:6},{value:"() => (~~(Math.random() * 6) - 3) * 30",paraId:29,tocIndex:6},{value:"random",paraId:29,tocIndex:6},{value:"设置随机数生成器，可以是具体数值或函数",paraId:29,tocIndex:6},{value:"number | (word => number)",paraId:29,tocIndex:6},{value:"-",paraId:29,tocIndex:6},{value:"size",paraId:29,tocIndex:6},{value:"设置布局的矩形宽度和高度，格式为 [width, height]",paraId:29,tocIndex:6},{value:"[number, number]",paraId:29,tocIndex:6},{value:"[20, 60]",paraId:29,tocIndex:6},{value:"spiral",paraId:29,tocIndex:6},{value:'设置单词的排布模式，可以选择 "archimedean" 或 "rectangular" 内置螺旋类型，也可以通过函数实现自定义',paraId:29,tocIndex:6},{value:"'archimedean' | 'rectangular'",paraId:29,tocIndex:6},{value:"-",paraId:29,tocIndex:6},{value:"text",paraId:29,tocIndex:6},{value:"设置单词的文本访问器函数，用来根据单词数据返回单词文本",paraId:29,tocIndex:6},{value:"(word: any) => string",paraId:29,tocIndex:6},{value:"(d) => d.text",paraId:29,tocIndex:6},{value:"timeInterval",paraId:29,tocIndex:6},{value:"设置布局算法的时间间隔，控制运行时间",paraId:29,tocIndex:6},{value:"number",paraId:29,tocIndex:6},{value:"-",paraId:29,tocIndex:6},{value:"spiral",paraId:30,tocIndex:6},{value:"spiral",paraId:31,tocIndex:6},{value:" 是一个控制词云布局算法的参数，它决定了词语在画布上的排列方式和路径模式。通过调整 spiral，可以优化词云的视觉效果、布局密度和性能。",paraId:31,tocIndex:6},{value:"参数值",paraId:32,tocIndex:6},{value:"说明",paraId:32,tocIndex:6},{value:"适用场景",paraId:32,tocIndex:6},{value:"archimedean",paraId:32,tocIndex:6},{value:"阿基米德螺旋线（默认值），词语从中心向外按螺旋路径排列，布局较紧凑。",paraId:32,tocIndex:6},{value:"通用场景，追求自然紧凑的布局",paraId:32,tocIndex:6},{value:"rectangular",paraId:32,tocIndex:6},{value:"矩形螺旋，词语按矩形路径排列，计算速度更快，但布局相对松散。",paraId:32,tocIndex:6},{value:"数据量大时优化性能",paraId:32,tocIndex:6},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\nconst spiralMap = [\n  {\n    label: '阿基米德螺旋',\n    spiral: 'archimedean',\n  },\n  {\n    label: '矩形螺旋',\n    spiral: 'rectangular',\n  },\n];\n\nchart.options({\n  type: 'wordCloud',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/philosophy-word.json',\n  },\n  layout: {\n    spiral: 'rectangular',\n  },\n  encode: { color: 'text' },\n});\n\nconst handleSetSpiral = (spiral) => {\n  // 设置选中的坐标系\n  chart.options({\n    layout: { spiral },\n  });\n  chart.render(); // 重新渲染图表\n};\n\n// layout-spiral 选择器\nconst selectorContainer = document.createElement('div');\nselectorContainer.textContent = '选择spiral ';\nconst selector = document.createElement('select');\nselector.innerHTML = spiralMap.map(\n  (spiral, index) =>\n    `<option value=\"${spiral.spiral}\" ${index === 0 ? 'selected' : ''}>${\n      spiral.label\n    }</option>`,\n);\nselector.onchange = (e) => {\n  handleSetSpiral(e.target.value);\n};\nselectorContainer.appendChild(selector);\ncontainer.insertBefore(selectorContainer, container.childNodes[0]);\n\nchart.render();\n",paraId:33,tocIndex:6},{value:"imageMask",paraId:34,tocIndex:6},{value:"imageMask",paraId:35,tocIndex:6},{value:" 是一个用于控制词云形状的关键配置项，它的作用是通过指定一张图片的遮罩（Mask），将词云的布局限制在该图片的轮廓范围内，从而生成与图片形状匹配的词云效果。",paraId:35,tocIndex:6},{value:"imageMask",paraId:36,tocIndex:6},{value:" 接收一个遮罩图片，WordCloud 布局算法会解析 imageMask 图片的像素信息，将图片的非透明区域视为允许放置词语的区域，而透明区域则禁止放置词语。词语会根据权重（如词频）在非透明区域内动态调整大小和位置。",paraId:36,tocIndex:6},{value:"注意事项：",paraId:37,tocIndex:6},{value:"图片质量：遮罩图片通常应是单色（黑白）图像。一般来说，词云会基于非白色区域定义形状。",paraId:38,tocIndex:6},{value:"图像加载：在使用图片遮罩时，确保图像资源已经完全加载，否则可能会出现渲染问题。",paraId:38,tocIndex:6},{value:"性能影响：复杂形状（例如高分辨率图片）可能会影响词云的构造速度。",paraId:38,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'wordCloud',\n  layout: {\n    imageMask:\n      'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*LKU4TYEiB-4AAAAAAAAAAAAADmJ7AQ/original',\n    fontSize: 12,\n  },\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/antvdemo/assets/data/antv-keywords.json',\n  },\n  encode: { color: 'name', text: 'name' },\n  legend: false,\n});\n\nchart.render();\n",paraId:39,tocIndex:6},{value:"复合图形标记需要通过不同的前缀来区分图形的配置。",paraId:40,tocIndex:7},{value:"属性",paraId:41,tocIndex:7},{value:"描述",paraId:41,tocIndex:7},{value:"类型",paraId:41,tocIndex:7},{value:"默认值",paraId:41,tocIndex:7},{value:"fontStyle",paraId:41,tocIndex:7},{value:"设置文本的样式，调用 G 绘图进行绘制",paraId:41,tocIndex:7},{value:"FontStyle | (datum, index, data, column) => FontStyle",paraId:41,tocIndex:7},{value:"'normal'",paraId:41,tocIndex:7},{value:"fontSize",paraId:41,tocIndex:7},{value:"设置文本的字体大小，调用 G 绘图进行绘制",paraId:41,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"fontWeight",paraId:41,tocIndex:7},{value:"设置文本的字体粗细，调用 G 绘图进行绘制",paraId:41,tocIndex:7},{value:"FontWeight | number | (datum, index, data, column) => number |FontWeight",paraId:41,tocIndex:7},{value:"'normal'",paraId:41,tocIndex:7},{value:"fill",paraId:41,tocIndex:7},{value:"图形的填充色",paraId:41,tocIndex:7},{value:"number | (datum, index, data, column) => string",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"fillOpacity",paraId:41,tocIndex:7},{value:"图形的填充透明度",paraId:41,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"stroke",paraId:41,tocIndex:7},{value:"图形的描边",paraId:41,tocIndex:7},{value:"number | (datum, index, data, column) => string",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"strokeOpacity",paraId:41,tocIndex:7},{value:"描边透明度",paraId:41,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"text",paraId:41,tocIndex:7},{value:"文本内容",paraId:41,tocIndex:7},{value:"number | (datum, index, data, column) => string",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"textAlign",paraId:41,tocIndex:7},{value:"设置文本的对齐方式",paraId:41,tocIndex:7},{value:"TextAlign | (datum, index, data, column) => TextAlign",paraId:41,tocIndex:7},{value:"'center'",paraId:41,tocIndex:7},{value:"textBaseline",paraId:41,tocIndex:7},{value:"设置文本的基线位置",paraId:41,tocIndex:7},{value:"TextBaseline | (datum, index, data, column) => TextBaseline",paraId:41,tocIndex:7},{value:"'middle'",paraId:41,tocIndex:7},{value:"lineWidth",paraId:41,tocIndex:7},{value:"图形描边的宽度",paraId:41,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"lineDash",paraId:41,tocIndex:7},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:41,tocIndex:7},{value:"[number,number] |(datum, index, data, column) => [number, number]",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"opacity",paraId:41,tocIndex:7},{value:"图形的整体透明度",paraId:41,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"shadowColor",paraId:41,tocIndex:7},{value:"图形阴影颜色",paraId:41,tocIndex:7},{value:"number | (datum, index, data, column) => string",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"shadowBlur",paraId:41,tocIndex:7},{value:"图形阴影的高斯模糊系数",paraId:41,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"shadowOffsetX",paraId:41,tocIndex:7},{value:"设置阴影距图形的水平距离",paraId:41,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"shadowOffsetY",paraId:41,tocIndex:7},{value:"设置阴影距图形的垂直距离",paraId:41,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"cursor",paraId:41,tocIndex:7},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:41,tocIndex:7},{value:"number | (datum, index, data, column) => string",paraId:41,tocIndex:7},{value:"'default'",paraId:41,tocIndex:7},{value:"type FontStyle = 'normal' | 'italic' | 'oblique';\n\ntype FontWeight = 'normal' | 'bold' | 'lighter';\n\ntype TextAlign = 'left' | 'center' | 'right';\n\ntype TextBaseline = 'top' | 'middle' | 'bottom';\n",paraId:42,tocIndex:7},{value:"尝试一下：",paraId:43,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  paddingTop: 40,\n});\n\nchart\n  .wordCloud()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/philosophy-word.json',\n  })\n  .layout({\n    spiral: 'rectangular',\n    fontSize: [20, 100],\n  })\n  .encode('color', 'text');\n\nchart.render();\n\n",paraId:44,tocIndex:7}]},88394:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(84440);const t=[{value:"band 比例尺是一种特殊的分类比例尺，它将离散的定义域（如类别、名称等）映射到连续的数值范围，并为每个类别分配相等宽度的区间（band）。与普通的 ",paraId:0,tocIndex:0},{value:"ordinal",paraId:1,tocIndex:0},{value:" 比例尺不同，band 比例尺不仅关注点的位置，还关注每个类别占据的区间宽度。",paraId:0,tocIndex:0},{value:"band 比例尺的主要特点：",paraId:2,tocIndex:0},{value:"将离散数据（如类别）映射到连续区间",paraId:3,tocIndex:0},{value:"为每个类别分配等宽的区间（band）",paraId:3,tocIndex:0},{value:"支持设置类别之间的内部间距（paddingInner）和外部间距（paddingOuter）",paraId:3,tocIndex:0},{value:"常用于柱状图、条形图等需要表示类别数据的可视化中",paraId:3,tocIndex:0},{value:"在 G2 中，band 比例尺是柱状图（interval 标记）的默认 x 轴比例尺，它能够自动处理类别数据的映射和布局。",paraId:4,tocIndex:0},{value:"属性",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"类型",paraId:5,tocIndex:1},{value:"默认值",paraId:5,tocIndex:1},{value:"必选",paraId:5,tocIndex:1},{value:"domain",paraId:5,tocIndex:1},{value:"设置定义域数组，即输入数据的可能值",paraId:5,tocIndex:1},{value:"number[] | string[] | Date[]",paraId:5,tocIndex:1},{value:"[]",paraId:5,tocIndex:1},{value:"range",paraId:5,tocIndex:1},{value:"设置数据映射的值域范围，即输出的范围",paraId:5,tocIndex:1},{value:"number[]",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"string[]",paraId:5,tocIndex:1},{value:"[0, 1]",paraId:5,tocIndex:1},{value:"unknown",paraId:5,tocIndex:1},{value:"对于 ",paraId:5,tocIndex:1},{value:"undefined",paraId:5,tocIndex:1},{value:"， ",paraId:5,tocIndex:1},{value:"NaN",paraId:5,tocIndex:1},{value:"，",paraId:5,tocIndex:1},{value:"null",paraId:5,tocIndex:1},{value:" 空值，返回的数据",paraId:5,tocIndex:1},{value:"any",paraId:5,tocIndex:1},{value:"undefined",paraId:5,tocIndex:1},{value:"round",paraId:5,tocIndex:1},{value:"输出值是否进行四舍五入",paraId:5,tocIndex:1},{value:"boolean",paraId:5,tocIndex:1},{value:"false",paraId:5,tocIndex:1},{value:"paddingInner",paraId:5,tocIndex:1},{value:"设置类别之间的内部间距，在 [0, 1] 范围内，值越大间距越大",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingOuter",paraId:5,tocIndex:1},{value:"设置两端的外部间距，在 [0, 1] 范围内，值越大间距越大",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"padding",paraId:5,tocIndex:1},{value:"同时设置 ",paraId:5,tocIndex:1},{value:"paddingInner",paraId:5,tocIndex:1},{value:" 和 ",paraId:5,tocIndex:1},{value:"paddingOuter",paraId:5,tocIndex:1},{value:" 的快捷方式",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"align",paraId:5,tocIndex:1},{value:"对齐方式，在 [0, 1] 范围内，0 表示左对齐，0.5 表示居中，1 表示右对齐",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0.5",paraId:5,tocIndex:1},{value:"compare",paraId:5,tocIndex:1},{value:"对定义域进行映射前的排序函数",paraId:5,tocIndex:1},{value:"(a: string or number, b: string or number) => number",paraId:5,tocIndex:1},{value:"undefined",paraId:5,tocIndex:1},{value:"flex",paraId:5,tocIndex:1},{value:"设置各类别的宽度分配比例",paraId:5,tocIndex:1},{value:"number[]",paraId:5,tocIndex:1},{value:"[]",paraId:5,tocIndex:1},{value:"band 比例尺将连续的值域范围（range）划分为等宽的区间，每个区间对应定义域中的一个离散值。下图展示了 band 比例尺的布局原理：",paraId:6,tocIndex:2},{value:"|<------------------------------------------- range -------------------------------------------\x3e|\n|             |                   |             |                   |             |             |\n|<--step*PO--\x3e|<----bandWidth----\x3e|<--step*PI--\x3e|<----bandWidth----\x3e|<--step*PI--\x3e|<--step*PO--\x3e|\n|             | ***************** |             | ***************** |             |             |\n|             | ******* A ******* |             | ******* B ******* |             |             |\n|             | ***************** |             | ***************** |             |             |\n|             |<--------------step-------------\x3e|                                               |\n|-----------------------------------------------------------------------------------------------|\n",paraId:7,tocIndex:2},{value:"其中：",paraId:8,tocIndex:2},{value:"range",paraId:9,tocIndex:2},{value:": 整个比例尺的值域范围",paraId:9,tocIndex:2},{value:"bandWidth",paraId:9,tocIndex:2},{value:": 每个类别占据的宽度",paraId:9,tocIndex:2},{value:"step",paraId:9,tocIndex:2},{value:": 相邻类别中心点之间的距离",paraId:9,tocIndex:2},{value:"step*PI (paddingInner)",paraId:9,tocIndex:2},{value:": 类别之间的内部间距",paraId:9,tocIndex:2},{value:"step*PO (paddingOuter)",paraId:9,tocIndex:2},{value:": 两端的外部间距",paraId:9,tocIndex:2},{value:"带宽(bandWidth)是 band 比例尺中每个类别实际占据的宽度，它决定了柱状图中每个柱子的宽度、条形图中每个条的高度等。带宽是 band 比例尺区别于其他比例尺的核心概念。",paraId:10,tocIndex:4},{value:"带宽的计算涉及多个参数，具体公式如下：",paraId:11,tocIndex:5},{value:"step = rangeLength / (domain.length - paddingInner + paddingOuter * 2)\nbandWidth = step * (1 - paddingInner)\n",paraId:12,tocIndex:5},{value:"其中：",paraId:13,tocIndex:5},{value:"rangeLength",paraId:14,tocIndex:5},{value:": 值域的长度（range[1] - range[0]）",paraId:14,tocIndex:5},{value:"domain.length",paraId:14,tocIndex:5},{value:": 定义域中类别的数量",paraId:14,tocIndex:5},{value:"paddingInner",paraId:14,tocIndex:5},{value:": 内部间距比例 [0, 1]",paraId:14,tocIndex:5},{value:"paddingOuter",paraId:14,tocIndex:5},{value:": 外部间距比例 [0, 1]",paraId:14,tocIndex:5},{value:"paddingInner",paraId:15,tocIndex:7},{value:" 控制类别之间的间距，直接影响带宽大小：",paraId:15,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { category: 'A', value: 100 },\n  { category: 'B', value: 80 },\n  { category: 'C', value: 120 },\n  { category: 'D', value: 90 },\n];\n\n// 创建三个图表展示不同 paddingInner 的效果\nconst charts = [\n  { paddingInner: 0, title: 'paddingInner: 0 (带宽最大)' },\n  { paddingInner: 0.3, title: 'paddingInner: 0.3 (中等带宽)' },\n  { paddingInner: 0.8, title: 'paddingInner: 0.8 (带宽最小)' },\n];\n\ncharts.forEach((config, index) => {\n  const container = document.createElement('div');\n  container.style.width = '300px';\n  container.style.height = '200px';\n  container.style.display = 'inline-block';\n  container.style.margin = '10px';\n  document.getElementById('container').appendChild(container);\n\n  const chart = new Chart({\n    container,\n    autoFit: true,\n  });\n\n  chart.options({\n    type: 'interval',\n    data,\n    encode: {\n      x: 'category',\n      y: 'value',\n      color: 'category',\n    },\n    scale: {\n      x: {\n        type: 'band',\n        paddingInner: config.paddingInner,\n        paddingOuter: 0.1,\n      },\n    },\n    axis: {\n      x: { title: config.title },\n      y: { title: null },\n    },\n  });\n\n  chart.render();\n});\n",paraId:16,tocIndex:7},{value:"paddingOuter",paraId:17,tocIndex:8},{value:" 控制两端的间距，间接影响带宽：",paraId:17,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { category: 'A', value: 100 },\n  { category: 'B', value: 80 },\n  { category: 'C', value: 120 },\n  { category: 'D', value: 90 },\n];\n\nconst charts = [\n  { paddingOuter: 0, title: 'paddingOuter: 0' },\n  { paddingOuter: 0.3, title: 'paddingOuter: 0.3' },\n  { paddingOuter: 0.6, title: 'paddingOuter: 0.6' },\n];\n\ncharts.forEach((config, index) => {\n  const container = document.createElement('div');\n  container.style.width = '300px';\n  container.style.height = '200px';\n  container.style.display = 'inline-block';\n  container.style.margin = '10px';\n  document.getElementById('container').appendChild(container);\n\n  const chart = new Chart({\n    container,\n    autoFit: true,\n  });\n\n  chart.options({\n    type: 'interval',\n    data,\n    encode: {\n      x: 'category',\n      y: 'value',\n      color: 'category',\n    },\n    scale: {\n      x: {\n        type: 'band',\n        paddingInner: 0.2,\n        paddingOuter: config.paddingOuter,\n      },\n    },\n    axis: {\n      x: { title: config.title },\n      y: { title: null },\n    },\n  });\n\n  chart.render();\n});\n",paraId:18,tocIndex:8},{value:"类别数量越多，每个类别的带宽越小：",paraId:19,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst datasets = [\n  {\n    data: [\n      { category: 'A', value: 100 },\n      { category: 'B', value: 80 },\n    ],\n    title: '2个类别',\n  },\n  {\n    data: [\n      { category: 'A', value: 100 },\n      { category: 'B', value: 80 },\n      { category: 'C', value: 120 },\n      { category: 'D', value: 90 },\n    ],\n    title: '4个类别',\n  },\n  {\n    data: [\n      { category: 'A', value: 100 },\n      { category: 'B', value: 80 },\n      { category: 'C', value: 120 },\n      { category: 'D', value: 90 },\n      { category: 'E', value: 110 },\n      { category: 'F', value: 95 },\n    ],\n    title: '6个类别',\n  },\n];\n\ndatasets.forEach((dataset, index) => {\n  const container = document.createElement('div');\n  container.style.width = '300px';\n  container.style.height = '200px';\n  container.style.display = 'inline-block';\n  container.style.margin = '10px';\n  document.getElementById('container').appendChild(container);\n\n  const chart = new Chart({\n    container,\n    autoFit: true,\n  });\n\n  chart.options({\n    type: 'interval',\n    data: dataset.data,\n    encode: {\n      x: 'category',\n      y: 'value',\n      color: 'category',\n    },\n    scale: {\n      x: {\n        type: 'band',\n        padding: 0.3, // 固定间距比例\n      },\n    },\n    axis: {\n      x: { title: dataset.title },\n      y: { title: null },\n    },\n  });\n\n  chart.render();\n});\n",paraId:20,tocIndex:9},{value:"在实际开发中，有时需要获取计算后的带宽值，可以通过以下方式：",paraId:21,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { category: 'A', value: 100 },\n    { category: 'B', value: 80 },\n    { category: 'C', value: 120 },\n    { category: 'D', value: 90 },\n  ],\n  encode: {\n    x: 'category',\n    y: 'value',\n    color: 'category',\n  },\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.3,\n    },\n  },\n});\n\nchart.render().then(() => {\n  // 获取 x 轴的比例尺\n  const xScale = chart.getScale().x;\n\n  // 获取带宽值 - 使用无参数调用\n  const bandWidth = xScale.getBandWidth?.() ?? 0;\n  console.log('当前带宽值:', bandWidth);\n\n  // 也可以获取特定类别的带宽（如果需要）\n  const categoryABandWidth = xScale.getBandWidth?.(xScale.invert('A')) ?? 0;\n  console.log('类别A的带宽值:', categoryABandWidth);\n\n  // 计算步长值（相邻类别中心点的距离）\n  const domain = xScale.getOptions()?.domain || [];\n  const range = xScale.getOptions()?.range || [0, 1];\n  const rangeLength = range[1] - range[0];\n  const paddingInner = xScale.getOptions()?.paddingInner || 0;\n  const paddingOuter = xScale.getOptions()?.paddingOuter || 0;\n  const step = rangeLength / (domain.length - paddingInner + paddingOuter * 2);\n  console.log('当前步长值:', step);\n\n  // 在图表上显示带宽信息\n  const container = chart.getContainer();\n  const info = document.createElement('div');\n  info.style.position = 'absolute';\n  info.style.top = '10px';\n  info.style.left = '10px';\n  info.style.background = 'rgba(0,0,0,0.8)';\n  info.style.color = 'white';\n  info.style.padding = '5px 10px';\n  info.style.borderRadius = '4px';\n  info.style.fontSize = '12px';\n  info.innerHTML = `带宽: ${bandWidth.toFixed(2)}<br>步长: ${step.toFixed(2)}`;\n  container.appendChild(info);\n});\n",paraId:22,tocIndex:10},{value:"在柱状图中，带宽直接决定柱子的宽度：",paraId:23,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { month: '1月', sales: 1200 },\n    { month: '2月', sales: 1100 },\n    { month: '3月', sales: 1350 },\n    { month: '4月', sales: 1280 },\n  ],\n  encode: {\n    x: 'month',\n    y: 'sales',\n    color: 'month',\n  },\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.2, // 较小的间距，柱子较宽\n    },\n  },\n  style: {\n    stroke: '#fff',\n    strokeWidth: 2,\n  },\n});\n\nchart.render();\n",paraId:24,tocIndex:12},{value:"在条形图中，带宽决定条的高度：",paraId:25,tocIndex:13},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  coordinate: { transform: [{ type: 'transpose' }] },\n  data: [\n    { department: '销售部', count: 45 },\n    { department: '市场部', count: 32 },\n    { department: '技术部', count: 28 },\n    { department: '人事部', count: 15 },\n  ],\n  encode: {\n    x: 'department',\n    y: 'count',\n    color: 'department',\n  },\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.4, // 条之间有较大间距\n    },\n  },\n});\n\nchart.render();\n",paraId:26,tocIndex:13},{value:"在分组柱状图中，整体的带宽会被子组的数量平分：",paraId:27,tocIndex:14},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { quarter: 'Q1', type: '实际', value: 120 },\n    { quarter: 'Q1', type: '预算', value: 100 },\n    { quarter: 'Q2', type: '实际', value: 140 },\n    { quarter: 'Q2', type: '预算', value: 130 },\n    { quarter: 'Q3', type: '实际', value: 160 },\n    { quarter: 'Q3', type: '预算', value: 150 },\n  ],\n  encode: {\n    x: 'quarter',\n    y: 'value',\n    color: 'type',\n  },\n  transform: [{ type: 'dodgeX' }],\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.3, // 每个季度的整体带宽\n    },\n  },\n});\n\nchart.render();\n",paraId:28,tocIndex:14},{value:"少量数据（< 5 个类别）",paraId:29,tocIndex:16},{value:"：可以使用较小的 padding（0.1-0.3），让柱子更宽更突出",paraId:29,tocIndex:16},{value:"中等数据（5-10 个类别）",paraId:29,tocIndex:16},{value:"：建议使用中等 padding（0.3-0.5），平衡可读性和视觉效果",paraId:29,tocIndex:16},{value:"大量数据（> 10 个类别）",paraId:29,tocIndex:16},{value:"：可以使用较大的 padding（0.5-0.8），或考虑分页展示",paraId:29,tocIndex:16},{value:"import { Chart } from '@antv/g2';\n\n// 模拟不同容器宽度下的带宽效果\nconst widths = [300, 600, 900];\nconst data = Array.from({ length: 8 }, (_, i) => ({\n  category: `类别${String.fromCharCode(65 + i)}`,\n  value: Math.random() * 100 + 50,\n}));\n\nwidths.forEach((width, index) => {\n  const container = document.createElement('div');\n  container.style.width = `${width}px`;\n  container.style.height = '200px';\n  container.style.display = 'inline-block';\n  container.style.margin = '10px';\n  container.style.border = '1px solid #ccc';\n  document.getElementById('container').appendChild(container);\n\n  const chart = new Chart({\n    container,\n    width,\n    height: 200,\n  });\n\n  chart.options({\n    type: 'interval',\n    data,\n    encode: {\n      x: 'category',\n      y: 'value',\n      color: 'category',\n    },\n    scale: {\n      x: {\n        type: 'band',\n        padding: 0.2, // 固定间距比例\n      },\n    },\n    axis: {\n      x: { title: `容器宽度: ${width}px` },\n      y: { title: null },\n    },\n  });\n\n  chart.render();\n});\n",paraId:30,tocIndex:17},{value:"对于需要适配不同屏幕尺寸的图表，可以动态调整 padding：",paraId:31,tocIndex:18},{value:"// 根据容器宽度动态调整 padding\nfunction getResponsivePadding(containerWidth, dataLength) {\n  const baseWidth = containerWidth / dataLength;\n\n  if (baseWidth > 100) {\n    return 0.6; // 容器很宽时，增加间距\n  } else if (baseWidth > 50) {\n    return 0.4; // 中等宽度\n  } else {\n    return 0.2; // 容器较窄时，减少间距\n  }\n}\n",paraId:32,tocIndex:18},{value:"通过深入理解带宽概念，你可以更好地控制图表的视觉效果，创建出既美观又实用的数据可视化作品。",paraId:33,tocIndex:18},{value:"band 比例尺最常见的应用是柱状图，通过设置 ",paraId:34,tocIndex:20},{value:"padding",paraId:34,tocIndex:20},{value:" 可以控制柱子之间的间距：",paraId:34,tocIndex:20},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    color: 'genre',\n  },\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.5, // 设置柱子之间的间距\n    },\n  },\n});\n\nchart.render();\n",paraId:35,tocIndex:20},{value:"在分组柱状图中，band 比例尺与 dodgeX 转换一起使用，可以创建分组效果：",paraId:36,tocIndex:21},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { month: '1月', value: 86.5, type: '降水量' },\n    { month: '2月', value: 86.5, type: '降水量' },\n    { month: '3月', value: 86.5, type: '降水量' },\n    { month: '4月', value: 86.5, type: '降水量' },\n    { month: '5月', value: 86.5, type: '降水量' },\n    { month: '6月', value: 86.5, type: '降水量' },\n    { month: '1月', value: 30.5, type: '蒸发量' },\n    { month: '2月', value: 30.5, type: '蒸发量' },\n    { month: '3月', value: 30.5, type: '蒸发量' },\n    { month: '4月', value: 30.5, type: '蒸发量' },\n    { month: '5月', value: 30.5, type: '蒸发量' },\n    { month: '6月', value: 30.5, type: '蒸发量' },\n  ],\n  encode: {\n    x: 'month',\n    y: 'value',\n    color: 'type',\n  },\n  transform: [{ type: 'dodgeX' }],\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.2, // 设置组间距\n    },\n  },\n});\n\nchart.render();\n",paraId:37,tocIndex:21},{value:"使用 ",paraId:38,tocIndex:22},{value:"flex",paraId:38,tocIndex:22},{value:" 属性可以为不同类别设置不同的宽度比例：",paraId:38,tocIndex:22},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { country: 'USA', value: 12394, gdp: 21.4 },\n    { country: 'China', value: 9608, gdp: 14.7 },\n    { country: 'Japan', value: 4731, gdp: 5.0 },\n    { country: 'Germany', value: 3861, gdp: 4.2 },\n    { country: 'UK', value: 2678, gdp: 2.9 },\n  ],\n  encode: {\n    x: 'country',\n    y: 'value',\n    color: 'country',\n  },\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.4,\n      flex: [2.14, 1.47, 0.5, 0.42, 0.29], // 根据 GDP 设置不同宽度\n    },\n  },\n});\n\nchart.render();\n",paraId:39,tocIndex:22},{value:"通过坐标系转置，可以创建条形图，band 比例尺同样适用：",paraId:40,tocIndex:23},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  coordinate: { transform: [{ type: 'transpose' }] },\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    color: 'genre',\n  },\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.5,\n    },\n  },\n});\n\nchart.render();\n",paraId:41,tocIndex:23},{value:"使用 ",paraId:42,tocIndex:24},{value:"stackY",paraId:42,tocIndex:24},{value:" 转换可以创建堆叠柱状图，展示各部分的累积效果：",paraId:42,tocIndex:24},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { quarter: 'Q1', department: '销售部', value: 120 },\n    { quarter: 'Q1', department: '市场部', value: 100 },\n    { quarter: 'Q1', department: '技术部', value: 80 },\n    { quarter: 'Q2', department: '销售部', value: 140 },\n    { quarter: 'Q2', department: '市场部', value: 110 },\n    { quarter: 'Q2', department: '技术部', value: 90 },\n    { quarter: 'Q3', department: '销售部', value: 160 },\n    { quarter: 'Q3', department: '市场部', value: 95 },\n    { quarter: 'Q3', department: '技术部', value: 120 },\n    { quarter: 'Q4', department: '销售部', value: 180 },\n    { quarter: 'Q4', department: '市场部', value: 100 },\n    { quarter: 'Q4', department: '技术部', value: 130 },\n  ],\n  encode: {\n    x: 'quarter',\n    y: 'value',\n    color: 'department',\n  },\n  transform: [{ type: 'stackY' }],\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.3,\n    },\n  },\n});\n\nchart.render();\n",paraId:43,tocIndex:24},{value:"根据指定字段的值自动调整柱子宽度，适合表示权重或比例关系：",paraId:44,tocIndex:25},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { region: '华东', sales: 8500, population: 2.4 },\n    { region: '华南', sales: 6200, population: 1.8 },\n    { region: '华北', sales: 7800, population: 2.1 },\n    { region: '西南', sales: 4500, population: 1.2 },\n    { region: '东北', sales: 3200, population: 0.9 },\n    { region: '西北', sales: 2800, population: 0.7 },\n  ],\n  encode: {\n    x: 'region',\n    y: 'sales',\n    color: 'region',\n  },\n  transform: [{ type: 'flexX', field: 'population' }], // 根据人口数据调整柱宽\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.2,\n    },\n  },\n});\n\nchart.render();\n",paraId:45,tocIndex:25},{value:"处理时间数据时，band 比例尺能很好地处理时间间隔的可视化：",paraId:46,tocIndex:26},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { month: '2024-01', sales: 1200 },\n    { month: '2024-02', sales: 1100 },\n    { month: '2024-03', sales: 1350 },\n    { month: '2024-04', sales: 1280 },\n    { month: '2024-05', sales: 1400 },\n    { month: '2024-06', sales: 1520 },\n    { month: '2024-07', sales: 1680 },\n    { month: '2024-08', sales: 1590 },\n    { month: '2024-09', sales: 1450 },\n    { month: '2024-10', sales: 1380 },\n    { month: '2024-11', sales: 1250 },\n    { month: '2024-12', sales: 1600 },\n  ],\n  encode: {\n    x: 'month',\n    y: 'sales',\n    color: (d) => (d.sales > 1500 ? 'high' : d.sales > 1300 ? 'medium' : 'low'),\n  },\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.1,\n    },\n    color: {\n      domain: ['low', 'medium', 'high'],\n      range: ['#faad14', '#1890ff', '#52c41a'],\n    },\n  },\n});\n\nchart.render();\n",paraId:47,tocIndex:26},{value:"展示具有层次结构的分类数据：",paraId:48,tocIndex:27},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { category: '服装-男装', subcategory: '衬衫', value: 850 },\n    { category: '服装-男装', subcategory: '裤子', value: 750 },\n    { category: '服装-男装', subcategory: '外套', value: 650 },\n    { category: '服装-女装', subcategory: '连衣裙', value: 950 },\n    { category: '服装-女装', subcategory: '上衣', value: 800 },\n    { category: '服装-女装', subcategory: '裙子', value: 700 },\n    { category: '电子-手机', subcategory: 'iPhone', value: 1200 },\n    { category: '电子-手机', subcategory: '华为', value: 1100 },\n    { category: '电子-手机', subcategory: '小米', value: 900 },\n    { category: '电子-电脑', subcategory: '笔记本', value: 1500 },\n    { category: '电子-电脑', subcategory: '台式机', value: 800 },\n    { category: '电子-电脑', subcategory: '平板', value: 600 },\n  ],\n  encode: {\n    x: 'category',\n    y: 'value',\n    color: 'subcategory',\n  },\n  transform: [{ type: 'dodgeX' }],\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.4, // 较大的间距区分不同主类别\n      paddingInner: 0.3, // 内部间距\n      paddingOuter: 0.1, // 外部间距\n    },\n  },\n});\n\nchart.render();\n",paraId:49,tocIndex:27},{value:"使用 paddingInner 和 paddingOuter 精确控制间距，适合对比分析：",paraId:50,tocIndex:28},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { product: '产品A', current: 320, target: 400 },\n    { product: '产品B', current: 280, target: 350 },\n    { product: '产品C', current: 410, target: 450 },\n    { product: '产品D', current: 180, target: 250 },\n    { product: '产品E', current: 350, target: 380 },\n  ].flatMap((d) => [\n    { product: d.product, type: '当前销量', value: d.current },\n    { product: d.product, type: '目标销量', value: d.target },\n  ]),\n  encode: {\n    x: 'product',\n    y: 'value',\n    color: 'type',\n  },\n  transform: [{ type: 'dodgeX' }],\n  scale: {\n    x: {\n      type: 'band',\n      paddingInner: 0.2, // 组内间距较小\n      paddingOuter: 0.3, // 组间间距较大\n    },\n    color: {\n      domain: ['当前销量', '目标销量'],\n      range: ['#1890ff', '#52c41a'],\n    },\n  },\n});\n\nchart.render();\n",paraId:51,tocIndex:28},{value:"结合 compare 函数对数据进行排序，并使用不同的柱宽策略：",paraId:52,tocIndex:29},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { brand: '苹果', market_share: 23.4, revenue: 365 },\n  { brand: '三星', market_share: 20.1, revenue: 220 },\n  { brand: '华为', market_share: 15.8, revenue: 180 },\n  { brand: '小米', market_share: 12.3, revenue: 120 },\n  { brand: 'OPPO', market_share: 8.9, revenue: 95 },\n  { brand: 'vivo', market_share: 7.2, revenue: 85 },\n  { brand: '其他', market_share: 12.3, revenue: 150 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data,\n  encode: {\n    x: 'brand',\n    y: 'market_share',\n    color: 'brand',\n  },\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.2,\n      compare: (a, b) => {\n        // 按市场份额降序排列\n        const dataA = data.find((d) => d.brand === a);\n        const dataB = data.find((d) => d.brand === b);\n        return (dataB?.market_share || 0) - (dataA?.market_share || 0);\n      },\n      flex: [2.34, 2.01, 1.58, 1.23, 0.89, 0.72, 1.23], // 根据市场份额设置宽度\n    },\n  },\n});\n\nchart.render();\n",paraId:53,tocIndex:29},{value:"展示数值的逐步累积变化过程：",paraId:54,tocIndex:31},{value:"import { Chart } from '@antv/g2';\n\n// 瀑布图数据处理\nconst rawData = [\n  { name: '期初余额', value: 1000, type: 'start' },\n  { name: '收入增加', value: 500, type: 'positive' },\n  { name: '成本支出', value: -200, type: 'negative' },\n  { name: '税费支出', value: -150, type: 'negative' },\n  { name: '其他收入', value: 100, type: 'positive' },\n  { name: '期末余额', value: 1250, type: 'end' },\n];\n\n// 计算累积值\nlet cumulative = 0;\nconst data = rawData.map((d, i) => {\n  if (d.type === 'start' || d.type === 'end') {\n    const result = { ...d, start: 0, end: d.value };\n    cumulative = d.value;\n    return result;\n  } else {\n    const start = cumulative;\n    cumulative += d.value;\n    return { ...d, start, end: cumulative };\n  }\n});\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data: data.flatMap((d) => [\n    { name: d.name, value: d.end - d.start, position: d.start, type: d.type },\n  ]),\n  encode: {\n    x: 'name',\n    y: ['position', (d) => d.position + d.value],\n    color: 'type',\n  },\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.4,\n    },\n    color: {\n      domain: ['start', 'positive', 'negative', 'end'],\n      range: ['#722ed1', '#52c41a', '#ff4d4f', '#1890ff'],\n    },\n  },\n});\n\nchart.render();\n",paraId:55,tocIndex:31},{value:"使用 band 比例尺结合分面布局展示多维数据：",paraId:56,tocIndex:32},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'facetRect',\n  data: [\n    { region: '北区', quarter: 'Q1', product: '产品A', sales: 120 },\n    { region: '北区', quarter: 'Q1', product: '产品B', sales: 100 },\n    { region: '北区', quarter: 'Q1', product: '产品C', sales: 80 },\n    { region: '北区', quarter: 'Q2', product: '产品A', sales: 140 },\n    { region: '北区', quarter: 'Q2', product: '产品B', sales: 110 },\n    { region: '北区', quarter: 'Q2', product: '产品C', sales: 90 },\n    { region: '南区', quarter: 'Q1', product: '产品A', sales: 150 },\n    { region: '南区', quarter: 'Q1', product: '产品B', sales: 130 },\n    { region: '南区', quarter: 'Q1', product: '产品C', sales: 110 },\n    { region: '南区', quarter: 'Q2', product: '产品A', sales: 170 },\n    { region: '南区', quarter: 'Q2', product: '产品B', sales: 140 },\n    { region: '南区', quarter: 'Q2', product: '产品C', sales: 120 },\n  ],\n  encode: { x: 'region', y: 'quarter' },\n  children: [\n    {\n      type: 'interval',\n      encode: {\n        x: 'product',\n        y: 'sales',\n        color: 'product',\n      },\n      scale: {\n        x: {\n          type: 'band',\n          padding: 0.3,\n        },\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:57,tocIndex:32},{value:"可以通过设置 ",paraId:58,tocIndex:34},{value:"padding",paraId:58,tocIndex:34},{value:" 属性来调整柱子之间的间距，从而间接调整柱子的宽度。",paraId:58,tocIndex:34},{value:"padding",paraId:58,tocIndex:34},{value:" 值越大，柱子越窄；值越小，柱子越宽。",paraId:58,tocIndex:34},{value:"chart.interval().encode('x', 'type').encode('y', 'sale').scale('x', {\n  type: 'band',\n  padding: 0.5, // 值范围在 [0, 1] 之间\n});\n",paraId:59,tocIndex:34},{value:"band 比例尺",paraId:60,tocIndex:35},{value:"：为每个类别分配一个区间（带宽），适合柱状图等需要占据宽度的图表",paraId:60,tocIndex:35},{value:"point 比例尺",paraId:60,tocIndex:35},{value:"：为每个类别分配一个点，相当于 ",paraId:60,tocIndex:35},{value:"bandWidth = 0",paraId:60,tocIndex:35},{value:" 的 band 比例尺，适合散点图等只需要点位置的图表",paraId:60,tocIndex:35},{value:"有两种方法：",paraId:61,tocIndex:36},{value:"使用 ",paraId:62,tocIndex:36},{value:"flex",paraId:62,tocIndex:36},{value:" 属性为不同类别设置不同的宽度比例",paraId:62,tocIndex:36},{value:"使用 ",paraId:62,tocIndex:36},{value:"flexX",paraId:62,tocIndex:36},{value:" 转换，根据指定字段的值自动设置柱宽",paraId:62,tocIndex:36},{value:"// 方法1：使用 flex 属性\nchart\n  .interval()\n  .encode('x', 'country')\n  .encode('y', 'value')\n  .scale('x', {\n    type: 'band',\n    flex: [2, 1, 3, 1.5], // 手动设置宽度比例\n  });\n\n// 方法2：使用 flexX 转换\nchart\n  .interval()\n  .encode('x', 'country')\n  .encode('y', 'value')\n  .transform({ type: 'flexX', field: 'gdp' }); // 根据 gdp 字段自动设置宽度\n",paraId:63,tocIndex:36}]},51508:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(29557);const t=[{value:"linear 是连续型比例尺的基类，它的核心作用是将数据从数据域（domain）线性映射到视觉范围（range），同时保留数据之间的比例关系。每个输出值 y 均可表示为输入值 x 的线性函数：",paraId:0,tocIndex:0},{value:"y = mx + b",paraId:0,tocIndex:0},{value:"。",paraId:0,tocIndex:0},{value:"当未显式声明比例尺类型时，G2 会对数值型（如温度、销售额）字段默认应用 linear 比例尺。",paraId:1,tocIndex:0},{value:"linear 比例尺常规用于将数据映射到归一化坐标上。这个例子中会将 y 通道的比例尺设置它的映射方式，从而影响到图形在画布上的位置。",paraId:2,tocIndex:1},{value:"chart\n  .line()\n  .encode('x', 'year')\n  .encode('y', 'sale')\n  .scale('y', {\n    type: 'linear',\n    range: [0.2, 0.8],\n    /* 其他配置项 */\n  });\n",paraId:3,tocIndex:1},{value:"不仅可以在数据类型为连续数值数据时使用，也可以在需要保持数据比例关系中使用。",paraId:4,tocIndex:1},{value:"chart\n  .interval()\n  .data([\n    { time: '2023-01', sales: '100' },\n    { time: '2023-01', sales: '300' },\n  ])\n  .encode('x', 'time')\n  .encode('y', 'sales')\n  .scale('y', {\n    type: 'linear', // 当 sales 数值为字符串，会被错误地推断为分类数据，需要显式设置\n  });\n",paraId:5,tocIndex:1},{value:"交互可以配置在 Mark 层级：",paraId:6,tocIndex:2},{value:"({\n  type: 'line',\n  scale: {\n    x: { padding: 0.5 },\n    y: {\n      type: 'linear', // 指定类型\n      domain: [10, 100], // 指定定义域\n      range: [0, 1], // 指定值域\n    },\n  },\n});\n",paraId:7,tocIndex:2},{value:"也可以配置在 View 层级：",paraId:8,tocIndex:2},{value:"({\n  type: 'view',\n  scale: {\n    x: { padding: 0.5 },\n    y: {\n      type: 'linear', // 指定类型\n      domain: [10, 100], // 指定定义域\n      range: [0, 1], // 指定值域\n    },\n  },\n});\n",paraId:9,tocIndex:2},{value:"属性",paraId:10,tocIndex:3},{value:"描述",paraId:10,tocIndex:3},{value:"类型",paraId:10,tocIndex:3},{value:"默认值",paraId:10,tocIndex:3},{value:"domain",paraId:10,tocIndex:3},{value:"设置数据的定义域范围",paraId:10,tocIndex:3},{value:"number[]",paraId:10,tocIndex:3},{value:"输入数据的最大最小值范围",paraId:10,tocIndex:3},{value:"domainMin",paraId:10,tocIndex:3},{value:"设置数据的定义域最小值",paraId:10,tocIndex:3},{value:"number",paraId:10,tocIndex:3},{value:"输入数据的最小值",paraId:10,tocIndex:3},{value:"domainMax",paraId:10,tocIndex:3},{value:"设置数据的定义域最大值",paraId:10,tocIndex:3},{value:"number",paraId:10,tocIndex:3},{value:"输入数据的最大",paraId:10,tocIndex:3},{value:"range",paraId:10,tocIndex:3},{value:"设置数据映射的值域范围",paraId:10,tocIndex:3},{value:"number[]",paraId:10,tocIndex:3},{value:" | ",paraId:10,tocIndex:3},{value:"string[]",paraId:10,tocIndex:3},{value:"[0, 1]",paraId:10,tocIndex:3},{value:"rangeMin",paraId:10,tocIndex:3},{value:"设置数据映射的值域最小值",paraId:10,tocIndex:3},{value:"number | string",paraId:10,tocIndex:3},{value:"0",paraId:10,tocIndex:3},{value:"rangeMax",paraId:10,tocIndex:3},{value:"设置数据映射的值域最大值",paraId:10,tocIndex:3},{value:"number | string",paraId:10,tocIndex:3},{value:"1",paraId:10,tocIndex:3},{value:"unknown",paraId:10,tocIndex:3},{value:"对于 ",paraId:10,tocIndex:3},{value:"undefined",paraId:10,tocIndex:3},{value:"， ",paraId:10,tocIndex:3},{value:"NaN",paraId:10,tocIndex:3},{value:"，",paraId:10,tocIndex:3},{value:"null",paraId:10,tocIndex:3},{value:" 空值，返回的数据",paraId:10,tocIndex:3},{value:"any",paraId:10,tocIndex:3},{value:"undefined",paraId:10,tocIndex:3},{value:"tickCount",paraId:10,tocIndex:3},{value:"设置推荐的 tick 生成数量，tickCount 只是建议值，不会完全按照这个值产生 tick",paraId:10,tocIndex:3},{value:"number",paraId:10,tocIndex:3},{value:"5",paraId:10,tocIndex:3},{value:"tickMethod",paraId:10,tocIndex:3},{value:"设置生成 tick 的方法，常用于自定义 tick",paraId:10,tocIndex:3},{value:"(min: number, max: number, count: number) => number[]",paraId:10,tocIndex:3},{value:"d3-ticks",paraId:10,tocIndex:3},{value:"round",paraId:10,tocIndex:3},{value:"输出值去四舍五入",paraId:10,tocIndex:3},{value:"boolean",paraId:10,tocIndex:3},{value:"false",paraId:10,tocIndex:3},{value:"clamp",paraId:10,tocIndex:3},{value:"将映射值限定在 range 的范围内",paraId:10,tocIndex:3},{value:"boolean",paraId:10,tocIndex:3},{value:"false",paraId:10,tocIndex:3},{value:"nice",paraId:10,tocIndex:3},{value:"扩展 domain 范围，让输出的 tick 展示得更加友好",paraId:10,tocIndex:3},{value:"boolean",paraId:10,tocIndex:3},{value:"false",paraId:10,tocIndex:3},{value:"interpolate",paraId:10,tocIndex:3},{value:"自定义差值函数",paraId:10,tocIndex:3},{value:"(a: number, b: number) => (t: number) => T",paraId:10,tocIndex:3},{value:"(a, b) => (t) => a * (1 - t) + b * t",paraId:10,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  { time: '2023-01', sales: 100 },\n  { time: '2023-02', sales: 200 },\n  { time: '2023-03', sales: 150 },\n  { time: '2023-04', sales: 300 },\n  { time: '2023-05', sales: 400 },\n];\n\nchart\n  .interval()\n  .data(data)\n  .encode('x', 'time')\n  .encode('y', 'sales')\n  .scale('y', {\n    type: 'linear', // 使用线性比例尺\n    nice: true,\n    domain: [0, 300], // 自定义设置比例尺的范围，需要显式设置\n  });\n\nchart.render();\n",paraId:11,tocIndex:4},{value:"怎么自定义 y 轴的刻度？",paraId:12,tocIndex:5},{value:"比如只需要在刻度上显示 0, 100, 600，那就以下方式设置 y 比例尺。",paraId:13,tocIndex:5},{value:"chart\n  .line()\n  // ...\n  .scale('y', {\n    type: 'linear',\n    domain: [0, 700],\n    tickMethod: () => [0, 100, 600],\n  });\n",paraId:14,tocIndex:5}]},46568:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(48910);const t=[{value:"G2 中 ",paraId:0,tocIndex:0},{value:"对数比例尺（log scale）",paraId:0,tocIndex:0},{value:" 是使用对数函数进行数据映射，基于指数关系的非线性分布,针对呈现指数增长的数据。当 ",paraId:0,tocIndex:0},{value:"data",paraId:0,tocIndex:0},{value:" 中的数值范围跨度很大而导致部分图形密集或者空白过多时，可以优先考虑使用。",paraId:0,tocIndex:0},{value:"基于数学公式 ",paraId:1,tocIndex:0},{value:"y = log(base) + b",paraId:1,tocIndex:0},{value:" 。",paraId:1,tocIndex:0},{value:"线性比例尺（linear scale）",paraId:2,tocIndex:0},{value:"对数比例尺（log scale）",paraId:3,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  height: 300,\n  data: [\n    { year: '1991', value: 1 },\n    { year: '1992', value: 10 },\n    { year: '1993', value: 100 },\n    { year: '1994', value: 1000 },\n    { year: '1995', value: 10000 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: {\n    y: {\n      type: 'log',\n      // 刻度数\n      tickCount: 5,\n      // 生成均匀的刻度\n      tickMethod: (min, max, count, base) => {\n        // 计算对数范围\n        const logMin = Math.log(min) / Math.log(base);\n        const logMax = Math.log(max) / Math.log(base);\n\n        // 计算对数步长\n        const logStep = (logMax - logMin) / (count - 1);\n\n        // 生成刻度数组\n        const ticks = [];\n        for (let i = 0; i < count; i++) {\n          const logValue = logMin + i * logStep;\n          const value = Math.pow(base, logValue);\n          // 过滤超出范围的值\n          if (value >= min && value <= max) {\n            ticks.push(Math.round(value));\n          }\n        }\n        return ticks;\n      },\n    },\n  },\n  children: [\n    { type: 'line', labels: [{ text: 'value', style: { dx: -10, dy: -12 } }] },\n    { type: 'point', style: { fill: 'white' }, tooltip: false },\n  ],\n});\n\nchart.render(); // 渲染图标\n",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:2},{value:"描述",paraId:5,tocIndex:2},{value:"类型",paraId:5,tocIndex:2},{value:"默认值",paraId:5,tocIndex:2},{value:"必选",paraId:5,tocIndex:2},{value:"domain",paraId:5,tocIndex:2},{value:"设置数据的定义域范围",paraId:5,tocIndex:2},{value:"number[]",paraId:5,tocIndex:2},{value:"输入数据的最大最小值范围",paraId:5,tocIndex:2},{value:"domainMin",paraId:5,tocIndex:2},{value:"设置数据的定义域最小值",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:"输入数据的最小值",paraId:5,tocIndex:2},{value:"domainMax",paraId:5,tocIndex:2},{value:"设置数据的定义域最大值",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:"输入数据的最大",paraId:5,tocIndex:2},{value:"range",paraId:5,tocIndex:2},{value:"设置数据映射的值域范围",paraId:5,tocIndex:2},{value:"number[]",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"string[]",paraId:5,tocIndex:2},{value:"[0, 1]",paraId:5,tocIndex:2},{value:"rangeMin",paraId:5,tocIndex:2},{value:"设置数据映射的值域最小值",paraId:5,tocIndex:2},{value:"number | string",paraId:5,tocIndex:2},{value:"0",paraId:5,tocIndex:2},{value:"rangeMax",paraId:5,tocIndex:2},{value:"设置数据映射的值域最大值",paraId:5,tocIndex:2},{value:"number | string",paraId:5,tocIndex:2},{value:"1",paraId:5,tocIndex:2},{value:"unknown",paraId:5,tocIndex:2},{value:"对于 ",paraId:5,tocIndex:2},{value:"undefined",paraId:5,tocIndex:2},{value:"， ",paraId:5,tocIndex:2},{value:"NaN",paraId:5,tocIndex:2},{value:"，",paraId:5,tocIndex:2},{value:"null",paraId:5,tocIndex:2},{value:" 空值，返回的数据",paraId:5,tocIndex:2},{value:"any",paraId:5,tocIndex:2},{value:"undefined",paraId:5,tocIndex:2},{value:"tickCount",paraId:5,tocIndex:2},{value:"设置推荐的 tick 生成数量，tickCount 只是建议值，不会完全按照这个值产生 tick",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:"5",paraId:5,tocIndex:2},{value:"tickMethod",paraId:5,tocIndex:2},{value:"设置生成 tick 的方法，常用于自定义 tick",paraId:5,tocIndex:2},{value:"(min: number, max: number, count: number) => number[]",paraId:5,tocIndex:2},{value:"calculateLogTicks",paraId:5,tocIndex:2},{value:"round",paraId:5,tocIndex:2},{value:"输出值去四舍五入",paraId:5,tocIndex:2},{value:"boolean",paraId:5,tocIndex:2},{value:"false",paraId:5,tocIndex:2},{value:"clamp",paraId:5,tocIndex:2},{value:"将映射值限定在 range 的范围内",paraId:5,tocIndex:2},{value:"boolean",paraId:5,tocIndex:2},{value:"false",paraId:5,tocIndex:2},{value:"nice",paraId:5,tocIndex:2},{value:"扩展 domain 范围，让输出的 tick 展示得更加友好",paraId:5,tocIndex:2},{value:"boolean",paraId:5,tocIndex:2},{value:"false",paraId:5,tocIndex:2},{value:"interpolate",paraId:5,tocIndex:2},{value:"自定义差值函数",paraId:5,tocIndex:2},{value:"(a: number, b: number) => (t: number) => T",paraId:5,tocIndex:2},{value:"(a, b) => (t) => a * (1 - t) + b * t",paraId:5,tocIndex:2},{value:"base",paraId:5,tocIndex:2},{value:"设定对数底",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:"10",paraId:5,tocIndex:2},{value:"配置及注意事项:",paraId:6,tocIndex:2},{value:"{\n  scale: {\n    y: {\n      type: 'log', // 注意 当数据返回跨度正负数的时候,请勿使用 log。\n      domainMin: 10,\n      domainMax: 1000,\n      base: 100, // 设置 base 底数为 100,\n    }\n  }\n}\n",paraId:7,tocIndex:2},{value:"如果需要最小值 ",paraId:8,tocIndex:2},{value:"domainMin:0",paraId:8,tocIndex:2},{value:" 的情况， 可参考 ",paraId:8,tocIndex:2},{value:"图表示例 - 对数柱形图",paraId:9,tocIndex:2},{value:"页面。",paraId:8,tocIndex:2},{value:"linear",paraId:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  height: 300,\n  data: [\n    { year: '1991', value: 1 },\n    { year: '1992', value: 10 },\n    { year: '1993', value: 1000 },\n    { year: '1994', value: 0.1 },\n    { year: '1995', value: 100 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: { x: { range: [0, 1] }, y: { type: 'log', tickCount: 4 } },\n  axis: {\n    y: {\n      labelFormatter: (v) => {\n        return Math.log10(v) + 1;\n      },\n    },\n  },\n  children: [\n    {\n      type: 'line',\n      labels: [\n        {\n          text: 'value',\n          formatter: (v) => {\n            return Math.log10(v) + 1;\n          },\n          style: { dx: -10, dy: -12 },\n        },\n      ],\n    },\n    { type: 'point', style: { fill: 'white' }, tooltip: false },\n  ],\n});\n\nchart.render(); // 渲染图标\n",paraId:11,tocIndex:4}]},72620:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(78769);const t=[{value:"ordinal 比例尺是一种分类比例尺，它将离散的定义域（domain）映射到离散的值域（range）。与连续比例尺不同，ordinal 比例尺处理的是离散的、分类的数据，如商品类别、班级、性别等。",paraId:0,tocIndex:0},{value:"ordinal 比例尺的核心特点是：",paraId:1,tocIndex:0},{value:"输入值必须是离散的（通常是字符串或其他非数值类型）",paraId:2,tocIndex:0},{value:"输出值也是离散的（可以是任何类型，如颜色、形状等）",paraId:2,tocIndex:0},{value:"保持输入数据的顺序，但不保持数据间的比例关系",paraId:2,tocIndex:0},{value:"在 G2 中，ordinal 比例尺最常用于将分类数据映射到视觉属性，如颜色、形状等。当未显式声明比例尺类型时，G2 会对分类型数据默认应用 ordinal 比例尺。",paraId:3,tocIndex:0},{value:"ordinal 比例尺的工作原理是：",paraId:4,tocIndex:1},{value:"将输入域中的每个离散值（如 'A', 'B', 'C'）按顺序映射到输出域中的对应值（如 'red', 'green', 'blue'）",paraId:5,tocIndex:1},{value:"映射是一一对应的，第一个输入值映射到第一个输出值，第二个输入值映射到第二个输出值，以此类推",paraId:5,tocIndex:1},{value:"如果输入值不在定义域中，则返回 unknown 值（默认为 undefined）",paraId:5,tocIndex:1},{value:"例如，对于定义域 ['A', 'B', 'C'] 和值域 ['red', 'green', 'blue']：",paraId:6,tocIndex:1},{value:"输入 'A' 映射为 'red'",paraId:7,tocIndex:1},{value:"输入 'B' 映射为 'green'",paraId:7,tocIndex:1},{value:"输入 'C' 映射为 'blue'",paraId:7,tocIndex:1},{value:"输入 'D'（不在定义域中）映射为 undefined",paraId:7,tocIndex:1},{value:"与 band/point 比例尺的区别",paraId:8,tocIndex:2},{value:"：band 和 point 比例尺也处理分类数据，但它们将分类数据映射到连续的数值范围，主要用于位置编码（如 x、y 坐标）",paraId:8,tocIndex:2},{value:"与连续比例尺的区别",paraId:8,tocIndex:2},{value:"：linear、log 等连续比例尺处理连续数值数据，保持数据间的比例关系",paraId:8,tocIndex:2},{value:"与离散化比例尺的区别",paraId:8,tocIndex:2},{value:"：quantize、threshold 等离散化比例尺将连续数据离散化，而 ordinal 直接处理离散数据",paraId:8,tocIndex:2},{value:"ordinal 比例尺适用于以下场景：",paraId:9,tocIndex:3},{value:"将分类数据映射到颜色（如不同产品类别使用不同颜色）",paraId:10,tocIndex:3},{value:"将分类数据映射到形状（如不同性别使用不同形状）",paraId:10,tocIndex:3},{value:"将分类数据映射到其他视觉通道（如大小、透明度等）",paraId:10,tocIndex:3},{value:"需要自定义分类数据的显示顺序",paraId:10,tocIndex:3},{value:"以下是一个基本的使用示例，将分类数据映射到颜色通道：",paraId:11,tocIndex:4},{value:"chart\n  .interval()\n  .encode('x', 'category')\n  .encode('y', 'value')\n  .encode('color', 'category')\n  .scale('color', {\n    type: 'ordinal',\n    range: ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#c564be'],\n  });\n",paraId:12,tocIndex:4},{value:"这个例子中，我们将 'category' 字段映射到颜色通道，并使用 ordinal 比例尺指定了一组自定义颜色。",paraId:13,tocIndex:4},{value:"ordinal 比例尺提供了以下配置选项：",paraId:14,tocIndex:5},{value:"参数",paraId:15,tocIndex:5},{value:"说明",paraId:15,tocIndex:5},{value:"类型",paraId:15,tocIndex:5},{value:"默认值",paraId:15,tocIndex:5},{value:"必选",paraId:15,tocIndex:5},{value:"domain",paraId:15,tocIndex:5},{value:"设置数据的定义域范围",paraId:15,tocIndex:5},{value:"any[]",paraId:15,tocIndex:5},{value:"[]",paraId:15,tocIndex:5},{value:"range",paraId:15,tocIndex:5},{value:"设置数据映射的值域范围",paraId:15,tocIndex:5},{value:"any[]",paraId:15,tocIndex:5},{value:"[]",paraId:15,tocIndex:5},{value:"unknown",paraId:15,tocIndex:5},{value:"对于 ",paraId:15,tocIndex:5},{value:"undefined",paraId:15,tocIndex:5},{value:"， ",paraId:15,tocIndex:5},{value:"NaN",paraId:15,tocIndex:5},{value:"，",paraId:15,tocIndex:5},{value:"null",paraId:15,tocIndex:5},{value:" 空值，返回的数据",paraId:15,tocIndex:5},{value:"any",paraId:15,tocIndex:5},{value:"undefined",paraId:15,tocIndex:5},{value:"compare",paraId:15,tocIndex:5},{value:"比较两个值，用于排序的比较器",paraId:15,tocIndex:5},{value:"(a: number | string, b: number | string) => number",paraId:15,tocIndex:5},{value:"undefined",paraId:15,tocIndex:5},{value:"domain",paraId:16,tocIndex:6},{value:" 参数定义了比例尺的输入域，即原始数据的可能值集合。对于 ordinal 比例尺，domain 通常是一个字符串数组，表示所有可能的分类值。",paraId:16,tocIndex:6},{value:"如果不设置 domain，G2 会根据数据自动推断。但在某些情况下，显式设置 domain 可以：",paraId:17,tocIndex:6},{value:"控制分类的顺序",paraId:18,tocIndex:6},{value:"包含数据中可能不存在但需要在图例中显示的类别",paraId:18,tocIndex:6},{value:"限制只显示部分类别",paraId:18,tocIndex:6},{value:"chart.scale('color', {\n  type: 'ordinal',\n  domain: ['类别A', '类别B', '类别C'], // 显式指定类别及其顺序\n});\n",paraId:19,tocIndex:6},{value:"range",paraId:20,tocIndex:7},{value:" 参数定义了比例尺的输出域，即映射后的值集合。对于 ordinal 比例尺，range 可以是任何类型的数组，最常见的是颜色数组。",paraId:20,tocIndex:7},{value:"chart.scale('color', {\n  type: 'ordinal',\n  range: ['#1f77b4', '#ff7f0e', '#2ca02c'], // 自定义颜色\n});\n",paraId:21,tocIndex:7},{value:"如果不设置 range，G2 会根据通道类型使用默认值：",paraId:22,tocIndex:7},{value:"对于 color 通道，使用默认的分类颜色方案",paraId:23,tocIndex:7},{value:"对于 shape 通道，使用默认的形状集合",paraId:23,tocIndex:7},{value:"对于其他通道，根据具体情况确定",paraId:23,tocIndex:7},{value:"compare",paraId:24,tocIndex:8},{value:" 参数是一个比较函数，用于对 domain 中的值进行排序。这对于控制分类数据的显示顺序非常有用。",paraId:24,tocIndex:8},{value:"chart.scale('color', {\n  type: 'ordinal',\n  // 按字母顺序排序\n  compare: (a, b) => a.localeCompare(b),\n});\n",paraId:25,tocIndex:8},{value:"如果不提供 compare 函数，domain 中的值将保持原始顺序。",paraId:26,tocIndex:8},{value:"下面是一个使用 ordinal 比例尺将分类数据映射到颜色的基础示例：",paraId:27,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    color: 'genre', // 将 genre 映射到颜色通道\n  },\n  scale: {\n    color: {\n      type: 'ordinal',\n      // 自定义颜色范围\n      range: ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#c564be'],\n    },\n  },\n});\n\nchart.render();\n",paraId:28,tocIndex:10},{value:"在这个示例中，我们使用 ordinal 比例尺将游戏类型（genre）映射到不同的颜色。每个类别都会对应到 range 数组中的一个颜色。",paraId:29,tocIndex:10},{value:"下面的示例展示了一个基本的分类数据可视化：",paraId:30,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\n// 创建图表实例\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\n// 准备数据 - 故意使用乱序的类别\nconst data = [\n  { category: 'C', value: 20 },\n  { category: 'A', value: 40 },\n  { category: 'B', value: 30 },\n  { category: 'E', value: 10 },\n  { category: 'D', value: 25 },\n];\n\n// 配置图表\nchart.options({\n  type: 'interval',\n  data,\n  encode: {\n    x: 'category',\n    y: 'value',\n    color: 'category',\n  },\n});\n\n// 渲染图表\nchart.render();\n",paraId:31,tocIndex:11},{value:"在这个示例中，我们可以看到 G2 默认使用 ordinal 比例尺处理分类数据。默认情况下，类别会按照数据中的原始顺序（C, A, B, E, D）显示。",paraId:32,tocIndex:11},{value:"如果需要自定义排序，可以添加以下配置：",paraId:33,tocIndex:11},{value:"scale: {\n  x: {\n    type: 'ordinal',\n    compare: (a, b) => a.localeCompare(b), // 按字母顺序排序\n  },\n  color: {\n    type: 'ordinal',\n    compare: (a, b) => a.localeCompare(b), // 保持颜色映射一致\n  },\n}\n",paraId:34,tocIndex:11},{value:"这样可以确保类别按照字母顺序排列（A, B, C, D, E），而不是数据中的原始顺序。",paraId:35,tocIndex:11},{value:"以下是一个使用 G2 声明式语法（G2Spec）配置 ordinal 比例尺的完整示例：",paraId:36,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst spec = {\n  type: 'interval',\n  data: [\n    { category: 'A', value: 40 },\n    { category: 'B', value: 30 },\n    { category: 'C', value: 20 },\n    { category: 'D', value: 10 },\n    { category: 'E', value: 25 },\n  ],\n  scale: {\n    color: {\n      type: 'ordinal',\n      domain: ['A', 'B', 'C', 'D', 'E'], // 显式指定类别顺序\n      range: ['#5B8FF9', '#5AD8A6', '#5D7092', '#F6BD16', '#E8684A'], // 自定义颜色\n    },\n  },\n  encode: {\n    x: 'category',\n    y: 'value',\n    color: 'category',\n  },\n};\n\n// 使用 Chart 渲染\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\nchart.options(spec);\nchart.render();\n",paraId:37,tocIndex:12},{value:"这个示例展示了如何使用 G2 声明式语法创建一个使用 ordinal 比例尺的柱状图，包括以下特性：",paraId:38,tocIndex:12},{value:"使用 ordinal 比例尺将分类数据映射到颜色",paraId:39,tocIndex:12},{value:"显式指定类别顺序",paraId:39,tocIndex:12},{value:"自定义颜色范围",paraId:39,tocIndex:12},{value:"使用 ordinal 比例尺时需要注意以下几点：",paraId:40,tocIndex:13},{value:"类别数量与颜色数量",paraId:41,tocIndex:13},{value:"：如果类别数量超过了 range 中提供的颜色数量，G2 会循环使用这些颜色。为了获得最佳视觉效果，建议 range 的长度至少等于不同类别的数量。",paraId:41,tocIndex:13},{value:"颜色选择",paraId:42,tocIndex:13},{value:"：选择具有良好对比度的颜色，确保不同类别可以清晰区分。对于大量类别，可以考虑使用专业的颜色方案，如 ColorBrewer。",paraId:42,tocIndex:13},{value:"与其他比例尺的配合",paraId:43,tocIndex:13},{value:"：在同一个图表中，ordinal 比例尺通常与 band 或 point 比例尺配合使用，前者用于颜色编码，后者用于位置编码。",paraId:43,tocIndex:13},{value:"排序考虑",paraId:44,tocIndex:13},{value:"：根据数据的语义选择合适的排序方式。有时按照数值大小排序比按照类别名称排序更有意义。",paraId:44,tocIndex:13}]},66534:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(27390);const t=[{value:"G2 中",paraId:0},{value:"比例尺（Scale）",paraId:0},{value:" 是可视化很重要的一个抽象：将抽象数据映射为视觉数据，它是抽象数据和视觉数据的桥梁。如果说编码决定了标记的哪些通道需要被可视化，那么比例尺决定了这些通道该如何被可视化。",paraId:0},{value:"G2 提供了丰富的比例尺类型，可以根据数据类型和使用场景进行分类：",paraId:1,tocIndex:0},{value:"处理 ",paraId:2,tocIndex:2},{value:"连续",paraId:2,tocIndex:2},{value:" 数值数据，保持数据间的比例关系：",paraId:2,tocIndex:2},{value:"linear（线性比例尺）",paraId:3,tocIndex:2},{value:"：最基础的连续比例尺，使用线性函数 y = mx + b 进行映射",paraId:3,tocIndex:2},{value:"log（对数比例尺）",paraId:3,tocIndex:2},{value:"：使用对数函数 y = log",paraId:3,tocIndex:2},{value:"base",paraId:3,tocIndex:2},{value:"(x) + b 进行映射，适合跨度很大的指数增长数据",paraId:3,tocIndex:2},{value:"pow（幂比例尺）",paraId:3,tocIndex:2},{value:"：使用幂函数 y = x",paraId:3,tocIndex:2},{value:"k",paraId:3,tocIndex:2},{value:" + b 进行映射，可调节指数强调数据差异",paraId:3,tocIndex:2},{value:"sqrt（平方根比例尺）",paraId:3,tocIndex:2},{value:"：pow 比例尺的特例（k=0.5），适合压缩大数值差异",paraId:3,tocIndex:2},{value:"time（时间比例尺）",paraId:3,tocIndex:2},{value:"：专门处理时间序列数据的连续比例尺，支持自动计算合适的时间间隔（tickInterval）和刻度数量，可以处理 UTC 和本地时间",paraId:3,tocIndex:2},{value:"比如下面的散点图的 x 和 y 通道都是使用了 ",paraId:4,tocIndex:2},{value:"linear",paraId:4,tocIndex:2},{value:" 比例尺。",paraId:4,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  },\n  encode: { x: 'weight', y: 'height', color: 'gender' },\n});\n\nchart.render();\n",paraId:5,tocIndex:2},{value:"当我们尝试改变 x 通道和 y 通道的比例尺：",paraId:6,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  },\n  encode: { x: 'weight', y: 'height', color: 'gender' },\n  scale: {\n    x: {\n      type: 'point',\n    },\n    y: {\n      type: 'point',\n      range: [1, 0],\n    },\n  },\n});\n\nchart.render();\n",paraId:7,tocIndex:2},{value:"对于密集的数据，更建议使用连续比例尺而非分类比例尺。",paraId:8,tocIndex:2},{value:"处理 ",paraId:9,tocIndex:3},{value:"离散",paraId:9,tocIndex:3},{value:" 的分类数据：",paraId:9,tocIndex:3},{value:"ordinal（序数比例尺）",paraId:10,tocIndex:3},{value:"：将离散数据映射到离散值域，常用于颜色、形状映射",paraId:10,tocIndex:3},{value:"band（带状比例尺）",paraId:10,tocIndex:3},{value:"：为每个类别分配等宽区间，常用于柱状图的 x 轴",paraId:10,tocIndex:3},{value:"point（点比例尺）",paraId:10,tocIndex:3},{value:"：band 比例尺的特例（bandWidth=0），用于点位置映射",paraId:10,tocIndex:3},{value:"比如下面的条形图的 color 通道就是用了 ",paraId:11,tocIndex:3},{value:"ordinal",paraId:11,tocIndex:3},{value:" 比例尺。",paraId:11,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  scale: {\n    color: { range: ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#c564be'] },\n  },\n});\n\nchart.render();\n",paraId:12,tocIndex:3},{value:"我们可以通过以下的例子看出 ",paraId:13,tocIndex:3},{value:"band",paraId:13,tocIndex:3},{value:" 比例尺和 ",paraId:13,tocIndex:3},{value:"point",paraId:13,tocIndex:3},{value:" 比例尺的区别：",paraId:13,tocIndex:3},{value:"point",paraId:14,tocIndex:3},{value:" 比例尺",paraId:14,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\nchart.options({\n  type: 'cell',\n  height: 640,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/bd287f2c-3e2b-4d0a-8428-6a85211dce33.json',\n  },\n  encode: { x: 'x', y: 'y', color: 'index' },\n  scale: { x: { type: 'point' } },\n  style: { stroke: '#000', inset: 2 },\n  animate: { enter: { type: 'fadeIn' } },\n});\n\nchart.render();\n",paraId:15,tocIndex:3},{value:"band",paraId:16,tocIndex:3},{value:" 比例尺",paraId:16,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\nchart.options({\n  type: 'cell',\n  height: 640,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/bd287f2c-3e2b-4d0a-8428-6a85211dce33.json',\n  },\n  encode: { x: 'x', y: 'y', color: 'index' },\n  scale: { x: { type: 'band' } },\n  style: { stroke: '#000', inset: 2 },\n  animate: { enter: { type: 'fadeIn' } },\n});\n\nchart.render();\n",paraId:17,tocIndex:3},{value:"将 ",paraId:18,tocIndex:4},{value:"连续",paraId:18,tocIndex:4},{value:" 数据 ",paraId:18,tocIndex:4},{value:"离散化",paraId:18,tocIndex:4},{value:" 为有限类别：",paraId:18,tocIndex:4},{value:"quantize（量化比例尺）",paraId:19,tocIndex:4},{value:"：按数值范围等宽分段",paraId:19,tocIndex:4},{value:"quantile（分位数比例尺）",paraId:19,tocIndex:4},{value:"：按数据分布分位数分段，每段数据量相等",paraId:19,tocIndex:4},{value:"threshold（阈值比例尺）",paraId:19,tocIndex:4},{value:"：按手动指定的阈值分段",paraId:19,tocIndex:4},{value:"以下是同一份数据分别应用 ",paraId:20,tocIndex:4},{value:"quantile",paraId:20,tocIndex:4},{value:" 比例尺和",paraId:20,tocIndex:4},{value:"quantize",paraId:20,tocIndex:4},{value:" 比例尺的效果，前者按照数据分布分位数分段，每段数据量相等，后者按数值范围等宽分段。",paraId:20,tocIndex:4},{value:"quantile",paraId:21,tocIndex:4},{value:" 比例尺",paraId:21,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\nchart.options({\n  type: 'cell',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/89c20fe8-0c6f-46c8-b36b-4cb653dba8ed.json',\n    transform: [\n      {\n        type: 'map',\n        callback: (d) => ({\n          salary: d,\n        }),\n      },\n    ],\n  },\n  encode: {\n    y: (_, i) => (i % 5) + 1,\n    x: (_, i) => ((i / 5) | 0) + 1,\n    color: 'salary',\n  },\n  scale: { color: { type: 'quantile', range: ['#eee', 'pink', 'red'] } },\n  style: { stroke: '#000', inset: 2 },\n  animate: { enter: { type: 'fadeIn' } },\n  legend: { color: { length: 400, labelFormatter: '.0s' } },\n});\n\nchart.render();\n",paraId:22,tocIndex:4},{value:"quantize",paraId:23,tocIndex:4},{value:" 比例尺",paraId:23,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\nchart.options({\n  type: 'cell',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/89c20fe8-0c6f-46c8-b36b-4cb653dba8ed.json',\n    transform: [\n      {\n        type: 'map',\n        callback: (d) => ({\n          salary: d,\n        }),\n      },\n    ],\n  },\n  encode: {\n    y: (_, i) => (i % 5) + 1,\n    x: (_, i) => ((i / 5) | 0) + 1,\n    color: 'salary',\n  },\n  scale: { color: { type: 'quantize', range: ['#eee', 'pink', 'red'] } },\n  style: { stroke: '#000', inset: 2 },\n  animate: { enter: { type: 'fadeIn' } },\n  legend: { color: { length: 400, labelFormatter: '.0s' } },\n});\n\nchart.render();\n",paraId:24,tocIndex:4},{value:"主要用于 x、y 坐标轴：",paraId:25,tocIndex:6},{value:"linear",paraId:26,tocIndex:6},{value:"：数值型坐标轴",paraId:26,tocIndex:6},{value:"time",paraId:26,tocIndex:6},{value:"：时间轴",paraId:26,tocIndex:6},{value:"band",paraId:26,tocIndex:6},{value:"：分类型坐标轴",paraId:26,tocIndex:6},{value:"point",paraId:26,tocIndex:6},{value:"：分类型坐标轴",paraId:26,tocIndex:6},{value:"主要用于颜色、大小、形状等视觉通道：",paraId:27,tocIndex:7},{value:"ordinal",paraId:28,tocIndex:7},{value:"：分类数据的颜色、形状映射",paraId:28,tocIndex:7},{value:"linear/log/pow/sqrt",paraId:28,tocIndex:7},{value:"：连续数据的颜色渐变、数值大小映射",paraId:28,tocIndex:7},{value:"quantize/quantile/threshold",paraId:28,tocIndex:7},{value:"：连续数据的分段颜色映射",paraId:28,tocIndex:7},{value:"例如一个基础的柱状图，x 通道的比例尺默认为 ",paraId:29,tocIndex:7},{value:"band",paraId:29,tocIndex:7},{value:"，用于实现柱状图分类型坐标轴，y 通道比例尺默认为 ",paraId:29,tocIndex:7},{value:"linear",paraId:29,tocIndex:7},{value:"，将 y 通道对应的数据列的连续数据映射到柱子的长度，具有视觉属性。",paraId:29,tocIndex:7},{value:"总结一下：",paraId:30,tocIndex:7},{value:"比例尺类型",paraId:31,tocIndex:7},{value:"数据类型",paraId:31,tocIndex:7},{value:"映射函数",paraId:31,tocIndex:7},{value:"主要用途",paraId:31,tocIndex:7},{value:"适用场景",paraId:31,tocIndex:7},{value:"linear",paraId:31,tocIndex:7},{value:"连续数值",paraId:31,tocIndex:7},{value:"y = mx + b",paraId:31,tocIndex:7},{value:"位置、颜色、大小",paraId:31,tocIndex:7},{value:"数值型数据的基础映射",paraId:31,tocIndex:7},{value:"log",paraId:31,tocIndex:7},{value:"连续数值",paraId:31,tocIndex:7},{value:"y = log",paraId:31,tocIndex:7},{value:"base",paraId:31,tocIndex:7},{value:"(x) + b",paraId:31,tocIndex:7},{value:"位置、颜色",paraId:31,tocIndex:7},{value:"跨度很大的指数增长数据",paraId:31,tocIndex:7},{value:"pow",paraId:31,tocIndex:7},{value:"连续数值",paraId:31,tocIndex:7},{value:"y = x",paraId:31,tocIndex:7},{value:"k",paraId:31,tocIndex:7},{value:" + b",paraId:31,tocIndex:7},{value:"位置、颜色、大小",paraId:31,tocIndex:7},{value:"需要调节数据差异强度",paraId:31,tocIndex:7},{value:"sqrt",paraId:31,tocIndex:7},{value:"连续数值",paraId:31,tocIndex:7},{value:"y = x",paraId:31,tocIndex:7},{value:"0.5",paraId:31,tocIndex:7},{value:" + b",paraId:31,tocIndex:7},{value:"大小、颜色",paraId:31,tocIndex:7},{value:"压缩大数值差异（如面积映射）",paraId:31,tocIndex:7},{value:"time",paraId:31,tocIndex:7},{value:"时间数据",paraId:31,tocIndex:7},{value:"自动计算时间间隔和刻度",paraId:31,tocIndex:7},{value:"时间轴",paraId:31,tocIndex:7},{value:"时间序列数据可视化，支持 UTC 和本地时间",paraId:31,tocIndex:7},{value:"ordinal",paraId:31,tocIndex:7},{value:"分类数据",paraId:31,tocIndex:7},{value:"一对一映射",paraId:31,tocIndex:7},{value:"颜色、形状",paraId:31,tocIndex:7},{value:"分类数据的视觉属性映射",paraId:31,tocIndex:7},{value:"band",paraId:31,tocIndex:7},{value:"分类数据",paraId:31,tocIndex:7},{value:"等宽区间分配",paraId:31,tocIndex:7},{value:"x/y 轴位置",paraId:31,tocIndex:7},{value:"柱状图、条形图",paraId:31,tocIndex:7},{value:"point",paraId:31,tocIndex:7},{value:"分类数据",paraId:31,tocIndex:7},{value:"点位置分配",paraId:31,tocIndex:7},{value:"x/y 轴位置",paraId:31,tocIndex:7},{value:"点图、折线图",paraId:31,tocIndex:7},{value:"quantize",paraId:31,tocIndex:7},{value:"连续数值",paraId:31,tocIndex:7},{value:"等宽分段",paraId:31,tocIndex:7},{value:"颜色分段",paraId:31,tocIndex:7},{value:"数据分布均匀的分段着色",paraId:31,tocIndex:7},{value:"quantile",paraId:31,tocIndex:7},{value:"连续数值",paraId:31,tocIndex:7},{value:"等频分段",paraId:31,tocIndex:7},{value:"颜色分段",paraId:31,tocIndex:7},{value:"数据分布不均的分段着色",paraId:31,tocIndex:7},{value:"threshold",paraId:31,tocIndex:7},{value:"连续数值",paraId:31,tocIndex:7},{value:"自定义阈值分段",paraId:31,tocIndex:7},{value:"颜色分段",paraId:31,tocIndex:7},{value:"按特定阈值分组（如及格线）",paraId:31,tocIndex:7},{value:"数值型数据",paraId:32,tocIndex:8},{value:"正常分布 → ",paraId:33,tocIndex:8},{value:"linear",paraId:33,tocIndex:8},{value:"指数增长/跨度很大 → ",paraId:33,tocIndex:8},{value:"log",paraId:33,tocIndex:8},{value:"需要强调小值差异 → ",paraId:33,tocIndex:8},{value:"pow",paraId:33,tocIndex:8},{value:" (exponent > 1)",paraId:33,tocIndex:8},{value:"需要压缩大值差异 → ",paraId:33,tocIndex:8},{value:"sqrt",paraId:33,tocIndex:8},{value:" 或 ",paraId:33,tocIndex:8},{value:"pow",paraId:33,tocIndex:8},{value:" (exponent < 1)",paraId:33,tocIndex:8},{value:"时间数据",paraId:34,tocIndex:8},{value:"时间序列 → ",paraId:35,tocIndex:8},{value:"time",paraId:35,tocIndex:8},{value:"分类数据",paraId:36,tocIndex:8},{value:"颜色/形状映射 → ",paraId:37,tocIndex:8},{value:"ordinal",paraId:37,tocIndex:8},{value:"柱状图 x 轴 → ",paraId:37,tocIndex:8},{value:"band",paraId:37,tocIndex:8},{value:"点图 x 轴 → ",paraId:37,tocIndex:8},{value:"point",paraId:37,tocIndex:8},{value:"连续数据离散化",paraId:38,tocIndex:8},{value:"数据分布均匀 → ",paraId:39,tocIndex:8},{value:"quantize",paraId:39,tocIndex:8},{value:"数据分布不均 → ",paraId:39,tocIndex:8},{value:"quantile",paraId:39,tocIndex:8},{value:"有明确阈值要求 → ",paraId:39,tocIndex:8},{value:"threshold",paraId:39,tocIndex:8},{value:"{\n  type: 'linear', // 或 log, pow, sqrt, time\n  domain: [min, max], // 定义域\n  range: [0, 1], // 值域\n  unknown: undefined, // 未知值的映射值\n  tickMethod: (min, max, count) => [1,2,3,4], // 刻度计算方法\n  round: false, // 是否对输出值进行取整\n  interpolate: (a, b) => (t) => a * (1 - t) + b * t, // 插值方法\n  nice: true, // 是否优化刻度显示\n}\n",paraId:40,tocIndex:10},{value:"{\n  type: 'ordinal', // 或 band, point\n  domain: ['A', 'B', 'C'], // 类别列表\n  range: ['red', 'green', 'blue'], // 映射值列表\n  unknown: undefined, // 未知值的映射值\n  compare: (a, b) => a.localeCompare(b), // 排序方法\n}\n",paraId:41,tocIndex:11},{value:"{\n  type: 'quantize', // 或 quantile, threshold\n  domain: [0, 100], // 连续数据范围\n  range: ['low', 'medium', 'high'], // 离散类别\n  unknown: undefined, // 未知值的映射值\n}\n",paraId:42,tocIndex:12},{value:"G2 内部会根据数据类型以及标记的类型，去推断比例尺的类型、定义域和值域，但是仍然可以指定对应配置。比例尺可以配置在 Mark 层级：",paraId:43,tocIndex:13},{value:"({\n  type: 'interval',\n  scale: {\n    x: { padding: 0.5 },\n    y: {\n      type: 'log', // 指定类型\n      domain: [10, 100], // 指定定义域\n      range: [0, 1], // 指定值域\n    },\n  },\n});\n",paraId:44,tocIndex:13},{value:"// API\n// 第一种方式\nchart\n  .interval()\n  .scale('x', { padding: 0.5 })\n  .scale('y', {\n    type: 'log', // 指定类型\n    domain: [10, 100], // 指定定义域\n    range: [0, 1], // 指定值域\n  });\n\n// 第二种方式\nchart.interval().scale({\n  x: { padding: 0.5 },\n  y: {\n    type: 'log', // 指定类型\n    domain: [10, 100], // 指定定义域\n    range: [0, 1], // 指定值域\n  },\n});\n",paraId:45,tocIndex:13},{value:"比例尺也可以配置在 View 层级：",paraId:46,tocIndex:13},{value:"({\n  type: 'view',\n  scale: {\n    x: { padding: 0.5 },\n    y: {\n      type: 'log', // 指定类型\n      domain: [10, 100], // 指定定义域\n      range: [0, 1], // 指定值域\n    },\n  },\n});\n",paraId:47,tocIndex:13},{value:"// API 形式\n// 第一种方式\nchart.scale('x', { padding: 0.5 }).scale('y', {\n  type: 'log', // 指定类型\n  domain: [10, 100], // 指定定义域\n  range: [0, 1], // 指定值域\n});\n\n// 第二种方式\nchart.scale({\n  x: { padding: 0.5 },\n  y: {\n    type: 'log', // 指定类型\n    domain: [10, 100], // 指定定义域\n    range: [0, 1], // 指定值域\n  },\n});\n",paraId:48,tocIndex:13},{value:"标记的每一个通道都绑定了一个比例尺。该比例尺会对该通道绑定的列数据进行转换，将其从数据范围：",paraId:49,tocIndex:14},{value:"定义域（Domain）",paraId:49,tocIndex:14},{value:" 转换到视觉范围：",paraId:49,tocIndex:14},{value:"值域（Range）",paraId:49,tocIndex:14},{value:"。不同类型的比例尺针对不同类型的数据和使用场景。",paraId:49,tocIndex:14},{value:"同一个视图中的标记相同通道的比例尺会默认是同步的：会去同步比例尺的类型，定义域和值域以及其他配置。这意味一个视图中所有的标记都会按照一个同样的尺度去绘制。比如下图中的 LineX 标记虽然没有完整的数据，但是也绘制到了准确的位置，就是因为比例尺同步。",paraId:50,tocIndex:15},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  children: [\n    {\n      type: 'line',\n      data: [\n        { year: '1991', value: 3 },\n        { year: '1992', value: 4 },\n        { year: '1993', value: 3.5 },\n        { year: '1994', value: 5 },\n        { year: '1995', value: 4.9 },\n        { year: '1996', value: 6 },\n        { year: '1997', value: 7 },\n        { year: '1998', value: 9 },\n        { year: '1999', value: 13 },\n      ],\n      encode: { x: 'year', y: 'value' },\n    },\n    { type: 'lineX', data: ['1996'], style: { stroke: 'red', strokeWidth: 2 } },\n  ],\n});\n\nchart.render();\n",paraId:51,tocIndex:15},{value:"如果希望不同步（比如绘制双轴图的时候），就需要设置 ",paraId:52,tocIndex:16},{value:"scale.independent",paraId:52,tocIndex:16},{value:" 为 ",paraId:52,tocIndex:16},{value:"true",paraId:52,tocIndex:16},{value:"，设置了该属性的比例尺不会和任何比例尺同步。下面的例子中的 interval 和 line 的 y 通道会使用两个不同的比例尺，从而会生成两个不同的坐标轴。",paraId:52,tocIndex:16},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  data: [\n    { time: '10:10', call: 4, waiting: 2, people: 2 },\n    { time: '10:15', call: 2, waiting: 6, people: 3 },\n    { time: '10:20', call: 13, waiting: 2, people: 5 },\n    { time: '10:25', call: 9, waiting: 9, people: 1 },\n    { time: '10:30', call: 5, waiting: 2, people: 3 },\n    { time: '10:35', call: 8, waiting: 2, people: 1 },\n    { time: '10:40', call: 13, waiting: 1, people: 2 },\n  ],\n  children: [\n    {\n      type: 'interval',\n      encode: { x: 'time', y: 'waiting' },\n      axis: { y: { title: 'Waiting', titleFill: '#5B8FF9' } },\n    },\n    {\n      type: 'line',\n      encode: { x: 'time', y: 'people', shape: 'smooth' },\n      scale: { y: { independent: true } }, // 设置 y 方向比例尺不同步\n      style: { stroke: '#fdae6b', lineWidth: 2 },\n      axis: {\n        y: {\n          position: 'right',\n          grid: null,\n          title: 'People',\n          titleFill: '#fdae6b',\n        },\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:53,tocIndex:16},{value:"如果希望比例尺分组同步，可以声明 ",paraId:54,tocIndex:16},{value:"scale.key",paraId:54,tocIndex:16},{value:"，拥有相同 key 的 scale 会同步。比如下面的 Line 和 Point Mark y 通道的比例尺因为 key 都是 line 所以会同步。",paraId:54,tocIndex:16},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  data: [\n    { time: '10:10', call: 4, waiting: 2, people: 2 },\n    { time: '10:15', call: 2, waiting: 6, people: 3 },\n    { time: '10:20', call: 13, waiting: 2, people: 5 },\n    { time: '10:25', call: 9, waiting: 9, people: 1 },\n    { time: '10:30', call: 5, waiting: 2, people: 3 },\n    { time: '10:35', call: 8, waiting: 2, people: 1 },\n    { time: '10:40', call: 13, waiting: 1, people: 2 },\n  ],\n  children: [\n    {\n      type: 'interval',\n      encode: { x: 'time', y: 'waiting' },\n      axis: { y: { title: 'Waiting', titleFill: '#5B8FF9' } },\n    },\n    {\n      type: 'line',\n      encode: { x: 'time', y: 'people', shape: 'smooth' },\n      scale: { y: { key: 'line' } }, // 设置 key 为 line\n      style: { stroke: '#fdae6b', lineWidth: 2 },\n      axis: {\n        y: {\n          position: 'right',\n          grid: null,\n          title: 'People',\n          titleFill: '#fdae6b',\n        },\n      },\n    },\n    {\n      type: 'point',\n      encode: { x: 'time', y: 'people' },\n      scale: { y: { key: 'line' } }, // 设置 key 为 line\n      style: { stroke: '#fdae6b', lineWidth: 2 },\n    },\n  ],\n});\n\nchart.render();\n",paraId:55,tocIndex:16},{value:"比例尺会可以配置在视图层级，并且会传递给 ",paraId:56,tocIndex:17},{value:"children",paraId:56,tocIndex:17},{value:" 指定的标记，如果该标记对应的通道没有设置比例尺，就设置，否则没有影响。在不绘制多轴图的情况下，比例尺是可以设置在视图层级的。",paraId:56,tocIndex:17},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: { y: { nice: true } },\n  children: [{ type: 'line' }, { type: 'point' }],\n});\n\nchart.render();\n",paraId:57,tocIndex:17},{value:"G2 具备智能的 scale 类型推断能力，当用户没有明确指定 scale 类型时，会根据数据特征和通道特性自动选择最适合的 scale 类型。推断机制遵循以下优先级规则：",paraId:58,tocIndex:18},{value:"1. 显式指定优先级最高",paraId:59,tocIndex:19},{value:"如果用户在 scale 配置中明确指定了 ",paraId:60,tocIndex:19},{value:"type",paraId:60,tocIndex:19},{value:" 属性，G2 会直接使用该类型，跳过所有自动推断逻辑。",paraId:60,tocIndex:19},{value:"2. 特殊数据类型判断",paraId:61,tocIndex:19},{value:"G2 会首先检查数据的特殊性质：",paraId:62,tocIndex:19},{value:"对象类型数据",paraId:63,tocIndex:19},{value:"：如果数据包含严格对象（非 Date、非 null、非数组的对象），使用 ",paraId:63,tocIndex:19},{value:"identity",paraId:63,tocIndex:19},{value:" 比例尺。",paraId:63,tocIndex:19},{value:"export function isStrictObject(d: any): boolean {\n  return (\n    typeof d === 'object' &&\n    !(d instanceof Date) &&\n    d !== null &&\n    !Array.isArray(d)\n  );\n}\n",paraId:64,tocIndex:19},{value:"字符串类型 range",paraId:65,tocIndex:19},{value:"：当 range 参数是字符串时，使用 ",paraId:65,tocIndex:19},{value:"linear",paraId:65,tocIndex:19},{value:" 比例尺。",paraId:65,tocIndex:19},{value:"多值域/定义域",paraId:65,tocIndex:19},{value:"：当 domain 或 range 数组长度超过 2 时，推断为分类比例尺。",paraId:65,tocIndex:19},{value:"3. 基于定义域(domain)的推断",paraId:66,tocIndex:19},{value:"当提供了 domain 参数时：",paraId:67,tocIndex:19},{value:"如果 domain 包含字符串或布尔值，推断为分类比例尺。",paraId:68,tocIndex:19},{value:"如果数据包含 Date 对象，使用 ",paraId:68,tocIndex:19},{value:"time",paraId:68,tocIndex:19},{value:" 比例尺。",paraId:68,tocIndex:19},{value:"其他情况推断为连续比例尺。",paraId:68,tocIndex:19},{value:"4. 基于数据值的自动推断",paraId:69,tocIndex:19},{value:"当没有 domain 参数时，G2 会分析实际数据：",paraId:70,tocIndex:19},{value:"分类型检测",paraId:71,tocIndex:19},{value:"：数据中包含字符串或布尔值时，推断为分类比例尺。",paraId:71,tocIndex:19},{value:"时间类型检测",paraId:71,tocIndex:19},{value:"：数据中包含 Date 对象时，使用 ",paraId:71,tocIndex:19},{value:"time",paraId:71,tocIndex:19},{value:" 比例尺。",paraId:71,tocIndex:19},{value:"其他情况",paraId:71,tocIndex:19},{value:"：推断为连续型比例尺。",paraId:71,tocIndex:19},{value:"当推断为分类比例尺时，G2 会根据通道名称进一步细分：",paraId:72,tocIndex:20},{value:"对于定量通道（x、y、position、size 开头的通道），使用 ",paraId:73,tocIndex:20},{value:"point",paraId:73,tocIndex:20},{value:" 比例尺。",paraId:73,tocIndex:20},{value:"其他通道使用 ",paraId:73,tocIndex:20},{value:"ordinal",paraId:73,tocIndex:20},{value:" 比例尺。",paraId:73,tocIndex:20},{value:"当推断为连续比例尺时：",paraId:74,tocIndex:20},{value:"对于非颜色通道，使用 ",paraId:75,tocIndex:20},{value:"linear",paraId:75,tocIndex:20},{value:" 比例尺。",paraId:75,tocIndex:20},{value:"对于颜色通道：\n",paraId:75,tocIndex:20},{value:"有 range 参数时使用 ",paraId:76,tocIndex:20},{value:"linear",paraId:76,tocIndex:20},{value:" 比例尺。",paraId:76,tocIndex:20},{value:"无 range 参数时使用 ",paraId:76,tocIndex:20},{value:"sequential",paraId:76,tocIndex:20},{value:" 比例尺。（ sequential 比例尺构造可创建一个在输入和输出之间通过插值函数进行转换的比例尺，内部比例尺处理时使用）",paraId:76,tocIndex:20},{value:"// 字符串数据 → ordinal scale\nchart.interval().encode('x', 'category'); // category: ['A', 'B', 'C']\n\n// 数值数据 → linear scale\nchart.line().encode('y', 'value'); // value: [10, 20, 30]\n\n// 时间数据 → time scale\nchart.line().encode('x', 'date'); // date: [new Date('2023-01-01'), ...]\n\n// 定量通道的字符串数据 → point scale\nchart.interval().encode('x', 'month'); // month: ['Jan', 'Feb', 'Mar']\n\n// 显式指定优先级最高\nchart.interval().scale('y', { type: 'log' }); // 强制使用 log scale\n\n// 多值 range → 推断为分类型\nchart.point().scale('color', {\n  range: ['red', 'green', 'blue', 'yellow'], // 4个值，推断为 ordinal\n});\n",paraId:77,tocIndex:21}]},92262:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(53502);const t=[{value:"point",paraId:0,tocIndex:0},{value:" 比例尺属于",paraId:0,tocIndex:0},{value:"分类比例尺",paraId:0,tocIndex:0},{value:"，是 ",paraId:0,tocIndex:0},{value:"band",paraId:1,tocIndex:0},{value:" 比例尺的一个特例，其 ",paraId:0,tocIndex:0},{value:"bandWidth",paraId:0,tocIndex:0},{value:" 固定为 0。它用于将一组离散的类别（如字符串、数字、日期等）均匀分布在指定的连续区间（range）上。",paraId:0,tocIndex:0},{value:"离散型数据的均匀分布（如分类轴、分组点分布等）",paraId:2,tocIndex:1},{value:"需要将类别型数据映射到连续区间的场景",paraId:3,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  height: 500,\n  data: [\n    1.2, 3.4, 3.7, 4.3, 5.2, 5.8, 6.1, 6.5, 6.8, 7.1, 7.3, 7.7, 8.3, 8.6, 8.8,\n    9.1, 9.2, 9.4, 9.5, 9.7, 10.5, 10.7, 10.8, 11, 11, 11.1, 11.2, 11.3, 11.4,\n    11.4, 11.7, 12, 12.9, 12.9, 13.3, 13.7, 13.8, 13.9, 14, 14.2, 14.5, 15,\n    15.2, 15.6, 16, 16.3, 17.3, 17.5, 17.9, 18, 18, 20.6, 21, 23.4,\n  ],\n  encode: { x: (d) => d, y: 'count' },\n  transform: [{ type: 'binX', y: 'count', thresholds: 10 }],\n  scale: { x: { type: 'point' } },\n  style: { columnWidthRatio: 1, inset: 0.5 },\n});\n\nchart.render();\n",paraId:4,tocIndex:2},{value:"属性",paraId:5,tocIndex:3},{value:"描述",paraId:5,tocIndex:3},{value:"类型",paraId:5,tocIndex:3},{value:"默认值",paraId:5,tocIndex:3},{value:"必选",paraId:5,tocIndex:3},{value:"type",paraId:5,tocIndex:3},{value:"比例尺类型，需为 'point'",paraId:5,tocIndex:3},{value:"string",paraId:5,tocIndex:3},{value:"无",paraId:5,tocIndex:3},{value:"✓",paraId:5,tocIndex:3},{value:"domain",paraId:5,tocIndex:3},{value:"定义域数组，类别集合",paraId:5,tocIndex:3},{value:"number[]",paraId:5,tocIndex:3},{value:" | ",paraId:5,tocIndex:3},{value:"string[]",paraId:5,tocIndex:3},{value:" | ",paraId:5,tocIndex:3},{value:"Date[]",paraId:5,tocIndex:3},{value:"[]",paraId:5,tocIndex:3},{value:"range",paraId:5,tocIndex:3},{value:"值域范围，映射的连续区间",paraId:5,tocIndex:3},{value:"number[]",paraId:5,tocIndex:3},{value:" | ",paraId:5,tocIndex:3},{value:"string[]",paraId:5,tocIndex:3},{value:"[0, 1]",paraId:5,tocIndex:3},{value:"unknown",paraId:5,tocIndex:3},{value:"输入为 ",paraId:5,tocIndex:3},{value:"undefined",paraId:5,tocIndex:3},{value:"、",paraId:5,tocIndex:3},{value:"NaN",paraId:5,tocIndex:3},{value:"、",paraId:5,tocIndex:3},{value:"null",paraId:5,tocIndex:3},{value:" 时返回的值",paraId:5,tocIndex:3},{value:"any",paraId:5,tocIndex:3},{value:"undefined",paraId:5,tocIndex:3},{value:"round",paraId:5,tocIndex:3},{value:"输出值是否四舍五入",paraId:5,tocIndex:3},{value:"boolean",paraId:5,tocIndex:3},{value:"false",paraId:5,tocIndex:3},{value:"align",paraId:5,tocIndex:3},{value:"对齐方式，在 [0, 1] 范围内",paraId:5,tocIndex:3},{value:"number",paraId:5,tocIndex:3},{value:"0.5",paraId:5,tocIndex:3},{value:"compare",paraId:5,tocIndex:3},{value:"对定义域进行排序",paraId:5,tocIndex:3},{value:"(a: string | number, b: string | number) => number",paraId:5,tocIndex:3},{value:"undefined",paraId:5,tocIndex:3},{value:"复杂类型说明：",paraId:6,tocIndex:3},{value:"domain",paraId:7,tocIndex:3},{value:"：为类别数组，可以是字符串、数字或日期类型。",paraId:7,tocIndex:3},{value:"range",paraId:7,tocIndex:3},{value:"：为映射的连续区间，通常为 ",paraId:7,tocIndex:3},{value:"[0, 1]",paraId:7,tocIndex:3},{value:" 或像素区间。",paraId:7,tocIndex:3},{value:"compare",paraId:7,tocIndex:3},{value:"：自定义排序函数，决定 domain 的顺序。",paraId:7,tocIndex:3},{value:"注意：",paraId:8,tocIndex:3},{value:" point 比例尺是 bandWidth 恒为 0 的 band 比例尺，内部固定了以下属性：",paraId:8,tocIndex:3},{value:"padding: 0.5, // 内部赋值\npaddingInner: 1, // 不可修改\npaddingOuter: 0.5 // // 内部赋值\n",paraId:9,tocIndex:3},{value:"如果想自定义 ",paraId:10,tocIndex:3},{value:"paddingOuter",paraId:10,tocIndex:3},{value:" 的值，可以通过修改 ",paraId:10,tocIndex:3},{value:"padding",paraId:10,tocIndex:3},{value:" 实现。例如：",paraId:10,tocIndex:3},{value:"(scale: {\n  x: {\n    type: 'point',\n    padding: 0, // 只会对 paddingOuter 生效，paddingInner 恒为 1\n  },\n});\n",paraId:11,tocIndex:3},{value:"|<------------------------------------------- range -------------------------------------------\x3e|\n|             |                                 |                                 |             |\n|<--step*PO--\x3e|<--------------step-------------\x3e|<--------------step-------------\x3e|<--step*PO--\x3e|\n|             |                                 |                                 |             |\n|             A                                 B                                 C             |\n|-----------------------------------------------------------------------------------------------|\n\n",paraId:12,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  },\n  encode: { x: 'height', y: 'weight', color: 'gender' },\n  scale: { x: { type: 'point' } },\n});\n\nchart.render();\n",paraId:13,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'cell',\n  height: 640,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/bd287f2c-3e2b-4d0a-8428-6a85211dce33.json',\n  },\n  encode: { x: 'x', y: 'y', color: 'index' },\n  scale: { x: { type: 'point' } },\n  style: { stroke: '#000', inset: 2 },\n  animate: { enter: { type: 'fadeIn' } },\n});\n\nchart.render();\n",paraId:14,tocIndex:6}]},77215:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(30131);const t=[{value:"pow",paraId:0,tocIndex:0},{value:"（幂比例尺）是一种连续型比例尺，类似于线性比例尺。",paraId:0,tocIndex:0},{value:"pow",paraId:0,tocIndex:0},{value:"比例尺会对输入数据先进行指数级运算然后再映射到输出范围。其映射公式为：",paraId:0,tocIndex:0},{value:"y = x ^ k",paraId:0,tocIndex:0},{value:"其中 ",paraId:1,tocIndex:0},{value:"k",paraId:1,tocIndex:0},{value:" 是指数（",paraId:1,tocIndex:0},{value:"exponent",paraId:1,tocIndex:0},{value:"）参数，可以是任何实数。当 ",paraId:1,tocIndex:0},{value:"k = 1",paraId:1,tocIndex:0},{value:" 时，",paraId:1,tocIndex:0},{value:"pow",paraId:1,tocIndex:0},{value:"比例尺即为",paraId:1,tocIndex:0},{value:"linear",paraId:1,tocIndex:0},{value:"（线性）比例尺。",paraId:1,tocIndex:0},{value:"pow",paraId:2,tocIndex:0},{value:"比例尺特别适用于需要强调数据间相对差异的场景，例如：",paraId:2,tocIndex:0},{value:"当数据分布呈现指数增长/衰减特征时",paraId:3,tocIndex:0},{value:"需要放大/缩小数据间差异时",paraId:3,tocIndex:0},{value:"数据范围很大但希望更均匀地展示时",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"必选",paraId:4,tocIndex:1},{value:"type",paraId:4,tocIndex:1},{value:"比例尺类型，需为'pow'",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"无",paraId:4,tocIndex:1},{value:"✓",paraId:4,tocIndex:1},{value:"domain",paraId:4,tocIndex:1},{value:"定义域，表示输入数据的原始范围",paraId:4,tocIndex:1},{value:"(number | string)[]",paraId:4,tocIndex:1},{value:"[0, 1]",paraId:4,tocIndex:1},{value:"range",paraId:4,tocIndex:1},{value:"值域，表示映射后的视觉范围",paraId:4,tocIndex:1},{value:"number[]",paraId:4,tocIndex:1},{value:"[0, 1]",paraId:4,tocIndex:1},{value:"exponent",paraId:4,tocIndex:1},{value:"指数值，决定指数变换的强度",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:"2",paraId:4,tocIndex:1},{value:"nice",paraId:4,tocIndex:1},{value:"是否需要对定义域的范围进行优化",paraId:4,tocIndex:1},{value:"boolean",paraId:4,tocIndex:1},{value:"false",paraId:4,tocIndex:1},{value:"clamp",paraId:4,tocIndex:1},{value:"是否将超出定义域的值限制在范围内",paraId:4,tocIndex:1},{value:"boolean",paraId:4,tocIndex:1},{value:"false",paraId:4,tocIndex:1},{value:"round",paraId:4,tocIndex:1},{value:"是否对输出值进行四舍五入",paraId:4,tocIndex:1},{value:"boolean",paraId:4,tocIndex:1},{value:"false",paraId:4,tocIndex:1},{value:"tickMethod",paraId:4,tocIndex:1},{value:"计算刻度方法",paraId:4,tocIndex:1},{value:"(min: number, max: number, count: number) => number[]",paraId:4,tocIndex:1},{value:"d3Ticks",paraId:4,tocIndex:1},{value:"tickCount",paraId:4,tocIndex:1},{value:"刻度数量",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:"5",paraId:4,tocIndex:1},{value:"interpolate",paraId:4,tocIndex:1},{value:"自定义插值器，支持数字和颜色值",paraId:4,tocIndex:1},{value:"(a: number | string, b: number | string) => (t: number) => number | string",paraId:4,tocIndex:1},{value:"数字:线性插值;颜色:RGBA 插值",paraId:4,tocIndex:1},{value:"当 ",paraId:5,tocIndex:2},{value:"domain",paraId:5,tocIndex:2},{value:" 包含负值时，",paraId:5,tocIndex:2},{value:"exponent",paraId:5,tocIndex:2},{value:" 必须为整数，否则会产生复数结果",paraId:5,tocIndex:2},{value:"过大的 ",paraId:5,tocIndex:2},{value:"exponent",paraId:5,tocIndex:2},{value:" 值可能导致小值之间的差异被过度压缩",paraId:5,tocIndex:2},{value:"当 ",paraId:5,tocIndex:2},{value:"exponent=1",paraId:5,tocIndex:2},{value:" 时，考虑使用 ",paraId:5,tocIndex:2},{value:"linear",paraId:5,tocIndex:2},{value:" 比例尺以获得更好性能",paraId:5,tocIndex:2},{value:"tickMethod",paraId:5,tocIndex:2},{value:" 默认使用 ",paraId:5,tocIndex:2},{value:"d3.js",paraId:5,tocIndex:2},{value:" 的 ",paraId:5,tocIndex:2},{value:"d3Ticks",paraId:5,tocIndex:2},{value:" 算法，它会自动生成美观易读的刻度值（如 0,5,10 而不是 0,3.33,6.66,10）",paraId:5,tocIndex:2},{value:"当需要映射的值不合法的时候，返回",paraId:5,tocIndex:2},{value:"unknown",paraId:5,tocIndex:2},{value:"interpolate",paraId:5,tocIndex:2},{value:"接收两个参数(a,b)表示值域范围(数字或颜色)，返回一个插值函数(t => value)，其中 t∈[0,1]表示插值比例。默认实现会根据输入类型自动选择：数字：使用线性插值 y = a*(1-t) + b*t；颜色：生成一个 rgba 颜色值",paraId:5,tocIndex:2},{value:"当 ",paraId:6,tocIndex:4},{value:"exponent=1",paraId:6,tocIndex:4},{value:" 时，",paraId:6,tocIndex:4},{value:"pow",paraId:6,tocIndex:4},{value:" 比例尺等同于线性比例尺。此时数据映射是线性的，适合展示均匀分布的数据。",paraId:6,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  { month: '1月', sales: 0.1 },\n  { month: '2月', sales: 0.2 },\n  { month: '3月', sales: 0.3 },\n  { month: '4月', sales: 0.4 },\n  { month: '5月', sales: 0.5 },\n];\n\nchart\n  .interval()\n  .data(data)\n  .encode('x', 'month')\n  .encode('y', 'sales')\n  .scale('y', {\n    type: 'pow',\n    domain: [0, 0.5], // 输入范围\n    range: [0, 1], // 输出范围，[0, 1]表示y轴方向从上到下，[1, 0]表示y轴方向从下到上\n    exponent: 1,\n  });\n\nchart.render();\n",paraId:7,tocIndex:4},{value:"当数据范围很大时，可以使用 ",paraId:8,tocIndex:5},{value:"exponent < 1",paraId:8,tocIndex:5},{value:" 的 ",paraId:8,tocIndex:5},{value:"pow",paraId:8,tocIndex:5},{value:" 比例尺压缩数据差异。平方根比例尺适合展示数据范围大但希望更均匀分布的情况。",paraId:8,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  { city: '北京', population: 2171 },\n  { city: '上海', population: 2418 },\n  { city: '广州', population: 1490 },\n  { city: '深圳', population: 1303 },\n  { city: '杭州', population: 1000 },\n  { city: '成都', population: 800 },\n  { city: '天津', population: 600 },\n];\n\nchart\n  .interval()\n  .data(data)\n  .encode('x', 'city')\n  .encode('y', 'population')\n  .scale('x')\n  .scale('y', {\n    type: 'pow',\n    exponent: 0.5,\n    nice: true,\n  });\n\nchart.render();\n",paraId:9,tocIndex:5},{value:"当需要强调小值间的差异时，可以使用 ",paraId:10,tocIndex:6},{value:"exponent > 1",paraId:10,tocIndex:6},{value:" 的 ",paraId:10,tocIndex:6},{value:"pow",paraId:10,tocIndex:6},{value:" 比例尺。指数比例尺会放大小值间的差异，适合展示细微但重要的变化。",paraId:10,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  { day: '周一', rate: 0.01 },\n  { day: '周二', rate: 0.02 },\n  { day: '周三', rate: 0.05 },\n  { day: '周四', rate: 0.1 },\n  { day: '周五', rate: 0.2 },\n];\n\nchart\n  .interval()\n  .data(data)\n  .encode('x', 'day')\n  .encode('y', 'rate')\n  .scale('y', {\n    type: 'pow',\n    domain: [0, 0.2], // 输入范围\n    range: [1, 0], // 输出范围，[0, 1]表示y轴方向从上到下，[1, 0]表示y轴方向从下到上\n    exponent: 2,\n  });\n\nchart.render();\n",paraId:11,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  { time: '2025-01', value: 0.1 },\n  { time: '2025-02', value: 0.4 },\n  { time: '2025-03', value: 0.9 },\n];\n\nchart\n  .line()\n  .data(data)\n  .encode('x', 'time')\n  .encode('y', 'value')\n  .scale('y', {\n    type: 'pow',\n    domain: [0, 1],\n    range: [0, 1],\n    exponent: 1,\n    interpolate: (a, b) => (t) => a + (b - a) * t * t, // 二次缓动插值\n  });\n\nchart.render();\n",paraId:12,tocIndex:7}]},82736:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(63122);const t=[{value:"quantile",paraId:0,tocIndex:0},{value:" 比例尺属于",paraId:0,tocIndex:0},{value:"离散化比例尺",paraId:0,tocIndex:0},{value:"，主要用于将连续型数据按照分位数（quantile）进行分组，然后映射到指定的值域（range）。它是一种",paraId:0,tocIndex:0},{value:"按照数据密度自动分段",paraId:0,tocIndex:0},{value:"的度量，与 ",paraId:0,tocIndex:0},{value:"threshold",paraId:1,tocIndex:0},{value:" 类似，但 quantile 是根据数据的排序索引自动等分，而不是手动指定阈值。它会根据数据的分布密度自动确定分段点（ticks），这些分段点由数据的分位数决定，而不是均匀分布；scale 时是按照这些 ticks 进行分段映射，ticks 的计算方式采用 ",paraId:0,tocIndex:0},{value:"tickMethod: quantile",paraId:0,tocIndex:0},{value:"。这一特性使得 quantile 比例尺特别适合展示具有不均匀分布的数据集，能更准确地反映数据密度变化，适用于需要根据数据本身特性进行离散化的场景。",paraId:0,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4 },\n    { year: '1996', value: 5 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 7 },\n    { year: '1999', value: 13 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: {\n    y: {\n      type: 'quantile',\n      range: [1, 0.5, 0],\n    },\n  },\n  children: [\n    { type: 'line', labels: [{ text: 'value', style: { dx: -10, dy: -12 } }] },\n    { type: 'point', style: { fill: 'white' }, tooltip: false },\n  ],\n});\n\nchart.render();\n",paraId:2,tocIndex:1},{value:"上图说明更多的 4-5 周围的值都被映射到了 0.5,故 4-5 之间的数据密度最大。",paraId:3,tocIndex:1},{value:"属性",paraId:4,tocIndex:2},{value:"描述",paraId:4,tocIndex:2},{value:"类型",paraId:4,tocIndex:2},{value:"默认值",paraId:4,tocIndex:2},{value:"必选",paraId:4,tocIndex:2},{value:"domain",paraId:4,tocIndex:2},{value:"设置数据的定义域范围",paraId:4,tocIndex:2},{value:"number[]",paraId:4,tocIndex:2},{value:"[]",paraId:4,tocIndex:2},{value:"range",paraId:4,tocIndex:2},{value:"设置数据映射的值域范围",paraId:4,tocIndex:2},{value:"any[]",paraId:4,tocIndex:2},{value:"[]",paraId:4,tocIndex:2},{value:"✔",paraId:4,tocIndex:2},{value:"unknown",paraId:4,tocIndex:2},{value:"对于 ",paraId:4,tocIndex:2},{value:"undefined",paraId:4,tocIndex:2},{value:"、",paraId:4,tocIndex:2},{value:"NaN",paraId:4,tocIndex:2},{value:"、",paraId:4,tocIndex:2},{value:"null",paraId:4,tocIndex:2},{value:" 空值，返回的数据",paraId:4,tocIndex:2},{value:"any",paraId:4,tocIndex:2},{value:"undefined",paraId:4,tocIndex:2},{value:"tickCount",paraId:4,tocIndex:2},{value:"设置推荐的 tick 生成数量，tickCount 只是建议值，不保证完全生效",paraId:4,tocIndex:2},{value:"number",paraId:4,tocIndex:2},{value:"5",paraId:4,tocIndex:2},{value:"tickMethod",paraId:4,tocIndex:2},{value:"设置生成 tick 的方法，常用于自定义 tick",paraId:4,tocIndex:2},{value:"(min: number, max: number, count: number) => number[]",paraId:4,tocIndex:2},{value:"wilkinson-extended",paraId:4,tocIndex:2},{value:"nice",paraId:4,tocIndex:2},{value:"扩展 domain 范围，让输出的 tick 展示得更加友好",paraId:4,tocIndex:2},{value:"boolean",paraId:4,tocIndex:2},{value:"false",paraId:4,tocIndex:2},{value:"tickMethod",paraId:5,tocIndex:3},{value:"：\n",paraId:5,tocIndex:3},{value:"类型：",paraId:6,tocIndex:3},{value:"(min: number, max: number, count: number) => number[]",paraId:6,tocIndex:3},{value:"说明：用于生成刻度值（ticks）的函数，接收定义域的最小值、最大值和期望的刻度数量作为参数。在 quantile 比例尺中，虽然实际数据分段是通过分位数（quantile）计算得到的 thresholds，但生成用于展示的刻度值是通过 tickMethod 完成的。默认使用 ",paraId:6,tocIndex:3},{value:"wilkinson-extended",paraId:6,tocIndex:3},{value:" 算法，这是一种能生成美观、均匀分布刻度的算法。自定义此方法可以控制坐标轴上显示的刻度位置和数量。",paraId:6,tocIndex:3},{value:"示例：",paraId:6,tocIndex:3},{value:"tickMethod: (min, max, count) => [min, (min+max)/2, max]",paraId:6,tocIndex:3},{value:" 将只在最小值、中间值和最大值处生成刻度。",paraId:6,tocIndex:3},{value:"以下示例展示如何用 quantile 比例尺将薪资数据分为三组并映射为不同颜色：",paraId:7,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'cell',\n  height: 640,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/bd287f2c-3e2b-4d0a-8428-6a85211dce33.json',\n  },\n  encode: { x: 'x', y: 'y', color: 'index' },\n  scale: {\n    color: { type: 'quantile', range: ['#eeeeee', '#ffc3ce', '#ff0d0d'] },\n  },\n  style: { stroke: '#000', inset: 2 },\n  animate: { enter: { type: 'fadeIn' } },\n});\n\nchart.render();\n",paraId:8,tocIndex:5},{value:"在上例中，quantile 比例尺会自动根据数据分布将薪资分为三组，并映射为三种不同的颜色，适合展示数据分布的分层效果。",paraId:9,tocIndex:5}]},879:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(2375);const t=[{value:"quantize 是一种离散化比例尺，它将连续的数据域（domain）划分为若干个等宽的区间，并将这些区间映射到离散的值域（range）中。它属于分段比例尺的一种，主要用于将连续数据离散化处理。",paraId:0,tocIndex:0},{value:"与 ",paraId:1,tocIndex:0},{value:"threshold",paraId:2,tocIndex:0},{value:" 比例尺类似，quantize 也是将连续数据映射为离散值，但不同的是：",paraId:1,tocIndex:0},{value:"threshold 比例尺需要手动指定分割点（阈值）",paraId:3,tocIndex:0},{value:"quantize 比例尺会根据数据域和值域的数量自动计算等宽的区间",paraId:3,tocIndex:0},{value:"与 ",paraId:4,tocIndex:0},{value:"quantile",paraId:5,tocIndex:0},{value:" 比例尺的区别在于：",paraId:4,tocIndex:0},{value:"quantile 比例尺基于数据分布的分位数进行分段，确保每个区间包含相同数量的数据点",paraId:6,tocIndex:0},{value:"quantize 比例尺基于数据值的范围进行等宽分段，不考虑数据分布",paraId:6,tocIndex:0},{value:"quantize 比例尺的工作原理是：",paraId:7,tocIndex:1},{value:"将数据域 [min, max] 等分为 n 个区间，其中 n 是值域数组的长度",paraId:8,tocIndex:1},{value:"对于输入值 x，确定它落在哪个区间内",paraId:8,tocIndex:1},{value:"返回该区间对应的值域元素",paraId:8,tocIndex:1},{value:"例如，对于数据域 [0, 100] 和值域 ['小', '中', '大']：",paraId:9,tocIndex:1},{value:"输入值 0-33.33 映射为 '小'",paraId:10,tocIndex:1},{value:"输入值 33.33-66.67 映射为 '中'",paraId:10,tocIndex:1},{value:"输入值 66.67-100 映射为 '大'",paraId:10,tocIndex:1},{value:"quantize 比例尺适用于以下场景：",paraId:11,tocIndex:2},{value:"需要将连续数据（如温度、收入、评分）分组为有限的几个类别",paraId:12,tocIndex:2},{value:"创建热力图、等值线图等需要将数值数据映射为离散颜色的可视化",paraId:12,tocIndex:2},{value:"数据分布相对均匀，适合等宽分段的情况",paraId:12,tocIndex:2},{value:"chart.options({\n  type: 'cell',\n  data: salaryData,\n  encode: {\n    color: 'salary',\n  },\n  scale: {\n    color: {\n      type: 'quantize',\n      range: ['#eee', 'pink', 'red'], // 将数据分为三组，每组对应一种颜色\n    },\n  },\n});\n",paraId:13,tocIndex:3},{value:"quantize 比例尺主要负责将连续的数据域映射到离散的值域。以下是 quantize 比例尺的配置选项：",paraId:14,tocIndex:4},{value:"属性",paraId:15,tocIndex:4},{value:"描述",paraId:15,tocIndex:4},{value:"类型",paraId:15,tocIndex:4},{value:"默认值",paraId:15,tocIndex:4},{value:"必选",paraId:15,tocIndex:4},{value:"type",paraId:15,tocIndex:4},{value:"比例尺类型，需为 'quantize'",paraId:15,tocIndex:4},{value:"string",paraId:15,tocIndex:4},{value:"无",paraId:15,tocIndex:4},{value:"✓",paraId:15,tocIndex:4},{value:"domain",paraId:15,tocIndex:4},{value:"设置数据的定义域范围",paraId:15,tocIndex:4},{value:"number[]",paraId:15,tocIndex:4},{value:"[0, 1]",paraId:15,tocIndex:4},{value:"range",paraId:15,tocIndex:4},{value:"设置数据映射的值域范围",paraId:15,tocIndex:4},{value:"any[]",paraId:15,tocIndex:4},{value:"[0.5]",paraId:15,tocIndex:4},{value:"unknown",paraId:15,tocIndex:4},{value:"对于 ",paraId:15,tocIndex:4},{value:"undefined",paraId:15,tocIndex:4},{value:"， ",paraId:15,tocIndex:4},{value:"NaN",paraId:15,tocIndex:4},{value:"，",paraId:15,tocIndex:4},{value:"null",paraId:15,tocIndex:4},{value:" 空值，返回的数据",paraId:15,tocIndex:4},{value:"any",paraId:15,tocIndex:4},{value:"undefined",paraId:15,tocIndex:4},{value:"tickCount",paraId:15,tocIndex:4},{value:"设置推荐的 tick 生成数量，tickCount 只是建议值，不会完全按照这个值产生 tick",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:"5",paraId:15,tocIndex:4},{value:"tickMethod",paraId:15,tocIndex:4},{value:"设置生成 tick 的方法，常用于自定义 tick",paraId:15,tocIndex:4},{value:"(min: number, max: number, count: number) => number[]",paraId:15,tocIndex:4},{value:"wilkinson-extended",paraId:15,tocIndex:4},{value:"nice",paraId:15,tocIndex:4},{value:"扩展 domain 范围，让输出的 tick 展示得更加友好",paraId:15,tocIndex:4},{value:"boolean",paraId:15,tocIndex:4},{value:"false",paraId:15,tocIndex:4},{value:"下面是一个使用 quantize 比例尺创建热力图的示例，将薪资数据按照数值大小分为三个等宽区间，并映射为不同的颜色：",paraId:16,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\n// 创建一个容器元素\nconst container = document.createElement('div');\n\nconst chart = new Chart({\n  container: 'container',\n  container,\n  height: 340,\n});\n\nchart.options({\n  type: 'cell',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/89c20fe8-0c6f-46c8-b36b-4cb653dba8ed.json',\n    transform: [{ type: 'map', callback: (d) => ({ salary: d }) }],\n  },\n  scale: {\n    color: {\n      type: 'quantize',\n      range: ['#eee', 'pink', 'red'], // 将数据分为三组，对应三种颜色\n    },\n  },\n  legend: {\n    color: {\n      length: 400,\n      labelFormatter: '.0s', // 格式化图例标签，使用缩写形式（如 10K 代替 10000）\n    },\n  },\n  encode: {\n    y: (_, i) => (i % 5) + 1, // 设置单元格的行位置\n    x: (_, i) => ((i / 5) | 0) + 1, // 设置单元格的列位置\n    color: 'salary', // 将薪资数据映射到颜色通道\n  },\n  style: {\n    stroke: '#000', // 设置单元格边框颜色\n    inset: 2, // 设置单元格内边距\n  },\n  animate: {\n    enter: { type: 'fadeIn' }, // 添加淡入动画效果\n  },\n});\n\nchart.render();\n",paraId:17,tocIndex:6},{value:"在上面的示例中：",paraId:18,tocIndex:7},{value:"我们创建了一个 cell 图表（类似于热力图）",paraId:19,tocIndex:7},{value:"使用 quantize 比例尺将薪资数据（连续数值）映射到三种颜色",paraId:19,tocIndex:7},{value:"比例尺会自动将数据范围分为三个等宽区间，每个区间对应一种颜色",paraId:19,tocIndex:7},{value:"图例使用了 ",paraId:19,tocIndex:7},{value:".0s",paraId:19,tocIndex:7},{value:" 格式化器，将大数字显示为更易读的形式（如 10K）",paraId:19,tocIndex:7},{value:"比例尺类型",paraId:20,tocIndex:8},{value:"数据类型",paraId:20,tocIndex:8},{value:"分段方式",paraId:20,tocIndex:8},{value:"适用场景",paraId:20,tocIndex:8},{value:"quantize",paraId:20,tocIndex:8},{value:"连续数值",paraId:20,tocIndex:8},{value:"等宽分段",paraId:20,tocIndex:8},{value:"数据分布均匀，需要按数值范围分组",paraId:20,tocIndex:8},{value:"quantile",paraId:20,tocIndex:8},{value:"连续数值",paraId:20,tocIndex:8},{value:"等频分段",paraId:20,tocIndex:8},{value:"数据分布不均，需要每组数据量相等",paraId:20,tocIndex:8},{value:"threshold",paraId:20,tocIndex:8},{value:"连续数值",paraId:20,tocIndex:8},{value:"自定义阈值",paraId:20,tocIndex:8},{value:"需要按特定阈值分组（如及格线）",paraId:20,tocIndex:8},{value:"下面的示例展示了 quantize 和 quantile 比例尺在处理偏斜数据时的区别：",paraId:21,tocIndex:9},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\n// 创建一个偏斜分布的数据集，使用整数值\nconst generateSkewedData = () => {\n  const data = [];\n  // 大部分数据集中在低值区域\n  for (let i = 0; i < 60; i++) {\n    // 使用整数值，避免小数点导致的重叠\n    data.push({\n      value: Math.floor(5 + Math.random() * 25),\n      type: '偏斜数据',\n    });\n  }\n  // 少量数据分布在高值区域，更加分散\n  for (let i = 0; i < 15; i++) {\n    data.push({\n      value: Math.floor(60 + Math.random() * 20),\n      type: '偏斜数据',\n    });\n  }\n  // 添加一些中间值，使分布更加明显\n  for (let i = 0; i < 10; i++) {\n    data.push({\n      value: Math.floor(40 + Math.random() * 15),\n      type: '偏斜数据',\n    });\n  }\n  return data;\n};\n\nconst data = generateSkewedData();\n\n// 创建两个图表进行对比\ncontainer.style.display = 'flex';\ncontainer.style.flexDirection = 'column';\ncontainer.style.gap = '40px'; // 增加间距\ncontainer.style.width = '100%';\ncontainer.style.maxWidth = '800px';\ncontainer.style.margin = '0 auto'; // 居中显示\n\n// 添加标题\nconst title = document.createElement('h3');\ntitle.textContent = 'quantize 与 quantile 比例尺对比';\ntitle.style.textAlign = 'center';\ntitle.style.marginBottom = '10px';\ncontainer.appendChild(title);\n\n// quantize 比例尺图表\nconst chart1Container = document.createElement('div');\nchart1Container.style.width = '100%';\nchart1Container.style.height = '220px'; // 增加高度\ncontainer.appendChild(chart1Container);\n\nconst chart1 = new G2.Chart({\n  container: chart1Container,\n  height: 220,\n  autoFit: true, // 自动适应容器大小\n  padding: [50, 100, 70, 100], // 增加内边距，给标签留出更多空间\n});\n\nchart1.options({\n  type: 'point',\n  data,\n  title: {\n    text: 'quantize 比例尺（等宽分段）',\n    style: {\n      fontSize: 14,\n      fontWeight: 'bold',\n    },\n  },\n  scale: {\n    color: {\n      type: 'quantize',\n      range: ['#e8f4f8', '#a8d5e5', '#4ba3c3', '#0a6c93'], // 4个颜色分段\n    },\n    value: {\n      nice: true,\n      tickCount: 5, // 减少刻度数量\n      formatter: '.0f', // 使用G2内置的格式化器显示整数\n    },\n  },\n  encode: {\n    x: 'value',\n    y: 'type',\n    color: 'value',\n    shape: 'circle',\n    size: 8,\n  },\n  style: {\n    fillOpacity: 0.8,\n    stroke: '#fff',\n    lineWidth: 1,\n  },\n  legend: {\n    color: {\n      position: 'top',\n      length: 200, // 设置图例长度\n      labelFormatter: '.0f', // 使用G2内置的格式化器显示整数\n    },\n  },\n  axis: {\n    y: false,\n    x: {\n      labelSpacing: 10, // 增加标签间距\n      labelFormatter: '.0f', // 使用G2内置的格式化器显示整数\n      tickCount: 5, // 减少刻度数量\n    },\n  },\n});\n\nchart1.render();\n\n// quantile 比例尺图表\nconst chart2Container = document.createElement('div');\nchart2Container.style.width = '100%';\nchart2Container.style.height = '220px'; // 增加高度\ncontainer.appendChild(chart2Container);\n\nconst chart2 = new G2.Chart({\n  container: 'container',\n  container: chart2Container,\n  height: 220,\n  autoFit: true, // 自动适应容器大小\n  padding: [50, 100, 70, 100], // 增加内边距，给标签留出更多空间\n});\n\nchart2.options({\n  type: 'point',\n  data,\n  title: {\n    text: 'quantile 比例尺（等频分段）',\n    style: {\n      fontSize: 14,\n      fontWeight: 'bold',\n    },\n  },\n  scale: {\n    color: {\n      type: 'quantile',\n      range: ['#e8f4f8', '#a8d5e5', '#4ba3c3', '#0a6c93'], // 4个颜色分段\n    },\n    value: {\n      nice: true,\n      tickCount: 5, // 减少刻度数量\n      formatter: '.0f', // 使用G2内置的格式化器显示整数\n    },\n  },\n  encode: {\n    x: 'value',\n    y: 'type',\n    color: 'value',\n    shape: 'circle',\n    size: 8,\n  },\n  style: {\n    fillOpacity: 0.8,\n    stroke: '#fff',\n    lineWidth: 1,\n  },\n  legend: {\n    color: {\n      position: 'top',\n      length: 200, // 设置图例长度\n      labelFormatter: '.0f', // 使用G2内置的格式化器显示整数\n    },\n  },\n  axis: {\n    y: false,\n    x: {\n      labelSpacing: 10, // 增加标签间距\n      labelFormatter: '.0f', // 使用G2内置的格式化器显示整数\n      tickCount: 5, // 减少刻度数量\n    },\n  },\n});\n\nchart2.render();\n",paraId:22,tocIndex:9},{value:"在上面的对比示例中：",paraId:23,tocIndex:9},{value:"我们创建了一个偏斜分布的数据集，大部分数据集中在低值区域，少量数据分布在高值区域",paraId:24,tocIndex:9},{value:"使用 quantize 比例尺（等宽分段）时，数据被按照值的范围均匀分段，导致某些颜色区间内的点很少",paraId:24,tocIndex:9},{value:"使用 quantile 比例尺（等频分段）时，每个颜色区间包含相同数量的数据点，更好地展示了数据分布",paraId:24,tocIndex:9},{value:"下面是一个更复杂的示例，展示如何使用 quantize 比例尺创建多个分段，并自定义数据域：",paraId:25,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\n// 创建一个容器元素\nconst container = document.createElement('div');\n\nconst chart = new Chart({\n  container: 'container',\n  container,\n  height: 300,\n});\n\n// 生成测试数据\nconst data = Array.from({ length: 100 }, (_, i) => ({\n  value: Math.random() * 100,\n  id: i + 1,\n}));\n\nchart.options({\n  type: 'point',\n  data,\n  scale: {\n    color: {\n      type: 'quantize',\n      domain: [0, 100], // 自定义数据域\n      range: [\n        '#e8f4f8',\n        '#d1e6f0',\n        '#a8d5e5',\n        '#7ec2da',\n        '#4ba3c3',\n        '#2385ab',\n        '#0a6c93',\n      ], // 7个颜色对应6个等宽区间\n    },\n    y: {\n      nice: true,\n    },\n  },\n  encode: {\n    x: 'id',\n    y: 'value',\n    color: 'value', // 将值映射到颜色通道\n    shape: 'circle',\n    size: 10,\n  },\n  style: {\n    fillOpacity: 0.8,\n    stroke: '#fff',\n    lineWidth: 1,\n  },\n  legend: {\n    color: {\n      length: 300,\n      labelFormatter: '.0f', // 格式化图例标签为整数\n    },\n  },\n  axis: {\n    y: {\n      title: '数值',\n    },\n    x: {\n      title: 'ID',\n    },\n  },\n});\n\nchart.render();\n",paraId:26,tocIndex:10},{value:"以下是一个使用 G2 声明式语法（G2Spec）配置 quantize 比例尺的完整示例：",paraId:27,tocIndex:11},{value:"const spec = {\n  type: 'cell',\n  width: 900,\n  height: 300,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/89c20fe8-0c6f-46c8-b36b-4cb653dba8ed.json',\n    transform: [{ type: 'map', callback: (d) => ({ salary: d }) }],\n  },\n  scale: {\n    color: {\n      type: 'quantize',\n      range: ['#eeeeee', '#ffc3ce', '#ff0d0d'], // 定义三个颜色区间\n    },\n  },\n  legend: {\n    color: {\n      labelFormatter: '.0s', // 格式化图例标签\n    },\n  },\n  encode: {\n    y: (_, i) => (i % 5) + 1,\n    x: (_, i) => ((i / 5) | 0) + 1,\n    color: 'salary', // 将薪资数据映射到颜色通道\n  },\n  style: {\n    stroke: '#000',\n    inset: 2,\n  },\n};\n\n// 创建一个容器元素\nconst container = document.createElement('div');\n\n// 使用 Chart 渲染\nconst chart = new G2.Chart(container);\nchart.options(spec);\nchart.render();\n",paraId:28,tocIndex:11},{value:"这个示例展示了如何使用 G2 声明式语法创建一个使用 quantize 比例尺的热力图，包括以下特性：",paraId:29,tocIndex:11},{value:"使用 quantize 比例尺将连续的薪资数据映射到三个离散的颜色区间",paraId:30,tocIndex:11},{value:"自定义图例格式化，使用缩写形式（如 10K 代替 10000）显示数值",paraId:30,tocIndex:11},{value:"使用函数计算单元格的行列位置，创建网格布局",paraId:30,tocIndex:11},{value:"设置单元格边框和内边距，提高可读性",paraId:30,tocIndex:11},{value:"使用 quantize 比例尺时需要注意以下几点：",paraId:31,tocIndex:12},{value:"分段边界计算",paraId:32,tocIndex:12},{value:"：分段边界由数据域的最小值、最大值和值域数组的长度决定。例如，对于数据域 [0, 100] 和值域长度为 3，边界点为 33.33 和 66.67。",paraId:32,tocIndex:12},{value:"比例尺选择",paraId:33,tocIndex:12},{value:"：如果希望按数值范围均匀分段，选择 quantize；如果希望每个分段包含相同数量的数据点，选择 quantile。",paraId:33,tocIndex:12},{value:"数据域设置",paraId:34,tocIndex:12},{value:"：可以通过设置 ",paraId:34,tocIndex:12},{value:"domain",paraId:34,tocIndex:12},{value:" 属性来自定义数据域，例如 ",paraId:34,tocIndex:12},{value:"domain: [0, 100]",paraId:34,tocIndex:12},{value:"。如果不设置，G2 会根据数据自动计算合适的数据域。",paraId:34,tocIndex:12},{value:"数据分布考虑",paraId:35,tocIndex:12},{value:"：quantize 比例尺适合处理分布相对均匀的连续数值数据。如果数据分布非常不均匀（如长尾分布），可能更适合使用 quantile 比例尺。",paraId:35,tocIndex:12},{value:"友好刻度",paraId:36,tocIndex:12},{value:"：",paraId:36,tocIndex:12},{value:"nice",paraId:36,tocIndex:12},{value:" 参数设置为 ",paraId:36,tocIndex:12},{value:"true",paraId:36,tocIndex:12},{value:' 时，会扩展数据域的范围，使其边界值更加"友好"（通常是整数或易于理解的数值），这有助于生成更易读的刻度和图例标签。',paraId:36,tocIndex:12}]},24407:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(87931);const t=[{value:"sqrt 是一种连续型非线性比例尺，它本质上是指数固定为 ",paraId:0,tocIndex:0},{value:"0.5",paraId:0,tocIndex:0},{value:" 的 ",paraId:0,tocIndex:0},{value:"pow",paraId:1,tocIndex:0},{value:" 比例尺。sqrt 比例尺的映射函数为 ",paraId:0,tocIndex:0},{value:"y = x ^ 0.5 + b",paraId:0,tocIndex:0},{value:"，其中 ",paraId:0,tocIndex:0},{value:"x",paraId:0,tocIndex:0},{value:" 是输入数据，",paraId:0,tocIndex:0},{value:"b",paraId:0,tocIndex:0},{value:" 是偏移量。",paraId:0,tocIndex:0},{value:"sqrt 比例尺属于",paraId:2,tocIndex:0},{value:"连续比例尺",paraId:2,tocIndex:0},{value:"的一种，适用于:",paraId:2,tocIndex:0},{value:"需要压缩较大数值范围差异的数据",paraId:3,tocIndex:0},{value:"强调较小数值差异的可视化场景",paraId:3,tocIndex:0},{value:"映射面积等需要平方根变换的视觉通道",paraId:3,tocIndex:0},{value:"与线性比例尺相比，sqrt 比例尺对大数值的压缩程度较高，适合处理变化范围较大的数据。",paraId:4,tocIndex:0},{value:"sqrt 比例尺能够使数据在视觉上更加均匀分布，特别是对于具有较大数值范围的数据集。",paraId:5,tocIndex:1},{value:"使用 sqrt 比例尺效果",paraId:6,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { year: '1991', value: 1 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 9 },\n    { year: '1994', value: 16 },\n    { year: '1995', value: 25 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: { y: { type: 'sqrt' } },\n  children: [\n    { type: 'line', labels: [{ text: 'value', style: { dx: -10, dy: -12 } }] },\n    { type: 'point', style: { fill: 'white' }, tooltip: false },\n  ],\n});\n\nchart.render();\n",paraId:7,tocIndex:1},{value:"未使用 sqrt 比例尺效果",paraId:8,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { year: '1991', value: 1 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 9 },\n    { year: '1994', value: 16 },\n    { year: '1995', value: 25 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  children: [\n    { type: 'line', labels: [{ text: 'value', style: { dx: -10, dy: -12 } }] },\n    { type: 'point', style: { fill: 'white' }, tooltip: false },\n  ],\n});\n\nchart.render();\n",paraId:9,tocIndex:1},{value:"属性",paraId:10,tocIndex:2},{value:"描述",paraId:10,tocIndex:2},{value:"类型",paraId:10,tocIndex:2},{value:"默认值",paraId:10,tocIndex:2},{value:"必选",paraId:10,tocIndex:2},{value:"domain",paraId:10,tocIndex:2},{value:"设置数据的定义域范围",paraId:10,tocIndex:2},{value:"number[]",paraId:10,tocIndex:2},{value:"输入数据的最大最小值范围",paraId:10,tocIndex:2},{value:"domainMin",paraId:10,tocIndex:2},{value:"设置数据的定义域最小值",paraId:10,tocIndex:2},{value:"number",paraId:10,tocIndex:2},{value:"输入数据的最小值",paraId:10,tocIndex:2},{value:"domainMax",paraId:10,tocIndex:2},{value:"设置数据的定义域最大值",paraId:10,tocIndex:2},{value:"number",paraId:10,tocIndex:2},{value:"输入数据的最大值",paraId:10,tocIndex:2},{value:"range",paraId:10,tocIndex:2},{value:"设置数据映射的值域范围",paraId:10,tocIndex:2},{value:"number[]",paraId:10,tocIndex:2},{value:" | ",paraId:10,tocIndex:2},{value:"string[]",paraId:10,tocIndex:2},{value:"[0, 1]",paraId:10,tocIndex:2},{value:"rangeMin",paraId:10,tocIndex:2},{value:"设置数据映射的值域最小值",paraId:10,tocIndex:2},{value:"number | string",paraId:10,tocIndex:2},{value:"0",paraId:10,tocIndex:2},{value:"rangeMax",paraId:10,tocIndex:2},{value:"设置数据映射的值域最大值",paraId:10,tocIndex:2},{value:"number | string",paraId:10,tocIndex:2},{value:"1",paraId:10,tocIndex:2},{value:"unknown",paraId:10,tocIndex:2},{value:"对于 ",paraId:10,tocIndex:2},{value:"undefined",paraId:10,tocIndex:2},{value:"， ",paraId:10,tocIndex:2},{value:"NaN",paraId:10,tocIndex:2},{value:"，",paraId:10,tocIndex:2},{value:"null",paraId:10,tocIndex:2},{value:" 空值，返回的数据",paraId:10,tocIndex:2},{value:"any",paraId:10,tocIndex:2},{value:"undefined",paraId:10,tocIndex:2},{value:"tickCount",paraId:10,tocIndex:2},{value:"设置推荐的 tick 生成数量，tickCount 只是建议值，不会完全按照这个值产生 tick",paraId:10,tocIndex:2},{value:"number",paraId:10,tocIndex:2},{value:"5",paraId:10,tocIndex:2},{value:"tickMethod",paraId:10,tocIndex:2},{value:"设置生成 tick 的方法，常用于自定义 tick",paraId:10,tocIndex:2},{value:"(min: number, max: number, count: number) => number[]",paraId:10,tocIndex:2},{value:"d3-ticks",paraId:10,tocIndex:2},{value:"round",paraId:10,tocIndex:2},{value:"输出值去四舍五入",paraId:10,tocIndex:2},{value:"boolean",paraId:10,tocIndex:2},{value:"false",paraId:10,tocIndex:2},{value:"clamp",paraId:10,tocIndex:2},{value:"将映射值限定在 range 的范围内",paraId:10,tocIndex:2},{value:"boolean",paraId:10,tocIndex:2},{value:"false",paraId:10,tocIndex:2},{value:"nice",paraId:10,tocIndex:2},{value:"扩展 domain 范围，让输出的 tick 展示得更加友好",paraId:10,tocIndex:2},{value:"boolean",paraId:10,tocIndex:2},{value:"false",paraId:10,tocIndex:2},{value:"interpolate",paraId:10,tocIndex:2},{value:"自定义插值函数",paraId:10,tocIndex:2},{value:"(a: number, b: number) => (t: number) => T",paraId:10,tocIndex:2},{value:"(a, b) => (t) => a * (1 - t) + b * t",paraId:10,tocIndex:2},{value:"exponent",paraId:10,tocIndex:2},{value:"设定指数，对于 sqrt 比例尺，该值固定为 ",paraId:10,tocIndex:2},{value:"0.5",paraId:10,tocIndex:2},{value:"number",paraId:10,tocIndex:2},{value:"0.5",paraId:10,tocIndex:2},{value:"使用 sqrt 比例尺映射散点图中的点大小，使数值差异更加明显。",paraId:11,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n  },\n  encode: {\n    x: 'GDP',\n    y: 'LifeExpectancy',\n    size: 'Population',\n    color: 'continent',\n    shape: 'point',\n  },\n  scale: { size: { type: 'sqrt', range: [4, 50] } },\n  style: { fillOpacity: 0.3, lineWidth: 1 },\n  legend: { size: false },\n});\n\nchart.render();\n",paraId:12,tocIndex:4},{value:"这是一个气泡图（point 图），每个点代表一个国家。",paraId:13,tocIndex:5},{value:"数据通过远程 fetch 获取，包含 GDP、预期寿命、人口等字段。",paraId:13,tocIndex:5},{value:"encode",paraId:13,tocIndex:5},{value:" 部分将 GDP 映射到 x 轴，预期寿命映射到 y 轴，人口数映射到点的大小（size），大洲映射到颜色。",paraId:13,tocIndex:5},{value:"scale.size",paraId:13,tocIndex:5},{value:" 使用了 ",paraId:13,tocIndex:5},{value:"sqrt",paraId:13,tocIndex:5},{value:"，将人口数通过幂次变换映射到点的半径，",paraId:13,tocIndex:5},{value:"range: [4, 20]",paraId:13,tocIndex:5},{value:" 控制最小最大点的大小。",paraId:13,tocIndex:5},{value:"视觉样式设置了透明度和描边宽度，关闭了 size 图例。",paraId:13,tocIndex:5},{value:"通过 ",paraId:13,tocIndex:5},{value:"chart.render()",paraId:13,tocIndex:5},{value:" 渲染图表。",paraId:13,tocIndex:5},{value:"使用 sqrt 比例尺处理颜色渐变映射",paraId:14,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  children: [\n    {\n      type: 'point',\n      data: {\n        type: 'fetch',\n        value:\n          'https://gw.alipayobjects.com/os/bmw-prod/56b6b137-e04e-4757-8af5-d75bafaef886.csv',\n      },\n      encode: { x: 'date', y: 'value', color: 'value', shape: 'point' },\n      scale: {\n        color: { type: 'sqrt', domain: [0, 1], range: ['#1689F1', '#1AC07D'] },\n      },\n      style: { stroke: '#000', strokeOpacity: 0.2 },\n      tooltip: {\n        items: [\n          {\n            channel: 'x',\n            name: 'year',\n            valueFormatter: (d) => d.getFullYear(),\n          },\n          { channel: 'y' },\n        ],\n      },\n    },\n    { type: 'lineY', data: [0], style: { stroke: '#000', strokeOpacity: 0.2 } },\n  ],\n});\nchart.render();\n",paraId:15,tocIndex:6},{value:"这是一个带有辅助线的点图（scatter plot）。",paraId:16,tocIndex:7},{value:"主体是 point 图，数据同样通过 fetch 获取，包含日期和数值。",paraId:16,tocIndex:7},{value:"encode",paraId:16,tocIndex:7},{value:" 部分将日期映射到 x 轴，value 映射到 y 轴，同时 value 也映射到颜色（color）。",paraId:16,tocIndex:7},{value:"scale.color",paraId:16,tocIndex:7},{value:" 使用 ",paraId:16,tocIndex:7},{value:"sqrt",paraId:16,tocIndex:7},{value:"，将 value 通过幂次变换映射到颜色渐变（蓝到绿），",paraId:16,tocIndex:7},{value:"domain: [0, 1]",paraId:16,tocIndex:7},{value:" 指定输入数据范围。",paraId:16,tocIndex:7},{value:"点有黑色描边和一定透明度。",paraId:16,tocIndex:7},{value:"tooltip 配置了自定义的年份格式化。",paraId:16,tocIndex:7},{value:"还添加了一条 y=0 的辅助线（lineY）。",paraId:16,tocIndex:7},{value:"通过 ",paraId:16,tocIndex:7},{value:"chart.render()",paraId:16,tocIndex:7},{value:" 渲染图表。",paraId:16,tocIndex:7},{value:"这个例子中，数据通过 sqrt 比例尺映射到颜色，相比线性映射，能更好地展示区域的差异。",paraId:17,tocIndex:7}]},91262:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(38755);const t=[{value:"threshold",paraId:0,tocIndex:0},{value:"（阈值）比例尺属于",paraId:0,tocIndex:0},{value:"离散化比例尺",paraId:0,tocIndex:0},{value:"，用于将连续的数值型定义域按照指定的阈值分割成若干区间，并将每个区间映射到离散的值域中的一个值。常用于将连续数据分组、分档、分级显示。",paraId:0,tocIndex:0},{value:"与 ",paraId:1,tocIndex:0},{value:"quantize",paraId:2,tocIndex:0},{value:" 比例尺类似，threshold 也是将连续数据映射为离散值，但不同的是：",paraId:1,tocIndex:0},{value:"threshold 比例尺需要手动指定分割点（阈值）",paraId:3,tocIndex:0},{value:"quantize 比例尺会根据数据域和值域的数量自动计算等宽的区间",paraId:3,tocIndex:0},{value:"与 ",paraId:4,tocIndex:0},{value:"quantile",paraId:5,tocIndex:0},{value:" 比例尺的区别在于：",paraId:4,tocIndex:0},{value:"quantile 比例尺基于数据分布的分位数进行分段，确保每个区间包含相同数量的数据点",paraId:6,tocIndex:0},{value:"threshold 比例尺基于手动指定分割点分段，不考虑数据分布",paraId:6,tocIndex:0},{value:"使用",paraId:7,tocIndex:1},{value:"threshold",paraId:7,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: {\n    y: {\n      type: 'threshold',\n      range: [1, 0.5, 0],\n    },\n  },\n  children: [\n    { type: 'line', labels: [{ text: 'value', style: { dx: -10, dy: -12 } }] },\n    { type: 'point', style: { fill: 'white' }, tooltip: false },\n  ],\n});\n\nchart.render();\n",paraId:8,tocIndex:1},{value:"不使用",paraId:9,tocIndex:1},{value:"threshold",paraId:9,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: { x: { range: [0, 1] }, y: { domainMin: 0, nice: true } },\n  children: [\n    { type: 'line', labels: [{ text: 'value', style: { dx: -10, dy: -12 } }] },\n    { type: 'point', style: { fill: 'white' }, tooltip: false },\n  ],\n});\n\nchart.render();\n",paraId:10,tocIndex:1},{value:"连续型数据需要分段归类时（如分档、评级、分区间着色等）",paraId:11,tocIndex:2},{value:"需要将数值型数据离散化为有限个类别",paraId:11,tocIndex:2},{value:"属性",paraId:12,tocIndex:3},{value:"描述",paraId:12,tocIndex:3},{value:"类型",paraId:12,tocIndex:3},{value:"默认值",paraId:12,tocIndex:3},{value:"必选",paraId:12,tocIndex:3},{value:"type",paraId:12,tocIndex:3},{value:"比例尺类型, 需为'threshold'",paraId:12,tocIndex:3},{value:"string",paraId:12,tocIndex:3},{value:"'threshold'",paraId:12,tocIndex:3},{value:"✓",paraId:12,tocIndex:3},{value:"domain",paraId:12,tocIndex:3},{value:"定义域阈值数组",paraId:12,tocIndex:3},{value:"number[]",paraId:12,tocIndex:3},{value:"[0.5]",paraId:12,tocIndex:3},{value:"range",paraId:12,tocIndex:3},{value:"值域数组+1",paraId:12,tocIndex:3},{value:"any[]",paraId:12,tocIndex:3},{value:"[0, 1]",paraId:12,tocIndex:3},{value:"unknown",paraId:12,tocIndex:3},{value:"输入为 ",paraId:12,tocIndex:3},{value:"undefined",paraId:12,tocIndex:3},{value:"、",paraId:12,tocIndex:3},{value:"NaN",paraId:12,tocIndex:3},{value:"、",paraId:12,tocIndex:3},{value:"null",paraId:12,tocIndex:3},{value:" 时返回的值",paraId:12,tocIndex:3},{value:"any",paraId:12,tocIndex:3},{value:"undefined",paraId:12,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: {\n    y: {\n      type: 'threshold',\n      range: [1, 0.5, 0],\n    },\n  },\n  children: [\n    { type: 'line', labels: [{ text: 'value', style: { dx: -10, dy: -12 } }] },\n    { type: 'point', style: { fill: 'white' }, tooltip: false },\n  ],\n});\n\nchart.render();\n",paraId:13,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: [\n    { date: '2011-10-01T00:00:00.000Z', value: 62.7 },\n    { date: '2011-10-02T00:00:00.000Z', value: 59.9 },\n    { date: '2011-10-03T00:00:00.000Z', value: 59.1 },\n    { date: '2011-10-04T00:00:00.000Z', value: 58.8 },\n    { date: '2011-10-05T00:00:00.000Z', value: 58.7 },\n    { date: '2011-10-06T00:00:00.000Z', value: 57 },\n    { date: '2011-10-07T00:00:00.000Z', value: 56.7 },\n    { date: '2011-10-08T00:00:00.000Z', value: 56.8 },\n    { date: '2011-10-09T00:00:00.000Z', value: 56.7 },\n    { date: '2011-10-10T00:00:00.000Z', value: 60.1 },\n    { date: '2011-10-11T00:00:00.000Z', value: 61.1 },\n    { date: '2011-10-12T00:00:00.000Z', value: 61.5 },\n    { date: '2011-10-13T00:00:00.000Z', value: 64.3 },\n    { date: '2011-10-14T00:00:00.000Z', value: 67.1 },\n    { date: '2011-10-15T00:00:00.000Z', value: 64.6 },\n    { date: '2011-10-16T00:00:00.000Z', value: 61.6 },\n    { date: '2011-10-17T00:00:00.000Z', value: 61.1 },\n    { date: '2011-10-18T00:00:00.000Z', value: 59.2 },\n    { date: '2011-10-19T00:00:00.000Z', value: 58.9 },\n    { date: '2011-10-20T00:00:00.000Z', value: 57.2 },\n    { date: '2011-10-21T00:00:00.000Z', value: 56.4 },\n    { date: '2011-10-22T00:00:00.000Z', value: 60.7 },\n    { date: '2011-10-23T00:00:00.000Z', value: 65.1 },\n    { date: '2011-10-24T00:00:00.000Z', value: 60.9 },\n    { date: '2011-10-25T00:00:00.000Z', value: 56.1 },\n    { date: '2011-10-26T00:00:00.000Z', value: 54.6 },\n    { date: '2011-10-27T00:00:00.000Z', value: 56.1 },\n    { date: '2011-10-28T00:00:00.000Z', value: 58.1 },\n    { date: '2011-10-29T00:00:00.000Z', value: 57.5 },\n    { date: '2011-10-30T00:00:00.000Z', value: 57.7 },\n    { date: '2011-10-31T00:00:00.000Z', value: 55.1 },\n    { date: '2011-11-01T00:00:00.000Z', value: 57.9 },\n    { date: '2011-11-02T00:00:00.000Z', value: 64.6 },\n    { date: '2011-11-03T00:00:00.000Z', value: 56.2 },\n    { date: '2011-11-04T00:00:00.000Z', value: 50.5 },\n    { date: '2011-11-05T00:00:00.000Z', value: 51.3 },\n    { date: '2011-11-06T00:00:00.000Z', value: 52.6 },\n    { date: '2011-11-07T00:00:00.000Z', value: 51.4 },\n    { date: '2011-11-08T00:00:00.000Z', value: 50.6 },\n    { date: '2011-11-09T00:00:00.000Z', value: 54.6 },\n    { date: '2011-11-10T00:00:00.000Z', value: 55.6 },\n    { date: '2011-11-11T00:00:00.000Z', value: 53.9 },\n    { date: '2011-11-12T00:00:00.000Z', value: 54 },\n    { date: '2011-11-13T00:00:00.000Z', value: 53.8 },\n    { date: '2011-11-14T00:00:00.000Z', value: 53.5 },\n    { date: '2011-11-15T00:00:00.000Z', value: 53.4 },\n    { date: '2011-11-16T00:00:00.000Z', value: 52.2 },\n    { date: '2011-11-17T00:00:00.000Z', value: 52.7 },\n    { date: '2011-11-18T00:00:00.000Z', value: 53.1 },\n    { date: '2011-11-19T00:00:00.000Z', value: 49 },\n    { date: '2011-11-20T00:00:00.000Z', value: 50.4 },\n    { date: '2011-11-21T00:00:00.000Z', value: 51.1 },\n    { date: '2011-11-22T00:00:00.000Z', value: 52.3 },\n    { date: '2011-11-23T00:00:00.000Z', value: 54.6 },\n    { date: '2011-11-24T00:00:00.000Z', value: 55.1 },\n    { date: '2011-11-25T00:00:00.000Z', value: 51.5 },\n    { date: '2011-11-26T00:00:00.000Z', value: 53.6 },\n    { date: '2011-11-27T00:00:00.000Z', value: 52.3 },\n    { date: '2011-11-28T00:00:00.000Z', value: 51 },\n    { date: '2011-11-29T00:00:00.000Z', value: 49.5 },\n    { date: '2011-11-30T00:00:00.000Z', value: 49.8 },\n    { date: '2011-12-01T00:00:00.000Z', value: 60.4 },\n    { date: '2011-12-02T00:00:00.000Z', value: 62.2 },\n    { date: '2011-12-03T00:00:00.000Z', value: 58.3 },\n    { date: '2011-12-04T00:00:00.000Z', value: 52.7 },\n    { date: '2011-12-05T00:00:00.000Z', value: 51.5 },\n    { date: '2011-12-06T00:00:00.000Z', value: 49.9 },\n    { date: '2011-12-07T00:00:00.000Z', value: 48.6 },\n    { date: '2011-12-08T00:00:00.000Z', value: 46.4 },\n    { date: '2011-12-09T00:00:00.000Z', value: 49.8 },\n    { date: '2011-12-10T00:00:00.000Z', value: 52.1 },\n    { date: '2011-12-11T00:00:00.000Z', value: 48.8 },\n    { date: '2011-12-12T00:00:00.000Z', value: 47.4 },\n    { date: '2011-12-13T00:00:00.000Z', value: 47.2 },\n    { date: '2011-12-14T00:00:00.000Z', value: 46.1 },\n    { date: '2011-12-15T00:00:00.000Z', value: 48.8 },\n    { date: '2011-12-16T00:00:00.000Z', value: 47.9 },\n    { date: '2011-12-17T00:00:00.000Z', value: 49.8 },\n    { date: '2011-12-18T00:00:00.000Z', value: 49.1 },\n    { date: '2011-12-19T00:00:00.000Z', value: 48.3 },\n    { date: '2011-12-20T00:00:00.000Z', value: 49.3 },\n    { date: '2011-12-21T00:00:00.000Z', value: 48.4 },\n    { date: '2011-12-22T00:00:00.000Z', value: 53.3 },\n    { date: '2011-12-23T00:00:00.000Z', value: 47.5 },\n    { date: '2011-12-24T00:00:00.000Z', value: 47.9 },\n    { date: '2011-12-25T00:00:00.000Z', value: 48.9 },\n    { date: '2011-12-26T00:00:00.000Z', value: 45.9 },\n    { date: '2011-12-27T00:00:00.000Z', value: 47.2 },\n    { date: '2011-12-28T00:00:00.000Z', value: 48.9 },\n    { date: '2011-12-29T00:00:00.000Z', value: 50.9 },\n    { date: '2011-12-30T00:00:00.000Z', value: 52.9 },\n    { date: '2011-12-31T00:00:00.000Z', value: 50.1 },\n    { date: '2012-01-01T00:00:00.000Z', value: 53.9 },\n    { date: '2012-01-02T00:00:00.000Z', value: 53.1 },\n    { date: '2012-01-03T00:00:00.000Z', value: 49.7 },\n    { date: '2012-01-04T00:00:00.000Z', value: 52.7 },\n    { date: '2012-01-05T00:00:00.000Z', value: 52.6 },\n    { date: '2012-01-06T00:00:00.000Z', value: 49 },\n    { date: '2012-01-07T00:00:00.000Z', value: 51 },\n    { date: '2012-01-08T00:00:00.000Z', value: 56.8 },\n    { date: '2012-01-09T00:00:00.000Z', value: 52.3 },\n    { date: '2012-01-10T00:00:00.000Z', value: 51.6 },\n    { date: '2012-01-11T00:00:00.000Z', value: 49.8 },\n    { date: '2012-01-12T00:00:00.000Z', value: 51.9 },\n    { date: '2012-01-13T00:00:00.000Z', value: 53.7 },\n    { date: '2012-01-14T00:00:00.000Z', value: 52.9 },\n    { date: '2012-01-15T00:00:00.000Z', value: 49.7 },\n    { date: '2012-01-16T00:00:00.000Z', value: 45.3 },\n    { date: '2012-01-17T00:00:00.000Z', value: 43.6 },\n    { date: '2012-01-18T00:00:00.000Z', value: 45 },\n    { date: '2012-01-19T00:00:00.000Z', value: 47.3 },\n    { date: '2012-01-20T00:00:00.000Z', value: 51.4 },\n    { date: '2012-01-21T00:00:00.000Z', value: 53.7 },\n    { date: '2012-01-22T00:00:00.000Z', value: 48.3 },\n    { date: '2012-01-23T00:00:00.000Z', value: 52.9 },\n    { date: '2012-01-24T00:00:00.000Z', value: 49.1 },\n    { date: '2012-01-25T00:00:00.000Z', value: 52.1 },\n    { date: '2012-01-26T00:00:00.000Z', value: 53.6 },\n    { date: '2012-01-27T00:00:00.000Z', value: 50.4 },\n    { date: '2012-01-28T00:00:00.000Z', value: 50.3 },\n    { date: '2012-01-29T00:00:00.000Z', value: 53.8 },\n    { date: '2012-01-30T00:00:00.000Z', value: 51.9 },\n    { date: '2012-01-31T00:00:00.000Z', value: 50 },\n    { date: '2012-02-01T00:00:00.000Z', value: 50 },\n    { date: '2012-02-02T00:00:00.000Z', value: 51.3 },\n    { date: '2012-02-03T00:00:00.000Z', value: 51.5 },\n    { date: '2012-02-04T00:00:00.000Z', value: 52 },\n    { date: '2012-02-05T00:00:00.000Z', value: 53.8 },\n    { date: '2012-02-06T00:00:00.000Z', value: 54.6 },\n    { date: '2012-02-07T00:00:00.000Z', value: 54.3 },\n    { date: '2012-02-08T00:00:00.000Z', value: 51.9 },\n    { date: '2012-02-09T00:00:00.000Z', value: 53.8 },\n    { date: '2012-02-10T00:00:00.000Z', value: 53.9 },\n    { date: '2012-02-11T00:00:00.000Z', value: 52.3 },\n    { date: '2012-02-12T00:00:00.000Z', value: 50.1 },\n    { date: '2012-02-13T00:00:00.000Z', value: 49.5 },\n    { date: '2012-02-14T00:00:00.000Z', value: 48.6 },\n    { date: '2012-02-15T00:00:00.000Z', value: 49.9 },\n    { date: '2012-02-16T00:00:00.000Z', value: 52.4 },\n    { date: '2012-02-17T00:00:00.000Z', value: 49.9 },\n    { date: '2012-02-18T00:00:00.000Z', value: 51.6 },\n    { date: '2012-02-19T00:00:00.000Z', value: 47.8 },\n    { date: '2012-02-20T00:00:00.000Z', value: 48.7 },\n    { date: '2012-02-21T00:00:00.000Z', value: 49.7 },\n    { date: '2012-02-22T00:00:00.000Z', value: 53.4 },\n    { date: '2012-02-23T00:00:00.000Z', value: 54.1 },\n    { date: '2012-02-24T00:00:00.000Z', value: 55.9 },\n    { date: '2012-02-25T00:00:00.000Z', value: 51.7 },\n    { date: '2012-02-26T00:00:00.000Z', value: 47.7 },\n    { date: '2012-02-27T00:00:00.000Z', value: 45.4 },\n    { date: '2012-02-28T00:00:00.000Z', value: 47 },\n    { date: '2012-02-29T00:00:00.000Z', value: 49.8 },\n    { date: '2012-03-01T00:00:00.000Z', value: 48.9 },\n    { date: '2012-03-02T00:00:00.000Z', value: 48.1 },\n    { date: '2012-03-03T00:00:00.000Z', value: 50.7 },\n    { date: '2012-03-04T00:00:00.000Z', value: 55 },\n    { date: '2012-03-05T00:00:00.000Z', value: 48.8 },\n    { date: '2012-03-06T00:00:00.000Z', value: 48.4 },\n    { date: '2012-03-07T00:00:00.000Z', value: 49.9 },\n    { date: '2012-03-08T00:00:00.000Z', value: 49.2 },\n    { date: '2012-03-09T00:00:00.000Z', value: 51.7 },\n    { date: '2012-03-10T00:00:00.000Z', value: 49.3 },\n    { date: '2012-03-11T00:00:00.000Z', value: 50 },\n    { date: '2012-03-12T00:00:00.000Z', value: 48.6 },\n    { date: '2012-03-13T00:00:00.000Z', value: 53.9 },\n    { date: '2012-03-14T00:00:00.000Z', value: 55.2 },\n    { date: '2012-03-15T00:00:00.000Z', value: 55.9 },\n    { date: '2012-03-16T00:00:00.000Z', value: 54.6 },\n    { date: '2012-03-17T00:00:00.000Z', value: 48.2 },\n    { date: '2012-03-18T00:00:00.000Z', value: 47.1 },\n    { date: '2012-03-19T00:00:00.000Z', value: 45.8 },\n    { date: '2012-03-20T00:00:00.000Z', value: 49.7 },\n    { date: '2012-03-21T00:00:00.000Z', value: 51.4 },\n    { date: '2012-03-22T00:00:00.000Z', value: 51.4 },\n    { date: '2012-03-23T00:00:00.000Z', value: 48.4 },\n    { date: '2012-03-24T00:00:00.000Z', value: 49 },\n    { date: '2012-03-25T00:00:00.000Z', value: 46.4 },\n    { date: '2012-03-26T00:00:00.000Z', value: 49.7 },\n    { date: '2012-03-27T00:00:00.000Z', value: 54.1 },\n    { date: '2012-03-28T00:00:00.000Z', value: 54.6 },\n    { date: '2012-03-29T00:00:00.000Z', value: 52.3 },\n    { date: '2012-03-30T00:00:00.000Z', value: 54.5 },\n    { date: '2012-03-31T00:00:00.000Z', value: 56.2 },\n    { date: '2012-04-01T00:00:00.000Z', value: 51.1 },\n    { date: '2012-04-02T00:00:00.000Z', value: 50.5 },\n    { date: '2012-04-03T00:00:00.000Z', value: 52.2 },\n    { date: '2012-04-04T00:00:00.000Z', value: 50.6 },\n    { date: '2012-04-05T00:00:00.000Z', value: 47.9 },\n    { date: '2012-04-06T00:00:00.000Z', value: 47.4 },\n    { date: '2012-04-07T00:00:00.000Z', value: 49.4 },\n    { date: '2012-04-08T00:00:00.000Z', value: 50 },\n    { date: '2012-04-09T00:00:00.000Z', value: 51.3 },\n    { date: '2012-04-10T00:00:00.000Z', value: 53.8 },\n    { date: '2012-04-11T00:00:00.000Z', value: 52.9 },\n    { date: '2012-04-12T00:00:00.000Z', value: 53.9 },\n    { date: '2012-04-13T00:00:00.000Z', value: 50.2 },\n    { date: '2012-04-14T00:00:00.000Z', value: 50.9 },\n    { date: '2012-04-15T00:00:00.000Z', value: 51.5 },\n    { date: '2012-04-16T00:00:00.000Z', value: 51.9 },\n    { date: '2012-04-17T00:00:00.000Z', value: 53.2 },\n    { date: '2012-04-18T00:00:00.000Z', value: 53 },\n    { date: '2012-04-19T00:00:00.000Z', value: 55.1 },\n    { date: '2012-04-20T00:00:00.000Z', value: 55.8 },\n    { date: '2012-04-21T00:00:00.000Z', value: 58 },\n    { date: '2012-04-22T00:00:00.000Z', value: 52.8 },\n    { date: '2012-04-23T00:00:00.000Z', value: 55.1 },\n    { date: '2012-04-24T00:00:00.000Z', value: 57.9 },\n    { date: '2012-04-25T00:00:00.000Z', value: 57.5 },\n    { date: '2012-04-26T00:00:00.000Z', value: 55.3 },\n    { date: '2012-04-27T00:00:00.000Z', value: 53.5 },\n    { date: '2012-04-28T00:00:00.000Z', value: 54.7 },\n    { date: '2012-04-29T00:00:00.000Z', value: 54 },\n    { date: '2012-04-30T00:00:00.000Z', value: 53.4 },\n    { date: '2012-05-01T00:00:00.000Z', value: 52.7 },\n    { date: '2012-05-02T00:00:00.000Z', value: 50.7 },\n    { date: '2012-05-03T00:00:00.000Z', value: 52.6 },\n    { date: '2012-05-04T00:00:00.000Z', value: 53.4 },\n    { date: '2012-05-05T00:00:00.000Z', value: 53.1 },\n    { date: '2012-05-06T00:00:00.000Z', value: 56.5 },\n    { date: '2012-05-07T00:00:00.000Z', value: 55.3 },\n    { date: '2012-05-08T00:00:00.000Z', value: 52 },\n    { date: '2012-05-09T00:00:00.000Z', value: 52.4 },\n    { date: '2012-05-10T00:00:00.000Z', value: 53.4 },\n    { date: '2012-05-11T00:00:00.000Z', value: 53.1 },\n    { date: '2012-05-12T00:00:00.000Z', value: 49.9 },\n    { date: '2012-05-13T00:00:00.000Z', value: 52 },\n    { date: '2012-05-14T00:00:00.000Z', value: 56 },\n    { date: '2012-05-15T00:00:00.000Z', value: 53 },\n    { date: '2012-05-16T00:00:00.000Z', value: 51 },\n    { date: '2012-05-17T00:00:00.000Z', value: 51.4 },\n    { date: '2012-05-18T00:00:00.000Z', value: 52.2 },\n    { date: '2012-05-19T00:00:00.000Z', value: 52.4 },\n    { date: '2012-05-20T00:00:00.000Z', value: 54.5 },\n    { date: '2012-05-21T00:00:00.000Z', value: 52.8 },\n    { date: '2012-05-22T00:00:00.000Z', value: 53.9 },\n    { date: '2012-05-23T00:00:00.000Z', value: 56.5 },\n    { date: '2012-05-24T00:00:00.000Z', value: 54.7 },\n    { date: '2012-05-25T00:00:00.000Z', value: 52.5 },\n    { date: '2012-05-26T00:00:00.000Z', value: 52.1 },\n    { date: '2012-05-27T00:00:00.000Z', value: 52.2 },\n    { date: '2012-05-28T00:00:00.000Z', value: 52.9 },\n    { date: '2012-05-29T00:00:00.000Z', value: 52.1 },\n    { date: '2012-05-30T00:00:00.000Z', value: 52.1 },\n    { date: '2012-05-31T00:00:00.000Z', value: 53.3 },\n    { date: '2012-06-01T00:00:00.000Z', value: 54.8 },\n    { date: '2012-06-02T00:00:00.000Z', value: 54 },\n    { date: '2012-06-03T00:00:00.000Z', value: 52.3 },\n    { date: '2012-06-04T00:00:00.000Z', value: 55.3 },\n    { date: '2012-06-05T00:00:00.000Z', value: 53.5 },\n    { date: '2012-06-06T00:00:00.000Z', value: 54.1 },\n    { date: '2012-06-07T00:00:00.000Z', value: 53.9 },\n    { date: '2012-06-08T00:00:00.000Z', value: 54.4 },\n    { date: '2012-06-09T00:00:00.000Z', value: 55 },\n    { date: '2012-06-10T00:00:00.000Z', value: 60 },\n    { date: '2012-06-11T00:00:00.000Z', value: 57.2 },\n    { date: '2012-06-12T00:00:00.000Z', value: 55.1 },\n    { date: '2012-06-13T00:00:00.000Z', value: 53.3 },\n    { date: '2012-06-14T00:00:00.000Z', value: 53.4 },\n    { date: '2012-06-15T00:00:00.000Z', value: 54.6 },\n    { date: '2012-06-16T00:00:00.000Z', value: 57 },\n    { date: '2012-06-17T00:00:00.000Z', value: 55.6 },\n    { date: '2012-06-18T00:00:00.000Z', value: 52.5 },\n    { date: '2012-06-19T00:00:00.000Z', value: 53.9 },\n    { date: '2012-06-20T00:00:00.000Z', value: 55.3 },\n    { date: '2012-06-21T00:00:00.000Z', value: 53.3 },\n    { date: '2012-06-22T00:00:00.000Z', value: 54.1 },\n    { date: '2012-06-23T00:00:00.000Z', value: 55.2 },\n    { date: '2012-06-24T00:00:00.000Z', value: 55.8 },\n    { date: '2012-06-25T00:00:00.000Z', value: 56.8 },\n    { date: '2012-06-26T00:00:00.000Z', value: 57.5 },\n    { date: '2012-06-27T00:00:00.000Z', value: 57.7 },\n    { date: '2012-06-28T00:00:00.000Z', value: 56.6 },\n    { date: '2012-06-29T00:00:00.000Z', value: 56.4 },\n    { date: '2012-06-30T00:00:00.000Z', value: 58.4 },\n    { date: '2012-07-01T00:00:00.000Z', value: 58.8 },\n    { date: '2012-07-02T00:00:00.000Z', value: 56.4 },\n    { date: '2012-07-03T00:00:00.000Z', value: 56.5 },\n    { date: '2012-07-04T00:00:00.000Z', value: 55.8 },\n    { date: '2012-07-05T00:00:00.000Z', value: 54.8 },\n    { date: '2012-07-06T00:00:00.000Z', value: 54.9 },\n    { date: '2012-07-07T00:00:00.000Z', value: 54.7 },\n    { date: '2012-07-08T00:00:00.000Z', value: 52.8 },\n    { date: '2012-07-09T00:00:00.000Z', value: 53.7 },\n    { date: '2012-07-10T00:00:00.000Z', value: 53.1 },\n    { date: '2012-07-11T00:00:00.000Z', value: 52.7 },\n    { date: '2012-07-12T00:00:00.000Z', value: 52 },\n    { date: '2012-07-13T00:00:00.000Z', value: 53.4 },\n    { date: '2012-07-14T00:00:00.000Z', value: 54 },\n    { date: '2012-07-15T00:00:00.000Z', value: 54 },\n    { date: '2012-07-16T00:00:00.000Z', value: 54.5 },\n    { date: '2012-07-17T00:00:00.000Z', value: 56.7 },\n    { date: '2012-07-18T00:00:00.000Z', value: 57.5 },\n    { date: '2012-07-19T00:00:00.000Z', value: 57.1 },\n    { date: '2012-07-20T00:00:00.000Z', value: 58.1 },\n    { date: '2012-07-21T00:00:00.000Z', value: 57.6 },\n    { date: '2012-07-22T00:00:00.000Z', value: 56 },\n    { date: '2012-07-23T00:00:00.000Z', value: 56.6 },\n    { date: '2012-07-24T00:00:00.000Z', value: 57.8 },\n    { date: '2012-07-25T00:00:00.000Z', value: 57.5 },\n    { date: '2012-07-26T00:00:00.000Z', value: 56.4 },\n    { date: '2012-07-27T00:00:00.000Z', value: 55.3 },\n    { date: '2012-07-28T00:00:00.000Z', value: 55 },\n    { date: '2012-07-29T00:00:00.000Z', value: 55.6 },\n    { date: '2012-07-30T00:00:00.000Z', value: 55.6 },\n    { date: '2012-07-31T00:00:00.000Z', value: 55.9 },\n    { date: '2012-08-01T00:00:00.000Z', value: 55.4 },\n    { date: '2012-08-02T00:00:00.000Z', value: 54.4 },\n    { date: '2012-08-03T00:00:00.000Z', value: 53.7 },\n    { date: '2012-08-04T00:00:00.000Z', value: 54.1 },\n    { date: '2012-08-05T00:00:00.000Z', value: 57.8 },\n    { date: '2012-08-06T00:00:00.000Z', value: 58.2 },\n    { date: '2012-08-07T00:00:00.000Z', value: 58 },\n    { date: '2012-08-08T00:00:00.000Z', value: 57 },\n    { date: '2012-08-09T00:00:00.000Z', value: 55 },\n    { date: '2012-08-10T00:00:00.000Z', value: 54.8 },\n    { date: '2012-08-11T00:00:00.000Z', value: 53 },\n    { date: '2012-08-12T00:00:00.000Z', value: 52.5 },\n    { date: '2012-08-13T00:00:00.000Z', value: 53.3 },\n    { date: '2012-08-14T00:00:00.000Z', value: 53.9 },\n    { date: '2012-08-15T00:00:00.000Z', value: 56.2 },\n    { date: '2012-08-16T00:00:00.000Z', value: 57.1 },\n    { date: '2012-08-17T00:00:00.000Z', value: 55.3 },\n    { date: '2012-08-18T00:00:00.000Z', value: 56.2 },\n    { date: '2012-08-19T00:00:00.000Z', value: 54.3 },\n    { date: '2012-08-20T00:00:00.000Z', value: 53.1 },\n    { date: '2012-08-21T00:00:00.000Z', value: 53.4 },\n    { date: '2012-08-22T00:00:00.000Z', value: 54.5 },\n    { date: '2012-08-23T00:00:00.000Z', value: 55.7 },\n    { date: '2012-08-24T00:00:00.000Z', value: 54.8 },\n    { date: '2012-08-25T00:00:00.000Z', value: 53.8 },\n    { date: '2012-08-26T00:00:00.000Z', value: 56.5 },\n    { date: '2012-08-27T00:00:00.000Z', value: 58.3 },\n    { date: '2012-08-28T00:00:00.000Z', value: 58.7 },\n    { date: '2012-08-29T00:00:00.000Z', value: 57.5 },\n    { date: '2012-08-30T00:00:00.000Z', value: 55.9 },\n    { date: '2012-08-31T00:00:00.000Z', value: 55.4 },\n    { date: '2012-09-01T00:00:00.000Z', value: 55.7 },\n    { date: '2012-09-02T00:00:00.000Z', value: 53.1 },\n    { date: '2012-09-03T00:00:00.000Z', value: 53.5 },\n    { date: '2012-09-04T00:00:00.000Z', value: 52.5 },\n    { date: '2012-09-05T00:00:00.000Z', value: 54.5 },\n    { date: '2012-09-06T00:00:00.000Z', value: 56.3 },\n    { date: '2012-09-07T00:00:00.000Z', value: 56.4 },\n    { date: '2012-09-08T00:00:00.000Z', value: 56.5 },\n    { date: '2012-09-09T00:00:00.000Z', value: 56.4 },\n    { date: '2012-09-10T00:00:00.000Z', value: 55.4 },\n    { date: '2012-09-11T00:00:00.000Z', value: 56.2 },\n    { date: '2012-09-12T00:00:00.000Z', value: 55.7 },\n    { date: '2012-09-13T00:00:00.000Z', value: 54.3 },\n    { date: '2012-09-14T00:00:00.000Z', value: 55.2 },\n    { date: '2012-09-15T00:00:00.000Z', value: 54.3 },\n    { date: '2012-09-16T00:00:00.000Z', value: 52.9 },\n    { date: '2012-09-17T00:00:00.000Z', value: 54.8 },\n    { date: '2012-09-18T00:00:00.000Z', value: 54.8 },\n    { date: '2012-09-19T00:00:00.000Z', value: 56.8 },\n    { date: '2012-09-20T00:00:00.000Z', value: 55.4 },\n    { date: '2012-09-21T00:00:00.000Z', value: 55.8 },\n    { date: '2012-09-22T00:00:00.000Z', value: 55.9 },\n    { date: '2012-09-23T00:00:00.000Z', value: 52.8 },\n    { date: '2012-09-24T00:00:00.000Z', value: 54.5 },\n    { date: '2012-09-25T00:00:00.000Z', value: 53.3 },\n    { date: '2012-09-26T00:00:00.000Z', value: 53.6 },\n    { date: '2012-09-27T00:00:00.000Z', value: 52.1 },\n    { date: '2012-09-28T00:00:00.000Z', value: 52.6 },\n    { date: '2012-09-29T00:00:00.000Z', value: 53.9 },\n    { date: '2012-09-30T00:00:00.000Z', value: 55.1 },\n  ],\n  encode: {\n    x: (d) => new Date(d.date),\n    y: 'value',\n    shape: 'hvh',\n    color: 'value',\n    series: () => undefined,\n  },\n  scale: {\n    y: { nice: true },\n    x: { utc: true },\n    color: { type: 'threshold', domain: [53.55], range: ['black', 'red'] },\n  },\n  style: { gradient: 'y', lineWidth: 1.5, lineJoin: 'round' },\n  axis: { x: { title: 'date' } },\n});\n\nchart.render();\n",paraId:14,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  height: 180,\n  paddingTop: 0,\n  paddingLeft: 60,\n  paddingBottom: 0,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/antvdemo/assets/data/candle-sticks.json',\n  },\n  encode: {\n    x: 'time',\n    y: 'volumn',\n    color: (d) => {\n      const trend = Math.sign(d.start - d.end);\n      return trend > 0 ? '下跌' : trend === 0 ? '不变' : '上涨';\n    },\n  },\n  scale: {\n    x: { compare: (a, b) => new Date(a).getTime() - new Date(b).getTime() },\n    color: {\n      type: 'threshold',\n      domain: ['下跌', '不变', '上涨'],\n      range: ['#4daf4a', '#999999', '#e41a1c'],\n    },\n  },\n  axis: { x: false, y: { title: false } },\n});\nchart.render();\n",paraId:15,tocIndex:7}]},76383:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(8657);const t=[{value:"Time 比例尺是一种特殊的连续比例尺，专门用于处理时间序列数据。它将时间数据（Date 对象）映射到连续的数值范围。Time 比例尺的映射函数为 ",paraId:0},{value:"y = x.getTime() + b",paraId:0},{value:"，其中 ",paraId:0},{value:"x",paraId:0},{value:" 是时间值，",paraId:0},{value:"b",paraId:0},{value:" 是偏移量。",paraId:0},{value:"Time 比例尺属于连续比例尺的一种，主要用于处理时间序列数据的可视化。它能够：",paraId:1,tocIndex:0},{value:"自动处理时间数据的格式化和解析",paraId:2,tocIndex:0},{value:"提供灵活的时间刻度生成机制",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"必选",paraId:3,tocIndex:1},{value:"domain",paraId:3,tocIndex:1},{value:"设置数据的定义域范围",paraId:3,tocIndex:1},{value:"Date[]",paraId:3,tocIndex:1},{value:"输入数据的最大最小值范围",paraId:3,tocIndex:1},{value:"domainMin",paraId:3,tocIndex:1},{value:"设置数据的定义域最小值",paraId:3,tocIndex:1},{value:"Date",paraId:3,tocIndex:1},{value:"输入数据的最小值",paraId:3,tocIndex:1},{value:"domainMax",paraId:3,tocIndex:1},{value:"设置数据的定义域最大值",paraId:3,tocIndex:1},{value:"Date",paraId:3,tocIndex:1},{value:"输入数据的最大值",paraId:3,tocIndex:1},{value:"range",paraId:3,tocIndex:1},{value:"设置数据映射的值域范围",paraId:3,tocIndex:1},{value:"number[]",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"string[]",paraId:3,tocIndex:1},{value:"[0, 1]",paraId:3,tocIndex:1},{value:"rangeMin",paraId:3,tocIndex:1},{value:"设置数据映射的值域最小值",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"| ",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"0",paraId:3,tocIndex:1},{value:"rangeMax",paraId:3,tocIndex:1},{value:"设置数据映射的值域最大值",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"| ",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"1",paraId:3,tocIndex:1},{value:"unknown",paraId:3,tocIndex:1},{value:"对于 ",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"，",paraId:3,tocIndex:1},{value:"NaN",paraId:3,tocIndex:1},{value:"，",paraId:3,tocIndex:1},{value:"null",paraId:3,tocIndex:1},{value:" 空值，返回的数据",paraId:3,tocIndex:1},{value:"any",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"tickCount",paraId:3,tocIndex:1},{value:"设置推荐的 tick 生成数量，tickCount 只是建议值，不会完全按照这个值产生 tick",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"5",paraId:3,tocIndex:1},{value:"tickInterval",paraId:3,tocIndex:1},{value:"设置推荐的 tick 之间的间隔，tickInterval 优先级高于 tickCount",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"tickMethod",paraId:3,tocIndex:1},{value:"设置生成 tick 的方法，常用于自定义 tick",paraId:3,tocIndex:1},{value:"(min: number, max: number, count: number) => number[]",paraId:3,tocIndex:1},{value:"d3Time",paraId:3,tocIndex:1},{value:"round",paraId:3,tocIndex:1},{value:"输出值去四舍五入",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"clamp",paraId:3,tocIndex:1},{value:"将映射值限定在 range 的范围内",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"nice",paraId:3,tocIndex:1},{value:"扩展 domain 范围，让输出的 tick 展示得更加友好",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"mask",paraId:3,tocIndex:1},{value:"设置时间显示的格式，底层使用 ",paraId:3,tocIndex:1},{value:"fetcha",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"utc",paraId:3,tocIndex:1},{value:"是否使用 UTC 时间",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"interpolate",paraId:3,tocIndex:1},{value:"自定义差值函数",paraId:3,tocIndex:1},{value:"(a: number, b: number) => (t: number) => T",paraId:3,tocIndex:1},{value:"(a, b) => (t) => a * (1 - t) + b * t",paraId:3,tocIndex:1},{value:"type TickMethod = (min: number, max: number, count: number) => number[];\n",paraId:4,tocIndex:3},{value:"用于自定义时间刻度的生成方法，接收最小值、最大值和期望的刻度数量，返回一个时间数组。",paraId:5,tocIndex:3},{value:"type Interpolate = (a: number, b: number) => (t: number) => T;\n",paraId:6,tocIndex:4},{value:"用于自定义两个时间值之间的插值方法，默认使用线性插值。",paraId:7,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  {\n    time: '2015-11-19',\n    start: 8.18,\n    max: 8.33,\n    min: 7.98,\n    end: 8.32,\n    volumn: 1810,\n    money: 14723.56,\n  },\n  {\n    time: '2015-11-18',\n    start: 8.37,\n    max: 8.6,\n    min: 8.03,\n    end: 8.09,\n    volumn: 2790.37,\n    money: 23309.19,\n  },\n  {\n    time: '2015-11-17',\n    start: 8.7,\n    max: 8.78,\n    min: 8.32,\n    end: 8.37,\n    volumn: 3729.04,\n    money: 31709.71,\n  },\n  {\n    time: '2015-11-16',\n    start: 8.18,\n    max: 8.69,\n    min: 8.05,\n    end: 8.62,\n    volumn: 3095.44,\n    money: 26100.69,\n  },\n  {\n    time: '2015-11-13',\n    start: 8.01,\n    max: 8.75,\n    min: 7.97,\n    end: 8.41,\n    volumn: 5815.58,\n    money: 48562.37,\n  },\n  {\n    time: '2015-11-12',\n    start: 7.76,\n    max: 8.18,\n    min: 7.61,\n    end: 8.15,\n    volumn: 4742.6,\n    money: 37565.36,\n  },\n  {\n    time: '2015-11-11',\n    start: 7.55,\n    max: 7.81,\n    min: 7.49,\n    end: 7.8,\n    volumn: 3133.82,\n    money: 24065.42,\n  },\n  {\n    time: '2015-11-10',\n    start: 7.5,\n    max: 7.68,\n    min: 7.44,\n    end: 7.57,\n    volumn: 2670.35,\n    money: 20210.58,\n  },\n  {\n    time: '2015-11-09',\n    start: 7.65,\n    max: 7.66,\n    min: 7.3,\n    end: 7.58,\n    volumn: 2841.79,\n    money: 21344.36,\n  },\n  {\n    time: '2015-11-06',\n    start: 7.52,\n    max: 7.71,\n    min: 7.48,\n    end: 7.64,\n    volumn: 2725.44,\n    money: 20721.51,\n  },\n  {\n    time: '2015-11-05',\n    start: 7.48,\n    max: 7.57,\n    min: 7.29,\n    end: 7.48,\n    volumn: 3520.85,\n    money: 26140.83,\n  },\n  {\n    time: '2015-11-04',\n    start: 7.01,\n    max: 7.5,\n    min: 7.01,\n    end: 7.46,\n    volumn: 3591.47,\n    money: 26285.52,\n  },\n  {\n    time: '2015-11-03',\n    start: 7.1,\n    max: 7.17,\n    min: 6.82,\n    end: 7,\n    volumn: 2029.21,\n    money: 14202.33,\n  },\n  {\n    time: '2015-11-02',\n    start: 7.09,\n    max: 7.44,\n    min: 6.93,\n    end: 7.17,\n    volumn: 3191.31,\n    money: 23205.11,\n  },\n  {\n    time: '2015-10-30',\n    start: 6.98,\n    max: 7.27,\n    min: 6.84,\n    end: 7.18,\n    volumn: 3522.61,\n    money: 25083.44,\n  },\n  {\n    time: '2015-10-29',\n    start: 6.94,\n    max: 7.2,\n    min: 6.8,\n    end: 7.05,\n    volumn: 2752.27,\n    money: 19328.44,\n  },\n  {\n    time: '2015-10-28',\n    start: 7.01,\n    max: 7.14,\n    min: 6.8,\n    end: 6.85,\n    volumn: 2311.11,\n    money: 16137.32,\n  },\n  {\n    time: '2015-10-27',\n    start: 6.91,\n    max: 7.31,\n    min: 6.48,\n    end: 7.18,\n    volumn: 3172.9,\n    money: 21827.3,\n  },\n  {\n    time: '2015-10-26',\n    start: 6.9,\n    max: 7.08,\n    min: 6.87,\n    end: 6.95,\n    volumn: 2769.31,\n    money: 19337.44,\n  },\n  {\n    time: '2015-10-23',\n    start: 6.71,\n    max: 6.85,\n    min: 6.58,\n    end: 6.79,\n    volumn: 2483.18,\n    money: 16714.31,\n  },\n  {\n    time: '2015-10-22',\n    start: 6.38,\n    max: 6.67,\n    min: 6.34,\n    end: 6.65,\n    volumn: 2225.88,\n    money: 14465.56,\n  },\n];\n\nchart\n  .data(data)\n  .encode('x', 'time')\n  .encode('color', (d) => {\n    const trend = Math.sign(d.start - d.end);\n    return trend > 0 ? '下跌' : trend === 0 ? '不变' : '上涨';\n  })\n  .scale('x', {\n    compare: (a, b) => new Date(a).getTime() - new Date(b).getTime(),\n  })\n  .scale('color', {\n    domain: ['下跌', '不变', '上涨'],\n    range: ['#4daf4a', '#999999', '#e41a1c'],\n  });\n\nchart\n  .link()\n  .encode('y', ['min', 'max'])\n  .tooltip({\n    title: 'time',\n    items: [\n      { field: 'start', name: '开盘价' },\n      { field: 'end', name: '收盘价' },\n      { field: 'min', name: '最低价' },\n      { field: 'max', name: '最高价' },\n    ],\n  });\n\nchart\n  .interval()\n  .encode('y', ['start', 'end'])\n  .style('fillOpacity', 1)\n  .style('stroke', (d) => {\n    if (d.start === d.end) return '#999999';\n  })\n  .axis('y', {\n    title: false,\n  })\n  .tooltip({\n    title: 'time',\n    items: [\n      { field: 'start', name: '开盘价' },\n      { field: 'end', name: '收盘价' },\n      { field: 'min', name: '最低价' },\n      { field: 'max', name: '最高价' },\n    ],\n  });\n\nchart.render();\n",paraId:8,tocIndex:6},{value:"上面的示例展示了一个股票 K 线图的实现，它充分利用了时间比例尺的特性。以下是关键部分的解释：",paraId:9,tocIndex:7},{value:"每个数据点包含多个字段：",paraId:10,tocIndex:8},{value:"time",paraId:10,tocIndex:8},{value:"（日期）、",paraId:10,tocIndex:8},{value:"start",paraId:10,tocIndex:8},{value:"（开盘价）、",paraId:10,tocIndex:8},{value:"max",paraId:10,tocIndex:8},{value:"（最高价）、",paraId:10,tocIndex:8},{value:"min",paraId:10,tocIndex:8},{value:"（最低价）、",paraId:10,tocIndex:8},{value:"end",paraId:10,tocIndex:8},{value:"（收盘价）以及交易量和金额。数据按时间顺序排列，从 2015 年 10 月 22 日到 2015 年 11 月 19 日。",paraId:10,tocIndex:8},{value:"chart.scale('x', {\n  compare: (a, b) => new Date(a).getTime() - new Date(b).getTime(),\n});\n",paraId:11,tocIndex:9},{value:"这段代码的关键在于自定义的比较函数，它将字符串时间转换为时间戳进行比较，确保数据能够正确排序。这是时间比例尺的一个重要应用，使其能够处理字符串形式的日期数据。",paraId:12,tocIndex:9},{value:"chart.encode('color', (d) => {\n  const trend = Math.sign(d.start - d.end);\n  return trend > 0 ? '下跌' : trend === 0 ? '不变' : '上涨';\n});\n",paraId:13,tocIndex:10},{value:"这个函数根据开盘价与收盘价的关系来决定每个数据点的颜色：",paraId:14,tocIndex:10},{value:"当开盘价大于收盘价时（下跌），使用绿色",paraId:15,tocIndex:10},{value:"当开盘价等于收盘价时（不变），使用灰色",paraId:15,tocIndex:10},{value:"当开盘价小于收盘价时（上涨），使用红色",paraId:15,tocIndex:10},{value:"该示例使用了两个图形元素来构建完整的 K 线图：",paraId:16,tocIndex:11},{value:"chart.link()",paraId:17,tocIndex:11},{value:"：绘制从最低价到最高价的线段（K 线图的影线部分）",paraId:17,tocIndex:11},{value:"chart.interval()",paraId:17,tocIndex:11},{value:"：绘制从开盘价到收盘价的矩形（K 线图的实体部分）",paraId:17,tocIndex:11},{value:"两个图形元素共享相同的工具提示配置，当鼠标悬停时显示完整的价格信息。",paraId:18,tocIndex:11},{value:"这个示例展示了时间比例尺在金融数据可视化中的典型应用：",paraId:19,tocIndex:12},{value:"处理时序数据的排序和格式化",paraId:20,tocIndex:12},{value:"处理日期字符串到可视位置的转换",paraId:20,tocIndex:12},{value:"结合多个图形元素展示复杂的时间相关数据",paraId:20,tocIndex:12},{value:"通过这种方式，时间比例尺使得创建股票分析、经济趋势等金融数据可视化变得简单高效。",paraId:21,tocIndex:12}]},52685:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(15989);const t=[{value:"在数据可视化中，",paraId:0},{value:"状态（State）",paraId:0},{value:" 是实现交互反馈、高亮、选中等效果的核心机制。G2 提供了灵活且强大的状态系统，允许开发者为图表中的每个标记（mark）配置不同的状态样式，实现如鼠标悬停高亮、点击选中等多种交互场景，极大提升了图表的可用性和表现力。",paraId:0},{value:"状态样式的属性与 ",paraId:1},{value:"@antv/g",paraId:1},{value:" 支持的样式属性一致，常见如 ",paraId:1},{value:"fill",paraId:1},{value:"（填充色）、",paraId:1},{value:"stroke",paraId:1},{value:"（描边色）、",paraId:1},{value:"strokeWidth",paraId:1},{value:"（描边宽度）、",paraId:1},{value:"opacity",paraId:1},{value:"（透明度）等，详见",paraId:1},{value:"样式（Style）",paraId:2},{value:"。",paraId:1},{value:"鼠标悬停高亮数据",paraId:3,tocIndex:0},{value:"点击选中/取消选中数据",paraId:3,tocIndex:0},{value:"多维度交互反馈（如 hover+select 叠加）",paraId:3,tocIndex:0},{value:"结合动画实现状态切换的动态效果",paraId:3,tocIndex:0},{value:"重要提示：State 配置的传播机制",paraId:4,tocIndex:1},{value:"在 G2 中，state 配置的传播遵循以下规则：",paraId:5,tocIndex:1},{value:"当 view 下只有一个 mark 时，在 view 层级配置 state ",paraId:6,tocIndex:2},{value:"会生效",paraId:6,tocIndex:2},{value:"，state 会自动传播到子 mark：",paraId:6,tocIndex:2},{value:"// ✅ 单个 mark 时，view 层级的 state 配置会生效\nchart.options({\n  type: 'view',\n  state: { active: { backgroundFill: 'red', backgroundOpacity: 0.5 } }, // 会传播到子 mark\n  children: [\n    { type: 'line' }, // 会继承 view 的 state 配置\n  ],\n});\n",paraId:7,tocIndex:2},{value:"当 view 下有多个 mark 时，view 层级的 state ",paraId:8,tocIndex:3},{value:"不会生效",paraId:8,tocIndex:3},{value:"，需要在每个 mark 中单独配置：",paraId:8,tocIndex:3},{value:"// ❌ 多个 mark 时，view 层级的 state 不会传播\nchart.options({\n  type: 'view',\n  state: { active: { fill: 'red' } }, // 这个配置不会传播到子 mark\n  children: [{ type: 'line' }, { type: 'point' }],\n});\n\n// ✅ 正确：在每个 mark 层级单独配置 state\nchart.options({\n  type: 'view',\n  children: [\n    {\n      type: 'line',\n      state: { active: { stroke: 'red', strokeWidth: 2 } },\n    },\n    {\n      type: 'point',\n      state: { active: { fill: 'red', r: 6 } },\n    },\n  ],\n});\n",paraId:9,tocIndex:3},{value:"当直接使用 mark API（如 ",paraId:10,tocIndex:4},{value:"chart.line()",paraId:10,tocIndex:4},{value:"）时，state 配置在 mark 层级生效：",paraId:10,tocIndex:4},{value:"// ✅ 直接在 mark 层级配置\nchart.options({\n  type: 'line',\n  state: { active: { stroke: 'red', strokeWidth: 2 } },\n});\n",paraId:11,tocIndex:4},{value:"G2 支持在 mark 层级通过 ",paraId:12,tocIndex:5},{value:"state",paraId:12,tocIndex:5},{value:" 字段配置不同状态下的样式。常用状态包括：",paraId:12,tocIndex:5},{value:"状态名",paraId:13,tocIndex:5},{value:"说明",paraId:13,tocIndex:5},{value:"典型场景",paraId:13,tocIndex:5},{value:"active",paraId:13,tocIndex:5},{value:"高亮时的样式",paraId:13,tocIndex:5},{value:"鼠标悬停",paraId:13,tocIndex:5},{value:"inactive",paraId:13,tocIndex:5},{value:"非高亮时的样式",paraId:13,tocIndex:5},{value:"其他未被高亮的元素",paraId:13,tocIndex:5},{value:"selected",paraId:13,tocIndex:5},{value:"选中时的样式",paraId:13,tocIndex:5},{value:"鼠标点击",paraId:13,tocIndex:5},{value:"unselected",paraId:13,tocIndex:5},{value:"未选中时的样式",paraId:13,tocIndex:5},{value:"其他未被选中的元素",paraId:13,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nconst state = {\n  selected: { fill: 'red' },\n  active: { fill: 'green', stroke: 'black', lineWidth: 1 },\n};\nchart.options({\n  type: 'interval',\n  data: [\n    { type: 'A', value: 30 },\n    { type: 'B', value: 50 },\n    { type: 'C', value: 20 },\n  ],\n  encode: { x: 'type', y: 'value' },\n  state: {\n    active: { fill: 'red', stroke: 'blue', strokeWidth: 2 },\n    inactive: { fill: '#aaa' },\n    selected: { fill: 'orange', stroke: 'black', strokeWidth: 2 },\n    unselected: { fill: '#eee' },\n  },\n  interaction: { elementHighlight: true, elementSelect: true },\n});\nchart.render();\n",paraId:14,tocIndex:7},{value:"状态样式属性支持函数，根据数据动态返回样式：",paraId:15,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { type: 'A', value: 30 },\n    { type: 'B', value: 50 },\n    { type: 'C', value: 20 },\n  ],\n  encode: { x: 'type', y: 'value' },\n  state: {\n    active: {\n      fill: (d) => (d.value > 40 ? 'red' : 'blue'),\n    },\n  },\n  interaction: { elementHighlight: true },\n});\n\nchart.render();\n",paraId:16,tocIndex:8},{value:"G2 支持",paraId:17,tocIndex:9},{value:"多个状态同时生效",paraId:17,tocIndex:9},{value:"，当同一属性被多个状态配置时，会按照优先级选择最终生效的样式。",paraId:17,tocIndex:9},{value:"优先级如下：",paraId:18,tocIndex:9},{value:"selected:   3\nunselected: 3\nactive:     2\ninactive:   2\ndefault:    1\n",paraId:19,tocIndex:9},{value:"selected",paraId:20,tocIndex:9},{value:"/",paraId:20,tocIndex:9},{value:"unselected",paraId:20,tocIndex:9},{value:" 优先级高，常用于点击选中",paraId:20,tocIndex:9},{value:"active",paraId:20,tocIndex:9},{value:"/",paraId:20,tocIndex:9},{value:"inactive",paraId:20,tocIndex:9},{value:" 次之，常用于悬停高亮",paraId:20,tocIndex:9},{value:"default",paraId:20,tocIndex:9},{value:" 为默认样式",paraId:20,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  data: [\n    { letter: 'A', frequency: 0.08167 },\n    { letter: 'B', frequency: 0.01492 },\n    { letter: 'C', frequency: 0.02782 },\n  ],\n  encode: { x: 'letter', y: 'frequency' },\n  state: {\n    selected: { fill: 'red' },\n    active: { fill: 'green', stroke: 'black', lineWidth: 1 },\n  },\n  interaction: { elementHighlight: true, elementSelect: true },\n});\n\nchart.render();\n",paraId:21,tocIndex:9},{value:"悬停时，",paraId:22,tocIndex:9},{value:"active",paraId:22,tocIndex:9},{value:" 状态生效，显示绿色和黑色描边",paraId:22,tocIndex:9},{value:"点击后，",paraId:22,tocIndex:9},{value:"selected",paraId:22,tocIndex:9},{value:" 和 ",paraId:22,tocIndex:9},{value:"active",paraId:22,tocIndex:9},{value:" 同时生效，但 ",paraId:22,tocIndex:9},{value:"selected",paraId:22,tocIndex:9},{value:" 优先级更高，最终填充色为红色",paraId:22,tocIndex:9},{value:"G2 提供了丰富的交互，配合状态样式可实现多种交互效果：",paraId:23,tocIndex:10},{value:"名称",paraId:24,tocIndex:10},{value:"说明",paraId:24,tocIndex:10},{value:"典型状态",paraId:24,tocIndex:10},{value:"brushAxisHighlight",paraId:24,tocIndex:10},{value:"轴刷选高亮",paraId:24,tocIndex:10},{value:"active/inactive",paraId:24,tocIndex:10},{value:"brushHighlight",paraId:24,tocIndex:10},{value:"区域刷选高亮",paraId:24,tocIndex:10},{value:"active/inactive",paraId:24,tocIndex:10},{value:"brushXHighlight",paraId:24,tocIndex:10},{value:"X 轴刷选高亮",paraId:24,tocIndex:10},{value:"active/inactive",paraId:24,tocIndex:10},{value:"brushYHighlight",paraId:24,tocIndex:10},{value:"Y 轴刷选高亮",paraId:24,tocIndex:10},{value:"active/inactive",paraId:24,tocIndex:10},{value:"elementHighlight",paraId:24,tocIndex:10},{value:"悬停高亮",paraId:24,tocIndex:10},{value:"active/inactive",paraId:24,tocIndex:10},{value:"elementHighlightByColor",paraId:24,tocIndex:10},{value:"按颜色高亮",paraId:24,tocIndex:10},{value:"active/inactive",paraId:24,tocIndex:10},{value:"elementHighlightByX",paraId:24,tocIndex:10},{value:"按 X 高亮",paraId:24,tocIndex:10},{value:"active/inactive",paraId:24,tocIndex:10},{value:"legendHighlight",paraId:24,tocIndex:10},{value:"图例高亮",paraId:24,tocIndex:10},{value:"active/inactive",paraId:24,tocIndex:10},{value:"elementSelect",paraId:24,tocIndex:10},{value:"点击选中",paraId:24,tocIndex:10},{value:"selected/unselected",paraId:24,tocIndex:10},{value:"elementSelectByColor",paraId:24,tocIndex:10},{value:"按颜色选中",paraId:24,tocIndex:10},{value:"selected/unselected",paraId:24,tocIndex:10},{value:"elementSelectByX",paraId:24,tocIndex:10},{value:"按 X 选中",paraId:24,tocIndex:10},{value:"selected/unselected",paraId:24,tocIndex:10},{value:"通过 ",paraId:25,tocIndex:12},{value:"elementHighlight",paraId:25,tocIndex:12},{value:" 交互插件，配合 ",paraId:25,tocIndex:12},{value:"active",paraId:25,tocIndex:12},{value:" 和 ",paraId:25,tocIndex:12},{value:"inactive",paraId:25,tocIndex:12},{value:" 状态样式，实现鼠标悬停高亮效果：",paraId:25,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { letter: 'A', frequency: 0.08167 },\n    { letter: 'B', frequency: 0.01492 },\n    { letter: 'C', frequency: 0.02782 },\n  ],\n  encode: { x: 'letter', y: 'frequency' },\n  state: {\n    active: { fill: 'red' },\n    inactive: { fill: '#aaa' },\n  },\n  interaction: { elementHighlight: true },\n});\n\nchart.render();\n",paraId:26,tocIndex:12},{value:"效果说明",paraId:27,tocIndex:12},{value:"：",paraId:27,tocIndex:12},{value:"鼠标悬停在某个柱子上时，该柱子应用 ",paraId:28,tocIndex:12},{value:"active",paraId:28,tocIndex:12},{value:" 样式，其他柱子应用 ",paraId:28,tocIndex:12},{value:"inactive",paraId:28,tocIndex:12},{value:" 样式。",paraId:28,tocIndex:12},{value:"通过 ",paraId:29,tocIndex:13},{value:"elementSelect",paraId:29,tocIndex:13},{value:" 交互插件，配合 ",paraId:29,tocIndex:13},{value:"selected",paraId:29,tocIndex:13},{value:" 和 ",paraId:29,tocIndex:13},{value:"unselected",paraId:29,tocIndex:13},{value:" 状态样式，实现点击选中效果：",paraId:29,tocIndex:13},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  data: [\n    { letter: 'A', frequency: 0.08167 },\n    { letter: 'B', frequency: 0.01492 },\n    { letter: 'C', frequency: 0.02782 },\n  ],\n  encode: { x: 'letter', y: 'frequency' },\n  state: {\n    selected: { fill: 'orange', stroke: 'black', strokeWidth: 2 },\n    unselected: { fill: '#eee' },\n  },\n  interaction: { elementSelect: true },\n});\nchart.render();\n",paraId:30,tocIndex:13},{value:"效果说明",paraId:31,tocIndex:13},{value:"：",paraId:31,tocIndex:13},{value:"点击某个柱子，该柱子应用 ",paraId:32,tocIndex:13},{value:"selected",paraId:32,tocIndex:13},{value:" 样式，其他柱子应用 ",paraId:32,tocIndex:13},{value:"unselected",paraId:32,tocIndex:13},{value:" 样式。",paraId:32,tocIndex:13},{value:"支持同时高亮与选中，常用于仪表盘、BI 报表等场景：",paraId:33,tocIndex:14},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { type: 'A', value: 30 },\n    { type: 'B', value: 50 },\n    { type: 'C', value: 20 },\n  ],\n  encode: { x: 'type', y: 'value' },\n  state: {\n    active: { fill: 'yellow' },\n    inactive: { fill: '#eee' },\n    selected: { fill: 'orange', stroke: 'black', strokeWidth: 2 },\n    unselected: { fill: '#ccc' },\n  },\n  interaction: { elementHighlight: true, elementSelect: true },\n});\n\nchart.render();\n",paraId:34,tocIndex:14},{value:"状态切换时可结合动画（如淡入淡出、缩放等），提升交互体验。详见",paraId:35,tocIndex:15},{value:"动画系统",paraId:36,tocIndex:15},{value:"。",paraId:35,tocIndex:15},{value:"chart.options({\n  type: 'interval',\n  state: {\n    active: {\n      fill: 'red',\n      opacity: (d) => (d.value > 40 ? 1 : 0.5),\n    },\n  },\n  // 其他配置...\n});\n",paraId:37,tocIndex:15},{value:"支持将样式属性设置为函数，根据数据动态返回样式：",paraId:38,tocIndex:17},{value:"chart.options({\n  type: 'interval',\n  state: {\n    active: {\n      fill: (d) => (d.value > 40 ? 'red' : 'blue'),\n    },\n  },\n  // 其他配置...\n});\n",paraId:39,tocIndex:17},{value:"状态样式未生效？",paraId:40,tocIndex:18},{value:"\n检查是否正确配置了交互插件（如 ",paraId:40,tocIndex:18},{value:"elementHighlight",paraId:40,tocIndex:18},{value:"、",paraId:40,tocIndex:18},{value:"elementSelect",paraId:40,tocIndex:18},{value:"），并确保 ",paraId:40,tocIndex:18},{value:"state",paraId:40,tocIndex:18},{value:" 配置正确。",paraId:40,tocIndex:18},{value:"多个状态冲突？",paraId:41,tocIndex:18},{value:"\n合理利用优先级机制，避免同一属性在多个高优先级状态下重复配置。",paraId:41,tocIndex:18},{value:"状态样式与动画冲突？",paraId:42,tocIndex:18},{value:"\n注意状态切换时动画的配置，避免样式和动画叠加导致的视觉异常。",paraId:42,tocIndex:18}]},58620:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(85192);const t=[{value:"G2 中",paraId:0},{value:"样式（Style）",paraId:0},{value:" 主要用来控制标记、视图和组件的视觉样式。",paraId:0},{value:"标记可以设置自己的样式，也可以设置视图的样式：",paraId:1,tocIndex:0},{value:"({\n  type: 'interval',\n  style: {\n    // 自己的样式\n    stroke: 'black',\n    strokeWidth: 2,\n  },\n  viewStyle: {\n    // 视图的样式\n    viewFill: 'red',\n    contentFill: 'yellow',\n  },\n});\n",paraId:2,tocIndex:0},{value:"// API\n// 第一种方式\nchart\n  .interval()\n  .style('stroke', 'black')\n  .style('strokeWidth', 2)\n  .viewStyle('viewFill', 'red')\n  .viewStyle('contentFill', 'yellow');\n\n// 第二种方式\nchart\n  .interval()\n  .style({\n    stroke: 'black',\n    strokeWidth: 2,\n  })\n  .viewStyle({\n    viewFill: 'red',\n    contentFill: 'yellow',\n  });\n",paraId:3,tocIndex:0},{value:"视图可以设置自己的样式：",paraId:4,tocIndex:0},{value:"({\n  type: 'view',\n  style: {\n    viewFill: 'red',\n    contentFill: 'yellow',\n  },\n});\n",paraId:5,tocIndex:0},{value:"// API\n// 第一种方式\nchart.style('viewFill', 'red').style('contentFill', 'yellow');\n\n// 第二种方式\nchart.style({\n  viewFill: 'red',\n  contentFill: 'yellow',\n});\n",paraId:6,tocIndex:0},{value:"所有的图表组件也可以设置样式，例如图例：",paraId:7,tocIndex:0},{value:"({\n  type: 'interval',\n  legend: {\n    color: {\n      // 图例项图标样式（分类图例）\n      itemMarkerFill: '#5B8FF9',\n      itemMarkerStroke: '#333',\n      itemMarkerStrokeOpacity: 0.8,\n      \n      // 图例项标签样式（分类图例）\n      itemLabelFontSize: 12,\n      itemLabelFill: '#666',\n      itemLabelFontFamily: 'sans-serif',\n    },\n  },\n});\n",paraId:8,tocIndex:0},{value:"标记的视觉属性除了可以通过 ",paraId:9,tocIndex:1},{value:"mark.encode",paraId:9,tocIndex:1},{value:" 去设置之外，还可以通过 ",paraId:9,tocIndex:1},{value:"mark.style",paraId:9,tocIndex:1},{value:" 去设置。两者的区别主要有两点：",paraId:9,tocIndex:1},{value:"mark.encode",paraId:10,tocIndex:1},{value:" 设置的通道会特殊一点，要么是该标记独有的，比如 image 的 src 通道；要么就是有一些特殊逻辑，比如 x 通道会影响 x 方向坐标轴的生成。",paraId:10,tocIndex:1},{value:"mark.encode",paraId:10,tocIndex:1},{value:" 更倾向于去设置和数据有关的通道，但是 ",paraId:10,tocIndex:1},{value:"mark.style",paraId:10,tocIndex:1},{value:" 更倾向于去设置和数据无关的通道。虽然 ",paraId:10,tocIndex:1},{value:"mark.style",paraId:10,tocIndex:1},{value:" 也同样支持回调去设置数据驱动的通道。",paraId:10,tocIndex:1},{value:"对于 ",paraId:11,tocIndex:2},{value:"shape",paraId:11,tocIndex:2},{value:" 属性，可以通过 ",paraId:11,tocIndex:2},{value:"encode.shape",paraId:11,tocIndex:2},{value:" 或 ",paraId:11,tocIndex:2},{value:"style.shape",paraId:11,tocIndex:2},{value:" 两种方式进行配置，它们的区别在于：",paraId:11,tocIndex:2},{value:"通过 ",paraId:12,tocIndex:2},{value:"encode.shape",paraId:12,tocIndex:2},{value:" 配置（推荐）",paraId:12,tocIndex:2},{value:"：",paraId:12,tocIndex:2},{value:"支持数据驱动，可以根据数据动态选择不同的形状",paraId:13,tocIndex:2},{value:"会参与比例尺的创建，可以通过图例进行交互",paraId:13,tocIndex:2},{value:"优先级更高，会覆盖 ",paraId:13,tocIndex:2},{value:"style.shape",paraId:13,tocIndex:2},{value:" 的设置",paraId:13,tocIndex:2},{value:"通过 ",paraId:14,tocIndex:2},{value:"style.shape",paraId:14,tocIndex:2},{value:" 配置",paraId:14,tocIndex:2},{value:"：",paraId:14,tocIndex:2},{value:"支持静态值或回调函数，可以实现数据驱动",paraId:15,tocIndex:2},{value:"不参与比例尺创建，不会生成图例",paraId:15,tocIndex:2},{value:"当没有设置 ",paraId:15,tocIndex:2},{value:"encode.shape",paraId:15,tocIndex:2},{value:" 时生效",paraId:15,tocIndex:2},{value:"配置空心柱状图",paraId:16,tocIndex:3},{value:"：",paraId:16,tocIndex:3},{value:"// 方式一：通过 encode.shape\nchart.options({\n  type: 'interval',\n  encode: {\n    x: 'category',\n    y: 'value',\n    shape: 'hollow', // 配置为空心矩形\n  },\n});\n\n// 方式二：通过 style.shape\nchart.options({\n  type: 'interval',\n  encode: {\n    x: 'category',\n    y: 'value',\n  },\n  style: {\n    shape: 'hollow', // 配置为空心矩形\n  },\n});\n",paraId:17,tocIndex:3},{value:"不同标记支持的形状类型：",paraId:18,tocIndex:3},{value:"interval",paraId:19,tocIndex:3},{value:"：",paraId:19,tocIndex:3},{value:"rect",paraId:19,tocIndex:3},{value:"（实心矩形）、",paraId:19,tocIndex:3},{value:"hollow",paraId:19,tocIndex:3},{value:"（空心矩形）、",paraId:19,tocIndex:3},{value:"funnel",paraId:19,tocIndex:3},{value:"（漏斗形）、",paraId:19,tocIndex:3},{value:"pyramid",paraId:19,tocIndex:3},{value:"（金字塔形）",paraId:19,tocIndex:3},{value:"point",paraId:19,tocIndex:3},{value:"：",paraId:19,tocIndex:3},{value:"hollow",paraId:19,tocIndex:3},{value:"（空心圆）、",paraId:19,tocIndex:3},{value:"point",paraId:19,tocIndex:3},{value:"（实心圆）、",paraId:19,tocIndex:3},{value:"hollowSquare",paraId:19,tocIndex:3},{value:"（空心方形）等",paraId:19,tocIndex:3},{value:"rect",paraId:19,tocIndex:3},{value:"：",paraId:19,tocIndex:3},{value:"rect",paraId:19,tocIndex:3},{value:"（实心矩形）、",paraId:19,tocIndex:3},{value:"hollow",paraId:19,tocIndex:3},{value:"（空心矩形）",paraId:19,tocIndex:3},{value:"line",paraId:19,tocIndex:3},{value:"：",paraId:19,tocIndex:3},{value:"line",paraId:19,tocIndex:3},{value:"（直线）、",paraId:19,tocIndex:3},{value:"smooth",paraId:19,tocIndex:3},{value:"（平滑曲线）、",paraId:19,tocIndex:3},{value:"vh",paraId:19,tocIndex:3},{value:"（阶梯折线，先竖线后横线连接）等",paraId:19,tocIndex:3},{value:"下面是一个完整的空心柱状图示例：",paraId:20,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    shape: 'hollow', // 配置为空心矩形\n  },\n  style: {\n    stroke: '#1890ff', // 设置描边颜色\n    strokeWidth: 2, // 设置描边宽度\n  },\n});\n\nchart.render();\n",paraId:21,tocIndex:3},{value:"还可以通过 ",paraId:22,tocIndex:3},{value:"style.shape",paraId:22,tocIndex:3},{value:" 配置实现同样的效果：",paraId:22,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre',\n    y: 'sold',\n  },\n  style: {\n    shape: 'hollow', // 通过 style 配置为空心矩形\n    stroke: '#52c41a', // 设置描边颜色\n    strokeWidth: 2, // 设置描边宽度\n  },\n});\n\nchart.render();\n",paraId:23,tocIndex:3},{value:"而各个区域的样式可以通过 ",paraId:24,tocIndex:4},{value:"${name}${Style}",paraId:24,tocIndex:4},{value:" 的形式去设置，其中 ",paraId:24,tocIndex:4},{value:"Style",paraId:24,tocIndex:4},{value:" 是 G 的矩形支持的所有样式，比如 ",paraId:24,tocIndex:4},{value:"fill",paraId:24,tocIndex:4},{value:"，",paraId:24,tocIndex:4},{value:"stroke",paraId:24,tocIndex:4},{value:" 等，注意首字母要大写，变成驼峰形式。",paraId:24,tocIndex:4},{value:"view${Style}",paraId:25,tocIndex:4},{value:" - 设置视图区域的样式",paraId:25,tocIndex:4},{value:"plot${Style}",paraId:25,tocIndex:4},{value:" - 设置绘制区域的样式",paraId:25,tocIndex:4},{value:"main${Style}",paraId:25,tocIndex:4},{value:" - 设置主区域的样式",paraId:25,tocIndex:4},{value:"content${Style}",paraId:25,tocIndex:4},{value:" - 设置内容区域的样式",paraId:25,tocIndex:4},{value:"比如下图中给各个区域染色：",paraId:26,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  height: 280,\n  inset: 10,\n  marginTop: 30,\n  marginLeft: 40,\n  marginBottom: 10,\n  marginRight: 20,\n  style: {\n    // 设置视图样式\n    viewFill: '#4e79a7',\n    plotFill: '#f28e2c',\n    mainFill: '#e15759',\n    contentFill: '#76b7b2',\n  },\n  children: [\n    {\n      type: 'point',\n      data: {\n        type: 'fetch',\n        value: 'https://assets.antv.antgroup.com/g2/commits.json',\n      },\n      encode: {\n        x: (d) => new Date(d.time).getUTCHours(),\n        y: (d) => new Date(d.time).getUTCDay(),\n        size: 'count',\n        shape: 'point',\n      },\n      transform: [{ type: 'group', size: 'sum' }, { type: 'sortY' }],\n      scale: { y: { type: 'point' } },\n      style: { shape: 'point', fill: '#59a14f' },\n      axis: {\n        x: { title: 'time (hours)', tickCount: 24 },\n        y: { title: 'time (day)', grid: true },\n      },\n      legend: false,\n    },\n  ],\n});\n\nchart.render();\n",paraId:27,tocIndex:4},{value:"组件样式是指图表中各种组件（如坐标轴、图例、标签、标题等）的视觉样式配置。每个组件都提供了丰富的样式配置选项，支持对组件的各个子元素进行精细化的样式控制。",paraId:28,tocIndex:5},{value:"坐标轴由标题、轴线、刻度、刻度值标签和网格线等多个元素组成，每个元素都可以单独配置样式：",paraId:29,tocIndex:6},{value:"({\n  type: 'interval',\n  axis: {\n    x: {\n      // 标题样式\n      title: 'X轴标题',\n      titleFontSize: 16,\n      titleFontFamily: 'Arial',\n      titleFontWeight: 'bold',\n      titleFill: '#333',\n      \n      // 轴线样式\n      line: true,\n      lineStroke: '#666',\n      lineLineWidth: 2,\n      \n      // 刻度样式\n      tick: true,\n      tickStroke: '#999',\n      tickLineWidth: 1,\n      \n      // 刻度值标签样式\n      labelFontSize: 12,\n      labelFill: '#666',\n      labelFontFamily: 'sans-serif',\n      \n      // 网格线样式\n      grid: true,\n      gridStroke: '#e6e6e6',\n      gridStrokeOpacity: 0.7,\n    },\n    y: {\n      // Y轴样式配置类似...\n    },\n  },\n});\n",paraId:30,tocIndex:6},{value:"更多有关坐标轴样式的配置见",paraId:31,tocIndex:6},{value:"坐标轴",paraId:32,tocIndex:6},{value:"。",paraId:31,tocIndex:6},{value:"图例支持分类图例和连续图例两种类型，都可以配置丰富的样式属性：",paraId:33,tocIndex:7},{value:"({\n  type: 'interval',\n  legend: {\n    color: {\n      // 标题样式\n      title: '图例标题',\n      titleFontSize: 14,\n      titleFontFamily: 'Arial',\n      titleFill: '#333',\n      titleFontWeight: 'bold',\n      \n      // 图例项图标样式（分类图例）\n      itemMarkerFill: '#5B8FF9',\n      itemMarkerStroke: '#333',\n      itemMarkerStrokeOpacity: 0.8,\n      \n      // 图例项标签样式（分类图例）\n      itemLabelFontSize: 12,\n      itemLabelFill: '#666',\n      itemLabelFontFamily: 'sans-serif',\n      \n      // 连续图例样式\n      ribbon: {\n        fill: '#5B8FF9',\n        stroke: '#333',\n      },\n    },\n  },\n});\n",paraId:34,tocIndex:7},{value:"更多有关图例样式的配置见",paraId:35,tocIndex:7},{value:"图例",paraId:36,tocIndex:7},{value:"。",paraId:35,tocIndex:7},{value:"数据标签支持丰富的文字样式配置：",paraId:37,tocIndex:8},{value:"({\n  type: 'interval',\n  labels: [\n    {\n      text: 'value',\n      style: {\n        fontSize: 12,\n        fontFamily: 'Arial',\n        fontWeight: 'normal',\n        fill: '#333',\n        stroke: '#fff',\n        strokeOpacity: 0.8,\n        textAlign: 'center',\n        textBaseline: 'middle',\n        shadowColor: 'rgba(0,0,0,0.3)',\n        shadowBlur: 3,\n        dx: 0,\n        dy: -10,\n      },\n    },\n  ],\n});\n",paraId:38,tocIndex:8},{value:"更多有关数据标签样式的配置见",paraId:39,tocIndex:8},{value:"数据标签",paraId:40,tocIndex:8},{value:"。",paraId:39,tocIndex:8},{value:"图表标题包括主标题和副标题，都支持详细的样式配置：",paraId:41,tocIndex:9},{value:"({\n  type: 'interval',\n  title: {\n    // 主标题\n    title: '图表主标题',\n    titleFontSize: 20,\n    titleFontFamily: 'Arial',\n    titleFontWeight: 'bold',\n    titleFill: '#333',\n    titleStroke: '#000',\n    titleLineWidth: 1,\n    \n    // 副标题\n    subtitle: '图表副标题',\n    subtitleFontSize: 14,\n    subtitleFontFamily: 'Arial',\n    subtitleFontWeight: 'normal',\n    subtitleFill: '#666',\n    \n    // 布局配置\n    align: 'center',\n    spacing: 8,\n  },\n});\n",paraId:42,tocIndex:9},{value:"更多有关标题样式的配置见",paraId:43,tocIndex:9},{value:"标题",paraId:44,tocIndex:9},{value:"。",paraId:43,tocIndex:9},{value:"提示信息的样式主要通过交互配置来定制，支持CSS样式、标记点样式和辅助线样式：",paraId:45,tocIndex:10},{value:"({\n  type: 'interval',\n  tooltip: {\n    title: 'name',\n    items: ['value'],\n  },\n  interaction: {\n    tooltip: {\n      // CSS样式配置\n      css: {\n        '.g2-tooltip': {\n          background: 'rgba(0,0,0,0.8)',\n          color: '#fff',\n          'font-size': '12px',\n          padding: '8px 12px',\n          'border-radius': '4px',\n          border: '1px solid #ccc',\n        },\n        '.g2-tooltip-title': {\n          'font-weight': 'bold',\n          'font-size': '14px',\n        },\n        '.g2-tooltip-list-item-value': {\n          'font-weight': 'normal',\n        },\n      },\n      \n      // 标记点样式\n      marker: true,\n      markerFill: '#5B8FF9',\n      markerStroke: '#fff',\n      markerLineWidth: 2,\n      \n      // 辅助线样式\n      crosshairs: true,\n      crosshairsStroke: '#999',\n      crosshairsLineDash: [4, 4],\n    },\n  },\n});\n",paraId:46,tocIndex:10},{value:"更多有关提示信息样式的配置见",paraId:47,tocIndex:10},{value:"提示信息",paraId:48,tocIndex:10},{value:"。",paraId:47,tocIndex:10},{value:"所有组件的样式配置都遵循相同的命名规范：",paraId:49,tocIndex:11},{value:"文字样式",paraId:50,tocIndex:11},{value:"：",paraId:50,tocIndex:11},{value:"fontSize",paraId:50,tocIndex:11},{value:"、",paraId:50,tocIndex:11},{value:"fontFamily",paraId:50,tocIndex:11},{value:"、",paraId:50,tocIndex:11},{value:"fontWeight",paraId:50,tocIndex:11},{value:"、",paraId:50,tocIndex:11},{value:"fill",paraId:50,tocIndex:11},{value:"、",paraId:50,tocIndex:11},{value:"stroke",paraId:50,tocIndex:11},{value:" 等",paraId:50,tocIndex:11},{value:"阴影样式",paraId:50,tocIndex:11},{value:"：",paraId:50,tocIndex:11},{value:"shadowColor",paraId:50,tocIndex:11},{value:"、",paraId:50,tocIndex:11},{value:"shadowBlur",paraId:50,tocIndex:11},{value:"、",paraId:50,tocIndex:11},{value:"shadowOffsetX",paraId:50,tocIndex:11},{value:"、",paraId:50,tocIndex:11},{value:"shadowOffsetY",paraId:50,tocIndex:11},{value:"透明度",paraId:50,tocIndex:11},{value:"：",paraId:50,tocIndex:11},{value:"opacity",paraId:50,tocIndex:11},{value:"、",paraId:50,tocIndex:11},{value:"fillOpacity",paraId:50,tocIndex:11},{value:"、",paraId:50,tocIndex:11},{value:"strokeOpacity",paraId:50,tocIndex:11},{value:"位置偏移",paraId:50,tocIndex:11},{value:"：",paraId:50,tocIndex:11},{value:"dx",paraId:50,tocIndex:11},{value:"、",paraId:50,tocIndex:11},{value:"dy",paraId:50,tocIndex:11},{value:"鼠标交互",paraId:50,tocIndex:11},{value:"：",paraId:50,tocIndex:11},{value:"cursor",paraId:50,tocIndex:11},{value:"这种统一的命名规范使得在不同组件之间配置样式时保持一致的体验。",paraId:51,tocIndex:11},{value:"G2 使用 ",paraId:52,tocIndex:12},{value:"G",paraId:52,tocIndex:12},{value:" 作为绘图引擎，一些图形的样式配置，如折线图的",paraId:52,tocIndex:12},{value:"line.style",paraId:52,tocIndex:12},{value:"，柱状图的",paraId:52,tocIndex:12},{value:"interval.style",paraId:52,tocIndex:12},{value:"等，还有部分组件的样式配置，如",paraId:52,tocIndex:12},{value:"label.style",paraId:52,tocIndex:12},{value:"， ",paraId:52,tocIndex:12},{value:"axis.line${style}",paraId:52,tocIndex:12},{value:"等，都是直接透传 G 的绘图属性。",paraId:52,tocIndex:12},{value:"为了方便用户使用，在这里对 G2 常用的绘图属性进行简单的介绍：",paraId:53,tocIndex:12},{value:"属性",paraId:54,tocIndex:13},{value:"描述",paraId:54,tocIndex:13},{value:"类型",paraId:54,tocIndex:13},{value:"默认值",paraId:54,tocIndex:13},{value:"必选",paraId:54,tocIndex:13},{value:"fill",paraId:54,tocIndex:13},{value:"图形的填充色",paraId:54,tocIndex:13},{value:"string",paraId:54,tocIndex:13},{value:"fillOpacity",paraId:54,tocIndex:13},{value:"图形的填充透明度",paraId:54,tocIndex:13},{value:"number",paraId:54,tocIndex:13},{value:"stroke",paraId:54,tocIndex:13},{value:"图形的描边",paraId:54,tocIndex:13},{value:"string",paraId:54,tocIndex:13},{value:"strokeOpacity",paraId:54,tocIndex:13},{value:"描边透明度",paraId:54,tocIndex:13},{value:"number",paraId:54,tocIndex:13},{value:"lineWidth",paraId:54,tocIndex:13},{value:"描边宽度",paraId:54,tocIndex:13},{value:"number",paraId:54,tocIndex:13},{value:"lineDash",paraId:54,tocIndex:13},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:54,tocIndex:13},{value:"[number,number]",paraId:54,tocIndex:13},{value:"opacity",paraId:54,tocIndex:13},{value:"图形的整体透明度",paraId:54,tocIndex:13},{value:"number",paraId:54,tocIndex:13},{value:"shadowColor",paraId:54,tocIndex:13},{value:"图形阴影颜色",paraId:54,tocIndex:13},{value:"string",paraId:54,tocIndex:13},{value:"shadowBlur",paraId:54,tocIndex:13},{value:"图形阴影的高斯模糊系数",paraId:54,tocIndex:13},{value:"number",paraId:54,tocIndex:13},{value:"shadowOffsetX",paraId:54,tocIndex:13},{value:"设置阴影距图形的水平距离",paraId:54,tocIndex:13},{value:"number",paraId:54,tocIndex:13},{value:"shadowOffsetY",paraId:54,tocIndex:13},{value:"设置阴影距图形的垂直距离",paraId:54,tocIndex:13},{value:"number",paraId:54,tocIndex:13},{value:"cursor",paraId:54,tocIndex:13},{value:"鼠标样式。同 css 的鼠标样式",paraId:54,tocIndex:13},{value:"string",paraId:54,tocIndex:13},{value:"default",paraId:54,tocIndex:13},{value:"接下来，试试使用全量图形样式配置基础柱状图的 ",paraId:55,tocIndex:13},{value:"interval",paraId:55,tocIndex:13},{value:" 的图形样式，在下面的代码编辑器里修改属性试试效果：",paraId:55,tocIndex:13},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', height: 350 });\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 30 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold' },\n  style: {\n    fill: 'skyblue',\n    fillOpacity: 0.5,\n    stroke: 'black',\n    lineWidth: 1,\n    lineDash: [4, 5],\n    strokeOpacity: 0.7,\n    opacity: 0.9,\n    shadowColor: 'black',\n    shadowBlur: 10,\n    shadowOffsetX: 5,\n    shadowOffsetY: 5,\n    cursor: 'pointer',\n  },\n});\n\nchart.render();\n",paraId:56,tocIndex:13},{value:"属性名",paraId:57,tocIndex:14},{value:"介绍",paraId:57,tocIndex:14},{value:"类型",paraId:57,tocIndex:14},{value:"默认值",paraId:57,tocIndex:14},{value:"必选",paraId:57,tocIndex:14},{value:"stroke",paraId:57,tocIndex:14},{value:"线的颜色",paraId:57,tocIndex:14},{value:"string",paraId:57,tocIndex:14},{value:"strokeOpacity",paraId:57,tocIndex:14},{value:"线的透明度",paraId:57,tocIndex:14},{value:"number",paraId:57,tocIndex:14},{value:"lineWidth",paraId:57,tocIndex:14},{value:"描边宽度",paraId:57,tocIndex:14},{value:"number",paraId:57,tocIndex:14},{value:"lineDash",paraId:57,tocIndex:14},{value:"虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:57,tocIndex:14},{value:"[number,number]",paraId:57,tocIndex:14},{value:"opacity",paraId:57,tocIndex:14},{value:"整体透明度",paraId:57,tocIndex:14},{value:"number",paraId:57,tocIndex:14},{value:"shadowColor",paraId:57,tocIndex:14},{value:"阴影颜色",paraId:57,tocIndex:14},{value:"string",paraId:57,tocIndex:14},{value:"shadowBlur",paraId:57,tocIndex:14},{value:"高斯模糊系数",paraId:57,tocIndex:14},{value:"number",paraId:57,tocIndex:14},{value:"shadowOffsetX",paraId:57,tocIndex:14},{value:"设置阴影距图形的水平距离",paraId:57,tocIndex:14},{value:"number",paraId:57,tocIndex:14},{value:"shadowOffsetY",paraId:57,tocIndex:14},{value:"设置阴影距图形的垂直距离",paraId:57,tocIndex:14},{value:"number",paraId:57,tocIndex:14},{value:"cursor",paraId:57,tocIndex:14},{value:"鼠标样式。同 css 的鼠标样式",paraId:57,tocIndex:14},{value:"string",paraId:57,tocIndex:14},{value:"default",paraId:57,tocIndex:14},{value:"接下来，试试使用全量线的样式配置基础折线图的 ",paraId:58,tocIndex:14},{value:"line",paraId:58,tocIndex:14},{value:" 的样式，在下面的代码编辑器里修改属性试试效果：",paraId:58,tocIndex:14},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', height: 350 });\n\nchart.options({\n  type: 'line',\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: { x: { range: [0, 1] }, y: { domainMin: 0, nice: true } },\n  style: {\n    stroke: 'skyblue',\n    strokeOpacity: 0.9,\n    lineWidth: 4,\n    lineDash: [4, 8],\n    opacity: 0.9,\n    shadowColor: '#d3d3d3',\n    shadowBlur: 10,\n    shadowOffsetX: 10,\n    shadowOffsetY: 10,\n    cursor: 'pointer',\n  },\n});\n\nchart.render();\n",paraId:59,tocIndex:14},{value:"类似的，我们也可以以相同的方式来配置坐标轴的网格线。",paraId:60,tocIndex:14},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: { x: { range: [0, 1] }, y: { domainMin: 0, nice: true } },\n  axis: {\n    y: {\n      grid: true,\n      gridStroke: 'red',\n      gridStrokeOpacity: 0.5,\n      gridLineWidth: 2,\n      gridLineDash: [2, 4],\n    },\n  },\n});\n\nchart.render();\n",paraId:61,tocIndex:14},{value:"属性名",paraId:62,tocIndex:15},{value:"介绍",paraId:62,tocIndex:15},{value:"类型",paraId:62,tocIndex:15},{value:"默认值",paraId:62,tocIndex:15},{value:"必选",paraId:62,tocIndex:15},{value:"fontSize",paraId:62,tocIndex:15},{value:"文字大小",paraId:62,tocIndex:15},{value:"number",paraId:62,tocIndex:15},{value:"fontFamily",paraId:62,tocIndex:15},{value:"文字字体",paraId:62,tocIndex:15},{value:"string",paraId:62,tocIndex:15},{value:"fontWeight",paraId:62,tocIndex:15},{value:"字体粗细",paraId:62,tocIndex:15},{value:"number",paraId:62,tocIndex:15},{value:"lineHeight",paraId:62,tocIndex:15},{value:"文字的行高",paraId:62,tocIndex:15},{value:"number",paraId:62,tocIndex:15},{value:"textAlign",paraId:62,tocIndex:15},{value:"设置行内内容的水平对齐方式",paraId:62,tocIndex:15},{value:"center",paraId:62,tocIndex:15},{value:" | ",paraId:62,tocIndex:15},{value:"end",paraId:62,tocIndex:15},{value:" | ",paraId:62,tocIndex:15},{value:"left",paraId:62,tocIndex:15},{value:" | ",paraId:62,tocIndex:15},{value:"right",paraId:62,tocIndex:15},{value:" | ",paraId:62,tocIndex:15},{value:"start",paraId:62,tocIndex:15},{value:"start",paraId:62,tocIndex:15},{value:"textBaseline",paraId:62,tocIndex:15},{value:"设置在绘制文本时垂直方向的基线",paraId:62,tocIndex:15},{value:"top",paraId:62,tocIndex:15},{value:" | ",paraId:62,tocIndex:15},{value:"middle",paraId:62,tocIndex:15},{value:" | ",paraId:62,tocIndex:15},{value:"bottom",paraId:62,tocIndex:15},{value:" | ",paraId:62,tocIndex:15},{value:"alphabetic",paraId:62,tocIndex:15},{value:" | ",paraId:62,tocIndex:15},{value:"hanging",paraId:62,tocIndex:15},{value:"bottom",paraId:62,tocIndex:15},{value:"fill",paraId:62,tocIndex:15},{value:"文字的填充色",paraId:62,tocIndex:15},{value:"string",paraId:62,tocIndex:15},{value:"fillOpacity",paraId:62,tocIndex:15},{value:"文字的填充透明度",paraId:62,tocIndex:15},{value:"number",paraId:62,tocIndex:15},{value:"stroke",paraId:62,tocIndex:15},{value:"文字的描边",paraId:62,tocIndex:15},{value:"string",paraId:62,tocIndex:15},{value:"lineWidth",paraId:62,tocIndex:15},{value:"描边宽度",paraId:62,tocIndex:15},{value:"number",paraId:62,tocIndex:15},{value:"lineDash",paraId:62,tocIndex:15},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:62,tocIndex:15},{value:"[number,number]",paraId:62,tocIndex:15},{value:"strokeOpacity",paraId:62,tocIndex:15},{value:"描边透明度",paraId:62,tocIndex:15},{value:"number",paraId:62,tocIndex:15},{value:"opacity",paraId:62,tocIndex:15},{value:"文字的整体透明度",paraId:62,tocIndex:15},{value:"number",paraId:62,tocIndex:15},{value:"shadowColor",paraId:62,tocIndex:15},{value:"文字阴影颜色",paraId:62,tocIndex:15},{value:"string",paraId:62,tocIndex:15},{value:"shadowBlur",paraId:62,tocIndex:15},{value:"文字阴影的高斯模糊系数",paraId:62,tocIndex:15},{value:"number",paraId:62,tocIndex:15},{value:"shadowOffsetX",paraId:62,tocIndex:15},{value:"设置阴影距文字的水平距离",paraId:62,tocIndex:15},{value:"number",paraId:62,tocIndex:15},{value:"shadowOffsetY",paraId:62,tocIndex:15},{value:"设置阴影距文字的垂直距离",paraId:62,tocIndex:15},{value:"number",paraId:62,tocIndex:15},{value:"cursor",paraId:62,tocIndex:15},{value:"鼠标样式。同 css 的鼠标样式",paraId:62,tocIndex:15},{value:"string",paraId:62,tocIndex:15},{value:"default",paraId:62,tocIndex:15},{value:"dx",paraId:62,tocIndex:15},{value:"文字在水平方向的偏移量",paraId:62,tocIndex:15},{value:"number",paraId:62,tocIndex:15},{value:"0",paraId:62,tocIndex:15},{value:"dy",paraId:62,tocIndex:15},{value:"文字在垂直方向的偏移量",paraId:62,tocIndex:15},{value:"number",paraId:62,tocIndex:15},{value:"0",paraId:62,tocIndex:15},{value:"接下来，试试使用全量文字的样式配置水波图的中心文字的样式，在下面的代码编辑器里修改属性试试效果：",paraId:63,tocIndex:15},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 350,\n});\n\nchart.options({\n  type: 'liquid',\n  autoFit: true,\n  data: 0.581,\n  style: {\n    waveLength: 50,\n    contentText: 'center text',\n    outlineBorder: 4,\n    outlineDistance: 8,\n    // 绘图属性\n    contentFontSize: 30,\n    contentFontFamily: 'sans-serif',\n    contentFontWeight: 500,\n    contentLineHeight: 20,\n    contentTextAlign: 'center',\n    contentTextBaseline: 'middle',\n    contentFill: '#fff',\n    contentFillOpacity: 0.9,\n    contentStroke: 'yellow',\n    contentStrokeOpacity: 0.9,\n    contentLineWidth: 2,\n    contentLineDash: [4, 8],\n    contentOpacity: 1,\n    contentShadowColor: '#d3d3d3',\n    contentShadowBlur: 10,\n    contentShadowOffsetX: 10,\n    contentShadowOffsetY: 10,\n    contentCursor: 'pointer',\n    contentDx: 10,\n    contentDy: 10,\n  },\n});\n\nchart.render();\n",paraId:64,tocIndex:15},{value:"类似的，我们也可以以相同的方式来配置标题的文字样式。",paraId:65,tocIndex:15},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: { x: { range: [0, 1] }, y: { domainMin: 0, nice: true } },\n  title: {\n    size: 30,\n    title: \"我是一个标题 I'am a title\",\n    align: 'center',\n    spacing: 4,\n\n    // 绘图属性\n    titleFontSize: 30,\n    titleFontFamily: 'sans-serif',\n    titleFontWeight: 500,\n    titleLineHeight: 30,\n    titleTextAlign: 'center',\n    titleTextBaseline: 'middle',\n    titleFill: '#fff',\n    titleFillOpacity: 0.9,\n    titleStroke: 'yellow',\n    titleStrokeOpacity: 0.9,\n    titleLineWidth: 1,\n    titleLineDash: [1, 2],\n    titleOpacity: 1,\n    titleShadowColor: '#d3d3d3',\n    titleShadowBlur: 10,\n    titleShadowOffsetX: 10,\n    titleShadowOffsetY: 10,\n    titleCursor: 'pointer',\n    titleDx: 10,\n    titleDy: 10,\n  },\n});\n\nchart.render();\n",paraId:66,tocIndex:15},{value:"说明：",paraId:67,tocIndex:16},{value:"l",paraId:67,tocIndex:16},{value:"  表示使用线性渐变，绿色的字体为可变量，由用户自己填写。",paraId:67,tocIndex:16},{value:"// 使用渐变色描边，渐变角度为 0，渐变的起始点颜色 #ffffff，中点的渐变色为 #7ec2f3，结束的渐变色为 #1890ff\nstroke: 'l(0) 0:#ffffff 0.5:#7ec2f3 1:#1890ff';\n// 当然，下面这种写法也是可以的\nstroke: 'linear-gradient(270deg, #ffffff 0%, #7ec2f3 50%, #1890ff 100%)';\n",paraId:68,tocIndex:16},{value:"接下来，试试配置面积图的填充颜色为线性渐变色，在下面的代码编辑器里修改属性试试效果：",paraId:69,tocIndex:16},{value:"/**\n * A recreation of this demo: https://vega.github.io/vega-lite/examples/area_gradient.html\n */\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 350,\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/stocks.json',\n    transform: [{ type: 'filter', callback: (d) => d.symbol === 'GOOG' }],\n  },\n  children: [\n    {\n      type: 'area',\n      encode: { x: (d) => new Date(d.date), y: 'price' },\n      style: { fill: 'l(270) 0:#ffffff 0.5:#7ec2f3 1:#1890ff' },\n      // style: { fill: \"linear-gradient(270deg, #ffffff 0%, #7ec2f3 50%, #1890ff 100%)\" },\n    },\n  ],\n});\n\nchart.render();\n",paraId:70,tocIndex:16},{value:"也可以通过配置 ",paraId:71,tocIndex:16},{value:"color",paraId:71,tocIndex:16},{value:" 通道的比例尺来实现一个渐变色仪表盘，在下面的代码编辑器里修改属性试试效果：",paraId:71,tocIndex:16},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 350,\n});\n\nchart.options({\n  type: 'gauge',\n  data: {\n    value: { target: 159, total: 400, name: 'score', thresholds: [200, 400] },\n  },\n  scale: {\n    color: { range: ['l(0):0:#37b38e 1:#D9C652', 'l(0):0:#D9C652 1:#f96e3e'] },\n  },\n  style: {\n    textContent: (target, total) => `得分：${target}\n占比：${(target / total) * 100}%`,\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:72,tocIndex:16},{value:"说明：",paraId:73,tocIndex:17},{value:"r",paraId:73,tocIndex:17},{value:"  表示使用放射状渐变，绿色的字体为可变量，由用户自己填写，开始圆的 x y r 值均为相对值，0 至 1 范围。",paraId:73,tocIndex:17},{value:"// 使用渐变色填充，渐变起始圆的圆心坐标为被填充物体的包围盒中心点，半径为(包围盒对角线长度 / 2) 的 0.1 倍，渐变的起始点颜色 #ffffff，中点的渐变色为 #7ec2f3，结束的渐变色为 #1890ff\nfill: 'r(0.5, 0.5, 0.1) 0:#ffffff 1:#1890ff';\n",paraId:74,tocIndex:17},{value:"接下来，试试配置条形图的填充颜色为环形渐变色，在下面的代码编辑器里修改属性试试效果：",paraId:75,tocIndex:17},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', height: 350 });\n\nchart.options({\n  type: 'interval',\n  height: 350,\n  data: [\n    { genre: 'Sports', sold: 30 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold' },\n  style: {\n    fill: 'r(0.5, 0.5, 0.1) 0:#ffffff 1:#1890ff',\n  },\n});\n\nchart.render();\n",paraId:76,tocIndex:17},{value:"用特定的纹理填充图形。纹理内容可以直接是图片或者  Data URLs。",paraId:77,tocIndex:18},{value:"说明：",paraId:78,tocIndex:18},{value:"p",paraId:78,tocIndex:18},{value:"  表示使用纹理，绿色的字体为可变量，由用户自己填写。",paraId:78,tocIndex:18},{value:"a",paraId:79,tocIndex:18},{value:": 该模式在水平和垂直方向重复；",paraId:79,tocIndex:18},{value:"x",paraId:79,tocIndex:18},{value:": 该模式只在水平方向重复；",paraId:79,tocIndex:18},{value:"y",paraId:79,tocIndex:18},{value:": 该模式只在垂直方向重复；",paraId:79,tocIndex:18},{value:"n",paraId:79,tocIndex:18},{value:": 该模式只显示一次（不重复）。",paraId:79,tocIndex:18},{value:"style: {\n  fill: 'p(a)https://gw.alipayobjects.com/mdn/rms_d314dd/afts/img/A*58XjQY1tO7gAAAAAAAAAAABkARQnAQ',\n}\n",paraId:80,tocIndex:18},{value:"接下来，试试配置条形图的填充颜色为纹理，在下面的代码编辑器里修改属性试试效果：",paraId:81,tocIndex:18},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', height: 350 });\n\nchart.options({\n  type: 'interval',\n  height: 350,\n  data: [\n    { genre: 'Sports', sold: 30 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold' },\n  style: {\n    fill: 'p(a)https://gw.alipayobjects.com/mdn/rms_d314dd/afts/img/A*58XjQY1tO7gAAAAAAAAAAABkARQnAQ',\n  },\n});\n\nchart.render();\n",paraId:82,tocIndex:18},{value:"除此之外，G2 提供了 ",paraId:83,tocIndex:18},{value:"内置纹理",paraId:83,tocIndex:18},{value:"、 ",paraId:83,tocIndex:18},{value:"G API 自定义纹理",paraId:83,tocIndex:18},{value:" 等多种方式来设置纹理，详情见 ",paraId:83,tocIndex:18},{value:"设置纹理",paraId:84,tocIndex:18},{value:"。",paraId:83,tocIndex:18}]},15277:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(86198);const t=[{value:"学术风格的主题。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  theme: 'academy',\n  paddingLeft: 80,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'sortX', by: 'y', reverse: true, slice: 6 },\n    { type: 'dodgeX' },\n  ],\n  axis: { y: { labelFormatter: '~s' }, x: { zIndex: 1 } },\n  interaction: {\n    tooltip: { shared: true },\n    elementHighlight: { background: true },\n  },\n});\n\nchart.render();\n",paraId:1,tocIndex:0}]},64259:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(41702);const t=[{value:"经典主题。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  paddingLeft: 80,\n  theme: 'classic',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'sortX', by: 'y', reverse: true, slice: 6 },\n    { type: 'dodgeX' },\n  ],\n  axis: { y: { labelFormatter: '~s' }, x: { zIndex: 1 } },\n  interaction: {\n    tooltip: { shared: true },\n    elementHighlight: { background: true },\n  },\n});\n\nchart.render();\n",paraId:1,tocIndex:0}]},52623:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(74504);const t=[{value:"经典暗黑主题。在使用暗黑主题时，通常需要配置一些额外的视图样式来确保图表在暗色背景下有更好的视觉效果。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  theme: { type: 'classicDark', view: { viewFill: '#141414' } },\n  data: [\n    { genre: '运动', sold: 275 },\n    { genre: '策略', sold: 115 },\n    { genre: '角色扮演', sold: 120 },\n    { genre: '动作', sold: 350 },\n    { genre: '模拟', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  theme: 'classicDark',\n  data: [\n    { category: 'A', value: 23 },\n    { category: 'B', value: 45 },\n    { category: 'C', value: 56 },\n    { category: 'D', value: 78 },\n    { category: 'E', value: 32 },\n  ],\n  encode: { x: 'category', y: 'value', color: 'category' },\n  axis: {\n    x: { grid: true, gridStroke: '#404040' },\n    y: { grid: true, gridStroke: '#404040' },\n  },\n  viewStyle: {\n    viewFill: '#1f1f1f',\n    plotFill: '#2a2a2a',\n    plotStroke: '#404040',\n    plotLineWidth: 1,\n  },\n});\n\nchart.render();\n",paraId:2,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'line',\n  theme: {\n    type: 'classicDark',\n    view: { viewFill: '#0f0f0f', plotFill: '#1a1a1a' },\n  },\n  data: [\n    { year: '2018', value: 30 },\n    { year: '2019', value: 40 },\n    { year: '2020', value: 35 },\n    { year: '2021', value: 50 },\n    { year: '2022', value: 49 },\n    { year: '2023', value: 70 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  style: { stroke: '#60a5fa', lineWidth: 3 },\n  axis: {\n    x: {\n      grid: true,\n      gridStroke: '#fff',\n      gridLineWidth: 2,\n      labelFill: '#d1d5db',\n    },\n    y: {\n      grid: true,\n      gridStroke: '#fff',\n      gridLineWidth: 2,\n      labelFill: '#d1d5db',\n    },\n  },\n});\n\nchart.render();\n",paraId:3,tocIndex:2},{value:"如果你的网页或应用使用了暗色主题，建议确保图表的背景色与容器背景色协调：",paraId:4,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\n// 模拟暗色容器背景\nconst container = document.getElementById('container');\nif (container) {\n  container.style.backgroundColor = '#111827';\n  container.style.padding = '20px';\n  container.style.borderRadius = '8px';\n}\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  theme: { type: 'classicDark', view: { viewFill: '#111827' } },\n  data: [\n    { month: 'Jan', sales: 120 },\n    { month: 'Feb', sales: 140 },\n    { month: 'Mar', sales: 110 },\n    { month: 'Apr', sales: 180 },\n    { month: 'May', sales: 160 },\n    { month: 'Jun', sales: 200 },\n  ],\n  encode: { x: 'month', y: 'sales' },\n  style: {\n    fill: 'linear-gradient(to top, rgba(59, 130, 246, 0.3), rgba(59, 130, 246, 0.1))',\n    stroke: '#3b82f6',\n    lineWidth: 2,\n  },\n});\n\nchart.render();\n",paraId:5,tocIndex:3}]},54835:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(91179);const t=[{value:"G2 中 ",paraId:0,tocIndex:0},{value:"主题（Theme）",paraId:0,tocIndex:0},{value:" 是一组预定义的样式配置，用于控制图表的整体外观，包括颜色、字体、边距等视觉属性。主题系统使得图表能够保持一致的视觉风格，同时提供了灵活的自定义能力，以满足不同场景下的设计需求。",paraId:0,tocIndex:0},{value:"主题在 G2 中的作用主要体现在以下几个方面：",paraId:1,tocIndex:0},{value:"统一视觉风格",paraId:2,tocIndex:0},{value:"：为图表提供一致的视觉语言，使得多个图表在同一应用中能够保持风格统一",paraId:2,tocIndex:0},{value:"适应不同场景",paraId:2,tocIndex:0},{value:"：提供明暗两种基础主题，适应不同的应用背景和使用环境",paraId:2,tocIndex:0},{value:"简化配置",paraId:2,tocIndex:0},{value:"：通过预设的样式配置，减少重复的样式定义工作",paraId:2,tocIndex:0},{value:"增强可读性",paraId:2,tocIndex:0},{value:"：通过精心设计的颜色方案和布局，提升图表的可读性和美观度",paraId:2,tocIndex:0},{value:"G2 的主题系统支持多层级配置，可以在视图层级或标记层级进行设置，并且支持局部覆盖和完全自定义。",paraId:3,tocIndex:0},{value:"G2 的主题可以在不同层级进行配置：",paraId:4,tocIndex:1},{value:"视图层级",paraId:5,tocIndex:1},{value:"：应用于整个图表或视图",paraId:5,tocIndex:1},{value:"chart.options({\n  theme: { type: 'dark' },\n});\n\n// 或使用API形式\nchart.theme({ type: 'dark' });\n",paraId:6,tocIndex:1},{value:"标记层级",paraId:7,tocIndex:1},{value:"：应用于特定的图形标记",paraId:7,tocIndex:1},{value:"chart.options({\n  type: 'interval',\n  theme: { color: 'steelblue' },\n});\n\n// 或使用API形式\nchart.interval().theme({ color: 'steelblue' });\n",paraId:8,tocIndex:1},{value:"当同时存在多个层级的主题配置时，标记层级的配置会覆盖视图层级的配置。",paraId:9,tocIndex:1},{value:"G2 内置了多种主题，可以通过 ",paraId:10,tocIndex:2},{value:"type",paraId:10,tocIndex:2},{value:" 属性进行切换：",paraId:10,tocIndex:2},{value:"主题名称",paraId:11,tocIndex:2},{value:"描述",paraId:11,tocIndex:2},{value:"适用场景",paraId:11,tocIndex:2},{value:"light",paraId:11,tocIndex:2},{value:"默认亮色主题",paraId:11,tocIndex:2},{value:"适用于浅色背景的应用界面",paraId:11,tocIndex:2},{value:"dark",paraId:11,tocIndex:2},{value:"暗色主题",paraId:11,tocIndex:2},{value:"适用于深色背景的应用界面",paraId:11,tocIndex:2},{value:"classic",paraId:11,tocIndex:2},{value:"经典主题",paraId:11,tocIndex:2},{value:"基于亮色主题的变体，使用经典配色方案",paraId:11,tocIndex:2},{value:"classicDark",paraId:11,tocIndex:2},{value:"经典暗色主题",paraId:11,tocIndex:2},{value:"基于暗色主题的变体，使用经典配色方案",paraId:11,tocIndex:2},{value:"academy",paraId:11,tocIndex:2},{value:"学术主题",paraId:11,tocIndex:2},{value:"适用于学术论文、报告等场景",paraId:11,tocIndex:2},{value:"使用内置主题的方式如下：",paraId:12,tocIndex:2},{value:"// Spec形式\nchart.options({\n  theme: { type: 'dark' },\n});\n\n// API形式\nchart.theme({ type: 'classicDark' });\n",paraId:13,tocIndex:2},{value:"主题配置项可以分为基础配置、视图配置、组件配置和标记配置四个部分。",paraId:14,tocIndex:3},{value:"属性",paraId:15,tocIndex:3},{value:"描述",paraId:15,tocIndex:3},{value:"类型",paraId:15,tocIndex:3},{value:"默认值",paraId:15,tocIndex:3},{value:"必选",paraId:15,tocIndex:3},{value:"type",paraId:15,tocIndex:3},{value:"指定使用的主题类型",paraId:15,tocIndex:3},{value:"'light'",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"'dark'",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"'classic'",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"'classicDark'",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"'academy'",paraId:15,tocIndex:3},{value:"'light'",paraId:15,tocIndex:3},{value:"padding",paraId:15,tocIndex:3},{value:"图表内边距",paraId:15,tocIndex:3},{value:"'auto'",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:"'auto'",paraId:15,tocIndex:3},{value:"margin",paraId:15,tocIndex:3},{value:"图表外边距",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:"16",paraId:15,tocIndex:3},{value:"inset",paraId:15,tocIndex:3},{value:"图表内部图形与坐标轴的间距",paraId:15,tocIndex:3},{value:"'auto'",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:"'auto'",paraId:15,tocIndex:3},{value:"color",paraId:15,tocIndex:3},{value:"默认颜色",paraId:15,tocIndex:3},{value:"string",paraId:15,tocIndex:3},{value:"取决于主题",paraId:15,tocIndex:3},{value:"size",paraId:15,tocIndex:3},{value:"默认大小",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:"1",paraId:15,tocIndex:3},{value:"category10",paraId:15,tocIndex:3},{value:"分类颜色方案（10 色）",paraId:15,tocIndex:3},{value:"string",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"string[]",paraId:15,tocIndex:3},{value:"取决于主题",paraId:15,tocIndex:3},{value:"category20",paraId:15,tocIndex:3},{value:"分类颜色方案（20 色）",paraId:15,tocIndex:3},{value:"string",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"string[]",paraId:15,tocIndex:3},{value:"取决于主题",paraId:15,tocIndex:3},{value:"view",paraId:15,tocIndex:3},{value:"视图区域配置",paraId:15,tocIndex:3},{value:"view",paraId:16,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"enter",paraId:15,tocIndex:3},{value:"入场动画配置",paraId:15,tocIndex:3},{value:"animation",paraId:17,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"update",paraId:15,tocIndex:3},{value:"更新动画配置",paraId:15,tocIndex:3},{value:"animation",paraId:18,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"exit",paraId:15,tocIndex:3},{value:"退场动画配置",paraId:15,tocIndex:3},{value:"animation",paraId:19,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"视图区域配置项。",paraId:20,tocIndex:4},{value:"属性",paraId:21,tocIndex:4},{value:"描述",paraId:21,tocIndex:4},{value:"类型",paraId:21,tocIndex:4},{value:"默认值",paraId:21,tocIndex:4},{value:"必选",paraId:21,tocIndex:4},{value:"viewFill",paraId:21,tocIndex:4},{value:"整个视图区域的填充色",paraId:21,tocIndex:4},{value:"string",paraId:21,tocIndex:4},{value:"'transparent'",paraId:21,tocIndex:4},{value:"plotFill",paraId:21,tocIndex:4},{value:"绘图区域的填充色",paraId:21,tocIndex:4},{value:"string",paraId:21,tocIndex:4},{value:"'transparent'",paraId:21,tocIndex:4},{value:"mainFill",paraId:21,tocIndex:4},{value:"主区域的填充色",paraId:21,tocIndex:4},{value:"string",paraId:21,tocIndex:4},{value:"'transparent'",paraId:21,tocIndex:4},{value:"contentFill",paraId:21,tocIndex:4},{value:"内容区域的填充色",paraId:21,tocIndex:4},{value:"string",paraId:21,tocIndex:4},{value:"'transparent'",paraId:21,tocIndex:4},{value:"动画配置项。",paraId:22,tocIndex:5},{value:"属性",paraId:23,tocIndex:5},{value:"描述",paraId:23,tocIndex:5},{value:"类型",paraId:23,tocIndex:5},{value:"默认值",paraId:23,tocIndex:5},{value:"必选",paraId:23,tocIndex:5},{value:"duration",paraId:23,tocIndex:5},{value:"动画持续时间（毫秒）",paraId:23,tocIndex:5},{value:"number",paraId:23,tocIndex:5},{value:"300",paraId:23,tocIndex:5},{value:"fill",paraId:23,tocIndex:5},{value:"动画填充模式",paraId:23,tocIndex:5},{value:"'none'",paraId:23,tocIndex:5},{value:" | ",paraId:23,tocIndex:5},{value:"'forwards'",paraId:23,tocIndex:5},{value:" | ",paraId:23,tocIndex:5},{value:"'backwards'",paraId:23,tocIndex:5},{value:" | ",paraId:23,tocIndex:5},{value:"'both'",paraId:23,tocIndex:5},{value:"'both'",paraId:23,tocIndex:5},{value:"delay",paraId:23,tocIndex:5},{value:"动画延迟时间（毫秒）",paraId:23,tocIndex:5},{value:"number",paraId:23,tocIndex:5},{value:"0",paraId:23,tocIndex:5},{value:"G2 提供了两种自定义主题的方式：局部覆盖和完全自定义。",paraId:24,tocIndex:6},{value:"最简单的自定义方式是在使用主题时覆盖部分配置项：",paraId:25,tocIndex:7},{value:"// Spec形式\nchart.options({\n  theme: {\n    type: 'light', // 基于light主题\n    color: 'steelblue', // 覆盖默认颜色\n    margin: 20, // 覆盖默认外边距\n  },\n});\n\n// API形式\nchart.theme({\n  type: 'dark', // 基于dark主题\n  category10: ['#ff0000', '#00ff00', '#0000ff'], // 自定义颜色方案\n});\n",paraId:26,tocIndex:7},{value:"这种方式适合只需要调整少量样式的场景，简单直接。",paraId:27,tocIndex:7},{value:"对于需要完全控制主题的场景，可以创建自定义主题函数，然后注册并使用：",paraId:28,tocIndex:8},{value:"// 1. 定义主题函数\nfunction CustomTheme() {\n  // 可以基于现有主题进行修改\n  const light = G2.Light();\n\n  // 返回修改后的主题配置\n  return {\n    ...light,\n    color: '#3366cc',\n    category10: [\n      '#3366cc',\n      '#dc3912',\n      '#ff9900',\n      '#109618',\n      '#990099',\n      '#0099c6',\n      '#dd4477',\n      '#66aa00',\n      '#b82e2e',\n      '#316395',\n    ],\n    // 其他自定义配置...\n  };\n}\n\n// 2. 注册主题\nG2.register('theme.custom', CustomTheme);\n\n// 3. 使用自定义主题\nchart.options({\n  theme: { type: 'custom' },\n});\n",paraId:29,tocIndex:8},{value:"这种方式适合需要全面控制主题样式的场景，提供了最大的灵活性。",paraId:30,tocIndex:8},{value:"下面的示例展示了如何使用内置的暗色主题：",paraId:31,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  theme: {\n    type: 'dark',\n    view: {\n      viewFill: '#1f1f1f', // 设置暗色背景\n    },\n  },\n  type: 'interval',\n  data: [\n    { genre: '运动', sold: 275 },\n    { genre: '策略', sold: 115 },\n    { genre: '角色扮演', sold: 120 },\n    { genre: '动作', sold: 350 },\n    { genre: '模拟', sold: 150 },\n  ],\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    color: 'genre',\n  },\n});\n\nchart.render();\n",paraId:32,tocIndex:10},{value:"下面的示例展示了如何自定义默认颜色：",paraId:33,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  theme: { color: '#8a2be2' }, // 设置默认颜色为紫色\n  type: 'line',\n  data: [\n    { year: '2018', value: 30 },\n    { year: '2019', value: 40 },\n    { year: '2020', value: 45 },\n    { year: '2021', value: 50 },\n    { year: '2022', value: 56 },\n    { year: '2023', value: 70 },\n  ],\n  encode: {\n    x: 'year',\n    y: 'value',\n  },\n});\n\nchart.render();\n",paraId:34,tocIndex:11},{value:"下面的示例展示了如何自定义分类颜色方案：",paraId:35,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  theme: {\n    // 自定义分类颜色方案\n    category10: [\n      '#ff9999',\n      '#99ff99',\n      '#9999ff',\n      '#ffff99',\n      '#ff99ff',\n      '#99ffff',\n      '#ffcc99',\n      '#99ccff',\n      '#ff9966',\n      '#66ff99',\n    ],\n  },\n  type: 'interval',\n  data: [\n    { category: 'A', value: 10 },\n    { category: 'B', value: 20 },\n    { category: 'C', value: 15 },\n    { category: 'D', value: 25 },\n    { category: 'E', value: 18 },\n  ],\n  encode: {\n    x: 'category',\n    y: 'value',\n    color: 'category',\n  },\n});\n\nchart.render();\n",paraId:36,tocIndex:12},{value:"下面的示例展示了如何自定义视图区域的样式：",paraId:37,tocIndex:13},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  theme: {\n    view: {\n      viewFill: '#f5f5f5', // 设置视图背景色\n      plotFill: '#ffffff', // 设置绘图区背景色\n    },\n  },\n  type: 'point',\n  data: [\n    { x: 1, y: 4 },\n    { x: 2, y: 5 },\n    { x: 3, y: 7 },\n    { x: 4, y: 3 },\n    { x: 5, y: 6 },\n    { x: 6, y: 8 },\n    { x: 7, y: 5 },\n    { x: 8, y: 9 },\n    { x: 9, y: 6 },\n  ],\n  encode: {\n    x: 'x',\n    y: 'y',\n    shape: 'point',\n    size: 10,\n  },\n});\n\nchart.render();\n",paraId:38,tocIndex:13},{value:"更多主题相关的示例，可以查看",paraId:39,tocIndex:13},{value:"图表示例 - 主题",paraId:40,tocIndex:13},{value:"页面。",paraId:39,tocIndex:13}]},22826:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(31803);const t=[{value:"bin",paraId:0,tocIndex:0},{value:" 是一个用于数据处理的重要函数，它的主要作用是将连续的数值数据划分为离散的区间（即分箱），从而将数据进行分组。这种操作通常用于数据分析和可视化，以方便统计或展示数据分布。",paraId:0,tocIndex:0},{value:"bin",paraId:1,tocIndex:0},{value:" 的核心目的是将原始数据按照指定的规则进行分箱操作，将连续型数据转换为多个离散区间的类别数据。这在数据处理和构建直方图等视图时尤为重要。例如，当需要根据数据的数值范围生成多个区间并统计其频率时，就可以使用 ",paraId:1,tocIndex:0},{value:"bin",paraId:1,tocIndex:0},{value:"。",paraId:1,tocIndex:0},{value:"数据分箱，用于按区间统计数据频率。",paraId:2,tocIndex:1},{value:"构建直方图视图。",paraId:2,tocIndex:1},{value:"将连续型数据转化为离散型数据以便于分析。",paraId:2,tocIndex:1},{value:"下面这个例子展示了如果创建一个分箱图，展示了两个评分系统评分在不同分数区间中的分布情况，可以直观地观察哪个区间的评分较多，哪个区间评分较少。",paraId:3,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'rect', // 图表类型为矩形图（直方图）\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/movies.json',\n  },\n  encode: {\n    x: 'IMDB Rating', // X 轴编码为 IMDB 评分\n    y: 'Rotten Tomatoes Rating', // Y 轴编码为 Rotten Tomatoes 评分\n  },\n  transform: [\n    {\n      type: 'bin', // 数据转换类型为分箱\n      color: 'count', // 通过颜色编码表示每个分箱内的数据点数量\n    },\n  ],\n});\n\nchart.render();\n",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:2},{value:"描述",paraId:5,tocIndex:2},{value:"类型",paraId:5,tocIndex:2},{value:"默认值",paraId:5,tocIndex:2},{value:"thresholdsX",paraId:5,tocIndex:2},{value:"对 x 分箱的数量",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:"d3.thresholdScott",paraId:5,tocIndex:2},{value:"thresholdsY",paraId:5,tocIndex:2},{value:"对 y 分箱的数量",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:"d3.thresholdScott",paraId:5,tocIndex:2},{value:"[channel]",paraId:5,tocIndex:2},{value:"输出到具体 mark 的 channel 数据的聚合方式",paraId:5,tocIndex:2},{value:"channel",paraId:6,tocIndex:2},{value:"thresholdsX",paraId:7,tocIndex:3},{value:" 和 ",paraId:7,tocIndex:3},{value:"thresholdsY",paraId:7,tocIndex:3},{value:" 是用于定义数据分箱的两个非常重要的配置项，主要在二维数据分箱（如网格图或热力图）中使用。它们分别控制在 X 和 Y 方向上的分箱（区间划分）规则或数量，用于将二维连续数据划分为离散的网格。",paraId:7,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nlet thresholdsX;\nlet thresholdsY;\nchart.options({\n  type: 'rect', // 图表类型为矩形图（直方图）\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/movies.json',\n  },\n  encode: {\n    x: 'IMDB Rating', // X 轴编码为 IMDB 评分\n    y: 'Rotten Tomatoes Rating', // Y 轴编码为 Rotten Tomatoes 评分\n  },\n  transform: [\n    {\n      type: 'bin', // 数据转换类型为分箱\n      color: 'count', // 通过颜色编码表示每个分箱内的数据点数量\n    },\n  ],\n});\n\n// 插入 thresholdsX，thresholdsY 的输入框\nconst container = document.createElement('div');\nconst thresholdsX_Text = document.createElement('span');\nthresholdsX_Text.textContent = 'thresholdsX: ';\nconst thresholdsX_Input = document.createElement('input');\nthresholdsX_Input.setAttribute('type', 'number');\nthresholdsX_Input.addEventListener('input', (e) => {\n  thresholdsX = e.target.value;\n  chart.options({\n    transform: [\n      {\n        type: 'bin',\n        color: 'count',\n        thresholdsX,\n        thresholdsY,\n      },\n    ],\n  });\n  chart.render();\n});\n\nconst thresholdsY_Text = document.createElement('span');\nthresholdsY_Text.textContent = '　　thresholdsY: ';\nconst thresholdsY_Input = document.createElement('input');\nthresholdsY_Input.setAttribute('type', 'number');\nthresholdsY_Input.addEventListener('input', (e) => {\n  thresholdsY = e.target.value;\n  chart.options({\n    transform: [\n      {\n        type: 'bin',\n        color: 'count',\n        thresholdsX,\n        thresholdsY,\n      },\n    ],\n  });\n  chart.render();\n});\n\ncontainer.appendChild(thresholdsX_Text);\ncontainer.appendChild(thresholdsX_Input);\ncontainer.appendChild(thresholdsY_Text);\ncontainer.appendChild(thresholdsY_Input);\n\nconst node = chart.getContainer();\nnode.insertBefore(container, node.childNodes[0]);\n\nchart.render();\n",paraId:8,tocIndex:3},{value:"理论上，",paraId:9,tocIndex:4},{value:"channel",paraId:9,tocIndex:4},{value:" 可以设置为所有的通道值，具体可以参考 ",paraId:9,tocIndex:4},{value:"encode",paraId:10,tocIndex:4},{value:" 文档。所有的枚举值如下：",paraId:9,tocIndex:4},{value:"type Channel =\n  | 'x'\n  | 'y'\n  | 'z'\n  | 'x1'\n  | 'y1'\n  | 'series'\n  | 'color'\n  | 'opacity'\n  | 'shape'\n  | 'size'\n  | 'key'\n  | 'groupKey'\n  | 'position'\n  | 'series'\n  | 'enterType'\n  | 'enterEasing'\n  | 'enterDuration'\n  | 'enterDelay'\n  | 'updateType'\n  | 'updateEasing'\n  | 'updateDuration'\n  | 'updateDelay'\n  | 'exitType'\n  | 'exitEasing'\n  | 'exitDuration'\n  | 'exitDelay'\n  | `position${number}`;\n",paraId:11,tocIndex:4},{value:"bin",paraId:12},{value:"opacity",paraId:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'rect',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/movies.json',\n  },\n  encode: {\n    x: 'IMDB Rating',\n    y: 'Rotten Tomatoes Rating',\n  },\n  transform: [\n    {\n      type: 'bin', // 数据转换类型为分箱\n      opacity: 'count', // 通过透明度编码表示每个分箱内的数据点数量\n      thresholdsX: 10,\n      thresholdsY: 10,\n    },\n  ],\n});\n\nchart.render();\n",paraId:13,tocIndex:6},{value:"bin",paraId:12},{value:"size",paraId:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point', // 图表类型为矩形图（直方图）\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/movies.json',\n  },\n  encode: {\n    x: 'IMDB Rating',\n    y: 'Rotten Tomatoes Rating',\n  },\n  transform: [\n    {\n      type: 'bin', // 数据转换类型为分箱\n      size: 'count', // 通过大小编码表示每个分箱内的数据点数量\n      thresholdsX: 10,\n      thresholdsY: 10,\n    },\n  ],\n});\n\nchart.render();\n",paraId:14,tocIndex:7}]},15134:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(89058);const t=[{value:"binX 是一个针对 X 通道数据进行分箱处理的重要函数。它主要用于将连续型数据按照指定的规则划分为离散的区间或分组，使数据更易于分析，并适用于特定的可视化场景（例如：热力图、条形图、网格图等）。",paraId:0,tocIndex:0},{value:"与 bin 类似，binX 专门用于 X 轴方向的数据分箱，而 bin 通常处理二维（X 和 Y）或单维度的数据。binX 可以独立应用，只对 X 通道的数据进行分箱，而无需处理其他维度的数据。",paraId:1,tocIndex:0},{value:"将连续的 X 通道数据划分为多个离散区间：根据数据范围，通过指定分箱规则，生成离散的区间（如 [0-10), [10-20) 等）。",paraId:2,tocIndex:1},{value:"转换原始数据格式：通过分箱的处理，生成新的字段（如指定输出字段名），用于表示数据所属区间。",paraId:2,tocIndex:1},{value:"便于统计数据分布：分箱后的数据可直接用于可视化处理（如统计每个区间内的频率或值）。",paraId:2,tocIndex:1},{value:"单独处理 X 通道数据维度：当 Y 通道无需分箱时，binX 可以仅对 X 通道数据进行分箱，灵活调整数据处理逻辑。",paraId:2,tocIndex:1},{value:"希望对 Y 通道进行分箱，使用 binX + transpose 坐标系。",paraId:3,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'rect',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/unemployment2.json',\n  },\n  encode: { x: 'rate' },\n  transform: [{ type: 'binX', y: 'count' }],\n});\n\nchart.render();\n",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:2},{value:"描述",paraId:5,tocIndex:2},{value:"类型",paraId:5,tocIndex:2},{value:"默认值",paraId:5,tocIndex:2},{value:"thresholds",paraId:5,tocIndex:2},{value:"对 x 分箱的数量",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:"d3.thresholdScott",paraId:5,tocIndex:2},{value:"[channel]",paraId:5,tocIndex:2},{value:"输出到具体 mark 的 channel 数据的聚合方式",paraId:5,tocIndex:2},{value:"channel",paraId:6,tocIndex:2},{value:"binX",paraId:7,tocIndex:3},{value:" 是一种专门用于对 X 轴方向上的连续型数据进行分箱（离散化）的变换操作。通过配置 ",paraId:7,tocIndex:3},{value:"thresholdsX",paraId:7,tocIndex:3},{value:"，可以明确指定 X 轴方向上的分箱边界，从而实现对数据的精细化控制。",paraId:7,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nlet thresholdsX;\nchart.options({\n  type: 'rect', // 图表类型为矩形图（直方图）\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/movies.json',\n  },\n  encode: {\n    x: 'IMDB Rating', // X 轴编码为 IMDB 评分\n    y: 'Rotten Tomatoes Rating', // Y 轴编码为 Rotten Tomatoes 评分\n  },\n  transform: [\n    {\n      type: 'bin', // 数据转换类型为分箱\n      color: 'count', // 通过颜色编码表示每个分箱内的数据点数量\n    },\n  ],\n});\n\n// 插入 thresholdsX 的输入框\nconst container = document.createElement('div');\nconst thresholdsX_Text = document.createElement('span');\nthresholdsX_Text.textContent = 'thresholdsX: ';\nconst thresholdsX_Input = document.createElement('input');\nthresholdsX_Input.setAttribute('type', 'number');\nthresholdsX_Input.addEventListener('input', (e) => {\n  thresholdsX = e.target.value;\n  chart.options({\n    transform: [\n      {\n        type: 'bin',\n        color: 'count',\n        thresholdsX,\n        thresholdsY,\n      },\n    ],\n  });\n  chart.render();\n});\n\ncontainer.appendChild(thresholdsX_Text);\ncontainer.appendChild(thresholdsX_Input);\n\nconst node = chart.getContainer();\nnode.insertBefore(container, node.childNodes[0]);\n\nchart.render();\n",paraId:8,tocIndex:3},{value:"理论上，",paraId:9,tocIndex:4},{value:"channel",paraId:9,tocIndex:4},{value:" 可以设置为所有的通道值，具体可以参考 ",paraId:9,tocIndex:4},{value:"encode",paraId:10,tocIndex:4},{value:" 文档。所有的枚举值如下：",paraId:9,tocIndex:4},{value:"type Channel =\n  | 'x'\n  | 'y'\n  | 'z'\n  | 'x1'\n  | 'y1'\n  | 'series'\n  | 'color'\n  | 'opacity'\n  | 'shape'\n  | 'size'\n  | 'key'\n  | 'groupKey'\n  | 'position'\n  | 'series'\n  | 'enterType'\n  | 'enterEasing'\n  | 'enterDuration'\n  | 'enterDelay'\n  | 'updateType'\n  | 'updateEasing'\n  | 'updateDuration'\n  | 'updateDelay'\n  | 'exitType'\n  | 'exitEasing'\n  | 'exitDuration'\n  | 'exitDelay'\n  | `position${number}`;\n",paraId:11,tocIndex:4},{value:"bin",paraId:12},{value:"opacity",paraId:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'rect',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n  },\n  encode: { x: 'weight', color: 'sex' },\n  transform: [\n    { type: 'binX', y: 'count' },\n    { type: 'stackY', orderBy: 'series' },\n  ],\n  style: { inset: 0.5 },\n});\n\nchart.render();\n",paraId:13,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst random = d3Random.randomPoisson(Math.pow(10, 2.6));\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'rect',\n  autoFit: true,\n  data: new Array(5000).fill(0).map(random),\n  encode: { x: (d) => d },\n  transform: [{ type: 'binX', y: 'count' }],\n  style: { stroke: 'white' },\n  tooltip: {\n    title: (d, i, data, column) => ({\n      value: `${column.x.value[i]} ~ ${column.x1.value[i]}`,\n    }),\n  },\n});\n\nchart.render();\n",paraId:14,tocIndex:7}]},2968:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(14813);const t=[{value:"diffY",paraId:0,tocIndex:0},{value:" 是一个比较特殊的通道变化，主要是针对 encode.y 中的 y1 进行变换。对于面积图来说，它具备有 y 和 y1 通道，分别代表着面积图形的上边界和下边界，",paraId:0,tocIndex:0},{value:"diffY",paraId:0,tocIndex:0},{value:" 会对每一个面积图形的 y1 做以下处理：",paraId:0,tocIndex:0},{value:"计算每个 x 对应的 y1 的最大值 y1max",paraId:1,tocIndex:0},{value:"然后针对每个图形的 y 去判断和 y1max 的大小，如果 y1max > y 则移除这个数据，否则设置 y1 = y1max",paraId:1,tocIndex:0},{value:"常用于面积图、柱形图等这类具有 y1 的 mark，因为视觉上，最终效果是只显示两个柱子、面积图形交叠的地方，所以命名为 ",paraId:2,tocIndex:0},{value:"diffY",paraId:2,tocIndex:0},{value:"。",paraId:2,tocIndex:0},{value:"diffY",paraId:3,tocIndex:1},{value:" 基本专用于面积图，用于突出看到对比情况下的最值情况，在其他 mark 下使用相对比较少。",paraId:3,tocIndex:1},{value:"例如下面的的案例是看 ",paraId:4,tocIndex:1},{value:"New York",paraId:4,tocIndex:1},{value:" 和 ",paraId:4,tocIndex:1},{value:"San Francisco",paraId:4,tocIndex:1},{value:" 两个城市的天气情况的趋势，通过 ",paraId:4,tocIndex:1},{value:"diffY",paraId:4,tocIndex:1},{value:" 就可以凸显出在同一个时间 x 下，到底那个城市的温度更高。",paraId:4,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/temperature-compare.json',\n  },\n  children: [\n    {\n      type: 'area',\n      data: {\n        transform: [\n          // 将两个城市的添加 fold 成两个字段：city + temperature。\n          {\n            type: 'fold',\n            fields: ['New York', 'San Francisco'],\n            key: 'city',\n            value: 'temperature',\n          },\n        ],\n      },\n      encode: {\n        x: (d) => new Date(d.date),\n        y: 'temperature',\n        color: 'city',\n        shape: 'hvh',\n      },\n      transform: [{ type: 'diffY' }], // 在这里对分组的 y 进行差值计算。\n      style: { opacity: 0.5 },\n    },\n    {\n      type: 'line',\n      encode: { x: (d) => new Date(d.date), y: 'San Francisco', shape: 'hvh' },\n      style: { stroke: '#000' },\n    },\n  ],\n});\n\nchart.render();\n",paraId:5,tocIndex:1},{value:"属性",paraId:6,tocIndex:2},{value:"描述",paraId:6,tocIndex:2},{value:"类型",paraId:6,tocIndex:2},{value:"默认值",paraId:6,tocIndex:2},{value:"groupBy",paraId:6,tocIndex:2},{value:"按照哪个通道分组数据",paraId:6,tocIndex:2},{value:"ChannelTypes",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"ChannelTypes[]",paraId:6,tocIndex:2},{value:"x",paraId:6,tocIndex:2},{value:"在 ",paraId:7,tocIndex:3},{value:"diffY",paraId:7,tocIndex:3},{value:" 执行的时候，需要将数据进行分组，在每个分组中执行 ",paraId:7,tocIndex:3},{value:"diffY",paraId:7,tocIndex:3},{value:" 的计算逻辑，比如对于面积图，需要把同一个 x 值下的 y 数据变成一个组，然后在组内做最大最小值的处理逻辑，所以 ",paraId:7,tocIndex:3},{value:"groupBy",paraId:7,tocIndex:3},{value:" 设置为 ",paraId:7,tocIndex:3},{value:"x",paraId:7,tocIndex:3},{value:" 通道。",paraId:7,tocIndex:3},{value:"理论上，",paraId:8,tocIndex:3},{value:"groupBy",paraId:8,tocIndex:3},{value:" 可以设置为所有的通道值，具体可以参考 ",paraId:8,tocIndex:3},{value:"encode",paraId:9,tocIndex:3},{value:" 文档。所有的枚举值如下：",paraId:8,tocIndex:3},{value:"export type ChannelTypes =\n  | 'x'\n  | 'y'\n  | 'z'\n  | 'x1'\n  | 'y1'\n  | 'series'\n  | 'color'\n  | 'opacity'\n  | 'shape'\n  | 'size'\n  | 'key'\n  | 'groupKey'\n  | 'position'\n  | 'series'\n  | 'enterType'\n  | 'enterEasing'\n  | 'enterDuration'\n  | 'enterDelay'\n  | 'updateType'\n  | 'updateEasing'\n  | 'updateDuration'\n  | 'updateDelay'\n  | 'exitType'\n  | 'exitEasing'\n  | 'exitDuration'\n  | 'exitDelay'\n  | `position${number}`;\n",paraId:10,tocIndex:3},{value:"见上述",paraId:11,tocIndex:4},{value:"使用场景",paraId:11,tocIndex:4},{value:"文档。",paraId:11,tocIndex:4}]},21522:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(63016);const t=[{value:"dodgeX",paraId:0,tocIndex:0},{value:" 是一种分组布局转换，它通过生成并应用 ",paraId:0,tocIndex:0},{value:"series",paraId:0,tocIndex:0},{value:" 通道值，使图表元素能够按系列进行分组展示。",paraId:0,tocIndex:0},{value:"dodgeX",paraId:0,tocIndex:0},{value:" 转换主要通过以下步骤工作：",paraId:0,tocIndex:0},{value:"按分组条件（默认为 ",paraId:1,tocIndex:0},{value:"x",paraId:1,tocIndex:0},{value:" 通道）将数据进行分组",paraId:1,tocIndex:0},{value:"使用 ",paraId:1,tocIndex:0},{value:"color",paraId:1,tocIndex:0},{value:" 通道的值生成 ",paraId:1,tocIndex:0},{value:"series",paraId:1,tocIndex:0},{value:" 通道的值",paraId:1,tocIndex:0},{value:"按顺序和间距调整同一分组内不同系列的坐标位置，形成并列结构",paraId:1,tocIndex:0},{value:"dodgeX",paraId:2,tocIndex:1},{value:" 转换主要用于将同组数据按系列在坐标系上错开排列的场景，以突显各系列之间的数据差异和分布特征。",paraId:2,tocIndex:1},{value:"例如下面的案例展示了美国各州不同年龄段人口的分布情况。",paraId:3,tocIndex:1},{value:"未使用 ",paraId:4,tocIndex:1},{value:"dodgeX",paraId:4,tocIndex:1},{value:" 转换前",paraId:4,tocIndex:1},{value:"：数据会堆叠在一起，无法清晰看到各年龄段的对比",paraId:4,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  axis: { y: { labelFormatter: '~s' } },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'sortX', by: 'y', reverse: true, slice: 6 },\n    // 注意：这里没有使用 dodgeX 转换\n  ],\n});\n\nchart.render();\n",paraId:5,tocIndex:1},{value:"使用 ",paraId:6,tocIndex:1},{value:"dodgeX",paraId:6,tocIndex:1},{value:" 转换后",paraId:6,tocIndex:1},{value:"：通过 ",paraId:6,tocIndex:1},{value:"dodgeX",paraId:6,tocIndex:1},{value:" 转换让不同年龄段的数据在同一州内并排展示，便于直观比较。",paraId:6,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  axis: { y: { labelFormatter: '~s' } },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'sortX', by: 'y', reverse: true, slice: 6 },\n    { type: 'dodgeX' }, // 应用 dodgeX 转换，实现分组并排效果\n  ],\n});\n\nchart.render();\n",paraId:7,tocIndex:1},{value:"属性",paraId:8,tocIndex:2},{value:"描述",paraId:8,tocIndex:2},{value:"类型",paraId:8,tocIndex:2},{value:"默认值",paraId:8,tocIndex:2},{value:"必选",paraId:8,tocIndex:2},{value:"groupBy",paraId:8,tocIndex:2},{value:"数据分组的通道或通道组合",paraId:8,tocIndex:2},{value:"string | string[]",paraId:8,tocIndex:2},{value:"x",paraId:8,tocIndex:2},{value:"orderBy",paraId:8,tocIndex:2},{value:"分组内元素的排序规则",paraId:8,tocIndex:2},{value:"TransformOrder",paraId:8,tocIndex:2},{value:"() => null",paraId:8,tocIndex:2},{value:"reverse",paraId:8,tocIndex:2},{value:"是否逆序排列分组内的元素",paraId:8,tocIndex:2},{value:"boolean",paraId:8,tocIndex:2},{value:"false",paraId:8,tocIndex:2},{value:"padding",paraId:8,tocIndex:2},{value:"分组内元素之间的间距（0 ~ 1）",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:"0",paraId:8,tocIndex:2},{value:"groupBy",paraId:9,tocIndex:3},{value:" 用于指定数据分组的通道或通道组合，默认按 ",paraId:9,tocIndex:3},{value:"x",paraId:9,tocIndex:3},{value:" 通道分组，也可以指定为其他通道或多个通道的组合。",paraId:9,tocIndex:3},{value:"orderBy",paraId:10,tocIndex:4},{value:" 用于指定分组内元素的排序规则，支持多种排序策略：",paraId:10,tocIndex:4},{value:"type Primitive = number | string | boolean | Date;\n\ntype TransformOrder =\n  | 'value'\n  | 'sum'\n  | 'series'\n  | 'maxIndex'\n  | string[]\n  | null\n  | ((data: Record<string, Primitive>) => Primitive);\n",paraId:11,tocIndex:4},{value:"reverse",paraId:12,tocIndex:5},{value:" 用于控制是否逆序排列分组内的元素。当设置为 true 时，分组内的元素会以与默认相反的顺序排列。",paraId:12,tocIndex:5},{value:"padding",paraId:13,tocIndex:6},{value:" 用于控制分组内元素之间的间距，取值范围为 0 到 1。值越大，元素之间的间距越大；当值为 0 时，元素之间没有间距。",paraId:13,tocIndex:6},{value:"以下示例展示了 ",paraId:14,tocIndex:7},{value:"dodgeX",paraId:14,tocIndex:7},{value:" 转换各配置项的功能。我们通过对比来查看转换前后的差异：",paraId:14,tocIndex:7},{value:"转换前",paraId:15,tocIndex:7},{value:"：不同部门的数据会堆叠显示，难以进行横向对比",paraId:15,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  { 季度: 'Q1', 部门: '销售部', 业绩: 90, 年份: '2024' },\n  { 季度: 'Q1', 部门: '市场部', 业绩: 80, 年份: '2024' },\n  { 季度: 'Q1', 部门: '研发部', 业绩: 70, 年份: '2024' },\n  { 季度: 'Q2', 部门: '销售部', 业绩: 90, 年份: '2024' },\n  { 季度: 'Q2', 部门: '市场部', 业绩: 70, 年份: '2024' },\n  { 季度: 'Q2', 部门: '研发部', 业绩: 80, 年份: '2024' },\n  { 季度: 'Q3', 部门: '销售部', 业绩: 70, 年份: '2024' },\n  { 季度: 'Q3', 部门: '市场部', 业绩: 80, 年份: '2024' },\n  { 季度: 'Q3', 部门: '研发部', 业绩: 90, 年份: '2024' },\n  { 季度: 'Q4', 部门: '销售部', 业绩: 80, 年份: '2024' },\n  { 季度: 'Q4', 部门: '市场部', 业绩: 70, 年份: '2024' },\n  { 季度: 'Q4', 部门: '研发部', 业绩: 90, 年份: '2024' },\n];\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data,\n  encode: {\n    x: '季度',\n    y: '业绩',\n    color: '部门',\n  },\n  // 注意：这里没有使用任何转换\n});\n\nchart.render();\n",paraId:16,tocIndex:7},{value:"转换后",paraId:17,tocIndex:7},{value:"：应用 ",paraId:17,tocIndex:7},{value:"dodgeX",paraId:17,tocIndex:7},{value:" 转换后的效果，展示了各配置项的功能：",paraId:17,tocIndex:7},{value:"groupBy",paraId:18,tocIndex:7},{value:": 按 ",paraId:18,tocIndex:7},{value:"x",paraId:18,tocIndex:7},{value:" 通道（季度）分组显示各部门数据",paraId:18,tocIndex:7},{value:"orderBy",paraId:18,tocIndex:7},{value:": 设置为 ",paraId:18,tocIndex:7},{value:"value",paraId:18,tocIndex:7},{value:"，按业绩值排序组内元素",paraId:18,tocIndex:7},{value:"reverse",paraId:18,tocIndex:7},{value:": 设置为 true，使组内元素按业绩值从高到低排列",paraId:18,tocIndex:7},{value:"padding",paraId:18,tocIndex:7},{value:": 设置组内元素间距为 0.1",paraId:18,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  { 季度: 'Q1', 部门: '销售部', 业绩: 90, 年份: '2024' },\n  { 季度: 'Q1', 部门: '市场部', 业绩: 80, 年份: '2024' },\n  { 季度: 'Q1', 部门: '研发部', 业绩: 70, 年份: '2024' },\n  { 季度: 'Q2', 部门: '销售部', 业绩: 90, 年份: '2024' },\n  { 季度: 'Q2', 部门: '市场部', 业绩: 70, 年份: '2024' },\n  { 季度: 'Q2', 部门: '研发部', 业绩: 80, 年份: '2024' },\n  { 季度: 'Q3', 部门: '销售部', 业绩: 70, 年份: '2024' },\n  { 季度: 'Q3', 部门: '市场部', 业绩: 80, 年份: '2024' },\n  { 季度: 'Q3', 部门: '研发部', 业绩: 90, 年份: '2024' },\n  { 季度: 'Q4', 部门: '销售部', 业绩: 80, 年份: '2024' },\n  { 季度: 'Q4', 部门: '市场部', 业绩: 70, 年份: '2024' },\n  { 季度: 'Q4', 部门: '研发部', 业绩: 90, 年份: '2024' },\n];\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data,\n  encode: {\n    x: '季度',\n    y: '业绩',\n    color: '部门',\n  },\n  transform: [\n    {\n      type: 'dodgeX', // 应用 dodgeX 转换\n      groupBy: 'x',\n      orderBy: 'value',\n      reverse: true,\n      padding: 0.1,\n    },\n  ],\n});\n\nchart.render();\n",paraId:19,tocIndex:7}]},97969:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(1768);const t=[{value:"flexX 是一个用于调整柱形图宽度的转换方法。它允许根据数据值动态调整柱形的宽度，使得柱形的宽度能够反映另一个数据维度，从而在可视化中展示更多的信息维度。这种转换特别适用于：",paraId:0,tocIndex:0},{value:"需要同时展示两个定量变量的场景，如国家 GDP（宽度）和人均 GDP（高度）的关系",paraId:1,tocIndex:0},{value:"展示市场份额和细分结构的商业分析图表",paraId:1,tocIndex:0},{value:"人口统计数据的多维度可视化，如人口总数（宽度）和年龄分布（高度）",paraId:1,tocIndex:0},{value:"销售数据分析，如销售总额（宽度）和利润率（高度）的关系",paraId:1,tocIndex:0},{value:"通过 flexX 转换，我们可以在传统柱状图的基础上增加一个额外的数据维度，使图表更加信息丰富。",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  width: 800,\n  height: 400,\n  paddingLeft: 60,\n});\n\nchart\n  .interval()\n  .data([\n    { category: '电子产品', sales: 1200000, profitRate: 0.15 },\n    { category: '服装', sales: 800000, profitRate: 0.25 },\n    { category: '食品', sales: 600000, profitRate: 0.12 },\n    { category: '家具', sales: 400000, profitRate: 0.18 },\n    { category: '图书', sales: 200000, profitRate: 0.3 },\n  ])\n  .transform({ type: 'flexX', field: 'sales' })\n  .encode('x', 'category')\n  .encode('y', 'profitRate')\n  .encode('color', 'category')\n  .scale('y', { nice: true })\n  .axis('y', {\n    title: '利润率',\n    labelFormatter: '.0%',\n  });\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"不等宽柱形图",paraId:4,tocIndex:1},{value:"：当需要柱子的宽度反映数据的某个维度时，例如国家 GDP 总量决定柱子宽度，而柱高展示人均 GDP。",paraId:4,tocIndex:1},{value:"马利梅柯图（Marimekko Chart）",paraId:5,tocIndex:1},{value:"：结合 stackY 和 normalizeY 转换，可以创建复杂的商业分析图表，展示市场份额和细分数据。\n",paraId:5,tocIndex:1},{value:"\n使用国家 GDP 总量作为柱形宽度，人均 GDP 作为柱形高度：",paraId:5,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  width: 1000,\n  paddingBottom: 100,\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/90873879-09d7-4842-a493-03fb560267bc.csv',\n  })\n  .transform({ type: 'flexX', field: 'gdp' })\n  .encode('x', 'country')\n  .encode('y', 'value')\n  .encode('color', 'country')\n  .axis('y', { labelFormatter: '~s' });\nchart.render();\n",paraId:6,tocIndex:1},{value:"属性",paraId:7,tocIndex:2},{value:"描述",paraId:7,tocIndex:2},{value:"类型",paraId:7,tocIndex:2},{value:"默认值",paraId:7,tocIndex:2},{value:"必选",paraId:7,tocIndex:2},{value:"field",paraId:7,tocIndex:2},{value:"指定生成权重数组的字段",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"(d: any) => Primitive[]",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"否",paraId:7,tocIndex:2},{value:"channel",paraId:7,tocIndex:2},{value:"指定生成权重数组的通道",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:"y",paraId:7,tocIndex:2},{value:"否",paraId:7,tocIndex:2},{value:"reducer",paraId:7,tocIndex:2},{value:"聚合每一组权重的函数",paraId:7,tocIndex:2},{value:"Reducer",paraId:7,tocIndex:2},{value:"sum",paraId:7,tocIndex:2},{value:"否",paraId:7,tocIndex:2},{value:"// 基础数据类型\ntype Primitive = number | string | boolean | Date;\n\n// 聚合函数类型\ntype Reducer = 'sum' | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:8,tocIndex:3},{value:"field",paraId:9,tocIndex:4},{value:": 用于指定柱形宽度的数据字段。当设置了 field 时，其优先级高于 channel。",paraId:9,tocIndex:4},{value:"channel",paraId:9,tocIndex:4},{value:": 指定用于计算柱形宽度的编码通道，默认使用 'y' 通道的值。",paraId:9,tocIndex:4},{value:"reducer",paraId:9,tocIndex:4},{value:": 聚合函数，用于计算最终的宽度值。默认使用 'sum' 求和。",paraId:9,tocIndex:4},{value:"结合 stackY 和 normalizeY 转换创建市场分析图：",paraId:10,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  width: 900,\n  height: 800,\n  paddingLeft: 0,\n  paddingRight: 0,\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/3041da62-1bf4-4849-aac3-01a387544bf4.csv',\n  })\n  .transform({ type: 'flexX', reducer: 'sum' })\n  .transform({ type: 'stackY' })\n  .transform({ type: 'normalizeY' })\n  .encode('x', 'market')\n  .encode('y', 'value')\n  .encode('color', 'segment')\n  .scale('x', { paddingOuter: 0, paddingInner: 0.01 });\nchart.render();\n",paraId:11,tocIndex:6},{value:"在这个例子中，flexX 转换使得每个市场部分的宽度与其总价值成正比，结合堆叠和归一化处理，可以清晰地展示市场份额的分布情况。",paraId:12,tocIndex:6},{value:"这个例子展示了如何使用 flexX 来可视化人口数据，其中柱子的宽度表示州/省的总人口数量，高度表示人口密度，颜色区分不同地区。",paraId:13,tocIndex:6},{value:"展示每月销售数据，使用交易量作为宽度，价格变化率作为高度：",paraId:14,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  width: 800,\n  height: 400,\n  paddingLeft: 60,\n  data: [\n    { month: '1月', volume: 5000, priceChange: 0.08 },\n    { month: '2月', volume: 8000, priceChange: -0.05 },\n    { month: '3月', volume: 12000, priceChange: 0.12 },\n    { month: '4月', volume: 6000, priceChange: -0.03 },\n    { month: '5月', volume: 9000, priceChange: 0.15 },\n    { month: '6月', volume: 15000, priceChange: -0.08 },\n  ],\n  encode: {\n    x: 'month',\n    y: 'priceChange',\n    color: (d) => (d.priceChange > 0 ? 'red' : 'green'),\n  },\n  transform: [{ type: 'flexX', field: 'volume' }],\n  scale: { y: { nice: true } },\n  style: { radius: 4 },\n  axis: { y: { title: '价格变化率', labelFormatter: '.0%' } },\n});\n\nchart.render();\n",paraId:15,tocIndex:7},{value:"这个时间序列示例展示了如何使用 flexX 来可视化交易数据，其中柱形的宽度表示交易量大小，高度表示价格变化率，颜色区分涨跌情况。通过这种方式，我们可以同时观察到交易活跃度和价格走势的关系。",paraId:16,tocIndex:7}]},32194:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(50056);const t=[{value:"group",paraId:0,tocIndex:0},{value:" 函数是数据处理的一个重要工具，用于对数据进行分组操作，对离散的 x 和 连续的 y 通道进行分组，并且对通道根据指定的 Reducer 进行聚合。\n它可以将数据集按照指定的字段或条件进行分组，以便后续的图表渲染或数据分析能够基于分组后的结果进行处理。",paraId:0,tocIndex:0},{value:"同时，",paraId:1,tocIndex:0},{value:"group",paraId:1,tocIndex:0},{value:" 函数支持自定义分组逻辑，允许用户根据业务需求对数据进行灵活的分组操作，通常与 ",paraId:1,tocIndex:0},{value:"data",paraId:1,tocIndex:0},{value:" 或 ",paraId:1,tocIndex:0},{value:"transform",paraId:1,tocIndex:0},{value:" 方法结合使用。以及 ",paraId:1,tocIndex:0},{value:"group",paraId:1,tocIndex:0},{value:" 是个系列函数，其中包含了预置的类似函数还有 ",paraId:1,tocIndex:0},{value:"groupX",paraId:2,tocIndex:0},{value:"、",paraId:1,tocIndex:0},{value:"groupY",paraId:3,tocIndex:0},{value:"、",paraId:1,tocIndex:0},{value:"groupColor",paraId:4,tocIndex:0},{value:" 等等，主要是为了方便用户使用。它们的功能和用法基本一致，只是针对不同的 channel 做了分装，可以分别参考其中用法。",paraId:1,tocIndex:0},{value:"group",paraId:5,tocIndex:1},{value:" 函数适用于以下场景：",paraId:5,tocIndex:1},{value:"当需要对数据按某一维度（如时间、类别）进行分组并计算汇总值（如求和、平均值）时。",paraId:6,tocIndex:2},{value:"在图表中需要按某个字段将数据分成不同的组别，以便绘制分组柱状图、堆叠图等。",paraId:7,tocIndex:3},{value:"将原始数据的结构调整为适合特定图表类型（如从扁平数据转为嵌套数据）。",paraId:8,tocIndex:4},{value:"在多维数据分析中，将数据按多个字段分组以便进一步分析或可视化。",paraId:9,tocIndex:5},{value:"属性",paraId:10,tocIndex:6},{value:"描述",paraId:10,tocIndex:6},{value:"类型",paraId:10,tocIndex:6},{value:"默认值",paraId:10,tocIndex:6},{value:"channels",paraId:10,tocIndex:6},{value:"针对哪些通道做数据分组聚合",paraId:10,tocIndex:6},{value:"string",paraId:10,tocIndex:6},{value:" | ",paraId:10,tocIndex:6},{value:"string[]",paraId:10,tocIndex:6},{value:"['x', 'y']",paraId:10,tocIndex:6},{value:"[channel]",paraId:10,tocIndex:6},{value:"输出到具体 mark 的 channel 数据的聚合方式",paraId:10,tocIndex:6},{value:"Reducer",paraId:10,tocIndex:6},{value:"Channel 表示数据如何映射到图形的视觉属性（如位置、颜色、大小等）。在 AntV 中，channel 是构建可视化图表的基础，通过将数据字段绑定到特定的视觉通道，生成对应的图形表示。理论上，",paraId:11,tocIndex:7},{value:"channel",paraId:11,tocIndex:7},{value:" 可以设置为所有的通道值，具体可以参考 ",paraId:11,tocIndex:7},{value:"encode",paraId:12,tocIndex:7},{value:" 文档。",paraId:11,tocIndex:7},{value:"所有的枚举值如下：",paraId:13,tocIndex:7},{value:"type Channel =\n  | 'x'\n  | 'y'\n  | 'z'\n  | 'x1'\n  | 'y1'\n  | 'series'\n  | 'color'\n  | 'opacity'\n  | 'shape'\n  | 'size'\n  | 'key'\n  | 'groupKey'\n  | 'position'\n  | 'series'\n  | 'enterType'\n  | 'enterEasing'\n  | 'enterDuration'\n  | 'enterDelay'\n  | 'updateType'\n  | 'updateEasing'\n  | 'updateDuration'\n  | 'updateDelay'\n  | 'exitType'\n  | 'exitEasing'\n  | 'exitDuration'\n  | 'exitDelay'\n  | `position${number}`;\n",paraId:14,tocIndex:7},{value:"根据以上的枚举，我们列举下的 channel 类型供参考，常用的包括：",paraId:15,tocIndex:8},{value:"位置通道（Position Channels）：",paraId:16,tocIndex:8},{value:"x：x 轴位置，通常映射横坐标数据。",paraId:17,tocIndex:8},{value:"y：y 轴位置，通常映射纵坐标数据。",paraId:17,tocIndex:8},{value:"几何属性通道（Geometric Channels）：",paraId:18,tocIndex:8},{value:"size：图形的大小（如点的大小、线的粗细）。",paraId:19,tocIndex:8},{value:"shape：图形的形状（如点的形状：圆形、方形）。",paraId:19,tocIndex:8},{value:"颜色通道（Color Channels）：",paraId:20,tocIndex:8},{value:"color：图形的颜色，用于区分类别或表示数值范围。",paraId:21,tocIndex:8},{value:"我们提供了对应的 ",paraId:22,tocIndex:8},{value:"groupX",paraId:23,tocIndex:8},{value:"、",paraId:22,tocIndex:8},{value:"groupY",paraId:24,tocIndex:8},{value:" 以及 ",paraId:22,tocIndex:8},{value:"groupColor",paraId:25,tocIndex:8},{value:" 等预置函数供调用。",paraId:22,tocIndex:8},{value:"group",paraId:26,tocIndex:9},{value:" 函数的 ",paraId:26,tocIndex:9},{value:"channel",paraId:26,tocIndex:9},{value:" 属性可以是一个字符串或一个函数。字符串表示要聚合的字段名，函数则用于自定义聚合逻辑。函数接收两个参数：",paraId:26,tocIndex:9},{value:"I",paraId:27,tocIndex:9},{value:"：一个数组，表示要聚合的值",paraId:27,tocIndex:9},{value:"V",paraId:27,tocIndex:9},{value:"：一个数组，表示要聚合的值对应的原始数据(可以是对象或其他类型) ",paraId:27,tocIndex:9},{value:"type Primitive = number | string | boolean | Date;",paraId:27,tocIndex:9},{value:"预设的 ",paraId:28,tocIndex:9},{value:"Reducer",paraId:28,tocIndex:9},{value:" 也可以直接使用，如 ",paraId:28,tocIndex:9},{value:"mean",paraId:28,tocIndex:9},{value:"、",paraId:28,tocIndex:9},{value:"max",paraId:28,tocIndex:9},{value:"、",paraId:28,tocIndex:9},{value:"count",paraId:28,tocIndex:9},{value:" 等，以下是一些常用的 ",paraId:28,tocIndex:9},{value:"Reducer",paraId:28,tocIndex:9},{value:"：",paraId:28,tocIndex:9},{value:"type Reducer =\n  | 'mean'\n  | 'max'\n  | 'count'\n  | 'min'\n  | 'median'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:29,tocIndex:9},{value:"以下是一个简单的示例，展示如何使用 ",paraId:30,tocIndex:11},{value:"group",paraId:30,tocIndex:11},{value:" 函数对数据进行分组并绘制分组柱状图。",paraId:30,tocIndex:11},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { year: '1951 年', sales: 38 },\n    { year: '1952 年', sales: 52 },\n    { year: '1956 年', sales: 61 },\n    { year: '1957 年', sales: 145 },\n    { year: '1958 年', sales: 48 },\n    { year: '1959 年', sales: 38 },\n    { year: '1960 年', sales: 38 },\n    { year: '1962 年', sales: 38 },\n    { year: '1951 年', sales: 38 },\n    { year: '1952 年', sales: 52 },\n    { year: '1956 年', sales: 61 },\n    { year: '1957 年', sales: 145 },\n    { year: '1958 年', sales: 48 },\n    { year: '1959 年', sales: 38 },\n    { year: '1960 年', sales: 38 },\n    { year: '1962 年', sales: 38 },\n  ],\n  encode: { x: 'year', y: 'sales' },\n  transform: [{ type: 'group', channels: ['x'], y: 'sum' }],\n});\n\nchart.render();\n",paraId:31,tocIndex:11},{value:"示例说明",paraId:32,tocIndex:11},{value:"在这个示例中，我们首先定义了一组销售数据 ",paraId:33,tocIndex:11},{value:"data",paraId:33,tocIndex:11},{value:"，包含年份和销售额。",paraId:33,tocIndex:11},{value:"在上述代码中，",paraId:33,tocIndex:11},{value:"transform",paraId:33,tocIndex:11},{value:" 方法中使用了 ",paraId:33,tocIndex:11},{value:"group",paraId:33,tocIndex:11},{value:" 类型的数据转换，按 ",paraId:33,tocIndex:11},{value:"x",paraId:33,tocIndex:11},{value:" channel 对数据进行分组。",paraId:33,tocIndex:11},{value:"分组后，数据会按照 ",paraId:33,tocIndex:11},{value:"x",paraId:33,tocIndex:11},{value:" channel 的值进行聚合，计算出每个 ",paraId:33,tocIndex:11},{value:"year",paraId:33,tocIndex:11},{value:" 的 ",paraId:33,tocIndex:11},{value:"sales",paraId:33,tocIndex:11},{value:" 总和。",paraId:33,tocIndex:11},{value:"最后通过 ",paraId:33,tocIndex:11},{value:"encode",paraId:33,tocIndex:11},{value:" 方法将分组后的数据映射到图表的 ",paraId:33,tocIndex:11},{value:"x",paraId:33,tocIndex:11},{value:" 和 ",paraId:33,tocIndex:11},{value:"y",paraId:33,tocIndex:11},{value:" 轴上进行渲染。",paraId:33,tocIndex:11},{value:"group",paraId:34,tocIndex:12},{value:" 不仅仅是对数据进行分组，还可以对数据进行聚合计算。比如我们可以对数据进行求和、平均值等操作。",paraId:34,tocIndex:12},{value:"下面我们根据具体的数据来进行分组，使用 ",paraId:35,tocIndex:12},{value:"group",paraId:35,tocIndex:12},{value:" 函数对数据进行分组处理，并在图表中展示不同的分组结果。\n下面这个示例展示了如何使用 ",paraId:35,tocIndex:12},{value:"group",paraId:35,tocIndex:12},{value:" 函数对数据进行分组并去最大值（",paraId:35,tocIndex:12},{value:"max",paraId:35,tocIndex:12},{value:"），并在图表中展示不同的分组结果。",paraId:35,tocIndex:12},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'cell',\n  height: 300,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n  },\n  encode: {\n    x: (d) => new Date(d.date).getUTCDate(),\n    y: (d) => new Date(d.date).getUTCMonth(),\n    color: 'temp_max',\n  },\n  transform: [{ type: 'group', color: 'max' }],\n  scale: { color: { type: 'sequential', palette: 'gnBu' } },\n  style: { inset: 0.5 },\n});\n\nchart.render();\n",paraId:36,tocIndex:12}]},13498:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(11385);const t=[{value:"对离散的 color 通道进行分组，并且对通道根据指定的 Reducer 进行聚合。等效于 ",paraId:0},{value:"channels = ['color']",paraId:0},{value:" 的 ",paraId:0},{value:"group",paraId:1},{value:"。",paraId:0},{value:"groupColor",paraId:2},{value:" 是 ",paraId:2},{value:"group",paraId:2},{value:" 函数组的一个变种，专门用于对离散的 ",paraId:2},{value:"color",paraId:2},{value:" 通道进行分组，并且对通道根据指定的 Reducer 进行聚合。等效于 ",paraId:2},{value:"channels = ['color']",paraId:2},{value:" 的 ",paraId:2},{value:"group",paraId:3},{value:"，具体的使用方式和配置项与 group 函数相同。下面，只是针对 ",paraId:2},{value:"groupColor",paraId:2},{value:" 函数的使用场景和配置项进行说明。",paraId:2},{value:"属性",paraId:4,tocIndex:0},{value:"描述",paraId:4,tocIndex:0},{value:"类型",paraId:4,tocIndex:0},{value:"默认值",paraId:4,tocIndex:0},{value:"[channel]",paraId:4,tocIndex:0},{value:"输出到具体 mark 的 channel 数据的聚合方式",paraId:4,tocIndex:0},{value:"Reducer",paraId:4,tocIndex:0},{value:"有关 ",paraId:5,tocIndex:0},{value:"Reducer",paraId:5,tocIndex:0},{value:" 的详细说明，请参考 ",paraId:5,tocIndex:0},{value:"group",paraId:6,tocIndex:0},{value:" 函数的配置项。",paraId:5,tocIndex:0},{value:"下面例子中,我们获取 ",paraId:7,tocIndex:1},{value:"penguins.json",paraId:7,tocIndex:1},{value:" 数据集中的 ",paraId:7,tocIndex:1},{value:"species",paraId:7,tocIndex:1},{value:" 和 ",paraId:7,tocIndex:1},{value:"sex",paraId:7,tocIndex:1},{value:" 字段,并且对 ",paraId:7,tocIndex:1},{value:"species",paraId:7,tocIndex:1},{value:" 字段进行分组,对 ",paraId:7,tocIndex:1},{value:"sex",paraId:7,tocIndex:1},{value:" 字段进行计数聚合。最后将 ",paraId:7,tocIndex:1},{value:"species",paraId:7,tocIndex:1},{value:" 字段映射到 ",paraId:7,tocIndex:1},{value:"color",paraId:7,tocIndex:1},{value:" 通道上。注意，在对应的 mark 中有 transform 方法可以使用数据的变换。",paraId:7,tocIndex:1},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  height: 120,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n  },\n  encode: { color: 'sex' },\n  transform: [\n    { type: 'groupColor', y: 'count' },\n    { type: 'stackY' },\n    { type: 'normalizeY' },\n  ],\n  coordinate: { transform: [{ type: 'transpose' }] },\n  axis: { y: { labelFormatter: '.0%' } },\n  labels: [{ text: 'sex', position: 'inside' }],\n});\n\nchart.render();\n",paraId:8,tocIndex:1},{value:"说明：",paraId:9,tocIndex:1},{value:"groupColor",paraId:10,tocIndex:1},{value:" 函数的 ",paraId:10,tocIndex:1},{value:"y",paraId:10,tocIndex:1},{value:" 属性指定了对 ",paraId:10,tocIndex:1},{value:"sex",paraId:10,tocIndex:1},{value:" 字段进行计数聚合；",paraId:10,tocIndex:1},{value:"stackY",paraId:10,tocIndex:1},{value:" 函数将 ",paraId:10,tocIndex:1},{value:"y",paraId:10,tocIndex:1},{value:" 通道进行堆叠；",paraId:10,tocIndex:1},{value:"normalizeY",paraId:10,tocIndex:1},{value:" 函数将 ",paraId:10,tocIndex:1},{value:"y",paraId:10,tocIndex:1},{value:" 通道进行归一化处理；",paraId:10,tocIndex:1},{value:"transpose",paraId:10,tocIndex:1},{value:" 函数将坐标系进行转置；",paraId:10,tocIndex:1},{value:"最后通过 ",paraId:10,tocIndex:1},{value:"labels",paraId:10,tocIndex:1},{value:" 函数在图表中添加标签。",paraId:10,tocIndex:1}]},89013:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(61076);const t=[{value:"groupY",paraId:0},{value:" 是 ",paraId:0},{value:"group",paraId:0},{value:" 函数组的一个变种，专门用于对离散的 ",paraId:0},{value:"x",paraId:0},{value:" 通道进行分组，并且对通道根据指定的 Reducer 进行聚合。等效于 ",paraId:0},{value:"channels = ['x']",paraId:0},{value:" 的 ",paraId:0},{value:"group",paraId:1},{value:"，具体的使用方式和配置项与 group 函数相同。下面，只是针对 ",paraId:0},{value:"groupX",paraId:0},{value:" 函数的使用场景和配置项进行说明。",paraId:0},{value:"属性",paraId:2,tocIndex:0},{value:"描述",paraId:2,tocIndex:0},{value:"类型",paraId:2,tocIndex:0},{value:"默认值",paraId:2,tocIndex:0},{value:"[channel]",paraId:2,tocIndex:0},{value:"输出到具体 mark 的 channel 数据的聚合方式",paraId:2,tocIndex:0},{value:"Reducer",paraId:2,tocIndex:0},{value:"有关 ",paraId:3,tocIndex:0},{value:"Reducer",paraId:3,tocIndex:0},{value:" 的详细说明，请参考 ",paraId:3,tocIndex:0},{value:"group",paraId:4,tocIndex:0},{value:" 函数的配置项。",paraId:3,tocIndex:0},{value:"下面，我们展现个人群的年龄分布情况。我们使用 ",paraId:5,tocIndex:1},{value:"groupX",paraId:5,tocIndex:1},{value:" 函数对数据进行分组，并且对 ",paraId:5,tocIndex:1},{value:"x",paraId:5,tocIndex:1},{value:" 通道进行聚合，计算出每个 ",paraId:5,tocIndex:1},{value:"state",paraId:5,tocIndex:1},{value:" 的 ",paraId:5,tocIndex:1},{value:"population",paraId:5,tocIndex:1},{value:" 折线长度和分布情况。注意在对应的 mark 中有 transform 方法可以使用数据的变换。",paraId:5,tocIndex:1},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nchart.coordinate({ transform: [{ type: 'transpose' }] });\n\nchart.data({\n  type: 'fetch',\n  value:\n    'https://gw.alipayobjects.com/os/bmw-prod/b6f2ff26-b232-447d-a613-0df5e30104a0.csv',\n});\n\nchart\n  .link()\n  .scale('y', { formatter: '.0%' })\n  .transform({ type: 'groupX', y: 'min', y1: 'max' })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .style('stroke', '#000');\n\nchart\n  .point()\n  .scale('color', { palette: 'spectral' })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .encode('shape', 'point')\n  .encode('color', 'age');\n\nchart.render();\n",paraId:6,tocIndex:1},{value:"说明：",paraId:7,tocIndex:1},{value:"在这个示例中，我们首先定义了一组销售数据 ",paraId:8,tocIndex:1},{value:"data",paraId:8,tocIndex:1},{value:"，包含地区、年龄以及人口；",paraId:8,tocIndex:1},{value:"在上述代码中，",paraId:8,tocIndex:1},{value:"transform",paraId:8,tocIndex:1},{value:" 方法中使用了 ",paraId:8,tocIndex:1},{value:"groupX",paraId:8,tocIndex:1},{value:" 类型的数据转换，按 ",paraId:8,tocIndex:1},{value:"x",paraId:8,tocIndex:1},{value:" channel 对数据进行分组，'y' 和 'y1' 分别取最小值和最大值；",paraId:8,tocIndex:1},{value:"分组后，数据会按照 ",paraId:8,tocIndex:1},{value:"x",paraId:8,tocIndex:1},{value:" channel 的值进行聚合，计算出每个 ",paraId:8,tocIndex:1},{value:"state",paraId:8,tocIndex:1},{value:" 的 ",paraId:8,tocIndex:1},{value:"population",paraId:8,tocIndex:1},{value:" 折线长度；",paraId:8,tocIndex:1},{value:"最后通过 ",paraId:8,tocIndex:1},{value:"encode",paraId:8,tocIndex:1},{value:" 方法将分组后的数据映射到图表的 ",paraId:8,tocIndex:1},{value:"x",paraId:8,tocIndex:1},{value:" 和 ",paraId:8,tocIndex:1},{value:"y",paraId:8,tocIndex:1},{value:" 轴上进行点状渲染。",paraId:8,tocIndex:1}]},36984:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(56714);const t=[{value:"groupY",paraId:0},{value:" 是 ",paraId:0},{value:"group",paraId:0},{value:" 函数组的一个变种，专门用于对离散的 ",paraId:0},{value:"y",paraId:0},{value:" 通道进行分组，并且对通道根据指定的 Reducer 进行聚合。等效于 ",paraId:0},{value:"channels = ['y']",paraId:0},{value:" 的 ",paraId:0},{value:"group",paraId:1},{value:"，具体的使用方式和配置项与 group 函数相同。下面，只是针对 groupY 函数的使用场景和配置项进行说明。",paraId:0},{value:"属性",paraId:2,tocIndex:0},{value:"描述",paraId:2,tocIndex:0},{value:"类型",paraId:2,tocIndex:0},{value:"默认值",paraId:2,tocIndex:0},{value:"[channel]",paraId:2,tocIndex:0},{value:"输出到具体 mark 的 channel 数据的聚合方式",paraId:2,tocIndex:0},{value:"Reducer",paraId:2,tocIndex:0},{value:"有关 ",paraId:3,tocIndex:0},{value:"Reducer",paraId:3,tocIndex:0},{value:" 的详细说明，请参考 ",paraId:3,tocIndex:0},{value:"group",paraId:4,tocIndex:0},{value:" 函数的配置项。",paraId:3,tocIndex:0},{value:"例如，在对应的 mark 中有 transform 方法可以使用数据的变换。那么我们可以使用 groupY 来对数据进行分组聚合。下面的示例中，我们将对 y 通道进行分组，并计算每个组的最小值和最大值。",paraId:5,tocIndex:1},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'view',\n  height: 180,\n  paddingLeft: 80,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n    transform: [\n      {\n        type: 'map',\n        callback: (d) => ({\n          ...d,\n          body_mass_g: +d.body_mass_g,\n        }),\n      },\n    ],\n  },\n  children: [\n    {\n      type: 'point',\n      encode: { x: 'body_mass_g', y: 'species' },\n      style: { stroke: '#000' },\n    },\n    {\n      type: 'link',\n      encode: { x: 'body_mass_g', y: 'species' },\n      transform: [{ type: 'groupY', x: 'min', x1: 'max' }],\n      style: { stroke: '#000' },\n    },\n    {\n      type: 'point',\n      encode: { y: 'species', x: 'body_mass_g', shape: 'line', size: 12 },\n      transform: [{ type: 'groupY', x: 'median' }],\n      style: { stroke: 'red' },\n    },\n  ],\n});\n\nchart.render();\n",paraId:6,tocIndex:1},{value:"说明：",paraId:7,tocIndex:1},{value:"在这个示例中，我们首先定义了一组企鹅数据 ",paraId:8,tocIndex:1},{value:"data",paraId:8,tocIndex:1},{value:"，包含企鹅的体重和物种;",paraId:8,tocIndex:1},{value:"在上述代码中，",paraId:8,tocIndex:1},{value:"transform",paraId:8,tocIndex:1},{value:" 方法中使用了 ",paraId:8,tocIndex:1},{value:"groupY",paraId:8,tocIndex:1},{value:" 类型的数据转换，按 ",paraId:8,tocIndex:1},{value:"y",paraId:8,tocIndex:1},{value:" channel 对数据进行分组;",paraId:8,tocIndex:1},{value:"分组后，数据会按照 ",paraId:8,tocIndex:1},{value:"y",paraId:8,tocIndex:1},{value:" channel 的值进行聚合，计算出每个 ",paraId:8,tocIndex:1},{value:"species",paraId:8,tocIndex:1},{value:" 的 ",paraId:8,tocIndex:1},{value:"body_mass_g",paraId:8,tocIndex:1},{value:" 最小值和最大值;",paraId:8,tocIndex:1},{value:"最后通过 ",paraId:8,tocIndex:1},{value:"encode",paraId:8,tocIndex:1},{value:" 方法将分组后的数据映射到图表的 ",paraId:8,tocIndex:1},{value:"x",paraId:8,tocIndex:1},{value:" 和 ",paraId:8,tocIndex:1},{value:"y",paraId:8,tocIndex:1},{value:" 轴上进行渲染。",paraId:8,tocIndex:1}]},65547:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(79182);const t=[{value:"jitter 是一种数据处理或调整方法，主要用于解决数据点重叠的问题，尤其在散点图（Scatter Plot）等可视化场景中。当多个数据点在相同或相近的位置上时，会导致视觉上的重叠难以区分，jitter 通过在数据点的 x 或 y 坐标上添加一个小的随机偏移量，使数据点分散开，从而提高可视化效果和可读性。",paraId:0,tocIndex:0},{value:"避免数据点重叠：通过随机偏移，让重叠的点在视觉上分离；",paraId:1,tocIndex:1},{value:"提升数据可读性：在高密度数据场景下，清晰展示每个数据点的分布；",paraId:1,tocIndex:1},{value:"适用于特定场景：常见于散点图、蜂巢图（Bee Swarm Plot）等需要展示个体数据的图表。",paraId:1,tocIndex:1},{value:"注意：jitter 是一种视觉调整方法，可能会稍微改变数据的精确位置，因此不适合对位置精度要求极高的场景。",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:2},{value:"描述",paraId:3,tocIndex:2},{value:"类型",paraId:3,tocIndex:2},{value:"默认值",paraId:3,tocIndex:2},{value:"padding",paraId:3,tocIndex:2},{value:"分组在 x,y 方向上的间距 [0 ~ 1]",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"0",paraId:3,tocIndex:2},{value:"paddingX",paraId:3,tocIndex:2},{value:"分组在 x 方向的间距 [0 ~ 1]",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"0",paraId:3,tocIndex:2},{value:"paddingY",paraId:3,tocIndex:2},{value:"分组在 y 方向的间距 [0 ~ 1]",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"0",paraId:3,tocIndex:2},{value:"random",paraId:3,tocIndex:2},{value:"随机函数，返回值为 [0, 1)",paraId:3,tocIndex:2},{value:"() => number",paraId:3,tocIndex:2},{value:"Math.random",paraId:3,tocIndex:2},{value:"我们先从简单的例子来，绘制一个散点图，数据点在某些位置重叠：",paraId:4,tocIndex:3},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: [\n    { x: 1, y: 2 },\n    { x: 1, y: 2 },\n    { x: 2, y: 3 },\n    { x: 2, y: 3 },\n    { x: 3, y: 4 },\n  ],\n  encode: { x: 'clarity', color: 'clarity' },\n  transform: [{ type: 'jitter' }],\n  legend: false,\n});\n\nchart.render();\n",paraId:5,tocIndex:3},{value:"请注意 ",paraId:6,tocIndex:3},{value:"data",paraId:6,tocIndex:3},{value:" 中有两个数值一样的点，没有 ",paraId:6,tocIndex:3},{value:"jitter",paraId:6,tocIndex:3},{value:" 时，数据点 (1, 2) 和 (2, 3) 的两个点会完全重叠，视觉上只显示一个点。\n应用 ",paraId:6,tocIndex:3},{value:"jitter",paraId:6,tocIndex:3},{value:" 后，这些点会以原位置为中心，随机偏移一小段距离（通常是微小的水平或垂直偏移），使得每个点都可见。",paraId:6,tocIndex:3},{value:"下面是一个散点图的复杂例子，使用 ",paraId:7,tocIndex:4},{value:"jitter",paraId:7,tocIndex:4},{value:" 来避免数据点重叠：",paraId:7,tocIndex:4},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/diamond.json',\n  },\n  encode: { x: 'clarity', color: 'clarity' },\n  transform: [{ type: 'jitter' }],\n  coordinate: { type: 'polar' },\n  legend: false,\n});\n\nchart.render();\n",paraId:8,tocIndex:4},{value:"在这个例子中，我们从一个远程数据源获取数据，并使用 ",paraId:9,tocIndex:4},{value:"jitter",paraId:9,tocIndex:4},{value:" 来处理数据点的重叠问题。通过 ",paraId:9,tocIndex:4},{value:"transform",paraId:9,tocIndex:4},{value:" 属性，我们可以轻松地将 ",paraId:9,tocIndex:4},{value:"jitter",paraId:9,tocIndex:4},{value:" 应用到数据上，从而提高可视化效果。",paraId:9,tocIndex:4}]},27198:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(29634);const t=[{value:"jitterX",paraId:0,tocIndex:0},{value:" 是 ",paraId:0,tocIndex:0},{value:"jitter",paraId:1,tocIndex:0},{value:" 的快捷函数，专门用于处理离散的 ",paraId:0,tocIndex:0},{value:"x",paraId:0,tocIndex:0},{value:" 通道比例尺，生成 ",paraId:0,tocIndex:0},{value:"dx",paraId:0,tocIndex:0},{value:" 通道，实现在某个区域的 ",paraId:0,tocIndex:0},{value:"x",paraId:0,tocIndex:0},{value:" 方向散开的效果。\n它通过在 x 轴上添加随机偏移量，使得数据点在视觉上分散开，从而避免重叠和提高可读性。",paraId:0,tocIndex:0},{value:"jitterX",paraId:2,tocIndex:1},{value:" 适用场景和 ",paraId:2,tocIndex:1},{value:"jitter",paraId:2,tocIndex:1},{value:" 一致，主要用于散点图、蜂巢图等需要展示个体数据的图表。它可以帮助用户更好地理解数据分布，尤其是在数据点密集的情况下。",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:2},{value:"描述",paraId:3,tocIndex:2},{value:"类型",paraId:3,tocIndex:2},{value:"默认值",paraId:3,tocIndex:2},{value:"padding",paraId:3,tocIndex:2},{value:"每个分组之间的间距 [0 ~ 1]",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"0",paraId:3,tocIndex:2},{value:"random",paraId:3,tocIndex:2},{value:"随机函数，返回值为 [0, 1)",paraId:3,tocIndex:2},{value:"() => number",paraId:3,tocIndex:2},{value:"Math.random",paraId:3,tocIndex:2},{value:"简单的示例可以参考 ",paraId:4,tocIndex:3},{value:"jitter",paraId:5,tocIndex:3},{value:" 的示例，下面针对 ",paraId:4,tocIndex:3},{value:"jitterX",paraId:4,tocIndex:3},{value:" 函数的场景使用进行说明和演示。",paraId:4,tocIndex:3},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  },\n  encode: {\n    y: 'Horsepower',\n    x: 'Cylinders',\n    shape: 'hollow',\n    color: 'Cylinders',\n  },\n  transform: [{ type: 'sortX', channel: 'x' }, { type: 'jitterX' }],\n  scale: { x: { type: 'point' }, color: { type: 'ordinal' } },\n});\n\nchart.render();\n",paraId:6,tocIndex:3},{value:"补充说明：和 ",paraId:7,tocIndex:3},{value:"jitter",paraId:7,tocIndex:3},{value:" 函数一样，",paraId:7,tocIndex:3},{value:"jitterX",paraId:7,tocIndex:3},{value:" 是一种视觉调整方法，可能会稍微改变数据的精确位置，因此不适合对位置精度要求极高的场景。\n在使用 ",paraId:7,tocIndex:3},{value:"jitterX",paraId:7,tocIndex:3},{value:" 时，建议根据具体数据和需求进行适当的参数调整，以达到最佳的视觉效果和数据展示效果。",paraId:7,tocIndex:3}]},22849:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(25569);const t=[{value:"jitterY",paraId:0,tocIndex:0},{value:" 是 ",paraId:0,tocIndex:0},{value:"jitter",paraId:1,tocIndex:0},{value:" 的快捷函数，专门用于处理离散的 ",paraId:0,tocIndex:0},{value:"y",paraId:0,tocIndex:0},{value:" 通道比例尺，生成 ",paraId:0,tocIndex:0},{value:"dy",paraId:0,tocIndex:0},{value:" 通道，实现在某个区域的 ",paraId:0,tocIndex:0},{value:"y",paraId:0,tocIndex:0},{value:" 方向散开的效果。\n它通过在 y 轴上添加随机偏移量，使得数据点在视觉上分散开，从而避免重叠和提高可读性。",paraId:0,tocIndex:0},{value:"jitterY",paraId:2,tocIndex:1},{value:" 适用场景和 ",paraId:2,tocIndex:1},{value:"jitter",paraId:2,tocIndex:1},{value:" 一致，主要用于散点图、蜂巢图等需要展示个体数据的图表。它可以帮助用户更好地理解数据分布，尤其是在数据点密集的情况下。",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:2},{value:"描述",paraId:3,tocIndex:2},{value:"类型",paraId:3,tocIndex:2},{value:"默认值",paraId:3,tocIndex:2},{value:"padding",paraId:3,tocIndex:2},{value:"每个分组之间的间距 [0 ~ 1]",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"0",paraId:3,tocIndex:2},{value:"random",paraId:3,tocIndex:2},{value:"随机函数，返回值为 [0, 1)",paraId:3,tocIndex:2},{value:"() => number",paraId:3,tocIndex:2},{value:"Math.random",paraId:3,tocIndex:2},{value:"简单的示例可以参考 ",paraId:4,tocIndex:3},{value:"jitter",paraId:5,tocIndex:3},{value:" 的示例，下面针对 ",paraId:4,tocIndex:3},{value:"jitterY",paraId:4,tocIndex:3},{value:" 函数的场景使用进行说明和演示。",paraId:4,tocIndex:3},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  },\n  encode: { x: 'Horsepower', y: 'Cylinders', color: 'Cylinders' },\n  transform: [{ type: 'sortY' }, { type: 'jitterY' }],\n  scale: { y: { type: 'point' }, color: { type: 'ordinal' } },\n});\n\nchart.render();\n",paraId:6,tocIndex:3},{value:"补充说明：和 ",paraId:7,tocIndex:3},{value:"jitter",paraId:7,tocIndex:3},{value:" 函数一样，",paraId:7,tocIndex:3},{value:"jitterY",paraId:7,tocIndex:3},{value:" 是一种视觉调整方法，可能会稍微改变数据的精确位置，因此不适合对位置精度要求极高的场景。\n在使用 ",paraId:7,tocIndex:3},{value:"jitterY",paraId:7,tocIndex:3},{value:" 时，建议根据具体数据和需求进行适当的参数调整，以达到最佳的视觉效果和数据展示效果。",paraId:7,tocIndex:3}]},5890:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(88319);const t=[{value:"对 y 相关通道（如 y、y1 等）根据指定的 basis 进行归一化处理。归一化会将数据转换为 0 到 1 之间的比例值，使得不同尺度的数据可以在同一个坐标系中进行比较。这个转换会保持数据的相对关系不变，同时使得所有数据都按照相同的标准进行缩放。",paraId:0,tocIndex:0},{value:"下面这个示例展示了如何创建一个百分比堆积柱状图，展示不同年龄段的性别比例。",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  coordinate: { transform: [{ type: 'transpose' }] },\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/87b2ff47-2a33-4509-869c-dae4cdd81163.csv',\n    transform: [\n      {\n        type: 'filter',\n        callback: (d) => d.year === 2000,\n      },\n    ],\n  },\n  transform: [{ type: 'stackY' }, { type: 'normalizeY' }],\n  encode: {\n    x: 'age',\n    y: 'people',\n    color: 'sex',\n  },\n  scale: {\n    color: { type: 'ordinal', range: ['#ca8861', '#675193'] },\n  },\n  axis: {\n    y: { labelFormatter: '.0%' },\n  },\n  labels: [\n    {\n      text: 'people',\n      position: 'inside',\n      style: { fill: 'white' },\n    },\n  ],\n});\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"百分比堆叠图表",paraId:3,tocIndex:1},{value:"：当需要展示各部分占整体的百分比时，常与 stackY 转换一起使用。",paraId:3,tocIndex:1},{value:"数据标准化",paraId:3,tocIndex:1},{value:"：当不同组的数据量级差异较大，但您更关注其分布或比例时。",paraId:3,tocIndex:1},{value:"相对比较",paraId:3,tocIndex:1},{value:"：当需要比较不同类别之间的相对大小而不是绝对值时。",paraId:3,tocIndex:1},{value:"属性名",paraId:4,tocIndex:2},{value:"类型",paraId:4,tocIndex:2},{value:"默认值",paraId:4,tocIndex:2},{value:"说明",paraId:4,tocIndex:2},{value:"groupBy",paraId:4,tocIndex:2},{value:"string | string[]",paraId:4,tocIndex:2},{value:"'x'",paraId:4,tocIndex:2},{value:"用于指定如何对数据进行分组的字段。每个分组将独立进行归一化计算。",paraId:4,tocIndex:2},{value:"basis",paraId:4,tocIndex:2},{value:"'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum' | ((I, Y) => number)",paraId:4,tocIndex:2},{value:"'max'",paraId:4,tocIndex:2},{value:"指定归一化计算的基准值。",paraId:4,tocIndex:2},{value:"用于指定如何对数据进行分组的字段。每个分组将独立进行归一化计算。这里的字段名是指 encode 配置中的视觉通道名称，比如 'x'、'y'、'color' 等。例如，当设置 ",paraId:5,tocIndex:3},{value:"groupBy: 'color'",paraId:5,tocIndex:3},{value:" 时，会按照 encode.color 对应的数据字段进行分组。",paraId:5,tocIndex:3},{value:"类型：",paraId:6,tocIndex:3},{value:"string | string[]",paraId:6,tocIndex:3},{value:"默认值：",paraId:6,tocIndex:3},{value:"'x'",paraId:6,tocIndex:3},{value:"'max'",paraId:7,tocIndex:4},{value:"：使用组内最大值作为基准",paraId:7,tocIndex:4},{value:"'min'",paraId:8,tocIndex:4},{value:"：使用组内最小值作为基准",paraId:8,tocIndex:4},{value:"'mean'",paraId:9,tocIndex:4},{value:"：使用组内平均值作为基准",paraId:9,tocIndex:4},{value:"'median'",paraId:10,tocIndex:4},{value:"：使用组内中位数作为基准",paraId:10,tocIndex:4},{value:"'sum'",paraId:11,tocIndex:4},{value:"：使用组内总和作为基准",paraId:11,tocIndex:4},{value:"'first'",paraId:12,tocIndex:4},{value:"：使用组内第一个值作为基准",paraId:12,tocIndex:4},{value:"'last'",paraId:13,tocIndex:4},{value:"：使用组内最后一个值作为基准",paraId:13,tocIndex:4},{value:"'deviation'",paraId:14,tocIndex:4},{value:"：使用组内标准差作为基准",paraId:14,tocIndex:4},{value:"自定义函数：可传入函数来自定义基准值的计算方式。该函数接收两个参数：",paraId:15,tocIndex:4},{value:"import { max, min } from '@antv/vendor/d3-array';\n\n// I: 索引数组，Y: 数据值数组\n// 使用值域的范围作为基准\n(I, Y) => max(I, (i) => Y[+i]) - min(I, (i) => Y[+i]);\n",paraId:16,tocIndex:4},{value:"下面的例子展示了如何使用不同的 basis 进行归一化：",paraId:17,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { category: 'A', value: 10, group: '1' },\n    { category: 'B', value: 20, group: '1' },\n    { category: 'C', value: 30, group: '1' },\n    { category: 'A', value: 40, group: '2' },\n    { category: 'B', value: 50, group: '2' },\n    { category: 'C', value: 60, group: '2' },\n  ],\n  encode: {\n    x: 'category',\n    y: 'value',\n    color: 'group',\n  },\n  transform: [\n    {\n      type: 'normalizeY',\n      basis: 'mean', // 使用平均值作为基准\n    },\n  ],\n});\n\nchart.render();\n",paraId:18,tocIndex:6},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\nconst valueList = [\n  'first',\n  'deviation',\n  'last',\n  'max',\n  'mean',\n  'median',\n  'min',\n  'sum',\n];\nconst valueMap = valueList.map((p) => {\n  return {\n    label: p,\n    value: p,\n  };\n});\n\nchart.options({\n  type: 'line',\n  width: 900,\n  height: 600,\n  insetRight: 20,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/indices.json',\n  },\n  encode: { x: (d) => new Date(d.Date), y: 'Close', color: 'Symbol' },\n  transform: [{ type: 'normalizeY', basis: 'first', groupBy: 'color' }],\n  scale: { y: { type: 'log' } },\n  axis: { y: { title: '↑ Change in price (%)' } },\n  labels: [{ text: 'Symbol', selector: 'last', fontSize: 10 }],\n  tooltip: { items: [{ channel: 'y', valueFormatter: '.1f' }] },\n});\n\nconst handleSetValue = (value) => {\n  chart.options({\n    transform: [{ type: 'normalizeY', basis: value, groupBy: 'color' }],\n  });\n  chart.render(); // 重新渲染图表\n};\n\n// 插入Value 选择器\nconst selectorContainer = document.createElement('div');\nselectorContainer.textContent = '选择 basis ';\nconst selector = document.createElement('select');\nselector.innerHTML = valueMap.map(\n  (value, index) =>\n    `<option value=\"${value.value}\" ${index === 0 ? 'selected' : ''}>${\n      value.label\n    }</option>`,\n);\nselector.onchange = (e) => {\n  handleSetValue(e.target.value);\n};\nselectorContainer.appendChild(selector);\ncontainer.insertBefore(selectorContainer, container.childNodes[0]);\n\nchart.render();\n",paraId:19,tocIndex:7},{value:"可以通过 groupBy 选项指定如何对数据进行分组：",paraId:20,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { category: 'A', year: '2020', value: 100 },\n    { category: 'B', year: '2020', value: 200 },\n    { category: 'A', year: '2021', value: 150 },\n    { category: 'B', year: '2021', value: 300 },\n    { category: 'A', year: '2022', value: 180 },\n    { category: 'B', year: '2022', value: 360 },\n  ],\n  encode: {\n    x: 'year',\n    y: 'value',\n    color: 'category',\n  },\n  transform: [\n    {\n      type: 'normalizeY',\n      groupBy: 'color', // 按照 color 通道进行归一化（对应数据字段 category）\n    },\n  ],\n  axis: {\n    y: { labelFormatter: '.0%' },\n  },\n});\n\nchart.render();\n",paraId:21,tocIndex:8}]},81176:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(71695);const t=[{value:"在 G2 中，",paraId:0},{value:"标记转换（Mark Transform）",paraId:0},{value:" 提供了一种便捷的机制，用于修改数据和标记选项，主要用于支持数据分析。标记转换的本质是一个函数，该函数能够",paraId:0},{value:"筛选",paraId:0},{value:"、",paraId:0},{value:"修改",paraId:0},{value:"、",paraId:0},{value:"聚合",paraId:0},{value:"以及",paraId:0},{value:"生成",paraId:0},{value:"新的通道值，从而优化图形展示，提升数据的可解释性。",paraId:0},{value:"转换是一个数组，声明的转换会 ",paraId:1,tocIndex:0},{value:"按照顺序执行",paraId:1,tocIndex:0},{value:"。转换可以配置在 Mark 层级：",paraId:1,tocIndex:0},{value:"({\n  type: 'interval',\n  transform: [{ type: 'stackY' }, { type: 'sortX' }],\n});\n",paraId:2,tocIndex:0},{value:"标记转换会去修改每个通道绑定的数据，从而改变图表的展示形式。比如 StackY 转换堆叠了条形图 y 和 y1 通道绑定的列数据：",paraId:3,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { city: 'London', month: 'Jan.', rainfall: 18.9 },\n    { city: 'London', month: 'Feb.', rainfall: 28.8 },\n    { city: 'London', month: 'Mar.', rainfall: 39.3 },\n    { city: 'London', month: 'Apr.', rainfall: 81.4 },\n    { city: 'London', month: 'May', rainfall: 47 },\n    { city: 'London', month: 'Jun.', rainfall: 20.3 },\n    { city: 'London', month: 'Jul.', rainfall: 24 },\n    { city: 'London', month: 'Aug.', rainfall: 35.6 },\n    { city: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n    { city: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n    { city: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n    { city: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n    { city: 'Berlin', month: 'May', rainfall: 52.6 },\n    { city: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n    { city: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n    { city: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n  ],\n  encode: { x: 'month', y: 'rainfall', color: 'city' },\n  transform: [{ type: 'stackY' }],\n});\n\nchart.render();\n",paraId:4,tocIndex:0},{value:"转换也可以配置在 View 层级：",paraId:5,tocIndex:0},{value:"({\n  type: 'view',\n  transform: [{ type: 'stackY' }, { type: 'sortX' }],\n});\n",paraId:6,tocIndex:0},{value:"在视图上声明的转换会传递给 ",paraId:7,tocIndex:0},{value:"children",paraId:7,tocIndex:0},{value:" 声明的标记。如果该标记没有转换就设置，否则没有影响。比如下面这个带有转换的堆叠面积图：",paraId:7,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { city: 'London', month: 'Jan.', rainfall: 18.9 },\n    { city: 'London', month: 'Feb.', rainfall: 28.8 },\n    { city: 'London', month: 'Mar.', rainfall: 39.3 },\n    { city: 'London', month: 'Apr.', rainfall: 81.4 },\n    { city: 'London', month: 'May', rainfall: 47 },\n    { city: 'London', month: 'Jun.', rainfall: 20.3 },\n    { city: 'London', month: 'Jul.', rainfall: 24 },\n    { city: 'London', month: 'Aug.', rainfall: 35.6 },\n    { city: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n    { city: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n    { city: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n    { city: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n    { city: 'Berlin', month: 'May', rainfall: 52.6 },\n    { city: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n    { city: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n    { city: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n  ],\n  encode: { x: 'month', y: 'rainfall', color: 'city' },\n  transform: [{ type: 'stackY' }], // 视图层级的转换\n  children: [\n    { type: 'area', style: { fillOpacity: 0.5 } },\n    { type: 'line', style: { strokeWidth: 2 }, tooltip: false },\n  ],\n});\n\nchart.render();\n",paraId:8,tocIndex:0},{value:"常见的转换的作用一般有三种：",paraId:9,tocIndex:1},{value:"防止重叠",paraId:10,tocIndex:1},{value:"在将数据映射到图形时，必须通过视觉编码来实现。在所有视觉通道中，位置是最具区分度的通道（ x 通道、y 通道等）。然而，在某些情况下，图形中的位置可能会出现重叠，导致数据分析变得困难。为了应对这种情况，通常需要对原始图形进行一定的转换，比如 dodgeX、stackY，jitterX 等。",paraId:11,tocIndex:1},{value:"数据聚合",paraId:12,tocIndex:1},{value:"还有一类标记转换主要是用来做数据聚合：比如 bin 和 group。和传统的数据聚合不同，标记聚合是发生在绘制之中，而不是在绘制之前。这使得我们不需要去操作抽象的原始数据，而是直接操作通道值即可。这大大提高了我们探索数据的效率。",paraId:13,tocIndex:1},{value:"绘制图形标注",paraId:14,tocIndex:1},{value:"在 G2 中，并未单独提供专门的标注组件，而是通过灵活配置标记来实现标注功能。既然标注也是一种标记，那么它也可以执行标记转换。",paraId:15,tocIndex:1},{value:"转换的一个作用是防止重叠，对数据进行调整，使得图形在画布上不互相重叠。",paraId:16,tocIndex:2},{value:"💡 ",paraId:17,tocIndex:2},{value:"数据调整的原则",paraId:17,tocIndex:2},{value:"我们调整数据的目的是为了使得图形不互相遮挡，对数据的认识更加清晰，但是必须保证对数据的正确理解，所以需要遵循以下原则：",paraId:18,tocIndex:2},{value:"不能改变数据的含义，给用户带来误解；",paraId:19,tocIndex:2},{value:"数据调整的界限要清晰，不能混淆不同类别的数据；",paraId:19,tocIndex:2},{value:"定量（连续）数据只能进行数据的累加和对称，分类数据只能在当前分类的范围内调整数据。",paraId:19,tocIndex:2},{value:"比如如下的数据绘制的散点图中 x 通道相同的点完全重叠在一起，很难区分。",paraId:20,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  },\n  encode: {\n    y: 'Horsepower',\n    x: 'Cylinders',\n    shape: 'hollow',\n    color: 'Cylinders',\n  },\n  scale: { x: { type: 'point' }, color: { type: 'ordinal' } },\n});\n\nchart.render();\n",paraId:21,tocIndex:2},{value:"可以通过配置 ",paraId:22,tocIndex:2},{value:"jitterX",paraId:23,tocIndex:2},{value:" 转换实现在某个区域的 x 方向散开的效果。",paraId:22,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  },\n  encode: {\n    y: 'Horsepower',\n    x: 'Cylinders',\n    shape: 'hollow',\n    color: 'Cylinders',\n  },\n  scale: { x: { type: 'point' }, color: { type: 'ordinal' } },\n  transform: [{ type: 'jitterX' }], //配置 jitterX 转换实现在某个区域的 x 方向散开的效果\n});\n\nchart.render();\n",paraId:24,tocIndex:2},{value:"这种情况在柱状图中也很常见，比如如下的数据绘制的柱状图中在 x 通道是分类的情况下，同一个分类下有多条记录是会出现重叠，很难区分。",paraId:25,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { city: 'London', month: 'Jan.', rainfall: 18.9 },\n    { city: 'London', month: 'Feb.', rainfall: 28.8 },\n    { city: 'London', month: 'Mar.', rainfall: 39.3 },\n    { city: 'London', month: 'Apr.', rainfall: 81.4 },\n    { city: 'London', month: 'May', rainfall: 47 },\n    { city: 'London', month: 'Jun.', rainfall: 20.3 },\n    { city: 'London', month: 'Jul.', rainfall: 24 },\n    { city: 'London', month: 'Aug.', rainfall: 35.6 },\n    { city: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n    { city: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n    { city: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n    { city: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n    { city: 'Berlin', month: 'May', rainfall: 52.6 },\n    { city: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n    { city: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n    { city: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n  ],\n  encode: { x: 'month', y: 'rainfall', color: 'city' },\n});\n\nchart.render();\n",paraId:26,tocIndex:2},{value:"这时候可以声明一个 ",paraId:27,tocIndex:2},{value:"dodgeX",paraId:28,tocIndex:2},{value:" 去绘制分组柱状图：",paraId:27,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { city: 'London', month: 'Jan.', rainfall: 18.9 },\n    { city: 'London', month: 'Feb.', rainfall: 28.8 },\n    { city: 'London', month: 'Mar.', rainfall: 39.3 },\n    { city: 'London', month: 'Apr.', rainfall: 81.4 },\n    { city: 'London', month: 'May', rainfall: 47 },\n    { city: 'London', month: 'Jun.', rainfall: 20.3 },\n    { city: 'London', month: 'Jul.', rainfall: 24 },\n    { city: 'London', month: 'Aug.', rainfall: 35.6 },\n    { city: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n    { city: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n    { city: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n    { city: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n    { city: 'Berlin', month: 'May', rainfall: 52.6 },\n    { city: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n    { city: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n    { city: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n  ],\n  encode: { x: 'month', y: 'rainfall', color: 'city' },\n  transform: [{ type: 'dodgeX' }], //配置 dodgeX 转换实现柱状图的分组\n});\n\nchart.render();\n",paraId:29,tocIndex:2},{value:"或者声明一个 ",paraId:30,tocIndex:2},{value:"stackY",paraId:31,tocIndex:2},{value:" 去绘制堆叠柱状图：",paraId:30,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { city: 'London', month: 'Jan.', rainfall: 18.9 },\n    { city: 'London', month: 'Feb.', rainfall: 28.8 },\n    { city: 'London', month: 'Mar.', rainfall: 39.3 },\n    { city: 'London', month: 'Apr.', rainfall: 81.4 },\n    { city: 'London', month: 'May', rainfall: 47 },\n    { city: 'London', month: 'Jun.', rainfall: 20.3 },\n    { city: 'London', month: 'Jul.', rainfall: 24 },\n    { city: 'London', month: 'Aug.', rainfall: 35.6 },\n    { city: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n    { city: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n    { city: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n    { city: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n    { city: 'Berlin', month: 'May', rainfall: 52.6 },\n    { city: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n    { city: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n    { city: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n  ],\n  encode: { x: 'month', y: 'rainfall', color: 'city' },\n  transform: [{ type: 'stackY' }], //配置 stackY 转换实现柱状图的堆叠\n});\n\nchart.render();\n",paraId:32,tocIndex:2},{value:"以下是 G2 中内置的防止重叠的标记转换：",paraId:33,tocIndex:2},{value:"转换",paraId:34,tocIndex:2},{value:"详细描述",paraId:34,tocIndex:2},{value:"示例",paraId:34,tocIndex:2},{value:"diffY",paraId:35,tocIndex:2},{value:"将 y 通道的值进行对比，并生成差值的类型，这通常用于对两个数值集进行变化衡量。",paraId:34,tocIndex:2},{value:"dodgeX",paraId:36,tocIndex:2},{value:"在 x 通道方向上，对元素进行分组和错位排列，以避免重叠，便于区分数据点。",paraId:34,tocIndex:2},{value:"jitter",paraId:37,tocIndex:2},{value:"在 x 和 y 通道方向随机生成轻微的摆动，用于处理图形中数据点的重叠问题。",paraId:34,tocIndex:2},{value:"jitterX",paraId:38,tocIndex:2},{value:"在 x 通道方向随机生成轻微的摆动，用于减少数据点的重叠。",paraId:34,tocIndex:2},{value:"jitterY",paraId:39,tocIndex:2},{value:"在 y 通道方向随机生成轻微的摆动，用于减少数据点的重叠。",paraId:34,tocIndex:2},{value:"和 jitterX 只是方向上的差别",paraId:34,tocIndex:2},{value:"pack",paraId:40,tocIndex:2},{value:"将数据点进行紧密排列，以优化空间利用率，适用于密集型分布布局。",paraId:34,tocIndex:2},{value:"sample",paraId:41,tocIndex:2},{value:"对数据进行采样，基于一定算法从原始数据集中选择子集，常用于大数据下处理。",paraId:34,tocIndex:2},{value:"stackY",paraId:42,tocIndex:2},{value:"在 y 通道方向对数据进行堆叠处理，通常用于展示数值累积的效果或分布情况。",paraId:34,tocIndex:2},{value:"还有一类标记转换主要是用来做数据聚合：比如 ",paraId:43,tocIndex:3},{value:"bin",paraId:44,tocIndex:3},{value:" 和 ",paraId:43,tocIndex:3},{value:"group",paraId:45,tocIndex:3},{value:"。和传统的数据聚合不同，标记聚合是发生在绘制之中，而不是在绘制之前。这使得我们不需要去操作抽象的原始数据，而是直接操作通道值即可。这大大提高了我们探索数据的效率。",paraId:43,tocIndex:3},{value:"table({\n  url: 'https://assets.antv.antgroup.com/g2/penguins.json',\n});\n",paraId:46,tocIndex:3},{value:"下面是一份企鹅集群的数据，接下来以此作为案例，介绍 G2 中一些常用的数据聚合的方式。",paraId:47,tocIndex:3},{value:"首先我们如下绘制一个散点图，展现了企鹅 ",paraId:48,tocIndex:3},{value:"culmen_depth_mm",paraId:48,tocIndex:3},{value:" 和 ",paraId:48,tocIndex:3},{value:"culmen_length_mm",paraId:48,tocIndex:3},{value:" 的相关性。",paraId:48,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n    transform: [\n      { type: 'filter', callback: (d) => d.culmen_depth_mm !== null },\n    ],\n  },\n  encode: { x: (d) => +d.culmen_depth_mm, y: (d) => +d.culmen_length_mm },\n});\n\nchart.render();\n",paraId:49,tocIndex:3},{value:"但是散点图无法直观地看出企鹅群体某个数据的分布情况，比如 ",paraId:50,tocIndex:3},{value:"culmen_depth_mm",paraId:50,tocIndex:3},{value:" 的具体分布情况，这时候就可以使用 ",paraId:50,tocIndex:3},{value:"binX",paraId:51,tocIndex:3},{value:" 对数据进行分箱，通过直方图进行进一步的数据分析。",paraId:50,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'rect',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n    transform: [\n      { type: 'filter', callback: (d) => d.culmen_depth_mm !== null },\n    ],\n  },\n  encode: { x: (d) => +d.culmen_depth_mm },\n  transform: [{ type: 'binX', y: 'count' }],\n  style: { insetLeft: 1 },\n});\n\nchart.render();\n",paraId:52,tocIndex:3},{value:"bin 主要是用来聚合数值类型的数据，group 主要针对离散数据。在上面的例子中，如果想要分析不同岛屿上不同企鹅种类的数量，可以使用 ",paraId:53,tocIndex:3},{value:"groupX",paraId:54,tocIndex:3},{value:"对 x 通道进行分组，并对 y 通道根据 count 方式进行聚合。",paraId:53,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n    transform: [\n      { type: 'filter', callback: (d) => d.culmen_depth_mm !== null },\n    ],\n  },\n  encode: { x: 'island', color: 'species' },\n  transform: [\n    {\n      type: 'groupX',\n      y: 'count',\n    },\n    {\n      type: 'stackY',\n    },\n  ],\n});\n\nchart.render();\n",paraId:55,tocIndex:3},{value:"如果我们不关心具体的数量多少，而是想聚焦于不同种类的企鹅的占比，可以使用 ",paraId:56,tocIndex:3},{value:"normalizeY",paraId:57,tocIndex:3},{value:" 进行归一化处理。",paraId:56,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n    transform: [\n      { type: 'filter', callback: (d) => d.culmen_depth_mm !== null },\n    ],\n  },\n  encode: { x: 'island', color: 'species' },\n  transform: [\n    {\n      type: 'groupX',\n      y: 'count',\n    },\n    {\n      type: 'stackY',\n    },\n    {\n      type: 'normalizeY',\n    },\n  ],\n});\n\nchart.render();\n",paraId:58,tocIndex:3},{value:"以下是 G2 中内置的用于数据聚合的标记转换：",paraId:59,tocIndex:3},{value:"转换",paraId:60,tocIndex:3},{value:"详细描述",paraId:60,tocIndex:3},{value:"示例",paraId:60,tocIndex:3},{value:"bin",paraId:61,tocIndex:3},{value:"将数据分组到固定的区间（或桶）中，通常用于直方图的构造。",paraId:60,tocIndex:3},{value:"binX",paraId:62,tocIndex:3},{value:"在 x 通道方向对数据进行分组，生成一系列区间（或桶）。",paraId:60,tocIndex:3},{value:"flexX",paraId:63,tocIndex:3},{value:"在 x 通道上灵活排列数据，用于处理自适应布局或特殊排列要求。",paraId:60,tocIndex:3},{value:"group",paraId:64,tocIndex:3},{value:"对数据进行分组，基于某些条件或属性将数据划分为多个子集。",paraId:60,tocIndex:3},{value:"groupColor",paraId:65,tocIndex:3},{value:"基于数据属性对数据的颜色进行分组，常用于分类数据的可视化。",paraId:60,tocIndex:3},{value:"groupX",paraId:66,tocIndex:3},{value:"基于 x 通道的数据属性进行分组，常用于带有分类维度的数据可视化。",paraId:60,tocIndex:3},{value:"groupY",paraId:67,tocIndex:3},{value:"基于 y 通道的数据属性进行分组，常用于将数据按类别排列在 y 通道上的情况。",paraId:60,tocIndex:3},{value:"normalizeY",paraId:68,tocIndex:3},{value:"在 y 通道上将数据归一化，通常是对数据进行比例调整便于比较和可视化展示。",paraId:60,tocIndex:3},{value:"select",paraId:69,tocIndex:3},{value:"对数据进行子集的筛选，基于指定的条件过滤出一部分数据。",paraId:60,tocIndex:3},{value:"selectX",paraId:70,tocIndex:3},{value:"基于 x 通道上的数据进行筛选，选出符合范围或条件的数据子集。",paraId:60,tocIndex:3},{value:"selectY",paraId:71,tocIndex:3},{value:"基于 y 通道上的数据进行筛选，选出符合范围或条件的数据子集。",paraId:60,tocIndex:3},{value:"sortColor",paraId:72,tocIndex:3},{value:"基于颜色的优先级对数据进行排序，用于生成颜色的有序视觉结构。",paraId:60,tocIndex:3},{value:"sortX",paraId:73,tocIndex:3},{value:"按 x 通道上的数据进行排序，以生成具有顺序关系的视觉图形。",paraId:60,tocIndex:3},{value:"sortY",paraId:74,tocIndex:3},{value:"按 y 通道上的数据进行排序，以生成具有顺序关系的视觉图形。",paraId:60,tocIndex:3},{value:"stackEnter",paraId:75,tocIndex:3},{value:"对 enterDuration 和 enterDelay 通道进行堆叠，实现分组动画的效果。",paraId:60,tocIndex:3},{value:"symmetryY",paraId:76,tocIndex:3},{value:"在 y 通道方向生成对称分布，用于构造具有对称性的数据布局。",paraId:60,tocIndex:3},{value:"在标记部分的文档里已经阐述过，在 G2 中，并未单独提供专门的标注组件，而是通过灵活配置标记来实现标注功能。既然标注也是一种标记，那么它也可以执行标记转换。",paraId:77,tocIndex:4},{value:"标注的数据通常与图表的数据来源保持一致，基于此数据源通过标记转换来生成标注内容。在标注构造过程中，可以借助 ",paraId:78,tocIndex:4},{value:"group",paraId:78,tocIndex:4},{value:" 将数据按特定分类或属性进行分组，或使用 ",paraId:78,tocIndex:4},{value:"select",paraId:78,tocIndex:4},{value:" 筛选出满足特定条件的子集，从而实现对关键信息的聚焦与强化处理。这种灵活的标记转换不仅可以帮助有效地构建标注，还能确保标注内容准确地贴合数据的逻辑与视觉需求，同时提升图表的可读性与表达效果。",paraId:78,tocIndex:4},{value:"groupX 是常用的一种标记转换，基于 ",paraId:79,tocIndex:5},{value:"x 通道",paraId:79,tocIndex:5},{value:" 对数据进行分组，并对指定的通道进行聚合处理。具体来说，它将数据按照 ",paraId:79,tocIndex:5},{value:"x 通道",paraId:79,tocIndex:5},{value:"的分组维度进行聚合计算，并结合 ",paraId:79,tocIndex:5},{value:"y 通道",paraId:79,tocIndex:5},{value:"上的数据进行进一步处理。例如，可以对每组 ",paraId:79,tocIndex:5},{value:"y 数据",paraId:79,tocIndex:5},{value:"进行计算并取其平均值（",paraId:79,tocIndex:5},{value:"mean",paraId:79,tocIndex:5},{value:"），作为聚合结果。最终，聚合后的数据会被用于绘制标记（如 lineY），从而生成一条具有统计学意义的平均线。这种方法简化了分组与聚合的流程，使得在图形绘制时就能直接操作聚合后的数据，提升了数据处理效率与可视化表达的精准性。",paraId:79,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n  },\n  children: [\n    {\n      type: 'interval',\n      encode: {\n        x: (d) => new Date(d.date).getUTCMonth(),\n        y: 'precipitation',\n      },\n      transform: [{ type: 'groupX', y: 'mean' }],\n      scale: { y: { tickCount: 5, domainMax: 6 } },\n      tooltip: { items: [{ channel: 'y', valueFormatter: '.2f' }] },\n    },\n    {\n      type: 'lineY',\n      encode: { y: 'precipitation' },\n      transform: [{ type: 'groupX', y: 'mean' }],\n      style: {\n        stroke: '#F4664A',\n        strokeOpacity: 1,\n        lineWidth: 2,\n        lineDash: [3, 3],\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:80,tocIndex:5},{value:"同理我们可以用 groupY 转换来绘制直方图的中位线。",paraId:81,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/movies.json',\n    transform: [{ type: 'filter', callback: (d) => d['IMDB Rating'] > 0 }],\n  },\n  children: [\n    {\n      type: 'rect',\n      encode: { x: 'IMDB Rating' },\n      transform: [{ type: 'binX', y: 'count', thresholds: 9 }],\n      scale: { y: { domainMax: 1000 } },\n      style: { inset: 1 },\n    },\n    {\n      type: 'lineX',\n      encode: { x: 'IMDB Rating' },\n      transform: [{ type: 'groupY', x: 'median' }],\n      style: {\n        stroke: '#F4664A',\n        strokeOpacity: 1,\n        lineWidth: 2,\n        lineDash: [4, 4],\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:82,tocIndex:5},{value:"在可视化中，当需要突出显示某些特殊位置（如起点、终点或最大值）时，select 标记转换是一种非常灵活且高效的选择。通过 select 转换，可以基于条件筛选数据并实现对特定位置的标记。以下示例展示了如何使用 selectY 对 ",paraId:83,tocIndex:6},{value:"折线图",paraId:83,tocIndex:6},{value:"的数据进行筛选，从而标注图中 ",paraId:83,tocIndex:6},{value:"峰值位置",paraId:83,tocIndex:6},{value:"的具体实现：",paraId:83,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { month: 'Jan', city: 'Tokyo', temperature: 7 },\n    { month: 'Jan', city: 'London', temperature: 3.9 },\n    { month: 'Feb', city: 'Tokyo', temperature: 6.9 },\n    { month: 'Feb', city: 'London', temperature: 4.2 },\n    { month: 'Mar', city: 'Tokyo', temperature: 9.5 },\n    { month: 'Mar', city: 'London', temperature: 5.7 },\n    { month: 'Apr', city: 'Tokyo', temperature: 14.5 },\n    { month: 'Apr', city: 'London', temperature: 8.5 },\n    { month: 'May', city: 'Tokyo', temperature: 18.4 },\n    { month: 'May', city: 'London', temperature: 11.9 },\n    { month: 'Jun', city: 'Tokyo', temperature: 21.5 },\n    { month: 'Jun', city: 'London', temperature: 15.2 },\n    { month: 'Jul', city: 'Tokyo', temperature: 25.2 },\n    { month: 'Jul', city: 'London', temperature: 17 },\n    { month: 'Aug', city: 'Tokyo', temperature: 26.5 },\n    { month: 'Aug', city: 'London', temperature: 16.6 },\n    { month: 'Sep', city: 'Tokyo', temperature: 23.3 },\n    { month: 'Sep', city: 'London', temperature: 14.2 },\n    { month: 'Oct', city: 'Tokyo', temperature: 18.3 },\n    { month: 'Oct', city: 'London', temperature: 10.3 },\n    { month: 'Nov', city: 'Tokyo', temperature: 13.9 },\n    { month: 'Nov', city: 'London', temperature: 6.6 },\n    { month: 'Dec', city: 'Tokyo', temperature: 9.6 },\n    { month: 'Dec', city: 'London', temperature: 4.8 },\n  ],\n  encode: { x: 'month', y: 'temperature', color: 'city' },\n  scale: { x: { range: [0, 1] }, y: { nice: true } },\n  axis: { y: { labelFormatter: (d) => d + '°C' } },\n  children: [\n    { type: 'line', encode: { shape: 'smooth' } },\n    {\n      type: 'text',\n      encode: {\n        x: 'month',\n        y: 'temperature',\n        text: (d) => `峰值：${d.temperature}`,\n      },\n      transform: [\n        {\n          type: 'selectY',\n          groupBy: 'color',\n          selector: 'max',\n        },\n      ],\n      style: {\n        fill: 'orange',\n        fontSize: 16,\n        dy: -15,\n      },\n      tooltip: false,\n    },\n    {\n      type: 'point',\n      encode: { x: 'month', y: 'temperature' },\n      transform: [\n        {\n          type: 'selectY',\n          groupBy: 'color',\n          selector: 'max',\n        },\n      ],\n      tooltip: false,\n    },\n  ],\n});\n\nchart.render();\n",paraId:84,tocIndex:6},{value:"我们也可以同时声明多个转换。比如在上面的企鹅的例子中，我们多考虑一个数据维度：企鹅的性别，就可以连续声明 binX 和 stackY 转换。需要注意的一点是，G2 里的转换是按顺序执行的，在下面的例子里交换 binX 和 stackY 的顺序会出错。",paraId:85,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'rect',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n\n    transform: [\n      { type: 'filter', callback: (d) => d.culmen_depth_mm !== null },\n    ],\n  },\n  encode: { x: (d) => +d.culmen_depth_mm, color: 'sex' },\n  transform: [\n    { type: 'binX', y: 'count' }, // 声明 binX 转换\n    { type: 'stackY', orderBy: 'sum', reverse: true }, // 声明 stackY 转换\n  ],\n  style: { insetLeft: 1 },\n});\n\nchart.render();\n",paraId:86,tocIndex:8}]},40509:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(49866);const t=[{value:"pack",paraId:0,tocIndex:0},{value:" 是一种网格布局转换，它可以让图形元素在容器空间中按照行列结构紧凑排列。",paraId:0,tocIndex:0},{value:"pack",paraId:0,tocIndex:0},{value:" 转换主要通过以下步骤工作：",paraId:0,tocIndex:0},{value:"根据容器的宽高比和元素数量，计算最优的排列网格（行数和列数）",paraId:1,tocIndex:0},{value:"将元素按照指定方向（行优先或列优先）在网格中排列",paraId:1,tocIndex:0},{value:"对每个元素应用缩放和平移变换，使其适应网格单元并保持适当的间距",paraId:1,tocIndex:0},{value:"pack",paraId:2,tocIndex:1},{value:" 转换主要用于单元可视化（Unit Visualization），能够有效解决大量离散元素的布局问题，常见的使用场景如下：",paraId:2,tocIndex:1},{value:"在有限空间内展示大量的离散元素：如数据点密集且需要避免重叠的散点图",paraId:3,tocIndex:1},{value:"分类数据的分布展示：突出显示各类别数量差异的可视化，如人口统计分析",paraId:3,tocIndex:1},{value:"例如下面的案例展示了泰坦尼克号乘客按照舱位等级和生存状态的分布情况，通过 ",paraId:4,tocIndex:1},{value:"pack",paraId:4,tocIndex:1},{value:" 转换让每个乘客点有序地排列，清晰地展示了各个类别的数量分布。",paraId:4,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'facetRect',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/titanic.json',\n    transform: [\n      { type: 'sortBy', fields: ['survived'] },\n      {\n        type: 'map',\n        callback: ({ survived, ...d }) => ({\n          ...d,\n          survived: survived + '',\n        }),\n      },\n    ],\n  },\n  encode: { x: 'pclass' },\n  children: [\n    {\n      type: 'point',\n      encode: { color: 'survived', shape: 'point', size: 3 },\n      transform: [{ type: 'pack' }],\n      legend: {\n        color: { labelFormatter: (d) => (d === '1' ? 'Yes' : 'No') },\n      },\n      tooltip: { title: '', items: ['pclass', 'survived'] },\n    },\n  ],\n});\n\nchart.render();\n",paraId:5,tocIndex:1},{value:"更多的案例，可以查看",paraId:6,tocIndex:1},{value:"单元可视化",paraId:7,tocIndex:1},{value:"页面。",paraId:6,tocIndex:1},{value:"属性",paraId:8,tocIndex:2},{value:"描述",paraId:8,tocIndex:2},{value:"类型",paraId:8,tocIndex:2},{value:"默认值",paraId:8,tocIndex:2},{value:"必选",paraId:8,tocIndex:2},{value:"padding",paraId:8,tocIndex:2},{value:"每个元素之间的间距，单位为像素",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:"0",paraId:8,tocIndex:2},{value:"direction",paraId:8,tocIndex:2},{value:"元素的堆叠方向",paraId:8,tocIndex:2},{value:"row",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"col",paraId:8,tocIndex:2},{value:"col",paraId:8,tocIndex:2},{value:"padding",paraId:9,tocIndex:3},{value:" 用于控制每个元素之间的间距，单位为像素。增加 ",paraId:9,tocIndex:3},{value:"padding",paraId:9,tocIndex:3},{value:" 值可以让元素之间有更明显的分隔。当值为 0 时，元素会紧密排列。",paraId:9,tocIndex:3},{value:"direction",paraId:10,tocIndex:4},{value:" 决定元素在网格中的堆叠方向：",paraId:10,tocIndex:4},{value:"col",paraId:11,tocIndex:4},{value:"：列（垂直方向）堆叠",paraId:11,tocIndex:4},{value:"row",paraId:11,tocIndex:4},{value:"：行（水平方向）堆叠",paraId:11,tocIndex:4},{value:"通过调整 ",paraId:12,tocIndex:4},{value:"direction",paraId:12,tocIndex:4},{value:"，可以改变图中数据点的布局方向，以适应不同的阅读偏好和数据特点。",paraId:12,tocIndex:4},{value:"以下案例展示了泰坦尼克号乘客性别和生存状态的分布，通过配置 ",paraId:13,tocIndex:5},{value:"pack",paraId:13,tocIndex:5},{value:" 转换的 ",paraId:13,tocIndex:5},{value:"padding",paraId:13,tocIndex:5},{value:" 和 ",paraId:13,tocIndex:5},{value:"direction",paraId:13,tocIndex:5},{value:" 参数，使得结果更为直观。",paraId:13,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'facetRect',\n  autoFit: true,\n  shareData: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/titanic.json',\n    transform: [\n      { type: 'sortBy', fields: ['survived'] },\n      {\n        type: 'map',\n        callback: ({ survived, ...d }) => ({\n          ...d,\n          survived: survived + '',\n        }),\n      },\n    ],\n  },\n  encode: { x: 'sex' },\n  children: [\n    {\n      type: 'point',\n      encode: { color: 'survived', shape: 'point', size: 3 },\n      transform: [{ type: 'pack', padding: 5, direction: 'row' }],\n      legend: {\n        color: { labelFormatter: (d) => (d === '1' ? 'Yes' : 'No') },\n      },\n      tooltip: { title: '', items: ['sex', 'survived'] },\n    },\n  ],\n});\n\nchart.render();\n",paraId:14,tocIndex:5}]},57321:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(21668);const t=[{value:"针对线、柱、条、散点类图表，当数据量远大于屏幕像素的时候，开启一些内置的采样策略，可以有效的优化图表的绘制效率，默认关闭，也就是按照原始数据全部渲染。",paraId:0},{value:"这是使用 ",paraId:1,tocIndex:0},{value:"sample",paraId:1,tocIndex:0},{value:" 的示例",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.data(data);\n\nchart.line().encode('x', 'x').encode('y', 'y').transform({\n  type: 'sample',\n  thresholds: 500,\n  strategy: 'max',\n});\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"groupBy",paraId:3,tocIndex:1},{value:"数据分组的字段",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"string[]",paraId:3,tocIndex:1},{value:"series",paraId:3,tocIndex:1},{value:"thresholds",paraId:3,tocIndex:1},{value:"采样策略启用的数据量阈值",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"2000",paraId:3,tocIndex:1},{value:"strategy",paraId:3,tocIndex:1},{value:"采用指定的采样策略",paraId:3,tocIndex:1},{value:"Strategy",paraId:3,tocIndex:1},{value:"median",paraId:3,tocIndex:1},{value:"strategy",paraId:4,tocIndex:1},{value:" 内置有 6 种策略，分别为：",paraId:4,tocIndex:1},{value:"lttb",paraId:5,tocIndex:1},{value:" - 采用 Largest-Triangle-Three-Bucket 算法，可以最大程度保证采样后线条的趋势，形状和极值。",paraId:5,tocIndex:1},{value:"median ",paraId:5,tocIndex:1},{value:" - 取过滤点的中位数",paraId:5,tocIndex:1},{value:"max",paraId:5,tocIndex:1},{value:" - 取过滤点的最大值",paraId:5,tocIndex:1},{value:"min",paraId:5,tocIndex:1},{value:" - 取过滤点的最小值",paraId:5,tocIndex:1},{value:"first",paraId:5,tocIndex:1},{value:" - 取第一个值",paraId:5,tocIndex:1},{value:"last",paraId:5,tocIndex:1},{value:" - 取第最后一个值",paraId:5,tocIndex:1},{value:"(I: number[], X: number[], Y: number[], thresholds: number) => number[]",paraId:5,tocIndex:1},{value:" - 使用自定义的函数进行采样",paraId:5,tocIndex:1},{value:"怎么做自定义的抽样策略？",paraId:6,tocIndex:2},{value:"function strategy(I: number[], X: number[], Y: number[], thresholds: number) {\n  // 这里对这一组数据进行抽样，返回一个数据的索引值\n  return [1, 101, 202 /*...*/];\n}\n\nchart\n  .line()\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .transform([{ type: 'sample', strategy }]);\n",paraId:7,tocIndex:2}]},91694:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(92551);const t=[{value:"select",paraId:0,tocIndex:0},{value:" 标记转换是一种非常灵活且高效的选择。按照指定通道进行分组，根据指定通道和 selector 从每组选择出数据。通过 select 转换，可以基于条件筛选数据并实现对特定位置的标记。",paraId:0,tocIndex:0},{value:"峰值标注：标记折线图的最高/最低点",paraId:1,tocIndex:1},{value:"首尾标注： 在时间序列中突出显示起点/终点",paraId:2,tocIndex:1},{value:"分类标注： 对不同数据类别进行差异化标记",paraId:3,tocIndex:1},{value:"趋势标注： 标记平均值、中位数等统计特征点",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:2},{value:"描述",paraId:5,tocIndex:2},{value:"类型",paraId:5,tocIndex:2},{value:"默认值",paraId:5,tocIndex:2},{value:"groupBy",paraId:5,tocIndex:2},{value:"针对指定的通道进行分组",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"string[]",paraId:5,tocIndex:2},{value:"series",paraId:5,tocIndex:2},{value:"channel",paraId:5,tocIndex:2},{value:"针对每个分组，使用指定的通道进行指定的数据抽取",paraId:5,tocIndex:2},{value:"Channel",paraId:6,tocIndex:2},{value:"selector",paraId:5,tocIndex:2},{value:"针对每个分组，指定对应的数据抽取操作",paraId:5,tocIndex:2},{value:"Selector",paraId:7,tocIndex:2},{value:"first",paraId:5,tocIndex:2},{value:"理论上，",paraId:8,tocIndex:3},{value:"channel",paraId:8,tocIndex:3},{value:" 可以设置为所有的通道值，具体可以参考 ",paraId:8,tocIndex:3},{value:"encode",paraId:9,tocIndex:3},{value:" 文档。所有的枚举值如下：",paraId:8,tocIndex:3},{value:"type Channel =\n  | 'x'\n  | 'y'\n  | 'z'\n  | 'x1'\n  | 'y1'\n  | 'series'\n  | 'color'\n  | 'opacity'\n  | 'shape'\n  | 'size'\n  | 'key'\n  | 'groupKey'\n  | 'position'\n  | 'series'\n  | 'enterType'\n  | 'enterEasing'\n  | 'enterDuration'\n  | 'enterDelay'\n  | 'updateType'\n  | 'updateEasing'\n  | 'updateDuration'\n  | 'updateDelay'\n  | 'exitType'\n  | 'exitEasing'\n  | 'exitDuration'\n  | 'exitDelay'\n  | `position${number}`;\n",paraId:10,tocIndex:3},{value:"type Selector =\n  | 'min' // 最小值\n  | 'max' // 最大值\n  | 'first' // 第一个值\n  | 'last' // 最后一个值\n  | 'mean' // 平均值\n  | 'median' // 中位数\n  | ((I: number[], V: number[]) => number[]); // 自定义选取函数\n",paraId:11,tocIndex:4},{value:"如下所示，对柱形图顶部进行数值标注：",paraId:12,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { letter: 'A', frequency: 0.08167 },\n  { letter: 'B', frequency: 0.01492 },\n  { letter: 'C', frequency: 0.02782 },\n  { letter: 'D', frequency: 0.04253 },\n  { letter: 'E', frequency: 0.12702 },\n  { letter: 'F', frequency: 0.02288 },\n  { letter: 'G', frequency: 0.02015 },\n  { letter: 'H', frequency: 0.06094 },\n  { letter: 'I', frequency: 0.06966 },\n  { letter: 'J', frequency: 0.00153 },\n  { letter: 'K', frequency: 0.00772 },\n  { letter: 'L', frequency: 0.04025 },\n  { letter: 'M', frequency: 0.02406 },\n  { letter: 'N', frequency: 0.06749 },\n  { letter: 'O', frequency: 0.07507 },\n  { letter: 'P', frequency: 0.01929 },\n  { letter: 'Q', frequency: 0.00095 },\n  { letter: 'R', frequency: 0.05987 },\n  { letter: 'S', frequency: 0.06327 },\n  { letter: 'T', frequency: 0.09056 },\n  { letter: 'U', frequency: 0.02758 },\n  { letter: 'V', frequency: 0.00978 },\n  { letter: 'W', frequency: 0.0236 },\n  { letter: 'X', frequency: 0.0015 },\n  { letter: 'Y', frequency: 0.01974 },\n  { letter: 'Z', frequency: 0.00074 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  width: 800,\n  paddingLeft: 50,\n  paddingRight: 100,\n  data,\n  children: [\n    // 柱形图标记配置\n    {\n      type: 'interval',\n      encode: {\n        x: 'letter',\n        y: 'frequency',\n      },\n    },\n    // 文本标记配置\n    {\n      type: 'text',\n      encode: {\n        x: 'letter',\n        y: 'frequency',\n        text: 'frequency',\n        series: 'frequency',\n      },\n      transform: [\n        {\n          // 使用select 转换标记\n          type: 'select',\n          // 基于y通道\n          channel: 'y',\n          // 选择最高点\n          selector: 'max',\n        },\n      ],\n      style: {\n        // 标注文本向左偏移12个像素\n        dx: -12,\n        // 标注文本向上偏移12个像素\n        dy: -12,\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:13,tocIndex:5}]},99484:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(87335);const t=[{value:"selectX",paraId:0,tocIndex:0},{value:" 基于 x 通道上的数据进行筛选，选出符合范围或条件的数据子集。",paraId:0,tocIndex:0},{value:"峰值标注：标记折线图的最高/最低点",paraId:1,tocIndex:1},{value:"首尾标注： 在时间序列中突出显示起点/终点",paraId:2,tocIndex:1},{value:"分类标注： 对不同数据类别进行差异化标记",paraId:3,tocIndex:1},{value:"趋势标注： 标记平均值、中位数等统计特征点",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:2},{value:"描述",paraId:5,tocIndex:2},{value:"类型",paraId:5,tocIndex:2},{value:"默认值",paraId:5,tocIndex:2},{value:"groupBy",paraId:5,tocIndex:2},{value:"针对指定的通道进行分组",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"string[]",paraId:5,tocIndex:2},{value:"series",paraId:5,tocIndex:2},{value:"selector",paraId:5,tocIndex:2},{value:"针对每个分组，指定对应的数据抽取操作",paraId:5,tocIndex:2},{value:"Selector",paraId:6,tocIndex:2},{value:"first",paraId:5,tocIndex:2},{value:"type Selector =\n  | 'min' // 最小值\n  | 'max' // 最大值\n  | 'first' // 第一个值\n  | 'last' // 最后一个值\n  | 'mean' // 平均值\n  | 'median' // 中位数\n  | ((I: number[], V: number[]) => number[]); // 自定义选取函数\n",paraId:7,tocIndex:3},{value:"如下所示，对不同的数据类型进行标注：",paraId:8,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  width: 800,\n  paddingLeft: 50,\n  paddingRight: 100,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/indices.json',\n  },\n  children: [\n    // 折线标记配置\n    {\n      type: 'line',\n      encode: {\n        x: (d) => new Date(d.Date),\n        y: 'Close',\n        color: 'Symbol',\n      },\n      axis: {\n        y: {\n          title: '↑ Change in price (%)',\n        },\n      },\n    },\n    // 文本标注配置\n    {\n      type: 'text',\n      encode: {\n        x: (d) => new Date(d.Date),\n        y: 'Close',\n        series: 'Symbol',\n        color: 'Symbol',\n        text: 'Symbol',\n      },\n      transform: [\n        {\n          // 使用selectX 转换标记\n          type: 'selectX',\n          // 选择最后一个数据点\n          selector: 'last',\n        },\n      ],\n      style: {\n        // 标注文本向右偏移12个像素\n        dx: 12,\n      },\n      // 关闭文本的tooltip\n      tooltip: false,\n    },\n  ],\n});\n\nchart.render();\n",paraId:9,tocIndex:4}]},73678:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(14327);const t=[{value:"selectY",paraId:0,tocIndex:0},{value:" 基于 y 通道上的数据进行筛选，选出符合范围或条件的数据子集。",paraId:0,tocIndex:0},{value:"峰值标注：标记折线图的最高/最低点",paraId:1,tocIndex:1},{value:"首尾标注： 在时间序列中突出显示起点/终点",paraId:2,tocIndex:1},{value:"分类标注： 对不同数据类别进行差异化标记",paraId:3,tocIndex:1},{value:"趋势标注： 标记平均值、中位数等统计特征点",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:2},{value:"描述",paraId:5,tocIndex:2},{value:"类型",paraId:5,tocIndex:2},{value:"默认值",paraId:5,tocIndex:2},{value:"groupBy",paraId:5,tocIndex:2},{value:"针对指定的通道进行分组",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"string[]",paraId:5,tocIndex:2},{value:"series",paraId:5,tocIndex:2},{value:"selector",paraId:5,tocIndex:2},{value:"针对每个分组，指定对应的数据抽取操作",paraId:5,tocIndex:2},{value:"Selector",paraId:6,tocIndex:2},{value:"first",paraId:5,tocIndex:2},{value:"type Selector =\n  | 'min' // 最小值\n  | 'max' // 最大值\n  | 'first' // 第一个值\n  | 'last' // 最后一个值\n  | 'mean' // 平均值\n  | 'median' // 中位数\n  | ((I: number[], V: number[]) => number[]); // 自定义选取函数\n",paraId:7,tocIndex:3},{value:"如下所示，在图表中标注出每个城市的最高温度：",paraId:8,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { month: 1, city: 'Tokyo', temperature: 7 },\n  { month: 1, city: 'London', temperature: 3.9 },\n  { month: 2, city: 'Tokyo', temperature: 6.9 },\n  { month: 2, city: 'London', temperature: 4.2 },\n  { month: 3, city: 'Tokyo', temperature: 9.5 },\n  { month: 3, city: 'London', temperature: 5.7 },\n  { month: 4, city: 'Tokyo', temperature: 14.5 },\n  { month: 4, city: 'London', temperature: 8.5 },\n  { month: 5, city: 'Tokyo', temperature: 18.4 },\n  { month: 5, city: 'London', temperature: 11.9 },\n  { month: 6, city: 'Tokyo', temperature: 21.5 },\n  { month: 6, city: 'London', temperature: 15.2 },\n  { month: 7, city: 'Tokyo', temperature: 25.2 },\n  { month: 7, city: 'London', temperature: 17 },\n  { month: 8, city: 'Tokyo', temperature: 26.5 },\n  { month: 8, city: 'London', temperature: 16.6 },\n  { month: 9, city: 'Tokyo', temperature: 23.3 },\n  { month: 9, city: 'London', temperature: 14.2 },\n  { month: 10, city: 'Tokyo', temperature: 18.3 },\n  { month: 10, city: 'London', temperature: 10.3 },\n  { month: 11, city: 'Tokyo', temperature: 13.9 },\n  { month: 11, city: 'London', temperature: 6.6 },\n  { month: 12, city: 'Tokyo', temperature: 9.6 },\n  { month: 12, city: 'London', temperature: 4.8 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  width: 800,\n  paddingLeft: 50,\n  paddingRight: 100,\n  data,\n  children: [\n    // 折线图标记配置\n    {\n      type: 'line',\n      encode: {\n        x: 'month',\n        y: 'temperature',\n        color: 'city',\n      },\n      axis: {\n        y: {\n          title: '温度',\n        },\n      },\n    },\n    // 文本标记配置\n    {\n      type: 'text',\n      encode: {\n        x: 'month',\n        y: 'temperature',\n        series: 'city',\n        text: (d) => `最高温度：${d.temperature}°C`,\n      },\n      transform: [\n        {\n          // 使用selectY 转换标记\n          type: 'selectY',\n          // 选择最大值\n          selector: 'max',\n        },\n      ],\n      style: {\n        // 标注文本沿y轴偏移12个像素\n        dy: -12,\n      },\n      // 关闭文本标记的tooltip\n      tooltip: false,\n    },\n    // point点标记配置\n    {\n      type: 'point',\n      encode: {\n        x: 'month',\n        y: 'temperature',\n        color: 'city',\n        series: 'city',\n      },\n      transform: [\n        {\n          // 使用selectY 转换标记\n          type: 'selectY',\n          // 选择最大值\n          selector: 'max',\n        },\n      ],\n      // 关闭point点标记的tooltip\n      tooltip: false,\n    },\n  ],\n});\n\nchart.render();\n",paraId:9,tocIndex:4},{value:"",paraId:10,tocIndex:4}]},56801:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(38096);const t=[{value:"sortColor",paraId:0,tocIndex:0},{value:" 是 G2 提供的一个常用数据变换（transform），用于对离散型 color（颜色）通道的定义域进行排序。通过指定排序依据，可以让图表的颜色分组按照某个度量值（如 y、x 等）进行升序或降序排列，从而更直观地展示分组数据的大小关系或分布趋势。",paraId:0,tocIndex:0},{value:"sortColor",paraId:0,tocIndex:0},{value:" 支持灵活的排序通道、聚合方式、分片等配置，常用于突出重点、优化可读性、对比分析等场景，尤其适用于分组柱状图、分组条形图、堆叠图等。",paraId:0,tocIndex:0},{value:"分组柱状图/条形图排序",paraId:1,tocIndex:1},{value:"：将颜色分组（如不同类别、系列）按数值从高到低（或低到高）排列，便于对比各组数据。",paraId:1,tocIndex:1},{value:"分面/多系列排序",paraId:1,tocIndex:1},{value:"：在分面或多系列场景下，按组内某个指标排序，突出分组间的差异。",paraId:1,tocIndex:1},{value:"与其他变换联用",paraId:1,tocIndex:1},{value:"：常与 ",paraId:1,tocIndex:1},{value:"sortX",paraId:1,tocIndex:1},{value:"、",paraId:1,tocIndex:1},{value:"dodgeX",paraId:1,tocIndex:1},{value:" 等 transform 组合使用，实现更复杂的数据布局和视觉效果。",paraId:1,tocIndex:1},{value:"属性",paraId:2,tocIndex:2},{value:"描述",paraId:2,tocIndex:2},{value:"类型",paraId:2,tocIndex:2},{value:"默认值",paraId:2,tocIndex:2},{value:"by",paraId:2,tocIndex:2},{value:"指定排序的通道（如 'y'、'x' 等）",paraId:2,tocIndex:2},{value:"string",paraId:2,tocIndex:2},{value:"'y'",paraId:2,tocIndex:2},{value:"reverse",paraId:2,tocIndex:2},{value:"是否逆序",paraId:2,tocIndex:2},{value:"boolean",paraId:2,tocIndex:2},{value:"false",paraId:2,tocIndex:2},{value:"reducer",paraId:2,tocIndex:2},{value:"分组聚合方式，用于多值比较",paraId:2,tocIndex:2},{value:"Reducer",paraId:2,tocIndex:2},{value:"'max'",paraId:2,tocIndex:2},{value:"指定排序依据的通道，常用如 ",paraId:3,tocIndex:3},{value:"'y'",paraId:3,tocIndex:3},{value:"（按 y 值排序）、",paraId:3,tocIndex:3},{value:"'x'",paraId:3,tocIndex:3},{value:"（按 x 值排序）等。",paraId:3,tocIndex:3},{value:"\n可选通道详见 ",paraId:3,tocIndex:3},{value:"G2 视觉通道文档",paraId:4,tocIndex:3},{value:"。",paraId:3,tocIndex:3},{value:"是否逆序排列。",paraId:5,tocIndex:4},{value:"true",paraId:5,tocIndex:4},{value:" 表示将排序结果逆序，",paraId:5,tocIndex:4},{value:"false",paraId:5,tocIndex:4},{value:" 表示保持默认顺序。实际排序方向还与 ",paraId:5,tocIndex:4},{value:"reducer",paraId:5,tocIndex:4},{value:" 聚合方式有关（如 ",paraId:5,tocIndex:4},{value:"reducer: 'max'",paraId:5,tocIndex:4},{value:" 时，reverse: true 为降序；",paraId:5,tocIndex:4},{value:"reducer: 'min'",paraId:5,tocIndex:4},{value:" 时，reverse: true 为升序）。",paraId:5,tocIndex:4},{value:"当排序依据为数组或分组时，指定聚合方式。支持 ",paraId:6,tocIndex:5},{value:"'max'",paraId:6,tocIndex:5},{value:"、",paraId:6,tocIndex:5},{value:"'min'",paraId:6,tocIndex:5},{value:"、",paraId:6,tocIndex:5},{value:"'sum'",paraId:6,tocIndex:5},{value:"、",paraId:6,tocIndex:5},{value:"'mean'",paraId:6,tocIndex:5},{value:"、",paraId:6,tocIndex:5},{value:"'median'",paraId:6,tocIndex:5},{value:"、",paraId:6,tocIndex:5},{value:"'first'",paraId:6,tocIndex:5},{value:"、",paraId:6,tocIndex:5},{value:"'last'",paraId:6,tocIndex:5},{value:"，也可自定义函数。",paraId:6,tocIndex:5},{value:"type Primitive = number | string | boolean | Date;\n\ntype Reducer =\n  | 'max'\n  | 'min'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | 'mean'\n  | 'median'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:7,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { 类别: 'A', 年份: '2022', 数值: 30 },\n    { 类别: 'A', 年份: '2023', 数值: 50 },\n    { 类别: 'B', 年份: '2022', 数值: 20 },\n    { 类别: 'B', 年份: '2023', 数值: 40 },\n    { 类别: 'C', 年份: '2022', 数值: 35 },\n    { 类别: 'C', 年份: '2023', 数值: 25 },\n  ],\n  encode: { x: '类别', y: '数值', color: '年份' },\n  transform: [\n    { type: 'sortColor', by: 'y', reverse: true },\n    { type: 'dodgeX' },\n  ],\n});\n\nchart.render();\n",paraId:8,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { 类别: 'A', 年份: '2022', 数值: 30 },\n    { 类别: 'A', 年份: '2023', 数值: 50 },\n    { 类别: 'B', 年份: '2022', 数值: 20 },\n    { 类别: 'B', 年份: '2023', 数值: 40 },\n    { 类别: 'C', 年份: '2022', 数值: 35 },\n    { 类别: 'C', 年份: '2023', 数值: 25 },\n  ],\n  encode: { x: '类别', y: '数值', color: '年份' },\n  transform: [\n    { type: 'sortColor', by: 'y', reducer: 'min' }, // 按最小值排序\n    { type: 'dodgeX' },\n  ],\n});\n\nchart.render();\n",paraId:9,tocIndex:8}]},38168:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(87194);const t=[{value:"sortX",paraId:0,tocIndex:0},{value:" 是 G2 提供的一个常用数据变换（transform），用于对",paraId:0,tocIndex:0},{value:"离散型 x 轴",paraId:0,tocIndex:0},{value:"的定义域进行排序。通过指定排序依据，可以让图表的 x 轴按照某个度量值（如 y、color、size 等）进行升序或降序排列，从而更直观地展示数据的大小关系或分布趋势。",paraId:0,tocIndex:0},{value:"sortX",paraId:0,tocIndex:0},{value:" 支持灵活的排序通道、聚合方式、分片等配置，常用于突出重点、优化可读性、对比分析等场景，",paraId:0,tocIndex:0},{value:"尤其适用于 x 通道为离散型的 mark（如 interval、rect、point 等）",paraId:0,tocIndex:0},{value:"。",paraId:0,tocIndex:0},{value:"柱状图/条形图排序",paraId:1,tocIndex:1},{value:"：将柱子按数值从高到低（或低到高）排列，便于对比各项数据。",paraId:1,tocIndex:1},{value:"分组/分面排序",paraId:1,tocIndex:1},{value:"：在分组或分面场景下，按组内某个指标排序，突出分组间的差异。",paraId:1,tocIndex:1},{value:"Top N/Bottom N 筛选",paraId:1,tocIndex:1},{value:"：结合 ",paraId:1,tocIndex:1},{value:"slice",paraId:1,tocIndex:1},{value:" 配置，仅展示前 N 或后 N 项数据，聚焦重点。",paraId:1,tocIndex:1},{value:"与其他变换联用",paraId:1,tocIndex:1},{value:"：常与 ",paraId:1,tocIndex:1},{value:"dodgeX",paraId:1,tocIndex:1},{value:"、",paraId:1,tocIndex:1},{value:"diffY",paraId:1,tocIndex:1},{value:" 等 transform 组合使用，实现更复杂的数据布局和视觉效果。",paraId:1,tocIndex:1},{value:"属性",paraId:2,tocIndex:2},{value:"描述",paraId:2,tocIndex:2},{value:"类型",paraId:2,tocIndex:2},{value:"默认值",paraId:2,tocIndex:2},{value:"by",paraId:2,tocIndex:2},{value:"指定排序的通道（如 'y'、'color'、'size' 等）",paraId:2,tocIndex:2},{value:"string",paraId:2,tocIndex:2},{value:"'y'",paraId:2,tocIndex:2},{value:"reverse",paraId:2,tocIndex:2},{value:"是否逆序",paraId:2,tocIndex:2},{value:"boolean",paraId:2,tocIndex:2},{value:"false",paraId:2,tocIndex:2},{value:"slice",paraId:2,tocIndex:2},{value:"选择一个分片范围（如前 N 项、区间）",paraId:2,tocIndex:2},{value:"number | [number, number]",paraId:2,tocIndex:2},{value:"reducer",paraId:2,tocIndex:2},{value:"分组聚合方式，用于多值比较",paraId:2,tocIndex:2},{value:"Reducer",paraId:2,tocIndex:2},{value:"'max'",paraId:2,tocIndex:2},{value:"ordinal",paraId:2,tocIndex:2},{value:"是否按分类型通道处理（连续数据时设为 false）",paraId:2,tocIndex:2},{value:"boolean",paraId:2,tocIndex:2},{value:"true",paraId:2,tocIndex:2},{value:"指定排序依据的通道，常用如 ",paraId:3,tocIndex:3},{value:"'y'",paraId:3,tocIndex:3},{value:"（按 y 值排序）、",paraId:3,tocIndex:3},{value:"'color'",paraId:3,tocIndex:3},{value:"（按颜色分组排序）、",paraId:3,tocIndex:3},{value:"'size'",paraId:3,tocIndex:3},{value:"（按点大小排序）等。",paraId:3,tocIndex:3},{value:"是否逆序排列。",paraId:4,tocIndex:4},{value:"true",paraId:4,tocIndex:4},{value:" 表示将排序结果逆序，",paraId:4,tocIndex:4},{value:"false",paraId:4,tocIndex:4},{value:" 表示保持默认顺序。实际排序方向还与 ",paraId:4,tocIndex:4},{value:"reducer",paraId:4,tocIndex:4},{value:" 聚合方式有关（如 ",paraId:4,tocIndex:4},{value:"reducer: 'max'",paraId:4,tocIndex:4},{value:" 时，reverse: true 为降序；",paraId:4,tocIndex:4},{value:"reducer: 'min'",paraId:4,tocIndex:4},{value:" 时，reverse: true 为升序）。",paraId:4,tocIndex:4},{value:"用于截取排序后的部分数据。可以是一个数字（前 N 项），或区间 ",paraId:5,tocIndex:5},{value:"[start, end]",paraId:5,tocIndex:5},{value:"。",paraId:5,tocIndex:5},{value:"当排序依据为数组或分组时，指定聚合方式。支持 ",paraId:6,tocIndex:6},{value:"'max'",paraId:6,tocIndex:6},{value:"、",paraId:6,tocIndex:6},{value:"'min'",paraId:6,tocIndex:6},{value:"、",paraId:6,tocIndex:6},{value:"'sum'",paraId:6,tocIndex:6},{value:"、",paraId:6,tocIndex:6},{value:"'mean'",paraId:6,tocIndex:6},{value:"、",paraId:6,tocIndex:6},{value:"'median'",paraId:6,tocIndex:6},{value:"、",paraId:6,tocIndex:6},{value:"'first'",paraId:6,tocIndex:6},{value:"、",paraId:6,tocIndex:6},{value:"'last'",paraId:6,tocIndex:6},{value:"，也可自定义函数。",paraId:6,tocIndex:6},{value:"是否按分类型通道处理，若排序依据为连续型数据可设为 ",paraId:7,tocIndex:7},{value:"false",paraId:7,tocIndex:7},{value:"。",paraId:7,tocIndex:7},{value:"type Reducer =\n  | 'max'\n  | 'min'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | 'mean'\n  | 'median'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:8,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { 类别: 'A', 数值: 30 },\n    { 类别: 'B', 数值: 50 },\n    { 类别: 'C', 数值: 20 },\n    { 类别: 'D', 数值: 40 },\n  ],\n  encode: { x: '类别', y: '数值' },\n  transform: [{ type: 'sortX', by: 'y', reverse: true }],\n});\n\nchart.render();\n",paraId:9,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { 类别: 'A', 数值: 30 },\n    { 类别: 'B', 数值: 50 },\n    { 类别: 'C', 数值: 20 },\n    { 类别: 'D', 数值: 40 },\n  ],\n  encode: { x: '类别', y: '数值' },\n  transform: [{ type: 'sortX', by: 'y', reverse: true, slice: 3 }],\n});\n\nchart.render();\n",paraId:10,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { 州: 'A', 年龄: '青年', 人口: 30 },\n    { 州: 'A', 年龄: '中年', 人口: 40 },\n    { 州: 'A', 年龄: '老年', 人口: 20 },\n    { 州: 'B', 年龄: '青年', 人口: 50 },\n    { 州: 'B', 年龄: '中年', 人口: 60 },\n    { 州: 'B', 年龄: '老年', 人口: 30 },\n  ],\n  encode: { x: '州', y: '人口', color: '年龄' },\n  transform: [{ type: 'sortX', by: 'y', reverse: true }, { type: 'dodgeX' }],\n});\n\nchart.render();\n",paraId:11,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { 类别: 'A', 数值: 30 },\n    { 类别: 'B', 数值: 50 },\n    { 类别: 'C', 数值: 20 },\n    { 类别: 'D', 数值: 40 },\n  ],\n  encode: { x: '类别', y: '数值' },\n  transform: [\n    { type: 'sortX', by: 'y', reducer: 'min' }, // 按最小值排序\n  ],\n});\n\nchart.render();\n",paraId:12,tocIndex:12}]},62078:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(90026);const t=[{value:"sortY",paraId:0,tocIndex:0},{value:" 是 G2 提供的一个常用数据变换（transform），用于对",paraId:0,tocIndex:0},{value:"离散型 y 轴",paraId:0,tocIndex:0},{value:"的定义域进行排序。通过指定排序依据，可以让图表的 y 轴按照某个度量值（如 x、color 等）进行升序或降序排列，从而更直观地展示数据的大小关系或分布趋势。",paraId:0,tocIndex:0},{value:"sortY",paraId:0,tocIndex:0},{value:" 支持灵活的排序通道、聚合方式、分片等配置，常用于突出重点、优化可读性、对比分析等场景，",paraId:0,tocIndex:0},{value:"尤其适用于 y 通道为离散型的 mark（如散点图、词云、image 等）",paraId:0,tocIndex:0},{value:"。",paraId:0,tocIndex:0},{value:"散点图分组排序",paraId:1,tocIndex:1},{value:"：将 y 轴为分组字段的散点图按某个度量值排序。",paraId:1,tocIndex:1},{value:"词云/图片分布排序",paraId:1,tocIndex:1},{value:"：对 y 轴为类别的词云、图片等 mark 排序。",paraId:1,tocIndex:1},{value:"Top N/Bottom N 筛选",paraId:1,tocIndex:1},{value:"：结合 ",paraId:1,tocIndex:1},{value:"slice",paraId:1,tocIndex:1},{value:" 配置，仅展示前 N 或后 N 项数据，聚焦重点。",paraId:1,tocIndex:1},{value:"与其他变换联用",paraId:1,tocIndex:1},{value:"：常与 ",paraId:1,tocIndex:1},{value:"dodgeY",paraId:1,tocIndex:1},{value:"、",paraId:1,tocIndex:1},{value:"diffX",paraId:1,tocIndex:1},{value:" 等 transform 组合使用，实现更复杂的数据布局和视觉效果。",paraId:1,tocIndex:1},{value:"属性",paraId:2,tocIndex:2},{value:"描述",paraId:2,tocIndex:2},{value:"类型",paraId:2,tocIndex:2},{value:"默认值",paraId:2,tocIndex:2},{value:"by",paraId:2,tocIndex:2},{value:"指定排序的通道（如 'x'、'color'、'size' 等）",paraId:2,tocIndex:2},{value:"string",paraId:2,tocIndex:2},{value:"'y'",paraId:2,tocIndex:2},{value:"reverse",paraId:2,tocIndex:2},{value:"是否逆序",paraId:2,tocIndex:2},{value:"boolean",paraId:2,tocIndex:2},{value:"false",paraId:2,tocIndex:2},{value:"slice",paraId:2,tocIndex:2},{value:"选择一个分片范围（如前 N 项、区间）",paraId:2,tocIndex:2},{value:"number | [number, number]",paraId:2,tocIndex:2},{value:"reducer",paraId:2,tocIndex:2},{value:"分组聚合方式，用于多值比较",paraId:2,tocIndex:2},{value:"Reducer",paraId:2,tocIndex:2},{value:"'max'",paraId:2,tocIndex:2},{value:"指定排序依据的通道，常用如 ",paraId:3,tocIndex:3},{value:"'x'",paraId:3,tocIndex:3},{value:"（按 x 值排序）、",paraId:3,tocIndex:3},{value:"'color'",paraId:3,tocIndex:3},{value:"（按颜色分组排序）、",paraId:3,tocIndex:3},{value:"'size'",paraId:3,tocIndex:3},{value:"（按点大小排序）等。",paraId:3,tocIndex:3},{value:"是否逆序排列。",paraId:4,tocIndex:4},{value:"true",paraId:4,tocIndex:4},{value:" 表示将排序结果逆序，",paraId:4,tocIndex:4},{value:"false",paraId:4,tocIndex:4},{value:" 表示保持默认顺序。实际排序方向还与 ",paraId:4,tocIndex:4},{value:"reducer",paraId:4,tocIndex:4},{value:" 聚合方式有关（如 ",paraId:4,tocIndex:4},{value:"reducer: 'max'",paraId:4,tocIndex:4},{value:" 时，reverse: true 为降序；",paraId:4,tocIndex:4},{value:"reducer: 'min'",paraId:4,tocIndex:4},{value:" 时，reverse: true 为升序）。",paraId:4,tocIndex:4},{value:"用于截取排序后的部分数据。可以是一个数字（前 N 项），或区间 ",paraId:5,tocIndex:5},{value:"[start, end]",paraId:5,tocIndex:5},{value:"。",paraId:5,tocIndex:5},{value:"当排序依据为数组或分组时，指定聚合方式。支持 ",paraId:6,tocIndex:6},{value:"'max'",paraId:6,tocIndex:6},{value:"、",paraId:6,tocIndex:6},{value:"'min'",paraId:6,tocIndex:6},{value:"、",paraId:6,tocIndex:6},{value:"'sum'",paraId:6,tocIndex:6},{value:"、",paraId:6,tocIndex:6},{value:"'mean'",paraId:6,tocIndex:6},{value:"、",paraId:6,tocIndex:6},{value:"'median'",paraId:6,tocIndex:6},{value:"、",paraId:6,tocIndex:6},{value:"'first'",paraId:6,tocIndex:6},{value:"、",paraId:6,tocIndex:6},{value:"'last'",paraId:6,tocIndex:6},{value:"，也可自定义函数。",paraId:6,tocIndex:6},{value:"type Reducer =\n  | 'max'\n  | 'min'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | 'mean'\n  | 'median'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:7,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  data: [\n    { city: '北京', year: '2020', value: 30 },\n    { city: '上海', year: '2020', value: 50 },\n    { city: '广州', year: '2020', value: 20 },\n    { city: '深圳', year: '2020', value: 40 },\n    { city: '北京', year: '2021', value: 35 },\n    { city: '上海', year: '2021', value: 55 },\n    { city: '广州', year: '2021', value: 25 },\n    { city: '深圳', year: '2021', value: 45 },\n  ],\n  encode: { x: 'year', y: 'city', color: 'city', size: 'value' },\n  transform: [{ type: 'sortY', by: 'size', reverse: true }],\n});\n\nchart.render();\n",paraId:8,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  data: [\n    { city: '北京', year: '2020', value: 30 },\n    { city: '上海', year: '2020', value: 50 },\n    { city: '广州', year: '2020', value: 20 },\n    { city: '深圳', year: '2020', value: 40 },\n    { city: '北京', year: '2021', value: 35 },\n    { city: '上海', year: '2021', value: 55 },\n    { city: '广州', year: '2021', value: 25 },\n    { city: '深圳', year: '2021', value: 45 },\n  ],\n  encode: { x: 'year', y: 'city', color: 'city', size: 'value' },\n  transform: [{ type: 'sortY', by: 'size', reverse: true, slice: 2 }],\n});\n\nchart.render();\n",paraId:9,tocIndex:9}]},99594:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(47231);const t=[{value:"stackEnter 是堆叠（stack）图形元素的一种动画效果，主要用于堆叠图表的入场动画。其核心功能是通过动态过渡的方式，让堆叠的图形（如柱状图、面积图等）以更直观、美观的形式呈现数据的分层和累积关系。",paraId:0,tocIndex:0},{value:"通过 ",paraId:1,tocIndex:0},{value:"stackEnter",paraId:1,tocIndex:0},{value:"，AntV 让堆叠图表的初始渲染更具表现力，增强数据呈现的清晰度和用户体验。",paraId:1,tocIndex:0},{value:"stackEnter",paraId:2,tocIndex:2},{value:" 会按堆叠顺序（从底部到顶部）依次渲染每一层数据，形成逐层叠加的动画效果。",paraId:2,tocIndex:2},{value:"例如：在堆叠柱状图中，每个类别的柱子会从基线开始，先绘制最底部的数据层，再依次向上叠加其他层，最终形成完整的堆叠柱。",paraId:2,tocIndex:2},{value:"通过动画突出堆叠的“累积过程”，帮助用户理解每层数据对总和的贡献。",paraId:3,tocIndex:3},{value:"适合展示部分与整体的关系（如不同类别在各维度的占比）。",paraId:3,tocIndex:3},{value:"动画通常伴随缓动效果（easing），使过渡更自然，避免生硬的数据变化。",paraId:4,tocIndex:4},{value:"堆叠柱状图/条形图：每根柱子分段向上增长。",paraId:5,tocIndex:5},{value:"堆叠面积图：面积区域从基线逐层展开。",paraId:5,tocIndex:5},{value:"其他堆叠图表：如玫瑰图、雷达图的堆叠形态。",paraId:5,tocIndex:5},{value:"属性",paraId:6,tocIndex:6},{value:"描述",paraId:6,tocIndex:6},{value:"类型",paraId:6,tocIndex:6},{value:"默认值",paraId:6,tocIndex:6},{value:"groupBy",paraId:6,tocIndex:6},{value:"选择一个分组通道",paraId:6,tocIndex:6},{value:"string | string[]",paraId:6,tocIndex:6},{value:"x",paraId:6,tocIndex:6},{value:"reducer",paraId:6,tocIndex:6},{value:"分组取值方式",paraId:6,tocIndex:6},{value:"(I: number[], V: any[]) => any",paraId:6,tocIndex:6},{value:"(I, V) => V[I[0]]",paraId:6,tocIndex:6},{value:"orderBy",paraId:6,tocIndex:6},{value:"排序的通道",paraId:6,tocIndex:6},{value:"string",paraId:6,tocIndex:6},{value:"null",paraId:6,tocIndex:6},{value:"reverse",paraId:6,tocIndex:6},{value:"是否逆序",paraId:6,tocIndex:6},{value:"boolean",paraId:6,tocIndex:6},{value:"true",paraId:6,tocIndex:6},{value:"duration",paraId:6,tocIndex:6},{value:"动画时长（单位千分之一秒）",paraId:6,tocIndex:6},{value:"number",paraId:6,tocIndex:6},{value:"3000",paraId:6,tocIndex:6},{value:"在 ",paraId:7,tocIndex:7},{value:"stackEnter",paraId:7,tocIndex:7},{value:" 执行的时候，需要将数据进行分组，在每个分组中执行 ",paraId:7,tocIndex:7},{value:"stackEnter",paraId:7,tocIndex:7},{value:" 的计算逻辑，比如对于面积图，需要把同一个 x 值下的\ny 数据变成一个组，然后在组内做最大最小值的处理逻辑，所以 ",paraId:7,tocIndex:7},{value:"stackEnter",paraId:7,tocIndex:7},{value:" 设置为 ",paraId:7,tocIndex:7},{value:"x",paraId:7,tocIndex:7},{value:" 通道。",paraId:7,tocIndex:7},{value:"理论上，",paraId:8,tocIndex:7},{value:"stackEnter",paraId:8,tocIndex:7},{value:" 可以设置为所有的通道值，具体可以参考 ",paraId:8,tocIndex:7},{value:"encode",paraId:9,tocIndex:7},{value:" 文档。所有的枚举值如下：",paraId:8,tocIndex:7},{value:"export type ChannelTypes =\n  | 'x'\n  | 'y'\n  | 'z'\n  | 'x1'\n  | 'y1'\n  | 'series'\n  | 'color'\n  | 'opacity'\n  | 'shape'\n  | 'size'\n  | 'key'\n  | 'groupKey'\n  | 'position'\n  | 'series'\n  | 'enterType'\n  | 'enterEasing'\n  | 'enterDuration'\n  | 'enterDelay'\n  | 'updateType'\n  | 'updateEasing'\n  | 'updateDuration'\n  | 'updateDelay'\n  | 'exitType'\n  | 'exitEasing'\n  | 'exitDuration'\n  | 'exitDelay'\n  | `position${number}`;\n",paraId:10,tocIndex:7},{value:"reducer 是一个函数，用于在分组后对数据进行处理。它接收两个参数：",paraId:11,tocIndex:8},{value:"I",paraId:12,tocIndex:8},{value:"：数据索引数组，表示分组后每组数据在原始数据集中的索引位置",paraId:12,tocIndex:8},{value:"V",paraId:12,tocIndex:8},{value:"：原始数据值数组，包含所有数据项",paraId:12,tocIndex:8},{value:"默认情况下，reducer 返回每个分组的第一个元素值：",paraId:13,tocIndex:8},{value:"(I, V) => V[I[0]]",paraId:13,tocIndex:8},{value:"，但你可以自定义这个函数来实现特定的数据处理逻辑，\n例如求和、取平均值等，让图表有更清晰的组织方式。以下是简单的例子供参考：",paraId:13,tocIndex:8},{value:"// 使用自定义 reducer 计算每组数据的总和\nchart.options({\n  // ...\n  transform: [\n    {\n      type: 'stackEnter',\n      groupBy: 'x',\n      reducer: (indices, values) => {\n        // 计算当前分组的所有值的总和\n        return indices.reduce((sum, index) => sum + values[index].value, 0);\n      },\n    },\n  ],\n});\n\n// 使用自定义 reducer 计算每组数据的平均值\nchart.options({\n  // ...\n  transform: [\n    {\n      type: 'stackEnter',\n      groupBy: 'x',\n      reducer: (indices, values) => {\n        const sum = indices.reduce(\n          (acc, index) => acc + values[index].value,\n          0,\n        );\n        return sum / indices.length; // 返回平均值\n      },\n    },\n  ],\n});\n",paraId:14,tocIndex:8},{value:"以下是简单的示例代码，用于展现 ",paraId:15,tocIndex:9},{value:"stackEnter",paraId:15,tocIndex:9},{value:" 的使用方式以及展现效果。",paraId:15,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  data: [\n    { type: 'Apple', year: '2001', value: 260 },\n    { type: 'Orange', year: '2001', value: 100 },\n    { type: 'Banana', year: '2001', value: 90 },\n    { type: 'Apple', year: '2002', value: 210 },\n    { type: 'Orange', year: '2002', value: 150 },\n    { type: 'Banana', year: '2002', value: 30 },\n  ],\n  encode: {\n    x: 'year',\n    y: 'value',\n    color: 'type',\n    series: 'type',\n    enterDuration: 1000,\n  },\n  transform: [{ type: 'stackEnter', groupBy: 'x' }],\n});\n\nchart.render();\n",paraId:16,tocIndex:9},{value:"最后，呈现的如下的效果图（动态效果）：",paraId:17,tocIndex:9}]},18425:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(96641);const t=[{value:"stackY 函数是一个用于实现堆叠图表（Stacked Chart）数据处理的工具函数，主要应用于堆叠柱状图、堆叠面积图等场景。其核心作用是对数据进行堆叠计算，通过在 Y 轴方向上累加每个分类中多个子类别的值，生成整体与部分的对比关系。",paraId:0,tocIndex:0},{value:"stackY 函数会根据指定的分组字段和 Y 轴字段，计算每个数据点在 Y 轴上的起始位置和结束位置，并生成新的数据字段（通常是 y0 和 y1），以便图表渲染时正确绘制堆叠效果。此外，数据的堆叠顺序对图表的可读性和信息传达至关重要，因此 stackY 函数提供了多种选项来控制堆叠顺序和分组方式。",paraId:1,tocIndex:1},{value:"输入：原始数据数组，通常包含分类字段（如 x 轴类别）和数值字段（如 y 轴值），以及用于分组的字段（如 series 字段）。",paraId:2,tocIndex:1},{value:"输出：处理后的数据数组，新增了表示堆叠范围的字段（如 y0 表示堆叠的起始值，y1 表示堆叠的结束值）。",paraId:2,tocIndex:1},{value:"stackY 通常用于以下图表类型：",paraId:3,tocIndex:1},{value:"堆叠柱状图、",paraId:4,tocIndex:1},{value:"堆叠面积图、",paraId:4,tocIndex:1},{value:"等等其他需要数据堆叠的可视化形式。",paraId:4,tocIndex:1},{value:"未使用 ",paraId:5,tocIndex:1},{value:"stackY",paraId:5,tocIndex:1},{value:" 转换前",paraId:5,tocIndex:1},{value:"：数据会堆叠在一起，无法清晰看到各类别的对比。",paraId:5,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/87b2ff47-2a33-4509-869c-dae4cdd81163.csv',\n    format: 'csv',\n    transform: [{ type: 'filter', callback: (d) => d.year === 2000 }],\n  },\n  encode: { x: 'age', y: 'people', color: 'sex' },\n  transform: [{ type: 'groupX', y: 'sum' }],\n  // 注意：这里没有使用 stackY 转换\n  scale: { color: { type: 'ordinal', range: ['#ca8861', '#675193'] } },\n  style: { fillOpacity: 0.7 },\n  axis: { y: { labelFormatter: '~s' } },\n  tooltip: { items: [{ channel: 'y', valueFormatter: '~s' }] },\n});\n\nchart.render();\n",paraId:6,tocIndex:1},{value:"使用 ",paraId:7,tocIndex:1},{value:"stackY",paraId:7,tocIndex:1},{value:" 转换后",paraId:7,tocIndex:1},{value:"：通过 ",paraId:7,tocIndex:1},{value:"stackY",paraId:7,tocIndex:1},{value:" 转换让不同类别的数据堆叠展示，既能看到总数，又能对比分类大小。",paraId:7,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/87b2ff47-2a33-4509-869c-dae4cdd81163.csv',\n    format: 'csv',\n    transform: [{ type: 'filter', callback: (d) => d.year === 2000 }],\n  },\n  encode: { x: 'age', y: 'people', color: 'sex' },\n  transform: [{ type: 'groupX', y: 'sum' }, { type: 'stackY' }], // 应用 stackY 转换，实现堆叠效果\n  scale: { color: { type: 'ordinal', range: ['#ca8861', '#675193'] } },\n  style: { fillOpacity: 0.7 },\n  axis: { y: { labelFormatter: '~s' } },\n  tooltip: { items: [{ channel: 'y', valueFormatter: '~s' }] },\n});\n\nchart.render();\n",paraId:8,tocIndex:1},{value:"属性",paraId:9,tocIndex:2},{value:"描述",paraId:9,tocIndex:2},{value:"类型",paraId:9,tocIndex:2},{value:"默认值",paraId:9,tocIndex:2},{value:"groupBy",paraId:9,tocIndex:2},{value:"指定分组通道",paraId:9,tocIndex:2},{value:"string | string[]",paraId:9,tocIndex:2},{value:"x",paraId:9,tocIndex:2},{value:"orderBy",paraId:9,tocIndex:2},{value:"指定排序的数据",paraId:9,tocIndex:2},{value:"TransformOrder",paraId:9,tocIndex:2},{value:"null",paraId:9,tocIndex:2},{value:"y",paraId:9,tocIndex:2},{value:"y 通道选择的数据通道来源",paraId:9,tocIndex:2},{value:"'y'|'y1'",paraId:9,tocIndex:2},{value:"y",paraId:9,tocIndex:2},{value:"y1",paraId:9,tocIndex:2},{value:"y1 通道选择的数据通道来源",paraId:9,tocIndex:2},{value:"'y'|'y1'",paraId:9,tocIndex:2},{value:"y1",paraId:9,tocIndex:2},{value:"reverse",paraId:9,tocIndex:2},{value:"是否逆序",paraId:9,tocIndex:2},{value:"boolean",paraId:9,tocIndex:2},{value:"false",paraId:9,tocIndex:2},{value:"series",paraId:9,tocIndex:2},{value:"是否有分组字段",paraId:9,tocIndex:2},{value:"boolean",paraId:9,tocIndex:2},{value:"true",paraId:9,tocIndex:2},{value:"在 ",paraId:10,tocIndex:3},{value:"stackY",paraId:10,tocIndex:3},{value:" 执行的时候，需要将数据进行分组，在每个分组中执行 ",paraId:10,tocIndex:3},{value:"stackY",paraId:10,tocIndex:3},{value:" 的计算逻辑，比如对于面积图，需要把同一个 x 值下的\ny 数据变成一个组，然后在组内做最大最小值的处理逻辑，所以 ",paraId:10,tocIndex:3},{value:"stackY",paraId:10,tocIndex:3},{value:" 设置为 ",paraId:10,tocIndex:3},{value:"x",paraId:10,tocIndex:3},{value:" 通道。",paraId:10,tocIndex:3},{value:"理论上，",paraId:11,tocIndex:3},{value:"stackY",paraId:11,tocIndex:3},{value:" 可以设置为所有的通道值，具体可以参考 ",paraId:11,tocIndex:3},{value:"encode",paraId:12,tocIndex:3},{value:" 文档。所有的枚举值如下：",paraId:11,tocIndex:3},{value:"export type ChannelTypes =\n  | 'x'\n  | 'y'\n  | 'z'\n  | 'x1'\n  | 'y1'\n  | 'series'\n  | 'color'\n  | 'opacity'\n  | 'shape'\n  | 'size'\n  | 'key'\n  | 'groupKey'\n  | 'position'\n  | 'series'\n  | 'enterType'\n  | 'enterEasing'\n  | 'enterDuration'\n  | 'enterDelay'\n  | 'updateType'\n  | 'updateEasing'\n  | 'updateDuration'\n  | 'updateDelay'\n  | 'exitType'\n  | 'exitEasing'\n  | 'exitDuration'\n  | 'exitDelay'\n  | `position${number}`;\n",paraId:13,tocIndex:3},{value:"orderBy",paraId:14,tocIndex:4},{value:" 用于指定堆叠的顺序，可以是一个字符串数组，或者是一个函数。函数的参数为数据对象，返回值为一个数值，用于排序。",paraId:14,tocIndex:4},{value:"type Primitive = number | string | boolean | Date;\n\ntype TransformOrder =\n  | 'value'\n  | 'sum'\n  | 'series'\n  | 'maxIndex'\n  | string[]\n  | null\n  | ((data: Record<string, Primitive>) => Primitive);\n",paraId:15,tocIndex:4},{value:"然后，我们再来个相对比较复杂的数据展现情况。比如说，数据来自于 CSV 文件，并且我们需要对数据进行排序和分组：",paraId:16,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [{ type: 'stackY' }, { type: 'sortX', by: 'y', reverse: true }],\n  axis: { y: { labelFormatter: '~s' } },\n});\n\nchart.render();\n",paraId:17,tocIndex:6},{value:"实现的效果如下：",paraId:18,tocIndex:6},{value:"在这个例子中，我们使用了 ",paraId:19,tocIndex:6},{value:"fetch",paraId:19,tocIndex:6},{value:" 来获取数据，并且对数据进行了排序和分组。通过 ",paraId:19,tocIndex:6},{value:"stackY",paraId:19,tocIndex:6},{value:" 方法，我们可以轻松地实现数据的堆叠效果。",paraId:19,tocIndex:6},{value:"下面，我们来个相对比较复杂的情况，归一化堆叠面积图（Normalized Stacked Area Chart）是一种数据可视化图表类型，是堆叠面积图（Stacked Area Chart）的一种变体。",paraId:20,tocIndex:7},{value:"它用于展示多个类别的数据随时间或其他连续变量变化的趋势，同时强调各类别在总和中的相对比例，而不是绝对值。比如我们需要归一化堆叠面积图，也就是实现如下的效果。 可以参考对应的示例代码，详细的可以查阅我们线上的",paraId:21,tocIndex:7},{value:"图表示例",paraId:21,tocIndex:7},{value:"：",paraId:21,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/unemployment-by-industry.json',\n  },\n  encode: { x: (d) => new Date(d.date), y: 'unemployed', color: 'industry' },\n  transform: [{ type: 'stackY' }, { type: 'normalizeY' }],\n  tooltip: { items: [{ channel: 'y0', valueFormatter: '.3f' }] },\n});\n\nchart.render();\n",paraId:22,tocIndex:7},{value:"出现顺序堆叠面积图（Appearance Order Stacked Area Chart）是一种特殊的堆叠面积图变体，其核心特点是堆叠的顺序基于数据中各类别的“出现顺序”或首次出现的时间点，而不是固定的类别顺序或数值大小。",paraId:23,tocIndex:8},{value:"这种图表通常用于展示随时间推移，各类别逐步引入或出现时的累积效果，强调时间维度上的动态变化和新增类别的贡献。",paraId:24,tocIndex:8},{value:"我们可以通过 ",paraId:25,tocIndex:8},{value:"stackY",paraId:25,tocIndex:8},{value:" 变换函数来实现这个效果。比如我们需要实现如下的效果：",paraId:25,tocIndex:8},{value:"对应的代码为：",paraId:26,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f38a8ad0-6e1f-4bb3-894c-7db50781fdec.json',\n  },\n  interaction: { tooltip: { filter: (d) => parseInt(d.value) > 0 } },\n  children: [\n    {\n      type: 'area',\n      encode: {\n        x: (d) => new Date(d.year),\n        y: 'revenue',\n        series: 'format',\n        color: 'group',\n        shape: 'smooth',\n      },\n      transform: [{ type: 'stackY', orderBy: 'maxIndex', reverse: true }],\n      axis: { y: { labelFormatter: '~s' } },\n      tooltip: { items: [{ channel: 'y', valueFormatter: '.2f' }] },\n    },\n    {\n      type: 'line',\n      encode: {\n        x: (d) => new Date(d.year),\n        y: 'revenue',\n        series: 'format',\n        shape: 'smooth',\n        color: 'group',\n      },\n      transform: [\n        { type: 'stackY', orderBy: 'maxIndex', reverse: true, y: 'y1' },\n      ],\n      style: { stroke: 'white' },\n      tooltip: false,\n    },\n  ],\n});\n\nchart.render();\n",paraId:27,tocIndex:8},{value:"详细的示例可以参考我们线上的",paraId:28,tocIndex:8},{value:"图表示例",paraId:28,tocIndex:8},{value:"，以及线上还有其他的堆叠图示例供参考。 最后，是简单的堆叠柱状图，作为调用本函数的最直观展现：",paraId:28,tocIndex:8},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { category: 'A', value: 10, type: 'X' },\n    { category: 'A', value: 20, type: 'Y' },\n    { category: 'B', value: 15, type: 'X' },\n    { category: 'B', value: 25, type: 'Y' },\n  ],\n  encode: { x: 'category', y: 'value', color: 'type' },\n  transform: [{ type: 'stackY' }],\n});\n\nchart.render();\n",paraId:29,tocIndex:8},{value:"图表中，X 和 Y 的值在同一分类下堆叠在一起，形成了一个整体的高度。",paraId:30,tocIndex:8},{value:"A 分类的 X 和 Y 堆叠（总高度 = 10 + 20 = 30）。",paraId:31,tocIndex:8},{value:"B 分类的 X 和 Y 堆叠（总高度 = 15 + 25 = 40）。",paraId:31,tocIndex:8}]},72119:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(12619);const t=[{value:"按照指定通道分组，给每组的 y 和 y1 通道添加偏移，实现对称效果。",paraId:0,tocIndex:0},{value:"symmetry y（Y 轴对称）通常用于强调或突出数据的对称性、对比或镜像关系。以下是常见的应用场景，结合图表类型和实际案例来说明：\n`",paraId:1,tocIndex:1},{value:"场景",paraId:2,tocIndex:1},{value:"图表类型",paraId:2,tocIndex:1},{value:"说明",paraId:2,tocIndex:1},{value:"示例",paraId:2,tocIndex:1},{value:"对比两组数据",paraId:2,tocIndex:1},{value:"柱状图、条形图",paraId:2,tocIndex:1},{value:"两组数据分别显示在 Y 轴两侧，直观展示对比差异（如 A/B 测试结果）。",paraId:2,tocIndex:1},{value:"男性 vs 女性收入分布",paraId:2,tocIndex:1},{value:"镜像关系分析",paraId:2,tocIndex:1},{value:"折线图、面积图",paraId:2,tocIndex:1},{value:"数据围绕 Y 轴对称分布，展示正负关联（如收益与亏损、进出口平衡）。",paraId:2,tocIndex:1},{value:"公司月度盈利与亏损对比",paraId:2,tocIndex:1},{value:"对称分布验证",paraId:2,tocIndex:1},{value:"箱线图、小提琴图",paraId:2,tocIndex:1},{value:"检查数据是否对称分布（如正态分布检验）。",paraId:2,tocIndex:1},{value:"身高/体重的对称性分析",paraId:2,tocIndex:1},{value:"双向偏差展示",paraId:2,tocIndex:1},{value:"误差条形图",paraId:2,tocIndex:1},{value:"同时显示正向和负向偏差（如预测值与实际值的差异）。",paraId:2,tocIndex:1},{value:"天气预报误差范围",paraId:2,tocIndex:1},{value:"对比分析",paraId:3,tocIndex:2},{value:"：快速识别两组数据的差异或相似性。",paraId:3,tocIndex:2},{value:"对称验证",paraId:3,tocIndex:2},{value:"：检验数据是否符合对称分布（如正态性）。",paraId:3,tocIndex:2},{value:"双向表达",paraId:3,tocIndex:2},{value:"：同时展示正向和负向趋势（如盈亏、误差）。",paraId:3,tocIndex:2},{value:"自然规律可视化",paraId:3,tocIndex:2},{value:"：揭示自然界或科学中的对称现象（如物理、生物）。",paraId:3,tocIndex:2},{value:"属性",paraId:4,tocIndex:3},{value:"描述",paraId:4,tocIndex:3},{value:"类型",paraId:4,tocIndex:3},{value:"默认值",paraId:4,tocIndex:3},{value:"groupBy",paraId:4,tocIndex:3},{value:"指定分组通道，可以是单个通道名称、也可以是多个通道（字符串数组）",paraId:4,tocIndex:3},{value:"string | string[]",paraId:4,tocIndex:3},{value:"x",paraId:4,tocIndex:3},{value:"在 ",paraId:5,tocIndex:4},{value:"symmetryY",paraId:5,tocIndex:4},{value:" 执行的时候，需要将数据进行分组，在每个分组中执行 ",paraId:5,tocIndex:4},{value:"symmetryY",paraId:5,tocIndex:4},{value:" 的计算逻辑。比如对于面积图，需要把同一个 x 值下的 y 数据变成一个组，然后在组内做最大最小值的处理逻辑，所以 ",paraId:5,tocIndex:4},{value:"groupBy",paraId:5,tocIndex:4},{value:" 设置为 ",paraId:5,tocIndex:4},{value:"x",paraId:5,tocIndex:4},{value:" 通道。",paraId:5,tocIndex:4},{value:"理论上，",paraId:6,tocIndex:4},{value:"groupBy",paraId:6,tocIndex:4},{value:" 可以设置为所有的通道值，具体可以参考 ",paraId:6,tocIndex:4},{value:"encode",paraId:7,tocIndex:4},{value:" 文档。所有的枚举值如下：",paraId:6,tocIndex:4},{value:"export type ChannelTypes =\n  | 'x'\n  | 'y'\n  | 'z'\n  | 'x1'\n  | 'y1'\n  | 'series'\n  | 'color'\n  | 'opacity'\n  | 'shape'\n  | 'size'\n  | 'key'\n  | 'groupKey'\n  | 'position'\n  | 'series'\n  | 'enterType'\n  | 'enterEasing'\n  | 'enterDuration'\n  | 'enterDelay'\n  | 'updateType'\n  | 'updateEasing'\n  | 'updateDuration'\n  | 'updateDelay'\n  | 'exitType'\n  | 'exitEasing'\n  | 'exitDuration'\n  | 'exitDelay'\n  | `position${number}`;\n",paraId:8,tocIndex:4},{value:"以下是简单的示例代码，用请注意 ",paraId:9,tocIndex:5},{value:".transform({ type: 'symmetryY' })",paraId:9,tocIndex:5},{value:" 转换以及对比对应的输出：",paraId:9,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'area',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/unemployment-by-industry.json',\n    transform: [\n      {\n        type: 'map',\n        callback: (d) => ({\n          ...d,\n          date: new Date(d.date),\n        }),\n      },\n    ],\n  },\n  encode: { x: 'date', y: 'unemployed', color: 'industry' },\n  transform: [{ type: 'stackY' }, { type: 'symmetryY' }],\n});\n\nchart.render();\n",paraId:10,tocIndex:5},{value:"以上的代码就能得到渲染对应的图：",paraId:11,tocIndex:5},{value:"同时，怎么绘制一个对称的条形图？同样的，使用这个 transform 即可，如下：",paraId:12,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  width: 800,\n  height: 300,\n  data: [\n    { x: 'A', y: 100 },\n    { x: 'B', y: 200 },\n    { x: 'C', y: 300 },\n    { x: 'D', y: 250 },\n  ],\n  encode: { x: 'x', y: 'y', color: 'x' },\n  transform: [{ type: 'stackY' }, { type: 'symmetryY' }],\n  scale: { x: { padding: 0.5 } },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  legend: false,\n});\n\nchart.render();\n",paraId:13,tocIndex:5},{value:"请注意最后 ",paraId:14,tocIndex:5},{value:".transform({ type: 'symmetryY' })",paraId:14,tocIndex:5},{value:" 的转换函数。",paraId:14,tocIndex:5},{value:"symmetryY 还有个比较重要的一个应用场景是",paraId:15,tocIndex:6},{value:"漏斗图",paraId:15,tocIndex:6},{value:"（",paraId:15,tocIndex:6},{value:"对比漏斗图",paraId:15,tocIndex:6},{value:"、",paraId:15,tocIndex:6},{value:"转化漏斗图",paraId:15,tocIndex:6},{value:"）、",paraId:15,tocIndex:6},{value:"金字塔图",paraId:15,tocIndex:6},{value:"，用于展现数据的转化以及结果的呈现。例如，比较典型的漏斗图展现如下：",paraId:15,tocIndex:6},{value:"对应的示例代码为：",paraId:16,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { action: '浏览网站', pv: 50000 },\n    { action: '放入购物车', pv: 35000 },\n    { action: '生成订单', pv: 25000 },\n    { action: '支付订单', pv: 15000 },\n    { action: '完成交易', pv: 8000 },\n  ],\n  encode: { x: 'action', y: 'pv', color: 'action', shape: 'funnel' },\n  transform: [{ type: 'symmetryY' }],\n  scale: { x: { padding: 0 } },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  animate: { enter: { type: 'fadeIn' } },\n  axis: false,\n  labels: [\n    {\n      text: (d) => `${d.action}\\\n${d.pv}`,\n      position: 'inside',\n      transform: [{ type: 'contrastReverse' }],\n    },\n  ],\n});\n\nchart.render();\n",paraId:17,tocIndex:6},{value:"具体更多的案例，可以参考以上提供的图表示例页面链接。",paraId:18,tocIndex:6}]},33636:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(49054);const t=[{value:"在 G2 中，",paraId:0,tocIndex:0},{value:"视图（View）",paraId:0,tocIndex:0},{value:" 是图表的核心组成单元，用于承载和组织多个标记（Mark），并统一管理数据、坐标系、交互、样式等。每个视图拥有独立的数据、坐标系和交互配置，是应用交互和样式的最小单位。通过合理拆分视图，可以实现多图层、分面、嵌套等复杂可视化布局。",paraId:0,tocIndex:0},{value:"视图不仅支持灵活的数据和编码配置，还能继承和覆盖父级（如复合视图、分面等）传递的配置，实现灵活的组合与复用。",paraId:1,tocIndex:0},{value:"单一图表（如柱状图、折线图等）的基础绘制",paraId:2,tocIndex:1},{value:"多图层叠加（如柱状图+折线图、点图+热力图等）",paraId:2,tocIndex:1},{value:"分面（Facet）、小 multiples、仪表盘等复合布局",paraId:2,tocIndex:1},{value:"局部交互、局部样式、局部数据的独立管理",paraId:2,tocIndex:1},{value:"主题、动画、状态等高级特性分区应用",paraId:2,tocIndex:1},{value:"视图支持丰富的配置项，涵盖数据、编码、坐标、样式、交互等各个方面。其配置项与顶层 Chart 基本一致，常用如下：",paraId:3,tocIndex:2},{value:"配置项",paraId:4,tocIndex:2},{value:"说明",paraId:4,tocIndex:2},{value:"类型",paraId:4,tocIndex:2},{value:"作用范围/继承关系",paraId:4,tocIndex:2},{value:"data",paraId:4,tocIndex:2},{value:"数据源",paraId:4,tocIndex:2},{value:"array/object",paraId:4,tocIndex:2},{value:"view 及其所有 children",paraId:4,tocIndex:2},{value:"encode",paraId:4,tocIndex:2},{value:"数据到视觉通道的映射",paraId:4,tocIndex:2},{value:"object",paraId:4,tocIndex:2},{value:"view 及其所有 children",paraId:4,tocIndex:2},{value:"scale",paraId:4,tocIndex:2},{value:"视觉通道的比例尺",paraId:4,tocIndex:2},{value:"object",paraId:4,tocIndex:2},{value:"可继承/覆盖（view/mark）",paraId:4,tocIndex:2},{value:"transform",paraId:4,tocIndex:2},{value:"数据变换",paraId:4,tocIndex:2},{value:"array",paraId:4,tocIndex:2},{value:"可继承/覆盖（view/mark）",paraId:4,tocIndex:2},{value:"coordinate",paraId:4,tocIndex:2},{value:"坐标系配置",paraId:4,tocIndex:2},{value:"object",paraId:4,tocIndex:2},{value:"可继承/覆盖（view/mark）",paraId:4,tocIndex:2},{value:"style",paraId:4,tocIndex:2},{value:"视图区域样式",paraId:4,tocIndex:2},{value:"object",paraId:4,tocIndex:2},{value:"仅本 view",paraId:4,tocIndex:2},{value:"axis",paraId:4,tocIndex:2},{value:"坐标轴配置",paraId:4,tocIndex:2},{value:"object",paraId:4,tocIndex:2},{value:"可继承/覆盖（view/mark）",paraId:4,tocIndex:2},{value:"legend",paraId:4,tocIndex:2},{value:"图例配置",paraId:4,tocIndex:2},{value:"object",paraId:4,tocIndex:2},{value:"可继承/覆盖（view/mark）",paraId:4,tocIndex:2},{value:"tooltip",paraId:4,tocIndex:2},{value:"提示框配置",paraId:4,tocIndex:2},{value:"object",paraId:4,tocIndex:2},{value:"仅本 view",paraId:4,tocIndex:2},{value:"interaction",paraId:4,tocIndex:2},{value:"交互配置",paraId:4,tocIndex:2},{value:"object",paraId:4,tocIndex:2},{value:"可继承/覆盖（view/mark）",paraId:4,tocIndex:2},{value:"theme",paraId:4,tocIndex:2},{value:"主题配置",paraId:4,tocIndex:2},{value:"object",paraId:4,tocIndex:2},{value:"可继承/覆盖",paraId:4,tocIndex:2},{value:"children",paraId:4,tocIndex:2},{value:"子标记（marks）或视图",paraId:4,tocIndex:2},{value:"array",paraId:4,tocIndex:2},{value:"仅本 view",paraId:4,tocIndex:2},{value:"说明：",paraId:5,tocIndex:2},{value:"data",paraId:6,tocIndex:2},{value:"、",paraId:6,tocIndex:2},{value:"encode",paraId:6,tocIndex:2},{value:"、",paraId:6,tocIndex:2},{value:"scale",paraId:6,tocIndex:2},{value:"、",paraId:6,tocIndex:2},{value:"axis",paraId:6,tocIndex:2},{value:"、",paraId:6,tocIndex:2},{value:"legend",paraId:6,tocIndex:2},{value:"、",paraId:6,tocIndex:2},{value:"transform",paraId:6,tocIndex:2},{value:"、",paraId:6,tocIndex:2},{value:"coordinate",paraId:6,tocIndex:2},{value:"、",paraId:6,tocIndex:2},{value:"interaction",paraId:6,tocIndex:2},{value:" 等配置在 view 层级设置后，会自动作用于所有 children（mark），mark 层级也可单独覆盖。",paraId:6,tocIndex:2},{value:"其他如 ",paraId:6,tocIndex:2},{value:"style",paraId:6,tocIndex:2},{value:"、",paraId:6,tocIndex:2},{value:"tooltip",paraId:6,tocIndex:2},{value:" 仅作用于当前 view。\n",paraId:6,tocIndex:2},{value:"完整配置示例：",paraId:6,tocIndex:2},{value:"({\n  type: 'view',\n  data: [\n    { type: 'A', value: 30 },\n    { type: 'B', value: 50 },\n    { type: 'C', value: 20 },\n  ],\n  encode: { x: 'type', y: 'value' },\n  scale: { y: { nice: true } },\n  coordinate: { type: 'rect' },\n  style: { viewFill: '#f5f5f5' },\n  axis: { y: { grid: true } },\n  legend: { color: { position: 'top' } },\n  tooltip: {\n    title: { field: 'type' },\n    items: [{ field: 'value' }],\n  },\n  interaction: { elementHighlight: true },\n  theme: { color: ['#5B8FF9', '#5AD8A6', '#5D7092'] },\n  children: [\n    { type: 'interval' },\n    { type: 'line', style: { stroke: '#faad14' } },\n  ],\n});\n",paraId:7,tocIndex:2},{value:"直接在 options 中声明视图及其子元素：",paraId:8,tocIndex:4},{value:"({\n  type: 'view',\n  data: [...],\n  encode: {...},\n  children: [\n    { type: 'interval', encode: {...} },\n    { type: 'line', encode: {...} },\n  ],\n});\n",paraId:9,tocIndex:4},{value:"通过 API 创建视图并添加标记：",paraId:10,tocIndex:5},{value:"const chart = new G2.Chart();\nconst view = chart.view({ data: [...] });\nview.interval().encode('x', 'type').encode('y', 'value');\nview.line().encode('x', 'type').encode('y', 'value');\nchart.render();\n",paraId:11,tocIndex:5},{value:"视图可作为复合节点（如分面、空间布局）的子节点：",paraId:12,tocIndex:6},{value:"const facet = chart.facetRect();\nfacet.view().interval().encode('x', 'type').encode('y', 'value');\nfacet.view().line().encode('x', 'type').encode('y', 'value');\n",paraId:13,tocIndex:6},{value:"视图支持设置自身区域的样式（如背景色、边框等），并可对子标记进行统一样式管理。详见",paraId:14,tocIndex:7},{value:"样式（Style）",paraId:15,tocIndex:7},{value:"。",paraId:14,tocIndex:7},{value:"({\n  type: 'view',\n  style: {\n    viewFill: '#e6f7ff',\n    plotFill: '#fffbe6',\n    mainFill: '#fff',\n    contentFill: '#f0f5ff',\n  },\n  children: [{ type: 'interval', style: { fill: '#5B8FF9' } }],\n});\n",paraId:16,tocIndex:7}]},66308:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(36783);const t=[{value:"G2 5.0.19 版本推出了按需打包的功能。可以借助 ",paraId:0},{value:"Rollup",paraId:0},{value:", ",paraId:0},{value:"Webpack",paraId:0},{value:" 等打包工具的 ",paraId:0},{value:"Tree-Shaking",paraId:0},{value:" 能力来按需使用 G2 的特性，从而减少打包后的体积。虽然从结果上看还有不少优化空间，该功能的推出有以下几个意义：",paraId:0},{value:"防止已有 G2 5.0 用户的包体积无意义的增加。",paraId:1},{value:"能更清晰地分析依赖和整理 G2 5.0 的总体架构。",paraId:1},{value:"提供一种对 G2 5.0 能力扩展的思路。",paraId:1},{value:"比如打包如下的一个网页，该网页使用 G2 绘制了一个条形图：",paraId:2,tocIndex:0},{value:"<html>\n  <div id=\"container\"></div>\n  <script type=\"module\">\n    import { corelib, extend, Runtime } from '@antv/g2';\n\n    // 根据 Runtime 扩展 corelib 的能力\n    const Chart = extend(Runtime, corelib());\n\n    // 初始化扩展后的图表实例\n    const chart = new Chart({\n      container: 'container',\n    });\n\n    // 声明可视化\n    chart.options({\n      type: 'interval',\n      data: [\n        { genre: 'Sports', sold: 275 },\n        { genre: 'Strategy', sold: 115 },\n        { genre: 'Action', sold: 120 },\n        { genre: 'Shooter', sold: 350 },\n        { genre: 'Other', sold: 150 },\n      ],\n      encode: {\n        x: 'genre',\n        y: 'sold',\n      },\n    });\n\n    // 渲染可视化\n    chart.render();\n  <\/script>\n</html>\n",paraId:3,tocIndex:0},{value:"和直接使用 ",paraId:4,tocIndex:0},{value:"import { Chart } from '@antv/g2'",paraId:4,tocIndex:0},{value:" 暴露出的 Chart 对象的打包体积相比如下：",paraId:4,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { lib: 'Chart', size: 957772, type: 'raw' },\n  { lib: 'Chart', size: 288753, type: 'gzip' },\n  { lib: 'Runtime', size: 855619, type: 'raw' },\n  { lib: 'Runtime', size: 252045, type: 'gzip' },\n];\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data,\n  encode: {\n    x: 'lib',\n    y: 'size',\n    color: 'type',\n  },\n  transform: [{ type: 'dodgeX' }],\n  scale: {\n    y: { nice: true },\n  },\n  axis: {\n    y: { labelFormatter: (d) => d / 1000 + 'kb' },\n    x: { title: false },\n  },\n  legend: {\n    color: { title: false },\n  },\n  labels: [{ text: (d) => (d.size / 1000).toFixed(2) + 'kb' }],\n});\n\nchart.render();\n",paraId:5,tocIndex:0},{value:"可以发现体积减少了 ",paraId:6,tocIndex:0},{value:"100kb",paraId:6,tocIndex:0},{value:" 左右。",paraId:6,tocIndex:0},{value:"G2 的架构是由 Runtime + library 构成的。Runtime 负责渲染流程，library 是一个有一系列可视化组件构成的 JavaScript Object，用于在整个渲染的不同阶段处理或者绘制数据。",paraId:7,tocIndex:1},{value:"const library = {\n  'mark.interval': Interval,\n  'mark.forceGraph': ForceGraph,\n  'mark.geoPath': GeoPath,\n  'scale.linear': Linear,\n  'scale.log': Log,\n  //...\n};\n",paraId:8,tocIndex:1},{value:"所以打包后 G2 的大小由 Runtime 的大小和 library 共同决定。Runtime 的大小是固定的，但是 library 的大小是可以变化的：",paraId:9,tocIndex:1},{value:"如果我的项目中只用到了统计图表，就不会依赖地理或者图分析相关的能力，这部分能力对应的可视化组件就不用包含在使用的 library 里面。",paraId:9,tocIndex:1},{value:"基于上面的理论，我们可以通过控制 library 包含的可视化组件来控制最后的包体积。",paraId:10,tocIndex:1},{value:"下面简单介绍一下和按需打包相关的 API。",paraId:11,tocIndex:2},{value:"options",paraId:12},{value:"返回一个 G2 运行时。该运行时不包含任何 Library，需要配合 ",paraId:13,tocIndex:3},{value:"G2",paraId:14,tocIndex:3},{value:".extend",paraId:14,tocIndex:3},{value:" 一起使用。",paraId:13,tocIndex:3},{value:"可以单独使用一个 library，比如只使用核心的能力：",paraId:15,tocIndex:3},{value:"import { Runtime, extend, corelib } from '@antv/g2';\n\nconst Chart = extend(Runtime, corelib());\n",paraId:16,tocIndex:3},{value:"也可以同时使用多个 library，比如使用核心和地理能力：",paraId:17,tocIndex:3},{value:"import { Runtime, extend, corelib, geolib } from '@antv/g2';\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...geolib(),\n});\n",paraId:18,tocIndex:3},{value:"Runtime",paraId:12},{value:"library",paraId:12},{value:"根据指定的 ",paraId:19,tocIndex:4},{value:"library",paraId:19,tocIndex:4},{value:" 对 ",paraId:19,tocIndex:4},{value:"Runtime",paraId:19,tocIndex:4},{value:" 进行增强，包括增加类型和对应的 Chart API。",paraId:19,tocIndex:4},{value:"import { Runtime, extend, corelib } from '@antv/g2';\n\nconst Chart = extend(Runtime, corelib());\n",paraId:20,tocIndex:4},{value:"返回标准库，包含 G2 非 3D 之外的所有能力，也就是包含 ",paraId:21,tocIndex:5},{value:"G2.corelib",paraId:22,tocIndex:5},{value:"，",paraId:21,tocIndex:5},{value:"G2.plotlib",paraId:23,tocIndex:5},{value:"，",paraId:21,tocIndex:5},{value:"G2.geolib",paraId:24,tocIndex:5},{value:"，以及",paraId:21,tocIndex:5},{value:"G2.graphlib",paraId:25,tocIndex:5},{value:" 的所有可视化组件。",paraId:21,tocIndex:5},{value:"G2.Chart",paraId:26,tocIndex:5},{value:" 就是使用了这个 library。(",paraId:21,tocIndex:5},{value:"源码",paraId:21,tocIndex:5},{value:" · ",paraId:21,tocIndex:5},{value:"案例",paraId:21,tocIndex:5},{value:")",paraId:21,tocIndex:5},{value:"import { Runtime, extend, stdlib } from '@antv/g2';\n\nconst Chart = extend(Runtime, stdlib());\n\nconst chart = new Chart();\n\nchart.interval(); // corelib\nchart.sankey(); // plotlib\nchart.geoPath(); // graphlib\nchart.forceGraph(); // graphlib\n",paraId:27,tocIndex:5},{value:"返回核心库，只包含基础的 Mark。可以通过源码看包含的可视化组件。(",paraId:28,tocIndex:6},{value:"源码",paraId:28,tocIndex:6},{value:" · ",paraId:28,tocIndex:6},{value:"案例",paraId:28,tocIndex:6},{value:")",paraId:28,tocIndex:6},{value:"import { Runtime, extend, corelib } from '@antv/g2';\n\nconst Chart = extend(Runtime, corelib());\n",paraId:29,tocIndex:6},{value:"返回高级统计分析库，包含一些复杂的统计标记（Snakey 等）和转换（Venn 等）。不能单独使用，需要配合 ",paraId:30,tocIndex:7},{value:"G2.corelib",paraId:31,tocIndex:7},{value:" 使用。可以通过源码看包含的可视化组件。(",paraId:30,tocIndex:7},{value:"源码",paraId:30,tocIndex:7},{value:" · ",paraId:30,tocIndex:7},{value:"案例",paraId:30,tocIndex:7},{value:")",paraId:30,tocIndex:7},{value:"import { Runtime, extend, corelib, plotlib } from '@antv/g2';\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...plotlib(),\n});\n\nconst chart = new Chart();\n\nchart.sankey();\n",paraId:32,tocIndex:7},{value:"返回地理分析库，包含地理标记（GeoPath 等）和投影（Projection）。不能单独使用，需要配合 ",paraId:33,tocIndex:8},{value:"G2.corelib",paraId:34,tocIndex:8},{value:" 使用。可以通过源码看包含的可视化组件。(",paraId:33,tocIndex:8},{value:"源码",paraId:33,tocIndex:8},{value:" · ",paraId:33,tocIndex:8},{value:"案例",paraId:33,tocIndex:8},{value:")",paraId:33,tocIndex:8},{value:"import { Runtime, extend, corelib, geolib } from '@antv/g2';\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...geolib(),\n});\n\nconst chart = new Chart();\n\nchart.geoPath();\n",paraId:35,tocIndex:8},{value:"返回图分析库，包含图标记（ForceGraph 等）。不能单独使用，需要配合 ",paraId:36,tocIndex:9},{value:"G2.corelib",paraId:37,tocIndex:9},{value:" 使用。可以通过源码看包含的可视化组件。(",paraId:36,tocIndex:9},{value:"源码",paraId:36,tocIndex:9},{value:" · ",paraId:36,tocIndex:9},{value:"案例",paraId:36,tocIndex:9},{value:")",paraId:36,tocIndex:9},{value:"import { Runtime, extend, corelib, graphlib } from '@antv/g2';\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...graphlib(),\n});\n\nconst chart = new Chart();\n\nchart.forceGraph();\n",paraId:38,tocIndex:9},{value:"返回增强分析库，提供增强分析标记（Auto 等）。该 library 会依赖 ",paraId:39,tocIndex:10},{value:"@antv/ava",paraId:39,tocIndex:10},{value:" ，提供自动绘制图表、自动标注等能力。不能单独使用，需要配合 ",paraId:39,tocIndex:10},{value:"G2.corelib",paraId:40,tocIndex:10},{value:" 使用。",paraId:39,tocIndex:10},{value:"import { Runtime, extend, corelib } from '@antv/g2';\nimport { autolib } from '@antv/g2-extension-ava';\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...autolib(),\n});\n\nconst chart = new Chart();\n\nchart.auto(); // Auto Mark\n",paraId:41,tocIndex:10},{value:"开发中，预计 10 月底上线",paraId:42,tocIndex:11},{value:"返回 3D 分析库，提供 3D 可视化的能力。该 library 不会包含在 ",paraId:43,tocIndex:11},{value:"G2.stdlib",paraId:44,tocIndex:11},{value:" 里面，同样不能单独使用，需要配合 ",paraId:43,tocIndex:11},{value:"G2.corelib",paraId:45,tocIndex:11},{value:" 使用。",paraId:43,tocIndex:11},{value:"示例",paraId:46,tocIndex:11},{value:"import { Runtime, extend, corelib } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\nimport { Renderer } from '@antv/g-webgl';\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...threedlib(),\n});\n\nconst chart = new Chart({\n  renderer: new Renderer(), //使用 webgl 渲染器\n  depth: 400, // 设置深度\n});\n\nchart.point3D();\n",paraId:47,tocIndex:11},{value:"目前是推出了按需打包的能力，但是可以发现效果不是很明显，只减少了 10% 左右的大小。通过分析如下 G2 5.0.18 使用 ",paraId:48,tocIndex:12},{value:"G2.stdlib",paraId:49,tocIndex:12},{value:" 依赖图可以有以下几个可以进一步优化思路：",paraId:48,tocIndex:12},{value:"减少 Runtime 的体积：把一些能力放在 library 里面可以按需使用。",paraId:50,tocIndex:12},{value:"依赖治理：去掉一些重复依赖，比如 ",paraId:50,tocIndex:12},{value:"@antv/util",paraId:50,tocIndex:12},{value:"；减少一些依赖的大小 ",paraId:50,tocIndex:12},{value:"@antv/component",paraId:50,tocIndex:12},{value:"。",paraId:50,tocIndex:12},{value:"提供比 corelib 更小的 library：可以实现 Mark 级别的按需打包。",paraId:50,tocIndex:12},{value:"针对第三个方法目前的思路是：提供 ",paraId:51,tocIndex:12},{value:"G2.litelib",paraId:51,tocIndex:12},{value:"，可以按需引入 Mark。",paraId:51,tocIndex:12},{value:"import { Runtime, extend, litelib, Interval } from '@antv/g2';\n\nconst Chart = extend(Runtime, {\n  ...litelib,\n  'mark.interval': Interval,\n});\n\nconst chart = new Chart();\n\nchart.interval();\n",paraId:52,tocIndex:12},{value:"期望中的 ",paraId:53,tocIndex:12},{value:"litelib",paraId:53,tocIndex:12},{value:" 只包含绘制一个可视化所需要的基本组件，其余所有的组件都需要通过 ",paraId:53,tocIndex:12},{value:"import",paraId:53,tocIndex:12},{value:" 的形式按需使用，比如使用 tooltip 交互：",paraId:53,tocIndex:12},{value:"import { Runtime, extend, litelib, Interval, Tooltip } from '@antv/g2';\n\nconst Chart = extend(Runtime, {\n  ...litelib,\n  'mark.interval': Interval,\n  'interaction.tooltip': Tooltip,\n});\n\nconst chart = new Chart();\n\nchart.options({\n  type: 'interval',\n  interaction: { tooltip: true }, // 使用 tooltip 交互\n});\n",paraId:54,tocIndex:12},{value:"如果大家对相关的东西感兴趣，或者对优化 G2 5.0 的包大小有想法，可以提供相关的",paraId:55,tocIndex:12},{value:"想法",paraId:55,tocIndex:12},{value:"或者在 G2 5.0 treeshaking 的",paraId:55,tocIndex:12},{value:"测试环境",paraId:55,tocIndex:12},{value:"把玩把玩！",paraId:55,tocIndex:12}]},51867:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(17653);const t=[{value:"G2 在 5.0 版本中引入了 spec 配置方式，这将成为未来主流的使用方式。然而，当前 spec 存在一个关键问题：",paraId:0,tocIndex:0},{value:"为了提供更灵活的图形样式配置能力，G2 支持了大量 function callback 方式让用户自定义样式，但这带来了一个隐患 —— ",paraId:1,tocIndex:0},{value:"spec 中的函数配置无法序列化",paraId:1,tocIndex:0},{value:"。在 SSR 场景下，用户期望能够将 spec 配置持久化存储，这就需要一种字符串表达式来描述函数行为。",paraId:1,tocIndex:0},{value:"const spec = {\n  style: {\n    // 使用回调函数灵活自定义，但无法持久化存储\n    fill: (d) => (d.value > 100 ? 'red' : 'green'),\n  },\n};\n",paraId:2,tocIndex:0},{value:"为解决这个问题，我们设计并开源了 ",paraId:3,tocIndex:0},{value:"expr",paraId:3,tocIndex:0},{value:"。上述函数写法可等效转换为字符串表达式：",paraId:3,tocIndex:0},{value:"{d.value > 100 ? 'red' : 'green'}",paraId:3,tocIndex:0},{value:"。",paraId:3,tocIndex:0},{value:"要在 G2 中使用表达式，您需要用 ",paraId:4,tocIndex:1},{value:"{",paraId:4,tocIndex:1},{value:" 和 ",paraId:4,tocIndex:1},{value:"}",paraId:4,tocIndex:1},{value:" 包裹表达式内容，以便 G2 能够识别这是一个需要解析的表达式而非普通字符串。例如：",paraId:4,tocIndex:1},{value:'{d.value > 100 ? "red" : "green"}',paraId:4,tocIndex:1},{value:"。",paraId:4,tocIndex:1},{value:"作为开发者，我们最关心的是表达式语法。我们设计了一套简洁直观的模板语法，完整细节请参考 ",paraId:5,tocIndex:2},{value:"expr 文档",paraId:5,tocIndex:2},{value:"，本文不再赘述。",paraId:5,tocIndex:2},{value:"目前，G2 在所有支持函数回调的地方都支持 expr 表达式，系统会在渲染前将表达式解析为渲染器可理解的函数。",paraId:6,tocIndex:3},{value:"这里面临一个挑战：不同函数有不同参数，参数语义各异，如何统一支持表达式？",paraId:7,tocIndex:3},{value:"expr 设计要求模板语法中的参数与 context 中的 key 严格对应。但在 G2 中，回调函数的参数多种多样，若简单设置为 datum、i、data、options 等，语义上会不够清晰，且难以适应各种场景。",paraId:8,tocIndex:3},{value:"经过综合考量，我们采用了无语义变量命名方案 —— 使用 a, b, c, d 等字母变量名表示函数参数的位置顺序。",paraId:9,tocIndex:3},{value:"在不同的回调函数中，参数 ",paraId:10,tocIndex:4},{value:"a",paraId:10,tocIndex:4},{value:", ",paraId:10,tocIndex:4},{value:"b",paraId:10,tocIndex:4},{value:", ",paraId:10,tocIndex:4},{value:"c",paraId:10,tocIndex:4},{value:", ",paraId:10,tocIndex:4},{value:"d",paraId:10,tocIndex:4},{value:" 代表的实际含义会有所不同：",paraId:10,tocIndex:4},{value:"在大多数的回调中，比如 ",paraId:11,tocIndex:4},{value:"style",paraId:11,tocIndex:4},{value:" 的 ",paraId:11,tocIndex:4},{value:"fill",paraId:11,tocIndex:4},{value:"，",paraId:11,tocIndex:4},{value:"labels",paraId:11,tocIndex:4},{value:" 的 ",paraId:11,tocIndex:4},{value:"text",paraId:11,tocIndex:4},{value:" 中，",paraId:11,tocIndex:4},{value:"a",paraId:11,tocIndex:4},{value:" 代表数据项，",paraId:11,tocIndex:4},{value:"b",paraId:11,tocIndex:4},{value:" 代表索引，",paraId:11,tocIndex:4},{value:"c",paraId:11,tocIndex:4},{value:" 代表整个数据集，",paraId:11,tocIndex:4},{value:"d",paraId:11,tocIndex:4},{value:" 代表 options：",paraId:11,tocIndex:4},{value:"labels: [\n  {\n    // 函数方式\n    text: (datum, index, data, options) => `${datum.name}: ${datum.value}`,\n    // 表达式方式 - a 对应 datum，b 对应 index，c 对应 data\n    text: \"{ a.name + ': ' + a.value }\",\n  },\n];\n",paraId:12,tocIndex:4},{value:"在 ",paraId:13,tocIndex:4},{value:"labels",paraId:13,tocIndex:4},{value:" 的 ",paraId:13,tocIndex:4},{value:"selector",paraId:13,tocIndex:4},{value:" 中，",paraId:13,tocIndex:4},{value:"a",paraId:13,tocIndex:4},{value:" 代表整个数据集：",paraId:13,tocIndex:4},{value:"labels: [\n  {\n    // 函数方式\n    selector: (data) => data,\n    // 表达式方式\n    selector: '{a}',\n  },\n];\n",paraId:14,tocIndex:4},{value:"通过这种统一的参数命名约定，我们可以在不同场景下一致地使用表达式，而不必担心参数名称的语义差异。",paraId:15,tocIndex:4},{value:"为了帮助开发者更好地理解如何使用表达式，下面提供了一些常见场景下函数式写法与表达式写法的对比示例：",paraId:16,tocIndex:5},{value:"// 函数式写法\nstyle: {\n  fill: (datum) => (datum.value > 1000 ? 'red' : 'blue'),\n  opacity: (datum) => datum.value / 2000,\n  stroke: (datum) => (datum.category === 'A' ? 'black' : 'gray'),\n  lineWidth: (datum) => (datum.important ? 2 : 1),\n}\n\n// 表达式写法\nstyle: {\n  fill: '{a.value > 1000 ? \"red\" : \"blue\"}',\n  opacity: '{a.value / 2000}',\n  stroke: '{a.category === \"A\" ? \"black\" : \"gray\"}',\n  lineWidth: '{a.important ? 2 : 1}',\n}\n",paraId:17,tocIndex:6},{value:"// 函数式写法\nencode: {\n  x: 'category',\n  y: 'value',\n  color: (datum) => (datum.value > 500 ? 'category1' : 'category2'),\n  opacity: (datum, index) => 1 - index * 0.1,\n}\n\n// 表达式写法\nencode: {\n  x: 'category',\n  y: 'value',\n  color: '{a.value > 500 ? \"category1\" : \"category2\"}',\n  opacity: '{1 - b * 0.1}',\n}\n",paraId:18,tocIndex:7},{value:"// 函数式写法\nlabels: [\n  {\n    text: (datum) => `${datum.name}: ${datum.value}`,\n    position: (datum) => (datum.value > 1000 ? 'top' : 'bottom'),\n    style: {\n      fontSize: (datum) => 10 + datum.value / 200,\n    },\n    transform: [{ type: 'contrastReverse' }],\n  },\n];\n\n// 表达式写法\nlabels: [\n  {\n    text: '{a.name + \": \" + a.value}',\n    position: '{a.value > 1000 ? \"top\" : \"bottom\"}',\n    style: {\n      fontSize: '{10 + a.value / 200}',\n    },\n    transform: [{ type: 'contrastReverse' }],\n  },\n];\n",paraId:19,tocIndex:8},{value:"目前，G2 仅支持以下 API 中回调函数的 expr 表达式写法：",paraId:20,tocIndex:9},{value:"style",paraId:21,tocIndex:9},{value:"encode",paraId:21,tocIndex:9},{value:"labels",paraId:21,tocIndex:9},{value:"children",paraId:21,tocIndex:9},{value:"如果您需要在其他 API 中使用表达式，欢迎提交 issue 反馈。",paraId:22,tocIndex:9},{value:"以下是一个完整的示例，展示了表达式在实际应用中的强大能力：",paraId:23,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst spec = {\n  type: 'spaceLayer',\n  height: 840,\n  width: 640,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/79fd9317-d2af-4bc4-90fa-9d07357398fd.csv',\n    format: 'csv',\n  },\n  children: [\n    {\n      type: 'interval',\n      height: 360,\n      width: 360,\n      legend: false,\n      x: 280,\n      transform: [{ type: 'stackY' }],\n      coordinate: { type: 'theta' },\n      scale: {\n        color: { palette: 'spectral' },\n      },\n      encode: {\n        y: 'value',\n        color: 'name',\n        enterDelay: '{a.value>10000000 ? a.value>20000000 ? 2000 : 1000 : 0}',\n      },\n      style: {\n        stroke: '{ a.value>20000000 ? \"purple\" : null}',\n      },\n      labels: [\n        {\n          text: '{\"*\" + a.name}',\n          radius: '{a.value>15000000 ? a.value>20000000 ? 0.6 : 0.75 : 0.9}',\n          style: {\n            fontSize: '{a.value>15000000 ? a.value>20000000 ? 12 : 10 : 6}',\n            fontWeight: 'bold',\n          },\n          transform: [{ type: 'contrastReverse' }],\n        },\n        {\n          text: '{b < c.length - 3 ? a.value : \"\"}',\n          radius: '{a.value>15000000 ? a.value>20000000 ? 0.6 : 0.75 : 0.9}',\n          style: { fontSize: 9, dy: 12 },\n          transform: [{ type: 'contrastReverse' }],\n        },\n      ],\n      animate: { enter: { type: 'waveIn', duration: 600 } },\n    },\n    {\n      type: 'view',\n      height: 400,\n      width: 540,\n      y: 300,\n      children: [\n        {\n          type: 'interval',\n          height: 400,\n          width: 540,\n          legend: false,\n          y: 300,\n          scale: {\n            color: { palette: 'spectral' },\n          },\n          encode: {\n            y: 'value',\n            x: 'name',\n            color: 'name',\n            enterDelay:\n              '{a.value>10000000 ? a.value>20000000 ? 2000 : 1000 : 0}',\n          },\n        },\n        {\n          type: 'line',\n          height: 400,\n          width: 540,\n          legend: false,\n          y: 300,\n          encode: { x: 'name', y: 'value' },\n          scale: { y: { independent: true } },\n          labels: [\n            {\n              text: '{a.value}',\n              selector: '{a}',\n            },\n          ],\n          axis: {\n            y: {\n              position: 'right',\n              grid: null,\n            },\n          },\n        },\n      ],\n    },\n  ],\n};\n\nchart.options(spec);\n\nchart.render();\n",paraId:24,tocIndex:10}]},70657:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(55357);const t=[{value:"geoPath",paraId:0},{value:" 可以用来结合 geojson 绘制地图。",paraId:0},{value:"import { Chart } from '@antv/g2';\nimport { feature } from 'topojson-client';\n\nPromise.all([\n  fetch('https://assets.antv.antgroup.com/g2/us-10m.json').then((res) =>\n    res.json(),\n  ),\n  fetch('https://assets.antv.antgroup.com/g2/unemployment2.json').then((res) =>\n    res.json(),\n  ),\n]).then((values) => {\n  const [us, unemployment] = values;\n  const counties = feature(us, us.objects.counties).features;\n\n  const chart = new Chart({\n    container: 'container',\n  });\n\n  chart\n    .geoPath()\n    .coordinate({ type: 'albersUsa' })\n    .data({\n      value: counties,\n      transform: [\n        {\n          type: 'join',\n          join: unemployment,\n          on: ['id', 'id'],\n          select: ['rate'],\n        },\n      ],\n    })\n    .scale('color', {\n      type: 'sequential',\n      palette: 'ylGnBu',\n      unknown: '#fff',\n    })\n    .encode('color', 'rate');\n\n  chart.render();\n});\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"目前 ",paraId:4,tocIndex:1},{value:"geoPath",paraId:4,tocIndex:1},{value:" 除了和通用 mark 相同的 API 和配置项，还有一个特殊的就是 ",paraId:4,tocIndex:1},{value:"projection",paraId:4,tocIndex:1},{value:" 映射，当前 G2 内置了 ",paraId:4,tocIndex:1},{value:"d3-geo",paraId:4,tocIndex:1},{value:" 的所有映射。",paraId:4,tocIndex:1},{value:"地图最终是由地理数据决定，所以需要在互联网上找到一个中国行政地图的 geoJson 或 topoJson 数据，并将此数据应用于当前的示例 DEMO 中。",paraId:5,tocIndex:3},{value:"import { Chart } from '@antv/g2';\nimport { feature } from 'topojson-client';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nfetch('xxx/china.topo.json').then(async (res) => {\n  const data = await res.json();\n  const features = feature(data, data.objects.default).features;\n\n  chart\n    .geoPath()\n    .coordinate({ type: 'mercator' })\n    .data(features)\n    .style('stroke', 'white');\n\n  chart.render();\n});\n",paraId:6,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nfetch('xxx/china.json').then(async (res) => {\n  const data = await res.json();\n  const features = data.features;\n\n  chart\n    .geoPath()\n    .coordinate({ type: 'mercator' })\n    .data(features)\n    .style('stroke', 'white');\n\n  chart.render();\n});\n",paraId:7,tocIndex:5}]},65616:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(56692);const t=[{value:"geoView",paraId:0},{value:" 是绘制地图的容器，用于多 geoPath 图层叠加。",paraId:0},{value:"/**\n * A recreation of this demo: https://vega.github.io/vega-lite/examples/geo_layer_line_london.html\n */\nimport { Chart } from '@antv/g2';\nimport { feature } from 'topojson-client';\n\nPromise.all([\n  fetch('https://assets.antv.antgroup.com/g2/londonBoroughs.json').then((res) =>\n    res.json(),\n  ),\n  fetch('https://assets.antv.antgroup.com/g2/londonCentroids.json').then(\n    (res) => res.json(),\n  ),\n  fetch('https://assets.antv.antgroup.com/g2/londonTubeLines.json').then(\n    (res) => res.json(),\n  ),\n]).then((values) => {\n  const [londonBoroughs, londonCentroids, londonTubeLines] = values;\n  const london = feature(\n    londonBoroughs,\n    londonBoroughs.objects.boroughs,\n  ).features;\n  const line = feature(londonTubeLines, londonTubeLines.objects.line).features;\n\n  const chart = new Chart({\n    container: 'container',\n    autoFit: true,\n  });\n\n  const geoView = chart.geoView();\n\n  geoView\n    .geoPath()\n    .data(london)\n    .style('fill', 'lightgray')\n    .style('stroke', 'white')\n    .style('strokeWidth', 2);\n\n  geoView\n    .text()\n    .data(londonCentroids)\n    .encode('x', 'cx')\n    .encode('y', 'cy')\n    .encode('text', (d) => d.name.split(/\\W/)[0])\n    .style('fontSize', 8)\n    .style('opacity', 0.6);\n\n  geoView\n    .geoPath()\n    .data(line)\n    .encode('color', 'id')\n    .encode('shape', 'hollow')\n    .scale('color', {\n      domain: [\n        'Bakerloo',\n        'Central',\n        'Circle',\n        'District',\n        'DLR',\n        'Hammersmith & City',\n        'Jubilee',\n        'Metropolitan',\n        'Northern',\n        'Piccadilly',\n        'Victoria',\n        'Waterloo & City',\n      ],\n      range: [\n        'rgb(137,78,36)',\n        'rgb(220,36,30)',\n        'rgb(255,206,0)',\n        'rgb(1,114,41)',\n        'rgb(0,175,173)',\n        'rgb(215,153,175)',\n        'rgb(106,114,120)',\n        'rgb(114,17,84)',\n        'rgb(0,0,0)',\n        'rgb(0,24,168)',\n        'rgb(0,160,226)',\n        'rgb(106,187,170)',\n      ],\n    });\n\n  chart.render();\n});\n",paraId:1,tocIndex:0},{value:"目前 ",paraId:2,tocIndex:1},{value:"geoView",paraId:2,tocIndex:1},{value:" 容器具备 geoPath 全部的属性，除了 geoPath 作为 mark 独有的 ",paraId:2,tocIndex:1},{value:"encode",paraId:2,tocIndex:1},{value:" 方法。",paraId:2,tocIndex:1},{value:"同样，对于 ",paraId:3,tocIndex:1},{value:"projection",paraId:3,tocIndex:1},{value:" 映射，当前 G2 内置了 ",paraId:3,tocIndex:1},{value:"d3-geo",paraId:3,tocIndex:1},{value:" 的所有映射。",paraId:3,tocIndex:1}]},8831:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(81495);const t=[{value:"力导布局图是一种用来呈现复杂关系网络的图表。在力导布局图中，系统中的每个节点都可以看成是一个放电粒子，粒子间存在某种斥力。同时，这些粒子间被它们之间的“边”所牵连，从而产生引力。",paraId:0},{value:"import { Chart } from '@antv/g2';\nimport { schemeTableau10 } from 'd3-scale-chromatic';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .forceGraph()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/miserable.json',\n  })\n  .scale('color', { range: schemeTableau10 });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"layout",paraId:2,tocIndex:1},{value:"布局配置",paraId:2,tocIndex:1},{value:"ForceTransform",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"style",paraId:2,tocIndex:1},{value:"配置图形样式和标签样式",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"nodeLabels",paraId:2,tocIndex:1},{value:"自定义节点数据标签的配置",paraId:2,tocIndex:1},{value:"label[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"linkLabels",paraId:2,tocIndex:1},{value:"自定义连接线数据标签的配置",paraId:2,tocIndex:1},{value:"label[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:2},{value:"描述",paraId:3,tocIndex:2},{value:"类型",paraId:3,tocIndex:2},{value:"默认值",paraId:3,tocIndex:2},{value:"joint",paraId:3,tocIndex:2},{value:"离散力布局或引力布局",paraId:3,tocIndex:2},{value:"boolean",paraId:3,tocIndex:2},{value:"true",paraId:3,tocIndex:2},{value:"nodeStrength",paraId:3,tocIndex:2},{value:"节点引力",paraId:3,tocIndex:2},{value:"number | (d => number)",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"linkStrength",paraId:3,tocIndex:2},{value:"连接线间引力",paraId:3,tocIndex:2},{value:"number | (d => number)",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"复合图形标记需要通过不同的前缀来区分图形的配置。",paraId:4,tocIndex:3},{value:"<label>",paraId:5,tocIndex:3},{value:": 数据标签的前缀，例如：",paraId:5,tocIndex:3},{value:"labelText",paraId:5,tocIndex:3},{value:" 设置标签的 text 文本。",paraId:5,tocIndex:3},{value:"<node>",paraId:5,tocIndex:3},{value:": 节点配置的前缀，例如：",paraId:5,tocIndex:3},{value:"nodeFill",paraId:5,tocIndex:3},{value:" 设置节点的填充颜色。",paraId:5,tocIndex:3},{value:"<link>",paraId:5,tocIndex:3},{value:": 连接线配置的前缀，例如：",paraId:5,tocIndex:3},{value:"linkStrokeWidth",paraId:5,tocIndex:3},{value:" 设置连接线的宽度。",paraId:5,tocIndex:3}]},62343:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(77023);const t=[{value:"打包图 (",paraId:0},{value:"Circle Packing",paraId:0},{value:") 是树形结构图的变体，使用圆形（而非矩形）一层又一层地代表整个层次结构。常用于描述数据间的包含关系。",paraId:0},{value:"import { Chart } from '@antv/g2';\nimport { interpolateHcl } from 'd3-interpolate';\n\nconst chart = new Chart({\n  container: 'container',\n  padding: 20,\n});\n\nchart\n  .pack()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/flare.json',\n  })\n  .layout({\n    padding: 5,\n  })\n  .encode('value', 'value')\n  .encode('color', 'depth')\n  .scale('color', {\n    domain: [0, 5],\n    range: ['hsl(152,80%,80%)', 'hsl(228,30%,40%)'],\n    interpolate: interpolateHcl,\n  })\n  .style('labelText', (d) =>\n    d.r >= 10 && d.height === 0 ? `${d.data.name}` : '',\n  )\n  .axis(false)\n  .legend(false);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"layout",paraId:2,tocIndex:1},{value:"布局配置",paraId:2,tocIndex:1},{value:"TreeTransform",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"style",paraId:2,tocIndex:1},{value:"配置图形样式和标签样式",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"labels",paraId:2,tocIndex:1},{value:"自定义数据标签的配置",paraId:2,tocIndex:1},{value:"label[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:2},{value:"描述",paraId:3,tocIndex:2},{value:"类型",paraId:3,tocIndex:2},{value:"默认值",paraId:3,tocIndex:2},{value:"sort",paraId:3,tocIndex:2},{value:"排序方式",paraId:3,tocIndex:2},{value:"((a, b) => number)",paraId:3,tocIndex:2},{value:"(a, b) => b.value - a.value",paraId:3,tocIndex:2},{value:"padding",paraId:3,tocIndex:2},{value:"内间距",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"0",paraId:3,tocIndex:2},{value:"复合图形标记需要通过不同的前缀来区分图形的配置。",paraId:4,tocIndex:3},{value:"<label>",paraId:5,tocIndex:3},{value:": 数据标签的前缀，例如：",paraId:5,tocIndex:3},{value:"labelText",paraId:5,tocIndex:3},{value:" 设置标签的 text 文本。",paraId:5,tocIndex:3}]},99081:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(18408);const t=[{value:"桑基图 (",paraId:0},{value:"Sankey Diagram",paraId:0},{value:")，是一种特定类型的流图，用于描述一组值到另一组值的流向。桑基图的特点如下：\n起始流量和结束流量相同，所有主支宽度的总和与所有分出去的分支宽度总和相等，保持能量的平衡；\n在内部，不同的线条代表了不同的流量分流情况，它的宽度成比例地显示此分支占有的流量；\n节点不同的宽度代表了特定状态下的流量大小。\n桑基图通常应用于能源、材料成分、金融等数据的可视化分析。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  padding: 10,\n});\n\nchart\n  .sankey()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/energy.json',\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => ({ links: data }),\n      },\n    ],\n  })\n  .layout({\n    nodeAlign: 'center',\n    nodePadding: 0.03,\n  })\n  .scale('color', { range: schemeTableau10 })\n  .style('labelSpacing', 3)\n  .style('labelFontWeight', 'bold')\n  .style('nodeStrokeWidth', 1.2)\n  .style('linkFillOpacity', 0.4);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"G2 中",paraId:2,tocIndex:0},{value:"布局（Layout）",paraId:2,tocIndex:0},{value:" 用于指定一些有特定布局函数标记的布局方法的参数，比如 Snakey, WordCloud, ForceGraph 等。",paraId:2,tocIndex:0},{value:"({\n  type: 'sankey',\n  layout: {\n    nodeAlign: 'center',\n    nodePadding: 0.03,\n  },\n});\n",paraId:3,tocIndex:0},{value:"// API\nchart.sankey().layout({ nodeAlign: 'center', nodePadding: 0.03 });\n",paraId:4,tocIndex:0},{value:"桑基图支持动态更新数据，使用 G2 内置的 API ",paraId:5,tocIndex:1},{value:"changeData()",paraId:5,tocIndex:1},{value:" 更新数据：",paraId:5,tocIndex:1},{value:"const newData = {\n  links: [\n    { source: 'A', target: 'B', value: 10 },\n    { source: 'A', target: 'C', value: 15 },\n    { source: 'B', target: 'D', value: 8 },\n    { source: 'C', target: 'D', value: 12 },\n  ],\n};\nchart.changeData({ type: 'inline', value: newData });\n",paraId:6,tocIndex:1},{value:"语法糖（推荐）",paraId:7,tocIndex:1},{value:"同时 G2 也提供了便捷的语法糖，你可以像配置其他图表一样，直接传递数组数据：",paraId:8,tocIndex:1},{value:"const newData = [\n  { source: 'A', target: 'X', value: 10 },\n  { source: 'A', target: 'Y', value: 15 },\n  { source: 'B', target: 'X', value: 20 },\n  { source: 'B', target: 'Y', value: 25 },\n];\n\n// 直接传递数组\nchart.changeData(newData);\n",paraId:9,tocIndex:1},{value:"当传入空数组时或者不传入 ",paraId:10,tocIndex:2},{value:"links",paraId:10,tocIndex:2},{value:"，图表将显示为空白状态：",paraId:10,tocIndex:2},{value:"// 清空图表 - 图表将显示为空白状态\nchart.changeData([]);\n// 或者\nchart.changeData({ links: [] });\n",paraId:11,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nconst initialData = [\n  { source: 'A', target: 'X', value: 10 },\n  { source: 'A', target: 'Y', value: 15 },\n  { source: 'B', target: 'X', value: 20 },\n];\n\nchart.sankey().data({\n  type: 'inline',\n  value: initialData,\n});\n\nchart.render();\n\n// 点击事件：随机更新数据\nchart.on('element:click', () => {\n  const randomData = initialData.map((d) => ({\n    ...d,\n    value: Math.random() * 30 + 5,\n  }));\n\n  // 使用简化语法更新数据\n  chart.changeData(randomData);\n});\n",paraId:12,tocIndex:3},{value:"属性",paraId:13,tocIndex:4},{value:"描述",paraId:13,tocIndex:4},{value:"类型",paraId:13,tocIndex:4},{value:"默认值",paraId:13,tocIndex:4},{value:"tooltip",paraId:13,tocIndex:4},{value:"配置桑基图的 tooltip，详见 ",paraId:13,tocIndex:4},{value:"tooltip 配置",paraId:14,tocIndex:4},{value:"object",paraId:13,tocIndex:4},{value:"详见 ",paraId:13,tocIndex:4},{value:"tooltip 配置",paraId:15,tocIndex:4},{value:"layout",paraId:13,tocIndex:4},{value:"配置桑基图的布局方式，详见 ",paraId:13,tocIndex:4},{value:"layout 配置",paraId:16,tocIndex:4},{value:"object",paraId:13,tocIndex:4},{value:"详见 ",paraId:13,tocIndex:4},{value:"layout 配置",paraId:17,tocIndex:4},{value:"style",paraId:13,tocIndex:4},{value:"配置图形样式和标签样式，详见 ",paraId:13,tocIndex:4},{value:"style 配置",paraId:18,tocIndex:4},{value:"object",paraId:13,tocIndex:4},{value:"详见 ",paraId:13,tocIndex:4},{value:"style 配置",paraId:19,tocIndex:4},{value:"nodeLabels",paraId:13,tocIndex:4},{value:"自定义节点数据标签的配置，详见 ",paraId:13,tocIndex:4},{value:"nodeLabels 配置",paraId:20,tocIndex:4},{value:"label[]",paraId:13,tocIndex:4},{value:"[]",paraId:13,tocIndex:4},{value:"linkLabels",paraId:13,tocIndex:4},{value:"自定义连接线数据标签的配置，详见 ",paraId:13,tocIndex:4},{value:"linkLabels 配置",paraId:21,tocIndex:4},{value:"label[]",paraId:13,tocIndex:4},{value:"[]",paraId:13,tocIndex:4},{value:"桑基图作为复合图形，配置 ",paraId:22,tocIndex:5},{value:"tooltip",paraId:22,tocIndex:5},{value:" 的时候需要区分节点和连接线。",paraId:22,tocIndex:5},{value:"不同于单一标记配置 ",paraId:23,tocIndex:6},{value:"title",paraId:23,tocIndex:6},{value:",桑基图需要分别配置 ",paraId:23,tocIndex:6},{value:"nodeTitle",paraId:23,tocIndex:6},{value:" 和 ",paraId:23,tocIndex:6},{value:"linkTitle",paraId:23,tocIndex:6},{value:" 。",paraId:23,tocIndex:6},{value:"({\n  tooltip: {\n    nodeTitle: (d) => d.key,\n    linkTitle: (d) => 'link',\n  },\n});\n",paraId:24,tocIndex:6},{value:"不同于单一标记配置 ",paraId:25,tocIndex:7},{value:"items",paraId:25,tocIndex:7},{value:",桑基图需要同时配置 ",paraId:25,tocIndex:7},{value:"nodeItems",paraId:25,tocIndex:7},{value:" 和 ",paraId:25,tocIndex:7},{value:"linkItems",paraId:25,tocIndex:7},{value:" 。",paraId:25,tocIndex:7},{value:"和一般的 ",paraId:26,tocIndex:7},{value:"items",paraId:26,tocIndex:7},{value:" 一样， ",paraId:26,tocIndex:7},{value:"nodeItems",paraId:26,tocIndex:7},{value:" 和 ",paraId:26,tocIndex:7},{value:"linkItems",paraId:26,tocIndex:7},{value:" 也支持自定义配置：",paraId:26,tocIndex:7},{value:"({\n  tooltip: {\n    nodeItems: [\n      (d, index, data, column) => {\n        return {\n          color: 'red', // 指定 item 的颜色\n          name: '节点', // 指定 item 的名字\n          value: d.key, // 使用 y 通道的值\n          content: '节点自定义属性',\n        };\n      },\n    ],\n    linkItems: [\n      (d, index, data, column) => {\n        return {\n          color: 'red', // 指定 item 的颜色\n          name: '连接线', // 指定 item 的名字\n          value: `${d.source.key}-${d.target.key}`, // 使用 y 通道的值\n          content: '连接线自定义属性',\n        };\n      },\n    ],\n  },\n});\n",paraId:27,tocIndex:7},{value:"和一般 ",paraId:28,tocIndex:8},{value:"Mark",paraId:28,tocIndex:8},{value:" 自定义 ",paraId:28,tocIndex:8},{value:"tooltip",paraId:28,tocIndex:8},{value:" 交互的方法类似，先在图形的 ",paraId:28,tocIndex:8},{value:"tooltip",paraId:28,tocIndex:8},{value:" 里传入自定义属性，然后在 ",paraId:28,tocIndex:8},{value:"interaction",paraId:28,tocIndex:8},{value:" 里使用。",paraId:28,tocIndex:8},{value:"示例：",paraId:29,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = {\n  nodes: [\n    { id: 'a', key: '首页', des: '节点自定义属性' },\n    { id: 'b', key: '页面1', des: '节点自定义属性' },\n    { id: 'b_1', key: '页面1', des: '节点自定义属性' },\n    { id: 'c', key: '页面2', des: '节点自定义属性' },\n    { id: 'c_1', key: '页面2', des: '节点自定义属性' },\n    { id: 'd', key: '页面3', des: '节点自定义属性' },\n    { id: 'd_1', key: '页面3', des: '节点自定义属性' },\n  ],\n  links: [\n    { source: 'a', target: 'b', value: 100 },\n    { source: 'b', target: 'c', value: 80 },\n    { source: 'b', target: 'd', value: 20 },\n    { source: 'c', target: 'b_1', value: 80 },\n    { source: 'b_1', target: 'c_1', value: 40 },\n    { source: 'b_1', target: 'd_1', value: 40 },\n  ],\n};\n\nchart.options({\n  type: 'sankey',\n  width: 900,\n  height: 600,\n  data: {\n    value: data,\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => ({\n          nodes: data.nodes,\n          links: data.links,\n        }),\n      },\n    ],\n  },\n  tooltip: {\n    nodeItems: [\n      (d, index, data, column) => {\n        return {\n          content: d.des,\n        };\n      },\n    ],\n    linkItems: [\n      (d, index, data, column) => {\n        return {\n          color: 'red', // 指定 item 的颜色\n          name: '连接线', // 指定 item 的名字\n          value: `${d.source.key}-${d.target.key}`, // 使用 y 通道的值\n          content: '连接线自定义属性',\n        };\n      },\n    ],\n  },\n  layout: {\n    nodeId: (d) => d.id,\n    nodeAlign: 'center',\n    nodePadding: 0.03,\n    iterations: 25,\n  },\n  style: {\n    labelSpacing: 3,\n    labelFontWeight: 'bold',\n    // linkFillOpacity: 0.2,\n    // linkFill: '#3F96FF',\n  },\n  interaction: {\n    tooltip: {\n      render: (e, { items, title }) => {\n        return `<div>${items[0].content}</div>`;\n      },\n    },\n  },\n});\n\nchart.render();\n",paraId:30,tocIndex:8},{value:"桑基图的布局方式。具体配置项如下：",paraId:31,tocIndex:9},{value:"optional",paraId:32,tocIndex:10},{value:" ",paraId:32,tocIndex:10},{value:"function",paraId:32,tocIndex:10},{value:" ",paraId:32,tocIndex:10},{value:"回调的方式为：",paraId:33,tocIndex:10},{value:"(node: any) => string",paraId:33,tocIndex:10},{value:"，如果未指定 ",paraId:33,tocIndex:10},{value:"nodeId",paraId:33,tocIndex:10},{value:"，默认为 ",paraId:33,tocIndex:10},{value:"(node) => node.key",paraId:33,tocIndex:10},{value:"。",paraId:33,tocIndex:10},{value:"节点绑定字段，在布局中作为唯一标识。",paraId:34,tocIndex:10},{value:"对于多次出现的节点，设置 id 作为唯一标识，并配置 ",paraId:35,tocIndex:11},{value:"nodeId",paraId:35,tocIndex:11},{value:" 的回调方法为 ",paraId:35,tocIndex:11},{value:"(node) => node.id",paraId:35,tocIndex:11},{value:"。",paraId:35,tocIndex:11},{value:"示例：",paraId:36,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = {\n  nodes: [\n    { id: 'a', key: '首页' },\n    { id: 'b', key: '页面1' },\n    { id: 'b_1', key: '页面1' },\n    { id: 'c', key: '页面2' },\n    { id: 'c_1', key: '页面2' },\n    { id: 'd', key: '页面3' },\n    { id: 'd_1', key: '页面3' },\n  ],\n  links: [\n    { source: 'a', target: 'b', value: 100 },\n    { source: 'b', target: 'c', value: 80 },\n    { source: 'b', target: 'd', value: 20 },\n    { source: 'c', target: 'b_1', value: 80 },\n    { source: 'b_1', target: 'c_1', value: 40 },\n    { source: 'b_1', target: 'd_1', value: 40 },\n  ],\n};\n\nchart.options({\n  type: 'sankey',\n  width: 900,\n  height: 600,\n  data: {\n    value: data,\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => ({\n          nodes: data.nodes,\n          links: data.links,\n        }),\n      },\n    ],\n  },\n  layout: {\n    nodeId: (d) => d.id,\n    nodeAlign: 'center',\n    nodePadding: 0.03,\n    iterations: 25,\n  },\n  style: {\n    labelSpacing: 3,\n    labelFontWeight: 'bold',\n    linkFillOpacity: 0.2,\n    linkFill: '#3F96FF',\n  },\n});\n\nchart.render();\n",paraId:37,tocIndex:11},{value:"optional",paraId:38,tocIndex:12},{value:" ",paraId:38,tocIndex:12},{value:"function",paraId:38,tocIndex:12},{value:" ",paraId:38,tocIndex:12},{value:"回调的方式为：",paraId:39,tocIndex:12},{value:"((a: any, b: any) => number)",paraId:39,tocIndex:12},{value:"节点排序方式。如果未指定 ",paraId:40,tocIndex:12},{value:"nodeSort",paraId:40,tocIndex:12},{value:" ，则返回当前节点排序方法，默认为 ",paraId:40,tocIndex:12},{value:"undefined",paraId:40,tocIndex:12},{value:"，表示每列内的节点垂直顺序将由布局自动确定。如果 ",paraId:40,tocIndex:12},{value:"nodeSort",paraId:40,tocIndex:12},{value:" 为 ",paraId:40,tocIndex:12},{value:"null",paraId:40,tocIndex:12},{value:"，则顺序由输入固定。否则，由指定的排序函数确定顺序；该函数传递两个节点，如果第一个节点应位于第二个节点上方，则必须返回小于 0 的值，如果第二个节点应位于第一个节点上方，则必须返回大于 0 的值，如果未指定顺序，则返回 0。",paraId:40,tocIndex:12},{value:" ",paraId:41,tocIndex:13},{value:"optional",paraId:41,tocIndex:13},{value:" ",paraId:41,tocIndex:13},{value:"function",paraId:41,tocIndex:13},{value:" ",paraId:41,tocIndex:13},{value:"回调的方式为：",paraId:42,tocIndex:13},{value:"((a: any, b: any) => number)",paraId:42,tocIndex:13},{value:"连接线排序方式。如果未指定 ",paraId:43,tocIndex:13},{value:"linkSort",paraId:43,tocIndex:13},{value:" ，则返回当前连接线排序方法，默认为 ",paraId:43,tocIndex:13},{value:"undefined",paraId:43,tocIndex:13},{value:"，表示每个节点内的连接线的垂直顺序将由布局自动确定。如果 ",paraId:43,tocIndex:13},{value:"linkSort",paraId:43,tocIndex:13},{value:" 为 ",paraId:43,tocIndex:13},{value:"null",paraId:43,tocIndex:13},{value:"，则顺序由输入固定。否则，由指定的排序函数确定顺序；该函数传递两个连接线，如果第一个连接线应位于第二个连接线上方，则必须返回小于 0 的值，如果第二个连接线应位于第一个连接线上方，则必须返回大于 0 的值，如果未指定顺序，则返回 0。",paraId:43,tocIndex:13},{value:"optional",paraId:44,tocIndex:14},{value:" ",paraId:44,tocIndex:14},{value:"string",paraId:44,tocIndex:14},{value:" ｜ ",paraId:44,tocIndex:14},{value:"function",paraId:44,tocIndex:14},{value:" ",paraId:44,tocIndex:14},{value:"内置支持的类型有： ",paraId:45,tocIndex:14},{value:"'left' | 'right' | 'center' | 'justify'",paraId:45,tocIndex:14},{value:"回调的方式为：",paraId:46,tocIndex:14},{value:"((node: any, n: number) => number",paraId:46,tocIndex:14},{value:"当前节点的对齐方法。除了内置的几种类型外，还可以传递当前节点和图的总深度 ",paraId:47,tocIndex:14},{value:"n",paraId:47,tocIndex:14},{value:" （最大的节点深度+1 ），并且必须返回 ",paraId:47,tocIndex:14},{value:"0",paraId:47,tocIndex:14},{value:" 到 ",paraId:47,tocIndex:14},{value:"n - 1",paraId:47,tocIndex:14},{value:" 之间的整数，指示节点在生成图中所需的水平位置。",paraId:47,tocIndex:14},{value:"optional",paraId:48,tocIndex:15},{value:" ",paraId:48,tocIndex:15},{value:"number",paraId:48,tocIndex:15},{value:" ",paraId:48,tocIndex:15},{value:"节点的宽度。默认为 ",paraId:49,tocIndex:15},{value:"0.02",paraId:49,tocIndex:15},{value:"。",paraId:49,tocIndex:15},{value:"optional",paraId:50,tocIndex:16},{value:" ",paraId:50,tocIndex:16},{value:"number",paraId:50,tocIndex:16},{value:" ",paraId:50,tocIndex:16},{value:"节点的间距。默认为 ",paraId:51,tocIndex:16},{value:"0.02",paraId:51,tocIndex:16},{value:"。",paraId:51,tocIndex:16},{value:"optional",paraId:52,tocIndex:17},{value:" ",paraId:52,tocIndex:17},{value:"function",paraId:52,tocIndex:17},{value:" ",paraId:52,tocIndex:17},{value:"回调的方式为：",paraId:53,tocIndex:17},{value:"(datum: any, maxDepth: number) => number",paraId:53,tocIndex:17},{value:"节点的深度。",paraId:54,tocIndex:17},{value:"optional",paraId:55,tocIndex:18},{value:" ",paraId:55,tocIndex:18},{value:"number",paraId:55,tocIndex:18},{value:" ",paraId:55,tocIndex:18},{value:"布局计算迭代次数，默认为 ",paraId:56,tocIndex:18},{value:"6",paraId:56,tocIndex:18},{value:", 次数越多，布局越合理。",paraId:56,tocIndex:18},{value:"更多 ",paraId:57,tocIndex:18},{value:"layout",paraId:57,tocIndex:18},{value:" 配置，详见 ",paraId:57,tocIndex:18},{value:"d3-sankey",paraId:57,tocIndex:18},{value:"默认 style 配置：",paraId:58,tocIndex:19},{value:"({\n  // label\n  labelText: (d) => d.key,\n  labelSpacing: 5,\n  labelFontSize: 10,\n  // node\n  nodeStroke: '#000',\n  // link\n  linkFillOpacity: 0.5,\n  linkStroke: undefined,\n});\n",paraId:59,tocIndex:19},{value:"复合图形标记需要通过不同的前缀来区分图形的配置。",paraId:60,tocIndex:19},{value:"<label>",paraId:61,tocIndex:19},{value:": 配置数据标签的前缀。",paraId:61,tocIndex:19},{value:"属性名",paraId:62,tocIndex:19},{value:"类型",paraId:62,tocIndex:19},{value:"介绍",paraId:62,tocIndex:19},{value:"labelText",paraId:62,tocIndex:19},{value:"(d: any) => string",paraId:62,tocIndex:19},{value:"桑基图配置默认的数据标签的值，默认为 ",paraId:62,tocIndex:19},{value:"(d) => d.key",paraId:62,tocIndex:19},{value:"labelSpacing",paraId:62,tocIndex:19},{value:"number",paraId:62,tocIndex:19},{value:"桑基图配置数据标签的间距，默认为 ",paraId:62,tocIndex:19},{value:"5",paraId:62,tocIndex:19},{value:"labelFontSize",paraId:62,tocIndex:19},{value:"number",paraId:62,tocIndex:19},{value:"桑基图数据标签文字大小",paraId:62,tocIndex:19},{value:"labelFontFamily",paraId:62,tocIndex:19},{value:"string",paraId:62,tocIndex:19},{value:"桑基图数据标签文字字体",paraId:62,tocIndex:19},{value:"labelFontWeight",paraId:62,tocIndex:19},{value:"number",paraId:62,tocIndex:19},{value:"桑基图数据标签字体粗细",paraId:62,tocIndex:19},{value:"labelLineHeight",paraId:62,tocIndex:19},{value:"number",paraId:62,tocIndex:19},{value:"桑基图数据标签文字的行高",paraId:62,tocIndex:19},{value:"labelTextAlign",paraId:62,tocIndex:19},{value:"string",paraId:62,tocIndex:19},{value:"设置桑基图数据标签文本内容的当前对齐方式, 支持的属性：",paraId:62,tocIndex:19},{value:"center",paraId:62,tocIndex:19},{value:" | ",paraId:62,tocIndex:19},{value:"end",paraId:62,tocIndex:19},{value:" | ",paraId:62,tocIndex:19},{value:"left",paraId:62,tocIndex:19},{value:" | ",paraId:62,tocIndex:19},{value:"right",paraId:62,tocIndex:19},{value:" | ",paraId:62,tocIndex:19},{value:"start",paraId:62,tocIndex:19},{value:"，默认值为",paraId:62,tocIndex:19},{value:"start",paraId:62,tocIndex:19},{value:"labelTextBaseline",paraId:62,tocIndex:19},{value:"string",paraId:62,tocIndex:19},{value:"设置桑基图数据标签在绘制文本时使用的当前文本基线, 支持的属性:",paraId:62,tocIndex:19},{value:"top",paraId:62,tocIndex:19},{value:" | ",paraId:62,tocIndex:19},{value:"middle",paraId:62,tocIndex:19},{value:" | ",paraId:62,tocIndex:19},{value:"bottom",paraId:62,tocIndex:19},{value:" | ",paraId:62,tocIndex:19},{value:"alphabetic",paraId:62,tocIndex:19},{value:" | ",paraId:62,tocIndex:19},{value:"hanging",paraId:62,tocIndex:19},{value:"。默认值为",paraId:62,tocIndex:19},{value:"bottom",paraId:62,tocIndex:19},{value:"labelFill",paraId:62,tocIndex:19},{value:"string",paraId:62,tocIndex:19},{value:"桑基图数据标签文字的填充色",paraId:62,tocIndex:19},{value:"labelFillOpacity",paraId:62,tocIndex:19},{value:"number",paraId:62,tocIndex:19},{value:"桑基图数据标签文字的填充透明度",paraId:62,tocIndex:19},{value:"labelStroke",paraId:62,tocIndex:19},{value:"string",paraId:62,tocIndex:19},{value:"桑基图数据标签文字的描边",paraId:62,tocIndex:19},{value:"labelLineWidth",paraId:62,tocIndex:19},{value:"number",paraId:62,tocIndex:19},{value:"桑基图数据标签文字描边的宽度",paraId:62,tocIndex:19},{value:"labelLineDash",paraId:62,tocIndex:19},{value:"[number,number]",paraId:62,tocIndex:19},{value:"桑基图数据标签描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:62,tocIndex:19},{value:"labelStrokeOpacity",paraId:62,tocIndex:19},{value:"number",paraId:62,tocIndex:19},{value:"桑基图数据标签描边透明度",paraId:62,tocIndex:19},{value:"labelOpacity",paraId:62,tocIndex:19},{value:"number",paraId:62,tocIndex:19},{value:"桑基图数据标签文字的整体透明度",paraId:62,tocIndex:19},{value:"labelShadowColor",paraId:62,tocIndex:19},{value:"string",paraId:62,tocIndex:19},{value:"桑基图数据标签文字阴影颜色",paraId:62,tocIndex:19},{value:"labelShadowBlur",paraId:62,tocIndex:19},{value:"number",paraId:62,tocIndex:19},{value:"桑基图数据标签文字阴影的高斯模糊系数",paraId:62,tocIndex:19},{value:"labelShadowOffsetX",paraId:62,tocIndex:19},{value:"number",paraId:62,tocIndex:19},{value:"设置桑基图数据标签阴影距文字的水平距离",paraId:62,tocIndex:19},{value:"labelShadowOffsetY",paraId:62,tocIndex:19},{value:"number",paraId:62,tocIndex:19},{value:"设置桑基图数据标签阴影距文字的垂直距离",paraId:62,tocIndex:19},{value:"labelCursor",paraId:62,tocIndex:19},{value:"string",paraId:62,tocIndex:19},{value:"桑基图数据标签鼠标样式。同 css 的鼠标样式,默认 'default'。",paraId:62,tocIndex:19},{value:"<node>",paraId:63,tocIndex:19},{value:": 配置节点的前缀。",paraId:63,tocIndex:19},{value:"属性名",paraId:64,tocIndex:19},{value:"类型",paraId:64,tocIndex:19},{value:"介绍",paraId:64,tocIndex:19},{value:"nodeFill",paraId:64,tocIndex:19},{value:"string",paraId:64,tocIndex:19},{value:"桑基图节点填充色",paraId:64,tocIndex:19},{value:"nodeFillOpacity",paraId:64,tocIndex:19},{value:"number",paraId:64,tocIndex:19},{value:"桑基图节点填充透明度",paraId:64,tocIndex:19},{value:"nodeStroke",paraId:64,tocIndex:19},{value:"string",paraId:64,tocIndex:19},{value:"桑基图节点的描边",paraId:64,tocIndex:19},{value:"nodeStrokeOpacity",paraId:64,tocIndex:19},{value:"number",paraId:64,tocIndex:19},{value:"桑基图节点描边透明度",paraId:64,tocIndex:19},{value:"nodeLineWidth",paraId:64,tocIndex:19},{value:"number",paraId:64,tocIndex:19},{value:"桑基图节点描边的宽度",paraId:64,tocIndex:19},{value:"nodeLineDash",paraId:64,tocIndex:19},{value:"[number,number]",paraId:64,tocIndex:19},{value:"桑基图节点描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:64,tocIndex:19},{value:"nodeOpacity",paraId:64,tocIndex:19},{value:"number",paraId:64,tocIndex:19},{value:"桑基图节点的整体透明度",paraId:64,tocIndex:19},{value:"nodeShadowColor",paraId:64,tocIndex:19},{value:"string",paraId:64,tocIndex:19},{value:"桑基图节点阴影颜色",paraId:64,tocIndex:19},{value:"nodeShadowBlur",paraId:64,tocIndex:19},{value:"number",paraId:64,tocIndex:19},{value:"桑基图节点阴影的高斯模糊系数",paraId:64,tocIndex:19},{value:"nodeShadowOffsetX",paraId:64,tocIndex:19},{value:"number",paraId:64,tocIndex:19},{value:"设置阴影距桑基图节点的水平距离",paraId:64,tocIndex:19},{value:"nodeShadowOffsetY",paraId:64,tocIndex:19},{value:"number",paraId:64,tocIndex:19},{value:"设置阴影距桑基图节点的垂直距离",paraId:64,tocIndex:19},{value:"nodeCursor",paraId:64,tocIndex:19},{value:"string",paraId:64,tocIndex:19},{value:"桑基图节点鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:64,tocIndex:19},{value:"<link>",paraId:65,tocIndex:19},{value:": 配置连接线的前缀。",paraId:65,tocIndex:19},{value:"属性名",paraId:66,tocIndex:19},{value:"类型",paraId:66,tocIndex:19},{value:"介绍",paraId:66,tocIndex:19},{value:"linkFill",paraId:66,tocIndex:19},{value:"string",paraId:66,tocIndex:19},{value:"桑基图连接线填充色",paraId:66,tocIndex:19},{value:"linkFillOpacity",paraId:66,tocIndex:19},{value:"number",paraId:66,tocIndex:19},{value:"桑基图连接线填充透明度",paraId:66,tocIndex:19},{value:"linkStroke",paraId:66,tocIndex:19},{value:"string",paraId:66,tocIndex:19},{value:"桑基图连接线的描边",paraId:66,tocIndex:19},{value:"linkStrokeOpacity",paraId:66,tocIndex:19},{value:"number",paraId:66,tocIndex:19},{value:"桑基图连接线描边透明度",paraId:66,tocIndex:19},{value:"linkLineWidth",paraId:66,tocIndex:19},{value:"number",paraId:66,tocIndex:19},{value:"桑基图连接线描边的宽度",paraId:66,tocIndex:19},{value:"linkLineDash",paraId:66,tocIndex:19},{value:"[number,number]",paraId:66,tocIndex:19},{value:"桑基图连接线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0,0]的效果为没有描边。",paraId:66,tocIndex:19},{value:"linkOpacity",paraId:66,tocIndex:19},{value:"number",paraId:66,tocIndex:19},{value:"桑基图连接线的整体透明度",paraId:66,tocIndex:19},{value:"linkShadowColor",paraId:66,tocIndex:19},{value:"string",paraId:66,tocIndex:19},{value:"桑基图连接线阴影颜色",paraId:66,tocIndex:19},{value:"linkShadowBlur",paraId:66,tocIndex:19},{value:"number",paraId:66,tocIndex:19},{value:"桑基图连接线阴影的高斯模糊系数",paraId:66,tocIndex:19},{value:"linkShadowOffsetX",paraId:66,tocIndex:19},{value:"number",paraId:66,tocIndex:19},{value:"设置阴影距桑基图连接线的水平距离",paraId:66,tocIndex:19},{value:"linkShadowOffsetY",paraId:66,tocIndex:19},{value:"number",paraId:66,tocIndex:19},{value:"设置阴影距桑基图连接线的垂直距离",paraId:66,tocIndex:19},{value:"linkCursor",paraId:66,tocIndex:19},{value:"string",paraId:66,tocIndex:19},{value:"桑基图连接线鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:66,tocIndex:19},{value:"optional",paraId:67,tocIndex:20},{value:" ",paraId:67,tocIndex:20},{value:"Label[]",paraId:67,tocIndex:20},{value:" ",paraId:67,tocIndex:20},{value:"内置数据标签的配置如下。",paraId:68,tocIndex:20},{value:"({\n  labels: [\n    {\n      text,\n      dx: (d) => (d.x[0] < 0.5 ? spacing : -spacing),\n      ...labelStyle, // 用户传入的数据标签自定义样式\n    },\n    ...nodeLabels, // 用户传入的自定义数据标签\n  ],\n});\n",paraId:69,tocIndex:20},{value:"除了节点内置的数据标签以外，你还可以自定义节点数据标签的配置。",paraId:70,tocIndex:20},{value:"({\n  nodeLabels: [\n    {\n      text: (d) => d.key,\n      fontSize: 10, // 注意！！！这里的绘图属性不再需要加label前缀\n      fill: 'red',\n    },\n  ],\n});\n",paraId:71,tocIndex:20},{value:"optional",paraId:72,tocIndex:21},{value:" ",paraId:72,tocIndex:21},{value:"Label[]",paraId:72,tocIndex:21},{value:" ",paraId:72,tocIndex:21},{value:"连接线没有内置的数据标签，你可以自定义连接线数据标签的配置。",paraId:73,tocIndex:21},{value:"({\n  linkLabels: [\n    {\n      text: (d) => d.key,\n      fontSize: 10, // 注意！！！这里的绘图属性不再需要加label前缀\n      fill: 'yellow',\n    },\n  ],\n});\n",paraId:74,tocIndex:21},{value:"state 配置和 style 类似，使用不同的前缀来区分不同的图形配置，没有前缀的配置两种图形都会生效。",paraId:75,tocIndex:22},{value:"示例:",paraId:76,tocIndex:22},{value:"(() => {\n  const chart = new G2.Chart();\n\n  const data = {\n    links: [\n      { source: 'a', target: 'b', value: 100 },\n      { source: 'b', target: 'c', value: 80 },\n      { source: 'b', target: 'd', value: 20 },\n      { source: 'c', target: 'b_1', value: 80 },\n      { source: 'b_1', target: 'c_1', value: 40 },\n      { source: 'b_1', target: 'd_1', value: 40 },\n    ],\n  };\n\n  chart.options({\n    type: 'sankey',\n    width: 900,\n    height: 600,\n    data: {\n      value: data,\n    },\n    style: {\n      labelSpacing: 3,\n      labelFontWeight: 'bold',\n      linkFillOpacity: 0.5,\n      nodeFillOpacity: 0.5, //默认透明度都是 0.5\n    },\n    state: {\n      active: {\n        fillOpacity: 0.8, // 鼠标悬浮状态下透明度都是 0.8\n        linkFill: 'red', // link 会变成红色\n        nodeFill: 'blue', // node 会变成蓝色\n      },\n      inactive: {\n        linkFillOpacity: 0.4,\n        nodeFillOpacity: 0.2, // node 颜色比 link 浅\n      },\n    },\n    interaction: {\n      elementHighlight: true,\n    },\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:77,tocIndex:22}]},29214:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(99395);const t=[{value:"树图 (",paraId:0},{value:"Tree",paraId:0},{value:") 能将事物或现象分解成树枝状，又称树型图或系统图。在树形结构中，树根结点没有前驱结点，其余每个结点有且只有一个前驱结点。叶子结点没有后续结点，其余每个结点的后续节点数可以是一个也可以是多个。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'tree',\n  width: 800,\n  height: 1500,\n  layout: { sortBy: (a, b) => a.value - b.value },\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/flare.json',\n  },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  style: {\n    nodeFill: (d) => (d.height === 0 ? '#999' : '#000'),\n    linkStroke: '#999',\n    labelText: (d) => d.data.name || '-',\n    labelFontSize: (d) => (d.height === 0 ? 7 : 12),\n    labelTextAlign: (d) => (d.height === 0 ? 'start' : 'end'),\n    labelPosition: (d) => (d.height !== 0 ? 'left' : 'right'),\n    labelDx: (d) => (d.height === 0 ? 5 : -5),\n    labelBackground: true,\n    labelBackgroundFill: '#fff',\n  },\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"树图支持多种数据配置方式：",paraId:2,tocIndex:1},{value:"通过 ",paraId:3,tocIndex:2},{value:"type: 'fetch'",paraId:3,tocIndex:2},{value:" 从远程获取数据，支持 JSON、CSV 等格式：",paraId:3,tocIndex:2},{value:"chart.tree().data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/flare.json',\n});\n",paraId:4,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'tree',\n  data: {\n    type: 'inline',\n    value: {\n      name: 'root',\n      children: [\n        {\n          name: 'branch1',\n          value: 100,\n          children: [\n            { name: 'leaf1', value: 50 },\n            { name: 'leaf2', value: 30 },\n          ],\n        },\n        {\n          name: 'branch2',\n          value: 80,\n          children: [\n            { name: 'leaf3', value: 40 },\n            { name: 'leaf4', value: 40 },\n          ],\n        },\n      ],\n    },\n  },\n});\n\nchart.render();\n",paraId:5,tocIndex:4},{value:"由于 G2 默认数据类型是 ",paraId:6,tocIndex:5},{value:"inline",paraId:6,tocIndex:5},{value:"，可以直接传入数据：",paraId:6,tocIndex:5},{value:"// 直接传入层级数据对象\nchart.tree().data({\n  value: {\n    name: 'root',\n    children: [\n      {\n        name: 'branch1',\n        value: 100,\n        children: [\n          { name: 'leaf1', value: 50 },\n          { name: 'leaf2', value: 30 },\n        ],\n      },\n    ],\n  },\n});\n\n// 或者传入扁平数据数组（需要配置 layout.path）\nconst flatData = [\n  { name: 'root', value: 180 },\n  { name: 'root/branch1', value: 100 },\n  { name: 'root/branch1/leaf1', value: 50 },\n  { name: 'root/branch1/leaf2', value: 30 },\n  { name: 'root/branch2', value: 80 },\n  { name: 'root/branch2/leaf3', value: 40 },\n  { name: 'root/branch2/leaf4', value: 40 },\n];\n\nchart\n  .tree()\n  .data({ value: flatData })\n  .layout({\n    path: (d) => d.name, // 指定路径字段\n  });\n",paraId:7,tocIndex:5},{value:"树图支持两种数据结构：",paraId:8,tocIndex:6},{value:"层级结构数据",paraId:9,tocIndex:6},{value:"：已经是树形结构的 JSON 对象，每个节点包含 ",paraId:9,tocIndex:6},{value:"children",paraId:9,tocIndex:6},{value:" 数组",paraId:9,tocIndex:6},{value:"扁平数据",paraId:9,tocIndex:6},{value:"：包含路径信息的数组，需要通过 ",paraId:9,tocIndex:6},{value:"layout.path",paraId:9,tocIndex:6},{value:" 配置来构建层级关系",paraId:9,tocIndex:6},{value:"层级结构数据示例：",paraId:10,tocIndex:6},{value:'{\n  "name": "root",\n  "value": 180,\n  "children": [\n    {\n      "name": "branch1",\n      "value": 100,\n      "children": [\n        { "name": "leaf1", "value": 50 },\n        { "name": "leaf2", "value": 30 }\n      ]\n    }\n  ]\n}\n',paraId:11,tocIndex:6},{value:"扁平数据示例：",paraId:12,tocIndex:6},{value:'[\n  { "name": "root", "value": 180 },\n  { "name": "root/branch1", "value": 100 },\n  { "name": "root/branch1/leaf1", "value": 50 }\n]\n',paraId:13,tocIndex:6},{value:"属性",paraId:14,tocIndex:7},{value:"描述",paraId:14,tocIndex:7},{value:"类型",paraId:14,tocIndex:7},{value:"默认值",paraId:14,tocIndex:7},{value:"layout",paraId:14,tocIndex:7},{value:"布局配置",paraId:14,tocIndex:7},{value:"TreeTransform",paraId:14,tocIndex:7},{value:"-",paraId:14,tocIndex:7},{value:"style",paraId:14,tocIndex:7},{value:"配置图形样式和标签样式",paraId:14,tocIndex:7},{value:"-",paraId:14,tocIndex:7},{value:"-",paraId:14,tocIndex:7},{value:"nodeLabels",paraId:14,tocIndex:7},{value:"自定义节点数据标签的配置",paraId:14,tocIndex:7},{value:"label[]",paraId:14,tocIndex:7},{value:"[]",paraId:14,tocIndex:7},{value:"linkLabels",paraId:14,tocIndex:7},{value:"自定义连接线数据标签的配置",paraId:14,tocIndex:7},{value:"label[]",paraId:14,tocIndex:7},{value:"[]",paraId:14,tocIndex:7},{value:"属性",paraId:15,tocIndex:8},{value:"描述",paraId:15,tocIndex:8},{value:"类型",paraId:15,tocIndex:8},{value:"默认值",paraId:15,tocIndex:8},{value:"nodeSize",paraId:15,tocIndex:8},{value:"节点大小",paraId:15,tocIndex:8},{value:"(node: any) => string",paraId:15,tocIndex:8},{value:"-",paraId:15,tocIndex:8},{value:"sortBy",paraId:15,tocIndex:8},{value:"排序方式",paraId:15,tocIndex:8},{value:"((a, b) => number)",paraId:15,tocIndex:8},{value:"(a, b) => b.value - a.value",paraId:15,tocIndex:8},{value:"separation",paraId:15,tocIndex:8},{value:"相邻节点间距",paraId:15,tocIndex:8},{value:"(a, b) => number",paraId:15,tocIndex:8},{value:"(a, b) => a.parent == b.parent ? 1 : 2",paraId:15,tocIndex:8},{value:"path",paraId:15,tocIndex:8},{value:"路径字段配置",paraId:15,tocIndex:8},{value:"(d: any) => string",paraId:15,tocIndex:8},{value:"-",paraId:15,tocIndex:8},{value:"注意",paraId:16,tocIndex:8},{value:"：当使用扁平数据时，必须配置 ",paraId:16,tocIndex:8},{value:"layout.path",paraId:16,tocIndex:8},{value:" 来指定如何从数据中提取层级路径信息。",paraId:16,tocIndex:8},{value:"复合图形标记需要通过不同的前缀来区分图形的配置。",paraId:17,tocIndex:9},{value:"<label>",paraId:18,tocIndex:9},{value:": 数据标签的前缀，例如：",paraId:18,tocIndex:9},{value:"labelText",paraId:18,tocIndex:9},{value:" 设置标签的 text 文本。",paraId:18,tocIndex:9},{value:"<node>",paraId:18,tocIndex:9},{value:": 节点配置的前缀，例如：",paraId:18,tocIndex:9},{value:"nodeFill",paraId:18,tocIndex:9},{value:" 设置节点的填充颜色。",paraId:18,tocIndex:9},{value:"<link>",paraId:18,tocIndex:9},{value:": 连接线配置的前缀，例如：",paraId:18,tocIndex:9},{value:"linkStrokeWidth",paraId:18,tocIndex:9},{value:" 设置连接线的宽度。",paraId:18,tocIndex:9},{value:"如何绘制圆形树图？\n需要指定 ",paraId:19,tocIndex:10},{value:"coordinate: { type: 'polar' }",paraId:19,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'tree',\n  layout: { sortBy: (a, b) => a.value - b.value },\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/flare.json',\n  },\n  coordinate: { type: 'polar' },\n  style: {\n    nodeFill: (d) => (d.height === 0 ? '#999' : '#000'),\n    linkStroke: '#999',\n    labelText: (d) => d.data.name || '-',\n    labelFontSize: (d) => (d.height === 0 ? 7 : 12),\n    labelTextAlign: (d) => (d.height === 0 ? 'start' : 'end'),\n    labelPosition: (d) => (d.height !== 0 ? 'left' : 'right'),\n    labelDx: (d) => (d.height === 0 ? 5 : -5),\n    labelBackground: true,\n    labelBackgroundFill: '#fff',\n  },\n});\n\nchart.render();\n",paraId:20,tocIndex:10}]},28904:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(20938);const t=[{value:"矩形树图根据每个节点的关联值递归地将空间划分为矩形，适用于展示带权的树形数据。\n矩形树图适合展现具有层级关系的数据，能够直观体现同级之间的比较。一个 Tree 状结构转化为平面空间矩形的状态。矩形树图的好处在于，相比起传统的树形结构图，矩形树图能更有效得利用空间，并且拥有展示占比的功能。",paraId:0,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'treemap',\n  data: {\n    type: 'custom',\n    callback: (data) => ({\n      name: '图表类型',\n      children: [\n        {\n          name: '基础图表',\n          children: [\n            { name: '条形图', value: 300 },\n            { name: '折线图', value: 600 },\n            { name: '散点图', value: 160 },\n            { name: '面积图', value: 160 },\n            { name: '其他', value: 180 },\n          ],\n        },\n        {\n          name: '数据分析',\n          children: [\n            { name: '分箱', value: 280 },\n            { name: '分组', value: 150 },\n            { name: '回归线', value: 210 },\n            { name: '其他', value: 40 },\n          ],\n        },\n      ],\n    }),\n  },\n  layout: {\n    tile: 'treemapBinary',\n    paddingInner: 1,\n  },\n  encode: { value: 'value' },\n  style: {\n    labelFill: '#000',\n    labelStroke: '#fff',\n    labelLineWidth: 1.5,\n    labelFontSize: 14,\n    labelPosition: 'top-left',\n    labelDx: 5,\n    labelDy: 5,\n  },\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例 - 关系图",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"treemap 支持两种数据格式：",paraId:4,tocIndex:1},{value:"对于已经是层级结构的数据，可以直接使用，无需配置 ",paraId:5,tocIndex:2},{value:"path",paraId:5,tocIndex:2},{value:"：",paraId:5,tocIndex:2},{value:"{\n  name: '根节点',\n  children: [\n    {\n      name: '子节点1',\n      children: [\n        { name: '叶子节点1', value: 100 },\n        { name: '叶子节点2', value: 200 }\n      ]\n    },\n    { name: '子节点2', value: 300 }\n  ]\n}\n",paraId:6,tocIndex:2},{value:"对于使用路径字符串表示层级关系的扁平化数据，",paraId:7,tocIndex:3},{value:"必须配置 ",paraId:7,tocIndex:3},{value:"path",paraId:7,tocIndex:3},{value:" 函数",paraId:7,tocIndex:3},{value:"：",paraId:7,tocIndex:3},{value:"name,size\nflare,\nflare.analytics,\nflare.analytics.cluster,\nflare.analytics.cluster.AgglomerativeCluster,3938\n",paraId:8,tocIndex:3},{value:"对于这种数据格式，必须使用 ",paraId:9,tocIndex:3},{value:"path",paraId:9,tocIndex:3},{value:" 配置：",paraId:9,tocIndex:3},{value:"layout: {\n  path: (d) => d.name.replace(/\\./g, '/'), // 将点分隔转换为斜杠分隔\n}\n",paraId:10,tocIndex:3},{value:"重要说明",paraId:11,tocIndex:3},{value:"：如果使用扁平化数据但没有配置 ",paraId:11,tocIndex:3},{value:"path",paraId:11,tocIndex:3},{value:'，会导致 "multiple roots" 错误。这是因为：',paraId:11,tocIndex:3},{value:"D3 的 stratify 默认期望数据有 ",paraId:12,tocIndex:3},{value:"id",paraId:12,tocIndex:3},{value:" 和 ",paraId:12,tocIndex:3},{value:"parentId",paraId:12,tocIndex:3},{value:" 字段来建立层级关系",paraId:12,tocIndex:3},{value:"扁平化数据通常只有路径字符串（如 ",paraId:12,tocIndex:3},{value:"flare.analytics.cluster",paraId:12,tocIndex:3},{value:"），没有明确的父子关系字段",paraId:12,tocIndex:3},{value:"没有 ",paraId:12,tocIndex:3},{value:"path",paraId:12,tocIndex:3},{value:" 配置时，D3 无法识别层级结构，将所有记录都视为根节点",paraId:12,tocIndex:3},{value:'当存在多个根节点时，D3 抛出 "multiple roots" 错误',paraId:12,tocIndex:3},{value:"path",paraId:13,tocIndex:3},{value:" 配置的作用是告诉 D3 如何从路径字符串中解析出层级结构，自动推断父子关系。",paraId:13,tocIndex:3},{value:"属性",paraId:14,tocIndex:4},{value:"描述",paraId:14,tocIndex:4},{value:"类型",paraId:14,tocIndex:4},{value:"默认值",paraId:14,tocIndex:4},{value:"必选",paraId:14,tocIndex:4},{value:"layout",paraId:14,tocIndex:4},{value:"布局配置",paraId:14,tocIndex:4},{value:"TreemapLayout",paraId:14,tocIndex:4},{value:"-",paraId:14,tocIndex:4},{value:"encode",paraId:14,tocIndex:4},{value:"配置 ",paraId:14,tocIndex:4},{value:"treemap",paraId:14,tocIndex:4},{value:" 标记的视觉通道，包括",paraId:14,tocIndex:4},{value:"x",paraId:14,tocIndex:4},{value:"、",paraId:14,tocIndex:4},{value:"y",paraId:14,tocIndex:4},{value:"、",paraId:14,tocIndex:4},{value:"color",paraId:14,tocIndex:4},{value:"、",paraId:14,tocIndex:4},{value:"value",paraId:14,tocIndex:4},{value:"等，用于指定视觉元素属性和数据之间的关系",paraId:14,tocIndex:4},{value:"encode",paraId:15,tocIndex:4},{value:"-",paraId:14,tocIndex:4},{value:"style",paraId:14,tocIndex:4},{value:"配置图形样式和标签样式",paraId:14,tocIndex:4},{value:"-",paraId:14,tocIndex:4},{value:"-",paraId:14,tocIndex:4},{value:"labels",paraId:14,tocIndex:4},{value:"自定义数据标签的配置",paraId:14,tocIndex:4},{value:"label[]",paraId:14,tocIndex:4},{value:"[]",paraId:14,tocIndex:4},{value:"interaction",paraId:14,tocIndex:4},{value:"配置 treemap 的交互",paraId:14,tocIndex:4},{value:"Object",paraId:14,tocIndex:4},{value:"-",paraId:14,tocIndex:4},{value:"属性",paraId:16,tocIndex:5},{value:"描述",paraId:16,tocIndex:5},{value:"类型",paraId:16,tocIndex:5},{value:"默认值",paraId:16,tocIndex:5},{value:"必选",paraId:16,tocIndex:5},{value:"tile",paraId:16,tocIndex:5},{value:"布局方式",paraId:16,tocIndex:5},{value:"'treemapBinary' | 'treemapDice' | 'treemapSlice' | 'treemapSliceDice' | 'treemapSquarify' | 'treemapResquarify'",paraId:16,tocIndex:5},{value:"'treemapSquarify'",paraId:16,tocIndex:5},{value:"padding",paraId:16,tocIndex:5},{value:"外间距，另外还有 ",paraId:16,tocIndex:5},{value:"paddingInner | paddingOuter | paddingTop | paddingBottom | paddingRight | paddingLeft",paraId:16,tocIndex:5},{value:"number",paraId:16,tocIndex:5},{value:"0",paraId:16,tocIndex:5},{value:"sort",paraId:16,tocIndex:5},{value:"排序规则",paraId:16,tocIndex:5},{value:"(a: any, b: any): number",paraId:16,tocIndex:5},{value:"(a, b) => b.value - a.value",paraId:16,tocIndex:5},{value:"layer",paraId:16,tocIndex:5},{value:"渲染层级",paraId:16,tocIndex:5},{value:"number | (d) => number",paraId:16,tocIndex:5},{value:"0",paraId:16,tocIndex:5},{value:"path",paraId:16,tocIndex:5},{value:"路径转换函数，用于从扁平化数据中解析层级结构。对于使用路径字符串的扁平化数据，此配置是必需的",paraId:16,tocIndex:5},{value:"(d) => string",paraId:16,tocIndex:5},{value:"undefined",paraId:16,tocIndex:5},{value:"配置 ",paraId:17,tocIndex:6},{value:"treemap",paraId:17,tocIndex:6},{value:" 标记的视觉通道。",paraId:17,tocIndex:6},{value:"属性",paraId:18,tocIndex:6},{value:"描述",paraId:18,tocIndex:6},{value:"类型",paraId:18,tocIndex:6},{value:"默认值",paraId:18,tocIndex:6},{value:"必选",paraId:18,tocIndex:6},{value:"color",paraId:18,tocIndex:6},{value:"绑定 ",paraId:18,tocIndex:6},{value:"treemap",paraId:18,tocIndex:6},{value:" 标记的 ",paraId:18,tocIndex:6},{value:"color",paraId:18,tocIndex:6},{value:" 属性通道，如果将数据字段映射到颜色通道，会对数据进行分组，将数据拆分成多个不同颜色的图形",paraId:18,tocIndex:6},{value:"encode",paraId:19,tocIndex:6},{value:"-",paraId:18,tocIndex:6},{value:"value",paraId:18,tocIndex:6},{value:"绑定 ",paraId:18,tocIndex:6},{value:"treemap",paraId:18,tocIndex:6},{value:" 标记的数值通道",paraId:18,tocIndex:6},{value:"encode",paraId:20,tocIndex:6},{value:"-",paraId:18,tocIndex:6},{value:"复合图形标记需要通过不同的前缀来区分图形的配置。",paraId:21,tocIndex:7},{value:"<label>",paraId:22,tocIndex:7},{value:": 数据标签的前缀，例如：",paraId:22,tocIndex:7},{value:"labelText",paraId:22,tocIndex:7},{value:" 设置标签的 text 文本。",paraId:22,tocIndex:7},{value:"属性",paraId:23,tocIndex:7},{value:"描述",paraId:23,tocIndex:7},{value:"类型",paraId:23,tocIndex:7},{value:"默认值",paraId:23,tocIndex:7},{value:"必选",paraId:23,tocIndex:7},{value:"labelFontSize",paraId:23,tocIndex:7},{value:"标签文字大小",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:"10",paraId:23,tocIndex:7},{value:"labelText",paraId:23,tocIndex:7},{value:"标签文字内容",paraId:23,tocIndex:7},{value:"(d) => last(d.path)",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelFontFamily",paraId:23,tocIndex:7},{value:"标签文字字体",paraId:23,tocIndex:7},{value:"string",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelFontWeight",paraId:23,tocIndex:7},{value:"标签文字粗细",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelLineHeight",paraId:23,tocIndex:7},{value:"标签文字的行高",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelTextAlign",paraId:23,tocIndex:7},{value:"设置标签文本内容的当前对齐方式",paraId:23,tocIndex:7},{value:"center",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"end",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"left",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"right",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"start",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelTextBaseline",paraId:23,tocIndex:7},{value:"设置在绘制标签文本时使用的当前文本基线",paraId:23,tocIndex:7},{value:"top",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"middle",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"bottom",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"alphabetic",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"hanging",paraId:23,tocIndex:7},{value:"labelFill",paraId:23,tocIndex:7},{value:"标签文字的填充色",paraId:23,tocIndex:7},{value:"string",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelFillOpacity",paraId:23,tocIndex:7},{value:"标签文字的填充透明度",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelStroke",paraId:23,tocIndex:7},{value:"标签文字的描边",paraId:23,tocIndex:7},{value:"string",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelLineWidth",paraId:23,tocIndex:7},{value:"标签文字描边宽度",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelLineDash",paraId:23,tocIndex:7},{value:"标签文字描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。labelLineDash 设为[0,0]的效果为没有描边。",paraId:23,tocIndex:7},{value:"[number,number] ",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelStrokeOpacity",paraId:23,tocIndex:7},{value:"标签文字描边透明度",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelOpacity",paraId:23,tocIndex:7},{value:"标签文字的整体透明度",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelShadowColor",paraId:23,tocIndex:7},{value:"标签文字阴影颜色",paraId:23,tocIndex:7},{value:"string",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelShadowBlur",paraId:23,tocIndex:7},{value:"标签文字阴影的高斯模糊系数",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelShadowOffsetX",paraId:23,tocIndex:7},{value:"标签文字阴影水平偏移量",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelShadowOffsetY",paraId:23,tocIndex:7},{value:"标签文字阴影垂直偏移量",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelCursor",paraId:23,tocIndex:7},{value:"标签文字鼠标样式",paraId:23,tocIndex:7},{value:"string",paraId:23,tocIndex:7},{value:"default",paraId:23,tocIndex:7},{value:"labelDx",paraId:23,tocIndex:7},{value:"标签文字在水平方向的偏移量",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelDy",paraId:23,tocIndex:7},{value:"标签文字在垂直方向的偏移量",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"更多样式可以查看",paraId:24,tocIndex:7},{value:"文档 - 核心概念 - 样式",paraId:25,tocIndex:7},{value:"页面。",paraId:24,tocIndex:7},{value:"treemap 常用的交互是 ",paraId:26,tocIndex:8},{value:"treemapDrillDown",paraId:26,tocIndex:8},{value:" 和 ",paraId:26,tocIndex:8},{value:"poptip",paraId:26,tocIndex:8},{value:"treemapDrillDown 用于实现矩形树图的下钻交互，通过点击矩形树图的某个节点，可以将该节点及其子节点展示在画布上。配置如下：",paraId:27,tocIndex:8},{value:"属性",paraId:28,tocIndex:8},{value:"描述",paraId:28,tocIndex:8},{value:"类型",paraId:28,tocIndex:8},{value:"默认值",paraId:28,tocIndex:8},{value:"必选",paraId:28,tocIndex:8},{value:"breadCrumbFill",paraId:28,tocIndex:8},{value:"面包屑的填充色",paraId:28,tocIndex:8},{value:"string",paraId:28,tocIndex:8},{value:"rgba(0, 0, 0, 0.85)",paraId:28,tocIndex:8},{value:"breadCrumbFontSize",paraId:28,tocIndex:8},{value:"面包屑字体大小",paraId:28,tocIndex:8},{value:"number",paraId:28,tocIndex:8},{value:"12",paraId:28,tocIndex:8},{value:"breadCrumbY",paraId:28,tocIndex:8},{value:"面包屑在 Y 轴的位置",paraId:28,tocIndex:8},{value:"number",paraId:28,tocIndex:8},{value:"12",paraId:28,tocIndex:8},{value:"activeFill",paraId:28,tocIndex:8},{value:"当前激活的面包屑的填充色",paraId:28,tocIndex:8},{value:"number",paraId:28,tocIndex:8},{value:"rgba(0, 0, 0, 0.5)",paraId:28,tocIndex:8},{value:"chart.options({\n  // 其他图表配置...\n  interaction: {\n    treemapDrillDown: {\n      breadCrumbY: 12,\n      activeFill: '#873bf4',\n    },\n  },\n});\n",paraId:29,tocIndex:8},{value:"poptip",paraId:30,tocIndex:8},{value:"用于交互时显示简洁的提示信息",paraId:31,tocIndex:8},{value:"chart.options({\n  // 其他图表配置...\n  interaction: {\n    poptip: {\n      // poptip 配置项\n      offsetX: 10,\n      offsetY: 10,\n      // tip 样式配置\n      tipBackgroundColor: 'rgba(0, 0, 0, 0.75)',\n      tipColor: '#fff',\n    },\n  },\n});\n",paraId:32,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'treemap',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/flare-treemap.json',\n  },\n  layout: {\n    path: (d) => d.name.replace(/\\./g, '/'),\n    tile: 'treemapBinary',\n    paddingInner: 1,\n  },\n  encode: { value: 'size' },\n  style: {\n    labelText: (d) =>\n      d.data.name\n        .split('.')\n        .pop()\n        .split(/(?=[A-Z][a-z])/g)[0],\n    labelFill: '#000',\n    labelPosition: 'top-left',\n    fillOpacity: 0.5,\n  },\n});\n\nchart.render();\n",paraId:33,tocIndex:9}]},22062:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(11181);const t=[{value:"相比单调的填充色，使用纹理填充能丰富表现力，在无障碍和黑白打印场景下也有不错的应用。为此我们提供了以下三种方式，按使用成本从简到难依次为：",paraId:0},{value:"使用内置纹理",paraId:1},{value:"使用 G API 自定义纹理",paraId:1},{value:"使用其它纹理来源",paraId:1},{value:"我们在 ",paraId:2,tocIndex:0},{value:"g-pattern",paraId:2,tocIndex:0},{value:" 中内置了常见的三种纹理，通过参数可以便捷地调整外观，这也是最简单的一种纹理使用方式：",paraId:2,tocIndex:0},{value:"dots",paraId:3,tocIndex:0},{value:" 由圆点构成",paraId:3,tocIndex:0},{value:"lines",paraId:3,tocIndex:0},{value:" 由直线构成",paraId:3,tocIndex:0},{value:"squares",paraId:3,tocIndex:0},{value:" 由正方形构成",paraId:3,tocIndex:0},{value:"使用方式如下，首先安装依赖：",paraId:4,tocIndex:0},{value:"$ npm install @antv/g-pattern  --save;\n",paraId:5,tocIndex:0},{value:"然后就可以使用其中的内置纹理了。在该",paraId:6,tocIndex:0},{value:"示例",paraId:7,tocIndex:0},{value:"中：",paraId:6,tocIndex:0},{value:"我们使用了 ",paraId:8,tocIndex:0},{value:"lines",paraId:8,tocIndex:0},{value:"，设置了背景颜色、透明度、直线颜色以及间距等属性",paraId:8,tocIndex:0},{value:"通过 ",paraId:8,tocIndex:0},{value:"repetition",paraId:8,tocIndex:0},{value:" 指定了平铺方式为水平和垂直方向",paraId:8,tocIndex:0},{value:"通过 ",paraId:8,tocIndex:0},{value:"transform",paraId:8,tocIndex:0},{value:" 让纹理顺时针旋转 30 度",paraId:8,tocIndex:0},{value:"import { lines } from '@antv/g-pattern';\n\nchart\n  //... 省略其它命令式调用\n  .style('fill', (_, idx) => {\n    return {\n      image: lines({\n        backgroundColor: colors[idx],\n        backgroundOpacity: 0.65,\n        stroke: colors[idx],\n        lineWidth: 4,\n        spacing: 5,\n      }),\n      repetition: 'repeat',\n      transform: 'rotate(30)',\n    };\n  });\n",paraId:9,tocIndex:0},{value:"效果如下：",paraId:10,tocIndex:0},{value:"更多参数含义及其效果详见 ",paraId:11,tocIndex:0},{value:"完整 g-pattern API",paraId:11,tocIndex:0},{value:"。",paraId:11,tocIndex:0},{value:"当上述内置纹理不满足需求时，可以使用 ",paraId:12,tocIndex:1},{value:"G API",paraId:12,tocIndex:1},{value:" 自定义，就像描述场景一样。",paraId:12,tocIndex:1},{value:"在该",paraId:13,tocIndex:1},{value:"示例",paraId:14,tocIndex:1},{value:"中，我们首先从上下文中获取 ",paraId:13,tocIndex:1},{value:"document",paraId:13,tocIndex:1},{value:" 对象，通过 ",paraId:13,tocIndex:1},{value:"document.createElement",paraId:13,tocIndex:1},{value:" 创建了一个 ",paraId:13,tocIndex:1},{value:"Rect",paraId:13,tocIndex:1},{value:" 和 ",paraId:13,tocIndex:1},{value:"Path",paraId:13,tocIndex:1},{value:"，把它们作为纹理来源：",paraId:13,tocIndex:1},{value:"mark.style('fill', ({ value }) => {\n  const { document } = chart.getContext().canvas;\n  const background = document.createElement('rect', {\n    style: {\n      width,\n      height,\n      fill: color,\n    },\n  });\n\n  const line = document.createElement('path', {\n    style: {\n      d: `\n                M 0 ${-height} L ${width * 2} ${height}\n                M ${-width} ${-height} L ${width} ${height}\n                M ${-width} 0 L ${width} ${height * 2}`,\n      stroke,\n      lineWidth: 1,\n      strokeOpacity: 0.9,\n    },\n  });\n  background.appendChild(line);\n\n  return {\n    image: background,\n    repetition: 'repeat',\n  };\n});\n",paraId:15,tocIndex:1},{value:"效果如下：",paraId:16,tocIndex:1},{value:"更多用法可参考 ",paraId:17,tocIndex:1},{value:"G API",paraId:17,tocIndex:1},{value:"。",paraId:17,tocIndex:1},{value:"可以参考 ",paraId:18,tocIndex:2},{value:"G API",paraId:18,tocIndex:2},{value:"，其它可用的纹理来源包括：",paraId:18,tocIndex:2},{value:"图片 URL，例如 ",paraId:19,tocIndex:2},{value:"'http://example.png'",paraId:19,tocIndex:2},{value:"HTMLImageElement",paraId:19,tocIndex:2},{value:"HTMLCanvasElement",paraId:19,tocIndex:2},{value:"HTMLVideoElement",paraId:19,tocIndex:2},{value:"其中图片 URL、HTMLImageElement、HTMLVideoElement 都是静态资源，而 HTMLCanvasElement 可用于程序化生成纹理，效果如下：",paraId:20,tocIndex:2},{value:"在该",paraId:21,tocIndex:2},{value:"示例",paraId:22,tocIndex:2},{value:"中，我们使用了 ",paraId:21,tocIndex:2},{value:"HTMLCanvasElement",paraId:21,tocIndex:2},{value:" 配合 ",paraId:21,tocIndex:2},{value:"Canvas API",paraId:21,tocIndex:2},{value:" 自定义：",paraId:21,tocIndex:2},{value:"// 程序化生成\nconst canvas = createCanvas(width, height);\nconst ctx = canvas.getContext('2d');\ndrawRect(ctx, width, height, color);\ndrawLinePattern(ctx, stroke, width, height, cross);\n\n// 使用\nchart.style('fill', ({ value }) => {\n  return { image: canvas, repetition: 'repeat' };\n});\n",paraId:23,tocIndex:2},{value:"不难看出，此种程序化生成方式需要使用者对于 ",paraId:24,tocIndex:2},{value:"Canvas API",paraId:24,tocIndex:2},{value:" 有很深的理解，当然它也拥有最高的自由度。",paraId:24,tocIndex:2}]},20610:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(88852);const t=[{value:"由于画布通常呈现为一个“黑盒”，其中的内容无法被文本化进而被 Screen Reader 朗读。针对不同类型的障碍人士，可以提供例如文本提取、键盘导航等功能。",paraId:0},{value:"在图表领域做的最好的是 ",paraId:1},{value:"highcharts",paraId:1},{value:"，其中有大量实践值得借鉴。",paraId:1},{value:"在 G2 中可以借助插件实现 ",paraId:2},{value:"文本搜索",paraId:2},{value:" 的功能。",paraId:2},{value:"首先安装 ",paraId:3,tocIndex:0},{value:"@antv/g-plugin-a11y",paraId:3,tocIndex:0},{value:"：",paraId:3,tocIndex:0},{value:"npm install @antv/g-plugin-rough-canvas-renderer --save\n",paraId:4,tocIndex:0},{value:"然后在插件列表中引入：",paraId:5,tocIndex:0},{value:"import { Plugin } from '@antv/g-plugin-a11y';\n\nconst plugin = new Plugin({ enableExtractingText: true });\n\nconst chart = new Chart({\n  container: 'container',\n  plugins: [plugin],\n});\n",paraId:6,tocIndex:0},{value:"在一些渲染器（例如 ",paraId:7,tocIndex:0},{value:"g-canvas",paraId:7,tocIndex:0},{value:" / ",paraId:7,tocIndex:0},{value:"g-webgl",paraId:7,tocIndex:0},{value:" / ",paraId:7,tocIndex:0},{value:"g-canvaskit",paraId:7,tocIndex:0},{value:"中，当文本被绘制后便无法使用浏览器自带的搜索功能（",paraId:7,tocIndex:0},{value:"Command + F",paraId:7,tocIndex:0},{value:"）定位匹配，同样对于 SEO 也不友好。",paraId:7,tocIndex:0},{value:"在该示例中，我们开启 ",paraId:8,tocIndex:0},{value:"enableExtractingText",paraId:8,tocIndex:0},{value:" 后便可以使用文本搜索的功能：",paraId:8,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst plugin = new gPluginA11y.Plugin({ enableExtractingText: true });\n\nconst labelFormatter = (d) => Math.abs(d) + (d < 0 ? 'BC' : d > 0 ? 'AC' : '');\nconst left = (d) => d.end > -1500 && d.start > -3000;\n\nconst chart = new Chart({\n  container: 'container',\n  width: 900,\n  height: 1000,\n  plugins: [plugin],\n});\n\nchart.options({\n  type: 'interval',\n  width: 900,\n  height: 1000,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/world-history.json',\n  },\n  encode: { x: 'civilization', y: ['start', 'end'], color: 'region' },\n  transform: [\n    { type: 'sortX', by: 'y' },\n    { type: 'sortColor', by: 'y', reducer: 'min' },\n  ],\n  scale: { color: { palette: 'set2' } },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  axis: { x: false },\n  labels: [\n    {\n      text: 'civilization',\n      position: (d) => (left(d) ? 'left' : 'right'),\n      textAlign: (d) => (left(d) ? 'end' : 'start'),\n      dx: (d) => (left(d) ? -5 : 5),\n      fontSize: 10,\n    },\n  ],\n  tooltip: {\n    items: [\n      {\n        name: 'start',\n        field: 'start',\n        valueFormatter: labelFormatter,\n      },\n      {\n        name: 'end',\n        field: 'end',\n        valueFormatter: labelFormatter,\n      },\n    ],\n  },\n});\nchart.render();\n",paraId:9,tocIndex:0},{value:"在实现中我们在画布容器内添加了 DOM 元素，用于与画布中的可见文本实时同步：",paraId:10,tocIndex:0},{value:'<div\n  id="g-a11y-text-extractor-mask"\n  style="position: absolute; inset: 0px; z-index: 99; pointer-events: none; user-select: none; overflow: hidden;"\n>\n  <div\n    id="g-a11y-text-extractor-text-507"\n    style="line-height: 1; position: absolute; white-space: pre; word-break: keep-all; color: transparent !important; font-family: sans-serif; font-size: 12px; transform-origin: 0px 0px; transform: translate(0px, 0px) translate(0px, -50%) matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 215.856, 24, 0, 1);"\n  >\n    East Asia\n  </div>\n</div>\n',paraId:11,tocIndex:0},{value:"有以下注意事项：",paraId:12,tocIndex:0},{value:"使用 g-svg 渲染时，由于 SVG 天然支持 ",paraId:13,tocIndex:0},{value:"<foreignObject>",paraId:13,tocIndex:0},{value:"，不会添加上述 DOM 内容",paraId:13,tocIndex:0},{value:"由于浏览器有最小字号的限制（Chrome 中为 ",paraId:13,tocIndex:0},{value:"12px",paraId:13,tocIndex:0},{value:"），因此太小的文本会有不一致的渲染效果",paraId:13,tocIndex:0}]},48843:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(12658);const t=[{value:"Lottie",paraId:0},{value:" 能极大丰富动画的描述能力。在可视化叙事中也有不错的使用场景。",paraId:0},{value:"在 G2 中通过 ",paraId:1},{value:"@antv/g-lottie-player",paraId:1},{value:" 可以将 Lottie 加入画布。同时提供简单的动画控制方法例如播放、暂停以及跳转到指定时刻或帧，加入到画布后就可以像基础图形一样任意操作它们。",paraId:1},{value:"首先安装 ",paraId:2,tocIndex:0},{value:"@antv/g-lottie-player",paraId:2,tocIndex:0},{value:" 播放器：",paraId:2,tocIndex:0},{value:"npm install @antv/g-lottie-player --save\n",paraId:3,tocIndex:0},{value:"等待画布初始化、Lottie 文件加载完成后，即可创建 Lottie 动画对象，随后渲染到画布得到一个 ",paraId:4,tocIndex:0},{value:"Group",paraId:4,tocIndex:0},{value:"，可任意对它进行变换，例如缩放或者移动到指定地点：",paraId:4,tocIndex:0},{value:"import { loadAnimation } from '@antv/g-lottie-player';\n\n(async () => {\n  // 从上下文中获取画布\n  const { canvas } = chart.getContext();\n  await canvas.ready;\n\n  // 加载 Lottie 文件\n  const lottieJSON = await fetch(\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*C9f6TaadHikAAAAAAAAAAAAADmJ7AQ',\n  ).then((res) => res.json());\n\n  // 创建动画\n  const animation = loadAnimation(lottieJSON, { loop: true, autoplay: true });\n  // 渲染到画布，得到 Group 容器\n  const wrapper = animation.render(canvas);\n  // 任意操作容器，例如移动到指定位置\n  wrapper.scale(0.5);\n  wrapper.translate(160, 100);\n})();\n",paraId:5,tocIndex:0},{value:"效果如下：",paraId:6,tocIndex:0},{value:"更多动画控制选项可以参考：",paraId:7,tocIndex:0},{value:"Lottie Animation 文档",paraId:7,tocIndex:0},{value:"。",paraId:7,tocIndex:0}]},1365:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(21744);const t=[{value:"G2 底层基于 AntV ",paraId:0},{value:"G",paraId:0},{value:" 来进行渲染，所以在渲染器能力上继承 G 的能力，目前支持了 Canvas、SVG、WebGL 三大 Web 标准，其中 Canvas 渲染器作为 G2 内置默认的渲染器。更多渲染器可以看 ",paraId:0},{value:"G 文档",paraId:0},{value:"。",paraId:0},{value:"import { Chart } from '@antv/g2';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\n\nconst chart = new Chart({\n  container: 'container',\n  // 或者选择 WebGLRenderer 渲染器，不设置默认为 CanvasRenderer.\n  renderer: new SVGRenderer(),\n});\n",paraId:1,tocIndex:0},{value:"当然使用之前，是先使用 npm 或者 yarn 等包管理工具安装他们，当前为了 G2 整体包大小，所以仅仅内置 Canvas 渲染器。具体案例可以参考 ",paraId:2,tocIndex:0},{value:"渲染器",paraId:2,tocIndex:0},{value:"。",paraId:2,tocIndex:0},{value:"G 渲染器的使用都是使用：",paraId:3,tocIndex:1},{value:"new Renderer({ /_ options _/ });",paraId:4,tocIndex:1},{value:"分三个渲染器分别介绍创建他们的配置项。",paraId:5,tocIndex:1},{value:"属性",paraId:6,tocIndex:2},{value:"描述",paraId:6,tocIndex:2},{value:"类型",paraId:6,tocIndex:2},{value:"默认值",paraId:6,tocIndex:2},{value:"enableDirtyRectangleRendering",paraId:6,tocIndex:2},{value:"是否开启“脏矩形”渲染",paraId:6,tocIndex:2},{value:"boolean",paraId:6,tocIndex:2},{value:"true",paraId:6,tocIndex:2},{value:"enableDirtyRectangleRenderingDebug",paraId:6,tocIndex:2},{value:"是否开启“脏矩形”渲染调试模式",paraId:6,tocIndex:2},{value:"boolean",paraId:6,tocIndex:2},{value:"false",paraId:6,tocIndex:2},{value:"属性",paraId:7,tocIndex:3},{value:"描述",paraId:7,tocIndex:3},{value:"类型",paraId:7,tocIndex:3},{value:"默认值",paraId:7,tocIndex:3},{value:"outputSVGElementId",paraId:7,tocIndex:3},{value:"生成 SVGElement 时是否添加 id 属性",paraId:7,tocIndex:3},{value:"boolean",paraId:7,tocIndex:3},{value:"true",paraId:7,tocIndex:3},{value:"属性",paraId:8,tocIndex:4},{value:"描述",paraId:8,tocIndex:4},{value:"类型",paraId:8,tocIndex:4},{value:"默认值",paraId:8,tocIndex:4},{value:"targets",paraId:8,tocIndex:4},{value:"选择渲染环境，并按顺序自动降级",paraId:8,tocIndex:4},{value:"string[]",paraId:8,tocIndex:4},{value:"['webgl2', 'webgl1']",paraId:8,tocIndex:4},{value:"当需要替换掉内置的 Canvas 渲染器，例如改换成 SVG 时，需要引入特定版本的 G2 UMD 文件。",paraId:9,tocIndex:5},{value:"在线示例",paraId:10,tocIndex:5},{value:"首先引入 ",paraId:11,tocIndex:5},{value:"@antv/g",paraId:11,tocIndex:5},{value:" 和 ",paraId:11,tocIndex:5},{value:"@antv/g-svg",paraId:11,tocIndex:5},{value:" 的 UMD 版本：",paraId:11,tocIndex:5},{value:'<script src="https://unpkg.com/@antv/g"><\/script>\n<script src="https://unpkg.com/@antv/g-svg"><\/script>\n',paraId:12,tocIndex:5},{value:"然后引入剔除了 ",paraId:13,tocIndex:5},{value:"@antv/g",paraId:13,tocIndex:5},{value:" 和 ",paraId:13,tocIndex:5},{value:"@antv/g-svg",paraId:13,tocIndex:5},{value:" 的 G2 UMD 版本，我们称之为 lite 版：",paraId:13,tocIndex:5},{value:'<script src="https://unpkg.com/@antv/g2@5.0.5/dist/g2-lite.min.js"><\/script>\n',paraId:14,tocIndex:5},{value:"在命名空间 ",paraId:15,tocIndex:5},{value:"window.G.SVG",paraId:15,tocIndex:5},{value:" 下找到 ",paraId:15,tocIndex:5},{value:"Renderer",paraId:15,tocIndex:5},{value:" 并实例化：",paraId:15,tocIndex:5},{value:"const { Chart } = window.G2;\n\nconst chart = new Chart({\n  container: 'container',\n  renderer: new window.G.SVG.Renderer(), // 传入 SVG Renderer\n});\n",paraId:16,tocIndex:5},{value:"提供 lite 版主要考虑到：",paraId:17,tocIndex:5},{value:"剔除了 ",paraId:18,tocIndex:5},{value:"@antv/g",paraId:18,tocIndex:5},{value:" 和内置的 ",paraId:18,tocIndex:5},{value:"@antv/g-canvas",paraId:18,tocIndex:5},{value:" 渲染器之后，便于按需替换其他渲染器，不会存在冗余的内置渲染器",paraId:18,tocIndex:5},{value:"和其他使用 ",paraId:18,tocIndex:5},{value:"@antv/g",paraId:18,tocIndex:5},{value:" 的包使用时，可以共享同一份核心和渲染器代码，节省总体的包体积大小，例如：",paraId:18,tocIndex:5},{value:'<script src="https://unpkg.com/@antv/g"><\/script>\n<script src="https://unpkg.com/@antv/g-svg"><\/script>\n<script src="https://unpkg.com/@antv/g2@5.0.5/dist/g2-lite.min.js"><\/script>\n<script src="https://unpkg.com/@antv/g6-lite"><\/script>\n',paraId:19,tocIndex:5}]},7329:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(67114);const t=[{value:"相比方方正正的常规图形，手绘风格能带给人可爱轻松之感。",paraId:0},{value:"有不少基于 ",paraId:1},{value:"rough.js",paraId:1},{value:" 的图表库就是这么做的，例如 ",paraId:1},{value:"roughViz.js",paraId:1},{value:"、",paraId:1},{value:"rough-charts",paraId:1},{value:" 等。",paraId:1},{value:"借助开箱即用的渲染插件，在 G2 中我们也能轻松完成手绘风格的切换。",paraId:2},{value:"首先安装 ",paraId:3,tocIndex:0},{value:"@antv/g-plugin-rough-canvas-renderer",paraId:3,tocIndex:0},{value:"：",paraId:3,tocIndex:0},{value:"npm install @antv/g-plugin-rough-canvas-renderer --save\n",paraId:4,tocIndex:0},{value:"然后在插件列表中引入：",paraId:5,tocIndex:0},{value:"import { Plugin } from '@antv/g-plugin-rough-canvas-renderer';\n\nconst chart = new Chart({\n  container: 'container',\n  plugins: [new Plugin()],\n});\n",paraId:6,tocIndex:0},{value:"仅需要一行改动即可完成风格转换。在该",paraId:7,tocIndex:0},{value:"示例",paraId:8,tocIndex:0},{value:"中，我们通过 ",paraId:7,tocIndex:0},{value:"fillStyle",paraId:7,tocIndex:0},{value:" 指定了 ",paraId:7,tocIndex:0},{value:"'zigzag'",paraId:7,tocIndex:0},{value:" 这种类似连续涂鸦笔迹的填充风格：",paraId:7,tocIndex:0},{value:"chart\n  .interval()\n  .data([\n    { month: 'Jan.', profit: 387264, start: 0, end: 387264 },\n    //...\n  ])\n  .encode('x', 'month')\n  .encode('y', ['end', 'start'])\n  .encode('color', (d) =>\n    d.month === 'Total' ? 'Total' : d.profit > 0 ? 'Increase' : 'Decrease',\n  )\n  .style('strokeWidth', 2)\n  .style('fillStyle', 'zigzag'); // 指定填充风格\n\nchart.render();\n",paraId:9,tocIndex:0},{value:"效果如下，可以看到原本的填充色活泼了起来！\n",paraId:10,tocIndex:0},{value:"当然 ",paraId:11,tocIndex:0},{value:"fillStyle",paraId:11,tocIndex:0},{value:" 还有很多填充方式，下图展示了目前支持的所有效果。更多选项详见 ",paraId:11,tocIndex:0},{value:"@antv/g-plugin-rough-canvas-renderer 文档",paraId:11,tocIndex:0},{value:"：",paraId:11,tocIndex:0},{value:"最后，选择一款手绘风格的字体能让整体风格趋于统一。在上面的",paraId:12,tocIndex:0},{value:"示例",paraId:13,tocIndex:0},{value:"中我们选择了 ",paraId:12,tocIndex:0},{value:"'Gaegu'",paraId:12,tocIndex:0},{value:"，可以参考",paraId:12,tocIndex:0},{value:"如何加载外部字体",paraId:12,tocIndex:0},{value:"。",paraId:12,tocIndex:0},{value:"G2 使用 ",paraId:14,tocIndex:2},{value:"g-canvas",paraId:14,tocIndex:2},{value:" 作为默认渲染器。如果切换到 ",paraId:14,tocIndex:2},{value:"g-svg",paraId:14,tocIndex:2},{value:"，也有对应的手绘风格插件可以选择：",paraId:14,tocIndex:2},{value:"@antv/plugin-rough-svg-renderer",paraId:14,tocIndex:2},{value:"，使用方式完全一致。",paraId:14,tocIndex:2},{value:"使用 ",paraId:15,tocIndex:3},{value:"fillStyle",paraId:15,tocIndex:3},{value:" 代替 ",paraId:15,tocIndex:3},{value:"fill",paraId:15,tocIndex:3},{value:" 能实现类似 Pattern 的效果，因此在无障碍模式下也有不错的应用场景，例如考虑色弱人士和黑白打印。",paraId:15,tocIndex:3},{value:"在下面的",paraId:16,tocIndex:3},{value:"示例",paraId:17,tocIndex:3},{value:"中，我们将 ",paraId:16,tocIndex:3},{value:"fill/stroke",paraId:16,tocIndex:3},{value:" 都设置和黑色，将 ",paraId:16,tocIndex:3},{value:"fillStyle",paraId:16,tocIndex:3},{value:" 作为颜色属性：",paraId:16,tocIndex:3},{value:"chart\n  .interval()\n  //... 省略 data, transform 等\n  .scale('color', {\n    range: [\n      'hachure',\n      'solid',\n      'zigzag',\n      'cross-hatch',\n      'dots',\n      'dashed',\n      'zigzag-line',\n    ],\n  })\n  .style('fill', 'black')\n  .style('stroke', 'black')\n  .style('strokeWidth', '4')\n  .style('colorAttribute', 'fillStyle');\n",paraId:18,tocIndex:3},{value:"效果如下：",paraId:19,tocIndex:3}]},7229:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(57233);const t=[{value:"服务端渲染 SSR（Server Side Render）是相比于客户端渲染 CSR（Client Side Render），就是指在非浏览器环境渲染出图表，比如在 Node.js、Python、Java、PHP 等后端语言环境中，一般在后端语言中，最终出来的是一张没有交互和动画的图片。一般使用的场景如下：",paraId:0},{value:"后端预渲成图片，提高页面打开的速度",paraId:1},{value:"脚本批处理，便于传播",paraId:1},{value:"服务端可视化服务",paraId:1},{value:"生成图片进行截图对比，用于代码单测",paraId:1},{value:"...",paraId:1},{value:"前端数据可视化的开源库，都是基于浏览器 DOM Canvas API 去在做封装和绘图，适用于浏览器环境，如果需要在 Node.js 中绘制出图形，那就需要将开源库中的 DOM Canvas 改成 Node Canvas，在 NodeJS 生态中，有 ",paraId:2,tocIndex:0},{value:"node-canvas",paraId:2,tocIndex:0},{value:" 提供了基于 Cairo 的 Canvas2D API 实现，和浏览器的 Canvas API 保持一致。",paraId:2,tocIndex:0},{value:"所以基于 ",paraId:3,tocIndex:0},{value:"node-canvas",paraId:3,tocIndex:0},{value:"，再结合 AntV 的 G2 在 API 设计上支持传入自定义 Canvas 对象，就可以切换成 NodeJS 的绘图引擎，从而实现服务端渲染出图。",paraId:3,tocIndex:0},{value:"在线示例",paraId:4,tocIndex:1},{value:"，基于 jsdom 的方案只能生成 SVG，如果想生成类似 PNG 格式的图片，可以使用 ",paraId:4,tocIndex:1},{value:"node-canvas",paraId:4,tocIndex:1},{value:" 渲染。",paraId:4,tocIndex:1},{value:"首先创建两个 node-canvas，分别用于渲染场景和度量文本宽度：",paraId:5,tocIndex:1},{value:"const { createCanvas } = require('canvas');\nconst nodeCanvas = createCanvas(width, height);\nconst offscreenNodeCanvas = createCanvas(1, 1);\n",paraId:6,tocIndex:1},{value:"然后创建一个 Canvas 渲染器和画布：",paraId:7,tocIndex:1},{value:"import { Canvas } from '@antv/g';\nimport { Renderer } from '@antv/g-canvas';\n\nconst renderer = new Renderer();\n// 省略移除 DOM 相关插件代码\nconst gCanvas = new Canvas({\n  width,\n  height,\n  canvas: nodeCanvas,\n  renderer,\n  offscreenCanvas: offscreenNodeCanvas,\n});\n",paraId:8,tocIndex:1},{value:"接下来正常创建 G2 Chart 并渲染，完成后调用 node-canvas 提供的 ",paraId:9,tocIndex:1},{value:"createPNGStream",paraId:9,tocIndex:1},{value:" 方法创建一个包含 PNG 编码的 ",paraId:9,tocIndex:1},{value:"ReadableStream",paraId:9,tocIndex:1},{value:"。同样也提供了 ",paraId:9,tocIndex:1},{value:"createJPEGStream",paraId:9,tocIndex:1},{value:" 和 ",paraId:9,tocIndex:1},{value:"createPDFStream",paraId:9,tocIndex:1},{value:" 导出 JPEG 和 PDF。",paraId:9,tocIndex:1},{value:"function writePNG(nodeCanvas) {\n  return new Promise<string>((resolve, reject) => {\n    const f = path.join(os.tmpdir(), `${Math.random()}.png`);\n    const out = fs.createWriteStream(f);\n    const stream = nodeCanvas.createPNGStream();\n    stream.pipe(out);\n    out.on('finish', () => resolve(f)).on('error', reject);\n  });\n}\n",paraId:10,tocIndex:1},{value:"我们把上面基于 node-canvas 的 SSR 代码，封装成一个直接可用的库： ",paraId:11,tocIndex:2},{value:"@antv/g2-ssr",paraId:11,tocIndex:2},{value:"，不用去额外感知复杂的代码，使用方法很简单，如下：",paraId:11,tocIndex:2},{value:"import { createChart } from '@antv/g2-ssr';\n\n// 创建 Chart 和配置\nconst chart = await createChart({\n  width: 640,\n  height: 480,\n  imageType: 'png', // or 'jpeg'\n  // 其他的配置透传 G2 Spec，可以参考 G2 的配置文档\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    color: 'genre',\n  },\n});\n\n// 导出\nchart.exportToFile('chart');\n// -> chart.png\n\nchart.toBuffer();\n// -> get buffer\n",paraId:12,tocIndex:2},{value:"大概会在 ",paraId:13,tocIndex:2},{value:"400ms",paraId:13,tocIndex:2},{value:" 左右生成一张可视化图如下，基本和在浏览器端渲染的没有太大区别。",paraId:13,tocIndex:2},{value:"基于以上的 AntV SSR 服务端出图的能力，我们开源了面向 AI 大模型场景的 MCP：",paraId:14,tocIndex:3},{value:"mcp-server-chart",paraId:14,tocIndex:3},{value:"，针对大模型的输出，以及用户的意图，就可以生成对应的可视化图表，目前支持了 15+ 中常用的统计图表、关系图。",paraId:14,tocIndex:3},{value:"因为 G2 的代码是使用 JavaScript 编写和开发，所以无法直接在 Python、Java、PHP 等语言环境中使用，但是可以在服务中安装 Node.js 环境，然后使用对应的后端语言命令行 API 去驱动上述的 Node.js 代码去执行 SSR。",paraId:15,tocIndex:4},{value:"参考《",paraId:16,tocIndex:4},{value:"python 调用 node js",paraId:16,tocIndex:4},{value:"》，其他语言类似。",paraId:16,tocIndex:4}]},37230:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(85677);const t=[{value:"以 3D 散点图为例，创建图表需要以下步骤：",paraId:0},{value:"创建 WebGL 渲染器和插件",paraId:1},{value:"扩展 threedlib",paraId:1},{value:"设置 z 通道、比例尺和坐标轴",paraId:1},{value:"在场景中设置相机",paraId:1},{value:"添加光源",paraId:1},{value:"添加自定义图例",paraId:1},{value:"使用相机交互与动画",paraId:1},{value:"首先安装依赖：",paraId:2,tocIndex:0},{value:"$ npm install @antv/g-webgl @antv/g-plugin-3d @antv/g-plugin-control --save\n",paraId:3,tocIndex:0},{value:"然后使用 ",paraId:4,tocIndex:0},{value:"@antv/g-webgl",paraId:4,tocIndex:0},{value:" 作为渲染器并注册以下两个插件：",paraId:4,tocIndex:0},{value:"g-plugin-3d",paraId:5,tocIndex:0},{value:" 提供 3D 场景下的几何、材质和光照",paraId:5,tocIndex:0},{value:"g-plugin-control",paraId:5,tocIndex:0},{value:" 提供 3D 场景下的相机交互",paraId:5,tocIndex:0},{value:"import { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\n\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ThreeDPlugin());\nrenderer.registerPlugin(new ControlPlugin());\n",paraId:6,tocIndex:0},{value:"由于 3D 相关的功能代码体积巨大，我们将其分离到 ",paraId:7,tocIndex:1},{value:"threedlib",paraId:8,tocIndex:1},{value:" 中，在运行时扩展它并自定义 Chart 对象：",paraId:7,tocIndex:1},{value:"import { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\n\nconst Chart = extend(Runtime, { ...corelib(), ...threedlib() });\n",paraId:9,tocIndex:1},{value:"在创建 Chart 时通过 ",paraId:10,tocIndex:2},{value:"depth",paraId:10,tocIndex:2},{value:" 指定深度：",paraId:10,tocIndex:2},{value:"const chart = new Chart({\n  container: 'container',\n  renderer,\n  depth: 400,\n});\n",paraId:11,tocIndex:2},{value:"我们使用 ",paraId:12,tocIndex:2},{value:"point3D",paraId:13,tocIndex:2},{value:" Mark 并选择 cube 作为 shape 进行绘制。\n随后设置 z 通道、比例尺和坐标轴。",paraId:12,tocIndex:2},{value:"chart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('color', 'Origin')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n",paraId:14,tocIndex:2},{value:"在 3D 场景中我们可以使用正交或者透视投影，在首次渲染完成后可以从 Chart 上下文中获取相机。随后可以使用 G 提供的",paraId:15,tocIndex:3},{value:"相机 API",paraId:15,tocIndex:3},{value:" 完成投影模式、相机类型的设置。在下面的例子中，我们使用了透视投影，",paraId:15,tocIndex:3},{value:"chart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera(); // 获取相机\n\n  camera.setPerspective(0.1, 5000, 45, 500 / 500);\n  camera.setType(CameraType.ORBITING);\n});\n",paraId:16,tocIndex:3},{value:"效果如下：",paraId:17,tocIndex:3},{value:"import { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\nimport { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\n\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ControlPlugin());\nrenderer.registerPlugin(new ThreeDPlugin());\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...threedlib(),\n});\n\n// 初始化图表实例\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  width: 500,\n  height: 500,\n  depth: 400,\n});\n\nchart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('color', 'Origin')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setPerspective(0.1, 5000, 45, 500 / 500);\n  camera.setType(CameraType.ORBITING);\n\n  // Add a directional light into scene.\n  const light = new DirectionalLight({\n    style: {\n      intensity: 3,\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n});\n",paraId:18,tocIndex:3},{value:"我们还可以让相机固定视点进行一定角度的旋转，这里使用了 ",paraId:19,tocIndex:3},{value:"rotate",paraId:19,tocIndex:3},{value:"：",paraId:19,tocIndex:3},{value:"camera.rotate(-20, -20, 0);\n",paraId:20,tocIndex:3},{value:"import { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\nimport { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\n\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ControlPlugin());\nrenderer.registerPlugin(new ThreeDPlugin());\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...threedlib(),\n});\n\n// 初始化图表实例\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  width: 500,\n  height: 500,\n  depth: 400,\n});\n\nchart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('color', 'Origin')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setType(CameraType.ORBITING);\n  camera.rotate(-20, -20, 0);\n\n  // Add a directional light into scene.\n  const light = new DirectionalLight({\n    style: {\n      intensity: 3,\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n});\n",paraId:21,tocIndex:3},{value:'材质需要配合光源呈现出某种"立体感"。这里我们使用 G 提供的',paraId:22,tocIndex:4},{value:"平行光源",paraId:22,tocIndex:4},{value:"：",paraId:22,tocIndex:4},{value:"import { DirectionalLight } from '@antv/g-plugin-3d';\n\nconst light = new DirectionalLight({\n  style: {\n    intensity: 3,\n    fill: 'white',\n    direction: [-1, 0, 1],\n  },\n});\ncanvas.appendChild(light);\n",paraId:23,tocIndex:4},{value:"我们可以通过 ",paraId:24,tocIndex:4},{value:"intensity",paraId:24,tocIndex:4},{value:" 增大光源的强度：",paraId:24,tocIndex:4},{value:"import { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\nimport { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\n\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ControlPlugin());\nrenderer.registerPlugin(new ThreeDPlugin());\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...threedlib(),\n});\n\n// 初始化图表实例\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  width: 500,\n  height: 500,\n  depth: 400,\n});\n\nchart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('color', 'Origin')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setPerspective(0.1, 5000, 45, 500 / 500);\n  camera.setType(CameraType.ORBITING);\n\n  // Add a directional light into scene.\n  const light = new DirectionalLight({\n    style: {\n      intensity: 5,\n      fill: 'white',\n      direction: [0, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n});\n",paraId:25,tocIndex:4},{value:"你可能注意到在上面的例子中我们刻意关闭了图例：",paraId:26,tocIndex:5},{value:"chart.legend(false);\n",paraId:27,tocIndex:5},{value:"这是由于 3D 场景中的图形都会受到相机影响，但像图例这样的 HUD 组件更适合独立绘制。参考",paraId:28,tocIndex:5},{value:"自定义图例",paraId:29,tocIndex:5},{value:"，我们可以使用 HTML 自定义图例：",paraId:28,tocIndex:5},{value:"import { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\nimport { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\n\n// 添加图例\nfunction legendColor(chart) {\n  // 创建 Legend 并且挂在图例\n  const node = chart.getContainer();\n  const legend = document.createElement('div');\n  legend.style.display = 'flex';\n  node.insertBefore(legend, node.childNodes[0]);\n\n  // 创建并挂载 Items\n  const { color: scale } = chart.getScale();\n  const { domain } = scale.getOptions();\n  const items = domain.map((value) => {\n    const item = document.createElement('div');\n    const color = scale.map(value);\n    item.style.marginLeft = '1em';\n    item.innerHTML = `\n    <span style=\"\n      background-color:${color};\n      display:inline-block;\n      width:10px;\n      height:10px;\"\n    ></span>\n    <span>${value}</span>\n    `;\n    return item;\n  });\n  items.forEach((d) => legend.append(d));\n\n  // 监听事件\n  const selectedValues = [...domain];\n  const options = chart.options();\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    const value = domain[i];\n    item.style.cursor = 'pointer';\n    item.onclick = () => {\n      const index = selectedValues.indexOf(value);\n      if (index !== -1) {\n        selectedValues.splice(index, 1);\n        item.style.opacity = 0.5;\n      } else {\n        selectedValues.push(value);\n        item.style.opacity = 1;\n      }\n      changeColor(selectedValues);\n    };\n  }\n\n  // 重新渲染视图\n  function changeColor(value) {\n    const { transform = [] } = options;\n    const newTransform = [{ type: 'filter', color: { value } }, ...transform];\n    chart.options({\n      ...options,\n      transform: newTransform, // 指定新的 transform\n      scale: { color: { domain } },\n    });\n    chart.render(); // 重新渲染图表\n  }\n}\n\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ControlPlugin());\nrenderer.registerPlugin(new ThreeDPlugin());\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...threedlib(),\n});\n\n// 初始化图表实例\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  width: 500,\n  height: 500,\n  depth: 400,\n});\n\nchart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('color', 'Origin')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render().then(() => {\n  legendColor(chart);\n\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setPerspective(0.1, 5000, 45, 500 / 500);\n  camera.setType(CameraType.ORBITING);\n\n  // Add a directional light into scene.\n  const light = new DirectionalLight({\n    style: {\n      intensity: 3,\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n});\n",paraId:30,tocIndex:5},{value:"3D 场景下的交互和 2D 场景有很大的不同，",paraId:31,tocIndex:6},{value:"g-plugin-control",paraId:31,tocIndex:6},{value:" 提供了 3D 场景下基于相机的交互。当我们拖拽画布时，会控制相机绕视点进行旋转操作，而鼠标滚轮的缩放会让相机进行 dolly 操作。需要注意的是缩放操作在正交投影下是没有效果的，但旋转操作依然有效。",paraId:31,tocIndex:6},{value:"当用户经过了一番相机操作，有时想回到初始状态，例如 ",paraId:32,tocIndex:6},{value:"plot.ly",paraId:32,tocIndex:6},{value:' 在操作工具栏中就提供了 "Reset camera to default" 按钮。使用 G 提供的',paraId:32,tocIndex:6},{value:"相机动画 API",paraId:32,tocIndex:6},{value:"，我们可以实现在任意相机位置间平滑过渡：",paraId:32,tocIndex:6},{value:"const camera = canvas.getCamera();\ncamera.createLandmark('default', {\n  position: [250, 250, 500],\n  focalPoint: [250, 250, 0],\n  zoom: 1,\n});\n\nbutton.onclick = () => {\n  camera.gotoLandmark('default', {\n    duration: 300,\n    easing: 'linear',\n  });\n};\n",paraId:33,tocIndex:6},{value:"import { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\nimport { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\n\nfunction cameraButton(chart) {\n  const node = chart.getContainer();\n  const button = document.createElement('button');\n  button.textContent = 'Reset camera to default';\n  node.insertBefore(button, node.childNodes[0]);\n\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.createLandmark('default', {\n    position: [250, 250, 500],\n    focalPoint: [250, 250, 0],\n    zoom: 1,\n  });\n\n  button.onclick = () => {\n    camera.gotoLandmark('default', {\n      duration: 300,\n      easing: 'linear',\n    });\n  };\n}\n// 添加图例\nfunction legendColor(chart) {\n  // 创建 Legend 并且挂在图例\n  const node = chart.getContainer();\n  const legend = document.createElement('div');\n  legend.style.display = 'flex';\n  node.insertBefore(legend, node.childNodes[0]);\n\n  // 创建并挂载 Items\n  const { color: scale } = chart.getScale();\n  const { domain } = scale.getOptions();\n  const items = domain.map((value) => {\n    const item = document.createElement('div');\n    const color = scale.map(value);\n    item.style.marginLeft = '1em';\n    item.innerHTML = `\n    <span style=\"\n      background-color:${color};\n      display:inline-block;\n      width:10px;\n      height:10px;\"\n    ></span>\n    <span>${value}</span>\n    `;\n    return item;\n  });\n  items.forEach((d) => legend.append(d));\n\n  // 监听事件\n  const selectedValues = [...domain];\n  const options = chart.options();\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    const value = domain[i];\n    item.style.cursor = 'pointer';\n    item.onclick = () => {\n      const index = selectedValues.indexOf(value);\n      if (index !== -1) {\n        selectedValues.splice(index, 1);\n        item.style.opacity = 0.5;\n      } else {\n        selectedValues.push(value);\n        item.style.opacity = 1;\n      }\n      changeColor(selectedValues);\n    };\n  }\n\n  // 重新渲染视图\n  function changeColor(value) {\n    const { transform = [] } = options;\n    const newTransform = [{ type: 'filter', color: { value } }, ...transform];\n    chart.options({\n      ...options,\n      transform: newTransform, // 指定新的 transform\n      scale: { color: { domain } },\n    });\n    chart.render(); // 重新渲染图表\n  }\n}\n\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ControlPlugin());\nrenderer.registerPlugin(new ThreeDPlugin());\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...threedlib(),\n});\n\n// 初始化图表实例\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  width: 500,\n  height: 500,\n  depth: 400,\n});\n\nchart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('color', 'Origin')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render().then(() => {\n  legendColor(chart);\n  cameraButton(chart);\n\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setPerspective(0.1, 5000, 45, 500 / 500);\n  camera.setType(CameraType.ORBITING);\n\n  // Add a directional light into scene.\n  const light = new DirectionalLight({\n    style: {\n      intensity: 3,\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n});\n",paraId:34,tocIndex:6}]},70895:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(62366);const t=[{value:"主要用于绘制 3D 条形图。",paraId:0},{value:"首先需要使用 ",paraId:1,tocIndex:0},{value:"@antv/g-webgl",paraId:1,tocIndex:0},{value:" 作为渲染器并注册以下两个插件：",paraId:1,tocIndex:0},{value:"g-plugin-3d",paraId:2,tocIndex:0},{value:" 提供 3D 场景下的几何、材质和光照",paraId:2,tocIndex:0},{value:"g-plugin-control",paraId:2,tocIndex:0},{value:" 提供 3D 场景下的相机交互",paraId:2,tocIndex:0},{value:"然后设置 z 通道、scale 和 z 坐标轴，最后在场景中添加光源。",paraId:3,tocIndex:0},{value:"import { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\nimport { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\n\n// Create a WebGL renderer.\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ControlPlugin());\nrenderer.registerPlugin(new ThreeDPlugin());\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...threedlib(),\n});\n\n// 初始化图表实例\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  width: 500,\n  height: 500,\n  depth: 400,\n});\n\nconst data = [];\nfor (let x = 0; x < 5; ++x) {\n  for (let z = 0; z < 5; ++z) {\n    data.push({\n      x: `x-${x}`,\n      z: `z-${z}`,\n      y: 10 - x - z,\n      color: Math.random() < 0.33 ? 0 : Math.random() < 0.67 ? 1 : 2,\n    });\n  }\n}\n\nchart\n  .interval3D()\n  .data({\n    type: 'inline',\n    value: data,\n  })\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('z', 'z')\n  .encode('color', 'color')\n  .encode('shape', 'cube')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 })\n  .style('opacity', 0.7);\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setPerspective(0.1, 5000, 50, 1280 / 960);\n  camera.setType(CameraType.ORBITING);\n  camera.rotate(-20, -20, 0);\n\n  // Add a directional light into scene.\n  const light = new DirectionalLight({\n    style: {\n      intensity: 2.5,\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n});\n",paraId:4,tocIndex:0},{value:"更多的案例，可以查看",paraId:5,tocIndex:0},{value:"图表示例",paraId:6,tocIndex:0},{value:"页面。",paraId:5,tocIndex:0},{value:"目前 interval3D 有以下内置 shape 图形：",paraId:7,tocIndex:1},{value:"图形",paraId:8,tocIndex:1},{value:"描述",paraId:8,tocIndex:1},{value:"示例",paraId:8,tocIndex:1},{value:"cube",paraId:8,tocIndex:1},{value:"绘制立方体",paraId:8,tocIndex:1},{value:"cylinder",paraId:8,tocIndex:1},{value:"绘制圆柱",paraId:8,tocIndex:1},{value:"cone",paraId:8,tocIndex:1},{value:"绘制圆锥",paraId:8,tocIndex:1},{value:"属性",paraId:9,tocIndex:2},{value:"描述",paraId:9,tocIndex:2},{value:"类型",paraId:9,tocIndex:2},{value:"默认值",paraId:9,tocIndex:2},{value:"fill",paraId:9,tocIndex:2},{value:"图形的填充色",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"Function<string>",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"opacity",paraId:9,tocIndex:2},{value:"图形的整体透明度",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"Function<number>",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"cursor",paraId:9,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"Function<string>",paraId:9,tocIndex:2},{value:"'default'",paraId:9,tocIndex:2}]},82286:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(86218);const t=[{value:"主要用于绘制 3D 折线图。",paraId:0},{value:"首先需要使用 ",paraId:1,tocIndex:0},{value:"@antv/g-webgl",paraId:1,tocIndex:0},{value:" 作为渲染器并注册以下两个插件：",paraId:1,tocIndex:0},{value:"g-plugin-3d",paraId:2,tocIndex:0},{value:" 提供 3D 场景下的几何、材质和光照",paraId:2,tocIndex:0},{value:"g-plugin-control",paraId:2,tocIndex:0},{value:" 提供 3D 场景下的相机交互",paraId:2,tocIndex:0},{value:"然后设置 z 通道、scale 和 z 坐标轴。无需在场景中添加光源。",paraId:3,tocIndex:0},{value:"import { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\nimport { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\n\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ControlPlugin());\nrenderer.registerPlugin(new ThreeDPlugin());\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...threedlib(),\n});\n\n// 初始化图表实例\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  width: 500,\n  height: 500,\n  depth: 400,\n});\n\nconst pointCount = 31;\nlet r;\nconst data = [];\n\nfor (let i = 0; i < pointCount; i++) {\n  r = 10 * Math.cos(i / 10);\n  data.push({\n    x: r * Math.cos(i),\n    y: r * Math.sin(i),\n    z: i,\n  });\n}\n\nchart\n  .line3D()\n  .data(data)\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('z', 'z')\n  .encode('size', 4)\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setPerspective(0.1, 5000, 45, 500 / 500);\n  camera.setType(CameraType.ORBITING);\n});\n",paraId:4,tocIndex:0},{value:"更多的案例，可以查看",paraId:5,tocIndex:0},{value:"图表示例",paraId:6,tocIndex:0},{value:"页面。",paraId:5,tocIndex:0}]},61464:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(39631);const t=[{value:"主要用于绘制 3D 散点图，利用点的粒度来分析数据的分布情况。",paraId:0},{value:"首先需要使用 ",paraId:1,tocIndex:0},{value:"@antv/g-webgl",paraId:1,tocIndex:0},{value:" 作为渲染器并注册以下两个插件：",paraId:1,tocIndex:0},{value:"g-plugin-3d",paraId:2,tocIndex:0},{value:" 提供 3D 场景下的几何、材质和光照",paraId:2,tocIndex:0},{value:"g-plugin-control",paraId:2,tocIndex:0},{value:" 提供 3D 场景下的相机交互",paraId:2,tocIndex:0},{value:"然后设置 z 通道、scale 和 z 坐标轴，最后在场景中添加光源。",paraId:3,tocIndex:0},{value:"import { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\nimport { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\n\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ControlPlugin());\nrenderer.registerPlugin(new ThreeDPlugin());\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...threedlib(),\n});\n\n// 初始化图表实例\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  width: 500,\n  height: 500,\n  depth: 400,\n});\n\nchart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('color', 'Cylinders')\n  .encode('shape', 'cube')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setPerspective(0.1, 5000, 45, 500 / 500);\n  camera.setType(CameraType.ORBITING);\n\n  // Add a directional light into scene.\n  const light = new DirectionalLight({\n    style: {\n      intensity: 3,\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n});\n",paraId:4,tocIndex:0},{value:"更多的案例，可以查看",paraId:5,tocIndex:0},{value:"图表示例",paraId:6,tocIndex:0},{value:"页面。",paraId:5,tocIndex:0},{value:"目前 point3D 有以下几个内置 shape 图形，包含 3D 和 2D：",paraId:7,tocIndex:1},{value:"图形",paraId:8,tocIndex:1},{value:"描述",paraId:8,tocIndex:1},{value:"示例",paraId:8,tocIndex:1},{value:"cube",paraId:8,tocIndex:1},{value:"绘制立方体",paraId:8,tocIndex:1},{value:"sphere",paraId:8,tocIndex:1},{value:"绘制球体",paraId:8,tocIndex:1},{value:"hollow",paraId:8,tocIndex:1},{value:"绘制空心圆",paraId:8,tocIndex:1},{value:"hollowDiamond",paraId:8,tocIndex:1},{value:"绘制空心钻石",paraId:8,tocIndex:1},{value:"hollowHexagon",paraId:8,tocIndex:1},{value:"绘制空心六边形",paraId:8,tocIndex:1},{value:"hollowSquare",paraId:8,tocIndex:1},{value:"绘制空心方块",paraId:8,tocIndex:1},{value:"hollowTriangleDown",paraId:8,tocIndex:1},{value:"绘制空心向下三角形",paraId:8,tocIndex:1},{value:"hollowTriangle",paraId:8,tocIndex:1},{value:"绘制空心三角形",paraId:8,tocIndex:1},{value:"hollowBowtie",paraId:8,tocIndex:1},{value:"绘制空心蝴蝶结",paraId:8,tocIndex:1},{value:"point",paraId:8,tocIndex:1},{value:"绘制圆",paraId:8,tocIndex:1},{value:"plus",paraId:8,tocIndex:1},{value:"绘制加号",paraId:8,tocIndex:1},{value:"diamond",paraId:8,tocIndex:1},{value:"绘制钻石",paraId:8,tocIndex:1},{value:"square",paraId:8,tocIndex:1},{value:"绘制方块",paraId:8,tocIndex:1},{value:"triangle",paraId:8,tocIndex:1},{value:"绘制三角形",paraId:8,tocIndex:1},{value:"triangleDown",paraId:8,tocIndex:1},{value:"绘制向下三角形",paraId:8,tocIndex:1},{value:"hexagon",paraId:8,tocIndex:1},{value:"绘制六边形",paraId:8,tocIndex:1},{value:"cross",paraId:8,tocIndex:1},{value:"绘制交叉符号",paraId:8,tocIndex:1},{value:"bowtie",paraId:8,tocIndex:1},{value:"绘制蝴蝶结",paraId:8,tocIndex:1},{value:"hyphen",paraId:8,tocIndex:1},{value:"绘制连字符",paraId:8,tocIndex:1},{value:"line",paraId:8,tocIndex:1},{value:"绘制竖线",paraId:8,tocIndex:1},{value:"tick",paraId:8,tocIndex:1},{value:"绘制 tick",paraId:8,tocIndex:1},{value:"使用球体效果如下：",paraId:9,tocIndex:1},{value:"import { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\nimport { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\n\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ControlPlugin());\nrenderer.registerPlugin(new ThreeDPlugin());\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...threedlib(),\n});\n\n// 初始化图表实例\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  width: 500,\n  height: 500,\n  depth: 400,\n});\n\nchart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('color', 'Cylinders')\n  .encode('shape', 'sphere')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setPerspective(0.1, 5000, 45, 500 / 500);\n  camera.setType(CameraType.ORBITING);\n\n  // Add a directional light into scene.\n  const light = new DirectionalLight({\n    style: {\n      intensity: 3,\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n});\n",paraId:10,tocIndex:1},{value:"而在使用 2D 图形时，无需添加光源：",paraId:11,tocIndex:1},{value:"import { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\nimport { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\n\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ControlPlugin());\nrenderer.registerPlugin(new ThreeDPlugin());\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...threedlib(),\n});\n\n// 初始化图表实例\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  width: 500,\n  height: 500,\n  depth: 400,\n});\n\nchart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('color', 'Cylinders')\n  .encode('shape', 'triangle')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setPerspective(0.1, 5000, 45, 500 / 500);\n  camera.setType(CameraType.ORBITING);\n});\n",paraId:12,tocIndex:1},{value:"属性",paraId:13,tocIndex:2},{value:"描述",paraId:13,tocIndex:2},{value:"类型",paraId:13,tocIndex:2},{value:"默认值",paraId:13,tocIndex:2},{value:"fill",paraId:13,tocIndex:2},{value:"图形的填充色",paraId:13,tocIndex:2},{value:"string",paraId:13,tocIndex:2},{value:" | ",paraId:13,tocIndex:2},{value:"Function<string>",paraId:13,tocIndex:2},{value:"-",paraId:13,tocIndex:2},{value:"opacity",paraId:13,tocIndex:2},{value:"图形的整体透明度",paraId:13,tocIndex:2},{value:"number",paraId:13,tocIndex:2},{value:" | ",paraId:13,tocIndex:2},{value:"Function<number>",paraId:13,tocIndex:2},{value:"-",paraId:13,tocIndex:2},{value:"cursor",paraId:13,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:13,tocIndex:2},{value:"string",paraId:13,tocIndex:2},{value:" | ",paraId:13,tocIndex:2},{value:"Function<string>",paraId:13,tocIndex:2},{value:"'default'",paraId:13,tocIndex:2},{value:"其他的 point3D 图形配置项和 ",paraId:14,tocIndex:2},{value:"cube",paraId:14,tocIndex:2},{value:" 一致。",paraId:14,tocIndex:2},{value:"属性",paraId:15,tocIndex:3},{value:"描述",paraId:15,tocIndex:3},{value:"类型",paraId:15,tocIndex:3},{value:"默认值",paraId:15,tocIndex:3},{value:"fill",paraId:15,tocIndex:3},{value:"图形的填充色",paraId:15,tocIndex:3},{value:"string",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<string>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"fillOpacity",paraId:15,tocIndex:3},{value:"图形的填充透明度",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"stroke",paraId:15,tocIndex:3},{value:"图形的描边",paraId:15,tocIndex:3},{value:"string",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<string>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"strokeOpacity",paraId:15,tocIndex:3},{value:"描边透明度",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"lineWidth",paraId:15,tocIndex:3},{value:"图形描边的宽度",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"lineDash",paraId:15,tocIndex:3},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:15,tocIndex:3},{value:"[number,number]",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<[number, number]>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"opacity",paraId:15,tocIndex:3},{value:"图形的整体透明度",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"shadowColor",paraId:15,tocIndex:3},{value:"图形阴影颜色",paraId:15,tocIndex:3},{value:"string",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<string>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"shadowBlur",paraId:15,tocIndex:3},{value:"图形阴影的高斯模糊系数",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"shadowOffsetX",paraId:15,tocIndex:3},{value:"设置阴影距图形的水平距离",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"shadowOffsetY",paraId:15,tocIndex:3},{value:"设置阴影距图形的垂直距离",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"cursor",paraId:15,tocIndex:3},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:15,tocIndex:3},{value:"string",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<string>",paraId:15,tocIndex:3},{value:"'default'",paraId:15,tocIndex:3}]},61982:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(11928);const t=[{value:"主要用于绘制 3D 曲面图。",paraId:0},{value:"首先需要使用 ",paraId:1,tocIndex:0},{value:"@antv/g-webgl",paraId:1,tocIndex:0},{value:" 作为渲染器并注册以下两个插件：",paraId:1,tocIndex:0},{value:"g-plugin-3d",paraId:2,tocIndex:0},{value:" 提供 3D 场景下的几何、材质和光照",paraId:2,tocIndex:0},{value:"g-plugin-control",paraId:2,tocIndex:0},{value:" 提供 3D 场景下的相机交互",paraId:2,tocIndex:0},{value:"然后设置 z 通道、scale 和 z 坐标轴。无需在场景中添加光源。",paraId:3,tocIndex:0},{value:"import { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\nimport { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\n\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ControlPlugin());\nrenderer.registerPlugin(new ThreeDPlugin());\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...threedlib(),\n});\n\n// 初始化图表实例\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  width: 500,\n  height: 500,\n  depth: 400,\n});\n\n// We set the width/height to 100;\nconst size = 100;\nconst points = [];\nfor (let i = 0; i <= 2 * size; ++i) {\n  const theta = (Math.PI * (i - size)) / size;\n  for (let j = 0; j <= 2 * size; ++j) {\n    var phi = (Math.PI * (j - size)) / size;\n\n    const x = (10.0 + Math.cos(theta)) * Math.cos(phi);\n    const y = (10.0 + Math.cos(theta)) * Math.sin(phi);\n\n    points.push({\n      x: i,\n      y: j,\n      z: Math.sin(theta) * x * y,\n    });\n  }\n}\n\nchart\n  .surface3D()\n  .data(points)\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('z', 'z')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 1 })\n  .axis('y', { gridLineWidth: 1, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 1 });\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setPerspective(0.1, 2000, 45, 500 / 500);\n  camera.rotate(30, 30, 0);\n  camera.dolly(60);\n  camera.setType(CameraType.ORBITING);\n});\n",paraId:4,tocIndex:0},{value:"更多的案例，可以查看",paraId:5,tocIndex:0},{value:"图表示例",paraId:6,tocIndex:0},{value:"页面。",paraId:5,tocIndex:0}]},78229:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(45223);const t=[{value:"G2 5.0 和 4.0 版本一样，提供了一套命令式的 Functional API 去声明图表，比如如下声明一个最简单的条形图。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\n// 初始化图表实例\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// 声明可视化\nchart\n  .interval() // 创建一个 Interval 标记\n  .data([\n    // 绑定数据\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre') // 编码 x 通道\n  .encode('y', 'sold'); // 编码 y 通道\n\n// 渲染可视化\nchart.render();\n",paraId:1},{value:"除了这套函数式风格之外，G2 5.0 还提供了一套全新的 API：Spec API。该 API 通过一个 JavaScript 对象去声明可视化。",paraId:2},{value:"目前我们通过 ",paraId:3,tocIndex:0},{value:"chart.options(spec)",paraId:3,tocIndex:0},{value:" 去声明可视化，下面的例子可以得到和上面一样的效果。",paraId:3,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\n// 初始化图表实例\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// 声明可视化\nchart.options({\n  type: 'interval', // 创建一个 Interval 标记\n  data: [\n    // 绑定数据\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre', // 编码 x 通道\n    y: 'sold', // 编码 y 通道\n  },\n});\n\n// 渲染可视化\nchart.render();\n",paraId:4,tocIndex:0},{value:"可以发现，两种 API 初始化图表实例和最后渲染是一致的，但是中间声明可视化的方式却不同，接下来我们就来简单看看两者的异同。",paraId:5,tocIndex:1},{value:"Functional API 是基于 Spec API 实现的：简单来讲，每一个 Chart 实例都有一个 options，Functional API 是通过一系列方法去生成这个 options，而 Spec API 是直接设置这个 options。不论是哪种形式的 API，G2 最后都是直接渲染当前的 options，所以两者声明可视化的能力是完全等价。",paraId:6,tocIndex:1},{value:"在大部分场景下，两者更多只是一个风格上的选择，但是也有一些差别：",paraId:7,tocIndex:1},{value:"易用性",paraId:8,tocIndex:1},{value:"：Spec API 从易用性上讲更胜一筹，对初学者或者不需要深入了解 G2 的用户更友好。JavaScript 对象这种结构型更强的表达，会天然比函数表达更易懂一点。并且其往往是一个整体，更容易复制、粘贴和“调参”。",paraId:8,tocIndex:1},{value:"灵活性",paraId:8,tocIndex:1},{value:"：Functional API 优势在灵活性，更适合对函数式、",paraId:8,tocIndex:1},{value:"D3",paraId:8,tocIndex:1},{value:" 更加熟悉的用户。但是它的灵活性并不是体现在能绘制出更加复杂的可视化，而是体现在声明可视化的形式会更加灵活。其中有一个优点就是更容易去组织关注点。",paraId:8,tocIndex:1},{value:"比如希望上面条形图中的条依次出现，那么就需要增加一个 encode 和 transform。下面第一种 Spec API 看上去会比第二种 Functional API 更清晰一点，但是后者可以把和动画相关的属性（相同的关注点）放在一起，而前者就不行。",paraId:9,tocIndex:1},{value:"chart.options({\n  type: 'interval',\n  data,\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    enterDuration: 1000,\n  },\n  transform: [{ type: 'stackEnter' }],\n});\n",paraId:10,tocIndex:1},{value:"chart\n  .interval()\n  .data(data)\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  // 这两个都和动画有关，可以放在一起。\n  .encode('enterDuration', 1000)\n  .transform({ type: 'stackEnter' });\n",paraId:11,tocIndex:1},{value:"G2 的 Spec 总体来讲是一个有层级结构的",paraId:12,tocIndex:2},{value:"视图树（View Tree）",paraId:12,tocIndex:2},{value:"，由不同的节点构成。节点通过 ",paraId:12,tocIndex:2},{value:"node.type",paraId:12,tocIndex:2},{value:" 指定类型，不同的类型有不同的作用，同时通过 ",paraId:12,tocIndex:2},{value:"node.children",paraId:12,tocIndex:2},{value:" 来进行嵌套。",paraId:12,tocIndex:2},{value:"({\n  type: 'spaceFlex',\n  children: [\n    {\n      type: 'view',\n      children: [{ type: 'line' }, { type: 'point' }],\n    },\n    {\n      type: 'interval',\n    },\n  ],\n});\n",paraId:13,tocIndex:2},{value:"其中视图可以简单理解为图表，或者",paraId:14,tocIndex:2},{value:"单视图图表（Single View Plot）",paraId:14,tocIndex:2},{value:"。这颗“树”通过不同的容器节点在时间和空间上管理视图，从而在时间和空间上管理我们的视图，从而绘制",paraId:14,tocIndex:2},{value:"多视图图表（Multiple View Plots）",paraId:14,tocIndex:2},{value:"。",paraId:14,tocIndex:2},{value:"API 是通过 ",paraId:15,tocIndex:2},{value:"parent.[child]()",paraId:15,tocIndex:2},{value:" 的形式给指定的 ",paraId:15,tocIndex:2},{value:"parent",paraId:15,tocIndex:2},{value:" 添加对应的 ",paraId:15,tocIndex:2},{value:"child",paraId:15,tocIndex:2},{value:" 节点来声明层次关系的，比如上面的层次关系用 API 需要如下声明：",paraId:15,tocIndex:2},{value:"const spaceFlex = chart.spaceFlex();\n\nconst view = spaceFlex.view();\n\nview.line();\n\nview.point();\n\nspaceFlex.interval();\n",paraId:16,tocIndex:2},{value:"接下来介绍三种节点：",paraId:17,tocIndex:2},{value:"标记节点",paraId:18,tocIndex:2},{value:"视图节点",paraId:18,tocIndex:2},{value:"复合节点",paraId:18,tocIndex:2},{value:"标记节点是该树上的叶子节点，不可继续嵌套，也就是不能再包含 ",paraId:19,tocIndex:3},{value:"children",paraId:19,tocIndex:3},{value:" 属性。标记类似图表的概念，比如一个 Interval 标记可以绘制一个条形图。",paraId:19,tocIndex:3},{value:"({\n  type: 'interval',\n});\n",paraId:20,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval', // 标记节点\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre',\n    y: 'sold',\n  },\n});\n\nchart.render();\n",paraId:21,tocIndex:3},{value:"如果是希望图表中有多个标记，这个时候就需要把它们放入视图节点中，绘制单视图图表。视图节点只能嵌套标记节点。",paraId:22,tocIndex:4},{value:"({\n  type: 'view',\n  children: [{ type: 'line' }, { type: 'point' }],\n});\n",paraId:23,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view', // 视图节点\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  encode: {\n    x: 'year',\n    y: 'value',\n  },\n  children: [\n    { type: 'line' }, // Line 标记\n    { type: 'point' }, // Point 标记\n  ],\n});\n\nchart.render();\n",paraId:24,tocIndex:4},{value:"用于在一个图表里面绘制多个视图（多视图图表）。它可以嵌套复合节点，视图节点和标记节点。",paraId:25,tocIndex:5},{value:"({\n  type: 'spaceFlex',\n  children: [\n    { type: 'spaceFlex' }, // 复合节点\n    { type: 'view' }, // 视图节点\n    { type: 'interval' }, // 标记节点\n  ],\n});\n",paraId:26,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'spaceFlex',\n  width: 800,\n  height: 400,\n  children: [\n    {\n      type: 'interval',\n      padding: 'auto',\n      data: [\n        { genre: 'Shooter', sold: 350 },\n        { genre: 'Sports', sold: 275 },\n        { genre: 'Other', sold: 150 },\n        { genre: 'Action', sold: 120 },\n        { genre: 'Strategy', sold: 115 },\n      ],\n      encode: { x: 'genre', y: 'sold' },\n    },\n    {\n      type: 'interval',\n      padding: 'auto',\n      data: [\n        { genre: 'Shooter', sold: 350 },\n        { genre: 'Sports', sold: 275 },\n        { genre: 'Other', sold: 150 },\n        { genre: 'Action', sold: 120 },\n        { genre: 'Strategy', sold: 115 },\n      ],\n      encode: { y: 'sold', color: 'genre' },\n      transform: [{ type: 'stackY' }],\n      coordinate: { type: 'theta' },\n      legend: { color: false },\n    },\n  ],\n});\n\nchart.render();\n",paraId:27,tocIndex:5},{value:"当然 Spec API 不仅仅有简单这一个特点，它还有更多的应用场景：",paraId:28,tocIndex:6},{value:"智能可视化",paraId:29,tocIndex:6},{value:"：可以基于 Spec 进行推荐和纠错等。",paraId:29,tocIndex:6},{value:"上层封装",paraId:29,tocIndex:6},{value:"：转换 Spec 对应的 Options 会比直接调用更容易。",paraId:29,tocIndex:6},{value:"低代码搭建",paraId:29,tocIndex:6},{value:"：可以基于 Spec 直接生成配置面板，搭建一个 BI 工具。",paraId:29,tocIndex:6},{value:"图表运算",paraId:29,tocIndex:6},{value:"：Spec 也可以看做一种数据结构，如果是数据结构，就可以做一系列运算，比如图片相加等。",paraId:29,tocIndex:6},{value:"服务端渲染",paraId:29,tocIndex:6},{value:"：可以直接把 Spec 对应的 Options 渲染成图片。",paraId:29,tocIndex:6},{value:"......",paraId:29,tocIndex:6},{value:"后面 G2 围绕基于这一套新的 API 做一系列工具供大家使用，如果大家有想法也可以在这里讨论参与",paraId:30,tocIndex:6},{value:"共建",paraId:30,tocIndex:6},{value:"。",paraId:30,tocIndex:6},{value:"下面通过一些案例给大家展示一下 Spec API 的使用方法。",paraId:31,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\n// 初始化图表实例\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// 声明可视化\nchart.options({\n  type: 'interval',\n  height: 640,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/79fd9317-d2af-4bc4-90fa-9d07357398fd.csv',\n  },\n  transform: [{ type: 'stackY' }],\n  coordinate: { type: 'theta' },\n  scale: {\n    color: { palette: 'spectral', offset: (t) => t * 0.8 + 0.1 },\n  },\n  legend: false,\n  encode: { y: 'value', color: 'name' },\n  style: { stroke: 'white' },\n  labels: [\n    {\n      text: 'name',\n      radius: 0.8,\n      style: { fontSize: 10, fontWeight: 'bold' },\n    },\n    {\n      text: (d, i, data) => (i < data.length - 3 ? d.value : ''),\n      radius: 0.8,\n      style: { fontSize: 9, dy: 12 },\n    },\n  ],\n  animate: { enter: { type: 'waveIn', duration: 1000 } },\n});\n\n// 渲染可视化\nchart.render();\n",paraId:32,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\n// 初始化图表实例\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// 声明可视化\nchart.options({\n  type: 'spaceFlex',\n  width: 900,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n  },\n  direction: 'col',\n  ratio: [1, 2],\n  children: [\n    {\n      type: 'interval',\n      paddingBottom: 0,\n      paddingRight: 300,\n      transform: [{ type: 'groupX', y: 'max' }],\n      axis: { x: false },\n      encode: {\n        x: (d) => new Date(d.date).getUTCDate(),\n        y: 'temp_max',\n        color: 'steelblue',\n      },\n    },\n    {\n      type: 'spaceFlex',\n      ratio: [2, 1],\n      children: [\n        {\n          type: 'cell',\n          paddingRight: 0,\n          paddingBottom: 50,\n          transform: [{ type: 'group', color: 'max' }],\n          encode: {\n            x: (d) => new Date(d.date).getUTCDate(),\n            y: (d) => new Date(d.date).getUTCMonth(),\n            color: 'temp_max',\n          },\n          style: { inset: 0.5 },\n          axis: {\n            x: { title: 'Date' },\n            y: { title: 'Month' },\n          },\n          scale: { color: { palette: 'gnBu' } },\n          legend: false,\n        },\n        {\n          type: 'interval',\n          paddingBottom: 50,\n          transform: [{ type: 'groupX', y: 'max' }],\n          coordinate: { transform: [{ type: 'transpose' }] },\n          axis: { x: false },\n          encode: {\n            x: (d) => new Date(d.date).getUTCMonth(),\n            y: 'temp_max',\n            color: 'steelblue',\n          },\n        },\n      ],\n    },\n  ],\n});\n\n// 渲染可视化\nchart.render();\n",paraId:33,tocIndex:9}]},22651:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(34456);const t=[{value:"这里简单介绍在一些前端框架中使用 G2 的方法。我们将用不同的框架实现以下的条形图更新效果。",paraId:0},{value:"实现该效果主要依靠以下两个函数。",paraId:1},{value:"// 渲染条形图\nfunction renderBarChart(container) {\n  const chart = new Chart({\n    container,\n  });\n\n  // 准备数据\n  const data = [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ];\n\n  // 声明可视化\n  chart\n    .interval() // 创建一个 Interval 标记\n    .data(data) // 绑定数据\n    .encode('x', 'genre') // 编码 x 通道\n    .encode('y', 'sold') // 编码 y 通道\n    .encode('key', 'genre') // 指定 key\n    .animate('update', { duration: 300 }); // 指定更新动画的时间\n\n  // 渲染可视化\n  chart.render();\n\n  return chart;\n}\n",paraId:2},{value:"// 更新条形图的数据\nfunction updateBarChart(chart) {\n  // 获得 Interval Mark\n  const interval = chart.getNodesByType('interval')[0];\n\n  // 模拟并且更新 Interval 的数据\n  const newData = interval.data().map((d) => ({\n    ...d,\n    sold: Math.random() * 400 + 100,\n  }));\n\n  interval.data(newData);\n\n  // 重新渲染\n  chart.render();\n}\n",paraId:3},{value:"这里需要注意的是，在框架中不推荐使用 ",paraId:4},{value:"new Chart({ container: 'id' })",paraId:4},{value:" 的形式去指定容器，而是直接使用 HTML 元素作为容器：",paraId:4},{value:"new Chart({ container: HTMLContainer })",paraId:4},{value:"。这样是为了防止出现不同组件拥有相同的 id，从而不能预期渲染的问题。",paraId:4},{value:"接下来我们就来看看如何在框架中使用这两个函数。",paraId:5},{value:"在 Vue 中首先是引入定义的 ",paraId:6,tocIndex:0},{value:"G2Demo",paraId:6,tocIndex:0},{value:" 的组件。",paraId:6,tocIndex:0},{value:"\x3c!-- App.vue --\x3e\n<template>\n  <div id=\"app\">\n    <G2Demo />\n  </div>\n</template>\n\n<script>\n  import G2Demo from './components/G2Demo';\n\n  export default {\n    name: 'App',\n    components: {\n      G2Demo,\n    },\n  };\n<\/script>\n",paraId:7,tocIndex:0},{value:"如果使用 ",paraId:8,tocIndex:1},{value:"Vue2",paraId:8,tocIndex:1},{value:" 和 ",paraId:8,tocIndex:1},{value:"Vue3",paraId:8,tocIndex:1},{value:" 的选项式 API，那么可以如下定义 ",paraId:8,tocIndex:1},{value:"G2Demo",paraId:8,tocIndex:1},{value:" 这个组件，完整的代码参考",paraId:8,tocIndex:1},{value:"这里",paraId:8,tocIndex:1},{value:"。",paraId:8,tocIndex:1},{value:"\x3c!-- components/G2Demo.vue --\x3e\n<template>\n  <div>\n    <div ref=\"container\"></div>\n    <button @click=\"onClick\">Update Data</button>\n  </div>\n</template>\n\n<script>\n  import { Chart } from '@antv/g2';\n\n  function renderBarChart(container) {\n    // 如上\n  }\n\n  function updateBarChart(chart) {\n    // 如上\n  }\n\n  export default {\n    name: 'G2Demo',\n    props: {},\n    mounted() {\n      // 保存图表实例\n      this.chart = renderBarChart(this.$refs.container);\n    },\n    unmounted() {\n      // 清理图表实例\n      this.chart.destroy();\n    },\n    methods: {\n      onClick() {\n        updateBarChart(this.chart);\n      },\n    },\n  };\n<\/script>\n",paraId:9,tocIndex:1},{value:"如果使用的 Vue3 的组合式 API，那么实现如下，完整代码参考",paraId:10,tocIndex:2},{value:"这里",paraId:10,tocIndex:2},{value:"。",paraId:10,tocIndex:2},{value:"<script setup>\n  import { onMounted, onUnmounted, ref } from 'vue';\n  import { Chart } from '@antv/g2';\n\n  let chart;\n  const container = ref(null);\n\n  onMounted(() => {\n    chart = renderBarChart(container.value);\n  });\n\n  onUnmounted(() => {\n    chart.destroy();\n    chart = null;\n  });\n\n  function onClick() {\n    updateBarChart(chart);\n  }\n\n  function renderBarChart(container) {\n    // 如上\n  }\n\n  function updateBarChart(chart) {\n    // 如上\n  }\n<\/script>\n\n<template>\n  <div>\n    <div ref=\"container\"></div>\n    <button @click=\"onClick\">Update Data</button>\n  </div>\n</template>\n",paraId:11,tocIndex:2},{value:"在 ",paraId:12,tocIndex:3},{value:"React",paraId:12,tocIndex:3},{value:" 中，同样是首先是引入定义的 ",paraId:12,tocIndex:3},{value:"G2Demo",paraId:12,tocIndex:3},{value:" 的组件。",paraId:12,tocIndex:3},{value:"import './styles.css';\nimport G2Demo from './components/G2Demo';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <G2Demo />\n    </div>\n  );\n}\n",paraId:13,tocIndex:3},{value:"接下来就定义这个 ",paraId:14,tocIndex:3},{value:"G2Demo",paraId:14,tocIndex:3},{value:" 这个组件，完整代码参考",paraId:14,tocIndex:3},{value:"这里",paraId:14,tocIndex:3},{value:"。",paraId:14,tocIndex:3},{value:"import { Chart } from '@antv/g2';\nimport { useEffect, useRef } from 'react';\n\nexport default function G2Demo() {\n  const container = useRef(null);\n  const chart = useRef(null);\n\n  useEffect(() => {\n    if (!chart.current) {\n      chart.current = renderBarChart(container.current);\n    }\n\n    return () => {\n      chart.current.destroy();\n      chart.current = null;\n    };\n  }, []);\n\n  function renderBarChart(container) {\n    // 如上\n  }\n\n  function updateBarChart(chart) {\n    // 如上\n  }\n\n  return (\n    <div className=\"App\">\n      <div ref={container}></div>\n      <button onClick={() => updateBarChart(chart.current)}>Update Data</button>\n    </div>\n  );\n}\n",paraId:15,tocIndex:3}]},23214:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(47870);const t=[{value:"G2",paraId:0},{value:" 是一个简洁的渐进式语法，主要用于制作基于网页的可视化。它提供了一套函数风格式、声明形式的 API 和组件化的编程范式，希望能帮助用户能快速完成",paraId:0},{value:"报表搭建",paraId:0},{value:"、",paraId:0},{value:"数据探索",paraId:0},{value:"、",paraId:0},{value:"可视化叙事",paraId:0},{value:"等多样化的需求。",paraId:0},{value:"这篇文章将给大家简单介绍一下 G2 的核心概念：",paraId:1},{value:"标记（Mark）",paraId:2},{value:"：绘制数据驱动的图形",paraId:2},{value:"转换（Transform）",paraId:2},{value:"：派生数据",paraId:2},{value:"比例尺（Scale）",paraId:2},{value:"：将抽象的数据映射为视觉数据",paraId:2},{value:"坐标系（Coordinate",paraId:2},{value:"）：对空间通道应用点变换",paraId:2},{value:"视图复合（Composition）",paraId:2},{value:"：管理和增强视图",paraId:2},{value:"动画（Animation）",paraId:2},{value:"：数据驱动的动画和连续的形变动画",paraId:2},{value:"交互（Interaction）",paraId:2},{value:"： 操作视图并且展现详细信息",paraId:2},{value:'"Talk is cheap, show me the code"，那么接下来看看基于下面这个简单的数据集，G2 能做出什么可视化效果。',paraId:3},{value:"table({\n  url: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n});\n",paraId:4},{value:"在 G2 官网的文档中，特定代码块会挂载其返回的 DOM，并在网页中展示。",paraId:5},{value:"(() => {\n  const chart = new G2.Chart();\n  // ...\n  return chart.getContainer(); // 挂载图表的容器\n})();\n",paraId:6},{value:"这是在 G2 官网特定运行环境的语法，在实际项目中使用 G2 请参考",paraId:7},{value:"快速上手",paraId:8},{value:"。",paraId:7},{value:"标记",paraId:9,tocIndex:0},{value:"是 G2 中最小的视觉单元，G2 中的所有图表都是由不同标记构成的。",paraId:9,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  })\n  .encode('x', 'weight')\n  .encode('y', 'height')\n  .encode('color', 'gender');\n\nchart.render();\n",paraId:10,tocIndex:0},{value:"转换",paraId:11,tocIndex:1},{value:"会改变数据和标记的展现形式，多用于数据分析。",paraId:11,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .rect()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  })\n  .encode('x', 'height')\n  .encode('color', 'gender')\n  .transform({ type: 'binX', y: 'count' })\n  .transform({ type: 'stackY' })\n  .style('insetLeft', 1);\n\nchart.render();\n",paraId:12,tocIndex:1},{value:"比例尺",paraId:13,tocIndex:2},{value:"用于控制标记的视觉样式。",paraId:13,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .rect()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  })\n  .encode('x', 'height')\n  .encode('color', 'gender')\n  .transform({ type: 'binX', y: 'count' })\n  .transform({ type: 'stackY' })\n  .scale('color', { range: ['steelblue', 'orange'] })\n  .scale('y', { nice: true })\n  .style('insetLeft', 1);\n\nchart.render();\n",paraId:14,tocIndex:2},{value:"坐标系",paraId:15,tocIndex:3},{value:"会改变图表的展示形式。",paraId:15,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .rect()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  })\n  .encode('x', 'height')\n  .encode('color', 'gender')\n  .transform({ type: 'binX', y: 'count' })\n  .transform({ type: 'stackY' })\n  .scale('color', { range: ['steelblue', 'orange'] })\n  .scale('y', { type: 'sqrt', nice: true })\n  .coordinate({ type: 'polar' })\n  .axis('y', { title: false })\n  .style('insetLeft', 1);\n\nchart.render();\n",paraId:16,tocIndex:3},{value:"视图复合",paraId:17,tocIndex:4},{value:"用于制作多视图图表。",paraId:17,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 60,\n});\n\nconst facet = chart\n  .facetRect()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  })\n  .encode('y', 'gender');\n\nfacet\n  .rect()\n  .encode('x', 'height')\n  .encode('color', 'gender')\n  .transform({ type: 'binX', y: 'count' })\n  .transform({ type: 'stackY' })\n  .scale('y', { nice: true })\n  .attr('frame', false)\n  .style('insetLeft', 1);\n\nchart.render();\n",paraId:18,tocIndex:4},{value:"动画",paraId:19,tocIndex:5},{value:"支持分组动画和关键帧动画。可以点击左边的运行按钮看效果。",paraId:19,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .rect()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  })\n  .encode('x', 'height')\n  .encode('color', 'gender')\n  .encode('enterDuration', 1000)\n  .transform({ type: 'stackEnter', groupBy: ['color'] })\n  .transform({ type: 'binX', y: 'count' })\n  .transform({ type: 'stackY' })\n  .style('insetLeft', 1);\n\nchart.render();\n",paraId:20,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/fbe4a8c1-ce04-4ba3-912a-0b26d6965333.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const chart = new Chart({\n      container: 'container',\n      paddingTop: 60,\n      paddingLeft: 100,\n    });\n\n    const keyframe = chart\n      .timingKeyframe()\n      .attr('direction', 'alternate')\n      .attr('iterationCount', 4);\n\n    keyframe\n      .interval()\n      .attr('padding', 'auto')\n      .data(data)\n      .encode('x', 'gender')\n      .encode('color', 'gender')\n      .encode('key', 'gender')\n      .transform({ type: 'groupX', y: 'count' });\n\n    keyframe\n      .point()\n      .attr('padding', 'auto')\n      .data(data)\n      .encode('x', 'weight')\n      .encode('y', 'height')\n      .encode('color', 'gender')\n      .encode('groupKey', 'gender')\n      .encode('shape', 'point');\n\n    chart.render();\n  });\n",paraId:21,tocIndex:5},{value:"交互可以按需探索数据。",paraId:22,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  })\n  .encode('x', 'weight')\n  .encode('y', 'height')\n  .encode('color', 'gender')\n  .encode('shape', 'point')\n  .style({\n    fillOpacity: 0.7,\n    transform: 'scale(1, 1)',\n    transformOrigin: 'center center',\n  })\n  .state('inactive', {\n    fill: 'black',\n    fillOpacity: 0.5,\n    transform: 'scale(0.5, 0.5)',\n  })\n  .interaction('brushXHighlight', true);\n\nchart.render();\n",paraId:23,tocIndex:6},{value:"因为 G2 的标记是可以组合的，同时提供了",paraId:24,tocIndex:7},{value:"复合标记",paraId:24,tocIndex:7},{value:"的机制去扩展 G2，所以你基本上可以快速绘制任意的可视化。在",paraId:24,tocIndex:7},{value:"案例页面",paraId:25,tocIndex:7},{value:"你可以获得更多灵感，也可以通过文档全面了解 G2 的能力。",paraId:24,tocIndex:7}]},23314:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(86181);const t=[{value:"目前有两种使用 G2 的方式：",paraId:0},{value:"包管理器",paraId:1},{value:"CDN",paraId:1},{value:"如果使用了 Webpack，Rollup 等基于 Node 的打包工具，可以通过 NPM 或者 Yarn 等包管理器去安装 G2 。",paraId:2,tocIndex:0},{value:"# 通过 NPM 安装\nnpm install @antv/g2\n",paraId:3,tocIndex:0},{value:"# 通过 Yarn 安装\nyarn add @antv/g2\n",paraId:4,tocIndex:0},{value:"安装成功之后给 G2 提供一个容器:",paraId:5,tocIndex:0},{value:'<div id="container"></div>\n',paraId:6,tocIndex:0},{value:"然后输入如下代码：",paraId:7,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\n// 准备数据\nconst data = [\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\n// 初始化图表实例\nconst chart = new Chart({\n  container: 'container',\n});\n\n// 声明可视化\nchart\n  .interval() // 创建一个 Interval 标记\n  .data(data) // 绑定数据\n  .encode('x', 'genre') // 编码 x 通道\n  .encode('y', 'sold'); // 编码 y 通道\n\n// 渲染可视化\nchart.render();\n",paraId:8,tocIndex:0},{value:"G2 也提供了 UMD 版本，可以直接通过 CDN 加载，然后直接使用。这个时候的 ",paraId:9,tocIndex:1},{value:"Chart",paraId:9,tocIndex:1},{value:" 对象可以通过命名空间 ",paraId:9,tocIndex:1},{value:"G2",paraId:9,tocIndex:1},{value:" 去访问。",paraId:9,tocIndex:1},{value:"<script src=\"https://unpkg.com/@antv/g2/dist/g2.min.js\"><\/script>\n<script>\n  // 准备数据\n  const data = [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ];\n\n  // 初始化图表实例\n  const chart = new G2.Chart({\n    container: 'container',\n  });\n\n  // 声明可视化\n  chart\n    .interval() // 创建一个 Interval 标记\n    .data(data) // 绑定数据\n    .encode('x', 'genre') // 编码 x 通道\n    .encode('y', 'sold'); // 编码 y 通道\n\n  // 渲染可视化\n  chart.render();\n<\/script>\n",paraId:10,tocIndex:1},{value:"不管使用哪种方式，如果你绘制出了如下的条形图，那么表示一切顺利，探索可视化和 G2 的旅程正式开始。",paraId:11,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\n// 初始化图表实例\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data([\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold');\n\nchart.render();\n",paraId:12,tocIndex:2}]},48840:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(52771);const t=[{value:"G2 栈团队还会继续维护 v4 版本，针对 Bug 发布 Patch 版本修复，但是此后不再接收新的 Feature Request，截止日期为 2023 年年底。原 v4 官网迁移至 ",paraId:0},{value:"https://g2-v4.antv.vision/",paraId:0},{value:" 。",paraId:0},{value:"本文旨在帮助那些已经熟悉 G24.0 的用户了解 4.0 和 5.0 版本之间的区别。读者可以选择直接阅读新的文档，而不需要从头到尾阅读本文。本文将突出显示两个版本之间各个概念对应 API 的变化。",paraId:1},{value:"4.0 的 padding 和 appendPadding 是一个数组，5.0 将其拆开了并且修改 appendPadding 为 margin。",paraId:2,tocIndex:0},{value:"// 4.0\nconst chart = new Chart({\n  width: 600,\n  height: 400,\n  padding: [10, 20, 30, 40],\n  appendPadding: [10, 20, 30, 40],\n});\n\n// 5.0\nconst chart = new Chart({\n  width: 600,\n  height: 400,\n  paddingLeft: 10,\n  paddingTop: 20,\n  paddingRight: 30,\n  paddingBottom: 40,\n  marginLeft: 10,\n  marginTop: 20,\n  marginRight: 30,\n  marginBottom: 40,\n});\n",paraId:3,tocIndex:0},{value:"4.0 中每个视图和一份数据绑定，该视图中的标记（前几何元素）共用一份数据。5.0 中每个视图中的所有标记可以有独立的数据，默认会同步比例尺。",paraId:4,tocIndex:1},{value:"// 4.0\nchart.data(data);\nchart.line();\nchart.point();\n\n// 5.0\nchart.line().data(data1);\nchart.line().data(data2);\n",paraId:5,tocIndex:1},{value:"5.0 在编码方式上和 4.0 有以下的一系列不同：",paraId:6,tocIndex:2},{value:"4.0 通过 geometry.position、geometry.color 等顶层 API 去编码通道。5.0 通过 mark.encode 去编码，并且不支持 * 语法。",paraId:7,tocIndex:3},{value:"// 4.0\nchart.interval().position('name*value').color('genre');\n\n// 5.0\nchart\n  .interval()\n  .encode('x', 'name')\n  .encode('y', 'value')\n  .encode('color', 'genre');\n",paraId:8,tocIndex:3},{value:"4.0 中编码的回调，会从原始数据里面提供对应的字段。5.0 中编码的回调只提供原始数据。",paraId:9,tocIndex:4},{value:"// 4.0\nchart.interval().color('name*value', (name, value) => {});\n\n// 5.0\nchart\n  .interval()\n  // 需要自己解构\n  .encode('color', ({ name, value }) => {});\n",paraId:10,tocIndex:4},{value:"4.0 回调返回视觉数据。5.0 回调默认返回抽象数据。",paraId:11,tocIndex:5},{value:"// 4.0\nchart.interval().color('name', (name) => (name > 10 ? 'red' : 'yellow'));\n\n// 5.0\nchart\n  .interval()\n  .encode('color', (d) => (d.name > 10 ? 'high' : 'low')) // 抽象数据\n  .scale('color', { range: ['red', 'yellow'] }); // 指定值域\n\n// 5.0\nchart\n  .interval()\n  .encode('color', (d) => (d.name > 10 ? 'red' : 'yellow'))\n  .scale('color', { type: 'identity' });\n",paraId:12,tocIndex:5},{value:"4.0 通过 geometry.color 的第二个参数声明颜色值域，5.0 通过 scale.color 指定。",paraId:13,tocIndex:6},{value:"// 4.0\nchart.interval().color('name', ['red', 'blue']);\nchart.interval().color('name', '#fff-#000');\n\n// 5.0\nchart\n  .interval()\n  .encode('color', 'name') // 离散\n  .scale('color', { range: ['red', 'blue'] });\n\nchart\n  .interval()\n  .encode('color', 'name') //连续\n  .scale('color', { range: '#fff-#000' });\n",paraId:14,tocIndex:6},{value:"4.0 会尝试解析时间字符串，5.0 不会去尝试解析，需要显示地转换成 Date 对象。",paraId:15,tocIndex:7},{value:"const data = [\n  { year: '2020-10-01', value: 1 },\n  { year: '2022-10-01', value: 2 },\n  { year: '2023-10-01', value: 3 },\n];\n\n// 4.0\nchart.line().position('year*value');\n\n// 5.0\nchart\n  .line()\n  .encode('x', (d) => new Date(d.year))\n  .encode('y', 'value');\n",paraId:16,tocIndex:7},{value:"4.0 中样式的回调作用于整个对象上。5.0 中作用于每一个属性。",paraId:17,tocIndex:8},{value:"// 4.0\nchart\n  .interval()\n  .style('a*b', (a, b) =>\n    a + b > 10\n      ? { stroke: 'red', strokeWidth: 10 }\n      : { stroke: 'black', strokeWidth: 5 },\n  );\n\n// 5.0\nchart\n  .interval()\n  .style('stroke', ({ a, b }) => (a + b > 10 ? 'red' : 'black'))\n  .style('strokeWidth', ({ a, b }) => (a + b > 10 ? 10 : 5));\n",paraId:18,tocIndex:8},{value:"5.0 在比例尺的使用下和 4.0 有以下的一系列不同：",paraId:19,tocIndex:9},{value:"4.0 的比例尺是和字段绑定的，5.0 的比例尺是和通道绑定。",paraId:20,tocIndex:10},{value:"const data = [\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\n// 4.0\nchart.data(data);\nchart.scale('genre', {});\nchart.interval().color('genre');\n\n// 5.0\nchart\n  .interval()\n  .data(data)\n  .encode('color', 'genre')\n  // 设置 color 通道比例尺\n  .scale('color', {});\n",paraId:21,tocIndex:10},{value:"比例尺的部分属性变化如下：",paraId:22,tocIndex:11},{value:"定义域：values -> domain",paraId:23,tocIndex:11},{value:"定义域最小值：min -> domainMin",paraId:23,tocIndex:11},{value:"定义域最大值：max -> domainMax",paraId:23,tocIndex:11},{value:"// 4.0\nchart.scale('genre', { values: ['a', 'b', 'c'] });\n\n// 5.0\nchart.scale('color', { domain: ['a', 'b', 'c'] });\n",paraId:24,tocIndex:11},{value:"4.0 的离散比例尺有 cat 和 timeCat，在 5.0 中 cat 变成了 band，point 和 ordinal 比例尺，timeCat 被移除了。",paraId:25,tocIndex:12},{value:"// 4.0\nchart.scale('genre', { type: 'cat' });\n\n// 5.0\nchart\n  .interval()\n  .encode('x', 'name')\n  .encode('color', 'name')\n  // interval 的 x 通道默认是 band 比例尺\n  .scale('x', { type: 'band', range: [0.1, 0.9] })\n  .scale('color', { type: 'ordinal', range: ['red', 'blue'] });\n\nchart\n  .point()\n  .encode('x', 'name')\n  // point 比例尺\n  .scale('point', {});\n",paraId:26,tocIndex:12},{value:"4.0 坐标系属性在 cfg 里面，通过 actions 去指定坐标系变换；5.0 坐标系属性平铺，同时通过 transform 去声明坐标系变换。",paraId:27,tocIndex:13},{value:"// 4.0\nchart.coordinate({\n  type: 'polar',\n  cfg: {\n    radius: 0.85,\n  },\n  actions: [['transpose']],\n});\n\n// 5.0\nchart.coordinate({\n  type: 'polar',\n  outerRadius: 0.85,\n  transform: [{ type: 'transpose' }],\n});\n",paraId:28,tocIndex:13},{value:"4.0 每个元素只能声明一个标签，5.0 每个元素可以声明多个标签。",paraId:29,tocIndex:14},{value:"// 4.0\nchart.interval().label('field', (d) =>\n  d > 10\n    ? 'red'\n    : 'blue'\n    ? {\n        style: { color: 'red', stroke: 'red' },\n      }\n    : {\n        style: { color: 'black', stroke: 'black' },\n      },\n);\n\n// 5.0\nchart\n  .interval()\n  .label({\n    text: 'field', // 指定内容\n    style: {\n      color: d > 10 ? 'red' : 'black', // 设置属性\n      stroke: d > 10 ? 'red' : 'black',\n    },\n  })\n  .label({ text: (d) => d.value });\n",paraId:30,tocIndex:14},{value:"4.0 可以通过 tooltip.containerTpl 自定义提示信息，5.0 通过 render 函数自定义提示信息。",paraId:31,tocIndex:15},{value:"// 4.0\nchart.tooltip({ containerTpl: `<div></div>` });\n\n// 5.0\nchart.interaction('tooltip', {\n  render: () => `<div></div>`,\n});\n",paraId:32,tocIndex:15},{value:"4.0 中有 appear 动画，5.0 将其合并到了 enter 动画里面去。",paraId:33,tocIndex:16},{value:"// 4.0\nchart.interval().animate({\n  appear: {\n    animation: 'fade-in',\n    easing: 'easeQuadIn',\n    delay: 100,\n    duration: 600,\n  },\n});\n\n// 5.0\nchart.interval().animate('enter', {\n  type: 'fadeIn',\n  easing: 'easeQuadIn',\n  delay: 100,\n  duration: 600,\n});\n",paraId:34,tocIndex:16},{value:"4.0 通过 ",paraId:35,tocIndex:17},{value:"chart.removeInteraction(name)",paraId:35,tocIndex:17},{value:" 移除交互，5.0 通过 ",paraId:35,tocIndex:17},{value:"chart.interaction(name, false)",paraId:35,tocIndex:17},{value:" 移除交互。",paraId:35,tocIndex:17},{value:"// 4.0\nchart.removeInteraction('tooltip');\n\n// 5.0\nchart.interaction('tooltip', false);\n",paraId:36,tocIndex:17},{value:"在 4.0 中图中的元素分为几何元素（Geometry）和标注（Annotation），在 5.0 中两者都是标注（Mark）。",paraId:37,tocIndex:18},{value:"在 4.0 中标注通过 annotation 这个名称空间去声明，5.0 声明方式和标记保持一致。",paraId:38,tocIndex:19},{value:"// 4.0\nchart.annotation().line({});\n\n// 5.0\nchart.lineX();\n",paraId:39,tocIndex:19},{value:"在 4.0 通过 start 和 end 去标注特定值，5.0 通过 transform 去标注特定值。",paraId:40,tocIndex:20},{value:"// 4.0\nchart.annotation().line({\n  start: ['min', 'mean'],\n  end: ['max', 'mean'],\n});\n\n// 5.0\nchart\n  .lineX()\n  .encode('y', 'value')\n  // 选择 y 通道最小的值\n  .transform({ type: 'selectY', y: 'mean' });\n",paraId:41,tocIndex:20},{value:"4.0 分面通过 facet 这个名称空间去声明，5.0 和标记保持一致。",paraId:42,tocIndex:21},{value:"// 4.0\nchart.facet('rect', {\n  fields: ['cut', 'clarity'],\n  eachView(view) {\n    view\n      .point()\n      .position('carat*price')\n      .color('cut')\n      .shape('circle')\n      .style({ fillOpacity: 0.3, stroke: null })\n      .size(3);\n  },\n});\n\n// 5.0\nchart\n  .facetRect()\n  .encode('x', 'cut')\n  .encode('y', 'clarity')\n  .point()\n  .encode('x', 'carat')\n  .encode('y', 'price')\n  .encode('color', 'cut')\n  .encode('shape', 'point')\n  .encode('size', 3)\n  .style('fillOpacity', 0.3)\n  .style('stroke', null);\n",paraId:43,tocIndex:21}]},12668:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(13709);const t=[{value:"G2 名字和设计理念都来自于图形语法《",paraId:0},{value:"The Grammar of Graphics",paraId:0},{value:"》。该理论的核心在于：拒绝图表分类，用一些基本标记（Mark）和一系列可视化组件（比例尺，坐标系等）去描述一个可视化。",paraId:0},{value:"正因如此，相较于 D3 这类底层的可视化工具，G2 的使用和学习成本更低，有助于提升研发效率。与图表模板库相比，G2 能够制作出的图表种类更加丰富，同时也改变了 G2 使用者对图表的思考方式：图表不再是一个不可分割的整体，而是可以由具有不同用途的标记组合而成。这使得使用者无需花费过多时间编写代码或纠结于图表能否实现，而是能够将更多时间用于“在数据世界中进行视觉思考”。",paraId:1},{value:"当然，更轻松地绘制出更多图表只是我们的基本任务，我们更希望在这个过程中向大家传递正确的可视化思维。语言是传递思维最直接的方式，因此我们在设计语法或 API 时非常注重简洁性和专业性，为此我们参考了大量学术界的研究成果以及工业界的最佳实践。在原本图形语法的基础上，我们进行了包括但不限于以下方面的增强：",paraId:2},{value:"简化数据探索的语法",paraId:3},{value:"增加动画语法",paraId:3},{value:"增加单元可视化的语法",paraId:3},{value:"增加交互语法（还在设计中）",paraId:3},{value:"...",paraId:3},{value:"简单来说：",paraId:4},{value:"使用 G2，你不仅能够快速获得更多专业的可视化效果，还能培养和提升你的可视化思维能力",paraId:4},{value:"。",paraId:4},{value:"你可以一句话绘制一张图表，除了绘制图形本身之外，还会添加坐标轴、图例，甚至交互提示！",paraId:5,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// 一句话声明可视化\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  })\n  .encode('x', 'weight')\n  .encode('y', 'height')\n  .encode('color', 'gender');\n\nchart.render();\n",paraId:6,tocIndex:0},{value:"G2 的简洁性源于其内置的",paraId:7,tocIndex:0},{value:"默认值",paraId:7,tocIndex:0},{value:"：你只需提供标记类型、数据和编码方式，G2 会自动帮你推断其他参数。值得一提的是，G2 的一大优势是这些默认设置都可以按需调整。我们希望 G2 能在默认情况下就展现美观并传达洞察力，同时也允许你根据特定场景和专业知识优化图表展示。",paraId:7,tocIndex:0},{value:"让我们看看下面这个例子，优化坐标轴刻度显示是否能让图表更易读？更换为下面的颜色是否更符合你的喜好？",paraId:8,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  })\n  .encode('x', 'weight')\n  .encode('y', 'height')\n  .encode('color', 'gender')\n  .scale('x', { nice: true }) // 优化坐标 tick 展示\n  .scale('y', { nice: true }) // 优化坐标 tick 展示\n  .scale('color', { range: ['steelblue', 'orange'] }); // 改变颜色\n\nchart.render();\n",paraId:9,tocIndex:0},{value:"你也许会觉得散点图太简单了，那我们来看看 G2 是如何通过一句话绘制一个桑基图的！",paraId:10,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 900,\n  height: 600,\n});\n\n// Sankey 标记\nchart\n  .sankey()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/energy.json',\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => ({ links: data }),\n      },\n    ],\n  })\n  .layout({\n    nodeAlign: 'center',\n    nodePadding: 0.03,\n  })\n  .style('labelSpacing', 3)\n  .style('labelFontWeight', 'bold')\n  .style('nodeStrokeWidth', 1.2)\n  .style('linkFillOpacity', 0.4);\n\nchart.render();\n",paraId:11,tocIndex:0},{value:"G2 可以绘制出丰富的图表类型，除了支持基础的折线图、柱状图、饼图等图表之外，还支持向量场、平行坐标系等稍微复杂一点的图表，比如下面的连接图：",paraId:12,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .link()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antfincdn/SM13%24lHuYH/metros.json',\n  })\n  .encode('x', ['POP_1980', 'POP_2015'])\n  .encode('y', ['R90_10_1980', 'R90_10_2015'])\n  .encode('color', (d) => d.R90_10_2015 - d.R90_10_1980)\n  .scale('x', { type: 'log' })\n  .style('arrow', true)\n  .style('arrowSize', 6)\n  .axis('x', { labelFormatter: '~s' })\n  .tooltip({ title: { channel: 'color', valueFormatter: '.1f' } })\n  .legend(false);\n\nchart.render();\n",paraId:13,tocIndex:1},{value:"在 G2 中最为美妙的一点在于：你能够通过",paraId:14,tocIndex:1},{value:"组合",paraId:14,tocIndex:1},{value:"不同的图表（更为准确地说是标记）来获取",paraId:14,tocIndex:1},{value:"全新的图表",paraId:14,tocIndex:1},{value:"！例如，我们在一个图表中添加散点图的 Point 标记以及连接图的 Link 标记，便可以得到一个带有标注的点线连接图。",paraId:14,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 180,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n  transform: [\n    {\n      type: 'map',\n      callback: (d) => ({ ...d, body_mass_g: +d.body_mass_g }),\n    },\n  ],\n});\n\n// Point 标记\nchart\n  .point()\n  .encode('x', 'body_mass_g')\n  .encode('y', 'species')\n  .style('stroke', '#000')\n  .tooltip({ channel: 'x' });\n\n// Link 标记\nchart\n  .link()\n  .encode('x', 'body_mass_g')\n  .encode('y', 'species')\n  .transform({ type: 'groupY', x: 'min', x1: 'max' })\n  .style('stroke', '#000')\n  .tooltip(false);\n\n// Point 标记 绘制中位线\nchart\n  .point()\n  .encode('y', 'species')\n  .encode('x', 'body_mass_g')\n  .encode('shape', 'line')\n  .encode('size', 12)\n  .transform({ type: 'groupY', x: 'median' })\n  .style('stroke', 'red')\n  .tooltip({ channel: 'x' });\n\nchart.render();\n",paraId:15,tocIndex:1},{value:"在数据可视化的流程里，数据处理往往会占用许多时间，同时也需要一定的学习成本。为了简化这个过程、缩短数据预处理的时间，并使通用的数据分析能力规范化，G2 提供了一系列的",paraId:16,tocIndex:2},{value:"转换（Transform）",paraId:16,tocIndex:2},{value:"，用于聚合和生成新的数据。",paraId:16,tocIndex:2},{value:"接下来看看在获取到一份原始的运动员体重数据后，应该如何通过数据转换来将运动员的体重分布进行可视化：",paraId:17,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .rect()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n  })\n  .encode('x', 'weight')\n  .transform({ type: 'binX', y: 'count' })\n  .style('inset', 0.5);\n\nchart.render();\n",paraId:18,tocIndex:2},{value:"希望对图表根据性别进行拆分？",paraId:19,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .rect()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n  })\n  .encode('x', 'weight')\n  .encode('color', 'sex') // 增加颜色编码\n  .transform({ type: 'binX', y: 'count' })\n  .transform({ type: 'stackY', orderBy: 'series' })\n  .style('inset', 0.5);\n\nchart.render();\n",paraId:20,tocIndex:2},{value:"希望通过分面来分别看每个性别的分布？",paraId:21,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 50,\n  paddingBottom: 50,\n});\n\nconst facet = chart.facetRect().encode('y', 'sex').data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n});\n\nfacet\n  .rect()\n  .encode('x', 'weight')\n  .transform({ type: 'binX', y: 'count' })\n  .style('inset', 0.5);\n\nchart.render();\n",paraId:22,tocIndex:2},{value:"G2 可以绘制数据驱动的动画，从而达到可视化叙事的效果。首先是所有的动画属性（动画类型，延迟和持续时间）可以和数据绑定，比如下面的这个数据驱动的甘特图动画，可以点击左边的运行按钮查看效果。",paraId:23,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .coordinate({ transform: [{ type: 'transpose' }] })\n  .data([\n    { name: 'event planning', startTime: 1, endTime: 4 },\n    { name: 'layout logistics', startTime: 3, endTime: 13 },\n    { name: 'select vendors', startTime: 5, endTime: 8 },\n    { name: 'hire venue', startTime: 9, endTime: 13 },\n    { name: 'hire caterer', startTime: 10, endTime: 14 },\n    { name: 'hire event decorators', startTime: 12, endTime: 17 },\n    { name: 'rehearsal', startTime: 14, endTime: 16 },\n    { name: 'event celebration', startTime: 17, endTime: 18 },\n  ])\n  .encode('x', 'name')\n  .encode('y', ['endTime', 'startTime'])\n  .encode('color', 'name')\n  .encode('enterDuration', (d) => d.endTime - d.startTime) // 动画持续时间和 durationTime 绑定\n  .encode('enterDelay', 'startTime') // 出现时间和 startTime 绑定\n  .scale('enterDuration', { zero: true, range: [0, 3000] }); // 定义enterDuration通道的比例尺，比例尺决定了这些通道该如何被可视化\n\nchart.render();\n",paraId:24,tocIndex:3},{value:"同时，可以对动画通道进行转换，从而控制数据元素的出现顺序和时间，比如下面的玫瑰图每一片“花瓣”按照颜色和先后顺序依次出现，这都多亏了 G2 提供的内置转换，具体用法可以查看",paraId:25,tocIndex:3},{value:"stackEnter",paraId:26,tocIndex:3},{value:"。",paraId:25,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .coordinate({ type: 'polar' })\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/deaths.json',\n  })\n  .encode('x', 'Month')\n  .encode('y', 'Death')\n  .encode('color', 'Type')\n  .transform({ type: 'stackY' })\n  // 依次出现\n  .transform({ type: 'stackEnter', groupBy: ['color', 'x'], duration: 3000 }) // 试试改变groupBy和duration会发生什么\n  .scale('y', { type: 'sqrt' })\n  .animate('enter', { type: 'waveIn' })\n  .axis('y', false);\n\nchart.render();\n",paraId:27,tocIndex:3},{value:"除了可以在某个视图内部实现动画效果以外，还可以在不同视图间做连续的形变动画：图形通过数据关联到一起，比如下面散点图和聚合条形图互相转换的过渡动画：",paraId:28,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/fbe4a8c1-ce04-4ba3-912a-0b26d6965333.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const chart = new Chart({\n      container: 'container',\n      paddingTop: 60,\n      paddingLeft: 100,\n    });\n\n    // Keyframe 容器，对里面的视图应用过渡动画\n    const keyframe = chart\n      .timingKeyframe()\n      .attr('direction', 'alternate')\n      .attr('iterationCount', 4);\n\n    // 第一个视图：散点图\n    keyframe\n      .interval()\n      .attr('padding', 'auto')\n      .data(data)\n      .encode('x', 'gender')\n      .encode('color', 'gender')\n      .encode('key', 'gender')\n      .transform({ type: 'groupX', y: 'count' });\n\n    // 第二个视图：聚合条形图\n    keyframe\n      .point()\n      .attr('padding', 'auto')\n      .data(data)\n      .encode('x', 'weight')\n      .encode('y', 'height')\n      .encode('color', 'gender')\n      .encode('groupKey', 'gender')\n      .encode('shape', 'point');\n\n    chart.render();\n  });\n",paraId:29,tocIndex:3},{value:"G2 除了提供丰富的内置交互以外，还通过 ",paraId:30,tocIndex:4},{value:"chart.on",paraId:30,tocIndex:4},{value:" 和 ",paraId:30,tocIndex:4},{value:"chart.emit",paraId:30,tocIndex:4},{value:' 提供了一种联动不同视图的交互的能力，比如下面展示的 "Focus and Context" 的能力：',paraId:30,tocIndex:4},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\nconst focusContainer = document.createElement('div');\nconst contextContainer = document.createElement('div');\ncontainer.append(focusContainer);\ncontainer.append(contextContainer);\n\n// 渲染 focus 视图\n\nconst focus = new G2.Chart({\n  container: focusContainer,\n  height: 360,\n  paddingLeft: 50,\n});\n\nfocus\n  .area()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  })\n  .encode('x', 'date')\n  .encode('y', 'close')\n  .animate(false)\n  .axis('x', { grid: false, title: false, tickCount: 5 })\n  .axis('y', { grid: false, tickCount: 5 })\n  .interaction('tooltip', false)\n  .interaction('brushXFilter', true);\n\nfocus.render();\n\n// 渲染 context 视图\n\nconst context = new G2.Chart({\n  container: contextContainer,\n  paddingLeft: 50,\n  paddingTop: 0,\n  paddingBottom: 0,\n  height: 60,\n});\n\ncontext\n  .area()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  })\n  .encode('x', 'date')\n  .encode('y', 'close')\n  .animate(false)\n  .axis(false)\n  .interaction('tooltip', false)\n  .interaction('brushXHighlight', { series: true });\n\ncontext.render();\n\n// 添加事件监听器在不同图表之间交流\nfocus.on('brush:filter', (e) => {\n  const { nativeEvent } = e;\n  if (!nativeEvent) return;\n  const { selection } = e.data;\n  const { x: scaleX } = focus.getScale();\n  const [[x1, x2]] = selection;\n  const domainX = scaleX.getOptions().domain;\n  if (x1 === domainX[0] && x2 === domainX[1]) {\n    context.emit('brush:remove', {});\n  } else {\n    context.emit('brush:highlight', { data: { selection } });\n  }\n});\n\ncontext.on('brush:highlight', (e) => {\n  const { nativeEvent, data } = e;\n  if (!nativeEvent) return;\n  const { selection } = data;\n  focus.emit('brush:filter', { data: { selection } });\n});\n\ncontext.on('brush:remove', (e) => {\n  const { nativeEvent } = e;\n  if (!nativeEvent) return;\n  const { x: scaleX, y: scaleY } = context.getScale();\n  const selection = [scaleX.getOptions().domain, scaleY.getOptions().domain];\n  focus.emit('brush:filter', { data: { selection } });\n});\n",paraId:31,tocIndex:4},{value:"G2 提供了两种风格的 API：",paraId:32,tocIndex:5},{value:"函数式 API",paraId:32,tocIndex:5},{value:" 和 ",paraId:32,tocIndex:5},{value:"选项式 API",paraId:32,tocIndex:5},{value:" 。前者是通过一系列函数链式调用声明图表，后者是通过一个 JavaScript 对象去声明图表。比如在",paraId:32,tocIndex:5},{value:"简洁语法",paraId:33,tocIndex:5},{value:"中的散点图如果使用选项式 API 可以如下声明：",paraId:32,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// 通过选项式 API 声明图表\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  },\n  encode: {\n    x: 'weight',\n    y: 'height',\n    color: 'gender',\n  },\n});\n\nchart.render();\n",paraId:34,tocIndex:5},{value:"可以发现两者绘制出的图表一摸一样！事实上也确实如此：两种 API 的可视化表达能力是相同的。换句话说，函数式 API 能绘制的图表，选项式 API 也能绘制，反之亦然。从实现上来讲，函数式 API 是构建在选项式 API 之上的，会转换成对应的 JavaScript 然后渲染。",paraId:35,tocIndex:5},{value:"关于两者的取舍更是一个风格的问题：如果你熟悉 D3，或者喜欢函数式编程，或者是 G2 的老用户，可以选择函数式 API；如果你才开始使用 G2 和接触可视化，那么推荐选项式 API。当然，如果你是基于 G2 封装自己的图表库，那么推荐使用选项式 API。不过有一种最佳实践是：初始化图表的时候使用选项形式 API，在更新图表的时候使用函数式 API。",paraId:36,tocIndex:5},{value:"更多内容请阅读 ",paraId:37,tocIndex:5},{value:"Spec 和 API",paraId:38,tocIndex:5},{value:"。",paraId:37,tocIndex:5},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n  height: 150,\n  padding: 10,\n});\nconst container = chart.getContainer();\n\nconst mock = () => Array.from({ length: 20 }, () => Math.random());\n\n// 初始化图表\n// 使用选项式 API\nchart.options({\n  type: 'interval',\n  data: mock(),\n  encode: { x: (_, i) => i, y: (d) => d, key: (_, i) => i },\n  axis: false,\n  tooltip: {\n    items: [{ channel: 'y', valueFormatter: '.0%' }],\n  },\n});\n\nchart.render();\n\n// 更新图表\n// 使用函数式 API\nconst button = document.createElement('button');\nbutton.style.display = 'block';\nbutton.textContent = '更新数据';\nbutton.onclick = () => {\n  const interval = chart.getNodeByType('interval'); // 获得 interval\n  interval.data(mock()); // 更新 interval 的数据\n  chart.render(); // 渲染图表\n};\n\ncontainer.insertBefore(button, container.childNodes[0]);\n",paraId:39,tocIndex:5},{value:"G2 提供了一种简单的复合 Mark 的机制，用于增强图表或者自定义图表。比如复合 Point、Line 和 Area。",paraId:40,tocIndex:6},{value:"更多内容请阅读 ",paraId:41,tocIndex:6},{value:"复合",paraId:42,tocIndex:6},{value:"。",paraId:41,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\n// 定义复合 mark\nfunction PointLineArea({ data, encode = {}, style = {} } = {}) {\n  const { fillOpacity = 0.1 } = style;\n  return [\n    {\n      type: 'area',\n      data,\n      encode,\n      style: { fillOpacity },\n    },\n    { type: 'line', data, encode },\n    { type: 'point', data, encode },\n  ];\n}\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// API 的方式使用复合 Mark\nchart\n  .mark(PointLineArea)\n  .data([\n    { year: '1991', value: 15468 },\n    { year: '1992', value: 16100 },\n    { year: '1993', value: 15900 },\n    { year: '1994', value: 17409 },\n    { year: '1995', value: 17000 },\n    { year: '1996', value: 31056 },\n    { year: '1997', value: 31982 },\n    { year: '1998', value: 32040 },\n    { year: '1999', value: 33233 },\n  ])\n  .encode('x', 'year')\n  .encode('y', 'value');\n\n// Spec 方式使用复合 Mark\nchart.options({\n  type: PointLineArea,\n  data: [\n    { year: '1991', value: 15468 },\n    { year: '1992', value: 16100 },\n    { year: '1993', value: 15900 },\n    { year: '1994', value: 17409 },\n    { year: '1995', value: 17000 },\n    { year: '1996', value: 31056 },\n    { year: '1997', value: 31982 },\n    { year: '1998', value: 32040 },\n    { year: '1999', value: 33233 },\n  ],\n  encode: { x: 'year', y: 'value' },\n});\n\nchart.render();\n",paraId:43,tocIndex:6},{value:"复合 Mark 使得基于 G2 去增加图表的能力更加容易和维护起来更简单，同时 G2 内部的一些 Mark 也是基于这个方式实现的。",paraId:44,tocIndex:6},{value:"G2 是的架构是由 ",paraId:45,tocIndex:7},{value:"运行时（Runtime）",paraId:45,tocIndex:7},{value:" 和一系列 ",paraId:45,tocIndex:7},{value:"可视化组件（Component）",paraId:45,tocIndex:7},{value:" 构成的。运行时主要负责完成数据映射、比例尺的创建和推断等等，以及串联可视化组件。不同的可视化组件由不同的功能，比如比例尺（Scale）用来映射数据、形状（Shape）用来绘制映射后的图形。下面展示如何自定义一个三角形的条形图：",paraId:45,tocIndex:7},{value:"import { register, Chart } from '@antv/g2';\n\n// 自定义一个三角形的 Shape\nregister('shape.interval.triangle', (style, context) => {\n  const { document } = context;\n  return (P, value, defaults) => {\n    const { color: defaultColor } = defaults;\n    const [p0, p1, p2, p3] = P;\n    const pm = [(p0[0] + p1[0]) / 2, p0[1]];\n    const { color = defaultColor } = value;\n    return document.createElement('polygon', {\n      style: {\n        ...style,\n        fill: color,\n        points: [pm, p2, p3],\n      },\n    });\n  };\n});\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data([\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  .encode('color', 'genre')\n  .encode('shape', 'triangle'); // 使用这个形状\n\nchart.render();\n",paraId:46,tocIndex:7},{value:"G2 Runtime 可用的可视化组件通过 Library 组织的，Library 本质是一个如下 JavaScript 对象：",paraId:47,tocIndex:8},{value:"const library = {\n  'mark.interval': Interval,\n  'scale.linear': Linear,\n  //...\n};\n",paraId:48,tocIndex:8},{value:"所以可以通过对 library 进行修改以及打包工具 Tree Shaking 的能力来实现按需打包，从而减少包大小。比如你的项目里只需要绘制一些简单的图表，不需要绘制地理（GeoPath）、图（ForceGraph）或者高级统计图表（Sankey），那么就可以如下自定义自己的 Chart 对象：",paraId:49,tocIndex:8},{value:"import { Runtime, corelib, extend } from '@antv/g2';\n\n// 基于 corelib 对 Runtime 进行扩展\n// 1. 增加类型（如果使用的 TypeScript）\n// 2. 增加 Mark\nconst Chart = extend(Runtime, { ...corelib() });\n\nconst chart = new Chart({ container: 'container' });\n\nchart\n  .interval()\n  .data([\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  .encode('color', 'genre');\n\nchart.render();\n",paraId:50,tocIndex:8},{value:"如果希望绘制地理图表，可以如下：",paraId:51,tocIndex:8},{value:"import { Runtime, corelib, geolib, extend } from '@antv/g2';\n\n// 同时使用两个 lib 的能力\nconst Chart = extend(Runtime, { ...corelib, ...geolib });\n\nconst chart = new Chart({ container: 'container' });\n\n// ...\n",paraId:52,tocIndex:8}]}}]);