"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9706],{97815:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(27371),{"docs-charts-arcdiagram-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-arcdiagram-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},43893:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(5464),{"docs-charts-area-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-area-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},90324:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(31120),{"docs-charts-bar-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-bar-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},44638:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(50728),{"docs-charts-bi-directional-bar-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-bi-directional-bar-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},10448:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(11664),{"docs-charts-boxplot-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-boxplot-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},61079:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(35420),{"docs-charts-bubble-chart-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-bubble-chart-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},61779:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(95807),{"docs-charts-bubble-map-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-bubble-map-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},39876:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(91293),{"docs-charts-bullet-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-bullet-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},49261:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(24843),{"docs-charts-chord-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-chord-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},69593:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(49980),{"docs-charts-choropleth-map-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-choropleth-map-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},72232:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(74636),{"docs-charts-color-map-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-color-map-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},34283:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(22516),{"docs-charts-contourline-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-contourline-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},55309:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(9522),{"docs-charts-distributioncurve-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-distributioncurve-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},23021:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(82191),{"docs-charts-donut-chart-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-donut-chart-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},75224:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(8781),{"docs-charts-dot-map-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-dot-map-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},63368:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(21769),{"docs-charts-funnel-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-funnel-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},4839:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(80712),{"docs-charts-gantt-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-gantt-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},41199:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(85857),{"docs-charts-gauge-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-gauge-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},49543:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(61571),{"docs-charts-heatmap-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-heatmap-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},78065:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(77045),{"docs-charts-histogram-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-histogram-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},32295:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(33163),{"docs-charts-k-chart-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-k-chart-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},818:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(51184),{"docs-charts-kagi-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-kagi-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},15851:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(21227),{"docs-charts-line-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-line-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},58574:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(12345),{"docs-charts-mosaic-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-mosaic-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},59574:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(24317),{"docs-charts-multi-set-bar-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-multi-set-bar-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},37470:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(99187),{"docs-charts-overview-demo-components-list":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,47962))}))),asset:null,context:void 0,renderOpts:void 0}})},10307:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(26732),{"docs-charts-pack-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-pack-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},94970:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(21110),{"docs-charts-parallel-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-parallel-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},8634:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(55042),{"docs-charts-pie-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-pie-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},69477:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(6423),{"docs-charts-radar-chart-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-radar-chart-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},9626:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(69712),{"docs-charts-radial-bar-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-radial-bar-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},99518:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(64820),{"docs-charts-regressioncurve-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-regressioncurve-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},76305:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(39414),{"docs-charts-rose-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-rose-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},77882:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(76565),{"docs-charts-sankey-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-sankey-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},30455:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(32866),{"docs-charts-scatter-plot-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-scatter-plot-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},55247:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(62914),{"docs-charts-spiral-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-spiral-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},58569:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(31266),{"docs-charts-stacked-area-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-stacked-area-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},90135:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(72547),{"docs-charts-stacked-bar-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-stacked-bar-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},46511:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(147),{"docs-charts-stem-leaf-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-stem-leaf-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},46651:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(38099),{"docs-charts-sunburst-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-sunburst-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},71662:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(46856),{"docs-charts-treemap-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-treemap-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},91148:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(70487),{"docs-charts-venn-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-venn-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},95313:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(8958),{"docs-charts-violin-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-violin-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},73409:function(e,a,n){n.r(a),n.d(a,{demos:function(){return r}});var t=n(67294),r=(n(99284),{"docs-charts-wordcloud-demo-list-card":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,20926))}))),asset:null,context:void 0,renderOpts:void 0},"docs-charts-wordcloud-demo-list-category":{component:t.memo(t.lazy((function(){return Promise.all([n.e(7987),n.e(789),n.e(2897),n.e(4441),n.e(2433)]).then(n.bind(n,9569))}))),asset:null,context:void 0,renderOpts:void 0}})},93267:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(46612);var t={}},28796:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(17280);var t={}},57917:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(77494);var t={}},40924:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(68378);var t={}},12379:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(43068);var t={}},4303:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(89368);var t={}},84405:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(21273);var t={}},3173:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(47128);var t={}},21344:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(61072);var t={}},52898:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(8994);var t={}},71682:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(57355);var t={}},21257:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(58129);var t={}},59666:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(824);var t={}},10154:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(95013);var t={}},63933:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(51026);var t={}},33590:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(92433);var t={}},62772:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(29339);var t={}},95273:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(50417);var t={}},39365:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(7365);var t={}},38044:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(60736);var t={}},2856:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(44968);var t={}},6246:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(35530);var t={}},2982:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(59635);var t={}},12407:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(88727);var t={}},21538:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(22634);var t={}},38553:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(42131);var t={}},83558:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(79342);var t={}},92152:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(15461);var t={}},51528:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(16358);var t={}},41460:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(95213);var t={}},80261:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(19936);var t={}},49721:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(717);var t={}},39775:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(92800);var t={}},81084:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(10225);var t={}},13643:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(43962);var t={}},54271:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(54804);var t={}},55010:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(773);var t={}},50767:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(33944);var t={}},60221:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(65735);var t={}},92046:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(26281);var t={}},93046:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(57290);var t={}},35248:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(37827);var t={}},25516:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(40447);var t={}},81511:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(21037);var t={}},36601:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(13760);var t={}},7985:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(4718);var t={}},70625:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(96161);var t={}},16292:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(82371);var t={}},10515:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(92326);var t={}},18718:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(92511);var t={}},91071:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(34459);var t={}},84681:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(19702);var t={}},30942:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(11982);var t={}},69159:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(22509);var t={}},11714:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(44124);var t={}},95098:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(83602);var t={}},42323:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(55985);var t={}},69877:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(41625);var t={}},98722:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(3610);var t={}},84501:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(60965);var t={}},27752:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(96600);var t={}},77016:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(26963);var t={}},69493:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(52633);var t={}},74929:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(31990);var t={}},11101:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(9055);var t={}},17256:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(78775);var t={}},33430:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(81589);var t={}},95042:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(15251);var t={}},40996:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(9465);var t={}},55682:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(37257);var t={}},12537:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(42129);var t={}},95580:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(91982);var t={}},65330:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(64016);var t={}},17596:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(42394);var t={}},67410:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(57084);var t={}},93086:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(11751);var t={}},96917:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(31521);var t={}},6882:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(35560);var t={}},12890:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(31946);var t={}},83896:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(49296);var t={}},17966:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(8056);var t={}},59327:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(41601);var t={}},67291:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(24789);var t={}},24092:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(57656);var t={}},86461:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(76163);var t={}},78691:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(94193);var t={}},4085:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(42265);var t={}},80598:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(28428);var t={}},45726:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(65843);var t={}},29210:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(82416);var t={}},70091:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(33817);var t={}},44542:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(97306);var t={}},21785:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(44395);var t={}},85197:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(82760);var t={}},20179:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(89716);var t={}},60864:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(92380);var t={}},75785:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(47127);var t={}},35463:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(57100);var t={}},59043:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(60485);var t={}},96368:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(63358);var t={}},70414:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(42255);var t={}},40245:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(91461);var t={}},49071:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(93936);var t={}},21425:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(26145);var t={}},87074:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(78773);var t={}},32913:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(38302);var t={}},45850:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(18501);var t={}},82518:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(91748);var t={}},77676:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(26379);var t={}},26601:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(6127);var t={}},31401:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(42616);var t={}},14707:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(70919);var t={}},42283:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(15283);var t={}},87057:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(16696);var t={}},90890:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(54114);var t={}},82487:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(32957);var t={}},20677:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(86230);var t={}},23938:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(91910);var t={}},83953:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(92784);var t={}},28813:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(82691);var t={}},23161:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(58471);var t={}},96605:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(47881);var t={}},12575:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(17059);var t={}},36105:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(20459);var t={}},97760:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(67073);var t={}},39270:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(6935);var t={}},20425:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(32948);var t={}},15887:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(87751);var t={}},61874:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(36154);var t={}},66196:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(37287);var t={}},70176:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(32250);var t={}},40543:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(52921);var t={}},60309:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(92255);var t={}},84268:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(55483);var t={}},97429:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(2252);var t={}},84441:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(78096);var t={}},44713:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(75350);var t={}},90009:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(30269);var t={}},63150:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(28362);var t={}},1297:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(86719);var t={}},68414:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(28572);var t={}},93276:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(66389);var t={}},53304:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(60295);var t={}},13456:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(46445);var t={}},85640:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(41038);var t={}},92683:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(62e3);var t={}},50859:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(50998);var t={}},10233:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(66259);var t={}},73003:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(54725);var t={}},88233:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(48899);var t={}},6645:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(66128);var t={}},66832:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(91313);var t={}},28912:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(20900);var t={}},84178:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(43771);var t={}},68577:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(51331);var t={}},96839:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(39619);var t={}},94059:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(2234);var t={}},86499:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(39652);var t={}},96141:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(65714);var t={}},60084:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(90041);var t={}},85291:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(25254);var t={}},90555:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(6496);var t={}},23822:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(49946);var t={}},37739:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(10310);var t={}},43382:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(75720);var t={}},37549:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(70811);var t={}},34493:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(15618);var t={}},36860:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(77184);var t={}},28744:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(15508);var t={}},70430:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(69084);var t={}},79565:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(66031);var t={}},12224:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(87140);var t={}},85453:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(71271);var t={}},5419:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(72334);var t={}},84524:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(7795);var t={}},75247:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(13215);var t={}},6079:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(58482);var t={}},11856:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(35227);var t={}},89048:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(80351);var t={}},85951:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(67294),n(93926);var t={}},32991:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(27371);const t=[{value:"An arc diagram is a variation of the node-link method, which refers to a visual layout representation of node-link layouts that use nodes to represent objects and lines (or edges) to represent relationships. Based on this concept, arc diagrams adopt a one-dimensional layout approach, where nodes are arranged along a linear axis or in a circular pattern, and arcs are used to express the linking relationships between nodes. While this method cannot express the global structure of a graph like two-dimensional layouts can, it can clearly present ring and bridge structures when nodes are well-ordered.",paraId:0,tocIndex:0},{value:"Other Names",paraId:1,tocIndex:0},{value:": Arc diagram",paraId:1,tocIndex:0},{value:"Chart Type",paraId:2,tocIndex:2},{value:"Linear Arc Diagram",paraId:2,tocIndex:2},{value:"Suitable Data",paraId:2,tocIndex:2},{value:"List: A set of node data (containing node id field), a set of link data (containing source node field and target node field)",paraId:2,tocIndex:2},{value:"Function",paraId:2,tocIndex:2},{value:"Represents linking relationships between data",paraId:2,tocIndex:2},{value:"Data-to-Visual Mapping",paraId:2,tocIndex:2},{value:"Node coordinates (automatically calculated) field mapped to node position on coordinate axis",paraId:2,tocIndex:2},{value:"Link coordinates (automatically calculated) mapped to semicircle arc vertex coordinate axis position",paraId:2,tocIndex:2},{value:"Categorical data in nodes can also be color-coded for enhanced distinction",paraId:2,tocIndex:2},{value:"Suitable Data Volume",paraId:2,tocIndex:2},{value:"No less than 2 data entries",paraId:2,tocIndex:2},{value:"Chart Type",paraId:3,tocIndex:3},{value:"Circular Arc Diagram",paraId:3,tocIndex:3},{value:"Suitable Data",paraId:3,tocIndex:3},{value:"List: A set of node data (containing node id field), a set of link data (containing source node field and target node field)",paraId:3,tocIndex:3},{value:"Function",paraId:3,tocIndex:3},{value:"Represents linking relationships between data",paraId:3,tocIndex:3},{value:"Data-to-Visual Mapping",paraId:3,tocIndex:3},{value:"Node coordinates (automatically calculated) field mapped to node position on coordinate axis",paraId:3,tocIndex:3},{value:"Link coordinates (automatically calculated) mapped to Bézier curve vertex coordinate axis position with circle center as control point",paraId:3,tocIndex:3},{value:"Categorical data in nodes can also be color-coded for enhanced distinction",paraId:3,tocIndex:3},{value:"Suitable Data Volume",paraId:3,tocIndex:3},{value:"No less than 5 node data entries",paraId:3,tocIndex:3},{value:"Example 1: ",paraId:4,tocIndex:5},{value:"Expressing relationships between data and the importance of relationships",paraId:4,tocIndex:5},{value:'The network shown below represents character relationships in Victor Hugo\'s classic novel "Les Misérables".',paraId:5,tocIndex:5},{value:"Node Data",paraId:6,tocIndex:5},{value:":",paraId:6,tocIndex:5},{value:"name",paraId:7,tocIndex:5},{value:"group",paraId:7,tocIndex:5},{value:"id",paraId:7,tocIndex:5},{value:"Myriel",paraId:7,tocIndex:5},{value:"1",paraId:7,tocIndex:5},{value:"0",paraId:7,tocIndex:5},{value:"...",paraId:7,tocIndex:5},{value:"...",paraId:7,tocIndex:5},{value:"...",paraId:7,tocIndex:5},{value:"Link Data",paraId:8,tocIndex:5},{value:":",paraId:8,tocIndex:5},{value:"source",paraId:9,tocIndex:5},{value:"target",paraId:9,tocIndex:5},{value:"value",paraId:9,tocIndex:5},{value:"1",paraId:9,tocIndex:5},{value:"0",paraId:9,tocIndex:5},{value:"1",paraId:9,tocIndex:5},{value:"...",paraId:9,tocIndex:5},{value:"...",paraId:9,tocIndex:5},{value:"...",paraId:9,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/antvdemo/assets/data/relationship.json',\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => {\n          const { nodes, links } = data;\n\n          const arcData = [];\n          links.forEach((link) => {\n            const sourceId = parseInt(link.source);\n            const targetId = parseInt(link.target);\n\n            const sourceIndex = nodes.findIndex((n) => n.id === sourceId);\n            const targetIndex = nodes.findIndex((n) => n.id === targetId);\n\n            if (sourceIndex !== -1 && targetIndex !== -1) {\n              const sourceX = sourceIndex * 15 + 50;\n              const targetX = targetIndex * 15 + 50;\n              const distance = Math.abs(targetX - sourceX);\n              const arcHeight = Math.min(150, distance * 0.1);\n\n              for (let i = 0; i <= 15; i++) {\n                const t = i / 15;\n                const x = sourceX + (targetX - sourceX) * t;\n                const y = 600 - arcHeight * Math.sin(Math.PI * t);\n\n                arcData.push({\n                  x: x,\n                  y: y,\n                  linkId: `${sourceId}-${targetId}`,\n                  sourceName: nodes[sourceIndex].label,\n                  targetName: nodes[targetIndex].label,\n                  type: 'link',\n                });\n              }\n            }\n          });\n\n          const nodeData = nodes.map((node, i) => ({\n            name: node.label,\n            group: node.modularity_class,\n            size: node.size,\n            displaySize: Math.sqrt(node.size) * 4,\n            x: i * 15 + 50,\n            y: 600,\n            type: 'node',\n          }));\n\n          return [...arcData, ...nodeData];\n        },\n      },\n    ],\n  },\n});\n\nchart\n  .line()\n  .data({ transform: [{ type: 'filter', callback: (d) => d.type === 'link' }] })\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('series', 'linkId')\n  .style('stroke', '#1890ff')\n  .style('strokeWidth', 0.8)\n  .style('strokeOpacity', 0.4);\n\nchart\n  .point()\n  .data({ transform: [{ type: 'filter', callback: (d) => d.type === 'node' }] })\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('color', 'group')\n  .scale('color', {\n    type: 'ordinal',\n    range: [\n      '#ff7875',\n      '#ffa940',\n      '#fadb14',\n      '#73d13d',\n      '#40a9ff',\n      '#b37feb',\n      '#ff85c0',\n      '#ffc069',\n      '#95de64',\n    ],\n  })\n  .style('r', 4)\n  .style('fill', (d) => {\n    const colors = [\n      '#ff7875',\n      '#ffa940',\n      '#fadb14',\n      '#73d13d',\n      '#40a9ff',\n      '#b37feb',\n      '#ff85c0',\n      '#ffc069',\n      '#95de64',\n    ];\n    return colors[parseInt(d.group)] || '#40a9ff';\n  })\n  .style('stroke', 'none')\n  .style('fillOpacity', 0.8);\n\nchart.render();\n",paraId:10,tocIndex:5},{value:"Description",paraId:11,tocIndex:5},{value:":",paraId:11,tocIndex:5},{value:"The ",paraId:12,tocIndex:5},{value:"group",paraId:12,tocIndex:5},{value:" field uses ",paraId:12,tocIndex:5},{value:"color",paraId:12,tocIndex:5},{value:" to distinguish different node types",paraId:12,tocIndex:5},{value:"The ",paraId:12,tocIndex:5},{value:"value",paraId:12,tocIndex:5},{value:" field uses ",paraId:12,tocIndex:5},{value:"arc thickness",paraId:12,tocIndex:5},{value:" to represent relationship strength",paraId:12,tocIndex:5},{value:"Example 2: ",paraId:13,tocIndex:5},{value:"Circular layout for displaying complex relationship networks",paraId:13,tocIndex:5},{value:"Using a polar coordinate system, the data from Example 1 can be rendered as a circular arc diagram, which is more suitable for displaying network data with large numbers of nodes and complex relationships.",paraId:14,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  width: 600,\n  height: 600,\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/antvdemo/assets/data/relationship.json',\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => {\n          const { nodes, links } = data;\n\n          const centerX = 300;\n          const centerY = 300;\n          const radius = 200;\n          const nodeCount = nodes.length;\n\n          const nodePositions = nodes.map((node, i) => {\n            const angle = (i / nodeCount) * 2 * Math.PI - Math.PI / 2;\n            const x = centerX + radius * Math.cos(angle);\n            const y = centerY + radius * Math.sin(angle);\n            return {\n              ...node,\n              x: x,\n              y: y,\n              angle: angle,\n              index: i,\n            };\n          });\n\n          const arcData = [];\n          links.forEach((link) => {\n            const sourceId = parseInt(link.source);\n            const targetId = parseInt(link.target);\n\n            const sourceNode = nodePositions.find((n) => n.id === sourceId);\n            const targetNode = nodePositions.find((n) => n.id === targetId);\n\n            if (sourceNode && targetNode) {\n              const steps = 20;\n              for (let i = 0; i <= steps; i++) {\n                const t = i / steps;\n\n                const x =\n                  Math.pow(1 - t, 2) * sourceNode.x +\n                  2 * (1 - t) * t * centerX +\n                  Math.pow(t, 2) * targetNode.x;\n                const y =\n                  Math.pow(1 - t, 2) * sourceNode.y +\n                  2 * (1 - t) * t * centerY +\n                  Math.pow(t, 2) * targetNode.y;\n\n                arcData.push({\n                  x: x,\n                  y: y,\n                  linkId: `${sourceId}-${targetId}`,\n                  sourceName: sourceNode.label,\n                  targetName: targetNode.label,\n                  type: 'link',\n                });\n              }\n            }\n          });\n\n          const nodeData = nodePositions.map((node) => ({\n            name: node.label,\n            group: node.modularity_class,\n            size: node.size,\n            displaySize: Math.sqrt(node.size) * 4,\n            x: node.x,\n            y: node.y,\n            type: 'node',\n          }));\n\n          return [...arcData, ...nodeData];\n        },\n      },\n    ],\n  },\n});\n\nchart\n  .line()\n  .data({ transform: [{ type: 'filter', callback: (d) => d.type === 'link' }] })\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('series', 'linkId')\n  .style('stroke', '#1890ff')\n  .style('strokeWidth', 1.2)\n  .style('strokeOpacity', 0.3)\n  .style('lineCap', 'round');\n\nchart\n  .point()\n  .data({ transform: [{ type: 'filter', callback: (d) => d.type === 'node' }] })\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('color', 'group')\n  .scale('color', {\n    type: 'ordinal',\n    range: [\n      '#ff7875',\n      '#ffa940',\n      '#fadb14',\n      '#73d13d',\n      '#40a9ff',\n      '#b37feb',\n      '#ff85c0',\n      '#ffc069',\n      '#95de64',\n    ],\n  })\n  .style('r', 6)\n  .style('fill', (d) => {\n    const colors = [\n      '#ff7875',\n      '#ffa940',\n      '#fadb14',\n      '#73d13d',\n      '#40a9ff',\n      '#b37feb',\n      '#ff85c0',\n      '#ffc069',\n      '#95de64',\n    ];\n    return colors[parseInt(d.group)] || '#40a9ff';\n  })\n  .style('stroke', '#fff')\n  .style('strokeWidth', 2)\n  .style('fillOpacity', 0.9);\n\nchart\n  .text()\n  .data({ transform: [{ type: 'filter', callback: (d) => d.type === 'node' }] })\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('text', 'name')\n  .style('textAlign', 'center')\n  .style('textBaseline', 'middle')\n  .style('fontSize', 10)\n  .style('fill', '#333')\n  .style('fontWeight', 'bold')\n  .style('dy', -15);\n\nchart.render();\n",paraId:15,tocIndex:5},{value:"Example 1: ",paraId:16,tocIndex:6},{value:"Not suitable for representing hierarchical structures",paraId:16,tocIndex:6},{value:"Arc diagrams use linear or circular one-dimensional layouts and cannot effectively express hierarchical relationships in data. For data with obvious hierarchical structures, tree diagrams or organizational charts are more appropriate.",paraId:17,tocIndex:6},{value:"Example 2: ",paraId:18,tocIndex:6},{value:"Not suitable for handling too many nodes",paraId:18,tocIndex:6},{value:"When there are too many nodes, arc diagrams become crowded and difficult to read, with serious line overlap affecting readability. In such cases, force-directed graphs or other network graph layouts should be considered.",paraId:19,tocIndex:6},{value:"Chord Charts",paraId:20,tocIndex:7},{value:"Arc diagrams use standard linear layout for nodes, where node weights determine node size but do not affect position",paraId:21,tocIndex:8},{value:"Arc diagram connections can use weights to control line width, with uniform thickness",paraId:21,tocIndex:8},{value:"Arc diagram connections are drawn overlapping on top of nodes",paraId:21,tocIndex:8},{value:"Chord charts use weight-based linear layout for nodes, where node weights determine both node size and position",paraId:21,tocIndex:8},{value:"Chord chart connections use source and target weights to control line width, with non-uniform thickness",paraId:21,tocIndex:8},{value:"In chord charts, node width equals the sum of connection widths, with connections laid out flat at nodes without overlap",paraId:21,tocIndex:8},{value:"Sankey Diagrams",paraId:22,tocIndex:8},{value:"Arc diagrams are primarily used to represent relational connections between nodes, without expressing flow or data direction",paraId:23,tocIndex:9},{value:"Sankey diagrams are specifically used to represent data flow, where connection width represents flow volume with clear directionality",paraId:23,tocIndex:9},{value:"Arc diagrams use curved connections that are visually more elegant",paraId:23,tocIndex:9},{value:"Sankey diagrams use straight or curved connections that more intuitively express directional relationships",paraId:23,tocIndex:9},{value:"Chord Charts",paraId:24,tocIndex:10},{value:" - Used to represent relationships and flows between multiple entities",paraId:25,tocIndex:10},{value:"Sankey Diagrams",paraId:26,tocIndex:10},{value:" - Used to represent data flows and energy transfers",paraId:25,tocIndex:10},{value:"Network Graphs",paraId:27,tocIndex:10},{value:" - Used to represent complex network relationship structures",paraId:25,tocIndex:10}]},58445:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(5464);const t=[{value:"Area charts build upon line charts by filling the area between the line and the coordinate axis, emphasizing the magnitude of change in trends. Area charts can better showcase the peaks and valleys in trend changes, using the visual effect of filled regions to emphasize how quantities change over time.",paraId:0,tocIndex:0},{value:"Area charts are particularly suitable for displaying continuous time series data, intuitively expressing the trends of data changes while emphasizing changes in total volume within certain intervals through the visual effect of the filled area.",paraId:1,tocIndex:0},{value:"When you need to display data from multiple series simultaneously, you can use stacked area charts or percentage stacked area charts to compare the proportion of each category in the total and how these proportions change over time.",paraId:2,tocIndex:0},{value:"Other Names",paraId:3,tocIndex:0},{value:": Area Chart, Area Graph",paraId:3,tocIndex:0},{value:"Chart Type",paraId:4,tocIndex:2},{value:"Basic Area Chart",paraId:4,tocIndex:2},{value:"Suitable Data",paraId:4,tocIndex:2},{value:"Time series data: one ordered/continuous data field (usually time), one continuous data field",paraId:4,tocIndex:2},{value:"Function",paraId:4,tocIndex:2},{value:"Display data trends over time or ordered dimensions",paraId:4,tocIndex:2},{value:"Data-to-Visual Mapping",paraId:4,tocIndex:2},{value:"Time field mapped to horizontal axis position",paraId:4,tocIndex:2},{value:"Value field mapped to vertical axis height",paraId:4,tocIndex:2},{value:"Area fill emphasizes the degree of data change",paraId:4,tocIndex:2},{value:"Suitable Scenarios",paraId:4,tocIndex:2},{value:"Trend changes of a single data series over time",paraId:4,tocIndex:2},{value:"Chart Type",paraId:5,tocIndex:3},{value:"Stacked Area Chart",paraId:5,tocIndex:3},{value:"Suitable Data",paraId:5,tocIndex:3},{value:"Multi-series time data: one ordered/continuous data field (usually time), one continuous data field, one categorical data field",paraId:5,tocIndex:3},{value:"Function",paraId:5,tocIndex:3},{value:"Display trends of multiple data series over time and their stacked total",paraId:5,tocIndex:3},{value:"Data-to-Visual Mapping",paraId:5,tocIndex:3},{value:"Time field mapped to horizontal axis position",paraId:5,tocIndex:3},{value:"Value field mapped to vertical axis height",paraId:5,tocIndex:3},{value:"Category field mapped to different colors and stacked areas",paraId:5,tocIndex:3},{value:"Suitable Scenarios",paraId:5,tocIndex:3},{value:"Comparison of multiple data series and their total over time",paraId:5,tocIndex:3},{value:"Example 1: ",paraId:6,tocIndex:5},{value:"Suitable for displaying trends in continuous time series",paraId:6,tocIndex:5},{value:"The chart below is an area chart of stock price trends, showing how a company's stock price changes over time.",paraId:7,tocIndex:5},{value:"date",paraId:8,tocIndex:5},{value:"close",paraId:8,tocIndex:5},{value:"2015/1/5",paraId:8,tocIndex:5},{value:"121.73",paraId:8,tocIndex:5},{value:"2015/1/6",paraId:8,tocIndex:5},{value:"115.07",paraId:8,tocIndex:5},{value:"2015/1/7",paraId:8,tocIndex:5},{value:"116.75",paraId:8,tocIndex:5},{value:"...",paraId:8,tocIndex:5},{value:"...",paraId:8,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/aapl.json',\n    transform: [\n      {\n        type: 'map',\n        callback: (d) => ({\n          ...d,\n          date: new Date(d.date),\n        }),\n      },\n    ],\n  },\n  encode: { x: 'date', y: 'close' },\n  axis: {\n    x: {\n      title: null,\n    },\n    y: {\n      title: null,\n    },\n  },\n  children: [\n    {\n      type: 'area',\n      style: {\n        fill: 'l(270) 0:#ffffff 0.5:#7ec2f3 1:#1890ff',\n        fillOpacity: 0.6,\n      },\n    },\n    {\n      type: 'line',\n      style: {\n        lineWidth: 2,\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:9,tocIndex:5},{value:"Notes",paraId:10,tocIndex:5},{value:":",paraId:10,tocIndex:5},{value:"The ",paraId:11,tocIndex:5},{value:"date",paraId:11,tocIndex:5},{value:" field is mapped to the horizontal axis position, indicating the chronological order",paraId:11,tocIndex:5},{value:"The ",paraId:11,tocIndex:5},{value:"close",paraId:11,tocIndex:5},{value:" field is mapped to the vertical axis height and filled area, showing price trends over time",paraId:11,tocIndex:5},{value:"Both area fill and line are used to enhance the visual effect, making it easier to observe trend changes",paraId:11,tocIndex:5},{value:"Example 2: ",paraId:12,tocIndex:5},{value:"Suitable for displaying stacked trends of multiple data series",paraId:12,tocIndex:5},{value:"Stacked area charts can show changes in multiple data series over time, as well as their sum trend. The chart below shows trends in unemployment numbers across different industries.",paraId:13,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'area',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/unemployment-by-industry.json',\n  },\n  encode: {\n    x: (d) => new Date(d.date),\n    y: 'unemployed',\n    color: 'industry',\n  },\n  transform: [\n    {\n      type: 'stackY',\n    },\n  ],\n  axis: {\n    x: {\n      title: null,\n    },\n    y: {\n      title: null,\n    },\n  },\n});\n\nchart.render();\n",paraId:14,tocIndex:5},{value:"Notes",paraId:15,tocIndex:5},{value:":",paraId:15,tocIndex:5},{value:"The ",paraId:16,tocIndex:5},{value:"date",paraId:16,tocIndex:5},{value:" field is mapped to the horizontal axis, representing the time dimension",paraId:16,tocIndex:5},{value:"The ",paraId:16,tocIndex:5},{value:"unemployed",paraId:16,tocIndex:5},{value:" field is mapped to the vertical axis, representing the number of unemployed people",paraId:16,tocIndex:5},{value:"The ",paraId:16,tocIndex:5},{value:"industry",paraId:16,tocIndex:5},{value:" field is mapped to color, distinguishing different industries",paraId:16,tocIndex:5},{value:"The ",paraId:16,tocIndex:5},{value:"stackY",paraId:16,tocIndex:5},{value:" transformation is used to display the data series in a stacked manner",paraId:16,tocIndex:5},{value:"Example 3: ",paraId:17,tocIndex:5},{value:"Percentage stacked area chart for displaying proportion changes",paraId:17,tocIndex:5},{value:"When you need to display how each category's proportion of the total changes over time, percentage stacked area charts are a very suitable choice.",paraId:18,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'area',\n  autoFit: true,\n  data: [\n    { country: 'Asia', year: '1750', value: 502 },\n    { country: 'Asia', year: '1800', value: 635 },\n    { country: 'Asia', year: '1850', value: 809 },\n    { country: 'Asia', year: '1900', value: 947 },\n    { country: 'Asia', year: '1950', value: 1402 },\n    { country: 'Asia', year: '1999', value: 3634 },\n    { country: 'Asia', year: '2050', value: 5268 },\n    { country: 'Africa', year: '1750', value: 106 },\n    { country: 'Africa', year: '1800', value: 107 },\n    { country: 'Africa', year: '1850', value: 111 },\n    { country: 'Africa', year: '1900', value: 133 },\n    { country: 'Africa', year: '1950', value: 221 },\n    { country: 'Africa', year: '1999', value: 767 },\n    { country: 'Africa', year: '2050', value: 1766 },\n    { country: 'Europe', year: '1750', value: 163 },\n    { country: 'Europe', year: '1800', value: 203 },\n    { country: 'Europe', year: '1850', value: 276 },\n    { country: 'Europe', year: '1900', value: 408 },\n    { country: 'Europe', year: '1950', value: 547 },\n    { country: 'Europe', year: '1999', value: 729 },\n    { country: 'Europe', year: '2050', value: 628 },\n  ],\n  encode: { x: 'year', y: 'value', color: 'country' },\n  transform: [{ type: 'stackY' }, { type: 'normalizeY' }],\n  axis: {\n    x: {\n      title: null,\n    },\n    y: {\n      title: null,\n      labelFormatter: '.0%',\n    },\n  },\n});\n\nchart.render();\n",paraId:19,tocIndex:5},{value:"Notes",paraId:20,tocIndex:5},{value:":",paraId:20,tocIndex:5},{value:"Combining ",paraId:21,tocIndex:5},{value:"stackY",paraId:21,tocIndex:5},{value:" and ",paraId:21,tocIndex:5},{value:"normalizeY",paraId:21,tocIndex:5},{value:" transformations to standardize stacked data as percentages",paraId:21,tocIndex:5},{value:"The vertical axis is formatted to display percentages, more intuitively showing proportion changes in each region",paraId:21,tocIndex:5},{value:"Example 1: ",paraId:22,tocIndex:6},{value:"Not suitable for comparing precise individual values",paraId:22,tocIndex:6},{value:"Area charts display data changes through filled regions and are not suitable for scenarios requiring precise comparisons of individual values. If the main purpose is to compare specific values across different categories, bar or column charts would be better choices.",paraId:23,tocIndex:6},{value:"Example 2: ",paraId:24,tocIndex:6},{value:"May cause visual confusion when data fluctuates dramatically",paraId:24,tocIndex:6},{value:"When multiple data series fluctuate dramatically and intersect frequently, using stacked area charts may lead to visual confusion, making it difficult to distinguish specific trend changes in each series. In such cases, consider using multiple line charts or small multiples instead.",paraId:25,tocIndex:6},{value:"Range area charts can represent upper and lower limits of data, commonly used to show data uncertainty or fluctuation ranges.",paraId:26,tocIndex:8},{value:"/**\n * A recreation of this demo: https://www.anychart.com/zh/products/anychart/gallery/Combined_Charts/Range_Spline-Area,_Spline_and_Marker_Chart.php\n */\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/range-spline-area.json',\n    transform: [\n      {\n        type: 'map',\n        callback: ([x, low, high, v2, v3]) => ({\n          x,\n          low,\n          high,\n          v2,\n          v3,\n        }),\n      },\n    ],\n  },\n  scale: { x: { type: 'linear', tickCount: 10 } },\n  axis: { y: { title: false } },\n  children: [\n    {\n      type: 'area',\n      encode: { x: 'x', y: ['low', 'high'], shape: 'smooth' },\n      style: { fillOpacity: 0.65, fill: '#64b5f6', lineWidth: 1 },\n    },\n    {\n      type: 'point',\n      encode: { x: 'x', y: 'v2', size: 2, shape: 'point' },\n      tooltip: { items: ['v2'] },\n    },\n    {\n      type: 'line',\n      encode: { x: 'x', y: 'v3', color: '#FF6B3B', shape: 'smooth' },\n    },\n  ],\n});\n\nchart.render();\n",paraId:27,tocIndex:8},{value:"Notes",paraId:28,tocIndex:8},{value:":",paraId:28,tocIndex:8},{value:"Using ",paraId:29,tocIndex:8},{value:"y: ['low', 'high']",paraId:29,tocIndex:8},{value:" to specify the upper and lower bounds of the range",paraId:29,tocIndex:8},{value:"The data range uses fill color with lower opacity to highlight the uncertainty range",paraId:29,tocIndex:8},{value:"Difference area charts are used to compare two data series, highlighting the difference areas between them.",paraId:30,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'area',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/temperature-compare.json',\n    transform: [\n      {\n        type: 'fold',\n        fields: ['New York', 'San Francisco'],\n        key: 'city',\n        value: 'temperature',\n      },\n    ],\n  },\n  transform: [{ type: 'diffY' }],\n  encode: {\n    x: (d) => new Date(d.date),\n    y: 'temperature',\n    color: 'city',\n  },\n  scale: {\n    color: {\n      range: ['#67a9cf', '#ef8a62'],\n    },\n  },\n  axis: {\n    y: { title: null },\n    x: { title: null },\n  },\n});\n\nchart.render();\n",paraId:31,tocIndex:9},{value:"Notes",paraId:32,tocIndex:9},{value:":",paraId:32,tocIndex:9},{value:"Using ",paraId:33,tocIndex:9},{value:"transform: [{ type: 'diffY' }]",paraId:33,tocIndex:9},{value:" to achieve the difference effect",paraId:33,tocIndex:9},{value:"Color encoding distinguishes between the two data series and highlights the difference area between them",paraId:33,tocIndex:9},{value:"Line Charts",paraId:34,tocIndex:10},{value:"Pie Charts",paraId:35,tocIndex:10},{value:"Area charts and line charts are both suitable for showing trend changes in continuous data",paraId:36,tocIndex:11},{value:"Area charts emphasize the visual effect of quantity through filled areas, making them more suitable for showing changes in total volume",paraId:36,tocIndex:11},{value:"Line charts are more suitable for showing accurate change trajectories and comparing multiple data lines",paraId:36,tocIndex:11},{value:"Pie charts focus on showing proportion relationships at a specific point in time, rather than changes over time",paraId:36,tocIndex:11},{value:"Stacked Area Charts",paraId:37,tocIndex:11},{value:"Basic area charts are suitable for trend display of a single data series",paraId:38,tocIndex:12},{value:"Stacked area charts are suitable for displaying multiple data series and their sum",paraId:38,tocIndex:12}]},58592:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(31120);const t=[{value:"A typical bar chart, also known as a column chart, uses vertical or horizontal bars to display comparisons between different categories. One axis represents the categories being compared, while the other axis denotes the corresponding values.",paraId:0,tocIndex:0},{value:"Unlike ",paraId:1,tocIndex:0},{value:"histograms",paraId:2,tocIndex:0},{value:', bar charts cannot show changes in data across a continuous range. Instead, they represent categorical data and answer the question: "How many are there in each category?"',paraId:1,tocIndex:0},{value:"It’s important to note that bar charts can become cluttered when displaying too many categories, leading to overlapping labels and legibility issues. We'll demonstrate this below.",paraId:3,tocIndex:0},{value:"English Names",paraId:4,tocIndex:0},{value:": Column Chart, Bar Chart",paraId:4,tocIndex:0},{value:"Chart Type",paraId:5,tocIndex:2},{value:"Vertical Bar Chart",paraId:5,tocIndex:2},{value:"Suitable Data",paraId:5,tocIndex:2},{value:"A dataset containing one categorical field and one numerical field",paraId:5,tocIndex:2},{value:"Functionality",paraId:5,tocIndex:2},{value:"Compares the size of numerical values across categories",paraId:5,tocIndex:2},{value:"Data Mapping",paraId:5,tocIndex:2},{value:"Categorical data maps to the horizontal axis position",paraId:5,tocIndex:2},{value:"Numerical data maps to bar height",paraId:5,tocIndex:2},{value:"Categorical data can also map to color for better category distinction",paraId:5,tocIndex:2},{value:"Data Size Limit",paraId:5,tocIndex:2},{value:"Recommended for no more than 12 data points",paraId:5,tocIndex:2},{value:"Chart Type",paraId:6,tocIndex:3},{value:"Horizontal Bar Chart",paraId:6,tocIndex:3},{value:"Suitable Data",paraId:6,tocIndex:3},{value:"A dataset containing one categorical field and one numerical field",paraId:6,tocIndex:3},{value:"Functionality",paraId:6,tocIndex:3},{value:"Compares the size of numerical values across categories",paraId:6,tocIndex:3},{value:"Data Mapping",paraId:6,tocIndex:3},{value:"Categorical data maps to the vertical axis",paraId:6,tocIndex:3},{value:"Numerical data maps to bar width",paraId:6,tocIndex:3},{value:"Data Size Limit",paraId:6,tocIndex:3},{value:"Recommended for no more than 30 data points",paraId:6,tocIndex:3},{value:"Example 1: ",paraId:7,tocIndex:5},{value:"Comparing Categorical Data",paraId:7,tocIndex:5},{value:"The chart below compares the sales of different game genres.",paraId:8,tocIndex:5},{value:"Genre",paraId:9,tocIndex:5},{value:"Sales",paraId:9,tocIndex:5},{value:"Sports",paraId:9,tocIndex:5},{value:"27,500",paraId:9,tocIndex:5},{value:"Strategy",paraId:9,tocIndex:5},{value:"11,500",paraId:9,tocIndex:5},{value:"Action",paraId:9,tocIndex:5},{value:"6,000",paraId:9,tocIndex:5},{value:"Shooter",paraId:9,tocIndex:5},{value:"3,500",paraId:9,tocIndex:5},{value:"Other",paraId:9,tocIndex:5},{value:"1,500",paraId:9,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n      region: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:10,tocIndex:5},{value:"Explanation",paraId:11,tocIndex:5},{value:":",paraId:11,tocIndex:5},{value:"The ",paraId:12,tocIndex:5},{value:"genre",paraId:12,tocIndex:5},{value:" field maps to both position and color, differentiating game categories.",paraId:12,tocIndex:5},{value:"The ",paraId:12,tocIndex:5},{value:"sold",paraId:12,tocIndex:5},{value:" field maps to the bar length to represent sales volume.",paraId:12,tocIndex:5},{value:"Example 1: ",paraId:13,tocIndex:6},{value:"Too Many Categories for a Vertical Bar Chart",paraId:13,tocIndex:6},{value:"When comparing population sizes across provinces, too many categories can cause text overlap issues, making labels harder to read. In such cases, horizontal bar charts are more effective.",paraId:14,tocIndex:6},{value:"Province",paraId:15,tocIndex:6},{value:"Population",paraId:15,tocIndex:6},{value:"Beijing",paraId:15,tocIndex:6},{value:"19,612,368",paraId:15,tocIndex:6},{value:"Tianjin",paraId:15,tocIndex:6},{value:"12,938,693",paraId:15,tocIndex:6},{value:"Hebei",paraId:15,tocIndex:6},{value:"71,854,210",paraId:15,tocIndex:6},{value:"...",paraId:15,tocIndex:6},{value:"...",paraId:15,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { province: 'Beijing', population: 19612368 },\n    { province: 'Tianjin', population: 12938693 },\n    { province: 'Hebei', population: 71854210 },\n    { province: 'Shanxi', population: 27500000 },\n    { province: 'Inner Mongolia', population: 24706291 },\n    { province: 'Liaoning', population: 43746323 },\n    { province: 'Jilin', population: 27452815 },\n    { province: 'Heilongjiang', population: 38313991 },\n    { province: 'Shanghai', population: 23019196 },\n    { province: 'Jiangsu', population: 78660941 },\n    { province: 'Zhejiang', population: 54426891 },\n    { province: 'Anhui', population: 59500468 },\n    { province: 'Fujian', population: 36894217 },\n    { province: 'Jiangxi', population: 44567797 },\n    { province: 'Shandong', population: 95792719 },\n    { province: 'Henan', population: 94029939 },\n    { province: 'Hubei', population: 57237727 },\n    { province: 'Hunan', population: 65700762 },\n    { province: 'Guangdong', population: 104320459 },\n    { province: 'Guangxi', population: 46023761 },\n    { province: 'Hainan', population: 8671485 },\n    { province: 'Chongqing', population: 28846170 },\n    { province: 'Sichuan', population: 80417528 },\n    { province: 'Guizhou', population: 34748556 },\n    { province: 'Yunnan', population: 45966766 },\n    { province: 'Tibet', population: 3002165 },\n    { province: 'Shaanxi', population: 37327379 },\n    { province: 'Gansu', population: 25575263 },\n    { province: 'Qinghai', population: 5626723 },\n  ],\n  encode: { x: 'province', y: 'population' },\n  axis: {\n    y: {\n      title: null,\n    },\n    x: {\n      title: null,\n      labelFontSize: 12,\n\n      size: 100, // Size must be set\n      labelAutoEllipsis: {\n        suffix: '..',\n        minLength: 8,\n        maxLength: 12,\n      },\n      labelAutoWrap: {\n        wordWrapWidth: 80,\n        maxLines: 2,\n        recoverWhenFailed: true,\n      },\n      labelAutoRotate: {\n        optionalAngles: [0, 45, 90], // Attempt to rotate by 0 degrees, 45 degrees, or 90 degrees\n        recoverWhenFailed: true, // If rotation fails, revert to the default angle\n      },\n      labelAutoHide: {\n        keepHeader: true, // Retain the first tick label\n        keepTail: true, // Retain the last tick label\n      },\n    },\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n      region: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:16,tocIndex:6},{value:"Switching to a horizontal bar chart makes labels easier to read, as shown below:",paraId:17,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { province: 'Beijing', population: 19612368 },\n    { province: 'Tianjin', population: 12938693 },\n    { province: 'Hebei', population: 71854210 },\n    { province: 'Shanxi', population: 27500000 },\n    { province: 'Inner Mongolia', population: 24706291 },\n    { province: 'Liaoning', population: 43746323 },\n    { province: 'Jilin', population: 27452815 },\n    { province: 'Heilongjiang', population: 38313991 },\n    { province: 'Shanghai', population: 23019196 },\n    { province: 'Jiangsu', population: 78660941 },\n    { province: 'Zhejiang', population: 54426891 },\n    { province: 'Anhui', population: 59500468 },\n    { province: 'Fujian', population: 36894217 },\n    { province: 'Jiangxi', population: 44567797 },\n    { province: 'Shandong', population: 95792719 },\n    { province: 'Henan', population: 94029939 },\n    { province: 'Hubei', population: 57237727 },\n    { province: 'Hunan', population: 65700762 },\n    { province: 'Guangdong', population: 104320459 },\n    { province: 'Guangxi', population: 46023761 },\n    { province: 'Hainan', population: 8671485 },\n    { province: 'Chongqing', population: 28846170 },\n    { province: 'Sichuan', population: 80417528 },\n    { province: 'Guizhou', population: 34748556 },\n    { province: 'Yunnan', population: 45966766 },\n    { province: 'Tibet', population: 3002165 },\n    { province: 'Shaanxi', population: 37327379 },\n    { province: 'Gansu', population: 25575263 },\n    { province: 'Qinghai', population: 5626723 },\n  ],\n  encode: { x: 'province', y: 'population' },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  axis: {\n    y: {\n      title: null,\n    },\n    x: {\n      title: null,\n    },\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n      region: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:18,tocIndex:6},{value:"Example 2: ",paraId:19,tocIndex:6},{value:"Not Suitable for Trends",paraId:19,tocIndex:6},{value:"Bar charts use bar length to compare categorical data but are not effective for showing continuous trends.",paraId:20,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { day: '2015/9/1', share: 10 },\n    { day: '2015/9/2', share: 12 },\n    { day: '2015/9/3', share: 11 },\n    { day: '2015/9/4', share: 15 },\n    { day: '2015/9/5', share: 20 },\n    { day: '2015/9/6', share: 22 },\n    { day: '2015/9/7', share: 21 },\n    { day: '2015/9/8', share: 25 },\n    { day: '2015/9/9', share: 31 },\n    { day: '2015/9/10', share: 32 },\n    { day: '2015/9/11', share: 28 },\n    { day: '2015/9/12', share: 29 },\n    { day: '2015/9/13', share: 40 },\n    { day: '2015/9/14', share: 41 },\n    { day: '2015/9/15', share: 45 },\n    { day: '2015/9/16', share: 50 },\n    { day: '2015/9/17', share: 65 },\n    { day: '2015/9/18', share: 45 },\n    { day: '2015/9/19', share: 50 },\n    { day: '2015/9/20', share: 51 },\n    { day: '2015/9/21', share: 65 },\n    { day: '2015/9/22', share: 60 },\n    { day: '2015/9/23', share: 62 },\n    { day: '2015/9/24', share: 65 },\n    { day: '2015/9/25', share: 45 },\n    { day: '2015/9/26', share: 55 },\n    { day: '2015/9/27', share: 59 },\n    { day: '2015/9/28', share: 52 },\n    { day: '2015/9/29', share: 53 },\n    { day: '2015/9/30', share: 40 },\n  ],\n  encode: { x: 'day', y: 'share' },\n  axis: {\n    y: {\n      title: null,\n    },\n    x: {\n      title: null,\n    },\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n      region: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:21,tocIndex:6},{value:"For instance, a bar chart is less ideal for showing daily stock prices for September 2015 compared to a ",paraId:22,tocIndex:6},{value:"line chart",paraId:23,tocIndex:6},{value:" or ",paraId:22,tocIndex:6},{value:"area chart",paraId:24,tocIndex:6},{value:".",paraId:22,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { day: '2015/9/1', share: 10 },\n    { day: '2015/9/2', share: 12 },\n    { day: '2015/9/3', share: 11 },\n    { day: '2015/9/4', share: 15 },\n    { day: '2015/9/5', share: 20 },\n    { day: '2015/9/6', share: 22 },\n    { day: '2015/9/7', share: 21 },\n    { day: '2015/9/8', share: 25 },\n    { day: '2015/9/9', share: 31 },\n    { day: '2015/9/10', share: 32 },\n    { day: '2015/9/11', share: 28 },\n    { day: '2015/9/12', share: 29 },\n    { day: '2015/9/13', share: 40 },\n    { day: '2015/9/14', share: 41 },\n    { day: '2015/9/15', share: 45 },\n    { day: '2015/9/16', share: 50 },\n    { day: '2015/9/17', share: 65 },\n    { day: '2015/9/18', share: 45 },\n    { day: '2015/9/19', share: 50 },\n    { day: '2015/9/20', share: 51 },\n    { day: '2015/9/21', share: 65 },\n    { day: '2015/9/22', share: 60 },\n    { day: '2015/9/23', share: 62 },\n    { day: '2015/9/24', share: 65 },\n    { day: '2015/9/25', share: 45 },\n    { day: '2015/9/26', share: 55 },\n    { day: '2015/9/27', share: 59 },\n    { day: '2015/9/28', share: 52 },\n    { day: '2015/9/29', share: 53 },\n    { day: '2015/9/30', share: 40 },\n  ],\n  encode: { x: 'day', y: 'share' },\n  axis: {\n    y: {\n      title: null,\n    },\n    x: {\n      title: null,\n      tickFilter: (_, i) => i % 2 !== 0, // Filter the tick marks on the x-axis to display only every other tick.\n    },\n  },\n  children: [\n    {\n      type: 'area',\n      style: {\n        opacity: 0.6,\n      },\n    },\n    {\n      type: 'line',\n      style: {\n        lineWidth: 3,\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:25,tocIndex:6},{value:"Line Charts",paraId:26,tocIndex:7},{value:"Pie Charts",paraId:27,tocIndex:7},{value:"Bar charts are primarily used to compare data (such as size or values) across multiple categories.",paraId:28,tocIndex:8},{value:"Line charts are mainly used to show trends in continuous data (e.g., time) or ordered categories.",paraId:28,tocIndex:8},{value:"Pie charts are used to display the proportion of each category relative to the whole.",paraId:28,tocIndex:8},{value:"A Nightingale chart (rose diagram) compares data using the size of the radius.",paraId:29,tocIndex:9},{value:"A bar chart compares data based on the length of the bars.",paraId:29,tocIndex:9}]},40016:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(50728);const t=[{value:"Bi-directional Bar Chart (also known as Positive-Negative Bar Chart) uses positive and negative bars to display numerical comparisons between categories. The categorical axis represents the dimensions to be compared, while the continuous axis represents the corresponding values. There are two cases: one where the positive and negative scales are completely symmetrical, and another where they are inversely symmetrical (i.e., opposites).",paraId:0,tocIndex:0},{value:"Other Names",paraId:1,tocIndex:0},{value:": Bi-Directional Bar,Bi-Directional Column",paraId:1,tocIndex:0},{value:"Chart Type",paraId:2,tocIndex:1},{value:"Bi-directional Bar Chart",paraId:2,tocIndex:1},{value:"Suitable Data",paraId:2,tocIndex:1},{value:"List: one categorical field, two continuous fields",paraId:2,tocIndex:1},{value:"Function",paraId:2,tocIndex:1},{value:"Compare numerical values across categories",paraId:2,tocIndex:1},{value:"Data Mapping",paraId:2,tocIndex:1},{value:"Categorical field maps to position on categorical axis; one continuous field maps to length of positive bars; another continuous field maps to length of negative bars; positive/negative data can be distinguished by color or shape; categorical data can use color to enhance distinction",paraId:2,tocIndex:1},{value:"Recommended Data Count",paraId:2,tocIndex:1},{value:"No more than 30 items horizontally, 12 items vertically",paraId:2,tocIndex:1},{value:"Example 1: ",paraId:3,tocIndex:3},{value:"Positive-Negative Category Comparison",paraId:3,tocIndex:3},{value:"The chart below simulates completion status of tasks by different departments in a company, with completed counts shown as positive bars and uncompleted counts as negative bars.",paraId:4,tocIndex:3},{value:"Department",paraId:5,tocIndex:3},{value:"Group",paraId:5,tocIndex:3},{value:"Completed",paraId:5,tocIndex:3},{value:"Uncompleted",paraId:5,tocIndex:3},{value:"Dept 0",paraId:5,tocIndex:3},{value:"Group0",paraId:5,tocIndex:3},{value:"37",paraId:5,tocIndex:3},{value:"9",paraId:5,tocIndex:3},{value:"...",paraId:5,tocIndex:3},{value:"...",paraId:5,tocIndex:3},{value:"...",paraId:5,tocIndex:3},{value:"...",paraId:5,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  { department: 'Dept 0', group: 'Group0', people: 37, type: 'completed' },\n  { department: 'Dept 0', group: 'Group0', people: 9, type: 'uncompleted' },\n  { department: 'Dept 0', group: 'Group1', people: 27, type: 'completed' },\n  { department: 'Dept 0', group: 'Group1', people: 10, type: 'uncompleted' },\n  { department: 'Dept 1', group: 'Group2', people: 37, type: 'completed' },\n  { department: 'Dept 1', group: 'Group2', people: 19, type: 'uncompleted' },\n  { department: 'Dept 1', group: 'Group3', people: 37, type: 'completed' },\n  { department: 'Dept 1', group: 'Group3', people: 29, type: 'uncompleted' },\n  { department: 'Dept 2', group: 'Group4', people: 20, type: 'completed' },\n  { department: 'Dept 2', group: 'Group4', people: 2, type: 'uncompleted' },\n  { department: 'Dept 2', group: 'Group5', people: 40, type: 'completed' },\n  { department: 'Dept 2', group: 'Group5', people: 10, type: 'uncompleted' },\n  { department: 'Dept 3', group: 'Group6', people: 25, type: 'completed' },\n  { department: 'Dept 3', group: 'Group6', people: 3, type: 'uncompleted' },\n  { department: 'Dept 3', group: 'Group7', people: 55, type: 'completed' },\n  { department: 'Dept 3', group: 'Group7', people: 8, type: 'uncompleted' },\n];\n\nconst range = ['#7593ed', '#95e3b0', '#6c7893', '#e7c450', '#7460eb'];\n\nchart.options({\n  type: 'interval',\n  coordinate: { transform: [{ type: 'transpose' }] },\n  autoFit: true,\n  data: data,\n  encode: {\n    x: 'group',\n    y: (d) => (d.type === 'completed' ? d.people : -d.people),\n    color: 'department',\n  },\n\n  scale: {\n    x: { padding: 0.5 },\n    color: {\n      type: 'ordinal',\n      range,\n    },\n  },\n  axis: {\n    x: { title: '' },\n    y: {\n      labelFormatter: (d) => {\n        return Math.abs(d);\n      },\n    },\n  },\n  style: {\n    fill: ({ type }, i, data) => {\n      if (type === 'uncompleted') {\n        return 'transparent';\n      }\n    },\n    stroke: (d, i, data, ...re) => {\n      const { type } = d;\n      if (type === 'uncompleted') {\n        return range[i / 2];\n      }\n    },\n    lineWidth: 2,\n  },\n  tooltip: {\n    title: (d) => {\n      return `${d.department}-${d.group}`;\n    },\n    items: [\n      (d, i, data, column) => ({\n        name: d.type === 'completed' ? 'Completed' : 'Uncompleted',\n        value: d.people,\n      }),\n    ],\n  },\n});\n\nchart.render();\n",paraId:6,tocIndex:3},{value:"Explanation",paraId:7,tocIndex:3},{value:":",paraId:7,tocIndex:3},{value:"Used ",paraId:8,tocIndex:3},{value:"color",paraId:8,tocIndex:3},{value:" to distinguish different departments",paraId:8,tocIndex:3},{value:"Used ",paraId:8,tocIndex:3},{value:"shape",paraId:8,tocIndex:3},{value:" (hollow vs solid) to distinguish completed vs uncompleted counts",paraId:8,tocIndex:3},{value:"Used ",paraId:8,tocIndex:3},{value:"position",paraId:8,tocIndex:3},{value:" to distinguish different groups",paraId:8,tocIndex:3},{value:"Bi-directional bar charts are not suitable for data without opposite meanings",paraId:9,tocIndex:4},{value:"Example 1: ",paraId:10,tocIndex:5},{value:"Stacked Bi-directional Bar Chart",paraId:10,tocIndex:5},{value:"The chart below shows statistics of agreement levels for different types of people on a certain question, divided into five levels: Strongly disagree, Disagree, Neither agree nor disagree, Agree and Strongly agree. The negative levels are shown as negative bars with different colors. ",paraId:11,tocIndex:5},{value:"Sample data",paraId:11,tocIndex:5},{value:"type",paraId:12,tocIndex:5},{value:"Strongly agree",paraId:12,tocIndex:5},{value:"Agree",paraId:12,tocIndex:5},{value:"Neither agree nor disagree",paraId:12,tocIndex:5},{value:"Disagree",paraId:12,tocIndex:5},{value:"Strongly disagree",paraId:12,tocIndex:5},{value:"Question 1",paraId:12,tocIndex:5},{value:"11.7",paraId:12,tocIndex:5},{value:"59.9",paraId:12,tocIndex:5},{value:"18.5",paraId:12,tocIndex:5},{value:"9.1",paraId:12,tocIndex:5},{value:"0.7",paraId:12,tocIndex:5},{value:"...",paraId:12,tocIndex:5},{value:"...",paraId:12,tocIndex:5},{value:"...",paraId:12,tocIndex:5},{value:"...",paraId:12,tocIndex:5},{value:"...",paraId:12,tocIndex:5},{value:"...",paraId:12,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst types = [\n  'Strongly disagree',\n  'Disagree',\n  'Neither agree nor disagree',\n  'Agree',\n  'Strongly agree',\n];\nconst colors = ['#c30d24', '#f3a583', '#cccccc', '#94c6da', '#1770ab'];\n\nchart.options({\n  type: 'interval',\n  coordinate: { transform: [{ type: 'transpose' }] },\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/82c97016-0f99-433b-ab21-9ecf14244610.csv',\n  },\n  transform: [{ type: 'stackY' }],\n  encode: {\n    x: 'question',\n    y: (d) =>\n      d.type === 'Disagree' || d.type === 'Strongly disagree'\n        ? -d.percentage\n        : d.type === 'Neither agree nor disagree'\n        ? -d.percentage / 2\n        : +d.percentage,\n    color: 'type',\n  },\n\n  scale: {\n    x: { padding: 0.5 },\n    color: { domain: types, range: colors },\n  },\n  axis: {\n    x: { title: '' },\n    y: {\n      labelFormatter: (d) => {\n        return Math.abs(d);\n      },\n    },\n  },\n\n  tooltip: {\n    items: [\n      (d, i, data, column) => ({\n        name: d.type,\n        value: d.percentage,\n      }),\n    ],\n  },\n});\n\nchart.render();\n",paraId:13,tocIndex:5},{value:"Explanation",paraId:14,tocIndex:5},{value:":",paraId:14,tocIndex:5},{value:"Used ",paraId:15,tocIndex:5},{value:"color",paraId:15,tocIndex:5},{value:" to distinguish different agreement levels",paraId:15,tocIndex:5},{value:"Used ",paraId:15,tocIndex:5},{value:"position",paraId:15,tocIndex:5},{value:" to distinguish different questions",paraId:15,tocIndex:5},{value:"Bar Chart",paraId:16,tocIndex:6},{value:"Bar charts can only plot on one axis, with each bar representing one data point",paraId:17,tocIndex:7},{value:"Bi-directional bar charts contain both positive and negative axis, with each bar potentially representing both positive and negative data",paraId:17,tocIndex:7}]},31464:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(11664);const t=[{value:"A box plot (also known as a box-and-whisker plot) is a statistical chart used to display the distribution of a dataset. It shows five important statistical values: minimum, first quartile (Q1), median (Q2), third quartile (Q3), and maximum, while clearly identifying outliers in the data.",paraId:0,tocIndex:0},{value:"The box plot's design is simple and clear. Through the combination of boxes and whiskers, it allows for quick understanding of data's central tendency, dispersion, and skewed distribution, making it an important tool in statistical analysis and data exploration.",paraId:1,tocIndex:0},{value:"Other Names",paraId:2,tocIndex:0},{value:": Box-and-Whisker Plot, Box Chart",paraId:2,tocIndex:0},{value:"Chart Type",paraId:3,tocIndex:2},{value:"Box Plot",paraId:3,tocIndex:2},{value:"Suitable Data",paraId:3,tocIndex:2},{value:"One categorical data field and one continuous data field",paraId:3,tocIndex:2},{value:"Functionality",paraId:3,tocIndex:2},{value:"Display data distribution, identify outliers, compare data distributions across different groups",paraId:3,tocIndex:2},{value:"Data Mapping",paraId:3,tocIndex:2},{value:"Categorical data maps to horizontal axis position",paraId:3,tocIndex:2},{value:"Continuous data automatically calculates statistics mapped to box components",paraId:3,tocIndex:2},{value:"Outliers displayed as scatter points",paraId:3,tocIndex:2},{value:"Data Size Limit",paraId:3,tocIndex:2},{value:"At least 5-10 data points per group recommended",paraId:3,tocIndex:2},{value:"The main components of a box plot include:",paraId:4,tocIndex:2},{value:"Box",paraId:5,tocIndex:2},{value:": A rectangular area from the first quartile (Q1) to the third quartile (Q3), containing the middle 50% of the data",paraId:5,tocIndex:2},{value:"Median line",paraId:5,tocIndex:2},{value:": A horizontal line inside the box representing the median (Q2) of the data",paraId:5,tocIndex:2},{value:"Whiskers",paraId:5,tocIndex:2},{value:": Line segments extending from the box, typically extending to the farthest data point within 1.5 times the interquartile range (IQR)",paraId:5,tocIndex:2},{value:"Outliers",paraId:5,tocIndex:2},{value:": Data points beyond the whisker range, displayed as individual point markers",paraId:5,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'boxplot',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/morley.json',\n  },\n  encode: {\n    x: 'Expt',\n    y: 'Speed',\n  },\n  style: {\n    boxFill: '#1890ff',\n    boxFillOpacity: 0.3,\n    pointStroke: '#f5222d',\n    pointR: 3,\n  },\n});\n\nchart.render();\n",paraId:6,tocIndex:2},{value:"Use Case 1: Data Distribution Analysis",paraId:7,tocIndex:4},{value:"Box plots are ideal tools for analyzing data distribution, quickly identifying central tendency, dispersion, and skewed distribution of data.",paraId:8,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'boxplot',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n  },\n  encode: {\n    x: 'species',\n    y: 'flipper_length_mm',\n    color: 'species',\n  },\n  axis: {\n    y: {\n      title: 'Flipper Length (mm)',\n    },\n    x: {\n      title: 'Penguin Species',\n    },\n  },\n});\n\nchart.render();\n",paraId:9,tocIndex:4},{value:"Use Case 2: Outlier Detection",paraId:10,tocIndex:4},{value:"Box plots can visually display outliers in data, helping to identify data points that require further investigation.",paraId:11,tocIndex:4},{value:"Use Case 3: Multi-group Data Comparison",paraId:12,tocIndex:4},{value:"By displaying multiple box plots side by side, you can effectively compare data distribution differences between different groups.",paraId:13,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'boxplot',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n  },\n  encode: {\n    x: 'species',\n    y: 'flipper_length_mm',\n    color: 'sex',\n    series: 'sex',\n  },\n  axis: {\n    y: {\n      title: 'Flipper Length (mm)',\n    },\n    x: {\n      title: 'Penguin Species',\n    },\n  },\n});\n\nchart.render();\n",paraId:14,tocIndex:4},{value:"Use Case 1: Insufficient Data",paraId:15,tocIndex:5},{value:"When each group has fewer than 5 data points, box plots have limited statistical significance. In such cases, scatter plots or bar charts are recommended.",paraId:16,tocIndex:5},{value:"Use Case 2: Displaying Precise Values",paraId:17,tocIndex:5},{value:"Box plots focus on showing overall characteristics of data distribution and are not suitable for scenarios requiring precise values. In such cases, tables or bar charts should be used.",paraId:18,tocIndex:5},{value:"Use Case 3: Time Series Analysis",paraId:19,tocIndex:5},{value:"For trend analysis of time series data, ",paraId:20,tocIndex:5},{value:"line charts",paraId:21,tocIndex:5},{value:" or ",paraId:20,tocIndex:5},{value:"area charts",paraId:22,tocIndex:5},{value:" are more appropriate.",paraId:20,tocIndex:5},{value:"By setting different colors and series, you can compare data distributions across multiple dimensions within the same chart.",paraId:23,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'boxplot',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n  },\n  encode: {\n    x: 'species',\n    y: 'body_mass_g',\n    color: 'sex',\n    series: 'sex',\n  },\n  axis: {\n    y: {\n      title: 'Body Mass (g)',\n    },\n    x: {\n      title: 'Penguin Species',\n    },\n  },\n});\n\nchart.render();\n",paraId:24,tocIndex:7},{value:"When category labels are too long, horizontal box plots can be used to improve readability.",paraId:25,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'boxplot',\n  coordinate: { transform: [{ type: 'transpose' }] },\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/morley.json',\n    transform: [{ type: 'filter', callback: (d) => d.Expt <= 3 }],\n  },\n  encode: {\n    x: 'Expt',\n    y: 'Speed',\n    color: 'Expt',\n  },\n  axis: {\n    x: {\n      title: 'Speed of Light Measurement',\n    },\n    y: {\n      title: 'Experiment Number',\n    },\n  },\n});\n\nchart.render();\n",paraId:26,tocIndex:8},{value:"In certain scenarios, outliers can be hidden to focus only on the overall data distribution.",paraId:27,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'boxplot',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/morley.json',\n  },\n  encode: {\n    x: 'Expt',\n    y: 'Speed',\n  },\n  style: {\n    point: false,\n    boxFill: '#52c41a',\n    boxFillOpacity: 0.4,\n  },\n  axis: {\n    y: {\n      title: 'Speed of Light Measurement',\n    },\n    x: {\n      title: 'Experiment Number',\n    },\n  },\n});\n\nchart.render();\n",paraId:28,tocIndex:9},{value:"Histograms",paraId:29,tocIndex:10},{value:"Box charts primarily display statistical summaries (five-number summary) of data, suitable for quick comparison across multiple groups",paraId:30,tocIndex:11},{value:"Histograms show the specific distribution shape of data, suitable for distribution analysis of a single variable",paraId:30,tocIndex:11},{value:"Bar Charts",paraId:31,tocIndex:11},{value:"Box charts are suitable for displaying data distribution and statistical characteristics",paraId:32,tocIndex:12},{value:"Bar charts are primarily used to compare numerical values across different categories",paraId:32,tocIndex:12},{value:"Scatter Plots",paraId:33,tocIndex:12},{value:"Box charts are suitable for displaying distribution overviews of grouped data",paraId:34,tocIndex:13},{value:"Scatter plots are suitable for showing specific data point distributions and correlations",paraId:34,tocIndex:13}]},31342:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(35420);const t=[{value:"A bubble chart is a multivariate chart that is a variant of scatter plots and can also be considered a combination of scatter plots and percentage area charts.",paraId:0,tocIndex:0},{value:"The most basic use of bubble charts is to use three values to determine each data series. Like scatter plots, bubble charts map two-dimensional data values to coordinate points on a Cartesian coordinate system, where the X and Y axis represent different two dimensions of data. However, unlike scatter plots, each bubble in a bubble chart has categorical information (they are displayed next to points or as legends). The area of each bubble represents the third numerical data. Additionally, different colors can be used to distinguish categorical data or other numerical data, or brightness or transparency can be used. When representing time-dimensional data, the time dimension can be used as one dimension in the rectangular coordinate system, or combined with animation to show how data changes over time.",paraId:1,tocIndex:0},{value:"Bubble charts are typically used to compare and display relationships between different categories of dots (which we call bubbles here) through the position and area size of bubbles. From an overall perspective, bubble charts can be used to analyze correlations in data.",paraId:2,tocIndex:0},{value:"It should be noted that bubble charts have limited data size capacity, as too many bubbles will make the chart difficult to read. However, this can be compensated by adding some interactive behaviors: hiding some information and displaying it when the mouse clicks or hovers, or adding an option to reorganize or filter grouping categories.",paraId:3,tocIndex:0},{value:"Additionally, ",paraId:4,tocIndex:0},{value:"the size of bubbles is mapped to area rather than radius or diameter",paraId:4,tocIndex:0},{value:". This is because if it were based on radius or diameter, the size of circles would not only change exponentially but also lead to visual errors.",paraId:4,tocIndex:0},{value:"Other Names",paraId:5,tocIndex:0},{value:": Bubble Chart",paraId:5,tocIndex:0},{value:"Chart Type",paraId:6,tocIndex:2},{value:"Basic Bubble Chart",paraId:6,tocIndex:2},{value:"Suitable Data",paraId:6,tocIndex:2},{value:"Multidimensional data: at least two continuous data fields (X, Y axis) and one numerical data field (bubble size)",paraId:6,tocIndex:2},{value:"Function",paraId:6,tocIndex:2},{value:"Display relationships between multiple variables, discover data patterns and correlations",paraId:6,tocIndex:2},{value:"Data-to-Visual Mapping",paraId:6,tocIndex:2},{value:"Two continuous variables mapped to XY coordinates",paraId:6,tocIndex:2},{value:"Third variable mapped to bubble size",paraId:6,tocIndex:2},{value:"Optional categorical variable mapped to bubble color or shape",paraId:6,tocIndex:2},{value:"Suitable Data Count",paraId:6,tocIndex:2},{value:"Usually not exceeding 100 data points; too many will lead to chart crowding",paraId:6,tocIndex:2},{value:"Visual Design Suggestions",paraId:6,tocIndex:2},{value:"Use semi-transparent bubbles to avoid overlap occlusion",paraId:6,tocIndex:2},{value:"Bubble size range should be moderate, avoiding too large or too small",paraId:6,tocIndex:2},{value:"Add grid lines to assist in reading coordinate values",paraId:6,tocIndex:2},{value:"Chart Type",paraId:7,tocIndex:3},{value:"Logarithmic Bubble Chart",paraId:7,tocIndex:3},{value:"Suitable Data",paraId:7,tocIndex:3},{value:"Datasets with extreme value differences requiring logarithmic transformation",paraId:7,tocIndex:3},{value:"Function",paraId:7,tocIndex:3},{value:"Handling data with large spans, such as population data, GDP data, etc.",paraId:7,tocIndex:3},{value:"Data-to-Visual Mapping",paraId:7,tocIndex:3},{value:"Same as basic bubble chart but using logarithmic scale",paraId:7,tocIndex:3},{value:"Two continuous variables mapped to XY coordinates",paraId:7,tocIndex:3},{value:"Third variable mapped to bubble size through logarithmic transformation",paraId:7,tocIndex:3},{value:"Usage Scenario",paraId:7,tocIndex:3},{value:"When data exhibits exponential growth or value ranges spanning multiple orders of magnitude",paraId:7,tocIndex:3},{value:"Implementation Method",paraId:7,tocIndex:3},{value:"Using ",paraId:7,tocIndex:3},{value:"scale: { size: { type: 'log', range: [4, 20] } }",paraId:7,tocIndex:3},{value:" to configure logarithmic scale",paraId:7,tocIndex:3},{value:"Considerations",paraId:7,tocIndex:3},{value:"Should clearly indicate the use of logarithmic transformation in legends or labels to avoid misleading readers",paraId:7,tocIndex:3},{value:"Bubble charts are most suitable for the following scenarios:",paraId:8,tocIndex:5},{value:"Multidimensional Data Analysis",paraId:9,tocIndex:5},{value:" - When needing to analyze relationships between three or more variables simultaneously",paraId:9,tocIndex:5},{value:"Feature Cluster Comparison",paraId:9,tocIndex:5},{value:" - Discovering grouping patterns and outliers in data",paraId:9,tocIndex:5},{value:"Resource Allocation Visualization",paraId:9,tocIndex:5},{value:" - Displaying resource distribution under multidimensional metrics",paraId:9,tocIndex:5},{value:"Risk and Opportunity Analysis",paraId:9,tocIndex:5},{value:" - Decision support considering multiple factors simultaneously",paraId:9,tocIndex:5},{value:"Economic and Population Health Indicator Analysis",paraId:10},{value:"The following chart shows the relationship between GDP per capita, life expectancy, and population size of different countries, while using colors to distinguish different continents, effectively presenting four dimensions of data in one chart.",paraId:11,tocIndex:6},{value:"country",paraId:12,tocIndex:6},{value:"GDP (per capita)",paraId:12,tocIndex:6},{value:"lifeExpectancy",paraId:12,tocIndex:6},{value:"population",paraId:12,tocIndex:6},{value:"continent",paraId:12,tocIndex:6},{value:"China",paraId:12,tocIndex:6},{value:"12547",paraId:12,tocIndex:6},{value:"76.9",paraId:12,tocIndex:6},{value:"1403500365",paraId:12,tocIndex:6},{value:"Asia",paraId:12,tocIndex:6},{value:"United States",paraId:12,tocIndex:6},{value:"59532",paraId:12,tocIndex:6},{value:"78.5",paraId:12,tocIndex:6},{value:"321773631",paraId:12,tocIndex:6},{value:"Americas",paraId:12,tocIndex:6},{value:"India",paraId:12,tocIndex:6},{value:"6427",paraId:12,tocIndex:6},{value:"68.3",paraId:12,tocIndex:6},{value:"1324517249",paraId:12,tocIndex:6},{value:"Asia",paraId:12,tocIndex:6},{value:"Japan",paraId:12,tocIndex:6},{value:"38428",paraId:12,tocIndex:6},{value:"83.9",paraId:12,tocIndex:6},{value:"127141000",paraId:12,tocIndex:6},{value:"Asia",paraId:12,tocIndex:6},{value:"Germany",paraId:12,tocIndex:6},{value:"46136",paraId:12,tocIndex:6},{value:"81.0",paraId:12,tocIndex:6},{value:"82695000",paraId:12,tocIndex:6},{value:"Europe",paraId:12,tocIndex:6},{value:"...",paraId:12,tocIndex:6},{value:"...",paraId:12,tocIndex:6},{value:"...",paraId:12,tocIndex:6},{value:"...",paraId:12,tocIndex:6},{value:"...",paraId:12,tocIndex:6},{value:"```js",paraId:12,tocIndex:6},{value:"ob { inject: true }",paraId:12,tocIndex:6},{value:"import { Chart } from '@antv/g2';",paraId:13,tocIndex:6},{value:"const chart = new Chart({\ncontainer: 'container',\ntheme: 'classic',\n});",paraId:14,tocIndex:6},{value:"chart.options({\ntype: 'point',\nautoFit: true,\ndata: {\ntype: 'fetch',\nvalue: '",paraId:15,tocIndex:6},{value:"https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json",paraId:15,tocIndex:6},{value:"',\n},\nencode: {\nx: 'GDP',\ny: 'LifeExpectancy',\nsize: 'Population',\ncolor: 'continent',\nshape: 'point'\n},\nscale: {\nsize: { type: 'log', range: [4, 20] }\n},\nstyle: {\nfillOpacity: 0.3,\nlineWidth: 1\n},\nlegend: {\nsize: false\n}\n});",paraId:15,tocIndex:6},{value:"chart.render();",paraId:16,tocIndex:6},{value:"\n**Analysis**:\n\n- The `GDP` field is mapped to the X axis, representing a country's GDP per capita, showing that developed countries are concentrated on the right\n- The `LifeExpectancy` field is mapped to the Y axis, representing citizens' life expectancy, allowing observation of a positive correlation between GDP per capita and life expectancy\n- The `Population` field is mapped to bubble size, processed with a logarithmic scale, making populous countries like China and India clearly visible\n- The `continent` field is mapped to color, showing the cluster distribution of countries from different continents\n\n**Insights**: Through this chart, we can intuitively observe:\n1. A positive correlation between economic level and health level\n2. No necessary connection between population size and economic development\n3. Differences in development patterns among countries from different continents\n\n### Unsuitable Use Cases\n\nExample 1: **Too Many Data Points or Excessive Bubble Overlap**\n\nWhen data points exceed 100 or bubbles seriously overlap, bubble charts may become chaotic and difficult to read. In such cases, consider using heat maps or faceted charts.\n\nBelow is an example of a bubble chart with numerous data points; as the number of data points increases, the overlap between bubbles makes the chart difficult to interpret:\n\n```js | ob { inject: true  }\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\n// Generate 200 random data points\nconst data = Array.from({ length: 200 }, () => ({\n  x: Math.random() * 100,\n  y: Math.random() * 100,\n  size: Math.random() * 20 + 5,\n  category: ['A', 'B', 'C', 'D'][Math.floor(Math.random() * 4)]\n}));\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data,\n  encode: {\n    x: 'x',\n    y: 'y',\n    size: 'size',\n    color: 'category'\n  },\n  style: {\n    fillOpacity: 0.3,\n    lineWidth: 1\n  },\n});\n\nchart.render();\n",paraId:17,tocIndex:6},{value:"Example 2: ",paraId:18,tocIndex:6},{value:"Only Two Variables Need Comparison",paraId:18,tocIndex:6},{value:"When only comparing the relationship between two variables, a scatter plot is more concise and effective than a bubble chart. The third variable (bubble size) in a bubble chart, if unnecessary, would increase cognitive burden.",paraId:19,tocIndex:6},{value:"Example 3: ",paraId:20,tocIndex:6},{value:"Displaying Time Series Trend Data",paraId:20,tocIndex:6},{value:"Bubble charts are not suitable for displaying time series trend data. For data that needs to show trends over time, line charts or area charts are better choices.",paraId:21,tocIndex:6},{value:"Below is an example using a line chart instead of a bubble chart to display time series data:",paraId:22,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { day: '2015/9/1', share: 10, volume: 1200 },\n    { day: '2015/9/5', share: 20, volume: 2100 },\n    { day: '2015/9/10', share: 32, volume: 3400 },\n    { day: '2015/9/15', share: 45, volume: 2900 },\n    { day: '2015/9/20', share: 51, volume: 4100 },\n    { day: '2015/9/25', share: 45, volume: 3800 },\n    { day: '2015/9/30', share: 40, volume: 2700 },\n  ],\n  encode: { x: 'day', y: 'share' },\n  axis: {\n    y: {\n      title: 'Stock Price',\n    },\n    x: {\n      title: 'Date',\n    },\n  },\n  children: [\n    {\n      type: 'line',\n      style: {\n        lineWidth: 3,\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:23,tocIndex:6},{value:"If a third dimension of information is indeed needed in time series data, you can use a time series bubble chart with size encoding:",paraId:24,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: [\n    { day: '2015/9/1', share: 10, volume: 1200 },\n    { day: '2015/9/5', share: 20, volume: 2100 },\n    { day: '2015/9/10', share: 32, volume: 3400 },\n    { day: '2015/9/15', share: 45, volume: 2900 },\n    { day: '2015/9/20', share: 51, volume: 4100 },\n    { day: '2015/9/25', share: 45, volume: 3800 },\n    { day: '2015/9/30', share: 40, volume: 2700 },\n  ],\n  encode: {\n    x: 'day',\n    y: 'share',\n    size: 'volume',\n  },\n  scale: {\n    size: { range: [10, 40] },\n  },\n  style: {\n    fillOpacity: 0.6,\n    stroke: '#1890ff',\n    fill: '#1890ff',\n  },\n  axis: {\n    y: { title: 'Stock Price' },\n    x: { title: 'Date' },\n  },\n});\n\nchart.render();\n",paraId:25,tocIndex:6},{value:"Scatter Plots",paraId:26,tocIndex:7},{value:"Heat Maps",paraId:27,tocIndex:7},{value:"Chart Type",paraId:28,tocIndex:8},{value:"Main Features",paraId:28,tocIndex:8},{value:"Suitable Scenarios",paraId:28,tocIndex:8},{value:"Data Dimensions",paraId:28,tocIndex:8},{value:"Bubble Chart",paraId:28,tocIndex:8},{value:"Encodes additional dimension through point size",paraId:28,tocIndex:8},{value:"Multivariate relationship analysis",paraId:28,tocIndex:8},{value:"3-4 variables (X, Y, size, color)",paraId:28,tocIndex:8},{value:"Scatter Plot",paraId:28,tocIndex:8},{value:"Only displays point positions",paraId:28,tocIndex:8},{value:"Two-dimensional correlation analysis",paraId:28,tocIndex:8},{value:"2-3 variables (X, Y, color)",paraId:28,tocIndex:8},{value:"Heat Map",paraId:28,tocIndex:8},{value:"Displays density or value through color intensity",paraId:28,tocIndex:8},{value:"Showing distribution density",paraId:28,tocIndex:8},{value:"3 variables (X, Y, color intensity)",paraId:28,tocIndex:8},{value:"Scatter Maps",paraId:29,tocIndex:8},{value:"Bubble Maps",paraId:30,tocIndex:8},{value:"Chart Type",paraId:31,tocIndex:9},{value:"Coordinate System",paraId:31,tocIndex:9},{value:"Data Constraints",paraId:31,tocIndex:9},{value:"Application Scenarios",paraId:31,tocIndex:9},{value:"Bubble Chart",paraId:31,tocIndex:9},{value:"Abstract coordinate system",paraId:31,tocIndex:9},{value:"Can use any values as XY coordinates",paraId:31,tocIndex:9},{value:"Multidimensional data relationship visualization",paraId:31,tocIndex:9},{value:"Bubble Map",paraId:31,tocIndex:9},{value:"Geographic coordinate system",paraId:31,tocIndex:9},{value:"Point positions constrained by geographic coordinates",paraId:31,tocIndex:9},{value:"Multivariate analysis in geographic data",paraId:31,tocIndex:9},{value:"Scatter Map",paraId:31,tocIndex:9},{value:"Geographic coordinate system",paraId:31,tocIndex:9},{value:"Point positions constrained by geographic coordinates",paraId:31,tocIndex:9},{value:"Simple distribution of geographic locations",paraId:31,tocIndex:9}]},51341:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(95807);const t=[{value:"Note: G2 5.0 does not directly support complete map background functionality. This page primarily provides concept introduction. For actual applications, additional map components and data need to be imported.",paraId:0},{value:"A Bubble Map is a visualization chart that uses bubbles (circles) on a geographic map to represent data size at different geographic locations. The size of the bubble typically represents the magnitude of a value, the position represents geographic coordinates, and colors can be used to distinguish different categories or represent another dimension of values.",paraId:1,tocIndex:0},{value:"Bubble Maps are more suitable for comparing geographically related data than ",paraId:2,tocIndex:0},{value:"Choropleth Maps",paraId:3,tocIndex:0},{value:". The main disadvantage is that when there are too many large bubbles on the map, they may overlap and affect data display, so this needs to be considered when creating the chart.",paraId:2,tocIndex:0},{value:"Other Names",paraId:4,tocIndex:0},{value:": Bubble Chart Map, Geographic Bubble Chart",paraId:4,tocIndex:0},{value:"Chart Type",paraId:5,tocIndex:2},{value:"Bubble Map",paraId:5,tocIndex:2},{value:"Suitable Data",paraId:5,tocIndex:2},{value:"Data containing geographic coordinates (longitude and latitude) and one or more numeric fields",paraId:5,tocIndex:2},{value:"Function",paraId:5,tocIndex:2},{value:"Display geographic distribution and value relationships on a geographic background",paraId:5,tocIndex:2},{value:"Data Mapping",paraId:5,tocIndex:2},{value:"Longitude/latitude fields mapped to map position",paraId:5,tocIndex:2},{value:"Numeric field mapped to bubble size",paraId:5,tocIndex:2},{value:"Category field can be mapped to color",paraId:5,tocIndex:2},{value:"Other values can be mapped to color intensity",paraId:5,tocIndex:2},{value:"Data Volume",paraId:5,tocIndex:2},{value:"Recommended not to exceed 100 data points to avoid bubble overlap affecting readability",paraId:5,tocIndex:2},{value:"The main components of a Bubble Map include:",paraId:6,tocIndex:2},{value:"Geographic Background",paraId:7,tocIndex:2},{value:": Provides a map background with geographic coordinate system, such as world map, country map, etc.",paraId:7,tocIndex:2},{value:"Bubbles",paraId:7,tocIndex:2},{value:": Circular markers where position represents geographic coordinates and size represents the magnitude of values",paraId:7,tocIndex:2},{value:"Color Encoding",paraId:7,tocIndex:2},{value:": Uses different colors to distinguish categories or represent value ranges",paraId:7,tocIndex:2},{value:"Legend",paraId:7,tocIndex:2},{value:": Explains the meaning of bubble size and color",paraId:7,tocIndex:2},{value:"Case 1: Geographic Data Distribution Analysis",paraId:8,tocIndex:4},{value:"Bubble Maps are ideal tools for analyzing data with geographic attributes, clearly showing the distribution pattern of data across geographic space.",paraId:9,tocIndex:4},{value:"Case 2: Regional Comparison Analysis",paraId:10,tocIndex:4},{value:"Through comparison of bubble size and color, different regions' data differences can be effectively compared.",paraId:11,tocIndex:4},{value:"Case 3: Multi-dimensional Geographic Data Display",paraId:12,tocIndex:4},{value:"Bubble Maps can simultaneously display multiple dimensions of information including location, value size, and category.",paraId:13,tocIndex:4},{value:"Case 1: Too Many Data Points Causing Overlap",paraId:14,tocIndex:5},{value:"When there are too many data points on the map, bubbles may overlap and affect clear data display. In such cases, heat maps or dot density maps should be considered.",paraId:15,tocIndex:5},{value:"Case 2: Lack of Geographic Coordinate Information",paraId:16,tocIndex:5},{value:"For data without latitude and longitude information, geocoding conversion is needed first, or other chart types should be considered.",paraId:17,tocIndex:5},{value:"Case 3: Precise Value Display",paraId:18,tocIndex:5},{value:"Bubble Maps focus on showing geographic distribution trends of data and are not suitable for scenarios requiring precise values. Tables or other precise display methods should be used in such cases.",paraId:19,tocIndex:5},{value:"By setting different layers and transparency levels, multiple data series can be displayed on the same map.",paraId:20,tocIndex:7},{value:"Combining geographic boundary data provides richer geographic background information.",paraId:21,tocIndex:8},{value:"Showing changes in bubbles over time through animation.",paraId:22,tocIndex:9},{value:"Scatter Charts",paraId:23,tocIndex:10},{value:"Bubble Maps use geographic coordinate systems, suitable for displaying geospatial data",paraId:24,tocIndex:11},{value:"Scatter Charts use Cartesian coordinate systems, suitable for displaying correlations between two continuous variables",paraId:24,tocIndex:11},{value:"Choropleth Maps",paraId:25,tocIndex:11},{value:"Bubble Maps use bubble size to represent values, allowing precise comparison of values across different regions",paraId:26,tocIndex:12},{value:"Choropleth Maps use color intensity to represent value ranges, suitable for displaying overall distribution patterns of data",paraId:26,tocIndex:12},{value:"Dot Charts",paraId:27,tocIndex:12},{value:"Bubble Maps incorporate geographic information, where position has geographic significance",paraId:28,tocIndex:13},{value:"Regular dot charts' positions only represent data dimensions without geographic attributes",paraId:28,tocIndex:13},{value:"In G2 5.0, we can implement bubble maps by drawing ",paraId:29,tocIndex:14},{value:"point",paraId:29,tocIndex:14},{value:" on ",paraId:29,tocIndex:14},{value:"geoView",paraId:29,tocIndex:14},{value:". Here are two practical examples:",paraId:29,tocIndex:14},{value:"Based on London map data, showing the population distribution across different areas:",paraId:30,tocIndex:15},{value:"import { Chart } from '@antv/g2';\nimport { feature } from 'topojson-client';\n\nPromise.all([\n  fetch('https://assets.antv.antgroup.com/g2/londonBoroughs.json').then((res) =>\n    res.json(),\n  ),\n  fetch('https://assets.antv.antgroup.com/g2/londonCentroids.json').then(\n    (res) => res.json(),\n  ),\n]).then((values) => {\n  const [londonBoroughs, londonCentroids] = values;\n  const london = feature(\n    londonBoroughs,\n    londonBoroughs.objects.boroughs,\n  ).features;\n\n  // Add simulated population and GDP data to centroid data\n  const bubbleData = londonCentroids.map((d, index) => ({\n    ...d,\n    name: d.name || `Area ${index + 1}`, // Ensure each data point has a name\n    population: Math.floor(Math.random() * 500000) + 100000, // 100K-600K population\n    gdp: Math.floor(Math.random() * 50000) + 20000, // 20K-70K GDP\n    category: ['Business', 'Residential', 'Industrial', 'Mixed'][\n      Math.floor(Math.random() * 4)\n    ],\n  }));\n\n  const chart = new Chart({\n    container: 'container',\n    autoFit: true,\n  });\n\n  chart.options({\n    type: 'geoView',\n    children: [\n      {\n        type: 'geoPath',\n        data: london,\n        style: {\n          fill: 'lightgray',\n          stroke: 'white',\n          lineWidth: 1,\n        },\n      },\n      {\n        type: 'point',\n        data: bubbleData,\n        encode: {\n          x: 'cx',\n          y: 'cy',\n          size: 'population',\n          color: 'category',\n          shape: 'point',\n        },\n        style: {\n          opacity: 0.7,\n          stroke: 'white',\n          lineWidth: 1,\n        },\n        scale: {\n          size: {\n            range: [4, 30],\n          },\n          color: {\n            range: ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'],\n          },\n        },\n        tooltip: {\n          title: 'name',\n          items: [\n            {\n              name: 'Population',\n              channel: 'size',\n              valueFormatter: (value) =>\n                `${value ? value.toLocaleString() : 'N/A'} people`,\n            },\n            {\n              name: 'GDP',\n              field: 'gdp',\n              valueFormatter: (value) =>\n                `${value ? value.toLocaleString() : 'N/A'} million`,\n            },\n            { name: 'Type', field: 'category' },\n          ],\n        },\n      },\n    ],\n  });\n\n  chart.render();\n});\n",paraId:31,tocIndex:15},{value:"Displaying GDP distribution of major cities worldwide:",paraId:32,tocIndex:16},{value:"import { Chart } from '@antv/g2';\n\n// Global major cities data - ensuring data completeness\nconst worldCities = [\n  {\n    name: 'Beijing',\n    lng: 116.4074,\n    lat: 39.9042,\n    gdp: 4027,\n    population: 2154,\n    region: 'Asia',\n  },\n  {\n    name: 'Shanghai',\n    lng: 121.4737,\n    lat: 31.2304,\n    gdp: 4321,\n    population: 2424,\n    region: 'Asia',\n  },\n  {\n    name: 'New York',\n    lng: -74.0059,\n    lat: 40.7128,\n    gdp: 1700,\n    population: 851,\n    region: 'North America',\n  },\n  {\n    name: 'Los Angeles',\n    lng: -118.2437,\n    lat: 34.0522,\n    gdp: 710,\n    population: 397,\n    region: 'North America',\n  },\n  {\n    name: 'London',\n    lng: -0.1276,\n    lat: 51.5074,\n    gdp: 653,\n    population: 898,\n    region: 'Europe',\n  },\n  {\n    name: 'Tokyo',\n    lng: 139.6917,\n    lat: 35.6895,\n    gdp: 1617,\n    population: 1396,\n    region: 'Asia',\n  },\n  {\n    name: 'Paris',\n    lng: 2.3522,\n    lat: 48.8566,\n    gdp: 709,\n    population: 1068,\n    region: 'Europe',\n  },\n  {\n    name: 'Berlin',\n    lng: 13.405,\n    lat: 52.52,\n    gdp: 147,\n    population: 367,\n    region: 'Europe',\n  },\n  {\n    name: 'Sydney',\n    lng: 151.2093,\n    lat: -33.8688,\n    gdp: 337,\n    population: 518,\n    region: 'Oceania',\n  },\n  {\n    name: 'Toronto',\n    lng: -79.3832,\n    lat: 43.6532,\n    gdp: 324,\n    population: 294,\n    region: 'North America',\n  },\n  {\n    name: 'Seoul',\n    lng: 126.978,\n    lat: 37.5665,\n    gdp: 779,\n    population: 969,\n    region: 'Asia',\n  },\n  {\n    name: 'Singapore',\n    lng: 103.8198,\n    lat: 1.3521,\n    gdp: 340,\n    population: 584,\n    region: 'Asia',\n  },\n  {\n    name: 'Chicago',\n    lng: -87.6298,\n    lat: 41.8781,\n    gdp: 689,\n    population: 271,\n    region: 'North America',\n  },\n  {\n    name: 'Frankfurt',\n    lng: 8.6821,\n    lat: 50.1109,\n    gdp: 731,\n    population: 75,\n    region: 'Europe',\n  },\n  {\n    name: 'Hong Kong',\n    lng: 114.1694,\n    lat: 22.3193,\n    gdp: 365,\n    population: 745,\n    region: 'Asia',\n  },\n  {\n    name: 'Mumbai',\n    lng: 72.8777,\n    lat: 19.076,\n    gdp: 310,\n    population: 1284,\n    region: 'Asia',\n  },\n  {\n    name: 'São Paulo',\n    lng: -46.6333,\n    lat: -23.5505,\n    gdp: 430,\n    population: 1252,\n    region: 'South America',\n  },\n  {\n    name: 'Mexico City',\n    lng: -99.1332,\n    lat: 19.4326,\n    gdp: 411,\n    population: 912,\n    region: 'North America',\n  },\n].map((city) => ({\n  ...city,\n  // Data validation and formatting\n  name: city.name || 'Unknown City',\n  lng: typeof city.lng === 'number' ? city.lng : 0,\n  lat: typeof city.lat === 'number' ? city.lat : 0,\n  gdp: typeof city.gdp === 'number' ? city.gdp : 0,\n  population: typeof city.population === 'number' ? city.population : 0,\n  region: city.region || 'Unknown Region',\n}));\n\n// Simplified global map outline data\nconst worldOutline = [\n  {\n    type: 'Feature',\n    geometry: {\n      type: 'Polygon',\n      coordinates: [\n        [\n          [-180, -60],\n          [180, -60],\n          [180, 75],\n          [-180, 75],\n          [-180, -60],\n        ],\n      ],\n    },\n  },\n];\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'geoView',\n  children: [\n    {\n      type: 'geoPath',\n      data: worldOutline,\n      style: {\n        fill: '#f0f0f0',\n        stroke: '#d0d0d0',\n        lineWidth: 1,\n      },\n    },\n    {\n      type: 'point',\n      data: worldCities,\n      encode: {\n        x: 'lng',\n        y: 'lat',\n        size: 'gdp',\n        color: 'region',\n        shape: 'point',\n      },\n      style: {\n        opacity: 0.8,\n        stroke: 'white',\n        lineWidth: 2,\n      },\n      scale: {\n        size: {\n          range: [8, 40],\n        },\n        color: {\n          range: [\n            '#1f77b4',\n            '#ff7f0e',\n            '#2ca02c',\n            '#d62728',\n            '#9467bd',\n            '#8c564b',\n          ],\n        },\n      },\n      tooltip: {\n        title: 'name',\n        items: [\n          {\n            name: 'GDP',\n            channel: 'size',\n            valueFormatter: (value) => `${value || 0} billion USD`,\n          },\n          {\n            name: 'Population',\n            field: 'population',\n            valueFormatter: (value) => `${value || 0} million`,\n          },\n          { name: 'Region', field: 'region' },\n        ],\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:33,tocIndex:16},{value:"Essential elements for creating bubble maps with G2 5.0:",paraId:34,tocIndex:17},{value:"Use geoView",paraId:35,tocIndex:17},{value:": Create a geographic coordinate system view with ",paraId:35,tocIndex:17},{value:"type: 'geoView'",paraId:35,tocIndex:17},{value:"Point marks",paraId:35,tocIndex:17},{value:": Use ",paraId:35,tocIndex:17},{value:"type: 'point'",paraId:35,tocIndex:17},{value:" in children to draw bubbles",paraId:35,tocIndex:17},{value:"Encoding mapping",paraId:35,tocIndex:17},{value:":\n",paraId:35,tocIndex:17},{value:"Map ",paraId:36,tocIndex:17},{value:"x",paraId:36,tocIndex:17},{value:", ",paraId:36,tocIndex:17},{value:"y",paraId:36,tocIndex:17},{value:" to longitude and latitude coordinates in the ",paraId:36,tocIndex:17},{value:"encode",paraId:36,tocIndex:17},{value:" object",paraId:36,tocIndex:17},{value:"Map ",paraId:36,tocIndex:17},{value:"size",paraId:36,tocIndex:17},{value:" to numeric values",paraId:36,tocIndex:17},{value:"Map ",paraId:36,tocIndex:17},{value:"color",paraId:36,tocIndex:17},{value:" to categories or values",paraId:36,tocIndex:17},{value:"Style settings",paraId:35,tocIndex:17},{value:": Set opacity, stroke, etc. through the ",paraId:35,tocIndex:17},{value:"style",paraId:35,tocIndex:17},{value:" object",paraId:35,tocIndex:17},{value:"Scale configuration",paraId:35,tocIndex:17},{value:": Control bubble size and color ranges through the ",paraId:35,tocIndex:17},{value:"scale",paraId:35,tocIndex:17},{value:" object",paraId:35,tocIndex:17},{value:"Interactive features",paraId:35,tocIndex:17},{value:": Add ",paraId:35,tocIndex:17},{value:"tooltip",paraId:35,tocIndex:17},{value:" and ",paraId:35,tocIndex:17},{value:"labels",paraId:35,tocIndex:17},{value:" to enhance user experience",paraId:35,tocIndex:17},{value:"Multi-layer structure",paraId:35,tocIndex:17},{value:": Use the ",paraId:35,tocIndex:17},{value:"children",paraId:35,tocIndex:17},{value:" array to simultaneously draw map background and bubble layers",paraId:35,tocIndex:17},{value:"For actual applications, to properly display map backgrounds, you need to:",paraId:37,tocIndex:21},{value:"Import map projection components",paraId:38,tocIndex:21},{value:"Load complete GeoJSON map data",paraId:38,tocIndex:21},{value:"Use correct transform configuration",paraId:38,tocIndex:21}]},42599:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(91293);const t=[{value:"A Bullet Chart is a linear chart type originally designed by data visualization expert Stephen Few as a more compact and information-rich alternative to traditional dashboard gauges. Bullet charts can simultaneously display actual values, target values, and performance ranges within a limited space, clearly showing the completion rate and performance status through comparison.",paraId:0,tocIndex:0},{value:"The design philosophy of bullet charts is to maximize the data-ink ratio, displaying the most useful information in the smallest space, making them particularly suitable for dashboard and performance monitoring scenarios.",paraId:1,tocIndex:0},{value:"English Names",paraId:2,tocIndex:0},{value:": Bullet Chart",paraId:2,tocIndex:0},{value:"Other Names",paraId:3,tocIndex:0},{value:": Progress Bar Chart, Target Comparison Chart, Bullet Graph",paraId:3,tocIndex:0},{value:"Chart Type",paraId:4,tocIndex:2},{value:"Bullet Chart",paraId:4,tocIndex:2},{value:"Suitable Data",paraId:4,tocIndex:2},{value:"One categorical data field, one continuous data field (actual value), one target value, optional performance ranges",paraId:4,tocIndex:2},{value:"Functionality",paraId:4,tocIndex:2},{value:"Display comparison between actual and target values, evaluate performance levels",paraId:4,tocIndex:2},{value:"Data Mapping",paraId:4,tocIndex:2},{value:"Categorical data field maps to vertical axis position",paraId:4,tocIndex:2},{value:"Continuous data field maps to bar length",paraId:4,tocIndex:2},{value:"Target value maps to marker line",paraId:4,tocIndex:2},{value:"Performance ranges map to background color bands",paraId:4,tocIndex:2},{value:"Data Size Limit",paraId:4,tocIndex:2},{value:"Single or multiple indicators, recommended not to exceed 10",paraId:4,tocIndex:2},{value:"The main components of a bullet chart include:",paraId:5,tocIndex:2},{value:"Actual Value Bar",paraId:6,tocIndex:2},{value:": Represented by a thick, dark-colored bar showing the current actual achieved value",paraId:6,tocIndex:2},{value:"Target Value Marker",paraId:6,tocIndex:2},{value:": Represented by a vertical line or other marker, indicating the target to be achieved",paraId:6,tocIndex:2},{value:"Performance Ranges",paraId:6,tocIndex:2},{value:": Background uses color bands of different shades, typically divided into poor, good, and excellent ranges",paraId:6,tocIndex:2},{value:"Scale Axis",paraId:6,tocIndex:2},{value:": Provides numerical reference to help readers understand specific numerical values",paraId:6,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst data = [\n  {\n    title: 'Sales Completion Rate',\n    ranges: 100,\n    measures: 80,\n    target: 85,\n  },\n];\n\nchart.options({\n  type: 'view',\n  coordinate: { transform: [{ type: 'transpose' }] },\n  children: [\n    {\n      type: 'interval',\n      data,\n      encode: { x: 'title', y: 'ranges', color: '#f0efff' },\n      style: { maxWidth: 30 },\n      axis: {\n        y: {\n          grid: true,\n          gridLineWidth: 2,\n          title: 'Completion Rate (%)',\n        },\n        x: {\n          title: false,\n        },\n      },\n    },\n    {\n      type: 'interval',\n      data,\n      encode: { x: 'title', y: 'measures', color: '#5B8FF9' },\n      style: { maxWidth: 20 },\n      label: {\n        text: 'measures',\n        position: 'right',\n        textAlign: 'left',\n        dx: 5,\n        formatter: (d) => `${d}%`,\n      },\n    },\n    {\n      type: 'point',\n      data,\n      encode: {\n        x: 'title',\n        y: 'target',\n        shape: 'line',\n        color: '#3D76DD',\n        size: 8,\n      },\n      tooltip: {\n        title: false,\n        items: [\n          {\n            channel: 'y',\n            name: 'Target Value',\n            valueFormatter: (d) => `${d}%`,\n          },\n        ],\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:7,tocIndex:2},{value:"Scenario 1: Performance Indicator Monitoring",paraId:8,tocIndex:4},{value:"Bullet charts are ideal tools for displaying performance indicator completion status, clearly comparing actual performance with target requirements.",paraId:9,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst colors = {\n  ranges: ['#ffebee', '#fff3e0', '#e8f5e8'],\n  measures: '#1890ff',\n  target: '#ff4d4f',\n};\n\n// Transform data structure\nconst transformedData = [\n  { title: 'Project Progress', value: 40, level: 'Poor' },\n  { title: 'Project Progress', value: 30, level: 'Good' },\n  { title: 'Project Progress', value: 30, level: 'Excellent' },\n];\n\nchart.options({\n  type: 'view',\n  coordinate: { transform: [{ type: 'transpose' }] },\n  children: [\n    {\n      type: 'interval',\n      data: transformedData,\n      encode: { x: 'title', y: 'value', color: 'level' },\n      transform: [{ type: 'stackY' }],\n      scale: {\n        color: {\n          domain: ['Poor', 'Good', 'Excellent'],\n          range: colors.ranges,\n        },\n      },\n      style: { maxWidth: 30 },\n    },\n    {\n      type: 'interval',\n      data: {\n        value: [\n          { title: 'Project Progress', value: 60, type: 'Actual Progress' },\n          { title: 'Project Progress', value: 80, type: 'Target Progress' },\n        ],\n        transform: [\n          { type: 'filter', callback: (d) => d.type === 'Actual Progress' },\n        ],\n      },\n      encode: { x: 'title', y: 'value', color: colors.measures },\n      style: { maxWidth: 16 },\n    },\n    {\n      type: 'point',\n      data: {\n        value: [\n          { title: 'Project Progress', value: 60, type: 'Actual Progress' },\n          { title: 'Project Progress', value: 80, type: 'Target Progress' },\n        ],\n        transform: [\n          { type: 'filter', callback: (d) => d.type === 'Target Progress' },\n        ],\n      },\n      encode: {\n        x: 'title',\n        y: 'value',\n        shape: 'line',\n        color: colors.target,\n        size: 8,\n      },\n      axis: { y: { grid: true, title: 'Progress (%)' }, x: { title: false } },\n    },\n  ],\n});\nchart.render();\n",paraId:10,tocIndex:4},{value:"Scenario 2: Budget Execution Tracking",paraId:11,tocIndex:4},{value:"Bullet charts can effectively display budget execution status, including actual expenditure, budget targets, and warning ranges.",paraId:12,tocIndex:4},{value:"Scenario 3: Resource Utilization Monitoring",paraId:13,tocIndex:4},{value:"Through bullet charts, you can intuitively understand the usage of various resources and identify overused or underutilized resources.",paraId:14,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst resourceData = [\n  {\n    resource: 'CPU Usage',\n    ranges: 100,\n    measures: 65,\n    target: 80,\n  },\n  {\n    resource: 'Memory Usage',\n    ranges: 100,\n    measures: 45,\n    target: 70,\n  },\n  {\n    resource: 'Disk Usage',\n    ranges: 100,\n    measures: 88,\n    target: 85,\n  },\n  {\n    resource: 'Network Bandwidth',\n    ranges: 100,\n    measures: 72,\n    target: 75,\n  },\n];\n\nchart.options({\n  type: 'view',\n  coordinate: { transform: [{ type: 'transpose' }] },\n  children: [\n    {\n      type: 'interval',\n      data: resourceData,\n      encode: { x: 'resource', y: 'ranges', color: '#f5f5f5' },\n      style: { maxWidth: 30 },\n    },\n    {\n      type: 'interval',\n      data: resourceData,\n      encode: {\n        x: 'resource',\n        y: 'measures',\n        color: (d) => (d.measures > d.target ? '#ff7875' : '#52c41a'),\n      },\n      style: { maxWidth: 20 },\n      label: {\n        text: 'measures',\n        position: 'right',\n        textAlign: 'left',\n        dx: 5,\n        formatter: (d) => `${d}%`,\n      },\n    },\n    {\n      type: 'point',\n      data: resourceData,\n      encode: {\n        x: 'resource',\n        y: 'target',\n        shape: 'line',\n        color: '#1890ff',\n        size: 6,\n      },\n      axis: {\n        y: {\n          grid: true,\n          title: 'Usage Rate (%)',\n        },\n        x: {\n          title: 'System Resources',\n        },\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:15,tocIndex:4},{value:"Scenario 1: Time Trend Analysis",paraId:16,tocIndex:5},{value:"Bullet charts primarily display status comparisons at a specific point in time and are not suitable for showing trends over time. Line charts should be used in such cases.",paraId:17,tocIndex:5},{value:"Scenario 2: Part-to-Whole Relationships",paraId:18,tocIndex:5},{value:"If you need to show the proportional relationship of parts to the whole, pie charts or donut charts are more appropriate.",paraId:19,tocIndex:5},{value:"Scenario 3: Large Data Volume",paraId:20,tocIndex:5},{value:"When displaying a large number of indicators, bullet charts can cause visual confusion. It's recommended to use grouped displays or other chart types.",paraId:21,tocIndex:5},{value:"Display the performance of multiple related indicators through grouping, facilitating horizontal comparison.",paraId:22,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst multiData = [\n  {\n    department: 'Sales',\n    indicator: 'Sales Revenue',\n    ranges: 100,\n    measures: 85,\n    target: 90,\n  },\n  {\n    department: 'Sales',\n    indicator: 'Customer Count',\n    ranges: 100,\n    measures: 92,\n    target: 85,\n  },\n  {\n    department: 'Marketing',\n    indicator: 'Brand Awareness',\n    ranges: 100,\n    measures: 78,\n    target: 80,\n  },\n  {\n    department: 'Marketing',\n    indicator: 'Marketing ROI',\n    ranges: 100,\n    measures: 88,\n    target: 85,\n  },\n];\n\nchart.options({\n  type: 'view',\n  coordinate: { transform: [{ type: 'transpose' }] },\n  children: [\n    {\n      type: 'interval',\n      data: multiData,\n      encode: { x: 'indicator', y: 'ranges', color: '#f0f0f0' },\n      style: { maxWidth: 30 },\n    },\n    {\n      type: 'interval',\n      data: multiData,\n      encode: { x: 'indicator', y: 'measures', color: 'department' },\n      style: { maxWidth: 20 },\n      label: {\n        text: 'measures',\n        position: 'right',\n        textAlign: 'left',\n        dx: 5,\n      },\n    },\n    {\n      type: 'point',\n      data: multiData,\n      encode: {\n        x: 'indicator',\n        y: 'target',\n        shape: 'line',\n        color: '#666',\n        size: 6,\n      },\n      axis: {\n        y: {\n          grid: true,\n          title: 'Completion Rate',\n        },\n        x: {\n          title: 'Key Indicators',\n        },\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:23,tocIndex:7},{value:"Provide more detailed performance evaluation criteria through background ranges of different color shades.",paraId:24,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst colors = {\n  ranges: ['#ffebee', '#fff3e0', '#e8f5e8'],\n  measures: '#1890ff',\n  target: '#ff4d4f',\n};\n\n// Transform data structure\nconst transformedData = [\n  { title: 'Project Progress', value: 40, level: 'Poor' },\n  { title: 'Project Progress', value: 30, level: 'Good' },\n  { title: 'Project Progress', value: 30, level: 'Excellent' },\n];\n\nchart.options({\n  type: 'view',\n  coordinate: { transform: [{ type: 'transpose' }] },\n  children: [\n    {\n      type: 'interval',\n      data: transformedData,\n      encode: { x: 'title', y: 'value', color: 'level' },\n      transform: [{ type: 'stackY' }],\n      scale: {\n        color: {\n          domain: ['Poor', 'Good', 'Excellent'],\n          range: colors.ranges,\n        },\n      },\n      style: { maxWidth: 30 },\n    },\n    {\n      type: 'interval',\n      data: {\n        value: [\n          { title: 'Project Progress', value: 60, type: 'Actual Progress' },\n          { title: 'Project Progress', value: 80, type: 'Target Progress' },\n        ],\n        transform: [\n          { type: 'filter', callback: (d) => d.type === 'Actual Progress' },\n        ],\n      },\n      encode: { x: 'title', y: 'value', color: colors.measures },\n      style: { maxWidth: 16 },\n    },\n    {\n      type: 'point',\n      data: {\n        value: [\n          { title: 'Project Progress', value: 60, type: 'Actual Progress' },\n          { title: 'Project Progress', value: 80, type: 'Target Progress' },\n        ],\n        transform: [\n          { type: 'filter', callback: (d) => d.type === 'Target Progress' },\n        ],\n      },\n      encode: {\n        x: 'title',\n        y: 'value',\n        shape: 'line',\n        color: colors.target,\n        size: 8,\n      },\n      axis: { y: { grid: true, title: 'Progress (%)' }, x: { title: false } },\n    },\n  ],\n});\nchart.render();\n",paraId:25,tocIndex:8},{value:"When space is limited or special layouts are needed, vertical bullet charts can be used.",paraId:26,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst verticalData = [\n  {\n    metric: 'Q1 Sales',\n    ranges: 100,\n    measures: 80,\n    target: 85,\n  },\n  {\n    metric: 'Q2 Sales',\n    ranges: 100,\n    measures: 92,\n    target: 88,\n  },\n  {\n    metric: 'Q3 Sales',\n    ranges: 100,\n    measures: 76,\n    target: 90,\n  },\n];\n\nchart.options({\n  type: 'view',\n  children: [\n    {\n      type: 'interval',\n      data: verticalData,\n      encode: { x: 'metric', y: 'ranges', color: '#f0f0f0' },\n      style: { maxWidth: 30 },\n    },\n    {\n      type: 'interval',\n      data: verticalData,\n      encode: { x: 'metric', y: 'measures', color: '#52c41a' },\n      style: { maxWidth: 20 },\n      label: {\n        text: 'measures',\n        position: 'top',\n        textAlign: 'center',\n        dy: -5,\n      },\n    },\n    {\n      type: 'point',\n      data: verticalData,\n      encode: {\n        x: 'metric',\n        y: 'target',\n        shape: 'line',\n        color: '#ff4d4f',\n        size: 6,\n      },\n      axis: {\n        y: {\n          grid: true,\n          title: 'Sales (10k CNY)',\n        },\n        x: {\n          title: 'Quarter',\n        },\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:27,tocIndex:9},{value:"Bar Chart",paraId:28,tocIndex:10},{value:"Bullet charts add target values and performance ranges to bar charts, providing richer comparison dimensions",paraId:29,tocIndex:11},{value:"Bar charts are mainly used to compare numerical values across different categories, while bullet charts focus on comparing actual values with target values",paraId:29,tocIndex:11},{value:"Gauge Chart",paraId:30,tocIndex:11},{value:"Bullet charts save more space than gauge charts and can display more information in the same space",paraId:31,tocIndex:12},{value:"Gauge charts more intuitively display the status of a single indicator, while bullet charts are more suitable for multi-indicator comparison",paraId:31,tocIndex:12},{value:"Progress Chart",paraId:32,tocIndex:12},{value:"Bullet charts provide more contextual information, including target values and performance ranges",paraId:33,tocIndex:13},{value:"Progress charts mainly show completion progress, while bullet charts can show the quality of performance",paraId:33,tocIndex:13}]},82876:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(24843);const t=[{value:"A Chord Diagram is a visualization method that displays the relationships between data in a matrix. Nodes are arranged radially around a circle, connected by weighted arcs that represent the relationships and flow between different entities. It's particularly effective for showing mutual relationships and flows between multiple entities.",paraId:0,tocIndex:0},{value:"Chord diagrams can intuitively display complex relationship networks between multiple nodes, especially suitable for visualizing bidirectional flow data such as population migration, trade flows, fund transfers, software dependencies, and other scenarios.",paraId:1,tocIndex:0},{value:"Other Names",paraId:2,tocIndex:0},{value:": Chord Chart, Chord Graph",paraId:2,tocIndex:0},{value:"Chart Type",paraId:3,tocIndex:1},{value:"Chord Diagram",paraId:3,tocIndex:1},{value:"Suitable Data",paraId:3,tocIndex:1},{value:"Node dataset (optional), edge dataset: source node, target node, flow value",paraId:3,tocIndex:1},{value:"Function",paraId:3,tocIndex:1},{value:"Observe node relationships, display bidirectional flow relationships between multiple entities",paraId:3,tocIndex:1},{value:"Data-to-Visual Mapping",paraId:3,tocIndex:1},{value:"Weight mapped to node and edge width",paraId:3,tocIndex:1},{value:"Source and target nodes mapped to arc positions on circle",paraId:3,tocIndex:1},{value:"Nodes can be distinguished by color",paraId:3,tocIndex:1},{value:"Suitable Data Volume",paraId:3,tocIndex:1},{value:"Two or more node groups, optimal with 5-15 nodes",paraId:3,tocIndex:1},{value:"Outer Arcs",paraId:4,tocIndex:2},{value:": Arc segments on the circle representing different categories or nodes, with arc length reflecting total flow of the node",paraId:4,tocIndex:2},{value:"Chords",paraId:4,tocIndex:2},{value:": Curves connecting different outer arcs, representing relationships between nodes, with curve thickness indicating flow magnitude",paraId:4,tocIndex:2},{value:"Labels",paraId:4,tocIndex:2},{value:": Text descriptions identifying each node",paraId:4,tocIndex:2},{value:"Colors",paraId:4,tocIndex:2},{value:": Used to distinguish different nodes or flow directions",paraId:4,tocIndex:2},{value:"Example 1: ",paraId:5,tocIndex:4},{value:"Suitable for displaying flow relationships",paraId:5,tocIndex:4},{value:"The following chart shows population flow between different cities, clearly displaying bidirectional flow relationships between cities through a chord diagram.",paraId:6,tocIndex:4},{value:"source (Source City)",paraId:7,tocIndex:4},{value:"target (Target City)",paraId:7,tocIndex:4},{value:"value (Population Flow)",paraId:7,tocIndex:4},{value:"Beijing",paraId:7,tocIndex:4},{value:"Shanghai",paraId:7,tocIndex:4},{value:"100,000",paraId:7,tocIndex:4},{value:"Beijing",paraId:7,tocIndex:4},{value:"Guangzhou",paraId:7,tocIndex:4},{value:"80,000",paraId:7,tocIndex:4},{value:"Shanghai",paraId:7,tocIndex:4},{value:"Beijing",paraId:7,tocIndex:4},{value:"70,000",paraId:7,tocIndex:4},{value:"Shanghai",paraId:7,tocIndex:4},{value:"Guangzhou",paraId:7,tocIndex:4},{value:"90,000",paraId:7,tocIndex:4},{value:"Guangzhou",paraId:7,tocIndex:4},{value:"Shenzhen",paraId:7,tocIndex:4},{value:"120,000",paraId:7,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'chord',\n  autoFit: true,\n  data: {\n    value: {\n      links: [\n        { source: 'Beijing', target: 'Shanghai', value: 100 },\n        { source: 'Beijing', target: 'Guangzhou', value: 80 },\n        { source: 'Beijing', target: 'Shenzhen', value: 60 },\n        { source: 'Shanghai', target: 'Beijing', value: 70 },\n        { source: 'Shanghai', target: 'Guangzhou', value: 90 },\n        { source: 'Shanghai', target: 'Shenzhen', value: 50 },\n        { source: 'Guangzhou', target: 'Beijing', value: 40 },\n        { source: 'Guangzhou', target: 'Shanghai', value: 85 },\n        { source: 'Guangzhou', target: 'Shenzhen', value: 120 },\n        { source: 'Shenzhen', target: 'Beijing', value: 35 },\n        { source: 'Shenzhen', target: 'Shanghai', value: 45 },\n        { source: 'Shenzhen', target: 'Guangzhou', value: 110 },\n      ],\n    },\n  },\n  layout: { nodeWidthRatio: 0.05 },\n  scale: {\n    color: {\n      type: 'ordinal',\n      range: ['#5B8FF9', '#5AD8A6', '#F6BD16', '#E86452'],\n    },\n  },\n  style: {\n    labelFontSize: 12,\n    labelFill: '#333',\n    linkFillOpacity: 0.6,\n  },\n  tooltip: {\n    items: [\n      { field: 'source', name: 'Source City' },\n      { field: 'target', name: 'Target City' },\n      { field: 'value', name: 'Population Flow' },\n    ],\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:8,tocIndex:4},{value:"Example 2: ",paraId:9,tocIndex:4},{value:"Displaying software dependencies",paraId:9,tocIndex:4},{value:"The following chart shows dependency relationships between software packages. Each node represents an independent package, and each edge shows the dependency relationship between packages. The thickness of edges indicates the strength of dependencies.",paraId:10,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'chord',\n  autoFit: true,\n  data: {\n    value: {\n      links: [\n        { source: 'vis.core', target: 'vis.data', value: 85 },\n        { source: 'vis.core', target: 'vis.event', value: 45 },\n        { source: 'vis.core', target: 'vis.util', value: 120 },\n        { source: 'vis.data', target: 'vis.core', value: 30 },\n        { source: 'vis.data', target: 'vis.util', value: 60 },\n        { source: 'vis.event', target: 'vis.core', value: 25 },\n        { source: 'vis.event', target: 'vis.data', value: 40 },\n        { source: 'vis.util', target: 'vis.core', value: 15 },\n        { source: 'vis.render', target: 'vis.core', value: 95 },\n        { source: 'vis.render', target: 'vis.util', value: 55 },\n        { source: 'vis.layout', target: 'vis.core', value: 75 },\n        { source: 'vis.layout', target: 'vis.util', value: 35 },\n      ],\n    },\n  },\n  layout: { nodeWidthRatio: 0.05 },\n  scale: {\n    color: {\n      type: 'ordinal',\n      range: ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd'],\n    },\n  },\n  style: {\n    labelFontSize: 11,\n    labelFill: '#333',\n    linkFillOpacity: 0.6,\n  },\n  tooltip: {\n    items: [\n      { field: 'source', name: 'Source Package' },\n      { field: 'target', name: 'Target Package' },\n      { field: 'value', name: 'Dependency Strength' },\n    ],\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:11,tocIndex:4},{value:"Description",paraId:12,tocIndex:4},{value:":",paraId:12,tocIndex:4},{value:"Nodes represent different software package modules",paraId:13,tocIndex:4},{value:"Edge thickness indicates the strength of dependency relationships",paraId:13,tocIndex:4},{value:"Colors distinguish different packages, making it easier to identify circular dependencies",paraId:13,tocIndex:4},{value:"Example 1: ",paraId:14,tocIndex:5},{value:"Too many nodes leading to poor readability",paraId:14,tocIndex:5},{value:"When the number of nodes exceeds 15, chord diagrams become crowded and difficult to read, with severely overlapping connection lines.",paraId:15,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\n// Simulate data for 20 provinces, too many nodes leading to poor readability\nconst provinces = [\n  'Beijing',\n  'Shanghai',\n  'Guangzhou',\n  'Shenzhen',\n  'Hangzhou',\n  'Nanjing',\n  'Wuhan',\n  'Chengdu',\n  'Xian',\n  'Chongqing',\n  'Tianjin',\n  'Suzhou',\n  'Qingdao',\n  'Dalian',\n  'Xiamen',\n  'Ningbo',\n  'Changsha',\n  'Zhengzhou',\n  'Jinan',\n  'Fuzhou',\n];\n\nconst data = [];\nprovinces.forEach((source, i) => {\n  provinces.forEach((target, j) => {\n    if (i !== j && Math.random() > 0.7) {\n      data.push({\n        source,\n        target,\n        value: Math.floor(Math.random() * 50) + 10,\n      });\n    }\n  });\n});\n\nchart.options({\n  type: 'chord',\n  autoFit: true,\n  data: {\n    value: {\n      links: data.slice(0, 40), // Only take first 40 data points for demo\n    },\n  },\n  layout: { nodeWidthRatio: 0.05 },\n  style: {\n    labelFontSize: 8, // Smaller font to accommodate more labels\n    labelFill: '#666',\n    linkFillOpacity: 0.5,\n  },\n});\n\nchart.render();\n",paraId:16,tocIndex:5},{value:"Example 2: ",paraId:17,tocIndex:5},{value:"Not suitable for displaying hierarchical relationships",paraId:17,tocIndex:5},{value:"Chord diagrams are mainly used to show relationships between equal nodes and are not suitable for displaying data with obvious hierarchical structures.",paraId:18,tocIndex:5},{value:"Chord diagrams are mainly used to display bidirectional flow relationships between nodes, emphasizing connections and flows",paraId:19,tocIndex:7},{value:"Radar charts are mainly used for multi-dimensional data comparison, displaying values across dimensions through polygons",paraId:19,tocIndex:7},{value:"Chord diagrams display relationship networks through circular layout and connecting arcs, suitable for flow data",paraId:20,tocIndex:8},{value:"Area charts display numerical trends through filled areas, suitable for time series data",paraId:20,tocIndex:8}]},7255:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(49980);const t=[{value:"A Choropleth Map is a type of map that uses visual symbols (usually colors, shading, or hatching of varying density) to represent the distribution of a range of values on map subdivisions. Within multiple small subdivision units (administrative divisions or other subdivision units) of the entire mapping area, classifications are made according to the quantitative (relative) indicators of each subdivision, and corresponding color grades or hatching of different densities are used to reflect the concentration or development level distribution differences of phenomena in each area. It is most commonly seen in the visualization of election and census data, which are organized by geographic regions such as provinces and cities.",paraId:0},{value:"This method is also called color-graded statistical mapping because it commonly uses color grades for representation. The quantity of each subdivision on the map is represented using different color grades, with typical methods including: (1) mixed gradient from one color to another; (2) single-tone gradient; (3) transparent to opaque; (4) light to dark; (5) using a complete color spectrum variation. Choropleth maps rely on colors to express the inherent patterns in data, so choosing appropriate colors is very important. When the data value range is large or the data types are diverse, choosing appropriate color mapping can be quite challenging.",paraId:1,tocIndex:0},{value:"Choropleth maps' biggest problem is the asymmetry between data distribution and geographic region size. Usually, large amounts of data are concentrated in densely populated areas, while sparsely populated areas occupy most of the screen space. Using large amounts of screen space to represent small portions of data is very uneconomical in terms of space utilization. This asymmetry often causes users to misunderstand the data and cannot help users accurately distinguish and compare data values in different subdivisions on the map.",paraId:2,tocIndex:0},{value:"\n  ",paraId:3},{value:"Other Names",paraId:4,tocIndex:0},{value:": Thematic Map, Shaded Map",paraId:4,tocIndex:0},{value:"Chart Type",paraId:5,tocIndex:1},{value:"Choropleth Map",paraId:5,tocIndex:1},{value:"Suitable Data",paraId:5,tocIndex:1},{value:"One categorical field, one continuous field",paraId:5,tocIndex:1},{value:"Function",paraId:5,tocIndex:1},{value:"Compare numerical values of categorical data",paraId:5,tocIndex:1},{value:"Data-to-Visual Mapping",paraId:5,tocIndex:1},{value:"One categorical field maps to geographic locations on the map",paraId:5,tocIndex:1},{value:"Another continuous field maps to color",paraId:5,tocIndex:1},{value:"Suitable Data Volume",paraId:5,tocIndex:1},{value:"Based on actual geographic location information, no limit",paraId:5,tocIndex:1},{value:"Choropleth maps are mostly used to reflect phenomena that are planar but sparsely distributed, such as population density, the ratio of sown area of a certain crop, and per capita income.",paraId:6,tocIndex:3},{value:"Example 1: ",paraId:7,tocIndex:3},{value:"Geographic Regional Data Visualization",paraId:7,tocIndex:3},{value:"The figure below shows the population distribution of US states. The main population distribution is reflected by the color depth. It is clear that California and Texas have the largest populations. It also shows the global gender ratio distribution in 2015, where the value represents the number of males per 100 females. It can be seen that in European and American countries, women generally slightly outnumber men. This phenomenon is particularly prominent in the former Soviet Union region, while the Middle East has more men than women.",paraId:8,tocIndex:3},{value:"Data Type",paraId:9,tocIndex:3},{value:"Region/Country",paraId:9,tocIndex:3},{value:"Value",paraId:9,tocIndex:3},{value:"Description",paraId:9,tocIndex:3},{value:"Population",paraId:9,tocIndex:3},{value:"California",paraId:9,tocIndex:3},{value:"38802500",paraId:9,tocIndex:3},{value:"CA",paraId:9,tocIndex:3},{value:"Population",paraId:9,tocIndex:3},{value:"Texas",paraId:9,tocIndex:3},{value:"26956958",paraId:9,tocIndex:3},{value:"TX",paraId:9,tocIndex:3},{value:"Population",paraId:9,tocIndex:3},{value:"Florida",paraId:9,tocIndex:3},{value:"19893297",paraId:9,tocIndex:3},{value:"FL",paraId:9,tocIndex:3},{value:"...",paraId:9,tocIndex:3},{value:"...",paraId:9,tocIndex:3},{value:"...",paraId:9,tocIndex:3},{value:"...",paraId:9,tocIndex:3},{value:"Gender Ratio",paraId:9,tocIndex:3},{value:"Russia",paraId:9,tocIndex:3},{value:"86.8",paraId:9,tocIndex:3},{value:"Males per 100 females",paraId:9,tocIndex:3},{value:"Gender Ratio",paraId:9,tocIndex:3},{value:"China",paraId:9,tocIndex:3},{value:"106.3",paraId:9,tocIndex:3},{value:"Males per 100 females",paraId:9,tocIndex:3},{value:"Gender Ratio",paraId:9,tocIndex:3},{value:"Japan",paraId:9,tocIndex:3},{value:"94.7",paraId:9,tocIndex:3},{value:"Males per 100 females",paraId:9,tocIndex:3},{value:"...",paraId:9,tocIndex:3},{value:"...",paraId:9,tocIndex:3},{value:"...",paraId:9,tocIndex:3},{value:"...",paraId:9,tocIndex:3},{value:"import { Chart } from '@antv/g2';\nimport { feature } from 'topojson-client';\n\n// Load map and data\nPromise.all([\n  fetch('https://assets.antv.antgroup.com/g2/us-10m.json').then((res) =>\n    res.json(),\n  ),\n  fetch('https://assets.antv.antgroup.com/g2/unemployment2.json').then((res) =>\n    res.json(),\n  ),\n]).then(([us, unemployment]) => {\n  const counties = feature(us, us.objects.counties).features;\n\n  const chart = new Chart({\n    container: 'container',\n    autoFit: true,\n  });\n\n  chart.options({\n    type: 'geoPath',\n    coordinate: {\n      type: 'albersUsa', // Use US-specific map projection\n    },\n    data: {\n      value: counties,\n      transform: [\n        {\n          type: 'join',\n          join: unemployment,\n          on: ['id', 'id'],\n          select: ['rate'],\n        },\n      ],\n    },\n    scale: {\n      color: {\n        palette: 'ylGnBu', // Use yellow-to-blue gradient palette\n        unknown: '#fff', // Display unknown data as white\n      },\n    },\n    encode: {\n      color: 'rate', // Map unemployment rate to color channel\n    },\n    legend: {\n      color: {\n        layout: { justifyContent: 'center' }, // Adjust legend layout\n      },\n    },\n    style: {\n      stroke: '#666',\n      strokeWidth: 0.5,\n    },\n    tooltip: {\n      title: (d) => d.properties.name,\n      items: [{ field: 'rate', name: 'Unemployment Rate' }],\n    },\n  });\n\n  chart.render();\n});\n",paraId:10,tocIndex:3},{value:"Note",paraId:11,tocIndex:3},{value:":",paraId:11,tocIndex:3},{value:"The numeric field is mapped to color, representing the size of the data.",paraId:12,tocIndex:3},{value:"The name of the geographic area determines where the area is drawn on the map.",paraId:12,tocIndex:3},{value:"For smaller blocks, because the value is also smaller, the rendered color is also lighter, making these blocks difficult to see on the map. This is also a limitation of choropleth maps.",paraId:12,tocIndex:3},{value:"Displaying Precise Values",paraId:13,tocIndex:4},{value:": Choropleth maps are mainly used to show the relative size and distribution trend of data, and are not suitable for scenarios that require precise numerical reading.",paraId:13,tocIndex:4},{value:"Excessive Differences in Regional Area",paraId:13,tocIndex:4},{value:": When the regional area differences are very large, the larger area will visually dominate, even if its corresponding value is small, which may mislead users. At this time, consider using other types of maps such as bubble maps.",paraId:13,tocIndex:4},{value:"Data Not Geographically Relevant",paraId:13,tocIndex:4},{value:": If the data is not directly related to geographic location, using a choropleth map is meaningless.",paraId:13,tocIndex:4},{value:"Example 1: ",paraId:14,tocIndex:4},{value:"2008 US Presidential Election Results",paraId:14,tocIndex:4},{value:"Election visualization can easily give users the illusion of asymmetry between data distribution and geographic area size. States won by Democratic candidate Obama and Republican candidate McCain are represented in blue and red, respectively. From the map, it appears that the Republican Party received more votes than the Democratic Party because the red area occupies a larger area. However, in the US presidential election, the final result depends on the number of electoral votes obtained by the candidate. Each state has a different number of electoral votes, and the candidate who wins in a state will receive all the electoral votes of that state. At this time, it is recommended to use a dot map.",paraId:15,tocIndex:4},{value:"State",paraId:16,tocIndex:4},{value:"Electoral Votes",paraId:16,tocIndex:4},{value:"Obama Votes",paraId:16,tocIndex:4},{value:"McCain Votes",paraId:16,tocIndex:4},{value:"Alabama",paraId:16,tocIndex:4},{value:"9",paraId:16,tocIndex:4},{value:"813479",paraId:16,tocIndex:4},{value:"1266546",paraId:16,tocIndex:4},{value:"Arizona",paraId:16,tocIndex:4},{value:"10",paraId:16,tocIndex:4},{value:"1034707",paraId:16,tocIndex:4},{value:"638017",paraId:16,tocIndex:4},{value:"Arkansas",paraId:16,tocIndex:4},{value:"6",paraId:16,tocIndex:4},{value:"422310",paraId:16,tocIndex:4},{value:"638017",paraId:16,tocIndex:4},{value:"Bubble Maps",paraId:17,tocIndex:5},{value:"Choropleth Maps",paraId:18,tocIndex:6},{value:": Maps numerical values to the color of map areas, suitable for displaying the distribution of continuous data.",paraId:18,tocIndex:6},{value:"Bubble Maps",paraId:18,tocIndex:6},{value:": Displays a bubble on the map area, with the size of the bubble representing the numerical value, suitable for displaying discrete point data or avoiding misleading when regional area differences are large.",paraId:18,tocIndex:6},{value:"Choropleth maps can often lead to misjudgment, as large areas may have small numerical values (population, electoral votes, etc.).",paraId:19,tocIndex:6},{value:"Dot Maps",paraId:20,tocIndex:6},{value:"Dot Maps",paraId:21,tocIndex:7},{value:": Mainly used to display data at a specific longitude and latitude, while choropleth maps are used to display statistical values for a certain area.",paraId:21,tocIndex:7},{value:"Dot Maps",paraId:21,tocIndex:7},{value:": Can display a large amount of data values, while choropleth maps are limited by the display area.",paraId:21,tocIndex:7}]},93173:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(74636);const t=[{value:"A typical color map is a visualization chart that uses color to encode numerical data. It divides a rectangular area into a grid, with each grid cell representing an intersection point of categorical data, using color depth to indicate the magnitude of values. Unlike heat maps, color maps are typically used to display relationships between discrete categorical data rather than continuous data distributions.",paraId:0,tocIndex:0},{value:"Color maps are particularly suitable for showing relationships and patterns between multiple categorical variables, such as sales of different products across different time periods, or temperature changes across different regions over different years. Through color encoding, users can quickly identify high and low value areas and overall distribution patterns in the dataset.",paraId:1,tocIndex:0},{value:"It's important to note that when there are too many categories in a color map, it may lead to label overlap and readability issues, which we'll illustrate with examples below.",paraId:2,tocIndex:0},{value:"Other Names",paraId:3,tocIndex:0},{value:": Color Block Chart",paraId:3,tocIndex:0},{value:"Chart Type",paraId:4,tocIndex:2},{value:"Basic Color Map",paraId:4,tocIndex:2},{value:"Suitable Data",paraId:4,tocIndex:2},{value:"Datasets with two categorical dimensions and one numerical dimension",paraId:4,tocIndex:2},{value:"Function",paraId:4,tocIndex:2},{value:"Display relationships between two categorical dimensions and one numerical variable",paraId:4,tocIndex:2},{value:"Data-to-Visual Mapping",paraId:4,tocIndex:2},{value:"Two categorical data dimensions mapped to grid rows and columns",paraId:4,tocIndex:2},{value:"Numerical data mapped to color depth",paraId:4,tocIndex:2},{value:"Text labels can be added to display specific values",paraId:4,tocIndex:2},{value:"Suitable Data Count",paraId:4,tocIndex:2},{value:"Usually no more than 20 categories per dimension, with total cells recommended not to exceed 400",paraId:4,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { month: 'January', product: 'Product A', sales: 123 },\n    { month: 'January', product: 'Product B', sales: 231 },\n    { month: 'January', product: 'Product C', sales: 145 },\n    { month: 'February', product: 'Product A', sales: 132 },\n    { month: 'February', product: 'Product B', sales: 112 },\n    { month: 'February', product: 'Product C', sales: 178 },\n    { month: 'March', product: 'Product A', sales: 99 },\n    { month: 'March', product: 'Product B', sales: 288 },\n    { month: 'March', product: 'Product C', sales: 133 },\n    { month: 'April', product: 'Product A', sales: 181 },\n    { month: 'April', product: 'Product B', sales: 223 },\n    { month: 'April', product: 'Product C', sales: 141 },\n    { month: 'May', product: 'Product A', sales: 152 },\n    { month: 'May', product: 'Product B', sales: 219 },\n    { month: 'May', product: 'Product C', sales: 109 },\n    { month: 'June', product: 'Product A', sales: 167 },\n    { month: 'June', product: 'Product B', sales: 187 },\n    { month: 'June', product: 'Product C', sales: 255 },\n  ],\n  coordinate: {\n    type: 'cartesian',\n  },\n  children: [\n    {\n      type: 'cell',\n      encode: {\n        x: 'month',\n        y: 'product',\n        color: 'sales',\n        link: 'sales',\n      },\n      style: {\n        inset: 1,\n      },\n      labels: [\n        {\n          text: 'sales',\n          style: {\n            fill: (d) => (d.sales > 200 ? '#fff' : '#000'),\n          },\n        },\n      ],\n    },\n  ],\n  legend: {\n    color: {\n      position: 'right',\n      flipPage: false,\n    },\n  },\n  scale: {\n    color: {\n      palette: 'rdBu',\n      offset: (t) => 1 - t,\n    },\n  },\n});\n\nchart.render();\n",paraId:5,tocIndex:2},{value:"Chart Type",paraId:6,tocIndex:3},{value:"Color Map with Conditional Formatting",paraId:6,tocIndex:3},{value:"Suitable Data",paraId:6,tocIndex:3},{value:"Datasets that need to highlight specific thresholds or ranges",paraId:6,tocIndex:3},{value:"Function",paraId:6,tocIndex:3},{value:"Apply different color encodings based on different value ranges, highlighting key data points",paraId:6,tocIndex:3},{value:"Data-to-Visual Mapping",paraId:6,tocIndex:3},{value:"In addition to basic color map mappings, custom color intervals and boundary markers can be added",paraId:6,tocIndex:3},{value:"Usage Suggestions",paraId:6,tocIndex:3},{value:"Add clear legend explanations for different color intervals",paraId:6,tocIndex:3},{value:"Use contrasting colors to represent different data states",paraId:6,tocIndex:3},{value:"Avoid using too many color intervals which can cause confusion",paraId:6,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst data = [\n  { month: 'January', product: 'Product A', sales: 123, target: 150 },\n  { month: 'January', product: 'Product B', sales: 231, target: 200 },\n  { month: 'January', product: 'Product C', sales: 145, target: 150 },\n  { month: 'February', product: 'Product A', sales: 132, target: 150 },\n  { month: 'February', product: 'Product B', sales: 112, target: 200 },\n  { month: 'February', product: 'Product C', sales: 178, target: 150 },\n  { month: 'March', product: 'Product A', sales: 99, target: 150 },\n  { month: 'March', product: 'Product B', sales: 288, target: 200 },\n  { month: 'March', product: 'Product C', sales: 133, target: 150 },\n  { month: 'April', product: 'Product A', sales: 181, target: 150 },\n  { month: 'April', product: 'Product B', sales: 223, target: 200 },\n  { month: 'April', product: 'Product C', sales: 141, target: 150 },\n  { month: 'May', product: 'Product A', sales: 152, target: 150 },\n  { month: 'May', product: 'Product B', sales: 219, target: 200 },\n  { month: 'May', product: 'Product C', sales: 109, target: 150 },\n  { month: 'June', product: 'Product A', sales: 167, target: 150 },\n  { month: 'June', product: 'Product B', sales: 187, target: 200 },\n  { month: 'June', product: 'Product C', sales: 255, target: 150 },\n];\n\n// Calculate performance status for each cell\nconst processedData = data.map((d) => ({\n  ...d,\n  // Calculate ratio to target\n  performance: d.sales / d.target,\n  // Add status label\n  status:\n    d.sales < d.target * 0.8\n      ? 'Below Target'\n      : d.sales < d.target\n      ? 'Near Target'\n      : d.sales < d.target * 1.2\n      ? 'Met Target'\n      : 'Exceeded Target',\n}));\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: processedData,\n  coordinate: {\n    type: 'cartesian',\n  },\n  children: [\n    {\n      type: 'cell',\n      encode: {\n        x: 'month',\n        y: 'product',\n        color: 'performance',\n      },\n      style: {\n        inset: 1,\n      },\n      labels: [\n        {\n          text: (d) => `${d.sales}/${d.target}`,\n          style: {\n            fill: (d) => (d.performance > 0.95 ? '#fff' : '#000'),\n            textAlign: 'center',\n            fontSize: 11,\n          },\n        },\n      ],\n    },\n  ],\n  legend: {\n    color: {\n      position: 'right',\n      flipPage: false,\n    },\n  },\n  scale: {\n    color: {\n      type: 'threshold',\n      domain: [0.8, 1, 1.2],\n      range: ['#F4664A', '#FAAD14', '#30BF78', '#0891B2'],\n    },\n  },\n});\n\nchart.render();\n",paraId:7,tocIndex:3},{value:"Example 1: ",paraId:8,tocIndex:5},{value:"Hangzhou Metro Fare Chart",paraId:8,tocIndex:5},{value:"The chart below is a simulation of Hangzhou Metro fare chart. This color map shows the fare relationship between different metro stations, with color depth representing different fare levels. You can quickly identify fare zones and the cost of traveling between any two stations.",paraId:9,tocIndex:5},{value:"from",paraId:10,tocIndex:5},{value:"to",paraId:10,tocIndex:5},{value:"price",paraId:10,tocIndex:5},{value:"Xianghu",paraId:10,tocIndex:5},{value:"Binhe Road",paraId:10,tocIndex:5},{value:"2",paraId:10,tocIndex:5},{value:"Xianghu",paraId:10,tocIndex:5},{value:"Xixing",paraId:10,tocIndex:5},{value:"3",paraId:10,tocIndex:5},{value:"...",paraId:10,tocIndex:5},{value:"...",paraId:10,tocIndex:5},{value:"...",paraId:10,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  height: 500,\n});\n\n// Metro stations on Line 1\nconst sites = [\n  'Xianghu',\n  'Binkang Road',\n  'Xixing',\n  'Binhe Road',\n  'Jiangling Road',\n  'Jinjiang',\n  'Wujiang Road',\n  'Chengzhan',\n  \"Ding'an Road\",\n  'Longxiang Bridge',\n  'Fengqi Road',\n  'Wulin Square',\n  'West Lake Cultural Square',\n  'Datieguan',\n  'East Railway Station',\n  'Zhalongkou',\n  'Pengbu',\n  'Qibao',\n  'Jiuhe Road',\n  'Jiubao',\n  'Passenger Transport Center',\n  'Xiaxi West',\n  'Jinsha Lake',\n  'Gaosha Road',\n  'Wenze Road',\n];\n\n// Generate metro fare data\nconst data = [];\nfor (let i = 0; i < sites.length; i++) {\n  for (let j = sites.length - 1; j >= i; j--) {\n    let price = 0;\n    const step = Math.abs(j - i);\n    if (step <= 2) {\n      price = 2;\n    } else if (step <= 4) {\n      price = 3;\n    } else if (step <= 7) {\n      price = 4;\n    } else if (step <= 13) {\n      price = 5;\n    } else if (step <= 16) {\n      price = 6;\n    } else if (step <= 21) {\n      price = 7;\n    } else {\n      price = 8;\n    }\n    data.push({ from: sites[i], to: sites[j], price: price });\n  }\n}\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data,\n  coordinate: {\n    type: 'cartesian',\n  },\n  children: [\n    {\n      type: 'cell',\n      encode: {\n        x: 'from',\n        y: 'to',\n        color: 'price',\n      },\n      style: {\n        inset: 1,\n        stroke: '#fff',\n        strokeWidth: 1,\n      },\n      labels: [\n        {\n          text: 'price',\n          style: {\n            fill: (d) => (d.price > 5 ? '#fff' : '#000'),\n            textAlign: 'center',\n            fontSize: 10,\n          },\n        },\n      ],\n    },\n  ],\n  legend: {\n    color: {\n      position: 'right',\n      title: 'Fare (CNY)',\n      flipPage: false,\n    },\n  },\n  scale: {\n    color: {\n      domain: [2, 3, 4, 5, 6, 7, 8],\n      range: [\n        '#ffffcc',\n        '#c7e9b4',\n        '#7fcdbb',\n        '#41b6c4',\n        '#2c7fb8',\n        '#253494',\n        '#081d58',\n      ],\n    },\n    from: {\n      values: sites,\n    },\n    to: {\n      values: sites.slice().reverse(),\n    },\n  },\n  axis: {\n    x: {\n      title: false,\n      grid: false,\n      tickLine: false,\n      labelRotate: -Math.PI / 4,\n      labelOffset: 5,\n    },\n    y: {\n      title: false,\n      grid: false,\n      tickLine: false,\n    },\n  },\n});\n\nchart.render();\n",paraId:11,tocIndex:5},{value:"Analysis",paraId:12,tocIndex:5},{value:":",paraId:12,tocIndex:5},{value:"Station names are mapped to the ",paraId:13,tocIndex:5},{value:"x",paraId:13,tocIndex:5},{value:" and ",paraId:13,tocIndex:5},{value:"y",paraId:13,tocIndex:5},{value:" axis to determine position",paraId:13,tocIndex:5},{value:"Fare prices are mapped to color depth",paraId:13,tocIndex:5},{value:"Fare data is simulated and only represents general relationships",paraId:13,tocIndex:5},{value:"The color map makes it easy to identify fare zones and travel costs between stations",paraId:13,tocIndex:5},{value:"Example 2: ",paraId:14,tocIndex:5},{value:"Exam Score Analysis",paraId:14,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst students = [\n  'Alex',\n  'Ben',\n  'Charlie',\n  'David',\n  'Emma',\n  'Frank',\n  'Grace',\n  'Helen',\n];\nconst subjects = [\n  'Math',\n  'English',\n  'Physics',\n  'Chemistry',\n  'Biology',\n  'History',\n];\n\n// Generate score data\nconst data = [];\nstudents.forEach((student) => {\n  subjects.forEach((subject) => {\n    // Random score between 50-100\n    const score = Math.floor(Math.random() * 51) + 50;\n    data.push({\n      student,\n      subject,\n      score,\n    });\n  });\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data,\n  coordinate: {\n    type: 'cartesian',\n  },\n  children: [\n    {\n      type: 'cell',\n      encode: {\n        x: 'subject',\n        y: 'student',\n        color: 'score',\n      },\n      style: {\n        inset: 1,\n      },\n      labels: [\n        {\n          text: 'score',\n          style: {\n            fill: (d) => (d.score > 85 ? '#fff' : '#000'),\n            textAlign: 'center',\n          },\n        },\n      ],\n    },\n  ],\n  legend: {\n    color: {\n      position: 'right',\n      flipPage: false,\n      title: 'Score',\n    },\n  },\n  scale: {\n    color: {\n      domain: [60, 70, 80, 90],\n      range: ['#F4664A', '#FAAD14', '#30BF78', '#0891B2', '#5B8FF9'],\n    },\n  },\n});\n\nchart.render();\n",paraId:15,tocIndex:5},{value:"Example 1: ",paraId:16,tocIndex:6},{value:"Too Few Data Points",paraId:16,tocIndex:6},{value:"When a dataset has only a few category intersections, a color map may not be the best choice. In such cases, a simple table or bar chart might be more intuitive.",paraId:17,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\n// Very few data points\nconst data = [\n  { region: 'East', year: '2022', value: 125 },\n  { region: 'West', year: '2022', value: 87 },\n];\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data,\n  children: [\n    {\n      type: 'cell',\n      encode: {\n        x: 'year',\n        y: 'region',\n        color: 'value',\n      },\n      style: {\n        inset: 1,\n      },\n      labels: [\n        {\n          text: 'value',\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:18,tocIndex:6},{value:"In this case, using a bar chart would be more intuitive:",paraId:19,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { region: 'East', year: '2022', value: 125 },\n    { region: 'West', year: '2022', value: 87 },\n  ],\n  encode: {\n    x: 'region',\n    y: 'value',\n    color: 'region',\n  },\n  labels: [\n    {\n      text: 'value',\n      position: 'top',\n    },\n  ],\n});\n\nchart.render();\n",paraId:20,tocIndex:6},{value:"Example 2: ",paraId:21,tocIndex:6},{value:"Need to Show Precise Trend Changes",paraId:21,tocIndex:6},{value:"When you need to show precise changes in trends over time, a color map is not as intuitive as a line chart. Below is an example of using a color map to show monthly data changes, but this situation is better suited for a line chart.",paraId:22,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst months = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec',\n];\nconst data = months.map((month, index) => ({\n  month,\n  metric: 'Sales',\n  value: 100 + Math.sin(index / 2) * 50 + Math.random() * 10,\n}));\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data,\n  children: [\n    {\n      type: 'cell',\n      encode: {\n        x: 'month',\n        y: 'metric',\n        color: 'value',\n      },\n      style: {\n        inset: 1,\n      },\n      labels: [\n        {\n          text: (d) => d.value.toFixed(0),\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:23,tocIndex:6},{value:"Using a line chart is more suitable for showing trends:",paraId:24,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst months = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec',\n];\nconst data = months.map((month, index) => ({\n  month,\n  value: 100 + Math.sin(index / 2) * 50 + Math.random() * 10,\n}));\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data,\n  encode: {\n    x: 'month',\n    y: 'value',\n  },\n  style: {\n    lineWidth: 2,\n    point: {\n      fill: '#1890ff',\n      r: 4,\n    },\n  },\n  labels: [\n    {\n      text: (d) => d.value.toFixed(0),\n      position: 'top',\n    },\n  ],\n});\n\nchart.render();\n",paraId:25,tocIndex:6},{value:"Heat Maps",paraId:26,tocIndex:7},{value:"Treemaps",paraId:27,tocIndex:7},{value:"Chart Type",paraId:28,tocIndex:8},{value:"Main Features",paraId:28,tocIndex:8},{value:"Suitable Scenarios",paraId:28,tocIndex:8},{value:"Data Requirements",paraId:28,tocIndex:8},{value:"Color Map",paraId:28,tocIndex:8},{value:"Uses a regular grid to show intersections of two categorical dimensions",paraId:28,tocIndex:8},{value:"Comparing relationships between categorical data",paraId:28,tocIndex:8},{value:"Two categorical dimensions and one numerical dimension",paraId:28,tocIndex:8},{value:"Heat Map",paraId:28,tocIndex:8},{value:"Can use continuous scales, showing spatial distribution of data",paraId:28,tocIndex:8},{value:"Displaying spatial density or intensity distribution",paraId:28,tocIndex:8},{value:"Usually requires continuous or near-continuous data",paraId:28,tocIndex:8},{value:"Treemap",paraId:28,tocIndex:8},{value:"Displays hierarchical data through nested rectangles",paraId:28,tocIndex:8},{value:"Representing proportional relationships in hierarchical data",paraId:28,tocIndex:8},{value:"Requires a clear hierarchical structure",paraId:28,tocIndex:8},{value:"Color Selection",paraId:29,tocIndex:10},{value:"Use sequential color palettes to represent changes in continuous data magnitude",paraId:30,tocIndex:10},{value:"Use diverging color palettes to represent deviation from a center value",paraId:30,tocIndex:10},{value:"Add clear legends and explanations for colors",paraId:30,tocIndex:10},{value:"Grid Design",paraId:31,tocIndex:10},{value:"Keep grid cell sizes consistent to ensure readability",paraId:32,tocIndex:10},{value:"Add value labels in cells to enhance precision",paraId:32,tocIndex:10},{value:"Consider adding spaces between cells to improve distinction",paraId:32,tocIndex:10},{value:"Labels and Interaction",paraId:33,tocIndex:10},{value:"Add labels for important data points",paraId:34,tocIndex:10},{value:"Add hover interactions to display detailed information",paraId:34,tocIndex:10},{value:"Consider adding sorting functionality for easier data comparison",paraId:34,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\n// 生成示例数据\nconst rows = ['A', 'B', 'C', 'D', 'E'];\nconst cols = ['P1', 'P2', 'P3', 'P4', 'P5', 'P6'];\nconst data = [];\n\nrows.forEach((row) => {\n  cols.forEach((col) => {\n    const value = Math.floor(Math.random() * 100);\n    const baseline = 50;\n    data.push({\n      row,\n      col,\n      value,\n      diff: value - baseline,\n      performance: value >= baseline ? '达标' : '不达标',\n    });\n  });\n});\nconsole.log('data', data);\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data,\n  children: [\n    {\n      type: 'cell',\n      encode: {\n        x: 'col',\n        y: 'row',\n        color: 'diff',\n      },\n      style: {\n        inset: 2,\n      },\n      labels: [\n        {\n          text: 'value',\n          style: {\n            fill: (d) => (Math.abs(d.diff) > 25 ? '#fff' : '#000'),\n            textAlign: 'center',\n            fontWeight: 'bold',\n          },\n        },\n      ],\n    },\n  ],\n  scale: {\n    color: {\n      type: 'threshold',\n      domain: [0],\n      range: ['#2B83BA', '#D7191C'],\n    },\n  },\n  tooltip: {\n    title: (d) => `${d.row}-${d.col}`,\n    items: [\n      { field: 'value', name: '数值' },\n      { field: 'diff', name: '与基准差异' },\n      { field: 'performance', name: '达标状态' },\n    ],\n  },\n  legend: false,\n  interaction: [{ type: 'tooltip' }, { type: 'elementHighlight' }],\n});\n\nchart.render();\n",paraId:35,tocIndex:10}]},28012:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(22516);const t=[{value:"A contour line chart displays closed curves connecting points of equal value on a map or data visualization. The most common example is topographic maps where contour lines connect points of equal elevation, with numbers marked on the lines indicating the elevation height. Contour lines can be classified into four types based on their function: index contours, intermediate contours, supplementary contours, and auxiliary contours.",paraId:0,tocIndex:0},{value:"Beyond topographic maps, contour lines are widely used in data visualization to display three-dimensional data distribution on a two-dimensional plane, such as temperature distribution, pressure distribution, probability density distribution, etc. Contour lines generally do not intersect, but sometimes they may coincide. All points on the same contour line have the same value. In areas where contour lines are sparse, the value changes gradually; where contour lines are dense, the value changes steeply.",paraId:1,tocIndex:0},{value:"Other Names",paraId:2,tocIndex:0},{value:": Contour Plot, Isoline Chart, Level Curve Chart",paraId:2,tocIndex:0},{value:"Chart Type",paraId:3,tocIndex:1},{value:"Contour Line Chart",paraId:3,tocIndex:1},{value:"Suitable Data",paraId:3,tocIndex:1},{value:"Three-dimensional data: two continuous variables (X, Y coordinates) and one numerical variable (Z value)",paraId:3,tocIndex:1},{value:"Function",paraId:3,tocIndex:1},{value:"Display distribution patterns and value changes of continuous data on a two-dimensional plane",paraId:3,tocIndex:1},{value:"Data-to-Visual Mapping",paraId:3,tocIndex:1},{value:"X coordinate maps to horizontal axis position",paraId:3,tocIndex:1},{value:"Y coordinate maps to vertical axis position",paraId:3,tocIndex:1},{value:"Z value shown through contour line levels and labels",paraId:3,tocIndex:1},{value:"Optionally use color to represent value magnitude",paraId:3,tocIndex:1},{value:"Suitable Data Volume",paraId:3,tocIndex:1},{value:"Continuous two-dimensional grid data; more data points result in smoother contour lines",paraId:3,tocIndex:1},{value:"Terrain Representation",paraId:4,tocIndex:3},{value:": The classic application, using contour lines to represent elevation, clearly showing topographic features like mountains and valleys.",paraId:4,tocIndex:3},{value:"Meteorological Data",paraId:4,tocIndex:3},{value:": Displaying spatial variations in temperature distribution, pressure distribution, precipitation distribution, and other meteorological elements.",paraId:4,tocIndex:3},{value:"Scientific Research",paraId:4,tocIndex:3},{value:": Showing two-dimensional distributions of electric fields, magnetic fields, concentrations, etc. in physics, chemistry, biology, and other fields.",paraId:4,tocIndex:3},{value:"Business Analysis",paraId:4,tocIndex:3},{value:": Displaying the spatial distribution of market share, population density, consumption levels, etc.",paraId:4,tocIndex:3},{value:"Probability Density",paraId:4,tocIndex:3},{value:": Showing the distribution patterns of two-dimensional probability density functions in statistics.",paraId:4,tocIndex:3},{value:"Discrete Data",paraId:5,tocIndex:4},{value:": Contour lines require continuous value distributions and are not suitable for displaying discrete categorical data.",paraId:5,tocIndex:4},{value:"Time Series",paraId:5,tocIndex:4},{value:": Contour lines are primarily used for spatial distribution and are not suitable for showing changes over time.",paraId:5,tocIndex:4},{value:"Precise Value Reading",paraId:5,tocIndex:4},{value:": While values can be labeled, contour lines are mainly used to show trends and patterns, not for precise value reading.",paraId:5,tocIndex:4},{value:"Sparse Data Points",paraId:5,tocIndex:4},{value:": When data points are too sparse, contour lines generated through interpolation may not be accurate enough.",paraId:5,tocIndex:4},{value:"Here is a typical application scenario for contour line charts:",paraId:6,tocIndex:4},{value:"Terrain Elevation Distribution Map.",paraId:7,tocIndex:4},{value:" The chart below shows the elevation distribution of a mountainous area. Through contour lines, you can intuitively see the distribution of peaks, valleys, and slopes. Dense contour lines indicate steep slopes, while sparse contour lines indicate gentle terrain.",paraId:7,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\n// Simulate terrain elevation data\nconst terrainData = [];\nfor (let x = 0; x <= 50; x += 2) {\n  for (let y = 0; y <= 50; y += 2) {\n    // Simulate mountain terrain: elevation distribution of two peaks\n    const elevation1 = 100 * Math.exp(-((x - 15) ** 2 + (y - 15) ** 2) / 200);\n    const elevation2 = 80 * Math.exp(-((x - 35) ** 2 + (y - 35) ** 2) / 150);\n    const elevation = elevation1 + elevation2 + 10; // Base elevation\n    terrainData.push({ x, y, elevation });\n  }\n}\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'cell',\n  data: terrainData,\n  encode: {\n    x: 'x',\n    y: 'y',\n    color: 'elevation',\n  },\n  style: {\n    stroke: '#333',\n    strokeWidth: 0.5,\n    inset: 0.5,\n  },\n  scale: {\n    color: {\n      palette: 'viridis',\n      type: 'sequential',\n    },\n  },\n  legend: {\n    color: {\n      length: 300,\n      layout: { justifyContent: 'center' },\n      labelFormatter: (value) => `${Math.round(value)}m`,\n    },\n  },\n  tooltip: {\n    title: 'Elevation Information',\n    items: [\n      { field: 'x', name: 'Longitude' },\n      { field: 'y', name: 'Latitude' },\n      {\n        field: 'elevation',\n        name: 'Elevation',\n        valueFormatter: (value) => `${Math.round(value)}m`,\n      },\n    ],\n  },\n});\n\nchart.render();\n",paraId:8,tocIndex:4},{value:"This example demonstrates:",paraId:9,tocIndex:4},{value:"Using grid cells to simulate contour line effects, displaying terrain elevation distribution",paraId:10,tocIndex:4},{value:"Using color gradients to represent different elevation heights, creating a contour line-like visual effect",paraId:10,tocIndex:4},{value:"Providing interactive hover tooltips showing specific location and elevation information",paraId:10,tocIndex:4},{value:"Using appropriate color mapping (viridis palette) to enhance visual effects",paraId:10,tocIndex:4},{value:"Adding strokes to highlight grid boundaries, enhancing contour line visual perception",paraId:10,tocIndex:4},{value:"Using lines to draw contour outlines, closer to traditional topographic map representation.",paraId:11,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\n// Generate contour line data\nconst generateContourLines = () => {\n  const lines = [];\n  const levels = [20, 40, 60, 80, 100]; // Contour line levels\n\n  levels.forEach((level, index) => {\n    // Generate circular lines for each contour level\n    const points = [];\n    const centerX = 25;\n    const centerY = 25;\n    const baseRadius = 5 + index * 4;\n\n    for (let angle = 0; angle <= 360; angle += 5) {\n      const radian = (angle * Math.PI) / 180;\n      const radius = baseRadius + Math.sin((angle * Math.PI) / 45) * 2; // Add some variation\n      const x = centerX + radius * Math.cos(radian);\n      const y = centerY + radius * Math.sin(radian);\n      points.push({ x, y, level, lineId: `line_${level}` });\n    }\n    lines.push(...points);\n  });\n\n  return lines;\n};\n\nconst contourLines = generateContourLines();\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  height: 400,\n});\n\nchart.options({\n  type: 'line',\n  data: contourLines,\n  encode: {\n    x: 'x',\n    y: 'y',\n    color: 'level',\n    series: 'lineId',\n  },\n  style: {\n    strokeWidth: 2,\n    strokeOpacity: 0.8,\n  },\n  scale: {\n    color: {\n      type: 'sequential',\n      palette: 'oranges',\n    },\n    x: { nice: true },\n    y: { nice: true },\n  },\n  axis: {\n    x: { title: 'Distance (km)' },\n    y: { title: 'Distance (km)' },\n  },\n  legend: {\n    color: {\n      title: 'Elevation (m)',\n      layout: { justifyContent: 'center' },\n    },\n  },\n  tooltip: {\n    title: 'Contour Information',\n    items: [\n      {\n        field: 'level',\n        name: 'Elevation',\n        valueFormatter: (value) => `${value}m`,\n      },\n    ],\n  },\n});\n\nchart.render();\n",paraId:12,tocIndex:6},{value:"3D Contour Lines",paraId:13,tocIndex:6},{value:": Combining three-dimensional visualization technology to create three-dimensional contour charts that more intuitively display spatial data distribution.",paraId:13,tocIndex:6},{value:"Dynamic Contour Lines",paraId:13,tocIndex:6},{value:": Using animation to show data changes over time, such as the temporal evolution of meteorological data.",paraId:13,tocIndex:6},{value:"Interactive Annotation",paraId:13,tocIndex:6},{value:": Allowing users to click on contour lines to view specific values or dynamically adjust contour line intervals.",paraId:13,tocIndex:6},{value:"Multi-layer Overlay",paraId:13,tocIndex:6},{value:": Overlaying contour lines from multiple data layers in the same chart, such as simultaneously displaying temperature and pressure distributions.",paraId:13,tocIndex:6},{value:"Heatmaps",paraId:14,tocIndex:7},{value:"Contour Line Charts",paraId:15,tocIndex:8},{value:": Use lines to represent areas of equal value, emphasizing value continuity and gradient changes, suitable for showing gradual trends.",paraId:15,tocIndex:8},{value:"Heatmaps",paraId:15,tocIndex:8},{value:": Use color filling to represent value magnitude, more intuitively showing absolute value size and spatial distribution patterns.",paraId:15,tocIndex:8},{value:"Scatter Plots",paraId:16,tocIndex:8},{value:"Contour Line Charts",paraId:17,tocIndex:9},{value:": Display continuous distribution data patterns, generating smooth isolines through interpolation.",paraId:17,tocIndex:9},{value:"Scatter Plots",paraId:17,tocIndex:9},{value:": Display discrete data point distributions, maintaining data originality without interpolation processing.",paraId:17,tocIndex:9},{value:"Contour Line Charts",paraId:18,tocIndex:10},{value:": Pure data visualization tools that can be used for any two-dimensional continuous data.",paraId:18,tocIndex:10},{value:"Topographic Maps",paraId:18,tocIndex:10},{value:": Specifically for geographic information, including roads, rivers, buildings, and other geographic elements in addition to contour lines.",paraId:18,tocIndex:10}]},79327:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(9522);const t=[{value:"A distribution curve is a statistical chart used to display the frequency distribution of data, intuitively reflecting the distribution density and central tendency of data across different value intervals through smooth curve forms. It is an important visualization tool for understanding data distribution characteristics and identifying data patterns.",paraId:0,tocIndex:0},{value:"Distribution curves are particularly suitable for exploratory data analysis, comparing distributions across multiple groups, data quality checking, and identifying statistical distribution characteristics, making them important tools in statistical analysis and data science.",paraId:1,tocIndex:0},{value:"English Name",paraId:2,tocIndex:0},{value:": Distribution Curve, Frequency Curve, Density Curve",paraId:2,tocIndex:0},{value:"A distribution curve consists of the following elements:",paraId:3,tocIndex:1},{value:"Horizontal axis: represents the independent variable",paraId:4,tocIndex:1},{value:"Vertical axis: represents the dependent variable",paraId:4,tocIndex:1},{value:"Distribution curve representing probability distribution",paraId:4,tocIndex:1},{value:"Example 1: ",paraId:5,tocIndex:3},{value:"Displaying distribution characteristics of normal distribution data",paraId:5,tocIndex:3},{value:"Distribution curves are very suitable for displaying normal distribution data, clearly showing the central tendency, symmetry, and distribution shape of the data.",paraId:6,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\n// Generate normal distribution data\nconst generateNormalData = (count, mean, std) => {\n  const data = [];\n  for (let i = 0; i < count; i++) {\n    // Use Box-Muller transform to generate normal distribution data\n    const u1 = Math.random();\n    const u2 = Math.random();\n    const z0 = Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);\n    data.push({ value: mean + std * z0 });\n  }\n  return data;\n};\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  data: {\n    value: generateNormalData(1000, 100, 15),\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => {\n          // Extract numerical data\n          const values = data.map(d => d.value).filter(v => !isNaN(v));\n          \n          // Calculate data range\n          const min = Math.min(...values);\n          const max = Math.max(...values);\n          const binCount = 30;\n          const binWidth = (max - min) / binCount;\n          \n          // Create bins\n          const bins = Array.from({ length: binCount }, (_, i) => ({\n            x0: min + i * binWidth,\n            x1: min + (i + 1) * binWidth,\n            count: 0,\n          }));\n          \n          // Count frequency for each bin\n          values.forEach(value => {\n            const binIndex = Math.min(\n              Math.floor((value - min) / binWidth),\n              binCount - 1\n            );\n            bins[binIndex].count++;\n          });\n          \n          // Calculate frequency density and generate curve data\n          const total = values.length;\n          return bins.map(bin => ({\n            x: (bin.x0 + bin.x1) / 2, // Bin center point\n            y: bin.count / total, // Frequency density\n            frequency: bin.count,\n            range: `${bin.x0.toFixed(1)}-${bin.x1.toFixed(1)}`,\n          }));\n        },\n      },\n    ],\n  },\n  encode: {\n    x: 'x',\n    y: 'y',\n    shape: 'smooth',\n  },\n  style: {\n    lineWidth: 3,\n    stroke: '#1890ff',\n  },\n  axis: {\n    x: { title: 'Measured Value' },\n    y: { title: 'Frequency Density' },\n  },\n  tooltip: {\n    title: (d) => `Range: ${d.range}`,\n    items: [\n      { field: 'frequency', name: 'Frequency' },\n      { field: 'y', name: 'Frequency Density', valueFormatter: '.3f' },\n    ],\n  },\n});\n\nchart.render();\n",paraId:7,tocIndex:3},{value:"Description",paraId:8,tocIndex:3},{value:":",paraId:8,tocIndex:3},{value:"Displays the classic bell-shaped normal distribution curve",paraId:9,tocIndex:3},{value:"Clearly observes the symmetry and central tendency of the data",paraId:9,tocIndex:3},{value:"Suitable for data analysis in quality control, biostatistics, psychological measurement, and other fields",paraId:9,tocIndex:3},{value:"Example 2: ",paraId:10,tocIndex:3},{value:"Comparative analysis of multiple group distributions",paraId:10,tocIndex:3},{value:"When comparing data distributions under different conditions or groups, distribution curves can intuitively show distribution differences between groups.",paraId:11,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/species.json',\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => {\n          // Group data by species\n          const groups = {};\n          data.forEach(d => {\n            if (!groups[d.species]) groups[d.species] = [];\n            groups[d.species].push(d.y);\n          });\n          \n          const binCount = 20;\n          const results = [];\n          \n          // Create distribution curve data for each species\n          Object.entries(groups).forEach(([species, values]) => {\n            const filteredValues = values.filter(v => !isNaN(v));\n            if (filteredValues.length === 0) return;\n            \n            const min = Math.min(...filteredValues);\n            const max = Math.max(...filteredValues);\n            const binWidth = (max - min) / binCount;\n            \n            // Create bins\n            const bins = Array.from({ length: binCount }, (_, i) => ({\n              x0: min + i * binWidth,\n              x1: min + (i + 1) * binWidth,\n              count: 0,\n            }));\n            \n            // Count frequencies\n            filteredValues.forEach(value => {\n              const binIndex = Math.min(\n                Math.floor((value - min) / binWidth),\n                binCount - 1\n              );\n              bins[binIndex].count++;\n            });\n            \n            // Generate curve data\n            const total = filteredValues.length;\n            bins.forEach(bin => {\n              results.push({\n                x: (bin.x0 + bin.x1) / 2,\n                y: bin.count / total,\n                species,\n                frequency: bin.count,\n                range: `${bin.x0.toFixed(2)}-${bin.x1.toFixed(2)}`,\n              });\n            });\n          });\n          \n          return results;\n        },\n      },\n    ],\n  },\n  encode: {\n    x: 'x',\n    y: 'y',\n    color: 'species',\n    shape: 'smooth',\n  },\n  style: {\n    lineWidth: 2,\n    strokeOpacity: 0.8,\n  },\n  axis: {\n    x: { title: 'Petal Length' },\n    y: { title: 'Frequency Density' },\n  },\n  legend: {\n    color: {\n      title: 'Species',\n      position: 'right',\n    },\n  },\n  tooltip: {\n    title: (d) => `${d.species} - Range: ${d.range}`,\n    items: [\n      { field: 'frequency', name: 'Frequency' },\n      { field: 'y', name: 'Frequency Density', valueFormatter: '.3f' },\n    ],\n  },\n});\n\nchart.render();\n",paraId:12,tocIndex:3},{value:"Description",paraId:13,tocIndex:3},{value:":",paraId:13,tocIndex:3},{value:"Compares distribution characteristics of multiple groups through curves of different colors",paraId:14,tocIndex:3},{value:"Facilitates identification of distribution centers, shapes, and dispersion of each group",paraId:14,tocIndex:3},{value:"Suitable for A/B testing analysis, experimental control group comparisons, market segmentation analysis, and other scenarios",paraId:14,tocIndex:3},{value:"Example 1: ",paraId:15,tocIndex:4},{value:"Poor effectiveness with insufficient data",paraId:15,tocIndex:4},{value:"When there are too few data points, binning statistics may not be accurate enough, and the generated distribution curve may not accurately reflect true distribution characteristics.",paraId:16,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\n// Simulate small amount of data\nconst smallData = [\n  12, 15, 13, 14, 16, 18, 11, 17, 15, 13\n];\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  height: 250,\n});\n\nchart.options({\n  type: 'point',\n  data: smallData.map((value, index) => ({ index: index + 1, value })),\n  encode: {\n    x: 'index',\n    y: 'value',\n    size: 6,\n  },\n  style: {\n    fill: '#1890ff',\n    fillOpacity: 0.8,\n  },\n  axis: {\n    x: { title: 'Data Point Index' },\n    y: { title: 'Value' },\n  },\n  title: 'Scatter plot recommended for small datasets',\n});\n\nchart.render();\n",paraId:17,tocIndex:4},{value:"Problem Description",paraId:18,tocIndex:4},{value:":",paraId:18,tocIndex:4},{value:"When there are too few data points (less than 30), each interval has too little data after binning",paraId:19,tocIndex:4},{value:"The generated distribution curve may show artificial fluctuations and irregular shapes",paraId:19,tocIndex:4},{value:"Cannot accurately reflect true data distribution characteristics",paraId:19,tocIndex:4},{value:"Recommend using scatter plots, box plots, or increasing data collection",paraId:19,tocIndex:4},{value:"Example 2: ",paraId:20,tocIndex:4},{value:"Discrete categorical data is not applicable",paraId:20,tocIndex:4},{value:"For discrete categorical data, continuous distribution curves have no practical meaning because there is no continuity relationship between categories.",paraId:21,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\n// Discrete categorical data\nconst discreteData = [\n  { category: 'Product A', sales: 45 },\n  { category: 'Product B', sales: 67 },\n  { category: 'Product C', sales: 33 },\n  { category: 'Product D', sales: 52 },\n  { category: 'Product E', sales: 28 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  height: 250,\n});\n\nchart.options({\n  type: 'interval',\n  data: discreteData,\n  encode: {\n    x: 'category',\n    y: 'sales',\n    color: 'category',\n  },\n  style: {\n    fillOpacity: 0.8,\n  },\n  axis: {\n    x: { title: 'Product Category' },\n    y: { title: 'Sales Quantity' },\n  },\n  title: 'Bar chart recommended for categorical data',\n});\n\nchart.render();\n",paraId:22,tocIndex:4},{value:"Problem Description",paraId:23,tocIndex:4},{value:":",paraId:23,tocIndex:4},{value:"No continuity relationship exists between categorical data; forcing connections would be misleading",paraId:24,tocIndex:4},{value:"Distribution curves cannot express the true meaning of categorical data",paraId:24,tocIndex:4},{value:"Bar charts can more accurately express comparison relationships in categorical data",paraId:24,tocIndex:4},{value:"Suitable for using discrete chart types such as bar charts and pie charts",paraId:24,tocIndex:4},{value:"Histogram",paraId:25,tocIndex:5},{value:"Distribution curves display continuous frequency distribution through smooth curves, emphasizing overall trends",paraId:26,tocIndex:6},{value:"Histograms display frequency distribution through rectangular bars with clear interval boundaries",paraId:26,tocIndex:6},{value:"Distribution curves are more suitable for displaying overall distribution shape and trend identification",paraId:26,tocIndex:6},{value:"Histograms are more suitable for precise frequency statistics and interval analysis",paraId:26,tocIndex:6},{value:"Violin Plot",paraId:27,tocIndex:6},{value:"Distribution curves focus on displaying the curve shape of frequency distribution",paraId:28,tocIndex:7},{value:"Violin plots combine density distribution with statistical summary information from box plots",paraId:28,tocIndex:7},{value:"Distribution curves are more suitable for pure distribution shape analysis and multi-group comparisons",paraId:28,tocIndex:7},{value:"Violin plots are more suitable for scenarios requiring statistical summary information",paraId:28,tocIndex:7},{value:"Line Chart",paraId:29,tocIndex:7},{value:"Distribution curves are based on frequency statistics, displaying data distribution characteristics",paraId:30,tocIndex:8},{value:"Line charts show data change trends over time or sequence",paraId:30,tocIndex:8},{value:"Distribution curves are suitable for statistical analysis and distribution exploration",paraId:30,tocIndex:8},{value:"Line charts are suitable for time series analysis and trend tracking",paraId:30,tocIndex:8}]},15470:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(82191);const t=[{value:"A donut chart (also known as a doughnut chart) is essentially a pie chart with its center area removed. Donut charts encourage us to focus more on arc length rather than area, making it relatively simple to compare different donut charts.",paraId:0,tocIndex:0},{value:"While donut charts and pie charts are similar in terms of data representation, donut charts have their unique advantages:",paraId:1,tocIndex:0},{value:"Better Comparison",paraId:2,tocIndex:0},{value:": Pie charts have strong visual unity, causing viewers to focus on comparing the proportional relationships between slices within a single chart. However, when comparing two pie charts side by side, pie charts make it difficult to compare across different charts. Donut charts solve this problem.",paraId:2,tocIndex:0},{value:"Better Space Utilization",paraId:2,tocIndex:0},{value:": Donut charts can utilize their hollow center area to display text information such as titles, totals, or other important data.",paraId:2,tocIndex:0},{value:"Other Names",paraId:3,tocIndex:0},{value:": Doughnut Chart",paraId:3,tocIndex:0},{value:"Chart Type",paraId:4,tocIndex:1},{value:"Donut Chart",paraId:4,tocIndex:1},{value:"Suitable Data",paraId:4,tocIndex:1},{value:"A dataset containing one categorical field and one numerical field",paraId:4,tocIndex:1},{value:"Functionality",paraId:4,tocIndex:1},{value:"Compare the size of numerical values across categories",paraId:4,tocIndex:1},{value:"Data Mapping",paraId:4,tocIndex:1},{value:"Categorical data maps to arc colors",paraId:4,tocIndex:1},{value:"Numerical data maps to arc angles",paraId:4,tocIndex:1},{value:"Proportional relationships shown by arc size",paraId:4,tocIndex:1},{value:"Data Size Limit",paraId:4,tocIndex:1},{value:"Recommended for no more than 9 data points",paraId:4,tocIndex:1},{value:"Example 1: ",paraId:5,tocIndex:3},{value:"Displaying Categorical Proportions",paraId:5,tocIndex:3},{value:"This usage is similar to pie charts. The chart below shows sales data from a gaming company:",paraId:6,tocIndex:3},{value:"Genre",paraId:7,tocIndex:3},{value:"Sales",paraId:7,tocIndex:3},{value:"Sports",paraId:7,tocIndex:3},{value:"27,500",paraId:7,tocIndex:3},{value:"Strategy",paraId:7,tocIndex:3},{value:"11,500",paraId:7,tocIndex:3},{value:"Action",paraId:7,tocIndex:3},{value:"6,000",paraId:7,tocIndex:3},{value:"Shooter",paraId:7,tocIndex:3},{value:"3,500",paraId:7,tocIndex:3},{value:"Other",paraId:7,tocIndex:3},{value:"1,500",paraId:7,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  transform: [{ type: 'stackY' }], // Add stackY transform\n  data: [\n    { genre: 'Sports', sold: 27500 },\n    { genre: 'Strategy', sold: 11500 },\n    { genre: 'Action', sold: 6000 },\n    { genre: 'Shooter', sold: 3500 },\n    { genre: 'Other', sold: 1500 },\n  ],\n  coordinate: { type: 'theta', innerRadius: 0.5 },\n  encode: { y: 'sold', color: 'genre' },\n  legend: {\n    color: { position: 'bottom', layout: { justifyContent: 'center' } },\n  },\n  labels: [\n    {\n      text: 'genre',\n      style: {\n        fontWeight: 'bold',\n      },\n    },\n    {\n      text: (d, i, data) => {\n        const total = data.reduce((acc, curr) => acc + curr.sold, 0);\n        const percent = ((d.sold / total) * 100).toFixed(2);\n        return `${percent}%`;\n      },\n      style: {\n        fontSize: 10,\n        dy: 12,\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:8,tocIndex:3},{value:"Explanation",paraId:9,tocIndex:3},{value:":",paraId:9,tocIndex:3},{value:"The ",paraId:10,tocIndex:3},{value:"genre",paraId:10,tocIndex:3},{value:" field maps to ",paraId:10,tocIndex:3},{value:"color",paraId:10,tocIndex:3},{value:" to distinguish different game types",paraId:10,tocIndex:3},{value:"The ",paraId:10,tocIndex:3},{value:"sold",paraId:10,tocIndex:3},{value:" field maps to ",paraId:10,tocIndex:3},{value:"angle",paraId:10,tocIndex:3},{value:" to represent the proportion of sales",paraId:10,tocIndex:3},{value:"Using ",paraId:10,tocIndex:3},{value:"coordinate: { type: 'theta', innerRadius: 0.5 }",paraId:10,tocIndex:3},{value:" creates the donut effect",paraId:10,tocIndex:3},{value:"Example 2: ",paraId:11,tocIndex:3},{value:"Displaying Additional Information in the Center",paraId:11,tocIndex:3},{value:"The hollow center area of donut charts can be used to display totals, titles, or other important information:",paraId:12,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst data = [\n  { type: 'Mobile', value: 54.2 },\n  { type: 'Desktop', value: 32.1 },\n  { type: 'Tablet', value: 13.7 },\n];\n\nconst total = data.reduce((acc, curr) => acc + curr.value, 0);\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data,\n  coordinate: { type: 'theta', innerRadius: 0.6 },\n  encode: { y: 'value', color: 'type' },\n  style: { stroke: '#fff', lineWidth: 2 },\n  legend: {\n    color: { position: 'bottom', layout: { justifyContent: 'center' } },\n  },\n  labels: [\n    {\n      text: (d) => `${d.value}%`,\n      style: {\n        fontWeight: 'bold',\n        fontSize: 12,\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:13,tocIndex:3},{value:"Example 1: ",paraId:14,tocIndex:4},{value:"Too Many Categories",paraId:14,tocIndex:4},{value:"The chart below shows population proportions by province. Due to the excessive number of categories, it's difficult to clearly compare population data across provinces. In such cases, we recommend using ",paraId:15,tocIndex:4},{value:"bar charts",paraId:16,tocIndex:4},{value:".",paraId:15,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { province: 'Beijing', population: 19612368 },\n    { province: 'Tianjin', population: 12938693 },\n    { province: 'Hebei', population: 71854210 },\n    { province: 'Shanxi', population: 27500000 },\n    { province: 'Inner Mongolia', population: 24706291 },\n    { province: 'Liaoning', population: 43746323 },\n    { province: 'Jilin', population: 27452815 },\n    { province: 'Heilongjiang', population: 38313991 },\n    { province: 'Shanghai', population: 23019196 },\n    { province: 'Jiangsu', population: 78660941 },\n    { province: 'Zhejiang', population: 54426891 },\n    { province: 'Anhui', population: 59500468 },\n    { province: 'Fujian', population: 36894217 },\n    { province: 'Jiangxi', population: 44567797 },\n    { province: 'Shandong', population: 95792719 },\n    { province: 'Henan', population: 94029939 },\n    { province: 'Hubei', population: 57237727 },\n    { province: 'Hunan', population: 65700762 },\n    { province: 'Guangdong', population: 104320459 },\n    { province: 'Guangxi', population: 46023761 },\n    { province: 'Hainan', population: 8671485 },\n    { province: 'Chongqing', population: 28846170 },\n    { province: 'Sichuan', population: 80417528 },\n    { province: 'Guizhou', population: 34748556 },\n    { province: 'Yunnan', population: 45966766 },\n    { province: 'Tibet', population: 3002165 },\n    { province: 'Shaanxi', population: 37327379 },\n    { province: 'Gansu', population: 25575263 },\n    { province: 'Qinghai', population: 5626723 },\n  ],\n  coordinate: { type: 'theta', innerRadius: 0.4 },\n  encode: { y: 'population', color: 'province' },\n  legend: false, // Too many categories, disable legend\n  labels: false, // Too many categories, disable labels\n});\n\nchart.render();\n",paraId:17,tocIndex:4},{value:"Explanation",paraId:18,tocIndex:4},{value:": The chart above has too many categories, making colors difficult to distinguish and labels severely overlapping, making it unsuitable for donut charts.",paraId:18,tocIndex:4},{value:"Example 2: ",paraId:19,tocIndex:4},{value:"Similar Proportions Among Categories",paraId:19,tocIndex:4},{value:"In the chart below, different game genres have similar sales volumes with very small angular differences, making donut charts unsuitable. In this case, ",paraId:20,tocIndex:4},{value:"bar charts",paraId:21,tocIndex:4},{value:" would be more appropriate.",paraId:20,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { genre: 'Sports', sold: 15000 },\n    { genre: 'Strategy', sold: 14900 },\n    { genre: 'Action', sold: 15050 },\n    { genre: 'Shooter', sold: 13000 },\n    { genre: 'Other', sold: 13900 },\n  ],\n  coordinate: { type: 'theta', innerRadius: 0.5 },\n  encode: { y: 'sold', color: 'genre' },\n  legend: {\n    color: { position: 'bottom', layout: { justifyContent: 'center' } },\n  },\n  labels: [\n    {\n      text: (d, i, data) => {\n        const total = data.reduce((acc, curr) => acc + curr.sold, 0);\n        const percent = ((d.sold / total) * 100).toFixed(2);\n        return `${percent}%`;\n      },\n      style: {\n        fontSize: 10,\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:22,tocIndex:4},{value:"Explanation",paraId:23,tocIndex:4},{value:": Each category in the chart above has a proportion close to 20%, with very small differences that are difficult to clearly compare through angular sizes.",paraId:23,tocIndex:4},{value:"Using G2's faceting functionality, grouped data can be rendered as multiple donut charts. The chart below shows the profit proportions of the world's largest 1000 banks by region in 2007 and 2011:",paraId:24,tocIndex:6},{value:"Year",paraId:25,tocIndex:6},{value:"Region",paraId:25,tocIndex:6},{value:"Profit (Billion USD)",paraId:25,tocIndex:6},{value:"2007",paraId:25,tocIndex:6},{value:"Asia Pacific",paraId:25,tocIndex:6},{value:"1485.54",paraId:25,tocIndex:6},{value:"2007",paraId:25,tocIndex:6},{value:"Africa & Middle East",paraId:25,tocIndex:6},{value:"330.12",paraId:25,tocIndex:6},{value:"2007",paraId:25,tocIndex:6},{value:"Latin America",paraId:25,tocIndex:6},{value:"196.5",paraId:25,tocIndex:6},{value:"...",paraId:25,tocIndex:6},{value:"...",paraId:25,tocIndex:6},{value:"...",paraId:25,tocIndex:6},{value:"2011",paraId:25,tocIndex:6},{value:"Asia Pacific",paraId:25,tocIndex:6},{value:"4107.18",paraId:25,tocIndex:6},{value:"2011",paraId:25,tocIndex:6},{value:"Africa & Middle East",paraId:25,tocIndex:6},{value:"495.3",paraId:25,tocIndex:6},{value:"2011",paraId:25,tocIndex:6},{value:"Latin America",paraId:25,tocIndex:6},{value:"495.3",paraId:25,tocIndex:6},{value:"...",paraId:25,tocIndex:6},{value:"...",paraId:25,tocIndex:6},{value:"...",paraId:25,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'facetRect',\n  autoFit: true,\n  data: [\n    { year: '2007', area: 'Asia Pacific', profit: 1485.54 },\n    { year: '2007', area: 'Western Europe', profit: 3631.32 },\n    { year: '2007', area: 'North America', profit: 2083.9 },\n    { year: '2007', area: 'Africa & Middle East', profit: 330.12 },\n    { year: '2007', area: 'Central & Eastern Europe', profit: 141.48 },\n    { year: '2007', area: 'Latin America', profit: 196.5 },\n    { year: '2011', area: 'Asia Pacific', profit: 4107.18 },\n    { year: '2011', area: 'Western Europe', profit: 480.06 },\n    { year: '2011', area: 'North America', profit: 1783.08 },\n    { year: '2011', area: 'Africa & Middle East', profit: 495.3 },\n    { year: '2011', area: 'Central & Eastern Europe', profit: 259.08 },\n    { year: '2011', area: 'Latin America', profit: 495.3 },\n  ],\n  encode: { x: 'year' },\n  children: [\n    {\n      type: 'interval',\n      transform: [{ type: 'stackY' }], // Add stackY transform\n      coordinate: { type: 'theta', innerRadius: 0.5 },\n      encode: { y: 'profit', color: 'area' },\n      legend: {\n        color: { position: 'bottom', layout: { justifyContent: 'center' } },\n      },\n      labels: [\n        {\n          text: (d, i, data) => {\n            const total = data.reduce((acc, curr) => acc + curr.profit, 0);\n            const percent = ((d.profit / total) * 100).toFixed(1);\n            return `${percent}%`;\n          },\n          style: {\n            fontSize: 10,\n          },\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:26,tocIndex:6},{value:"Pie Charts",paraId:27,tocIndex:7},{value:"Similarities",paraId:28,tocIndex:8},{value:": Both are used to display proportional relationships of categorical data",paraId:28,tocIndex:8},{value:"Differences",paraId:28,tocIndex:8},{value:":\n",paraId:28,tocIndex:8},{value:"Donut charts have a hollow center that can accommodate additional information",paraId:29,tocIndex:8},{value:"Donut charts emphasize arc length (circumference), while pie charts emphasize area",paraId:29,tocIndex:8},{value:"Donut charts perform better when comparing multiple charts",paraId:29,tocIndex:8},{value:"Bar Charts",paraId:30,tocIndex:8},{value:"Donut Charts",paraId:31,tocIndex:9},{value:": Better suited for showing proportional relationships, emphasizing part-to-whole relationships",paraId:31,tocIndex:9},{value:"Bar Charts",paraId:31,tocIndex:9},{value:": Better suited for precise numerical comparisons, especially when value differences are small",paraId:31,tocIndex:9},{value:"Nightingale Charts (Rose Diagrams)",paraId:32,tocIndex:9},{value:"Donut Charts",paraId:33,tocIndex:10},{value:": Represent values through angles, with fixed inner radius",paraId:33,tocIndex:10},{value:"Nightingale Charts",paraId:33,tocIndex:10},{value:": Represent values through radius, making value differences easier to distinguish",paraId:33,tocIndex:10}]},78100:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(8781);const t=[{value:"A dot map is a geographic visualization method that represents data distribution density and patterns through densely distributed dots on a geographic map. Each dot typically represents a certain quantity of statistical units (such as population, economic activity, agricultural output, etc.), and the distribution density of dots intuitively reflects the concentration and distribution characteristics of data in geographic space.",paraId:0,tocIndex:0},{value:"The greatest advantage of dot maps is their ability to intuitively display spatial distribution patterns of data. Through the density of dots, you can quickly identify data concentration areas and sparse regions. Compared to ",paraId:1,tocIndex:0},{value:"choropleth maps",paraId:2,tocIndex:0},{value:", dot maps can more precisely show the continuous distribution characteristics of data within geographic space, avoiding the impact of administrative boundary divisions on data presentation.",paraId:1,tocIndex:0},{value:"Dot maps are widely used in population distribution analysis, economic activity density display, natural resource distribution, disease transmission analysis, and many other geographic data visualization scenarios.",paraId:3,tocIndex:0},{value:"English Name",paraId:4,tocIndex:0},{value:": Dot Map, Dot Density Map",paraId:4,tocIndex:0},{value:"Chart Type",paraId:5,tocIndex:1},{value:"Basic Dot Map",paraId:5,tocIndex:1},{value:"Suitable Data",paraId:5,tocIndex:1},{value:"Data containing geographic coordinates (longitude and latitude) and numerical fields",paraId:5,tocIndex:1},{value:"Function",paraId:5,tocIndex:1},{value:"Display data distribution density and patterns in geographic space",paraId:5,tocIndex:1},{value:"Data-to-Graphics Mapping",paraId:5,tocIndex:1},{value:"Longitude and latitude fields map to map positions",paraId:5,tocIndex:1},{value:"Numerical fields affect the number or density of dots",paraId:5,tocIndex:1},{value:"Categorical fields can map to colors",paraId:5,tocIndex:1},{value:"Other attributes can map to shapes",paraId:5,tocIndex:1},{value:"Suitable Data Volume",paraId:5,tocIndex:1},{value:"Suitable for medium to large amounts of data points (typically 100-10,000 dots)",paraId:5,tocIndex:1},{value:"The main components of a basic dot map include:",paraId:6,tocIndex:1},{value:"Geographic Background",paraId:7,tocIndex:1},{value:": Provides the geographic coordinate system's map background, such as world maps, country maps, regional maps, etc.",paraId:7,tocIndex:1},{value:"Dot Markers",paraId:7,tocIndex:1},{value:": Dots representing data units, positioned according to geographic coordinates",paraId:7,tocIndex:1},{value:"Dot Density",paraId:7,tocIndex:1},{value:": The distribution density of dots reflects the spatial distribution patterns of data",paraId:7,tocIndex:1},{value:"Color Encoding",paraId:7,tocIndex:1},{value:": Different colors distinguish data categories or numerical ranges",paraId:7,tocIndex:1},{value:"Example 1: ",paraId:8,tocIndex:3},{value:"US Airport Distribution Dot Map",paraId:8,tocIndex:3},{value:"Based on real US map data and airport location data, showing the geographic distribution of airports across the United States.",paraId:9,tocIndex:3},{value:"/**\n * Airport Distribution Dot Map Based on Real US Map Data\n */\nimport { Chart } from '@antv/g2';\nimport { feature } from 'topojson-client';\n\nPromise.all([\n  fetch('https://assets.antv.antgroup.com/g2/us-10m.json').then((res) =>\n    res.json(),\n  ),\n  fetch('https://assets.antv.antgroup.com/g2/airports.json').then((res) =>\n    res.json(),\n  ),\n]).then((values) => {\n  const [us, airports] = values;\n  const states = feature(us, us.objects.states).features;\n\n  const chart = new Chart({\n    container: 'container',\n    autoFit: true,\n  });\n\n  chart.options({\n    type: 'geoView',\n    coordinate: { type: 'albersUsa' },\n    children: [\n      {\n        type: 'geoPath',\n        data: states,\n        style: {\n          fill: '#f5f5f5',\n          stroke: '#d0d0d0',\n          lineWidth: 1,\n        },\n      },\n      {\n        type: 'point',\n        data: airports,\n        encode: {\n          x: 'longitude',\n          y: 'latitude',\n          color: '#1890ff',\n          shape: 'point',\n          size: 2,\n        },\n        style: {\n          opacity: 0.8,\n        },\n        tooltip: {\n          title: 'name',\n          items: [\n            { name: 'Airport Code', field: 'iata' },\n            { name: 'Longitude', field: 'longitude' },\n            { name: 'Latitude', field: 'latitude' },\n          ],\n        },\n      },\n    ],\n  });\n\n  chart.render();\n});\n",paraId:10,tocIndex:3},{value:"Description",paraId:11,tocIndex:3},{value:":",paraId:11,tocIndex:3},{value:"Uses real US map TopoJSON data and airport coordinate data",paraId:12,tocIndex:3},{value:"Through dot distribution density, you can observe that airports are mainly concentrated on the East Coast, West Coast, and Great Lakes region",paraId:12,tocIndex:3},{value:"albersUsa",paraId:12,tocIndex:3},{value:" projection is suitable for displaying geographic data of the continental United States",paraId:12,tocIndex:3},{value:"Example 2: ",paraId:13,tocIndex:3},{value:"US Ethnic Distribution Dot Map",paraId:13,tocIndex:3},{value:"Note",paraId:14,tocIndex:3},{value:": The following example uses fictional ethnic distribution data for demonstration purposes",paraId:14,tocIndex:3},{value:"/**\n * Fictional Data: US Ethnic Distribution Dot Map\n * Note: This example uses fictional ethnic distribution data for demonstration\n */\nimport { Chart } from '@antv/g2';\nimport { feature } from 'topojson-client';\n\nPromise.all([\n  fetch('https://assets.antv.antgroup.com/g2/us-10m.json').then((res) =>\n    res.json(),\n  ),\n]).then((values) => {\n  const [us] = values;\n  const states = feature(us, us.objects.states).features;\n\n  // Fictional ethnic distribution data for major US cities (for demonstration only)\n  const ethnicGroups = [\n    { type: 'White', ratio: 0.6, color: '#1890ff' },\n    { type: 'Hispanic', ratio: 0.18, color: '#52c41a' },\n    { type: 'African American', ratio: 0.13, color: '#faad14' },\n    { type: 'Asian', ratio: 0.06, color: '#f5222d' },\n    { type: 'Others', ratio: 0.03, color: '#722ed1' },\n  ];\n\n  // Coordinates of major US cities (with fictional population data)\n  const cities = [\n    { name: 'New York', lng: -74.0059, lat: 40.7128, population: 850 },\n    { name: 'Los Angeles', lng: -118.2437, lat: 34.0522, population: 400 },\n    { name: 'Chicago', lng: -87.6298, lat: 41.8781, population: 270 },\n    { name: 'Houston', lng: -95.3698, lat: 29.7604, population: 230 },\n    { name: 'Philadelphia', lng: -75.1652, lat: 39.9526, population: 160 },\n    { name: 'Phoenix', lng: -112.074, lat: 33.4484, population: 170 },\n    { name: 'San Antonio', lng: -98.4936, lat: 29.4241, population: 150 },\n    { name: 'San Diego', lng: -117.1611, lat: 32.7157, population: 140 },\n    { name: 'Dallas', lng: -96.797, lat: 32.7767, population: 130 },\n    { name: 'San Jose', lng: -121.8863, lat: 37.3382, population: 100 },\n    { name: 'Austin', lng: -97.7431, lat: 30.2672, population: 95 },\n    { name: 'Detroit', lng: -83.0458, lat: 42.3314, population: 67 },\n    { name: 'Miami', lng: -80.1918, lat: 25.7617, population: 47 },\n    { name: 'Seattle', lng: -122.3321, lat: 47.6062, population: 75 },\n    { name: 'Denver', lng: -104.9903, lat: 39.7392, population: 72 },\n  ];\n\n  // Generate fictional ethnic distribution dot data\n  const ethnicData = [];\n  cities.forEach((city) => {\n    ethnicGroups.forEach((group) => {\n      // Calculate number of dots based on ethnic ratio and city population\n      const pointCount = Math.floor((city.population * group.ratio) / 10); // One dot per 100,000 people\n\n      for (let i = 0; i < pointCount; i++) {\n        // Randomly distribute dots around the city, different ethnicities have different clustering patterns\n        let angle = Math.random() * 2 * Math.PI;\n        let distance = Math.random() * 1.5; // Distributed within 1.5 degrees\n\n        // Simulate different ethnic clustering characteristics\n        if (group.type === 'Asian') {\n          // Asians tend to cluster in specific areas\n          distance = Math.random() * 0.8;\n        } else if (group.type === 'Hispanic') {\n          // Hispanics are more concentrated in southern cities\n          if (city.lat < 35) distance = Math.random() * 0.6;\n        }\n\n        ethnicData.push({\n          city: city.name,\n          lng: city.lng + Math.cos(angle) * distance,\n          lat: city.lat + Math.sin(angle) * distance,\n          ethnicity: group.type,\n          value: 10, // Each dot represents 100,000 people\n        });\n      }\n    });\n  });\n\n  const chart = new Chart({\n    container: 'container',\n    autoFit: true,\n  });\n\n  chart.options({\n    type: 'geoView',\n    coordinate: { type: 'albersUsa' },\n    children: [\n      {\n        type: 'geoPath',\n        data: states,\n        style: {\n          fill: '#f5f5f5',\n          stroke: '#d0d0d0',\n          lineWidth: 1,\n        },\n      },\n      {\n        type: 'point',\n        data: ethnicData,\n        encode: {\n          x: 'lng',\n          y: 'lat',\n          color: 'ethnicity',\n          shape: 'ethnicity',\n          size: 2,\n        },\n        style: {\n          opacity: 0.7,\n          stroke: 'white',\n          lineWidth: 0.5,\n        },\n        scale: {\n          color: {\n            domain: ['White', 'Hispanic', 'African American', 'Asian', 'Others'],\n            range: ['#1890ff', '#52c41a', '#faad14', '#f5222d', '#722ed1'],\n          },\n          shape: {\n            domain: ['White', 'Hispanic', 'African American', 'Asian', 'Others'],\n            range: ['point', 'square', 'triangle', 'diamond', 'cross'],\n          },\n        },\n        tooltip: {\n          title: 'city',\n          items: [\n            { name: 'Ethnicity', field: 'ethnicity' },\n            { name: 'Population', field: 'value', valueFormatter: (v) => `${v}0k people` },\n          ],\n        },\n      },\n    ],\n  });\n\n  chart.render();\n});\n",paraId:15,tocIndex:3},{value:"Description",paraId:16,tocIndex:3},{value:":",paraId:16,tocIndex:3},{value:"Uses fictional ethnic distribution data to show population composition in major US cities",paraId:17,tocIndex:3},{value:"Different colors and shapes represent different ethnic groups",paraId:17,tocIndex:3},{value:"Through dot distribution density, you can observe ethnic distribution characteristics and clustering patterns in various regions",paraId:17,tocIndex:3},{value:"Simulates real ethnic geographic distribution patterns, such as Asian clustering on the West Coast and Hispanic concentration in the South",paraId:17,tocIndex:3},{value:"Example 1: ",paraId:18,tocIndex:4},{value:"Not Suitable for Precise Numerical Comparison",paraId:18,tocIndex:4},{value:"Dot maps focus on displaying distribution patterns and density, and are not suitable for scenarios requiring precise comparison of specific numerical values. If you need to accurately compare numerical sizes across different regions, you should use ",paraId:19,tocIndex:4},{value:"choropleth maps",paraId:20,tocIndex:4},{value:" or ",paraId:19,tocIndex:4},{value:"bubble maps",paraId:21,tocIndex:4},{value:".",paraId:19,tocIndex:4},{value:"Example 2: ",paraId:22,tocIndex:4},{value:"Not Suitable for Displaying Continuous Surface Data",paraId:22,tocIndex:4},{value:"For continuously changing surface data such as temperature and precipitation, the discrete nature of dot maps cannot well represent the continuity of data. In such cases, consider using ",paraId:23,tocIndex:4},{value:"heatmaps",paraId:24,tocIndex:4},{value:" or ",paraId:23,tocIndex:4},{value:"contour maps",paraId:25,tocIndex:4},{value:".",paraId:23,tocIndex:4},{value:"Bubble Maps",paraId:26,tocIndex:5},{value:"Dot maps use dense small dots to represent data distribution, suitable for showing distribution patterns and density",paraId:27,tocIndex:6},{value:"Bubble maps use circles of different sizes to represent numerical values, suitable for precise comparison of data magnitudes across different regions",paraId:27,tocIndex:6},{value:"Dot maps are more suitable for showing continuous distribution, while bubble maps are more suitable for showing discrete data points",paraId:27,tocIndex:6},{value:"Choropleth Maps",paraId:28,tocIndex:6},{value:"Dot maps represent data characteristics through dot distribution density, not limited by administrative divisions",paraId:29,tocIndex:7},{value:"Choropleth maps represent data ranges through regional colors, related to administrative boundary divisions",paraId:29,tocIndex:7},{value:"Dot maps are more suitable for showing continuous spatial distribution, while choropleth maps are more suitable for showing comparisons between regions",paraId:29,tocIndex:7}]},19497:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(21769);const t=[{value:"A funnel chart is a specialized visualization used to represent data flow through different stages of a business process. Named after its resemblance to a physical funnel, it displays data quantities across successive stages, typically with a wide top and narrow bottom, reflecting the process of data loss or conversion.",paraId:0,tocIndex:0},{value:"Funnel charts are particularly suited for visualizing conversion rates in business processes, such as sales pipelines, user registration flows, or marketing funnels. Through funnel charts, you can intuitively observe data changes across various stages and identify critical conversion points or bottlenecks.",paraId:1,tocIndex:0},{value:"Each layer in a funnel chart represents a stage in the process, with the width or area of the layer typically proportional to the quantity of data at that stage, clearly reflecting the data loss during the conversion process.",paraId:2,tocIndex:0},{value:"Other Names",paraId:3,tocIndex:0},{value:": Funnel Diagram, Sales Funnel",paraId:3,tocIndex:0},{value:"Chart Type",paraId:4,tocIndex:2},{value:"Basic Funnel Chart",paraId:4,tocIndex:2},{value:"Suitable Data",paraId:4,tocIndex:2},{value:"Ordered categorical data: a categorical field for process stages and a value field for each stage",paraId:4,tocIndex:2},{value:"Function",paraId:4,tocIndex:2},{value:"Display data flow and conversion rates across stages of a business process",paraId:4,tocIndex:2},{value:"Data-to-Visual Mapping",paraId:4,tocIndex:2},{value:"Stage field mapped to funnel layers",paraId:4,tocIndex:2},{value:"Value field mapped to layer width or area",paraId:4,tocIndex:2},{value:"Colors distinguish different stages",paraId:4,tocIndex:2},{value:"Suitable Scenarios",paraId:4,tocIndex:2},{value:"Analyzing conversions and identifying loss points in multi-stage processes",paraId:4,tocIndex:2},{value:"Example 1: ",paraId:5,tocIndex:4},{value:"Sales Process Conversion Analysis",paraId:5,tocIndex:4},{value:"The chart below shows the conversion across different stages of a sales funnel, from initial leads to final deals.",paraId:6,tocIndex:4},{value:"stage",paraId:7,tocIndex:4},{value:"value",paraId:7,tocIndex:4},{value:"Visits",paraId:7,tocIndex:4},{value:"8043",paraId:7,tocIndex:4},{value:"Inquiries",paraId:7,tocIndex:4},{value:"2136",paraId:7,tocIndex:4},{value:"Quotes",paraId:7,tocIndex:4},{value:"908",paraId:7,tocIndex:4},{value:"Negotiations",paraId:7,tocIndex:4},{value:"691",paraId:7,tocIndex:4},{value:"Deals",paraId:7,tocIndex:4},{value:"527",paraId:7,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { stage: 'Visits', value: 8043 },\n    { stage: 'Inquiries', value: 2136 },\n    { stage: 'Quotes', value: 908 },\n    { stage: 'Negotiations', value: 691 },\n    { stage: 'Deals', value: 527 },\n  ],\n  encode: {\n    x: 'stage',\n    y: 'value',\n    color: 'stage',\n    shape: 'funnel',\n  },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  transform: [\n    {\n      type: 'symmetryY',\n    },\n  ],\n  scale: {\n    color: {\n      palette: 'spectral',\n    },\n  },\n  style: {\n    labelText: (d) => `${d.stage}: ${d.value}`,\n  },\n  animate: { enter: { type: 'fadeIn' } },\n  axis: false,\n  labels: [\n    {\n      text: (d) => `${d.stage}\\n${d.value}`,\n      position: 'inside',\n      transform: [{ type: 'contrastReverse' }],\n    },\n  ],\n  legend: false,\n});\n\nchart.render();\n",paraId:8,tocIndex:4},{value:"Explanation",paraId:9,tocIndex:4},{value:":",paraId:9,tocIndex:4},{value:"The ",paraId:10,tocIndex:4},{value:"stage",paraId:10,tocIndex:4},{value:" field is mapped to each layer of the funnel, representing different stages of the sales process",paraId:10,tocIndex:4},{value:"The ",paraId:10,tocIndex:4},{value:"value",paraId:10,tocIndex:4},{value:" field is mapped to the width of each layer, intuitively showing the conversion from the top to the bottom of the funnel",paraId:10,tocIndex:4},{value:"Through the funnel shape, you can clearly see the conversion rates and loss between stages",paraId:10,tocIndex:4},{value:"Example 2: ",paraId:11,tocIndex:4},{value:"Website Traffic Conversion Analysis",paraId:11,tocIndex:4},{value:"Funnel charts can effectively analyze the conversion of website traffic from visits to final actions, helping identify key points of user drop-off.",paraId:12,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { stage: 'Homepage Visit', value: 100000, percent: '100%' },\n    { stage: 'Product Search', value: 60000, percent: '60%' },\n    { stage: 'Product Detail View', value: 30000, percent: '30%' },\n    { stage: 'Add to Cart', value: 10000, percent: '10%' },\n    { stage: 'Completed Purchase', value: 5000, percent: '5%' },\n  ],\n  encode: {\n    x: 'stage',\n    y: 'value',\n    color: 'stage',\n    shape: 'funnel',\n  },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  transform: [\n    {\n      type: 'symmetryY',\n    },\n  ],\n  scale: {\n    color: {\n      palette: 'blues',\n    },\n  },\n  style: {\n    labelText: (d) => `${d.stage}: ${d.percent}`,\n  },\n  animate: { enter: { type: 'fadeIn' } },\n  axis: false,\n  labels: [\n    {\n      text: (d) => `${d.stage}\\n${d.percent}`,\n      position: 'inside',\n      transform: [{ type: 'contrastReverse' }],\n    },\n  ],\n  legend: false,\n});\n\nchart.render();\n",paraId:13,tocIndex:4},{value:"Explanation",paraId:14,tocIndex:4},{value:":",paraId:14,tocIndex:4},{value:"Each layer represents a different stage of website traffic conversion",paraId:15,tocIndex:4},{value:"The width of each layer reflects the number of users at that stage",paraId:15,tocIndex:4},{value:"By comparing differences between adjacent layers, you can identify major points of user drop-off",paraId:15,tocIndex:4},{value:"Percentage labels provide intuitive visualization of conversion effectiveness",paraId:15,tocIndex:4},{value:"Example 3: ",paraId:16,tocIndex:4},{value:"Comparative Funnel Charts for Different Channels",paraId:16,tocIndex:4},{value:"When you need to compare conversion effectiveness across different channels or time periods, comparative funnel charts are useful for analysis.",paraId:17,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  data: [\n    { stage: 'Visits', value: 8043, category: 'Channel A' },\n    { stage: 'Inquiries', value: 2136, category: 'Channel A' },\n    { stage: 'Quotes', value: 908, category: 'Channel A' },\n    { stage: 'Negotiations', value: 691, category: 'Channel A' },\n    { stage: 'Deals', value: 527, category: 'Channel A' },\n    { stage: 'Visits', value: 6841, category: 'Channel B' },\n    { stage: 'Inquiries', value: 2761, category: 'Channel B' },\n    { stage: 'Quotes', value: 1098, category: 'Channel B' },\n    { stage: 'Negotiations', value: 624, category: 'Channel B' },\n    { stage: 'Deals', value: 487, category: 'Channel B' },\n  ],\n  axis: false,\n  children: [\n    {\n      type: 'interval',\n      region: { start: { x: 0, y: 0 }, end: { x: 0.48, y: 1 } },\n      transform: [\n        { type: 'filter', callback: (d) => d.category === 'Channel A' },\n      ],\n      encode: {\n        x: 'stage',\n        y: 'value',\n        color: 'stage',\n        shape: 'funnel',\n      },\n      coordinate: { transform: [{ type: 'transpose' }] },\n      transform: [\n        {\n          type: 'symmetryY',\n        },\n      ],\n      scale: {\n        color: { palette: 'spectral' },\n      },\n      style: {\n        labelText: (d) => `${d.value}`,\n      },\n      animate: { enter: { type: 'fadeIn' } },\n      axis: false,\n      labels: [\n        {\n          text: (d) => `${d.value}`,\n          position: 'inside',\n          transform: [{ type: 'contrastReverse' }],\n        },\n      ],\n      title: 'Channel A',\n    },\n    {\n      type: 'interval',\n      region: { start: { x: 0.52, y: 0 }, end: { x: 1, y: 1 } },\n      transform: [\n        { type: 'filter', callback: (d) => d.category === 'Channel B' },\n      ],\n      encode: {\n        x: 'stage',\n        y: 'value',\n        color: 'stage',\n        shape: 'funnel',\n      },\n      coordinate: { transform: [{ type: 'transpose' }] },\n      transform: [\n        {\n          type: 'symmetryY',\n        },\n      ],\n      scale: {\n        color: { palette: 'spectral' },\n      },\n      style: {\n        labelText: (d) => `${d.value}`,\n      },\n      animate: { enter: { type: 'fadeIn' } },\n      axis: false,\n      labels: [\n        {\n          text: (d) => `${d.value}`,\n          position: 'inside',\n          transform: [{ type: 'contrastReverse' }],\n        },\n      ],\n      title: 'Channel B',\n    },\n  ],\n  legend: false,\n});\n\nchart.render();\n",paraId:18,tocIndex:4},{value:"Explanation",paraId:19,tocIndex:4},{value:":",paraId:19,tocIndex:4},{value:"Side-by-side display of conversion funnels for two channels allows for intuitive comparison",paraId:20,tocIndex:4},{value:"Consistent color coding for corresponding stages facilitates comparison",paraId:20,tocIndex:4},{value:"You can clearly observe differences in conversion efficiency across channels at various stages",paraId:20,tocIndex:4},{value:"Example 1: ",paraId:21,tocIndex:5},{value:"Not Suitable for Unordered Data or Data Without Clear Hierarchy",paraId:21,tocIndex:5},{value:"The essence of a funnel chart is to display conversion in an ordered process. If the data has no clear sequence or hierarchical relationship, using a funnel chart can be misleading. For such data, bar charts or pie charts might be more appropriate choices.",paraId:22,tocIndex:5},{value:"Example 2: ",paraId:23,tocIndex:5},{value:"Not Suitable for Data with Fluctuating or Increasing Values Across Stages",paraId:23,tocIndex:5},{value:"Funnel charts typically express a decreasing process from more to less. If there are stages where values increase compared to previous stages (e.g., user numbers increasing due to marketing campaigns), traditional funnel charts may not be suitable, and other chart forms should be considered.",paraId:24,tocIndex:5},{value:"Comparative funnel charts can more clearly show comparisons between two different processes or entities, helping to identify differences and advantages between different approaches.",paraId:25,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { action: 'Visit', visitor: 500, site: 'Site1' },\n    { action: 'Browse', visitor: 400, site: 'Site1' },\n    { action: 'Interact', visitor: 300, site: 'Site1' },\n    { action: 'Order', visitor: 200, site: 'Site1' },\n    { action: 'Complete', visitor: 100, site: 'Site1' },\n    { action: 'Visit', visitor: 550, site: 'Site2' },\n    { action: 'Browse', visitor: 420, site: 'Site2' },\n    { action: 'Interact', visitor: 280, site: 'Site2' },\n    { action: 'Order', visitor: 150, site: 'Site2' },\n    { action: 'Complete', visitor: 80, site: 'Site2' },\n  ],\n  scale: {\n    x: { padding: 0 },\n    color: { range: ['#0050B3', '#1890FF', '#40A9FF', '#69C0FF', '#BAE7FF'] },\n  },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  axis: false,\n  children: [\n    {\n      type: 'interval',\n      data: {\n        transform: [{ type: 'filter', callback: (d) => d.site === 'Site1' }],\n      },\n      encode: { x: 'action', y: 'visitor', color: 'action', shape: 'funnel' },\n      style: { stroke: '#FFF' },\n      animate: { enter: { type: 'fadeIn' } },\n      labels: [\n        {\n          text: 'visitor',\n          position: 'inside',\n          transform: [{ type: 'contrastReverse' }],\n        },\n        {\n          text: 'action',\n          position: 'right',\n          dx: (d) => {\n            return d.action === 'Complete' ? 48 : 16;\n          },\n        },\n      ],\n    },\n    {\n      type: 'interval',\n      data: {\n        transform: [{ type: 'filter', callback: (d) => d.site === 'Site2' }],\n      },\n      encode: {\n        x: 'action',\n        y: (d) => -d.visitor,\n        color: 'action',\n        shape: 'funnel',\n      },\n      style: { stroke: '#FFF' },\n      animate: { enter: { type: 'fadeIn' } },\n      labels: [\n        {\n          text: 'visitor',\n          position: 'inside',\n          transform: [{ type: 'contrastReverse' }],\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:26,tocIndex:7},{value:"Explanation",paraId:27,tocIndex:7},{value:":",paraId:27,tocIndex:7},{value:"Horizontal comparative layout displays the conversion funnel effects of two sites",paraId:28,tocIndex:7},{value:"Upper and lower funnels separately show data from different sites for intuitive comparison",paraId:28,tocIndex:7},{value:"Uses y-axis negative value transformation to achieve reversed display of the lower funnel, creating a mirrored comparison effect",paraId:28,tocIndex:7},{value:"Same color coding and label configuration ensures consistency in comparison",paraId:28,tocIndex:7},{value:"Pyramid funnel charts are a variant that displays conversion processes through symmetrical pyramid shapes, better highlighting the conversion rate changes at each stage.",paraId:29,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  paddingRight: 80,\n  data: {\n    type: 'inline',\n    value: [\n      { action: 'Browse Website', pv: 50000 },\n      { action: 'Add to Cart', pv: 35000 },\n      { action: 'Generate Order', pv: 25000 },\n      { action: 'Pay Order', pv: 15000 },\n      { action: 'Complete Transaction', pv: 8000 },\n    ],\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) =>\n          data.map((d) => ({\n            ...d,\n            rate: d.pv / data[0].pv,\n          })),\n      },\n    ],\n  },\n  encode: { x: 'action', y: 'pv', color: 'action', shape: 'pyramid' },\n  transform: [{ type: 'symmetryY' }],\n  scale: { x: { padding: 0 } },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  animate: { enter: { type: 'fadeIn' } },\n  axis: false,\n  legend: { color: { position: 'bottom' } },\n  labels: [\n    { text: (d) => `${d.action} ${d.pv}`, textAlign: 'left' },\n    {\n      text: (d) => `${(d.rate * 100).toFixed(1)}%`,\n      position: 'inside',\n      transform: [{ type: 'contrastReverse' }],\n    },\n  ],\n});\n\nchart.render();\n",paraId:30,tocIndex:8},{value:"Explanation",paraId:31,tocIndex:8},{value:":",paraId:31,tocIndex:8},{value:"Uses ",paraId:32,tocIndex:8},{value:'shape: "pyramid"',paraId:32,tocIndex:8},{value:" to create symmetrical pyramid shape for better visual balance",paraId:32,tocIndex:8},{value:"Implements symmetrical pyramid layout through ",paraId:32,tocIndex:8},{value:"symmetryY",paraId:32,tocIndex:8},{value:" transformation",paraId:32,tocIndex:8},{value:"Automatically calculates and displays conversion rate percentages for each stage",paraId:32,tocIndex:8},{value:"Horizontal display facilitates reading label information, especially suitable for scenarios with longer stage names",paraId:32,tocIndex:8},{value:"Pyramid Charts",paraId:33,tocIndex:9},{value:"Funnel charts are typically used to show data loss processes, with values decreasing from top to bottom",paraId:34,tocIndex:10},{value:"Pyramid charts are more commonly used for hierarchical structures or symmetric data comparison between two sides",paraId:34,tocIndex:10},{value:"Though similar in shape, they have different application scenarios and data characteristics",paraId:34,tocIndex:10},{value:"Bar Charts",paraId:35,tocIndex:10},{value:"Funnel charts emphasize process conversion and the continuous relationship between stages",paraId:36,tocIndex:11},{value:"Bar charts are better for direct comparison of values between different categories",paraId:36,tocIndex:11},{value:"When detailed analysis of process conversion is needed, funnel charts provide more intuitive visual effects",paraId:36,tocIndex:11},{value:"Pie Charts",paraId:37,tocIndex:11},{value:"Funnel charts display ordered stages in a process and their relationships",paraId:38,tocIndex:12},{value:"Pie charts show proportion relationships within a whole, without emphasizing order",paraId:38,tocIndex:12},{value:"When focusing on conversion between stages rather than simple proportions, funnel charts are the better choice",paraId:38,tocIndex:12}]},16414:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(80712);const t=[{value:"A Gantt chart is a project management tool that graphically displays the sequence and duration of specific project activities through an activity list and time scale. The underlying concept of a Gantt chart is simple, basically a bar chart where the horizontal axis represents time, the vertical axis represents activities (projects), and the bars represent the planned and actual activity completion status over the entire period.",paraId:0,tocIndex:0},{value:"Gantt charts display the intrinsic relationships between projects, progress, and other time-related system developments as they progress over time through bar charts. This type of chart vividly expresses the start and end times of various tasks in a project plan and the interrelationships between tasks through task lists and time scales.",paraId:1,tocIndex:0},{value:"Gantt charts are one of the most important tools in project management, widely used in project planning, task scheduling, resource management, and other scenarios.",paraId:2,tocIndex:0},{value:"English Name",paraId:3,tocIndex:0},{value:": Gantt Chart",paraId:3,tocIndex:0},{value:"Chart Type",paraId:4,tocIndex:1},{value:"Basic Gantt Chart",paraId:4,tocIndex:1},{value:"Suitable Data",paraId:4,tocIndex:1},{value:"Project data: one task name field, one start time field, one end time field",paraId:4,tocIndex:1},{value:"Function",paraId:4,tocIndex:1},{value:"Display time scheduling and execution progress of project tasks",paraId:4,tocIndex:1},{value:"Data to Graphics Mapping",paraId:4,tocIndex:1},{value:"Task name field maps to vertical axis position",paraId:4,tocIndex:1},{value:"Start time and end time fields map to bar start and end positions",paraId:4,tocIndex:1},{value:"Task duration maps to bar length",paraId:4,tocIndex:1},{value:"Suitable Data Volume",paraId:4,tocIndex:1},{value:"No more than 20 tasks",paraId:4,tocIndex:1},{value:"Example 1: ",paraId:5,tocIndex:3},{value:"Suitable for Project Progress Management",paraId:5,tocIndex:3},{value:"The following chart is a Gantt chart for an event planning project, showing the time scheduling and dependencies of different tasks.",paraId:6,tocIndex:3},{value:"name (Task Name)",paraId:7,tocIndex:3},{value:"startTime (Start Time)",paraId:7,tocIndex:3},{value:"endTime (End Time)",paraId:7,tocIndex:3},{value:"Event Planning",paraId:7,tocIndex:3},{value:"1",paraId:7,tocIndex:3},{value:"4",paraId:7,tocIndex:3},{value:"Venue Logistics Planning",paraId:7,tocIndex:3},{value:"3",paraId:7,tocIndex:3},{value:"13",paraId:7,tocIndex:3},{value:"Select Vendors",paraId:7,tocIndex:3},{value:"5",paraId:7,tocIndex:3},{value:"8",paraId:7,tocIndex:3},{value:"Venue Rental",paraId:7,tocIndex:3},{value:"9",paraId:7,tocIndex:3},{value:"13",paraId:7,tocIndex:3},{value:"Book Catering Service",paraId:7,tocIndex:3},{value:"10",paraId:7,tocIndex:3},{value:"14",paraId:7,tocIndex:3},{value:"Hire Event Decoration Team",paraId:7,tocIndex:3},{value:"12",paraId:7,tocIndex:3},{value:"17",paraId:7,tocIndex:3},{value:"Rehearsal",paraId:7,tocIndex:3},{value:"14",paraId:7,tocIndex:3},{value:"16",paraId:7,tocIndex:3},{value:"Event Celebration",paraId:7,tocIndex:3},{value:"17",paraId:7,tocIndex:3},{value:"18",paraId:7,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { name: 'Event Planning', startTime: 1, endTime: 4 },\n    { name: 'Venue Logistics Planning', startTime: 3, endTime: 13 },\n    { name: 'Select Vendors', startTime: 5, endTime: 8 },\n    { name: 'Venue Rental', startTime: 9, endTime: 13 },\n    { name: 'Book Catering Service', startTime: 10, endTime: 14 },\n    { name: 'Hire Event Decoration Team', startTime: 12, endTime: 17 },\n    { name: 'Rehearsal', startTime: 14, endTime: 16 },\n    { name: 'Event Celebration', startTime: 17, endTime: 18 },\n  ],\n  encode: {\n    x: 'name',\n    y: 'startTime',\n    y1: 'endTime',\n    color: 'name',\n  },\n  coordinate: {\n    transform: [{ type: 'transpose' }],\n  },\n  axis: {\n    x: {\n      title: 'Tasks',\n    },\n    y: {\n      title: 'Time (Days)',\n    },\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:8,tocIndex:3},{value:"Explanation",paraId:9,tocIndex:3},{value:":",paraId:9,tocIndex:3},{value:"The ",paraId:10,tocIndex:3},{value:"name",paraId:10,tocIndex:3},{value:" field maps to the horizontal axis position to distinguish different tasks",paraId:10,tocIndex:3},{value:"The ",paraId:10,tocIndex:3},{value:"startTime",paraId:10,tocIndex:3},{value:" and ",paraId:10,tocIndex:3},{value:"endTime",paraId:10,tocIndex:3},{value:" fields map to the ",paraId:10,tocIndex:3},{value:"y",paraId:10,tocIndex:3},{value:" and ",paraId:10,tocIndex:3},{value:"y1",paraId:10,tocIndex:3},{value:" channels, representing the start and end times of tasks",paraId:10,tocIndex:3},{value:"The ",paraId:10,tocIndex:3},{value:"color",paraId:10,tocIndex:3},{value:" channel uses task names to distinguish each task with different colors",paraId:10,tocIndex:3},{value:"Uses ",paraId:10,tocIndex:3},{value:"transpose",paraId:10,tocIndex:3},{value:" coordinate transformation to convert the vertical time axis to horizontal",paraId:10,tocIndex:3},{value:"Example 2: ",paraId:11,tocIndex:3},{value:"Suitable for Displaying Project Progress with Time-based Animation",paraId:11,tocIndex:3},{value:"Animation effects can more vividly demonstrate the time sequence and execution process of project tasks.",paraId:12,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { name: 'Requirements Analysis', startTime: 1, endTime: 5, phase: 'Planning Phase' },\n    { name: 'System Design', startTime: 4, endTime: 10, phase: 'Design Phase' },\n    { name: 'Frontend Development', startTime: 8, endTime: 20, phase: 'Development Phase' },\n    { name: 'Backend Development', startTime: 10, endTime: 22, phase: 'Development Phase' },\n    { name: 'Integration Testing', startTime: 18, endTime: 25, phase: 'Testing Phase' },\n    { name: 'System Deployment', startTime: 24, endTime: 28, phase: 'Deployment Phase' },\n    { name: 'User Acceptance', startTime: 26, endTime: 30, phase: 'Acceptance Phase' },\n  ],\n  encode: {\n    x: 'name',\n    y: 'startTime',\n    y1: 'endTime',\n    color: 'phase',\n    enterDuration: (d) => (d.endTime - d.startTime) * 200,\n    enterDelay: (d) => d.startTime * 100,\n  },\n  coordinate: {\n    transform: [{ type: 'transpose' }],\n  },\n  scale: {\n    enterDuration: {\n      range: [0, 5000],\n    },\n  },\n  axis: {\n    x: {\n      title: 'Project Tasks',\n    },\n    y: {\n      title: 'Time (Weeks)',\n    },\n  },\n  legend: {\n    color: {\n      title: 'Project Phase',\n    },\n  },\n});\n\nchart.render();\n",paraId:13,tocIndex:3},{value:"Explanation",paraId:14,tocIndex:3},{value:":",paraId:14,tocIndex:3},{value:"The ",paraId:15,tocIndex:3},{value:"phase",paraId:15,tocIndex:3},{value:" field maps to color to distinguish project phases with different colors",paraId:15,tocIndex:3},{value:"enterDuration",paraId:15,tocIndex:3},{value:" and ",paraId:15,tocIndex:3},{value:"enterDelay",paraId:15,tocIndex:3},{value:" channels implement time-based animation effects",paraId:15,tocIndex:3},{value:"Animation duration is proportional to task duration, delay time is proportional to start time",paraId:15,tocIndex:3},{value:"Example 3: ",paraId:16,tocIndex:3},{value:"Suitable for Multi-project Comparison Gantt Charts",paraId:16,tocIndex:3},{value:"When comparing the execution of multiple projects, grouped Gantt charts can be used.",paraId:17,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { project: 'Project A', task: 'Design', startTime: 1, endTime: 5 },\n    { project: 'Project A', task: 'Development', startTime: 4, endTime: 12 },\n    { project: 'Project A', task: 'Testing', startTime: 10, endTime: 15 },\n    { project: 'Project B', task: 'Design', startTime: 2, endTime: 6 },\n    { project: 'Project B', task: 'Development', startTime: 5, endTime: 14 },\n    { project: 'Project B', task: 'Testing', startTime: 12, endTime: 16 },\n    { project: 'Project C', task: 'Design', startTime: 3, endTime: 8 },\n    { project: 'Project C', task: 'Development', startTime: 7, endTime: 16 },\n    { project: 'Project C', task: 'Testing', startTime: 14, endTime: 18 },\n  ],\n  encode: {\n    x: (d) => `${d.project}-${d.task}`,\n    y: 'startTime',\n    y1: 'endTime',\n    color: 'project',\n  },\n  coordinate: {\n    transform: [{ type: 'transpose' }],\n  },\n  axis: {\n    x: {\n      title: 'Project Tasks',\n      labelTransform: 'rotate(45)',\n    },\n    y: {\n      title: 'Time (Weeks)',\n    },\n  },\n  legend: {\n    color: {\n      title: 'Project',\n    },\n  },\n});\n\nchart.render();\n",paraId:18,tocIndex:3},{value:"Explanation",paraId:19,tocIndex:3},{value:":",paraId:19,tocIndex:3},{value:"Combines ",paraId:20,tocIndex:3},{value:"project",paraId:20,tocIndex:3},{value:" and ",paraId:20,tocIndex:3},{value:"task",paraId:20,tocIndex:3},{value:" fields to create unique identifiers",paraId:20,tocIndex:3},{value:"series",paraId:20,tocIndex:3},{value:" channel is used to stack different tasks at the same position",paraId:20,tocIndex:3},{value:"Labels rotated 45 degrees to avoid overlap",paraId:20,tocIndex:3},{value:"Example 4: ",paraId:21,tocIndex:3},{value:"Suitable for Gantt Charts with Milestones",paraId:21,tocIndex:3},{value:"In project management, milestones are important time points that can be highlighted with different markers.",paraId:22,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  children: [\n    {\n      type: 'interval',\n      data: [\n        { name: 'Market Research', startTime: 1, endTime: 4, type: 'Task' },\n        { name: 'Product Design', startTime: 3, endTime: 8, type: 'Task' },\n        { name: 'Technical Development', startTime: 6, endTime: 15, type: 'Task' },\n        { name: 'Internal Testing', startTime: 14, endTime: 18, type: 'Task' },\n        { name: 'Marketing Promotion', startTime: 17, endTime: 22, type: 'Task' },\n        { name: 'Official Launch', startTime: 20, endTime: 24, type: 'Task' },\n      ],\n      encode: {\n        x: 'name',\n        y: 'startTime',\n        y1: 'endTime',\n        color: 'type',\n      },\n      coordinate: {\n        transform: [{ type: 'transpose' }],\n      },\n    },\n    {\n      type: 'point',\n      data: [\n        { name: 'Research Complete', time: 4, milestone: 'Milestone' },\n        { name: 'Design Approved', time: 8, milestone: 'Milestone' },\n        { name: 'Development Complete', time: 15, milestone: 'Milestone' },\n        { name: 'Product Launch', time: 24, milestone: 'Milestone' },\n      ],\n      encode: {\n        x: 'name',\n        y: 'time',\n        shape: 'diamond',\n        color: 'milestone',\n        size: 8,\n      },\n      coordinate: {\n        transform: [{ type: 'transpose' }],\n      },\n    },\n  ],\n  axis: {\n    x: {\n      title: 'Project Activities',\n    },\n    y: {\n      title: 'Time (Weeks)',\n    },\n  },\n  legend: {\n    color: {\n      title: 'Type',\n    },\n  },\n});\n\nchart.render();\n",paraId:23,tocIndex:3},{value:"Explanation",paraId:24,tocIndex:3},{value:":",paraId:24,tocIndex:3},{value:"Uses composite view combining interval and point graphics",paraId:25,tocIndex:3},{value:"Interval displays task time periods, point displays milestone nodes",paraId:25,tocIndex:3},{value:"Milestones use diamond shapes for highlighting",paraId:25,tocIndex:3},{value:"Example 1: ",paraId:26,tocIndex:4},{value:"Not suitable for displaying data without clear time dimensions",paraId:26,tocIndex:4},{value:"Gantt charts are mainly used to display time-related projects or tasks. For categorical comparisons without time dimensions, other chart types like bar charts should be used.",paraId:27,tocIndex:4},{value:"Example 2: ",paraId:28,tocIndex:4},{value:"Not suitable for displaying overly fine-grained time data",paraId:28,tocIndex:4},{value:"When there are too many tasks or the time granularity is too fine, Gantt charts become crowded and difficult to read. Data aggregation or other visualization methods should be considered.",paraId:29,tocIndex:4},{value:"Example 3: ",paraId:30,tocIndex:4},{value:"Not suitable for displaying continuous numerical change trends",paraId:30,tocIndex:4},{value:"Gantt charts mainly display discrete task time periods. For continuous numerical changes, line charts or area charts should be used.",paraId:31,tocIndex:4},{value:"Colors or fill patterns can be used to show task completion progress.",paraId:32,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  children: [\n    {\n      type: 'interval',\n      data: [\n        { name: 'Requirements Analysis', startTime: 1, endTime: 5, progress: 100 },\n        { name: 'UI Design', startTime: 3, endTime: 8, progress: 80 },\n        { name: 'Frontend Development', startTime: 6, endTime: 15, progress: 60 },\n        { name: 'Backend Development', startTime: 8, endTime: 16, progress: 40 },\n        { name: 'Testing & Acceptance', startTime: 14, endTime: 18, progress: 0 },\n      ],\n      encode: {\n        x: 'name',\n        y: 'startTime',\n        y1: 'endTime',\n        color: 'lightgray',\n      },\n      coordinate: {\n        transform: [{ type: 'transpose' }],\n      },\n      style: {\n        fillOpacity: 0.3,\n      },\n    },\n    {\n      type: 'interval',\n      data: [\n        { name: 'Requirements Analysis', startTime: 1, currentTime: 5, progress: 100 },\n        { name: 'UI Design', startTime: 3, currentTime: 6.6, progress: 80 },\n        { name: 'Frontend Development', startTime: 6, currentTime: 11.4, progress: 60 },\n        { name: 'Backend Development', startTime: 8, currentTime: 11.2, progress: 40 },\n      ],\n      encode: {\n        x: 'name',\n        y: 'startTime',\n        y1: 'currentTime',\n        color: (d) =>\n          d.progress >= 100 ? 'green' : d.progress >= 50 ? 'orange' : 'red',\n      },\n      coordinate: {\n        transform: [{ type: 'transpose' }],\n      },\n    },\n  ],\n  axis: {\n    x: {\n      title: 'Project Tasks',\n    },\n    y: {\n      title: 'Time (Weeks)',\n    },\n  },\n});\n\nchart.render();\n",paraId:33,tocIndex:6},{value:"Lines or arrows can be used to show dependencies between tasks.",paraId:34,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  children: [\n    {\n      type: 'interval',\n      data: [\n        { name: 'Task A', startTime: 1, endTime: 5, id: 'A' },\n        { name: 'Task B', startTime: 5, endTime: 10, id: 'B' },\n        { name: 'Task C', startTime: 8, endTime: 15, id: 'C' },\n        { name: 'Task D', startTime: 15, endTime: 20, id: 'D' },\n      ],\n      encode: {\n        x: 'name',\n        y: 'startTime',\n        y1: 'endTime',\n        color: 'name',\n      },\n      coordinate: {\n        transform: [{ type: 'transpose' }],\n      },\n    },\n    {\n      type: 'link',\n      data: [\n        { source: 'Task A', target: 'Task B', x1: 5, x2: 5 },\n        { source: 'Task B', target: 'Task C', x1: 10, x2: 8 },\n        { source: 'Task C', target: 'Task D', x1: 15, x2: 15 },\n      ],\n      encode: {\n        x: 'source',\n        y: 'x1',\n        x1: 'target',\n        y1: 'x2',\n      },\n      coordinate: {\n        transform: [{ type: 'transpose' }],\n      },\n      style: {\n        stroke: '#666',\n        strokeWidth: 2,\n        lineDash: [4, 4],\n      },\n    },\n  ],\n  axis: {\n    x: {\n      title: 'Project Tasks',\n    },\n    y: {\n      title: 'Time (Weeks)',\n    },\n  },\n});\n\nchart.render();\n",paraId:35,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { name: 'event planning', startTime: 1, endTime: 4 },\n    { name: 'layout logistics', startTime: 3, endTime: 13 },\n    { name: 'select vendors', startTime: 5, endTime: 8 },\n    { name: 'hire venue', startTime: 9, endTime: 13 },\n    { name: 'hire caterer', startTime: 10, endTime: 14 },\n    { name: 'hire event decorators', startTime: 12, endTime: 17 },\n    { name: 'rehearsal', startTime: 14, endTime: 16 },\n    { name: 'event celebration', startTime: 17, endTime: 18 },\n  ],\n  encode: {\n    x: 'name',\n    y: ['endTime', 'startTime'],\n    color: 'name',\n    enterDuration: (d) => d.endTime - d.startTime,\n    enterDelay: 'startTime',\n  },\n  scale: { enterDuration: { zero: true, range: [0, 3000] } },\n  coordinate: { transform: [{ type: 'transpose' }] },\n});\n\nchart.render();\n",paraId:36,tocIndex:8},{value:"Bar Charts",paraId:37,tocIndex:9},{value:"Gantt charts are mainly used to display task scheduling and project progress",paraId:38,tocIndex:10},{value:"Bar charts are mainly used to compare numerical values across different categories",paraId:38,tocIndex:10},{value:"Line Charts",paraId:39,tocIndex:10},{value:"Gantt charts display task duration and interrelationships",paraId:40,tocIndex:11},{value:"Line charts mainly display continuous trends of values over time",paraId:40,tocIndex:11},{value:"Area Charts",paraId:41,tocIndex:11},{value:"Gantt charts use discrete bars to display task time periods",paraId:42,tocIndex:12},{value:"Area charts use continuous filled areas to display trends of values over time",paraId:42,tocIndex:12}]},42492:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(85857);const t=[{value:"A gauge chart is a semicircular or circular visualization that displays data within a specified range. It uses a pointer and scale to simulate physical gauges (such as speedometers or pressure gauges), intuitively expressing the relationship between the data value and target values or thresholds.",paraId:0,tocIndex:0},{value:"Gauge charts are particularly suitable for displaying progress, completion rates, or single values within a certain range. Different value ranges can be distinguished by colors, enhancing data readability and warning effects.",paraId:1,tocIndex:0},{value:"In data visualization, gauge charts are commonly used to represent key performance indicators (KPIs), goal achievement, system status monitoring, etc., helping users quickly understand how data performs against preset targets.",paraId:2,tocIndex:0},{value:"Other Names",paraId:3,tocIndex:0},{value:": Dial Chart, Speedometer Chart",paraId:3,tocIndex:0},{value:"Chart Type",paraId:4,tocIndex:2},{value:"Basic Gauge Chart",paraId:4,tocIndex:2},{value:"Suitable Data",paraId:4,tocIndex:2},{value:"Single value data: current value, target/total value, optional thresholds",paraId:4,tocIndex:2},{value:"Function",paraId:4,tocIndex:2},{value:"Display data position within a specified range using pointer and scale",paraId:4,tocIndex:2},{value:"Data-to-Visual Mapping",paraId:4,tocIndex:2},{value:"Current value maps to pointer position",paraId:4,tocIndex:2},{value:"Total value defines scale range",paraId:4,tocIndex:2},{value:"Optional thresholds map to color sections",paraId:4,tocIndex:2},{value:"Suitable Scenarios",paraId:4,tocIndex:2},{value:"Expressing completion degree or status of a single metric within a target range",paraId:4,tocIndex:2},{value:"Example 1: ",paraId:5,tocIndex:4},{value:"Suitable for showing goal completion progress",paraId:5,tocIndex:4},{value:"The gauge chart below shows the completion status of a scoring metric, with a current score of 120 out of a total of 400.",paraId:6,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'gauge',\n  data: {\n    value: {\n      target: 120,\n      total: 400,\n      name: 'score',\n    },\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:7,tocIndex:4},{value:"Explanation",paraId:8,tocIndex:4},{value:":",paraId:8,tocIndex:4},{value:"target",paraId:9,tocIndex:4},{value:" represents the current score, mapped to the pointer position on the gauge",paraId:9,tocIndex:4},{value:"total",paraId:9,tocIndex:4},{value:" represents the total score, defining the scale range of the gauge",paraId:9,tocIndex:4},{value:"name",paraId:9,tocIndex:4},{value:" represents the name of this metric",paraId:9,tocIndex:4},{value:"The gauge chart intuitively shows the proportion of the current score in the total through pointer position",paraId:9,tocIndex:4},{value:"Example 2: ",paraId:10,tocIndex:4},{value:"Suitable for multi-threshold status monitoring",paraId:10,tocIndex:4},{value:"Gauge charts can clearly show which range the data falls into by setting multiple thresholds and different colors, suitable for system status monitoring, performance evaluation, and other scenarios.",paraId:11,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'gauge',\n  data: {\n    value: {\n      target: 159,\n      total: 400,\n      name: 'score',\n      thresholds: [100, 200, 400],\n    },\n  },\n  scale: {\n    color: {\n      range: ['#F4664A', '#FAAD14', 'green'],\n    },\n  },\n  style: {\n    textContent: (target, total) =>\n      `Score: ${target}\\nPercentage: ${((target / total) * 100).toFixed(0)}%`,\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:12,tocIndex:4},{value:"Explanation",paraId:13,tocIndex:4},{value:":",paraId:13,tocIndex:4},{value:"Three ranges are set using ",paraId:14,tocIndex:4},{value:"thresholds",paraId:14,tocIndex:4},{value:": 0-100, 100-200, and 200-400",paraId:14,tocIndex:4},{value:"Different colors map to each range: red for low scores, yellow for medium scores, green for high scores",paraId:14,tocIndex:4},{value:"The text content is customized to display both the score and percentage of the total",paraId:14,tocIndex:4},{value:"Color changes intuitively reflect the status range of the data",paraId:14,tocIndex:4},{value:"Example 3: ",paraId:15,tocIndex:4},{value:"Customizing gauge chart styles",paraId:15,tocIndex:4},{value:"Gauge charts support highly customizable styles that can be adjusted based on business requirements.",paraId:16,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'gauge',\n  data: {\n    value: {\n      target: 159,\n      total: 400,\n      name: 'score',\n      thresholds: [100, 200, 400],\n    },\n  },\n  scale: {\n    color: {\n      range: ['#F4664A', '#FAAD14', 'green'],\n    },\n  },\n  style: {\n    arcShape: 'round',\n    arcLineWidth: 2,\n    arcStroke: '#fff',\n    textContent: (target, total) =>\n      `Score: ${target}\\nPercentage: ${((target / total) * 100).toFixed(0)}%`,\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:17,tocIndex:4},{value:"Explanation",paraId:18,tocIndex:4},{value:":",paraId:18,tocIndex:4},{value:"arcShape: 'round'",paraId:19,tocIndex:4},{value:" sets the arc shape to have rounded corners",paraId:19,tocIndex:4},{value:"arcLineWidth",paraId:19,tocIndex:4},{value:" and ",paraId:19,tocIndex:4},{value:"arcStroke",paraId:19,tocIndex:4},{value:" set the line width and border color of the arc",paraId:19,tocIndex:4},{value:"The pointer and text position automatically adapt to the gauge layout",paraId:19,tocIndex:4},{value:"Rounded corners and subtle style adjustments make the gauge more modern and aesthetically pleasing",paraId:19,tocIndex:4},{value:"Example 1: ",paraId:20,tocIndex:5},{value:"Not suitable for multi-dimensional data comparison",paraId:20,tocIndex:5},{value:"Gauge charts are primarily suitable for displaying a single metric value within a certain range and are not suitable for direct comparison of multi-dimensional data. If you need to compare data across multiple categories or dimensions, bar charts or radar charts might be better choices.",paraId:21,tocIndex:5},{value:"Example 2: ",paraId:22,tocIndex:5},{value:"Not suitable for time-series trends",paraId:22,tocIndex:5},{value:"Gauge charts display static data at a specific moment and cannot effectively express how data changes over time. For data that needs to show changes over time, line charts or area charts are more appropriate.",paraId:23,tocIndex:5},{value:"Gauge charts support customizing the pointer shape, allowing you to adjust the pointer style according to business scenarios, making the chart more personalized.",paraId:24,tocIndex:7},{value:"import { Chart } from '@antv/g2';\nimport { Path } from '@antv/g';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nfunction getOrigin(points) {\n  if (points.length === 1) return points[0];\n  const [[x0, y0, z0 = 0], [x2, y2, z2 = 0]] = points;\n  return [(x0 + x2) / 2, (y0 + y2) / 2, (z0 + z2) / 2];\n}\n// Custom pointer shape\nconst customShape = (style) => {\n  return (points, value, coordinate, theme) => {\n    // Get the center coordinates of geometric points\n    const [x, y] = getOrigin(points);\n    const [cx, cy] = coordinate.getCenter();\n    // Calculate pointer direction angle\n    const angle = Math.atan2(y - cy, x - cx);\n    const length = 100; // Pointer length\n    const width = 8; // Pointer base width\n    // Construct triangular pointer path\n    return new Path({\n      style: {\n        d: [\n          ['M', cx + Math.cos(angle) * length, cy + Math.sin(angle) * length], // Top point\n          [\n            'L',\n            cx + Math.cos(angle + Math.PI / 2) * width,\n            cy + Math.sin(angle + Math.PI / 2) * width,\n          ], // Bottom left point\n          [\n            'L',\n            cx + Math.cos(angle - Math.PI / 2) * width,\n            cy + Math.sin(angle - Math.PI / 2) * width,\n          ], // Bottom right point\n          ['Z'], // Close path\n        ],\n        fill: '#30BF78', // Fill color\n      },\n    });\n  };\n};\n\nchart.options({\n  type: 'gauge',\n  data: {\n    value: {\n      target: 159,\n      total: 424,\n      name: 'score',\n    },\n  },\n  style: {\n    pointerShape: customShape,\n    pinShape: false,\n    textContent: (target, total) => {\n      return `Score: ${target}\\nPercentage: ${((target / total) * 100).toFixed(\n        0,\n      )}%`;\n    },\n  },\n});\n\nchart.render();\n",paraId:25,tocIndex:7},{value:"Explanation",paraId:26,tocIndex:7},{value:":",paraId:26,tocIndex:7},{value:"pointerShape",paraId:27,tocIndex:7},{value:" customizes the gauge pointer shape as a triangle",paraId:27,tocIndex:7},{value:"pinShape: false",paraId:27,tocIndex:7},{value:" removes the circle at the center of the pointer",paraId:27,tocIndex:7},{value:"You can fully control the appearance, color, and size of the pointer according to business requirements",paraId:27,tocIndex:7},{value:"Pie Charts",paraId:28,tocIndex:8},{value:"Gauge charts focus on showing the position of a single value within a target range, emphasizing the relationship between data and targets or thresholds",paraId:29,tocIndex:9},{value:"Pie charts focus on showing the proportion of multiple parts within a whole",paraId:29,tocIndex:9},{value:"When only concerned with the relationship between a single value and the total, gauge charts provide a more prominent and intuitive representation",paraId:29,tocIndex:9},{value:"Bar Charts",paraId:30,tocIndex:9},{value:"Gauge charts are suitable for displaying a single data point relative to a fixed range, emphasizing completion degree",paraId:31,tocIndex:10},{value:"Bar charts are more suitable for comparing numerical differences between multiple categories",paraId:31,tocIndex:10},{value:"For scenarios requiring precise comparison of multiple values, bar charts are usually a better choice",paraId:31,tocIndex:10}]},38940:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(61571);const t=[{value:"A heatmap is a visualization technique that uses color intensity to map the density or magnitude of two-dimensional data, excelling at revealing distribution patterns, clusters, and anomalies. Heatmaps map two categorical or continuous fields (such as x, y) to coordinate axis and a third numerical field (such as value) to a color gradient, forming a grid-like matrix of colored cells. Typically, cool colors (like blue) represent low values and warm colors (like red) represent high values.",paraId:0,tocIndex:0},{value:"Heatmaps are particularly suitable for displaying the distribution characteristics of large amounts of data points. Through color variations, they intuitively reflect density or intensity changes in a dataset, helping to identify patterns and relationships. When displaying multi-dimensional data, heatmaps are more intuitive than bar charts or scatter plots, clearly showing areas of data concentration and sparsity at a glance.",paraId:1,tocIndex:0},{value:"Heatmaps are widely used in geographic spatial analysis, website user behavior research, correlation analysis in scientific research, and many other scenarios.",paraId:2,tocIndex:0},{value:"Other Names",paraId:3,tocIndex:0},{value:": Heat Map, Thermal Map",paraId:3,tocIndex:0},{value:"Chart Type",paraId:4,tocIndex:2},{value:"Heatmap with Unsmoothed Boundaries",paraId:4,tocIndex:2},{value:"Suitable Data",paraId:4,tocIndex:2},{value:"Three continuous fields",paraId:4,tocIndex:2},{value:"Function",paraId:4,tocIndex:2},{value:"Observe data distribution patterns",paraId:4,tocIndex:2},{value:"Data-to-Visual Mapping",paraId:4,tocIndex:2},{value:"Two continuous fields mapped to x-axis and y-axis respectively. One continuous metadata mapped to color",paraId:4,tocIndex:2},{value:"Suitable Data Volume",paraId:4,tocIndex:2},{value:"More than 30 data points",paraId:4,tocIndex:2},{value:"Chart Type",paraId:5,tocIndex:3},{value:"Heatmap with Smoothed Boundaries",paraId:5,tocIndex:3},{value:"Suitable Data",paraId:5,tocIndex:3},{value:"Three continuous fields",paraId:5,tocIndex:3},{value:"Function",paraId:5,tocIndex:3},{value:"Display data distribution patterns, with statistical algorithms to predict data in unknown areas",paraId:5,tocIndex:3},{value:"Data-to-Visual Mapping",paraId:5,tocIndex:3},{value:"Two continuous fields mapped to x-axis and y-axis respectively. One continuous metadata mapped to color",paraId:5,tocIndex:3},{value:"Suitable Data Volume",paraId:5,tocIndex:3},{value:"More than 30 data points",paraId:5,tocIndex:3},{value:"Example 1: ",paraId:6,tocIndex:5},{value:"Suitable for displaying two-dimensional data distribution density",paraId:6,tocIndex:5},{value:"The heatmap below shows the temperature distribution in a two-dimensional space. Through color variations, you can intuitively see temperature differences across different areas.",paraId:7,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  padding: 0,\n});\n\nchart.options({\n  type: 'view',\n  axis: false,\n  children: [\n    {\n      type: 'image',\n      style: {\n        src: 'https://gw.alipayobjects.com/zos/rmsportal/NeUTMwKtPcPxIFNTWZOZ.png',\n        x: '50%',\n        y: '50%',\n        width: '100%',\n        height: '100%',\n      },\n      tooltip: false,\n    },\n    {\n      type: 'heatmap',\n      data: {\n        type: 'fetch',\n        value: 'https://assets.antv.antgroup.com/g2/heatmap.json',\n      },\n      encode: {\n        x: 'g',\n        y: 'l',\n        color: 'tmp',\n      },\n      style: {\n        opacity: 0,\n      },\n      tooltip: false,\n    },\n  ],\n});\n\nchart.render();\n",paraId:8,tocIndex:5},{value:"Notes",paraId:9,tocIndex:5},{value:":",paraId:9,tocIndex:5},{value:"The ",paraId:10,tocIndex:5},{value:"g",paraId:10,tocIndex:5},{value:" field is mapped to the x-axis and the ",paraId:10,tocIndex:5},{value:"l",paraId:10,tocIndex:5},{value:" field to the y-axis, representing positions in two-dimensional space",paraId:10,tocIndex:5},{value:"The ",paraId:10,tocIndex:5},{value:"tmp",paraId:10,tocIndex:5},{value:" field is mapped to color, representing the temperature value at each position",paraId:10,tocIndex:5},{value:"Background image and heat overlay provide an intuitive display of temperature distribution",paraId:10,tocIndex:5},{value:"Example 2: ",paraId:11,tocIndex:5},{value:"Suitable for displaying density distribution of scatter data",paraId:11,tocIndex:5},{value:"Density heatmaps can show concentration areas of scatter data. The example below shows the relationship between carat and price in a diamond dataset.",paraId:12,tocIndex:5},{value:"import { Chart } from '@antv/g2';\nimport DataSet from '@antv/data-set';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'view',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/diamond.json',\n  },\n  scale: {\n    x: { nice: true, domainMin: -0.5 },\n    y: { nice: true, domainMin: -2000 },\n    color: { nice: true },\n  },\n  children: [\n    {\n      type: 'heatmap',\n      data: {\n        transform: [\n          {\n            type: 'custom',\n            callback: (data) => {\n              const dv = new DataSet.View().source(data);\n              dv.transform({\n                type: 'kernel-smooth.density',\n                fields: ['carat', 'price'],\n                as: ['carat', 'price', 'density'],\n              });\n              return dv.rows;\n            },\n          },\n        ],\n      },\n      encode: {\n        x: 'carat',\n        y: 'price',\n        color: 'density',\n      },\n      style: {\n        opacity: 0.3,\n        gradient: [\n          [0, 'white'],\n          [0.2, 'blue'],\n          [0.4, 'cyan'],\n          [0.6, 'lime'],\n          [0.8, 'yellow'],\n          [0.9, 'red'],\n        ],\n      },\n    },\n    {\n      type: 'point',\n      encode: {\n        x: 'carat',\n        y: 'price',\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:13,tocIndex:5},{value:"Notes",paraId:14,tocIndex:5},{value:":",paraId:14,tocIndex:5},{value:"The ",paraId:15,tocIndex:5},{value:"carat",paraId:15,tocIndex:5},{value:" field and ",paraId:15,tocIndex:5},{value:"price",paraId:15,tocIndex:5},{value:" field are mapped to the x-axis and y-axis respectively",paraId:15,tocIndex:5},{value:"Kernel density estimation is used to calculate the density distribution of scatter points",paraId:15,tocIndex:5},{value:"Density values are mapped to colors, creating a heat effect",paraId:15,tocIndex:5},{value:"Original scatter data is overlaid, allowing simultaneous observation of data points and density distribution",paraId:15,tocIndex:5},{value:"Notes",paraId:16,tocIndex:5},{value:":",paraId:16,tocIndex:5},{value:"Simulates user mouse position coordinates ",paraId:17,tocIndex:5},{value:"x",paraId:17,tocIndex:5},{value:" and ",paraId:17,tocIndex:5},{value:"y",paraId:17,tocIndex:5},{value:" data",paraId:17,tocIndex:5},{value:"Uses ",paraId:17,tocIndex:5},{value:"binX",paraId:17,tocIndex:5},{value:" and ",paraId:17,tocIndex:5},{value:"binY",paraId:17,tocIndex:5},{value:" transforms to group and count continuous position data",paraId:17,tocIndex:5},{value:"Heat effect intuitively reveals dense areas of mouse activity through color intensity",paraId:17,tocIndex:5},{value:"Can intuitively identify interface areas that users focus on",paraId:17,tocIndex:5},{value:"Example 1: ",paraId:18,tocIndex:6},{value:"Not suitable for precise comparison of specific values",paraId:18,tocIndex:6},{value:"Heatmaps express value magnitude through color intensity, but human eyes perceive color less precisely than length. If accurate comparison of specific values is needed, bar charts or line charts are better choices.",paraId:19,tocIndex:6},{value:"Example 2: ",paraId:20,tocIndex:6},{value:"Not suitable for displaying a small number of discrete data points",paraId:20,tocIndex:6},{value:"When there are few data points, the density distribution advantage of heatmaps is not obvious. Using scatter plots directly may be clearer and more intuitive.",paraId:21,tocIndex:6},{value:"Threshold heatmaps divide continuous data into discrete color intervals based on preset threshold ranges, suitable for emphasizing data within specific ranges.",paraId:22,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'cell',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/salary.json',\n  },\n  encode: {\n    x: 'name',\n    y: 'department',\n    color: 'salary',\n  },\n  scale: {\n    color: {\n      type: 'threshold',\n      domain: [7000, 10000, 20000],\n      range: ['#C6E48B', '#7BC96F', '#239A3B', '#196127'],\n    },\n  },\n});\n\nchart.render();\n",paraId:23,tocIndex:8},{value:"Notes",paraId:24,tocIndex:8},{value:":",paraId:24,tocIndex:8},{value:"Uses threshold scale to divide continuous data into discrete intervals",paraId:25,tocIndex:8},{value:"Sets three thresholds at 7000, 10000, and 20000, dividing the data into four intervals",paraId:25,tocIndex:8},{value:"Each interval is represented by a different color, making it easy to distinguish different salary levels",paraId:25,tocIndex:8},{value:"Scatter Plots",paraId:26,tocIndex:9},{value:"Heatmaps emphasize data density and distribution patterns, intuitively showing data concentration areas through color gradients",paraId:27,tocIndex:10},{value:"Scatter plots display each individual data point, more suitable for observing the distribution of individual data points and outliers",paraId:27,tocIndex:10},{value:"Heatmaps are suitable for handling large amounts of data points, while scatter plots may face overlap issues with large data volumes",paraId:27,tocIndex:10},{value:"Bubble Charts",paraId:28,tocIndex:10},{value:"Heatmaps express data density or third-dimension values through color intensity",paraId:29,tocIndex:11},{value:"Bubble charts express third-dimension values through bubble size while displaying specific data point positions",paraId:29,tocIndex:11},{value:"Heatmaps are more suitable for showing continuous distributions and density patterns, while bubble charts are better for showing multi-dimensional relationships of discrete data points",paraId:29,tocIndex:11},{value:"Contour Lines",paraId:30,tocIndex:11},{value:"Heatmaps use color intensity to represent value magnitude, providing intuitive visual comparison",paraId:31,tocIndex:12},{value:"Contour lines connect points of equal value, more suitable for analyzing continuous change trends and gradients",paraId:31,tocIndex:12},{value:"Heatmaps are better for showing density distribution of discrete data points, while contour lines are better for showing continuous surface change patterns",paraId:31,tocIndex:12},{value:"Histograms",paraId:32,tocIndex:12},{value:"Heatmaps can display data distribution in two-dimensional space, suitable for analyzing relationships between two variables",paraId:33,tocIndex:13},{value:"Histograms display frequency distribution of a single variable, more suitable for analyzing distribution characteristics of a single variable",paraId:33,tocIndex:13},{value:"Heatmaps can be seen as an extension of two-dimensional histograms, using color instead of height to represent frequency or density",paraId:33,tocIndex:13}]},51873:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(77045);const t=[{value:"A histogram is a chart that, while similar in shape to ",paraId:0,tocIndex:0},{value:"bar charts",paraId:1,tocIndex:0},{value:", has a completely different meaning. Histograms involve statistical concepts, first grouping data, then counting the number of data elements in each group. In a Cartesian coordinate system, the horizontal axis marks the endpoints of each group, the vertical axis represents frequency, and the height of each rectangle represents the corresponding frequency, called a frequency distribution histogram. Standard frequency distribution histograms require calculating frequency times class width to get the count for each group. Since the class width is fixed for the same histogram, using the vertical axis to directly represent counts, with each rectangle's height representing the corresponding number of data elements, preserves the distribution shape while intuitively showing the count for each group. All examples in this document use non-standard histograms with the vertical axis representing counts.",paraId:0,tocIndex:0},{value:"Related Concepts",paraId:2,tocIndex:0},{value:":",paraId:2,tocIndex:0},{value:"Number of classes: When organizing statistical data, we divide data into several groups by different ranges, and the number of groups is called the number of classes",paraId:3,tocIndex:0},{value:"Class width: The difference between the two endpoints of each group",paraId:3,tocIndex:0},{value:"Frequency: The number of data elements in a group divided by the class width",paraId:3,tocIndex:0},{value:"Functions of Histograms",paraId:4,tocIndex:0},{value:":",paraId:4,tocIndex:0},{value:"Can display the frequency or count distribution of each group",paraId:5,tocIndex:0},{value:"Easy to show differences in frequency or count between groups",paraId:5,tocIndex:0},{value:"Through histograms, you can also observe and estimate which data is more concentrated and where abnormal or isolated data is distributed.",paraId:6,tocIndex:0},{value:"Other Names",paraId:7,tocIndex:0},{value:": Frequency Distribution Chart",paraId:7,tocIndex:0},{value:"Chart Type",paraId:8,tocIndex:2},{value:"Frequency Distribution Histogram",paraId:8,tocIndex:2},{value:"Suitable Data",paraId:8,tocIndex:2},{value:"List: one continuous data field, one categorical field (optional)",paraId:8,tocIndex:2},{value:"Function",paraId:8,tocIndex:2},{value:"Show data distribution across different intervals",paraId:8,tocIndex:2},{value:"Data-to-Visual Mapping",paraId:8,tocIndex:2},{value:"Grouped data field (statistical result) mapped to horizontal axis position",paraId:8,tocIndex:2},{value:"Frequency field (statistical result) mapped to rectangle height",paraId:8,tocIndex:2},{value:"Categorical data can use color to enhance category distinction",paraId:8,tocIndex:2},{value:"Suitable Data Volume",paraId:8,tocIndex:2},{value:"No less than 50 data points",paraId:8,tocIndex:2},{value:"Chart Type",paraId:9,tocIndex:3},{value:"Non-standard Histogram",paraId:9,tocIndex:3},{value:"Suitable Data",paraId:9,tocIndex:3},{value:"List: one continuous data field, one categorical field (optional)",paraId:9,tocIndex:3},{value:"Function",paraId:9,tocIndex:3},{value:"Show data distribution across different intervals",paraId:9,tocIndex:3},{value:"Data-to-Visual Mapping",paraId:9,tocIndex:3},{value:"Grouped data field (statistical result) mapped to horizontal axis position",paraId:9,tocIndex:3},{value:"Count field (statistical result) mapped to rectangle height",paraId:9,tocIndex:3},{value:"Categorical data can use color to enhance category distinction",paraId:9,tocIndex:3},{value:"Suitable Data Volume",paraId:9,tocIndex:3},{value:"No less than 50 data points",paraId:9,tocIndex:3},{value:"Example 1: ",paraId:10,tocIndex:5},{value:"Statistical Analysis of Data Distribution",paraId:10,tocIndex:5},{value:"The following chart shows a histogram of diamond weight distribution, displaying how diamond weights are distributed across different intervals.",paraId:11,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/diamond.json',\n  })\n  .encode('x', 'carat')\n  .encode('y', 'count')\n  .transform({\n    type: 'binX',\n    y: 'count',\n  })\n  .scale({\n    y: { nice: true },\n  })\n  .axis({\n    x: { title: 'Diamond Weight (Carat)' },\n    y: { title: 'Frequency' },\n  })\n  .style({\n    fill: '#1890FF',\n    fillOpacity: 0.9,\n    stroke: '#FFF',\n  });\n\nchart.render();\n",paraId:12,tocIndex:5},{value:"Notes",paraId:13,tocIndex:5},{value:":",paraId:13,tocIndex:5},{value:"The ",paraId:14,tocIndex:5},{value:"carat",paraId:14,tocIndex:5},{value:" field is mapped to the horizontal axis, representing the range of diamond weights",paraId:14,tocIndex:5},{value:"Using ",paraId:14,tocIndex:5},{value:"interval()",paraId:14,tocIndex:5},{value:" geometry with ",paraId:14,tocIndex:5},{value:"binX",paraId:14,tocIndex:5},{value:" transform to automatically calculate frequency in different intervals",paraId:14,tocIndex:5},{value:"There are no gaps between bars, indicating that the data is continuously distributed",paraId:14,tocIndex:5},{value:"Example 2: ",paraId:15,tocIndex:5},{value:"Using Different Binning Methods",paraId:15,tocIndex:5},{value:'The key to histograms is how to divide data intervals (i.e., "binning"). Different binning methods affect the understanding of data distribution. The chart below uses a custom number of bins.',paraId:16,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/diamond.json',\n  })\n  .encode('x', 'carat')\n  .encode('y', 'count')\n  .transform({\n    type: 'binX',\n    y: 'count',\n    thresholds: 30, // Specify number of bins\n  })\n  .scale({\n    y: { nice: true },\n  })\n  .axis({\n    x: { title: 'Diamond Weight (Carat)' },\n    y: { title: 'Frequency' },\n  })\n  .style({\n    fill: '#1890FF',\n    fillOpacity: 0.9,\n    stroke: '#FFF',\n  });\n\nchart.render();\n",paraId:17,tocIndex:5},{value:"Notes",paraId:18,tocIndex:5},{value:":",paraId:18,tocIndex:5},{value:"Using ",paraId:19,tocIndex:5},{value:"transform: { type: 'binX', thresholds: 30 }",paraId:19,tocIndex:5},{value:" to specify 30 bins",paraId:19,tocIndex:5},{value:"The choice of bin number affects the display of distribution details; more bins can show more detailed distribution patterns",paraId:19,tocIndex:5},{value:"Fewer bins can highlight the main distribution trends",paraId:19,tocIndex:5},{value:"Example 3: ",paraId:20,tocIndex:5},{value:"Probability Distribution Analysis with Density Histogram",paraId:20,tocIndex:5},{value:"Density histograms normalize frequency counts, making them more suitable for comparing distributions of datasets of different sizes.",paraId:21,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/diamond.json',\n  })\n  .encode('x', 'carat')\n  .encode('y', 'density')\n  .transform(\n    {\n      type: 'binX',\n      y: 'count',\n      thresholds: 20,\n    },\n    {\n      type: 'normalizeY',\n    },\n  )\n  .axis({\n    x: { title: 'Diamond Weight (Carat)' },\n    y: {\n      title: 'Density',\n      labelFormatter: '.0%',\n    },\n  })\n  .style({\n    fill: '#2FC25B',\n    fillOpacity: 0.85,\n    stroke: '#FFF',\n  });\n\nchart.render();\n",paraId:22,tocIndex:5},{value:"Notes",paraId:23,tocIndex:5},{value:":",paraId:23,tocIndex:5},{value:"Combining ",paraId:24,tocIndex:5},{value:"binX",paraId:24,tocIndex:5},{value:" and ",paraId:24,tocIndex:5},{value:"normalizeY",paraId:24,tocIndex:5},{value:" transforms to convert frequency to density",paraId:24,tocIndex:5},{value:"The vertical axis is formatted as a percentage, more intuitively showing the probability density of the data distribution",paraId:24,tocIndex:5},{value:"The total area of a density histogram is 1, making it more suitable for probability distribution analysis",paraId:24,tocIndex:5},{value:"Example 1: ",paraId:25,tocIndex:6},{value:"Not Suitable for Comparing Categorical Data",paraId:25,tocIndex:6},{value:"Histograms are designed for continuous numerical data distribution and are not suitable for comparing non-numerical categorical data. For counting statistics of categorical data, regular bar charts should be used instead.",paraId:26,tocIndex:6},{value:"Example 2: ",paraId:27,tocIndex:6},{value:"Not Suitable for Showing Time Series Trends",paraId:27,tocIndex:6},{value:"Histograms focus on showing data distribution characteristics rather than trends over time. If you need to display how data changes over time, line charts or area charts should be used instead.",paraId:28,tocIndex:6},{value:"A multi-distribution histogram can display the distribution of multiple datasets in the same coordinate system, facilitating comparison of distribution characteristics between different datasets.",paraId:29,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/diamond.json',\n    transform: [\n      {\n        type: 'map',\n        callback: (d) => ({\n          ...d,\n          group: d.cut === 'Ideal' ? 'Ideal' : 'Others',\n        }),\n      },\n    ],\n  })\n  .encode('x', 'price')\n  .encode('y', 'count')\n  .encode('color', 'group')\n  .transform({\n    type: 'binX',\n    y: 'count',\n    thresholds: 30,\n    groupBy: ['group'],\n  })\n  .scale({\n    y: { nice: true },\n    color: {\n      range: ['#1890FF', '#FF6B3B'],\n    },\n  })\n  .axis({\n    x: { title: 'Price (USD)' },\n    y: { title: 'Frequency' },\n  })\n  .style({\n    fillOpacity: 0.7,\n    stroke: '#FFF',\n    lineWidth: 1,\n  })\n  .legend(true);\n\nchart.render();\n",paraId:30,tocIndex:8},{value:"Notes",paraId:31,tocIndex:8},{value:":",paraId:31,tocIndex:8},{value:"Using ",paraId:32,tocIndex:8},{value:"encode('color', 'group')",paraId:32,tocIndex:8},{value:" and ",paraId:32,tocIndex:8},{value:"groupBy: ['group']",paraId:32,tocIndex:8},{value:" to achieve multi-distribution comparison",paraId:32,tocIndex:8},{value:"Using different colors and transparencies to facilitate observation of distribution differences between groups",paraId:32,tocIndex:8},{value:"Bar Charts",paraId:33,tocIndex:9},{value:"Histograms are used to show the distribution of continuous numerical data, emphasizing the shape of data distribution",paraId:34,tocIndex:10},{value:"Bar charts are used to compare numerical values across different categories or time points, emphasizing comparison",paraId:34,tocIndex:10},{value:"Histograms have no gaps between bars, while bar charts have gaps between bars",paraId:34,tocIndex:10},{value:"Box Plots",paraId:35,tocIndex:10},{value:"Histograms show data concentration and dispersion through frequency distribution",paraId:36,tocIndex:11},{value:"Box plots show data concentration and dispersion through quartiles, making it easier to identify outliers",paraId:36,tocIndex:11},{value:"Histograms provide more detailed distribution patterns, while box plots provide more concise statistical summaries",paraId:36,tocIndex:11},{value:"Line Charts",paraId:37,tocIndex:11},{value:"Area Charts",paraId:38,tocIndex:11},{value:"Histograms focus on showing data distribution characteristics",paraId:39,tocIndex:12},{value:"Line and area charts focus on showing data trends over time",paraId:39,tocIndex:12},{value:"Histograms are suitable for single time-point data analysis, while line and area charts are suitable for continuous multi-time-point data analysis",paraId:39,tocIndex:12}]},49512:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(33163);const t=[{value:"K-Charts, originally known as Candlestick Charts, are commonly used to display stock trading data. A K-line graphically represents the daily, weekly, or monthly changes in a stock's opening price, closing price, highest price, and lowest price.",paraId:0,tocIndex:0},{value:"Through its intuitive visual representation, K-Charts can quickly reflect price trends over a certain period, helping analysts and investors judge market trends. Each K-line contains four key pieces of price information: opening price, closing price, highest price, and lowest price. These four prices constitute complete trading information.",paraId:1,tocIndex:0},{value:"The design concept of K-Charts originated in Japan, initially used for rice futures trading, and later widely adopted in technical analysis across various financial markets.",paraId:2,tocIndex:0},{value:"Other Names",paraId:3,tocIndex:0},{value:": Candlestick Chart (also known as Yin-Yang lines, bar lines, red-black lines, or candle lines).",paraId:3,tocIndex:0},{value:"A K-line is structured as follows:",paraId:4,tocIndex:2},{value:"Upper Shadow",paraId:5,tocIndex:2},{value:": The thin line at the top, representing the price difference between the highest price and the closing price (or opening price).",paraId:5,tocIndex:2},{value:"Real Body",paraId:5,tocIndex:2},{value:": The thick line in the middle, representing the price difference between the opening price and the closing price.",paraId:5,tocIndex:2},{value:"Lower Shadow",paraId:5,tocIndex:2},{value:": The thin line at the bottom, representing the price difference between the opening price (or closing price) and the lowest price.",paraId:5,tocIndex:2},{value:"When the closing price is higher than the opening price, meaning the stock price is trending upwards, the K-line is called a Yang line (bullish candle). Its real body is usually represented in red or hollow. Conversely, it's called a Yin line (bearish candle), represented by a green or black real body.",paraId:6,tocIndex:2},{value:"Chart Type",paraId:7,tocIndex:2},{value:"K-Chart",paraId:7,tocIndex:2},{value:"Suitable Data",paraId:7,tocIndex:2},{value:"Time series: One time field, four numerical fields (open, close, high, low prices)",paraId:7,tocIndex:2},{value:"Function",paraId:7,tocIndex:2},{value:"Observe data ",paraId:7,tocIndex:2},{value:"trends",paraId:7,tocIndex:2},{value:"Compare",paraId:7,tocIndex:2},{value:" price ranges across different periods",paraId:7,tocIndex:2},{value:"Data-Graphic Mapping",paraId:7,tocIndex:2},{value:"Time field mapped to the horizontal axis",paraId:7,tocIndex:2},{value:"Four price fields mapped to the vertical axis, forming the K-line's body and shadows",paraId:7,tocIndex:2},{value:"Up/down status mapped to color",paraId:7,tocIndex:2},{value:"Suitable Data Count",paraId:7,tocIndex:2},{value:"Suitable for medium to long-term data, typically tens to hundreds of trading periods",paraId:7,tocIndex:2},{value:"Scenario 1: Stock Price Analysis",paraId:8,tocIndex:4},{value:"The most classic application of K-Charts is in stock market analysis. By observing the patterns of K-lines, one can judge the balance of power between bulls and bears in the market.",paraId:9,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nconst data = [\n  { time: '2015-11-19', start: 8.18, max: 8.33, min: 7.98, end: 8.32 },\n  { time: '2015-11-18', start: 8.37, max: 8.6, min: 8.03, end: 8.09 },\n  { time: '2015-11-17', start: 8.7, max: 8.78, min: 8.32, end: 8.37 },\n  { time: '2015-11-16', start: 8.48, max: 8.85, min: 8.43, end: 8.7 },\n  { time: '2015-11-13', start: 8.01, max: 8.75, min: 7.97, end: 8.41 },\n  { time: '2015-11-12', start: 7.76, max: 8.18, min: 7.61, end: 8.15 },\n  { time: '2015-11-11', start: 7.55, max: 7.81, min: 7.49, end: 7.8 },\n  { time: '2015-11-10', start: 7.5, max: 7.68, min: 7.44, end: 7.57 },\n];\n\nchart\n  .data(data)\n  .encode('x', 'time')\n  .encode('color', (d) => {\n    const trend = Math.sign(d.start - d.end);\n    // Note: In many Western contexts, red is down and green is up.\n    // This example uses red for up ('上涨') and green for down ('下跌').\n    // Translated labels: 'Down', 'Unchanged', 'Up'\n    // Original colors: Down '#4daf4a' (green), Up '#e41a1c' (red)\n    return trend > 0 ? 'Down' : trend === 0 ? 'Unchanged' : 'Up';\n  })\n  .scale('x', {\n    compare: (a, b) => new Date(a).getTime() - new Date(b).getTime(),\n  })\n  .scale('color', {\n    domain: ['Down', 'Unchanged', 'Up'],\n    range: ['#4daf4a', '#999999', '#e41a1c'], // Green for Down, Gray for Unchanged, Red for Up\n  });\n\nchart\n  .link()\n  .encode('y', ['min', 'max'])\n  .tooltip({\n    title: 'time',\n    items: [\n      { field: 'start', name: 'Open' },\n      { field: 'end', name: 'Close' },\n      { field: 'min', name: 'Low' },\n      { field: 'max', name: 'High' },\n    ],\n  });\n\nchart\n  .interval()\n  .encode('y', ['start', 'end'])\n  .style('fillOpacity', 1)\n  .style('stroke', (d) => {\n    if (d.start === d.end) return '#999999';\n  })\n  .axis('y', {\n    title: 'Price',\n  })\n  .tooltip({\n    title: 'time',\n    items: [\n      { field: 'start', name: 'Open' },\n      { field: 'end', name: 'Close' },\n      { field: 'min', name: 'Low' },\n      { field: 'max', name: 'High' },\n    ],\n  });\n\nchart.render();\n",paraId:10,tocIndex:4},{value:"Scenario 2: Commodity Futures Analysis",paraId:11,tocIndex:4},{value:"K-Charts are also applicable to the price analysis of commodity futures, foreign exchange, and other financial derivatives, helping traders identify price patterns and trends.",paraId:12,tocIndex:4},{value:"Scenario 3: Cryptocurrency Analysis",paraId:13,tocIndex:4},{value:"In cryptocurrency trading, K-Charts are the most commonly used technical analysis tool, clearly displaying price fluctuations.",paraId:14,tocIndex:4},{value:"Scenario 4: Comprehensive Market Analysis with Volume Data",paraId:15,tocIndex:4},{value:"Combining K-Charts with volume indicators provides a more holistic view of market dynamics.",paraId:16,tocIndex:4},{value:"K-Charts with Volume Charts",paraId:17,tocIndex:4},{value:"Pairing K-Charts with volume bar charts allows for a more comprehensive analysis of market behavior.",paraId:18,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\n// Create containers for K-Chart and Volume Chart\ndocument.getElementById('container').innerHTML = `\n  <div id=\"kChart\" style=\"height: 300px;\"></div>\n  <div id=\"volumeChart\" style=\"height: 150px; margin-top: 10px;\"></div>\n`;\n\nconst data = [\n  {\n    time: '2015-11-19',\n    start: 8.18,\n    max: 8.33,\n    min: 7.98,\n    end: 8.32,\n    volumn: 1810,\n  },\n  {\n    time: '2015-11-18',\n    start: 8.37,\n    max: 8.6,\n    min: 8.03,\n    end: 8.09,\n    volumn: 2790,\n  },\n  {\n    time: '2015-11-17',\n    start: 8.7,\n    max: 8.78,\n    min: 8.32,\n    end: 8.37,\n    volumn: 3729,\n  },\n  {\n    time: '2015-11-16',\n    start: 8.48,\n    max: 8.85,\n    min: 8.43,\n    end: 8.7,\n    volumn: 2890,\n  },\n];\n\nconst KChart = new Chart({\n  container: 'kChart',\n  autoFit: true,\n});\n\nKChart.options({\n  type: 'view',\n  data,\n  encode: {\n    x: 'time',\n    color: (d) => {\n      const trend = Math.sign(d.start - d.end);\n      return trend > 0 ? 'Down' : trend === 0 ? 'Unchanged' : 'Up';\n    },\n  },\n  scale: {\n    color: {\n      domain: ['Down', 'Unchanged', 'Up'],\n      range: ['#4daf4a', '#999999', '#e41a1c'],\n    },\n  },\n  children: [\n    {\n      type: 'link',\n      encode: { y: ['min', 'max'] },\n    },\n    {\n      type: 'interval',\n      encode: { y: ['start', 'end'] },\n      style: { fillOpacity: 1 },\n    },\n  ],\n  axis: {\n    y: { title: 'Price' },\n  },\n});\n\n// Volume Chart\nconst VolumeChart = new Chart({\n  container: 'volumeChart',\n  autoFit: true,\n});\n\nVolumeChart.options({\n  type: 'interval',\n  data,\n  encode: {\n    x: 'time',\n    y: 'volumn',\n    color: (d) => {\n      const trend = Math.sign(d.start - d.end);\n      return trend > 0 ? 'Down' : trend === 0 ? 'Unchanged' : 'Up';\n    },\n  },\n  scale: {\n    color: {\n      domain: ['Down', 'Unchanged', 'Up'],\n      range: ['#4daf4a', '#999999', '#e41a1c'],\n    },\n  },\n  axis: {\n    y: { title: 'Volume' },\n  },\n});\n\nKChart.render();\nVolumeChart.render();\n",paraId:19,tocIndex:4},{value:"Notes",paraId:20,tocIndex:4},{value:":",paraId:20,tocIndex:4},{value:"The K-Chart section displays the four key price points (open, close, high, low).",paraId:21,tocIndex:4},{value:"The Volume Chart section uses the same color encoding to display trading volume.",paraId:21,tocIndex:4},{value:"Both charts are aligned by the same time axis for easy correlation analysis.",paraId:21,tocIndex:4},{value:"K-Charts with Bar Charts for Volume (Full Data Source)",paraId:22,tocIndex:4},{value:"Using a more complete data source, combine K-Charts and bar charts to show the relationship between stock prices and trading volume, with support for legend interaction.",paraId:23,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\n// Create containers for K-Chart and Column Chart\ndocument.getElementById('container').innerHTML = `\n  <div id=\"kChart\" style=\"height: 360px;\"></div>\n  <div id=\"columnChart\" style=\"height: 180px;\"></div>\n`;\n\nconst KChart = new Chart({\n  container: 'kChart',\n  autoFit: true,\n  height: 360,\n  paddingLeft: 60,\n});\n\nKChart.options({\n  type: 'view',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/antvdemo/assets/data/candle-sticks.json',\n  },\n  encode: {\n    x: 'time',\n    color: (d) => {\n      const trend = Math.sign(d.start - d.end);\n      return trend > 0 ? 'Down' : trend === 0 ? 'Unchanged' : 'Up';\n    },\n  },\n  scale: {\n    x: {\n      compare: (a, b) => new Date(a).getTime() - new Date(b).getTime(),\n    },\n    color: {\n      domain: ['Down', 'Unchanged', 'Up'],\n      range: ['#4daf4a', '#999999', '#e41a1c'],\n    },\n  },\n  children: [\n    {\n      type: 'link',\n      encode: { y: ['min', 'max'] },\n      tooltip: {\n        title: 'time',\n        items: [\n          { field: 'start', name: 'Open' },\n          { field: 'end', name: 'Close' },\n          { field: 'min', name: 'Low' },\n          { field: 'max', name: 'High' },\n        ],\n      },\n    },\n    {\n      type: 'interval',\n      encode: { y: ['start', 'end'] },\n      style: {\n        fillOpacity: 1,\n        stroke: (d) => (d.start === d.end ? '#999999' : undefined),\n      },\n      axis: {\n        x: { title: false },\n        y: { title: false },\n      },\n      tooltip: {\n        title: 'time',\n        items: [\n          { field: 'start', name: 'Open' },\n          { field: 'end', name: 'Close' },\n          { field: 'min', name: 'Low' },\n          { field: 'max', name: 'High' },\n        ],\n      },\n    },\n  ],\n});\n\nconst ColumnChart = new Chart({\n  container: 'columnChart',\n  autoFit: true,\n  paddingTop: 0,\n  paddingBottom: 0,\n  height: 180,\n  paddingLeft: 60,\n});\n\nColumnChart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/antvdemo/assets/data/candle-sticks.json',\n  },\n  encode: {\n    x: 'time',\n    y: 'volumn',\n    color: (d) => {\n      const trend = Math.sign(d.start - d.end);\n      return trend > 0 ? 'Down' : trend === 0 ? 'Unchanged' : 'Up';\n    },\n  },\n  scale: {\n    x: {\n      compare: (a, b) => new Date(a).getTime() - new Date(b).getTime(),\n    },\n    color: {\n      domain: ['Down', 'Unchanged', 'Up'],\n      range: ['#4daf4a', '#999999', '#e41a1c'],\n    },\n  },\n  axis: {\n    x: false,\n    y: { title: false },\n  },\n});\n\n// Legend interaction linkage\nKChart.on('legend:filter', (e) => {\n  const { nativeEvent, data } = e;\n  if (!nativeEvent) return;\n  ColumnChart.emit('legend:filter', { data });\n});\n\nKChart.on('legend:reset', (e) => {\n  const { nativeEvent, data } = e;\n  if (!nativeEvent) return;\n  ColumnChart.emit('legend:reset', { data });\n});\n\nKChart.render();\nColumnChart.render();\n",paraId:24,tocIndex:4},{value:"Notes",paraId:25,tocIndex:4},{value:":",paraId:25,tocIndex:4},{value:"The upper K-Chart displays price trends, while the lower bar chart shows trading volume.",paraId:26,tocIndex:4},{value:"Both charts use the same color encoding and are aligned by the time axis.",paraId:26,tocIndex:4},{value:"Supports legend interaction: clicking the legend filters data in both charts simultaneously.",paraId:26,tocIndex:4},{value:"Uses real stock data source to display more complete market information.",paraId:26,tocIndex:4},{value:"Scenario 1: Non-Time Series Data",paraId:27,tocIndex:5},{value:"K-Charts are specifically designed for time series data. For comparing categorical data that does not involve a time dimension, ",paraId:28,tocIndex:5},{value:"Bar Charts",paraId:29,tocIndex:5},{value:" or ",paraId:28,tocIndex:5},{value:"Column Charts",paraId:30,tocIndex:5},{value:" should be used.",paraId:28,tocIndex:5},{value:"Scenario 2: Displaying Single Numerical Trends",paraId:31,tocIndex:5},{value:"If you only need to show simple numerical trends, ",paraId:32,tocIndex:5},{value:"Line Charts",paraId:33,tocIndex:5},{value:" or ",paraId:32,tocIndex:5},{value:"Area Charts",paraId:34,tocIndex:5},{value:" would be more concise and clear.",paraId:32,tocIndex:5},{value:"Line Charts",paraId:35,tocIndex:6},{value:"Bar Charts",paraId:36,tocIndex:6},{value:"Box Plots",paraId:37,tocIndex:6},{value:"K-Charts and ",paraId:38,tocIndex:7},{value:"Line Charts",paraId:39,tocIndex:7},{value:":",paraId:38,tocIndex:7},{value:"K-Charts display complete price information (open, close, high, low), suitable for detailed technical analysis.",paraId:40,tocIndex:7},{value:"Line Charts only show a single price line (usually the closing price), suitable for displaying the overall direction of price trends.",paraId:40,tocIndex:7},{value:"K-Charts and ",paraId:41,tocIndex:7},{value:"Bar Charts",paraId:42,tocIndex:7},{value:":",paraId:41,tocIndex:7},{value:"K-Charts are specifically used for analyzing price data in time series, emphasizing price changes over time.",paraId:43,tocIndex:7},{value:"Bar Charts are mainly used for comparing numerical values between different categories and do not involve time series.",paraId:43,tocIndex:7},{value:"K-Charts and ",paraId:44,tocIndex:7},{value:"Box Plots",paraId:45,tocIndex:7},{value:":",paraId:44,tocIndex:7},{value:"K-Charts show the price range at specific time points, focusing on price trend analysis.",paraId:46,tocIndex:7},{value:"Box Plots display the statistical distribution characteristics of data, focusing on the statistical analysis of data distribution.",paraId:46,tocIndex:7}]},28789:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(51184);const t=[{value:'Kagi charts were invented around the 1870s when the Japanese stock market began trading. In the United States, the Kagi chart analysis method became popular after Steven Nison published "Beyond Candlesticks." Due to its ability to clearly and effectively display price movement paths, the Kagi chart is one of the tools investors use to make better decisions about stocks.',paraId:0,tocIndex:0},{value:"A Kagi chart consists of a series of vertical lines connected by short horizontal lines. The horizontal lines serve as connectors, while the thickness and direction of the vertical lines depend on price movements. An upward vertical line indicates a price increase, while a downward vertical line indicates a price decrease. A new vertical line is drawn when the price movement reverses beyond a threshold, connected by a horizontal line at the turning point. Thick lines (Yang lines) are used when the price rises above the previous high, and thin lines (Yin lines) are used when the price falls below the previous low.",paraId:1,tocIndex:0},{value:"Features of Kagi Charts:",paraId:2,tocIndex:0},{value:"Simulates the relationship between supply and demand forces in securities, making it highly suitable for short-term stock operations.",paraId:3,tocIndex:0},{value:"Filters out daily price fluctuations through threshold markers, focusing only on significant price changes.",paraId:3,tocIndex:0},{value:"Independent of time.",paraId:3,tocIndex:0},{value:"The lines drawn in a Kagi chart are calculated using the Kagi chart algorithm and differ from the original data curve.",paraId:4},{value:"English Name",paraId:5},{value:": Kagi Chart",paraId:5},{value:"Chart Type",paraId:6,tocIndex:1},{value:"Kagi Chart",paraId:6,tocIndex:1},{value:"Suitable Data",paraId:6,tocIndex:1},{value:"One categorical field, one continuous field",paraId:6,tocIndex:1},{value:"Function",paraId:6,tocIndex:1},{value:"Observing data ",paraId:6,tocIndex:1},{value:"trends",paraId:6,tocIndex:1},{value:"Data Mapping",paraId:6,tocIndex:1},{value:"Turning point time categories (auto-calculated) mapped to the x-axis, turning point values mapped to the y-axis",paraId:6,tocIndex:1},{value:"Suitable Data Count",paraId:6,tocIndex:1},{value:"More than 10 data points",paraId:6,tocIndex:1},{value:"Key Elements:",paraId:7,tocIndex:1},{value:"Yang Line",paraId:8,tocIndex:1},{value:": A thick line drawn when the price rises above the previous high.",paraId:8,tocIndex:1},{value:"Yin Line",paraId:8,tocIndex:1},{value:": A thin line drawn when the price falls below the previous low.",paraId:8,tocIndex:1},{value:"Turning Point",paraId:8,tocIndex:1},{value:": Key points where the price movement direction reverses.",paraId:8,tocIndex:1},{value:"Connecting Line",paraId:8,tocIndex:1},{value:": Horizontal lines connecting vertical segments, marking turning positions.",paraId:8,tocIndex:1},{value:"Use Case 1: Displaying Price or Stock Movement Trends",paraId:9,tocIndex:3},{value:"Kagi charts are most suitable for analyzing trends in price changes for stocks, futures, forex, and other financial markets. By filtering out daily minor fluctuations, they highlight significant turning points in prices, helping investors identify trend changes.",paraId:10,tocIndex:3},{value:"Use Case 2: Technical Analysis and Trend Judgement",paraId:11,tocIndex:3},{value:"Kagi charts are particularly useful in technical analysis because they:",paraId:12,tocIndex:3},{value:"Filter market noise, focusing on significant price movements.",paraId:13,tocIndex:3},{value:"Clearly display support and resistance levels.",paraId:13,tocIndex:3},{value:"Help identify trend continuations and reversal signals.",paraId:13,tocIndex:3},{value:"Use Case 1: Time-Sensitive Data",paraId:14,tocIndex:4},{value:"Kagi charts are independent of time and only represent the upward and downward trends of data. They cannot reflect certain characteristics of data over time, such as cycles. Therefore, Kagi charts are not recommended for time-sensitive data.",paraId:15,tocIndex:4},{value:"For example, website traffic data often has clear time cycles (weekday vs. weekend, day vs. night). Using Kagi charts would lose these important time features. For such data, line charts or area charts are recommended.",paraId:16,tocIndex:4},{value:"Use Case 2: Comparing Multiple Data Groups",paraId:17,tocIndex:4},{value:"The x-axis of Kagi charts is unique (turning point time), making it impossible to plot multiple Kagi charts on the same x-axis for comparative analysis. To compare multiple data series, multi-series line charts are recommended.",paraId:18,tocIndex:4},{value:"Feature",paraId:19,tocIndex:6},{value:"Kagi Chart",paraId:19,tocIndex:6},{value:"Candlestick Chart",paraId:19,tocIndex:6},{value:"Time Dependency",paraId:19,tocIndex:6},{value:"Independent of time, shows trends",paraId:19,tocIndex:6},{value:"Time-dependent, each period corresponds to a candlestick",paraId:19,tocIndex:6},{value:"Data Display",paraId:19,tocIndex:6},{value:"Filters minor fluctuations, highlights key turning points",paraId:19,tocIndex:6},{value:"Displays open, high, low, and close prices for a specific time period",paraId:19,tocIndex:6},{value:"Analysis Focus",paraId:19,tocIndex:6},{value:"Trend direction and turning points",paraId:19,tocIndex:6},{value:"Price fluctuations and volume within a time period",paraId:19,tocIndex:6},{value:"Suitable Scenarios",paraId:19,tocIndex:6},{value:"Medium- to long-term trend analysis",paraId:19,tocIndex:6},{value:"Short-term trading and time-sensitive analysis",paraId:19,tocIndex:6},{value:"Feature",paraId:20,tocIndex:7},{value:"Kagi Chart",paraId:20,tocIndex:7},{value:"Line Chart",paraId:20,tocIndex:7},{value:"Data Processing",paraId:20,tocIndex:7},{value:"Turning point data calculated by algorithm",paraId:20,tocIndex:7},{value:"Strictly plotted based on original data coordinates",paraId:20,tocIndex:7},{value:"Axis",paraId:20,tocIndex:7},{value:"X-axis represents calculated turning points",paraId:20,tocIndex:7},{value:"Both axis correspond to original data",paraId:20,tocIndex:7},{value:"Line Meaning",paraId:20,tocIndex:7},{value:"Color and thickness represent specific meanings (Yang and Yin lines)",paraId:20,tocIndex:7},{value:"Usually only represents data connection relationships",paraId:20,tocIndex:7},{value:"Multi-Series",paraId:20,tocIndex:7},{value:"Cannot plot multiple data groups",paraId:20,tocIndex:7},{value:"Can plot multiple data groups for comparison",paraId:20,tocIndex:7},{value:"Noise Filtering",paraId:20,tocIndex:7},{value:"Automatically filters minor fluctuations",paraId:20,tocIndex:7},{value:"Displays all data fluctuations",paraId:20,tocIndex:7}]},21629:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(21227);const t=[{value:"A line chart is a statistical chart that connects data points in chronological or categorical order to form a line, used to display data trends over time or ordered categories. Through the rise or fall of the line, it can intuitively show the speed, amplitude, range, and periodicity of data changes.",paraId:0,tocIndex:0},{value:"Line charts are particularly suitable for displaying continuous time series data changes and can effectively reflect data trends, fluctuations, periodicity, and anomalies. When comparing multiple data series, line charts use lines of different colors or styles to clearly show the comparison and relationships between different data series.",paraId:1,tocIndex:0},{value:"Compared to area charts, line charts focus more on showing trends and trajectories of data changes rather than total quantities. Compared to bar charts, line charts are more suitable for showing continuous trends rather than discrete numerical comparisons.",paraId:2,tocIndex:0},{value:"Other Names",paraId:3,tocIndex:0},{value:": Line Chart",paraId:3,tocIndex:0},{value:"Chart Type",paraId:4,tocIndex:2},{value:"Basic Line Chart",paraId:4,tocIndex:2},{value:"Suitable Data",paraId:4,tocIndex:2},{value:"Time series data: one ordered/continuous data field (usually time), one continuous data field",paraId:4,tocIndex:2},{value:"Function",paraId:4,tocIndex:2},{value:"Display data trends over time or ordered dimensions",paraId:4,tocIndex:2},{value:"Data-to-Graphics Mapping",paraId:4,tocIndex:2},{value:"Time field maps to x-axis position",paraId:4,tocIndex:2},{value:"Value field maps to y-axis height",paraId:4,tocIndex:2},{value:"Data points are connected by lines to show change trajectory",paraId:4,tocIndex:2},{value:"Suitable Scenarios",paraId:4,tocIndex:2},{value:"Single data series change trends over time",paraId:4,tocIndex:2},{value:"Chart Type",paraId:5,tocIndex:3},{value:"Multi-Series Line Chart",paraId:5,tocIndex:3},{value:"Suitable Data",paraId:5,tocIndex:3},{value:"Multi-series time data: one ordered/continuous data field (usually time), one continuous data field, one categorical data field",paraId:5,tocIndex:3},{value:"Function",paraId:5,tocIndex:3},{value:"Display trends of multiple data series over time, facilitating comparison of relationships between different series",paraId:5,tocIndex:3},{value:"Data-to-Graphics Mapping",paraId:5,tocIndex:3},{value:"Time field maps to x-axis position",paraId:5,tocIndex:3},{value:"Value field maps to y-axis height",paraId:5,tocIndex:3},{value:"Category field maps to different colored lines",paraId:5,tocIndex:3},{value:"Suitable Scenarios",paraId:5,tocIndex:3},{value:"Comparison of multiple data series trends over time",paraId:5,tocIndex:3},{value:"Example 1: ",paraId:6,tocIndex:5},{value:"Suitable for displaying continuous time series trends",paraId:6,tocIndex:5},{value:"The following chart is a line chart of stock price trends, showing the change trend of a company's stock price over time.",paraId:7,tocIndex:5},{value:"date",paraId:8,tocIndex:5},{value:"close",paraId:8,tocIndex:5},{value:"2015/1/5",paraId:8,tocIndex:5},{value:"121.73",paraId:8,tocIndex:5},{value:"2015/1/6",paraId:8,tocIndex:5},{value:"115.07",paraId:8,tocIndex:5},{value:"2015/1/7",paraId:8,tocIndex:5},{value:"116.75",paraId:8,tocIndex:5},{value:"...",paraId:8,tocIndex:5},{value:"...",paraId:8,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/aapl.json',\n    transform: [\n      {\n        type: 'map',\n        callback: (d) => ({\n          ...d,\n          date: new Date(d.date),\n        }),\n      },\n    ],\n  },\n  encode: { x: 'date', y: 'close' },\n  axis: {\n    x: {\n      title: null,\n    },\n    y: {\n      title: null,\n    },\n  },\n  style: {\n    lineWidth: 2,\n    stroke: '#1890ff',\n  },\n});\n\nchart.render();\n",paraId:9,tocIndex:5},{value:"Explanation",paraId:10,tocIndex:5},{value:":",paraId:10,tocIndex:5},{value:"The ",paraId:11,tocIndex:5},{value:"date",paraId:11,tocIndex:5},{value:" field maps to the x-axis position, representing chronological order",paraId:11,tocIndex:5},{value:"The ",paraId:11,tocIndex:5},{value:"close",paraId:11,tocIndex:5},{value:" field maps to the y-axis height, showing price trends over time",paraId:11,tocIndex:5},{value:"Data points are connected by lines, clearly displaying the trajectory of data changes",paraId:11,tocIndex:5},{value:"Example 2: ",paraId:12,tocIndex:5},{value:"Suitable for displaying comparative trends of multiple data series",paraId:12,tocIndex:5},{value:"Multi-series line charts can simultaneously display changes of multiple data series over time, facilitating comparative analysis. The following chart shows unemployment rate trends in different regions.",paraId:13,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/728a4bdc-9d0b-49e0-a92f-6320a6cddeed.csv',\n  },\n  encode: {\n    x: 'date',\n    y: 'unemployment',\n    color: 'division',\n  },\n  axis: {\n    x: {\n      title: null,\n    },\n    y: {\n      title: null,\n    },\n  },\n});\n\nchart.render();\n",paraId:14,tocIndex:5},{value:"Explanation",paraId:15,tocIndex:5},{value:":",paraId:15,tocIndex:5},{value:"The ",paraId:16,tocIndex:5},{value:"date",paraId:16,tocIndex:5},{value:" field maps to the x-axis, representing the time dimension",paraId:16,tocIndex:5},{value:"The ",paraId:16,tocIndex:5},{value:"unemployment",paraId:16,tocIndex:5},{value:" field maps to the y-axis, representing unemployment rate",paraId:16,tocIndex:5},{value:"The ",paraId:16,tocIndex:5},{value:"division",paraId:16,tocIndex:5},{value:" field maps to color, distinguishing different regions",paraId:16,tocIndex:5},{value:"Multiple lines facilitate intuitive comparison of unemployment rate trends and differences across regions",paraId:16,tocIndex:5},{value:"Example 3: ",paraId:17,tocIndex:5},{value:"Displaying subtle data changes and fluctuations",paraId:17,tocIndex:5},{value:"Line charts can clearly display subtle data changes and fluctuations, especially when there are many data points with frequent changes.",paraId:18,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: [\n    { month: 'Jan', city: 'Tokyo', temperature: 7 },\n    { month: 'Jan', city: 'London', temperature: 3.9 },\n    { month: 'Feb', city: 'Tokyo', temperature: 6.9 },\n    { month: 'Feb', city: 'London', temperature: 4.2 },\n    { month: 'Mar', city: 'Tokyo', temperature: 9.5 },\n    { month: 'Mar', city: 'London', temperature: 5.7 },\n    { month: 'Apr', city: 'Tokyo', temperature: 14.5 },\n    { month: 'Apr', city: 'London', temperature: 8.5 },\n    { month: 'May', city: 'Tokyo', temperature: 18.4 },\n    { month: 'May', city: 'London', temperature: 11.9 },\n    { month: 'Jun', city: 'Tokyo', temperature: 21.5 },\n    { month: 'Jun', city: 'London', temperature: 15.2 },\n    { month: 'Jul', city: 'Tokyo', temperature: 25.2 },\n    { month: 'Jul', city: 'London', temperature: 17 },\n    { month: 'Aug', city: 'Tokyo', temperature: 26.5 },\n    { month: 'Aug', city: 'London', temperature: 16.6 },\n    { month: 'Sep', city: 'Tokyo', temperature: 23.3 },\n    { month: 'Sep', city: 'London', temperature: 14.2 },\n    { month: 'Oct', city: 'Tokyo', temperature: 18.3 },\n    { month: 'Oct', city: 'London', temperature: 10.3 },\n    { month: 'Nov', city: 'Tokyo', temperature: 13.9 },\n    { month: 'Nov', city: 'London', temperature: 6.6 },\n    { month: 'Dec', city: 'Tokyo', temperature: 9.6 },\n    { month: 'Dec', city: 'London', temperature: 4.8 },\n  ],\n  encode: { x: 'month', y: 'temperature', color: 'city' },\n  axis: {\n    y: {\n      title: null,\n      labelFormatter: (d) => d + '°C',\n    },\n    x: {\n      title: null,\n    },\n  },\n  style: {\n    lineWidth: 2,\n  },\n});\n\nchart.render();\n",paraId:19,tocIndex:5},{value:"Explanation",paraId:20,tocIndex:5},{value:":",paraId:20,tocIndex:5},{value:"The line chart clearly displays annual temperature change curves for Tokyo and London",paraId:21,tocIndex:5},{value:"Through different colored lines, temperature differences and change patterns between the two cities can be intuitively compared",paraId:21,tocIndex:5},{value:"Example 1: ",paraId:22,tocIndex:6},{value:"Not suitable for displaying discrete category comparisons",paraId:22,tocIndex:6},{value:"When the horizontal axis data type is unordered categories or the vertical axis data type is continuous time, line charts are not suitable.",paraId:23,tocIndex:6},{value:"We take a scenario comparing sales of different game types as an example. For data representing categorical comparisons, we should use ",paraId:24,tocIndex:6},{value:"bar charts",paraId:25,tocIndex:6},{value:" instead of line charts.",paraId:24,tocIndex:6},{value:"Wrong approach (using line chart):",paraId:26,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  height: 250,\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: [\n    { genre: 'Sports', sold: 27500 },\n    { genre: 'Strategy', sold: 11500 },\n    { genre: 'Action', sold: 6000 },\n    { genre: 'Shooter', sold: 3500 },\n    { genre: 'Other', sold: 1500 },\n  ],\n  encode: { x: 'genre', y: 'sold' },\n  axis: {\n    x: {\n      title: 'Game Type',\n    },\n    y: {\n      title: 'Sales',\n      labelFormatter: (val) => val / 1000 + 'k',\n    },\n  },\n  style: {\n    lineWidth: 3,\n    stroke: '#1890ff',\n  },\n});\n\nchart.render();\n",paraId:27,tocIndex:6},{value:"Correct approach (using bar chart):",paraId:28,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  height: 250,\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { genre: 'Sports', sold: 27500 },\n    { genre: 'Strategy', sold: 11500 },\n    { genre: 'Action', sold: 6000 },\n    { genre: 'Shooter', sold: 3500 },\n    { genre: 'Other', sold: 1500 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  axis: {\n    x: {\n      title: 'Game Type',\n    },\n    y: {\n      title: 'Sales',\n      labelFormatter: (val) => val / 1000 + 'k',\n    },\n  },\n});\n\nchart.render();\n",paraId:29,tocIndex:6},{value:"Problem description",paraId:30,tocIndex:6},{value:":",paraId:30,tocIndex:6},{value:"Game types have no natural order or continuous relationship",paraId:31,tocIndex:6},{value:"The connecting line implies a trend relationship between categories, but this relationship doesn't actually exist",paraId:31,tocIndex:6},{value:'The line may mislead readers into thinking there\'s a trend from "Sports" to "Strategy"',paraId:31,tocIndex:6},{value:"Bar charts can more accurately represent independent sales comparisons between game types",paraId:31,tocIndex:6},{value:"Example 2: ",paraId:32,tocIndex:6},{value:"Poor effectiveness when data points are few or changes are insignificant",paraId:32,tocIndex:6},{value:"When there are few data points or changes are insignificant, line charts may not fully leverage their advantage of showing trend changes. In such cases, consider using bar charts or dot plots to emphasize comparisons between individual data points.",paraId:33,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: [\n    { quarter: 'Q1', value: 100 },\n    { quarter: 'Q2', value: 101 },\n    { quarter: 'Q3', value: 99 },\n    { quarter: 'Q4', value: 102 },\n  ],\n  encode: { x: 'quarter', y: 'value' },\n  axis: {\n    x: { title: null },\n    y: { title: null },\n  },\n  style: {\n    lineWidth: 2,\n    stroke: '#1890ff',\n  },\n});\n\nchart.render();\n",paraId:34,tocIndex:6},{value:"Problem description",paraId:35,tocIndex:6},{value:":",paraId:35,tocIndex:6},{value:"Too few data points (only 4), unable to form a clear trend line",paraId:36,tocIndex:6},{value:"Very small value changes (99-102), the line appears almost flat",paraId:36,tocIndex:6},{value:"Difficult to extract meaningful trend information",paraId:36,tocIndex:6},{value:"Bar charts or dot plots would better emphasize comparisons between individual values",paraId:36,tocIndex:6},{value:"Step line charts use horizontal and vertical line segments to connect data points, creating a step-like effect, suitable for displaying data that changes abruptly at specific time points.",paraId:37,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: [\n    { month: 'Jan', value: 51 },\n    { month: 'Feb', value: 91 },\n    { month: 'Mar', value: 34 },\n    { month: 'Apr', value: 47 },\n    { month: 'May', value: 63 },\n    { month: 'June', value: 58 },\n    { month: 'July', value: 56 },\n    { month: 'Aug', value: 77 },\n    { month: 'Sep', value: 99 },\n    { month: 'Oct', value: 106 },\n    { month: 'Nov', value: 88 },\n    { month: 'Dec', value: 56 },\n  ],\n  encode: { x: 'month', y: 'value', shape: 'hv' },\n  axis: {\n    x: {\n      title: null,\n    },\n    y: {\n      title: null,\n    },\n  },\n  style: {\n    lineWidth: 2,\n    stroke: '#1890ff',\n  },\n});\n\nchart.render();\n",paraId:38,tocIndex:8},{value:"Explanation",paraId:39,tocIndex:8},{value:":",paraId:39,tocIndex:8},{value:"Use ",paraId:40,tocIndex:8},{value:"encode: { shape: 'hv' }",paraId:40,tocIndex:8},{value:" to specify step-like line shape",paraId:40,tocIndex:8},{value:"Suitable for displaying data that changes at specific time points and remains stable until the next change point, such as tiered electricity prices, inventory level changes, etc.",paraId:40,tocIndex:8},{value:"Dashed line charts use different line styles to distinguish different data series or represent specific meanings, such as predicted values, reference lines, etc.",paraId:41,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { year: '1991', value: 3, type: 'Actual' },\n    { year: '1992', value: 4, type: 'Actual' },\n    { year: '1993', value: 3.5, type: 'Actual' },\n    { year: '1994', value: 5, type: 'Actual' },\n    { year: '1995', value: 4.9, type: 'Actual' },\n    { year: '1996', value: 6, type: 'Actual' },\n    { year: '1997', value: 7, type: 'Actual' },\n    { year: '1998', value: 9, type: 'Actual' },\n    { year: '1999', value: 13, type: 'Actual' },\n    { year: '1999', value: 13, type: 'Predicted' },\n    { year: '2000', value: 16, type: 'Predicted' },\n    { year: '2001', value: 21, type: 'Predicted' },\n    { year: '2002', value: 25, type: 'Predicted' },\n    { year: '2003', value: 30, type: 'Predicted' },\n  ],\n  children: [\n    {\n      type: 'line',\n      encode: { x: 'year', y: 'value', color: 'type' },\n      style: {\n        lineWidth: 2,\n        lineDash: (d) => (d[0].type === 'Predicted' ? [4, 4] : null),\n      },\n    },\n    {\n      type: 'point',\n      encode: { x: 'year', y: 'value', color: 'type', shape: 'circle' },\n    },\n  ],\n  scale: {\n    color: {\n      range: ['#1890FF', '#FF6B3B'],\n    },\n  },\n  axis: {\n    x: { title: null },\n    y: { title: null },\n  },\n});\n\nchart.render();\n",paraId:42,tocIndex:9},{value:"Explanation",paraId:43,tocIndex:9},{value:":",paraId:43,tocIndex:9},{value:"Use ",paraId:44,tocIndex:9},{value:"lineDash: (d) => (d[0].type === 'Predicted' ? [4, 4] : null)",paraId:44,tocIndex:9},{value:" to set dashed line style for predicted values",paraId:44,tocIndex:9},{value:"Solid lines represent existing historical data, dashed lines represent predicted or estimated data, enhancing data readability",paraId:44,tocIndex:9},{value:"Area Charts",paraId:45,tocIndex:10},{value:"Line charts focus on displaying trends and trajectories of data changes, emphasizing direction and speed of change",paraId:46,tocIndex:11},{value:"Area charts emphasize visual effects of quantities through filled areas, more suitable for displaying total quantity changes",paraId:46,tocIndex:11},{value:"Choose line charts when highlighting change trends, choose area charts when emphasizing magnitude changes",paraId:46,tocIndex:11},{value:"Stacked Area Charts",paraId:47,tocIndex:11},{value:"Line charts are suitable for displaying trends of multiple independent data series, allowing direct comparison between series",paraId:48,tocIndex:12},{value:"Stacked area charts show the contribution of each part to the total, emphasizing cumulative effects and part-to-whole relationships",paraId:48,tocIndex:12},{value:"Choose line charts when comparing multiple independent trends, choose stacked area charts when showing how parts contribute to total changes",paraId:48,tocIndex:12},{value:"Bar Charts",paraId:49,tocIndex:12},{value:"Line charts are more suitable for displaying continuous time series change trends, emphasizing data fluidity and continuity",paraId:50,tocIndex:13},{value:"Bar charts are more suitable for displaying numerical comparisons between discrete categories, emphasizing size comparisons of individual independent values",paraId:50,tocIndex:13},{value:"Choose line charts when data points are numerous and trend changes are the focus, choose bar charts when data points are fewer and specific value comparisons are the focus",paraId:50,tocIndex:13},{value:"Scatter Plots",paraId:51,tocIndex:13},{value:"Line charts show data change trends and continuity through connecting lines, emphasizing relationships between data points",paraId:52,tocIndex:14},{value:"Scatter plots display distribution of individual independent data points, without emphasizing continuous relationships between data points",paraId:52,tocIndex:14},{value:"Choose line charts when displaying data trends, choose scatter plots when displaying data distribution or correlation",paraId:52,tocIndex:14}]},5877:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(12345);const t=[{value:"A mosaic plot (also known as a Marimekko Chart) is a chart used to display relationships between categorical data. It represents data proportions and classifications through the area and color of rectangles.",paraId:0,tocIndex:0},{value:"Mosaic plots are divided into two types: uniform and non-uniform. Uniform mosaic plots are more common in daily life, such as subway fare charts, while non-uniform mosaic plots are more frequently used in statistical fields.",paraId:1,tocIndex:0},{value:"Other Names",paraId:2,tocIndex:0},{value:": Mosaic Plot, Marimekko Chart",paraId:2,tocIndex:0},{value:"Chart Type",paraId:3,tocIndex:2},{value:"Non-uniform Axis Mosaic Plot",paraId:3,tocIndex:2},{value:"Suitable Data",paraId:3,tocIndex:2},{value:"Multi-dimensional categorical data",paraId:3,tocIndex:2},{value:"Functionality",paraId:3,tocIndex:2},{value:"Display distribution of multi-dimensional categorical data",paraId:3,tocIndex:2},{value:"Data Mapping",paraId:3,tocIndex:2},{value:"Categorical data fields map to non-uniform coordinate axis",paraId:3,tocIndex:2},{value:"Area and color represent data proportions and classifications",paraId:3,tocIndex:2},{value:"Data Size Limit",paraId:3,tocIndex:2},{value:"More effective with higher dimensional data",paraId:3,tocIndex:2},{value:"Chart Type",paraId:4,tocIndex:3},{value:"Uniform Axis Mosaic Plot",paraId:4,tocIndex:3},{value:"Suitable Data",paraId:4,tocIndex:3},{value:"Two-dimensional categorical data",paraId:4,tocIndex:3},{value:"Functionality",paraId:4,tocIndex:3},{value:"Display distribution of two-dimensional categorical data",paraId:4,tocIndex:3},{value:"Data Mapping",paraId:4,tocIndex:3},{value:"Categorical data fields map to uniform coordinate axis",paraId:4,tocIndex:3},{value:"Color represents data classifications",paraId:4,tocIndex:3},{value:"Data Size Limit",paraId:4,tocIndex:3},{value:"More effective with lower dimensional data",paraId:4,tocIndex:3},{value:"Example 1: ",paraId:5,tocIndex:5},{value:"Suitable for multi-dimensional categorical data analysis",paraId:5,tocIndex:5},{value:"Example 2: ",paraId:6,tocIndex:5},{value:"Suitable for two-dimensional categorical data analysis",paraId:6,tocIndex:5},{value:"const chart = new G2.Chart({\n  container: 'container',\n  autoFit: true,\n  height: 400,\n});\n\nchart.options({\n  type: 'cell',\n  data: [\n    { product: 'Phone', region: 'North', sales: 120, category: 'Premium' },\n    { product: 'Phone', region: 'East', sales: 180, category: 'Premium' },\n    { product: 'Phone', region: 'South', sales: 150, category: 'Premium' },\n    { product: 'Computer', region: 'North', sales: 80, category: 'Mid-range' },\n    { product: 'Computer', region: 'East', sales: 110, category: 'Mid-range' },\n    { product: 'Computer', region: 'South', sales: 95, category: 'Mid-range' },\n    { product: 'Tablet', region: 'North', sales: 60, category: 'Mid-range' },\n    { product: 'Tablet', region: 'East', sales: 85, category: 'Mid-range' },\n    { product: 'Tablet', region: 'South', sales: 70, category: 'Budget' },\n    { product: 'Headphone', region: 'North', sales: 40, category: 'Budget' },\n    { product: 'Headphone', region: 'East', sales: 55, category: 'Budget' },\n    { product: 'Headphone', region: 'South', sales: 45, category: 'Budget' },\n  ],\n  encode: {\n    x: 'product',\n    y: 'region',\n    color: 'category',\n    size: 'sales',\n  },\n  scale: {\n    color: {\n      palette: 'category10',\n      type: 'ordinal',\n    },\n    size: {\n      type: 'linear',\n      range: [0.3, 1],\n    },\n  },\n  style: {\n    stroke: '#fff',\n    strokeWidth: 2,\n    inset: 2,\n  },\n  legend: {\n    color: {\n      title: 'Product Category',\n      position: 'top',\n    },\n    size: {\n      title: 'Sales Volume',\n      position: 'right',\n    },\n  },\n  axis: {\n    x: {\n      title: 'Product Type',\n      labelAutoRotate: false,\n    },\n    y: {\n      title: 'Sales Region',\n    },\n  },\n  tooltip: {\n    title: (d) => `${d.product} - ${d.region}`,\n    items: [\n      { field: 'sales', name: 'Sales', valueFormatter: (v) => `${v}K` },\n      { field: 'category', name: 'Category' },\n    ],\n  },\n});\n\nchart.render();\n",paraId:7,tocIndex:5},{value:"Example 3: ",paraId:8,tocIndex:5},{value:"Market Segmentation Analysis (Non-uniform Mosaic Plot)",paraId:8,tocIndex:5},{value:"This example demonstrates how to use a non-uniform mosaic plot to display the distribution of different market segments, where the width of each rectangle represents market size, and the height represents the proportion of each market segment.",paraId:9,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 900,\n  height: 800,\n  paddingLeft: 0,\n  paddingRight: 0,\n});\n\nchart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/3041da62-1bf4-4849-aac3-01a387544bf4.csv',\n  },\n  transform: [\n    { type: 'flexX', reducer: 'sum' }, // Flexible X-axis width\n    { type: 'stackY' }, // Y-axis stacking\n    { type: 'normalizeY' }, // Y-axis normalization\n  ],\n  encode: {\n    x: 'market',\n    y: 'value',\n    color: 'segment',\n  },\n  axis: {\n    y: false,\n  },\n  scale: {\n    x: { paddingOuter: 0, paddingInner: 0.01 },\n  },\n  tooltip: 'value',\n  label: [\n    {\n      text: 'segment',\n      x: 5,\n      y: 5,\n      textAlign: 'start',\n      textBaseline: 'top',\n      fontSize: 10,\n      fill: '#fff',\n    },\n    {\n      text: 'value',\n      x: 5,\n      y: 5,\n      textAlign: 'start',\n      dy: 15,\n      fontSize: 10,\n      fill: '#fff',\n    },\n  ],\n});\n\nchart.render();\n",paraId:10,tocIndex:5},{value:"Example 4: ",paraId:11,tocIndex:5},{value:"Movie Rating Distribution Analysis (Density Mosaic Plot)",paraId:11,tocIndex:5},{value:"This example demonstrates how to use a density mosaic plot to analyze the relationship between IMDB and Rotten Tomatoes ratings, where the color intensity represents the number of movies.",paraId:12,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'rect',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/movies.json',\n  },\n  encode: {\n    x: 'IMDB Rating',\n    y: 'Rotten Tomatoes Rating',\n  },\n  transform: [\n    { type: 'bin', color: 'count', thresholdsX: 30, thresholdsY: 20 },\n  ],\n  scale: {\n    color: { palette: 'ylGnBu' },\n  },\n  tooltip: {\n    title: { channel: 'color' },\n    items: [\n      (d, i, data, column) => ({\n        name: 'IMDB Rating',\n        value: `${column.x.value[i]}, ${column.x1.value[i]}`,\n      }),\n      (d, i, data, column) => ({\n        name: 'Rotten Tomatoes Rating',\n        value: `${column.y.value[i]}, ${column.y1.value[i]}`,\n      }),\n    ],\n    render: () => '1',\n  },\n});\n\nchart.render();\n",paraId:13,tocIndex:5},{value:"Example 5: ",paraId:14,tocIndex:5},{value:"Athletes' Physiological Data Analysis (Grouped Density Mosaic Plot)",paraId:14,tocIndex:5},{value:"This example shows how to use a mosaic plot to display the height and weight distribution of athletes grouped by gender, with opacity representing data point density.",paraId:15,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'rect',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n  },\n  encode: {\n    x: 'weight',\n    y: 'height',\n    color: 'sex',\n  },\n  transform: [{ type: 'bin', opacity: 'count' }],\n  legend: {\n    opacity: false,\n  },\n  style: {\n    inset: 0.5,\n  },\n  tooltip: {\n    title: { channel: 'opacity' },\n    items: [\n      (d, i, data, column) => ({\n        name: 'Weight',\n        value: `${column.x.value[i]}, ${column.x1.value[i]}`,\n      }),\n      (d, i, data, column) => ({\n        name: 'Height',\n        value: `${column.y.value[i]}, ${column.y1.value[i]}`,\n      }),\n    ],\n  },\n});\n\nchart.render();\n",paraId:16,tocIndex:5},{value:"Mosaic plots are not suitable for:",paraId:17,tocIndex:6},{value:"Displaying continuous numerical data trends",paraId:18,tocIndex:6},{value:"Showing precise numerical comparisons",paraId:18,tocIndex:6},{value:"Analyzing time series data",paraId:18,tocIndex:6},{value:"Displaying data with too many categories (which can make the chart cluttered and hard to read)",paraId:18,tocIndex:6},{value:"Heatmaps",paraId:19,tocIndex:7},{value:"From graphical properties perspective:\n",paraId:20,tocIndex:8},{value:"Heatmaps represent the third dimension with ",paraId:21,tocIndex:8},{value:"linear",paraId:21,tocIndex:8},{value:" color changes",paraId:21,tocIndex:8},{value:"Mosaic plots represent the third dimension with ",paraId:21,tocIndex:8},{value:"categorical",paraId:21,tocIndex:8},{value:" colors",paraId:21,tocIndex:8},{value:"Standard heatmaps use smoothing algorithms with no clear boundaries",paraId:21,tocIndex:8},{value:"Mosaic plots have clear boundaries",paraId:21,tocIndex:8},{value:"From data perspective:\n",paraId:20,tocIndex:8},{value:"Uniform mosaic plots and heatmaps have very similar meanings for continuous data",paraId:22,tocIndex:8},{value:"From analytical needs perspective:\n",paraId:20,tocIndex:8},{value:"Heatmaps focus on distribution and can predict data in unknown areas",paraId:23,tocIndex:8},{value:"Mosaic plots have clearer boundaries and focus more on comparison",paraId:23,tocIndex:8},{value:"Treemaps",paraId:24,tocIndex:8},{value:"Mosaic plots are better for showing relationships between multiple categorical variables",paraId:25,tocIndex:9},{value:"Treemaps are more suitable for displaying hierarchical data structures",paraId:25,tocIndex:9},{value:"Mosaic plots use position and area to encode data",paraId:25,tocIndex:9},{value:"Treemaps primarily use area and nesting to represent hierarchical relationships",paraId:25,tocIndex:9}]},9173:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(24317);const t=[{value:"A multi-set bar chart, also known as a grouped bar chart or clustered bar chart, is used when you need to display different groups within the same categories on a single axis.",paraId:0,tocIndex:0},{value:"Similar to regular bar charts, it uses the height of bars to map and compare data values. Each group contains bars with different colors or varying transparency to distinguish different categories, with spacing maintained between each group.",paraId:1,tocIndex:0},{value:"Multi-set bar charts are frequently used for comparing data between different groups that all contain the same categorical data.",paraId:2,tocIndex:0},{value:"However, it's important to avoid having too many categories within groups, as this can lead to overcrowded and densely packed bars, significantly affecting chart readability.",paraId:3,tocIndex:0},{value:"Other Names",paraId:4,tocIndex:0},{value:": Grouped Bar Chart, Clustered Bar Chart",paraId:4,tocIndex:0},{value:"Chart Type",paraId:5,tocIndex:1},{value:"Multi-set Bar Chart",paraId:5,tocIndex:1},{value:"Suitable Data",paraId:5,tocIndex:1},{value:"A dataset containing two categorical fields and one continuous field",paraId:5,tocIndex:1},{value:"Functionality",paraId:5,tocIndex:1},{value:"One categorical field serves as grouping, allowing comparison of data sizes between different categories within the same group, as well as comparison of the same category across different groups",paraId:5,tocIndex:1},{value:"Data Mapping",paraId:5,tocIndex:1},{value:"One categorical field maps to axis positions for grouping, another categorical field is offset within the same group and distinguished by different colors, continuous field maps to bar length",paraId:5,tocIndex:1},{value:"Data Size Limit",paraId:5,tocIndex:1},{value:"No more than 12 groups, with no more than 6 categories per group",paraId:5,tocIndex:1},{value:"Example 1: ",paraId:6,tocIndex:3},{value:"Comparing data of the same category across different groups, and comparing different categories within the same group",paraId:6,tocIndex:3},{value:'The chart below compares the sales of various game types for "I Am Rich" gaming company across three years: 2001, 2002, and 2003.\nThe horizontal axis shows different game types, with each game type forming a group in the bar chart, comparing sales numbers for different years within each group.',paraId:7,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { year: '2001', genre: 'Sports', sold: 27500 },\n  { year: '2001', genre: 'Strategy', sold: 11500 },\n  { year: '2001', genre: 'Action', sold: 6000 },\n  { year: '2001', genre: 'Shooter', sold: 3500 },\n  { year: '2001', genre: 'Other', sold: 1500 },\n  { year: '2002', genre: 'Sports', sold: 29500 },\n  { year: '2002', genre: 'Strategy', sold: 10500 },\n  { year: '2002', genre: 'Action', sold: 8000 },\n  { year: '2002', genre: 'Shooter', sold: 4500 },\n  { year: '2002', genre: 'Other', sold: 1800 },\n  { year: '2003', genre: 'Sports', sold: 30500 },\n  { year: '2003', genre: 'Strategy', sold: 12500 },\n  { year: '2003', genre: 'Action', sold: 4000 },\n  { year: '2003', genre: 'Shooter', sold: 6500 },\n  { year: '2003', genre: 'Other', sold: 2000 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  height: 400,\n});\n\nchart.options({\n  type: 'interval',\n  data,\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    color: 'year',\n  },\n  transform: [{ type: 'dodgeX' }],\n  axis: {\n    y: { title: 'Game Sales' },\n    x: { title: 'Game Genre' },\n  },\n});\n\nchart.render();\n",paraId:8,tocIndex:3},{value:"Explanation:",paraId:9,tocIndex:3},{value:"genre",paraId:10,tocIndex:3},{value:" uses the horizontal axis ",paraId:10,tocIndex:3},{value:"position",paraId:10,tocIndex:3},{value:" to distinguish different game types",paraId:10,tocIndex:3},{value:"year",paraId:10,tocIndex:3},{value:" uses ",paraId:10,tocIndex:3},{value:"color",paraId:10,tocIndex:3},{value:" and offset ",paraId:10,tocIndex:3},{value:"positions",paraId:10,tocIndex:3},{value:" within the same game type to distinguish sales for different years",paraId:10,tocIndex:3},{value:"sold",paraId:10,tocIndex:3},{value:" uses bar ",paraId:10,tocIndex:3},{value:"length",paraId:10,tocIndex:3},{value:" to compare sales across different games and years",paraId:10,tocIndex:3},{value:"Example 1: ",paraId:11,tocIndex:4},{value:"Too many groups and categories",paraId:11,tocIndex:4},{value:"When there are too many groups and categories, it leads to overcrowded and densely packed bars, resulting in poor readability, as shown in the chart below:",paraId:12,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\n// Complete barley dataset - demonstrating the problem of too many groups\nconst barleyData = [\n  { yield: 27, variety: 'Manchuria', year: 1931, site: 'University Farm' },\n  { yield: 48.87, variety: 'Manchuria', year: 1931, site: 'Waseca' },\n  { yield: 27.43, variety: 'Manchuria', year: 1931, site: 'Morris' },\n  { yield: 39.93, variety: 'Manchuria', year: 1931, site: 'Crookston' },\n  { yield: 32.97, variety: 'Manchuria', year: 1931, site: 'Grand Rapids' },\n  { yield: 28.97, variety: 'Manchuria', year: 1931, site: 'Duluth' },\n  { yield: 43.07, variety: 'Glabron', year: 1931, site: 'University Farm' },\n  { yield: 55.2, variety: 'Glabron', year: 1931, site: 'Waseca' },\n  { yield: 28.77, variety: 'Glabron', year: 1931, site: 'Morris' },\n  { yield: 38.13, variety: 'Glabron', year: 1931, site: 'Crookston' },\n  { yield: 29.13, variety: 'Glabron', year: 1931, site: 'Grand Rapids' },\n  { yield: 29.67, variety: 'Glabron', year: 1931, site: 'Duluth' },\n  { yield: 35.13, variety: 'Svansota', year: 1931, site: 'University Farm' },\n  { yield: 47.33, variety: 'Svansota', year: 1931, site: 'Waseca' },\n  { yield: 25.77, variety: 'Svansota', year: 1931, site: 'Morris' },\n  { yield: 40.47, variety: 'Svansota', year: 1931, site: 'Crookston' },\n  { yield: 29.67, variety: 'Svansota', year: 1931, site: 'Grand Rapids' },\n  { yield: 25.7, variety: 'Svansota', year: 1931, site: 'Duluth' },\n  { yield: 39.9, variety: 'Velvet', year: 1931, site: 'University Farm' },\n  { yield: 50.23, variety: 'Velvet', year: 1931, site: 'Waseca' },\n  { yield: 26.13, variety: 'Velvet', year: 1931, site: 'Morris' },\n  { yield: 41.33, variety: 'Velvet', year: 1931, site: 'Crookston' },\n  { yield: 23.03, variety: 'Velvet', year: 1931, site: 'Grand Rapids' },\n  { yield: 26.3, variety: 'Velvet', year: 1931, site: 'Duluth' },\n  { yield: 36.57, variety: 'Trebi', year: 1931, site: 'University Farm' },\n  { yield: 63.83, variety: 'Trebi', year: 1931, site: 'Waseca' },\n  { yield: 43.77, variety: 'Trebi', year: 1931, site: 'Morris' },\n  { yield: 46.93, variety: 'Trebi', year: 1931, site: 'Crookston' },\n  { yield: 29.77, variety: 'Trebi', year: 1931, site: 'Grand Rapids' },\n  { yield: 33.93, variety: 'Trebi', year: 1931, site: 'Duluth' },\n];\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  paddingLeft: 50,\n});\n\nchart.options({\n  type: 'interval',\n  data: barleyData,\n  encode: {\n    x: 'site',\n    y: 'yield',\n    color: 'variety',\n  },\n  transform: [{ type: 'dodgeX' }],\n  axis: {\n    x: {\n      labelAutoHide: true,\n      labelAutoRotate: true,\n    },\n  },\n  tooltip: {\n    title: 'site',\n  },\n});\n\nchart.render();\n",paraId:13,tocIndex:4},{value:"Optimization Method 1: Show only important data",paraId:14,tocIndex:4},{value:"Filter or aggregate data to show only the top-ranked or most important groups:",paraId:15,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\n// Filtered data - showing only top 3 locations to demonstrate optimization effect\nconst filteredBarleyData = [\n  { yield: 27, variety: 'Manchuria', year: 1931, site: 'University Farm' },\n  { yield: 48.87, variety: 'Manchuria', year: 1931, site: 'Waseca' },\n  { yield: 27.43, variety: 'Manchuria', year: 1931, site: 'Morris' },\n  { yield: 43.07, variety: 'Glabron', year: 1931, site: 'University Farm' },\n  { yield: 55.2, variety: 'Glabron', year: 1931, site: 'Waseca' },\n  { yield: 28.77, variety: 'Glabron', year: 1931, site: 'Morris' },\n  { yield: 35.13, variety: 'Svansota', year: 1931, site: 'University Farm' },\n  { yield: 47.33, variety: 'Svansota', year: 1931, site: 'Waseca' },\n  { yield: 25.77, variety: 'Svansota', year: 1931, site: 'Morris' },\n  { yield: 39.9, variety: 'Velvet', year: 1931, site: 'University Farm' },\n  { yield: 50.23, variety: 'Velvet', year: 1931, site: 'Waseca' },\n  { yield: 26.13, variety: 'Velvet', year: 1931, site: 'Morris' },\n  { yield: 36.57, variety: 'Trebi', year: 1931, site: 'University Farm' },\n  { yield: 63.83, variety: 'Trebi', year: 1931, site: 'Waseca' },\n  { yield: 43.77, variety: 'Trebi', year: 1931, site: 'Morris' },\n];\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  paddingLeft: 50,\n});\n\nchart.options({\n  type: 'interval',\n  data: filteredBarleyData,\n  encode: {\n    x: 'site',\n    y: 'yield',\n    color: 'variety',\n  },\n  transform: [{ type: 'dodgeX' }],\n  axis: {\n    x: {\n      labelAutoHide: true,\n      labelAutoRotate: true,\n    },\n  },\n  tooltip: {\n    title: 'site',\n  },\n});\n\nchart.render();\n",paraId:16,tocIndex:4},{value:"Optimization Method 2: Use stacked bar charts",paraId:17,tocIndex:4},{value:"If you need to display complete data, we recommend using stacked bar charts to reduce chart width and improve readability:",paraId:18,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\n// Complete barley dataset - demonstrating stacked bar chart optimization effect\nconst barleyData = [\n  { yield: 27, variety: 'Manchuria', year: 1931, site: 'University Farm' },\n  { yield: 48.87, variety: 'Manchuria', year: 1931, site: 'Waseca' },\n  { yield: 27.43, variety: 'Manchuria', year: 1931, site: 'Morris' },\n  { yield: 39.93, variety: 'Manchuria', year: 1931, site: 'Crookston' },\n  { yield: 32.97, variety: 'Manchuria', year: 1931, site: 'Grand Rapids' },\n  { yield: 28.97, variety: 'Manchuria', year: 1931, site: 'Duluth' },\n  { yield: 43.07, variety: 'Glabron', year: 1931, site: 'University Farm' },\n  { yield: 55.2, variety: 'Glabron', year: 1931, site: 'Waseca' },\n  { yield: 28.77, variety: 'Glabron', year: 1931, site: 'Morris' },\n  { yield: 38.13, variety: 'Glabron', year: 1931, site: 'Crookston' },\n  { yield: 29.13, variety: 'Glabron', year: 1931, site: 'Grand Rapids' },\n  { yield: 29.67, variety: 'Glabron', year: 1931, site: 'Duluth' },\n  { yield: 35.13, variety: 'Svansota', year: 1931, site: 'University Farm' },\n  { yield: 47.33, variety: 'Svansota', year: 1931, site: 'Waseca' },\n  { yield: 25.77, variety: 'Svansota', year: 1931, site: 'Morris' },\n  { yield: 40.47, variety: 'Svansota', year: 1931, site: 'Crookston' },\n  { yield: 29.67, variety: 'Svansota', year: 1931, site: 'Grand Rapids' },\n  { yield: 25.7, variety: 'Svansota', year: 1931, site: 'Duluth' },\n  { yield: 39.9, variety: 'Velvet', year: 1931, site: 'University Farm' },\n  { yield: 50.23, variety: 'Velvet', year: 1931, site: 'Waseca' },\n  { yield: 26.13, variety: 'Velvet', year: 1931, site: 'Morris' },\n  { yield: 41.33, variety: 'Velvet', year: 1931, site: 'Crookston' },\n  { yield: 23.03, variety: 'Velvet', year: 1931, site: 'Grand Rapids' },\n  { yield: 26.3, variety: 'Velvet', year: 1931, site: 'Duluth' },\n  { yield: 36.57, variety: 'Trebi', year: 1931, site: 'University Farm' },\n  { yield: 63.83, variety: 'Trebi', year: 1931, site: 'Waseca' },\n  { yield: 43.77, variety: 'Trebi', year: 1931, site: 'Morris' },\n  { yield: 46.93, variety: 'Trebi', year: 1931, site: 'Crookston' },\n  { yield: 29.77, variety: 'Trebi', year: 1931, site: 'Grand Rapids' },\n  { yield: 33.93, variety: 'Trebi', year: 1931, site: 'Duluth' },\n];\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  paddingLeft: 50,\n});\n\nchart.options({\n  type: 'interval',\n  data: barleyData,\n  encode: {\n    x: 'site',\n    y: 'yield',\n    color: 'variety',\n  },\n  transform: [{ type: 'stackY' }],\n  axis: {\n    x: {\n      labelAutoHide: true,\n      labelAutoRotate: true,\n    },\n  },\n  tooltip: {\n    title: 'site',\n  },\n});\n\nchart.render();\n",paraId:19,tocIndex:4},{value:"Optimization Method 3: Use horizontal stacked bar charts",paraId:20,tocIndex:4},{value:"For large amounts of data, horizontal stacked bar charts are a better choice, making full use of vertical space to display more categories:",paraId:21,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\n// 完整的barley数据集 - 演示横向堆叠柱状图的优化效果\nconst barleyData = [\n  { yield: 27, variety: 'Manchuria', year: 1931, site: 'University Farm' },\n  { yield: 48.87, variety: 'Manchuria', year: 1931, site: 'Waseca' },\n  { yield: 27.43, variety: 'Manchuria', year: 1931, site: 'Morris' },\n  { yield: 39.93, variety: 'Manchuria', year: 1931, site: 'Crookston' },\n  { yield: 32.97, variety: 'Manchuria', year: 1931, site: 'Grand Rapids' },\n  { yield: 28.97, variety: 'Manchuria', year: 1931, site: 'Duluth' },\n  { yield: 43.07, variety: 'Glabron', year: 1931, site: 'University Farm' },\n  { yield: 55.2, variety: 'Glabron', year: 1931, site: 'Waseca' },\n  { yield: 28.77, variety: 'Glabron', year: 1931, site: 'Morris' },\n  { yield: 38.13, variety: 'Glabron', year: 1931, site: 'Crookston' },\n  { yield: 29.13, variety: 'Glabron', year: 1931, site: 'Grand Rapids' },\n  { yield: 29.67, variety: 'Glabron', year: 1931, site: 'Duluth' },\n  { yield: 35.13, variety: 'Svansota', year: 1931, site: 'University Farm' },\n  { yield: 47.33, variety: 'Svansota', year: 1931, site: 'Waseca' },\n  { yield: 25.77, variety: 'Svansota', year: 1931, site: 'Morris' },\n  { yield: 40.47, variety: 'Svansota', year: 1931, site: 'Crookston' },\n  { yield: 29.67, variety: 'Svansota', year: 1931, site: 'Grand Rapids' },\n  { yield: 25.7, variety: 'Svansota', year: 1931, site: 'Duluth' },\n  { yield: 39.9, variety: 'Velvet', year: 1931, site: 'University Farm' },\n  { yield: 50.23, variety: 'Velvet', year: 1931, site: 'Waseca' },\n  { yield: 26.13, variety: 'Velvet', year: 1931, site: 'Morris' },\n  { yield: 41.33, variety: 'Velvet', year: 1931, site: 'Crookston' },\n  { yield: 23.03, variety: 'Velvet', year: 1931, site: 'Grand Rapids' },\n  { yield: 26.3, variety: 'Velvet', year: 1931, site: 'Duluth' },\n  { yield: 36.57, variety: 'Trebi', year: 1931, site: 'University Farm' },\n  { yield: 63.83, variety: 'Trebi', year: 1931, site: 'Waseca' },\n  { yield: 43.77, variety: 'Trebi', year: 1931, site: 'Morris' },\n  { yield: 46.93, variety: 'Trebi', year: 1931, site: 'Crookston' },\n  { yield: 29.77, variety: 'Trebi', year: 1931, site: 'Grand Rapids' },\n  { yield: 33.93, variety: 'Trebi', year: 1931, site: 'Duluth' },\n];\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  height: 400,\n});\n\nchart.options({\n  type: 'interval',\n  data: barleyData,\n  coordinate: {\n    transform: [{ type: 'transpose' }],\n  },\n  encode: {\n    x: 'site',\n    y: 'yield',\n    color: 'variety',\n  },\n  transform: [{ type: 'stackY' }, { type: 'sortX', by: 'y', reverse: true }],\n  axis: {\n    y: {\n      labelAutoHide: false,\n      title: 'Yield (bushels/acre)',\n    },\n    x: {\n      labelAutoHide: false,\n    },\n  },\n  tooltip: {\n    title: 'site',\n  },\n});\n\nchart.render();\n",paraId:22,tocIndex:4},{value:"When group names are long or you need to display more groups, you can use horizontal multi-set bar charts:",paraId:23,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { category: 'Sports Games', year: '2001', sold: 27500 },\n  { category: 'Strategy Games', year: '2001', sold: 11500 },\n  { category: 'Action Games', year: '2001', sold: 6000 },\n  { category: 'Shooter Games', year: '2001', sold: 3500 },\n  { category: 'Sports Games', year: '2002', sold: 29500 },\n  { category: 'Strategy Games', year: '2002', sold: 10500 },\n  { category: 'Action Games', year: '2002', sold: 8000 },\n  { category: 'Shooter Games', year: '2002', sold: 4500 },\n  { category: 'Sports Games', year: '2003', sold: 30500 },\n  { category: 'Strategy Games', year: '2003', sold: 12500 },\n  { category: 'Action Games', year: '2003', sold: 4000 },\n  { category: 'Shooter Games', year: '2003', sold: 6500 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  height: 400,\n});\n\nchart.options({\n  type: 'interval',\n  data,\n  coordinate: { transform: [{ type: 'transpose' }] },\n  encode: {\n    x: 'sold',\n    y: 'category',\n    color: 'year',\n  },\n  transform: [{ type: 'dodgeX' }],\n  axis: {\n    x: { title: 'Game Sales' },\n    y: { title: 'Game Type' },\n  },\n});\n\nchart.render();\n",paraId:24,tocIndex:6},{value:"Multi-set bar charts can add an additional dimension for comparing data values of different categories within a group, capable of representing 3 data fields (dimensions), while regular bar charts can only represent 2 data fields (dimensions)",paraId:25,tocIndex:8},{value:"Multi-set bar charts have more bars, so they can display fewer groups",paraId:25,tocIndex:8},{value:"Multi-set bar charts can compare data sizes of different categories within the same group, as well as compare data sizes of the same category across different groups, but cannot compare the total amounts of each group",paraId:26,tocIndex:9},{value:"Stacked bar charts can compare data sizes or proportions of different categories within the same group and can also compare group totals, but are not suitable for comparing data sizes of the same category across different groups",paraId:26,tocIndex:9}]},68515:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(99187);const t=[]},95977:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(26732);const t=[{value:"A pack chart is a hierarchical tree structure visualization chart that uses circles (instead of rectangles) to represent the entire hierarchy layer by layer. Each circle represents a node in the hierarchy, with the circle size proportional to its value, and containment relationships are expressed through nested circles.",paraId:0,tocIndex:0},{value:"Pack charts are particularly suitable for displaying data with hierarchical relationships, such as organizational structures, file systems, and software package structures. Compared to traditional tree diagrams, pack charts more intuitively show data containment relationships and numerical proportions through the nesting of circles, enabling users to quickly understand the hierarchical structure of data and the relative importance of each part.",paraId:1,tocIndex:0},{value:"When data has obvious hierarchical structure and needs to simultaneously show containment relationships and numerical sizes, pack charts are an excellent choice. They can both display the overall hierarchical structure and compare the values of each node through circle sizes.",paraId:2,tocIndex:0},{value:"English Name",paraId:3,tocIndex:0},{value:": Circle Packing, Pack Chart",paraId:3,tocIndex:0},{value:"Chart Type",paraId:4,tocIndex:1},{value:"Pack Chart",paraId:4,tocIndex:1},{value:"Suitable Data",paraId:4,tocIndex:1},{value:"Hierarchical data: nested data with tree structure, containing categorical and numerical fields",paraId:4,tocIndex:1},{value:"Function",paraId:4,tocIndex:1},{value:"Display containment relationships and numerical proportions of hierarchical data",paraId:4,tocIndex:1},{value:"Data to Graphics",paraId:4,tocIndex:1},{value:"Hierarchical relationships mapped to nested circles",paraId:4,tocIndex:1},{value:"Numerical values mapped to circle radius",paraId:4,tocIndex:1},{value:"Different levels distinguished by color and nesting relationships",paraId:4,tocIndex:1},{value:"Suitable Scenarios",paraId:4,tocIndex:1},{value:"Software package structures, organizational charts, file systems, and other data with clear hierarchy and containment relationships",paraId:4,tocIndex:1},{value:"Example 1: ",paraId:5,tocIndex:3},{value:"Displaying Software Package Hierarchy",paraId:5,tocIndex:3},{value:"The following chart shows the module hierarchy of a software project. Through the pack chart, you can clearly see the size distribution of various modules and sub-modules, helping developers understand the code structure.",paraId:6,tocIndex:3},{value:"import { Chart } from '@antv/g2';\nimport { interpolateHcl } from 'd3-interpolate';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'pack',\n  width: 800,\n  height: 600,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/flare.json',\n  },\n  encode: {\n    value: 'value',\n    color: 'depth',\n  },\n  scale: {\n    color: {\n      domain: [0, 5],\n      range: ['hsl(152,80%,80%)', 'hsl(228,30%,40%)'],\n      interpolate: interpolateHcl,\n    },\n  },\n  style: {\n    labelText: (d) => (d.r >= 10 && d.height === 0 ? `${d.data.name}` : ''),\n    labelFontSize: 8,\n  },\n  legend: { color: false },\n  tooltip: {\n    title: (d) => d.data.name,\n    items: [{ field: 'value', name: 'Size' }],\n  },\n});\n\nchart.render();\n",paraId:7,tocIndex:3},{value:"Explanation",paraId:8,tocIndex:3},{value:":",paraId:8,tocIndex:3},{value:"The ",paraId:9,tocIndex:3},{value:"value",paraId:9,tocIndex:3},{value:" field maps to circle size, representing the amount of code in modules",paraId:9,tocIndex:3},{value:"The ",paraId:9,tocIndex:3},{value:"depth",paraId:9,tocIndex:3},{value:" field maps to color, distinguishing different levels",paraId:9,tocIndex:3},{value:"Label display conditions are set through ",paraId:9,tocIndex:3},{value:"labelText",paraId:9,tocIndex:3},{value:"Example 2: ",paraId:10,tocIndex:3},{value:"Displaying Organizational Personnel Distribution",paraId:10,tocIndex:3},{value:"Pack charts are very suitable for displaying personnel distribution across departments in an organization, allowing managers to see the scale of each department at a glance.",paraId:11,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nconst orgData = {\n  name: 'Company',\n  value: 500,\n  children: [\n    {\n      name: 'Technology',\n      value: 200,\n      children: [\n        { name: 'Frontend Team', value: 80 },\n        { name: 'Backend Team', value: 90 },\n        { name: 'Algorithm Team', value: 30 },\n      ],\n    },\n    {\n      name: 'Product',\n      value: 120,\n      children: [\n        { name: 'Product Design', value: 50 },\n        { name: 'User Research', value: 30 },\n        { name: 'Data Analysis', value: 40 },\n      ],\n    },\n    {\n      name: 'Operations',\n      value: 100,\n      children: [\n        { name: 'Marketing', value: 60 },\n        { name: 'Customer Service', value: 40 },\n      ],\n    },\n    {\n      name: 'Administration',\n      value: 80,\n      children: [\n        { name: 'Human Resources', value: 30 },\n        { name: 'Finance', value: 25 },\n        { name: 'Legal', value: 25 },\n      ],\n    },\n  ],\n};\n\nchart.options({\n  type: 'pack',\n  width: 700,\n  height: 500,\n  data: { value: orgData },\n  layout: {\n    padding: 8,\n    sort: (a, b) => b.value - a.value,\n  },\n  encode: {\n    value: 'value',\n    color: 'depth',\n  },\n  scale: {\n    color: {\n      range: ['#E8F4FD', '#1890FF', '#003A8C'],\n    },\n  },\n  labels: [\n    {\n      text: (d) => d.data.name,\n      position: 'inside',\n      fontWeight: (d) => (d.depth <= 1 ? 'bold' : 'normal'),\n      fontSize: (d) => Math.max(8, Math.min(14, d.r / 3)),\n      background: (d) => d.data.children, // background display\n      backgroundFill: '#fff',\n      transform: [\n        { type: 'contrastReverse' },\n        { type: 'overflowStroke' },\n        { type: 'overlapDodgeY', padding: 8 },\n      ],\n    },\n  ],\n  legend: { color: false },\n  tooltip: {\n    title: (d) => d.data.name,\n    items: [{ field: 'value', name: 'Personnel' }],\n  },\n});\n\nchart.render();\n",paraId:12,tocIndex:3},{value:"Explanation",paraId:13,tocIndex:3},{value:":",paraId:13,tocIndex:3},{value:"Uses nested data structure to represent organizational hierarchy",paraId:14,tocIndex:3},{value:"sort",paraId:14,tocIndex:3},{value:" configuration sorts by numerical value, with larger circles displayed first",paraId:14,tocIndex:3},{value:"Dynamically adjusts font size through ",paraId:14,tocIndex:3},{value:"labelFontSize",paraId:14,tocIndex:3},{value:" to fit circles",paraId:14,tocIndex:3},{value:"Uses different label colors to distinguish levels",paraId:14,tocIndex:3},{value:"Example 3: ",paraId:15,tocIndex:3},{value:"Displaying Investment Portfolio Distribution",paraId:15,tocIndex:3},{value:"Pack charts can clearly show the proportion relationships of various asset categories and specific investment projects in an investment portfolio.",paraId:16,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nconst portfolioData = {\n  name: 'Investment Portfolio',\n  value: 1000000,\n  children: [\n    {\n      name: 'Stocks',\n      value: 400000,\n      children: [\n        { name: 'Tech Stocks', value: 180000 },\n        { name: 'Financial Stocks', value: 120000 },\n        { name: 'Consumer Stocks', value: 100000 },\n      ],\n    },\n    {\n      name: 'Bonds',\n      value: 300000,\n      children: [\n        { name: 'Government Bonds', value: 150000 },\n        { name: 'Corporate Bonds', value: 100000 },\n        { name: 'Convertible Bonds', value: 50000 },\n      ],\n    },\n    {\n      name: 'Funds',\n      value: 200000,\n      children: [\n        { name: 'Equity Funds', value: 80000 },\n        { name: 'Bond Funds', value: 70000 },\n        { name: 'Hybrid Funds', value: 50000 },\n      ],\n    },\n    {\n      name: 'Cash',\n      value: 100000,\n    },\n  ],\n};\n\nchart.options({\n  type: 'pack',\n  width: 600,\n  height: 600,\n  data: { value: portfolioData },\n  layout: {\n    padding: 3,\n  },\n  encode: {\n    value: 'value',\n    color: (d) => {\n      const parentName =\n        d.depth === 0 ? 'root' : d.parent?.data?.name || d.data.name;\n      return parentName;\n    },\n  },\n  scale: {\n    color: {\n      range: ['#FFF7E6', '#FFE7BA', '#FFC069', '#FA8C16', '#D46B08'],\n    },\n  },\n  style: {\n    labelText: (d) => {\n      if (d.height === 0) return d.data.name;\n      if (d.depth === 0) return '';\n      return d.data.name;\n    },\n    labelFill: '#fff',\n    labelFontWeight: 'bold',\n    labelFontSize: (d) => Math.max(8, Math.min(12, d.r / 4)),\n    stroke: '#fff',\n    strokeWidth: 1,\n    fillOpacity: 0.8,\n    labelBackground: (d) => d.data.children, // background display\n    labelBackgroundFill: '#fff',\n    labelTransform: [\n      { type: 'contrastReverse' },\n      { type: 'overflowStroke' },\n      { type: 'overlapDodgeY', padding: 8 },\n    ],\n  },\n  legend: { color: false },\n  tooltip: {\n    title: (d) => d.data.name,\n    items: [\n      {\n        field: 'value',\n        name: 'Amount',\n        valueFormatter: (v) => `$${(v / 10000).toFixed(1)}W`,\n      },\n    ],\n  },\n});\n\nchart.render();\n",paraId:17,tocIndex:3},{value:"Explanation",paraId:18,tocIndex:3},{value:":",paraId:18,tocIndex:3},{value:"Uses custom color mapping to distinguish different asset categories",paraId:19,tocIndex:3},{value:"Sets transparency through ",paraId:19,tocIndex:3},{value:"fillOpacity",paraId:19,tocIndex:3},{value:" to enhance visual effects",paraId:19,tocIndex:3},{value:"Customizes ",paraId:19,tocIndex:3},{value:"valueFormatter",paraId:19,tocIndex:3},{value:" to format amount display",paraId:19,tocIndex:3},{value:"Treemap",paraId:20,tocIndex:4},{value:"Pack charts and treemaps can both display hierarchical data, but have different characteristics:",paraId:21,tocIndex:5},{value:"Comparison Dimension",paraId:22,tocIndex:5},{value:"Pack Chart",paraId:22,tocIndex:5},{value:"Treemap",paraId:22,tocIndex:5},{value:"Visual Form",paraId:22,tocIndex:5},{value:"Circular nested layout",paraId:22,tocIndex:5},{value:"Rectangular nested layout",paraId:22,tocIndex:5},{value:"Space Utilization",paraId:22,tocIndex:5},{value:"Circular boundaries, lower utilization",paraId:22,tocIndex:5},{value:"Rectangular filling, high utilization",paraId:22,tocIndex:5},{value:"Proportion Perception",paraId:22,tocIndex:5},{value:"Area comparison, but circles harder to judge",paraId:22,tocIndex:5},{value:"Area comparison, rectangles easier to judge precisely",paraId:22,tocIndex:5},{value:"Hierarchy Display",paraId:22,tocIndex:5},{value:"Nested circles, intuitive containment",paraId:22,tocIndex:5},{value:"Nested rectangles, clear containment",paraId:22,tocIndex:5},{value:"Aesthetics",paraId:22,tocIndex:5},{value:"Circular layout more beautiful and harmonious",paraId:22,tocIndex:5},{value:"Rectangular layout simple and practical",paraId:22,tocIndex:5},{value:"Suitable Scenarios",paraId:22,tocIndex:5},{value:"Emphasizes visual beauty and overall containment relationships",paraId:22,tocIndex:5},{value:"Emphasizes precise proportion comparison and space efficiency",paraId:22,tocIndex:5},{value:"Sunburst Chart",paraId:23,tocIndex:5},{value:"Pack charts and sunburst charts both use circular layouts to display hierarchical data, but with different presentation methods:",paraId:24,tocIndex:6},{value:"Comparison Dimension",paraId:25,tocIndex:6},{value:"Pack Chart",paraId:25,tocIndex:6},{value:"Sunburst Chart",paraId:25,tocIndex:6},{value:"Layout Method",paraId:25,tocIndex:6},{value:"Nested circles, internal containment",paraId:25,tocIndex:6},{value:"Concentric rings, radial expansion",paraId:25,tocIndex:6},{value:"Value Mapping",paraId:25,tocIndex:6},{value:"Circle area represents numerical value",paraId:25,tocIndex:6},{value:"Sector angle represents numerical value",paraId:25,tocIndex:6},{value:"Hierarchical Relationship",paraId:25,tocIndex:6},{value:"Containment relationship through nesting levels",paraId:25,tocIndex:6},{value:"Hierarchical depth through radial distance",paraId:25,tocIndex:6},{value:"Central Area",paraId:25,tocIndex:6},{value:"Root node occupies central circle",paraId:25,tocIndex:6},{value:"Center available for title or interaction",paraId:25,tocIndex:6},{value:"Interactive Experience",paraId:25,tocIndex:6},{value:"Click node to drill down to sub-levels",paraId:25,tocIndex:6},{value:"Click sector to drill down, supports breadcrumb navigation",paraId:25,tocIndex:6},{value:"Suitable Scenarios",paraId:25,tocIndex:6},{value:"Emphasizes containment relationships and overall structure",paraId:25,tocIndex:6},{value:"Emphasizes hierarchical navigation and proportion allocation",paraId:25,tocIndex:6}]},85916:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(21110);const t=[{value:'Parallel coordinates is a statistical chart with multiple vertical parallel axis. Each vertical axis represents a field, and each field is marked with scales to indicate ranges. Thus, multi-dimensional data can easily find "points" on each axis and connect them to form a polyline. As data increases and lines stack up, analysts may discover characteristics and patterns, such as clustering relationships between data.',paraId:0,tocIndex:0},{value:"Although it may appear similar to a ",paraId:1,tocIndex:0},{value:"line chart",paraId:2,tocIndex:0},{value:" on the surface, parallel coordinates do not represent trends, and there is no causal relationship between the axis. Therefore, when using parallel coordinates, how to determine the order of axis can be artificially decided. Generally speaking, the order affects perception and judgment when reading. The closer two axis are, the stronger people perceive the comparison between them. Therefore, to achieve the most appropriate and aesthetically pleasing ordering, it often requires multiple trials and comparisons. Conversely, trying different arrangements may also help to draw more conclusions.",paraId:1,tocIndex:0},{value:"Additionally, each axis in parallel coordinates may have different data ranges, which can easily cause misunderstanding for readers. When creating charts, it's best to clearly mark the minimum and maximum values on each axis.",paraId:3,tocIndex:0},{value:"English Name",paraId:4,tocIndex:0},{value:": Parallel Coordinates",paraId:4,tocIndex:0},{value:"Chart Type",paraId:5,tocIndex:2},{value:"Vertical Parallel Coordinates",paraId:5,tocIndex:2},{value:"Suitable Data",paraId:5,tocIndex:2},{value:"Table: Multiple continuous data fields, optionally one categorical data field for color encoding",paraId:5,tocIndex:2},{value:"Function",paraId:5,tocIndex:2},{value:"Analyze relationships between multiple variables, identify data patterns and clusters",paraId:5,tocIndex:2},{value:"Data-Graphics Mapping",paraId:5,tocIndex:2},{value:"Each data dimension maps to a vertical axis",paraId:5,tocIndex:2},{value:"Data records map to lines connecting axis",paraId:5,tocIndex:2},{value:"Optional categorical field maps to line colors",paraId:5,tocIndex:2},{value:"Suitable Data Size",paraId:5,tocIndex:2},{value:"Moderate data volume (recommended not to exceed 1000 records, use transparency or filtering for large datasets)",paraId:5,tocIndex:2},{value:"Chart Type",paraId:6,tocIndex:3},{value:"Horizontal Parallel Coordinates",paraId:6,tocIndex:3},{value:"Suitable Data",paraId:6,tocIndex:3},{value:"Table: Multiple continuous data fields, optionally one categorical data field for color encoding",paraId:6,tocIndex:3},{value:"Function",paraId:6,tocIndex:3},{value:"Analyze relationships between multiple variables, suitable for longer dimension names",paraId:6,tocIndex:3},{value:"Data-Graphics Mapping",paraId:6,tocIndex:3},{value:"Each data dimension maps to a horizontal axis",paraId:6,tocIndex:3},{value:"Data records map to lines connecting axis",paraId:6,tocIndex:3},{value:"Suitable Data Size",paraId:6,tocIndex:3},{value:"Moderate data volume, can accommodate more dimension labels than vertical layout",paraId:6,tocIndex:3},{value:"Example 1: ",paraId:7,tocIndex:5},{value:"Multi-dimensional Data Relationship Analysis",paraId:7,tocIndex:5},{value:"The following chart shows the relationships between multiple performance indicators in an automotive dataset, including fuel economy, cylinders, displacement, horsepower, weight, etc.",paraId:8,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst axis = {\n  zIndex: 1,\n  titlePosition: 'right',\n  line: true,\n  labelStroke: '#fff',\n  labelLineWidth: 5,\n  labelFontSize: 10,\n  labelStrokeLineJoin: 'round',\n  titleStroke: '#fff',\n  titleFontSize: 10,\n  titleLineWidth: 5,\n  titleStrokeLineJoin: 'round',\n  titleTransform: 'translate(-50%, 0) rotate(-90)',\n  lineStroke: 'black',\n  tickStroke: 'black',\n  lineLineWidth: 1,\n};\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/cars3.json',\n  },\n  coordinate: { type: 'parallel' },\n  encode: {\n    position: [\n      'economy (mpg)',\n      'cylinders',\n      'displacement (cc)',\n      'power (hp)',\n      'weight (lb)',\n      '0-60 mph (s)',\n      'year',\n    ],\n    color: 'weight (lb)',\n  },\n  style: {\n    lineWidth: 1.5,\n    strokeOpacity: 0.4,\n  },\n  scale: {\n    color: {\n      palette: 'brBG',\n      offset: (t) => 1 - t,\n    },\n  },\n  legend: {\n    color: { length: 400, layout: { justifyContent: 'center' } },\n  },\n  axis: {\n    position: axis,\n    position1: axis,\n    position2: axis,\n    position3: axis,\n    position4: axis,\n    position5: axis,\n    position6: axis,\n    position7: axis,\n  },\n  interaction: {\n    tooltip: { series: false },\n  },\n});\n\nchart.render();\n",paraId:9,tocIndex:5},{value:"Description",paraId:10,tocIndex:5},{value:":",paraId:10,tocIndex:5},{value:"Each line represents multiple performance indicators of a car",paraId:11,tocIndex:5},{value:"Line colors are encoded by car weight, making it easy to identify weight-related patterns",paraId:11,tocIndex:5},{value:"You can observe the relationships between weight and fuel economy, acceleration performance, etc.",paraId:11,tocIndex:5},{value:"Example 2: ",paraId:12,tocIndex:5},{value:"Data Clustering Identification",paraId:12,tocIndex:5},{value:"Parallel coordinates can be used to identify data groups with similar patterns.",paraId:13,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\nconst axis = {\n  zIndex: 1,\n  titlePosition: 'right',\n  line: true,\n  labelStroke: '#fff',\n  labelLineWidth: 5,\n  labelFontSize: 10,\n  labelStrokeLineJoin: 'round',\n  titleStroke: '#fff',\n  titleFontSize: 10,\n  titleLineWidth: 5,\n  titleStrokeLineJoin: 'round',\n  titleTransform: 'translate(-50%, 0) rotate(-90)',\n  lineStroke: 'black',\n  tickStroke: 'black',\n  lineLineWidth: 1,\n};\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: [\n    { A: 10, B: 30, C: 20, D: 60, group: 'Group 1' },\n    { A: 12, B: 32, C: 22, D: 58, group: 'Group 1' },\n    { A: 8, B: 28, C: 18, D: 62, group: 'Group 1' },\n    { A: 50, B: 20, C: 80, D: 30, group: 'Group 2' },\n    { A: 52, B: 18, C: 82, D: 28, group: 'Group 2' },\n    { A: 48, B: 22, C: 78, D: 32, group: 'Group 2' },\n    { A: 80, B: 60, C: 40, D: 10, group: 'Group 3' },\n    { A: 82, B: 58, C: 42, D: 12, group: 'Group 3' },\n    { A: 78, B: 62, C: 38, D: 8, group: 'Group 3' },\n  ],\n  coordinate: { type: 'parallel' },\n  encode: {\n    position: ['A', 'B', 'C', 'D'],\n    color: 'group',\n  },\n  style: {\n    lineWidth: 3,\n    strokeOpacity: 0.8,\n  },\n  scale: {\n    color: {\n      palette: 'category10',\n    },\n  },\n  axis: {\n    position: axis,\n    position1: axis,\n    position2: axis,\n    position3: axis,\n  },\n  legend: {\n    color: { position: 'bottom' },\n  },\n  interaction: {\n    tooltip: { series: false },\n  },\n});\n\nchart.render();\n",paraId:14,tocIndex:5},{value:"Example 1: ",paraId:15,tocIndex:6},{value:"Too Few Dimensions",paraId:15,tocIndex:6},{value:"When there are only 2-3 dimensions, scatter plots or other chart types would be more intuitive.",paraId:16,tocIndex:6},{value:"// Not recommended: Using parallel coordinates for only two dimensions\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: [\n    { x: 10, y: 30, category: 'A' },\n    { x: 20, y: 20, category: 'B' },\n    { x: 30, y: 40, category: 'C' },\n    { x: 40, y: 35, category: 'D' },\n    { x: 50, y: 25, category: 'E' },\n  ],\n  coordinate: { type: 'parallel' },\n  encode: {\n    position: ['x', 'y'],\n    color: 'category',\n  },\n  style: {\n    lineWidth: 2,\n    strokeOpacity: 0.8,\n  },\n  axis: {\n    position: { zIndex: 1 },\n    position1: { zIndex: 1 },\n  },\n});\n\nchart.render();\n",paraId:17,tocIndex:6},{value:"For two-dimensional data, scatter plots are more suitable:",paraId:18,tocIndex:6},{value:"// Recommended: Using scatter plot for two-dimensional data\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  inset: 20,\n});\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: [\n    { x: 10, y: 30, category: 'A' },\n    { x: 20, y: 20, category: 'B' },\n    { x: 30, y: 40, category: 'C' },\n    { x: 40, y: 35, category: 'D' },\n    { x: 50, y: 25, category: 'E' },\n  ],\n  encode: {\n    x: 'x',\n    y: 'y',\n    color: 'category',\n    size: 20,\n  },\n  scale: {\n    color: {\n      palette: 'category10',\n    },\n  },\n  legend: {\n    color: { position: 'bottom' },\n  },\n});\n\nchart.render();\n",paraId:19,tocIndex:6},{value:"Example 2: ",paraId:20,tocIndex:6},{value:"Too Much Data Causing Visual Clutter",paraId:20,tocIndex:6},{value:"When there are too many data records, lines will severely overlap, affecting readability.",paraId:21,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\n// Generate large amounts of data to simulate excessive records\nconst generateData = (count) => {\n  const data = [];\n  for (let i = 0; i < count; i++) {\n    data.push({\n      A: Math.random() * 100,\n      B: Math.random() * 100,\n      C: Math.random() * 100,\n      D: Math.random() * 100,\n      id: i,\n    });\n  }\n  return data;\n};\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: generateData(500), // Large amount of data\n  coordinate: { type: 'parallel' },\n  encode: {\n    position: ['A', 'B', 'C', 'D'],\n  },\n  style: {\n    lineWidth: 1,\n    strokeOpacity: 0.1, // Still chaotic even with reduced opacity\n    stroke: '#1890ff',\n  },\n  axis: {\n    position: { zIndex: 1 },\n    position1: { zIndex: 1 },\n    position2: { zIndex: 1 },\n    position3: { zIndex: 1 },\n  },\n});\n\nchart.render();\n",paraId:22,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst axis = {\n  zIndex: 1,\n  line: true,\n  labelStroke: '#fff',\n  labelLineWidth: 5,\n  labelFontSize: 10,\n  labelStrokeLineJoin: 'round',\n  titleStroke: '#fff',\n  titleFontSize: 10,\n  titleLineWidth: 5,\n  titleStrokeLineJoin: 'round',\n  lineStroke: 'black',\n  tickStroke: 'black',\n  lineLineWidth: 1,\n};\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/cars3.json',\n  },\n  coordinate: {\n    type: 'parallel',\n    transform: [{ type: 'transpose' }],\n  },\n  encode: {\n    position: [\n      'economy (mpg)',\n      'cylinders',\n      'displacement (cc)',\n      'power (hp)',\n      'weight (lb)',\n    ],\n    color: 'weight (lb)',\n    shape: 'smooth',\n  },\n  style: {\n    lineWidth: 1.5,\n    strokeOpacity: 0.4,\n  },\n  scale: {\n    color: {\n      palette: 'brBG',\n      offset: (t) => 1 - t,\n    },\n  },\n  legend: {\n    color: { length: 400, layout: { justifyContent: 'center' } },\n  },\n  axis: {\n    position: axis,\n    position1: axis,\n    position2: axis,\n    position3: axis,\n    position4: axis,\n  },\n  interaction: {\n    tooltip: { series: false },\n  },\n});\n\nchart.render();\n",paraId:23,tocIndex:8},{value:"Add axis brushing and highlighting functionality to enhance data exploration capabilities:",paraId:24,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst axis = {\n  zIndex: 1,\n  titlePosition: 'right',\n  line: true,\n  labelStroke: '#fff',\n  labelLineWidth: 5,\n  labelFontSize: 10,\n  labelStrokeLineJoin: 'round',\n  titleStroke: '#fff',\n  titleFontSize: 10,\n  titleLineWidth: 5,\n  titleStrokeLineJoin: 'round',\n  titleTransform: 'translate(-50%, 0) rotate(-90)',\n  lineStroke: 'black',\n  tickStroke: 'black',\n  lineLineWidth: 1,\n};\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/cars3.json',\n  },\n  coordinate: { type: 'parallel' },\n  encode: {\n    position: [\n      'economy (mpg)',\n      'cylinders',\n      'displacement (cc)',\n      'power (hp)',\n      'weight (lb)',\n    ],\n    color: 'cylinders',\n  },\n  scale: {\n    color: {\n      palette: 'brBG',\n      offset: (t) => 1 - t,\n    },\n  },\n  style: {\n    lineWidth: 1.5,\n    strokeOpacity: 0.6,\n  },\n  legend: {\n    color: { position: 'bottom' },\n  },\n  axis: {\n    position: axis,\n    position1: axis,\n    position2: axis,\n    position3: axis,\n    position4: axis,\n  },\n  interaction: {\n    tooltip: { series: false },\n    brushAxisHighlight: {\n      maskFill: '#d8d0c0',\n      maskOpacity: 0.3,\n    },\n  },\n  state: {\n    active: { lineWidth: 3, strokeOpacity: 1 },\n    inactive: { stroke: '#ccc', opacity: 0.3 },\n  },\n});\n\nchart.render();\n",paraId:25,tocIndex:9},{value:"Inspired by ",paraId:26,tocIndex:10},{value:"Fathom Information Design",paraId:26,tocIndex:10},{value:", this example shows how to use parallel coordinates to analyze large-scale enterprise data over time. By displaying three dimensions - ranking, revenue, and profit - you can observe enterprise performance trajectories and relationships across different years.",paraId:26,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\n// Using real Fortune 500 data\nconst realFortuneData = async () => {\n  // Fortune 500 data for 2022 (Source: GitHub jc22dora/2022Fortune500)\n  const fortune2022 = [\n    {\n      company: 'Walmart',\n      ranking: 1,\n      revenue: 572754,\n      profit: 13673,\n      industry: 'Retail',\n      year: 2022,\n    },\n    {\n      company: 'Amazon',\n      ranking: 2,\n      revenue: 469822,\n      profit: 33364,\n      industry: 'Technology',\n      year: 2022,\n    },\n    {\n      company: 'Apple',\n      ranking: 3,\n      revenue: 365817,\n      profit: 94680,\n      industry: 'Technology',\n      year: 2022,\n    },\n    {\n      company: 'CVS Health',\n      ranking: 4,\n      revenue: 292111,\n      profit: 7910,\n      industry: 'Healthcare',\n      year: 2022,\n    },\n    {\n      company: 'UnitedHealth Group',\n      ranking: 5,\n      revenue: 287597,\n      profit: 17285,\n      industry: 'Healthcare',\n      year: 2022,\n    },\n    {\n      company: 'Exxon Mobil',\n      ranking: 6,\n      revenue: 285640,\n      profit: 23040,\n      industry: 'Energy',\n      year: 2022,\n    },\n    {\n      company: 'Berkshire Hathaway',\n      ranking: 7,\n      revenue: 276094,\n      profit: 89795,\n      industry: 'Finance',\n      year: 2022,\n    },\n    {\n      company: 'Alphabet',\n      ranking: 8,\n      revenue: 257637,\n      profit: 76033,\n      industry: 'Technology',\n      year: 2022,\n    },\n    {\n      company: 'McKesson',\n      ranking: 9,\n      revenue: 238228,\n      profit: 5234,\n      industry: 'Healthcare',\n      year: 2022,\n    },\n    {\n      company: 'AmerisourceBergen',\n      ranking: 10,\n      revenue: 213989,\n      profit: 1551,\n      industry: 'Healthcare',\n      year: 2022,\n    },\n    {\n      company: 'Costco Wholesale',\n      ranking: 11,\n      revenue: 195929,\n      profit: 5007,\n      industry: 'Retail',\n      year: 2022,\n    },\n    {\n      company: 'Cigna',\n      ranking: 12,\n      revenue: 174087,\n      profit: 5408,\n      industry: 'Healthcare',\n      year: 2022,\n    },\n    {\n      company: 'AT&T',\n      ranking: 13,\n      revenue: 168864,\n      profit: -11899,\n      industry: 'Technology',\n      year: 2022,\n    },\n    {\n      company: 'Microsoft',\n      ranking: 14,\n      revenue: 168088,\n      profit: 61271,\n      industry: 'Technology',\n      year: 2022,\n    },\n    {\n      company: 'Cardinal Health',\n      ranking: 15,\n      revenue: 162467,\n      profit: 987,\n      industry: 'Healthcare',\n      year: 2022,\n    },\n    {\n      company: 'Chevron',\n      ranking: 16,\n      revenue: 155607,\n      profit: 15625,\n      industry: 'Energy',\n      year: 2022,\n    },\n    {\n      company: 'Home Depot',\n      ranking: 17,\n      revenue: 151157,\n      profit: 17105,\n      industry: 'Retail',\n      year: 2022,\n    },\n    {\n      company: 'Walgreens Boots Alliance',\n      ranking: 18,\n      revenue: 132703,\n      profit: -3003,\n      industry: 'Healthcare',\n      year: 2022,\n    },\n    {\n      company: 'Marathon Petroleum',\n      ranking: 19,\n      revenue: 128050,\n      profit: 11267,\n      industry: 'Energy',\n      year: 2022,\n    },\n    {\n      company: 'Anthem',\n      ranking: 20,\n      revenue: 118414,\n      profit: 6104,\n      industry: 'Healthcare',\n      year: 2022,\n    },\n    {\n      company: 'Tesla',\n      ranking: 65,\n      revenue: 53823,\n      profit: 5519,\n      industry: 'Technology',\n      year: 2022,\n    },\n    {\n      company: 'Meta Platforms',\n      ranking: 27,\n      revenue: 117929,\n      profit: 39370,\n      industry: 'Technology',\n      year: 2022,\n    },\n    {\n      company: 'Netflix',\n      ranking: 115,\n      revenue: 29698,\n      profit: 4492,\n      industry: 'Technology',\n      year: 2022,\n    },\n    {\n      company: 'NVIDIA',\n      ranking: 134,\n      revenue: 26974,\n      profit: 9752,\n      industry: 'Technology',\n      year: 2022,\n    },\n    {\n      company: 'Adobe',\n      ranking: 235,\n      revenue: 15785,\n      profit: 5788,\n      industry: 'Technology',\n      year: 2022,\n    },\n  ];\n\n  // Simulate 2019-2021 data (reasonable variations based on 2022 data)\n  const generateHistoricalData = (baseData, year) => {\n    return baseData.map((item) => {\n      const yearFactor =\n        year === 2020 ? 0.85 : year === 2021 ? 0.95 : year === 2019 ? 0.9 : 1;\n      const growthVariation = (Math.random() - 0.5) * 0.2; // ±10% random variation\n\n      return {\n        ...item,\n        year,\n        revenue: Math.round(item.revenue * yearFactor * (1 + growthVariation)),\n        profit: Math.round(\n          item.profit * yearFactor * (1 + growthVariation * 1.5),\n        ), // Profit has larger fluctuations\n        ranking: Math.max(\n          1,\n          Math.min(500, item.ranking + Math.floor((Math.random() - 0.5) * 6)),\n        ), // Small ranking fluctuations\n      };\n    });\n  };\n\n  // Generate multi-year data\n  const allYearsData = [\n    ...generateHistoricalData(fortune2022, 2019),\n    ...generateHistoricalData(fortune2022, 2020),\n    ...generateHistoricalData(fortune2022, 2021),\n    ...fortune2022,\n    ...generateHistoricalData(fortune2022, 2023), // Predicted 2023\n  ];\n\n  return allYearsData;\n};\n\n// Get data and render chart\nrealFortuneData().then((fortuneData) => {\n  const chart = new Chart({\n    container: 'container',\n    theme: 'classic',\n    marginTop: 200,\n    marginLeft: 50,\n    marginRight: 50,\n    height: 600,\n    width: 800,\n  });\n\n  const axisConfig = {\n    zIndex: 1,\n    titlePosition: 'right',\n    line: true,\n    lineStroke: '#2c3e50',\n    lineLineWidth: 2,\n    labelStroke: '#fff',\n    labelLineWidth: 4,\n    labelFontSize: 11,\n    labelStrokeLineJoin: 'round',\n    titleStroke: '#fff',\n    titleFontSize: 13,\n    titleLineWidth: 5,\n    titleStrokeLineJoin: 'round',\n    titleTransform: 'translate(-50%, 0) rotate(-90)',\n    tickStroke: '#7f8c8d',\n    tickLineWidth: 1,\n    grid: true,\n    gridStroke: '#ecf0f1',\n    gridStrokeOpacity: 0.5,\n  };\n\n  chart.options({\n    type: 'line',\n    data: fortuneData.filter((d) => d.year === 2022), // Default to 2022 data\n    coordinate: { type: 'parallel' },\n    encode: {\n      position: ['ranking', 'revenue', 'profit'],\n      color: 'industry',\n      key: 'company',\n    },\n    style: {\n      lineWidth: 2.5,\n      strokeOpacity: 0.8,\n      cursor: 'pointer',\n    },\n    scale: {\n      position: {\n        range: [0, 1],\n        nice: true,\n      },\n      position1: {\n        nice: true,\n      },\n      position2: {\n        nice: true,\n      },\n      color: {\n        type: 'ordinal',\n        domain: ['Technology', 'Retail', 'Healthcare', 'Finance', 'Energy'],\n        range: ['#3498db', '#e74c3c', '#2ecc71', '#f39c12', '#9b59b6'],\n      },\n    },\n    legend: {\n      color: {\n        position: 'top',\n        title: 'Industry Classification',\n        titleFontSize: 14,\n      },\n    },\n    axis: {\n      position: {\n        ...axisConfig,\n        title: 'Fortune 500 Ranking',\n        labelFormatter: (d) => `#${Math.round(d)}`,\n      },\n      position1: {\n        ...axisConfig,\n        title: 'Revenue (Million USD)',\n        labelFormatter: (d) => `$${(d / 1000).toFixed(0)}B`,\n      },\n      position2: {\n        ...axisConfig,\n        title: 'Net Profit (Million USD)',\n        labelFormatter: (d) =>\n          d >= 0\n            ? `$${(d / 1000).toFixed(1)}B`\n            : `-$${Math.abs(d / 1000).toFixed(1)}B`,\n      },\n    },\n    tooltip: {\n      title: (d) => `${d.company} (${d.year})`,\n      items: [\n        {\n          field: 'ranking',\n          name: 'Fortune 500 Ranking',\n          valueFormatter: (d) => `#${d}`,\n        },\n        {\n          field: 'revenue',\n          name: 'Revenue',\n          valueFormatter: (d) => `$${(d / 1000).toFixed(1)} Billion USD`,\n        },\n        {\n          field: 'profit',\n          name: 'Net Profit',\n          valueFormatter: (d) =>\n            d >= 0\n              ? `$${(d / 1000).toFixed(1)} Billion USD`\n              : `-$${Math.abs(d / 1000).toFixed(1)} Billion USD`,\n        },\n        { field: 'industry', name: 'Industry' },\n      ],\n    },\n    interaction: {\n      tooltip: {\n        series: false,\n      },\n      brushAxisHighlight: {\n        maskFill: 'rgba(52, 152, 219, 0.15)',\n        maskOpacity: 0.6,\n      },\n    },\n    state: {\n      active: {\n        lineWidth: 4,\n        strokeOpacity: 1,\n        shadowColor: '#2c3e50',\n        shadowBlur: 8,\n      },\n      inactive: {\n        stroke: '#bdc3c7',\n        strokeOpacity: 0.2,\n      },\n    },\n  });\n\n  chart.render();\n\n  // Add year switching controls\n  setTimeout(() => {\n    const container = document.getElementById('container');\n    const controlPanel = document.createElement('div');\n    controlPanel.style.cssText = `\n      position: absolute;\n      top: 10px;\n      left: 10px;\n      background: rgba(255, 255, 255, 0.95);\n      padding: 15px;\n      border-radius: 8px;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n      z-index: 100;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n    `;\n\n    controlPanel.innerHTML = `\n      <div style=\"margin-bottom: 10px; font-weight: 600; color: #2c3e50;\">\n        Fortune 500 Time Series Analysis\n      </div>\n      <div style=\"margin-bottom: 8px;\">\n        <label style=\"font-size: 12px; color: #7f8c8d;\">Year：</label>\n        <span id=\"current-year\" style=\"font-weight: 600; color: #2c3e50;\">2022</span>\n      </div>\n      <div style=\"display: flex; gap: 5px; margin-bottom: 8px;\">\n        <button id=\"prev-year\" style=\"padding: 6px 12px; border: 1px solid #bdc3c7; background: #fff; border-radius: 4px; cursor: pointer; font-size: 12px;\">◀ Previous</button>\n        <button id=\"next-year\" style=\"padding: 6px 12px; border: 1px solid #bdc3c7; background: #fff; border-radius: 4px; cursor: pointer; font-size: 12px;\">Next ▶</button>\n      </div>\n      <div style=\"font-size: 11px; color: #95a5a6; line-height: 1.3;\">\n        💡 Data Source：<a href=\"https://github.com/jc22dora/2022Fortune500\" target=\"_blank\" style=\"color: #3498db;\">GitHub</a><br>\n        ⌨️ Tip：Use ← → keys to switch years\n      </div>\n    `;\n\n    container.style.position = 'relative';\n    container.appendChild(controlPanel);\n\n    const years = [2019, 2020, 2021, 2022, 2023];\n    let currentYearIndex = 3; // Start from 2022 (real data year)\n\n    const updateChart = (yearIndex) => {\n      const year = years[yearIndex];\n      const yearData = fortuneData.filter((d) => d.year === year);\n      document.getElementById('current-year').textContent = year;\n\n      chart.changeData(yearData);\n\n      // Update button state\n      document.getElementById('prev-year').disabled = yearIndex === 0;\n      document.getElementById('next-year').disabled =\n        yearIndex === years.length - 1;\n\n      // Update button style\n      const prevBtn = document.getElementById('prev-year');\n      const nextBtn = document.getElementById('next-year');\n      prevBtn.style.opacity = yearIndex === 0 ? '0.5' : '1';\n      nextBtn.style.opacity = yearIndex === years.length - 1 ? '0.5' : '1';\n    };\n\n    // Button events\n    document.getElementById('prev-year').onclick = () => {\n      if (currentYearIndex > 0) {\n        currentYearIndex--;\n        updateChart(currentYearIndex);\n      }\n    };\n\n    document.getElementById('next-year').onclick = () => {\n      if (currentYearIndex < years.length - 1) {\n        currentYearIndex++;\n        updateChart(currentYearIndex);\n      }\n    };\n\n    // Keyboard events\n    document.addEventListener('keydown', (e) => {\n      if (e.key === 'ArrowLeft' && currentYearIndex > 0) {\n        currentYearIndex--;\n        updateChart(currentYearIndex);\n      } else if (\n        e.key === 'ArrowRight' &&\n        currentYearIndex < years.length - 1\n      ) {\n        currentYearIndex++;\n        updateChart(currentYearIndex);\n      }\n    });\n\n    // Initialize button state\n    updateChart(currentYearIndex);\n  }, 500);\n});\n",paraId:27,tocIndex:10},{value:"Line Chart",paraId:28,tocIndex:11},{value:"Parallel coordinates are used to show relationships between multi-dimensional data, where each axis represents a different dimension, and there are no causal relationships between axis",paraId:29,tocIndex:12},{value:"Line charts are used to show data trends over time or other continuous variables, where the horizontal axis usually represents time series",paraId:29,tocIndex:12},{value:"The axis in parallel coordinates can be rearranged in any order, while the horizontal axis order in line charts is usually fixed",paraId:29,tocIndex:12},{value:"Each line in parallel coordinates represents multiple dimension values of one data record, while each line in line charts represents one indicator changing over time",paraId:29,tocIndex:12},{value:"Sankey Diagram",paraId:30,tocIndex:12},{value:"Parallel coordinates show relationships between multi-dimensional data, where each line represents multiple dimension values of one data record",paraId:31,tocIndex:13},{value:"Sankey diagrams show the distribution and flow of quantities between different nodes, where line width represents flow magnitude",paraId:31,tocIndex:13},{value:"Axis in parallel coordinates represent different dimensions without the concept of flow",paraId:31,tocIndex:13},{value:"Nodes in Sankey diagrams have clear flow relationships, typically used to show resource, energy, or other flow processes",paraId:31,tocIndex:13},{value:"Radar Chart",paraId:32,tocIndex:13},{value:"Parallel coordinates use parallel axis to display multi-dimensional data, suitable for comparing different records",paraId:33,tocIndex:14},{value:"Radar charts use radial axis to display multi-dimensional data, suitable for showing multi-dimensional characteristics of a single record",paraId:33,tocIndex:14}]},78869:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(55042);const t=[{value:"A pie chart is a circular statistical chart that represents data as sectors of a circle, used to display the proportional relationship of different categories within a total. Each sector's angle is proportional to the value it represents, and the entire pie represents the sum of the data.",paraId:0,tocIndex:0},{value:"Pie charts are particularly suitable for displaying the proportional relationships of categorical data, intuitively showing the relative importance of each part within the whole. By using different colored sectors to distinguish categories, comparing the proportions of different categories becomes simple and intuitive.",paraId:1,tocIndex:0},{value:'When there are fewer categories (typically no more than 5-7) and emphasis on the relationship between parts and the whole is needed, pie charts are an excellent choice. For cases with many categories, consider merging smaller proportions into an "Others" category.',paraId:2,tocIndex:0},{value:"Other Names",paraId:3,tocIndex:0},{value:": Pie Chart",paraId:3,tocIndex:0},{value:"Chart Type",paraId:4,tocIndex:2},{value:"Basic Pie Chart",paraId:4,tocIndex:2},{value:"Suitable Data",paraId:4,tocIndex:2},{value:"Categorical data: one categorical data field, one continuous data field",paraId:4,tocIndex:2},{value:"Function",paraId:4,tocIndex:2},{value:"Display the proportional relationship of each category within the total",paraId:4,tocIndex:2},{value:"Data-to-Graphics Mapping",paraId:4,tocIndex:2},{value:"Category field maps to sector color and labels",paraId:4,tocIndex:2},{value:"Value field maps to sector angle size",paraId:4,tocIndex:2},{value:"The entire circle represents the data total",paraId:4,tocIndex:2},{value:"Suitable Scenarios",paraId:4,tocIndex:2},{value:"Proportion display with fewer categories (within 5-7)",paraId:4,tocIndex:2},{value:"Example 1: ",paraId:5,tocIndex:4},{value:"Display market share distribution",paraId:5,tocIndex:4},{value:"The following chart shows the market share proportions of different browsers, clearly displaying the relative position of each browser in the market.",paraId:6,tocIndex:4},{value:"browser",paraId:7,tocIndex:4},{value:"value (market share)",paraId:7,tocIndex:4},{value:"Chrome",paraId:7,tocIndex:4},{value:"61.04",paraId:7,tocIndex:4},{value:"Safari",paraId:7,tocIndex:4},{value:"15.12",paraId:7,tocIndex:4},{value:"Edge",paraId:7,tocIndex:4},{value:"10.52",paraId:7,tocIndex:4},{value:"Firefox",paraId:7,tocIndex:4},{value:"7.19",paraId:7,tocIndex:4},{value:"Samsung Internet",paraId:7,tocIndex:4},{value:"2.98",paraId:7,tocIndex:4},{value:"Opera",paraId:7,tocIndex:4},{value:"3.15",paraId:7,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { browser: 'Chrome', value: 61.04 },\n    { browser: 'Safari', value: 15.12 },\n    { browser: 'Edge', value: 10.52 },\n    { browser: 'Firefox', value: 7.19 },\n    { browser: 'Samsung Internet', value: 2.98 },\n    { browser: 'Opera', value: 3.15 },\n  ],\n  encode: {\n    y: 'value',\n    color: 'browser',\n  },\n  transform: [{ type: 'stackY' }],\n  coordinate: { type: 'theta' },\n  legend: {\n    color: {\n      position: 'right',\n      rowPadding: 5,\n    },\n  },\n});\n\nchart.render();\n",paraId:8,tocIndex:4},{value:"Explanation",paraId:9,tocIndex:4},{value:":",paraId:9,tocIndex:4},{value:"The ",paraId:10,tocIndex:4},{value:"browser",paraId:10,tocIndex:4},{value:" field maps to color, distinguishing different browsers",paraId:10,tocIndex:4},{value:"The ",paraId:10,tocIndex:4},{value:"value",paraId:10,tocIndex:4},{value:" field maps to angle size, representing market share",paraId:10,tocIndex:4},{value:"Use ",paraId:10,tocIndex:4},{value:"coordinate: { type: 'theta' }",paraId:10,tocIndex:4},{value:" to convert bar chart to pie chart",paraId:10,tocIndex:4},{value:"Use ",paraId:10,tocIndex:4},{value:"transform: [{ type: 'stackY' }]",paraId:10,tocIndex:4},{value:" to stack data",paraId:10,tocIndex:4},{value:"Example 2: ",paraId:11,tocIndex:4},{value:"Display budget allocation",paraId:11,tocIndex:4},{value:"Pie charts are very suitable for displaying budget, expenditure, and other resource allocation situations, allowing people to see the resource proportion of each project at a glance.",paraId:12,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { category: 'R&D', value: 35 },\n    { category: 'Marketing', value: 25 },\n    { category: 'Sales', value: 20 },\n    { category: 'Operations', value: 15 },\n    { category: 'Others', value: 5 },\n  ],\n  encode: {\n    y: 'value',\n    color: 'category',\n  },\n  transform: [{ type: 'stackY' }],\n  coordinate: { type: 'theta', outerRadius: 0.8 },\n  scale: {\n    color: {\n      palette: 'category10',\n    },\n  },\n  legend: {\n    color: {\n      position: 'right',\n      rowPadding: 5,\n    },\n  },\n  labels: [\n    {\n      text: (d) => `${d.category}: ${d.value}%`,\n      position: 'outside',\n      connector: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:13,tocIndex:4},{value:"Explanation",paraId:14,tocIndex:4},{value:":",paraId:14,tocIndex:4},{value:"Use external labels to display category names and percentages",paraId:15,tocIndex:4},{value:"connector: true",paraId:15,tocIndex:4},{value:" adds label connection lines",paraId:15,tocIndex:4},{value:"outerRadius: 0.8",paraId:15,tocIndex:4},{value:" adjusts pie chart size to leave space for labels",paraId:15,tocIndex:4},{value:"Example 1: ",paraId:16,tocIndex:5},{value:"Not suitable when there are too many categories",paraId:16,tocIndex:5},{value:"When the number of categories exceeds 7, pie charts become difficult to read and compare. The chart below shows the population proportion of various provinces. Due to the excessive number of categories, it's difficult to clearly compare the population data proportions of each province.",paraId:17,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { province: 'Beijing', population: 19612368 },\n    { province: 'Tianjin', population: 12938693 },\n    { province: 'Hebei', population: 71854210 },\n    { province: 'Shanxi', population: 27500000 },\n    { province: 'Inner Mongolia', population: 24706291 },\n    { province: 'Liaoning', population: 43746323 },\n    { province: 'Jilin', population: 27452815 },\n    { province: 'Heilongjiang', population: 38313991 },\n    { province: 'Shanghai', population: 23019196 },\n    { province: 'Jiangsu', population: 78660941 },\n    { province: 'Zhejiang', population: 54426891 },\n    { province: 'Anhui', population: 59500468 },\n    { province: 'Fujian', population: 36894217 },\n    { province: 'Jiangxi', population: 44567797 },\n    { province: 'Shandong', population: 95792719 },\n    { province: 'Henan', population: 94029939 },\n    { province: 'Hubei', population: 57237727 },\n    { province: 'Hunan', population: 65700762 },\n    { province: 'Guangdong', population: 104320459 },\n    { province: 'Guangxi', population: 46023761 },\n    { province: 'Hainan', population: 8671485 },\n    { province: 'Chongqing', population: 28846170 },\n    { province: 'Sichuan', population: 80417528 },\n    { province: 'Guizhou', population: 34748556 },\n    { province: 'Yunnan', population: 45966766 },\n    { province: 'Tibet', population: 3002165 },\n    { province: 'Shaanxi', population: 37327379 },\n    { province: 'Gansu', population: 25575263 },\n    { province: 'Qinghai', population: 5626723 },\n  ],\n  encode: {\n    y: 'population',\n    color: 'province',\n  },\n  transform: [{ type: 'stackY' }],\n  coordinate: { type: 'theta' },\n});\n\nchart.render();\n",paraId:18,tocIndex:5},{value:"Explanation",paraId:19,tocIndex:5},{value:": In such cases, we recommend using ",paraId:19,tocIndex:5},{value:"bar charts",paraId:20,tocIndex:5},{value:".",paraId:19,tocIndex:5},{value:"Example 2: ",paraId:21,tocIndex:5},{value:"Not suitable when category proportions are similar",paraId:21,tocIndex:5},{value:"In the chart below, different game genres have similar sales volumes with very small angular differences, making it difficult to visually distinguish size relationships quickly.",paraId:22,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { genre: 'Sports', sold: 15000 },\n    { genre: 'Strategy', sold: 14900 },\n    { genre: 'Action', sold: 15050 },\n    { genre: 'Shooter', sold: 13000 },\n    { genre: 'Other', sold: 13900 },\n  ],\n  encode: {\n    y: 'sold',\n    color: 'genre',\n  },\n  transform: [{ type: 'stackY' }],\n  coordinate: { type: 'theta', outerRadius: 0.8 },\n  legend: {\n    color: {\n      position: 'bottom',\n      layout: { justifyContent: 'center' },\n    },\n  },\n  labels: [\n    {\n      text: (d, i, data) => {\n        const total = data.reduce((acc, curr) => acc + curr.sold, 0);\n        const percent = ((d.sold / total) * 100).toFixed(2);\n        return `${percent}%`;\n      },\n      style: {\n        fontSize: 10,\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:23,tocIndex:5},{value:"Explanation",paraId:24,tocIndex:5},{value:": In the chart above, each category accounts for around 20% with very small differences, making it unsuitable for pie charts. In this case, ",paraId:24,tocIndex:5},{value:"bar charts",paraId:25,tocIndex:5},{value:" would be more appropriate.",paraId:24,tocIndex:5},{value:"Rose charts use the radius rather than the angle of sectors to represent values, suitable for displaying categorical data with large value differences.",paraId:26,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { month: 'Jan', value: 120 },\n    { month: 'Feb', value: 200 },\n    { month: 'Mar', value: 150 },\n    { month: 'Apr', value: 80 },\n    { month: 'May', value: 70 },\n    { month: 'Jun', value: 110 },\n    { month: 'Jul', value: 130 },\n    { month: 'Aug', value: 80 },\n    { month: 'Sep', value: 140 },\n    { month: 'Oct', value: 160 },\n    { month: 'Nov', value: 180 },\n    { month: 'Dec', value: 190 },\n  ],\n  encode: {\n    x: 'month',\n    y: 'value',\n    color: 'month',\n  },\n  coordinate: { type: 'polar' },\n  scale: {\n    x: { padding: 0 },\n    color: {\n      palette: 'rainbow',\n    },\n  },\n  axis: {\n    x: { grid: true },\n    y: { tickCount: 5, grid: true },\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:27,tocIndex:7},{value:"Explanation",paraId:28,tocIndex:7},{value:":",paraId:28,tocIndex:7},{value:"Use ",paraId:29,tocIndex:7},{value:"coordinate: { type: 'polar' }",paraId:29,tocIndex:7},{value:" to create polar coordinate system",paraId:29,tocIndex:7},{value:"Values map to radius, months map to angle",paraId:29,tocIndex:7},{value:"Suitable for displaying periodic data or cases with large value differences",paraId:29,tocIndex:7},{value:"Radial jitter scatter plots map traditional pie chart data to points in a polar coordinate system, adding radial jitter to avoid overlapping, suitable for displaying the distribution of categorical data.",paraId:30,tocIndex:8},{value:'import { Chart } from "@antv/g2";\n\nconst chart = new Chart({ container: "container" });\n\nchart.options({\n  type: "point",\n  autoFit: true,\n  data: {\n    type: "fetch",\n    value: "https://gw.alipayobjects.com/os/antvdemo/assets/data/diamond.json",\n  },\n  encode: { x: "clarity", color: "clarity" },\n  transform: [{ type: "jitter" }],\n  coordinate: { type: "polar" },\n  legend: false,\n});\n\nchart.render();\n\n',paraId:31,tocIndex:8},{value:"Explanation",paraId:32,tocIndex:8},{value:":",paraId:32,tocIndex:8},{value:"Data points are distributed by angle within a circular area, simulating pie chart sector distribution",paraId:33,tocIndex:8},{value:"Radial jitter (random offset) is added to avoid data point overlapping",paraId:33,tocIndex:8},{value:"Point size maps to value size, color distinguishes categories",paraId:33,tocIndex:8},{value:"Suitable for displaying spatial distribution and numerical relationships of categorical data",paraId:33,tocIndex:8},{value:"Donut Charts",paraId:34,tocIndex:9},{value:"Pie charts are the most basic form, suitable for simple proportion displays",paraId:35,tocIndex:10},{value:"Donut charts can display additional information in the center, utilizing space more efficiently",paraId:35,tocIndex:10},{value:"Rose Charts",paraId:36,tocIndex:10},{value:"Pie charts display static proportion relationships, suitable for data snapshots at a certain time",paraId:37,tocIndex:11},{value:"Rose charts are suitable for displaying the distribution of categorical data, especially when there are many categories",paraId:37,tocIndex:11}]},48417:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(6423);const t=[{value:"Radar chart, also known as spider chart or web chart, is traditionally considered a chart for displaying multi-dimensional (4+ dimensions) data. It maps multiple dimensions of data onto coordinate axis that start from the same center point and typically end at the circumference. Connecting points of the same group with lines forms the radar chart. While it can display multi-dimensional data, the relative positions of points and angles between axis carry no informational value. With proper axis settings, the area enclosed by the radar chart can convey some information.",paraId:0,tocIndex:0},{value:"Each dimension's data corresponds to a coordinate axis. These axis share the same center point, are equally spaced radially, and have identical scales. Grid lines connecting the axis serve mainly as auxiliary elements. Connecting data points on each axis forms a polygon. The combination of axis, points, lines, and polygons constitutes a radar chart.",paraId:1,tocIndex:0},{value:"It's important to emphasize that although each axis represents a different dimension, for easier understanding and uniform comparison, radar charts often artificially unify all axis to a single metric (e.g., scores or percentages). This effectively reduces the chart to two dimensions, and this simplified version is more commonly used in daily life. Additionally, radar charts can effectively display the relative weights of variables in a dataset, making them particularly suitable for performance data visualization.",paraId:2,tocIndex:0},{value:"Main disadvantages of radar charts:",paraId:3,tocIndex:0},{value:"Too many polygons can reduce readability and make the chart overly cluttered, especially when polygons are color-filled and overlap.",paraId:4,tocIndex:0},{value:"Too many variables can also decrease readability since each variable requires its own axis, making the chart appear complex. Best practice is to limit the number of variables to keep the radar chart simple and clear.",paraId:5,tocIndex:0},{value:"Notes:",paraId:6,tocIndex:0},{value:"For simplicity and alignment with current usage, we'll focus on the simplified two-dimensional version.",paraId:7,tocIndex:0},{value:"Radar charts are best for comparing similar charts (radar-to-radar comparisons).",paraId:7,tocIndex:0},{value:"Other Names",paraId:8,tocIndex:0},{value:": Spider Chart, Web Chart, Polar Chart, Star Plots",paraId:8,tocIndex:0},{value:"Chart Type",paraId:9,tocIndex:2},{value:"Single-Series Radar Chart",paraId:9,tocIndex:2},{value:"Suitable Data",paraId:9,tocIndex:2},{value:"One categorical field, one continuous field",paraId:9,tocIndex:2},{value:"Function",paraId:9,tocIndex:2},{value:"Compare numerical values across categories",paraId:9,tocIndex:2},{value:"Data Mapping",paraId:9,tocIndex:2},{value:"Categorical field maps to angular position in polar coordinates; continuous field maps to radial length",paraId:9,tocIndex:2},{value:"Recommended Data Count",paraId:9,tocIndex:2},{value:"No more than 30 items",paraId:9,tocIndex:2},{value:"Chart Type",paraId:10,tocIndex:3},{value:"Multi-Series Radar Chart",paraId:10,tocIndex:3},{value:"Suitable Data",paraId:10,tocIndex:3},{value:"One continuous field, two categorical fields",paraId:10,tocIndex:3},{value:"Function",paraId:10,tocIndex:3},{value:"Compare numerical values across different categories",paraId:10,tocIndex:3},{value:"Data Mapping",paraId:10,tocIndex:3},{value:"One categorical field maps to angular position; another maps to color; continuous field maps to radial length",paraId:10,tocIndex:3},{value:"Recommended Data Count",paraId:10,tocIndex:3},{value:"No more than 30 items",paraId:10,tocIndex:3},{value:"Example 1: ",paraId:11,tocIndex:5},{value:"Multi-dimensional Data Comparison",paraId:11,tocIndex:5},{value:"Below is a radar chart evaluating personal comprehensive abilities.",paraId:12,tocIndex:5},{value:"Ability",paraId:13,tocIndex:5},{value:"Score (Max 10)",paraId:13,tocIndex:5},{value:"Language",paraId:13,tocIndex:5},{value:"8.8",paraId:13,tocIndex:5},{value:"Logic",paraId:13,tocIndex:5},{value:"9.0",paraId:13,tocIndex:5},{value:"Affinity",paraId:13,tocIndex:5},{value:"7.2",paraId:13,tocIndex:5},{value:"Sports",paraId:13,tocIndex:5},{value:"4.5",paraId:13,tocIndex:5},{value:"Learning",paraId:13,tocIndex:5},{value:"8.3",paraId:13,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'area',\n  coordinate: {\n    type: 'polar',\n  },\n  autoFit: true,\n  data: [\n    { ability: 'Language', score: 8.8 },\n    { ability: 'Logic', score: 9.0 },\n    { ability: 'Affinity', score: 7.2 },\n    { ability: 'Sports', score: 4.5 },\n    { ability: 'Learning', score: 8.3 },\n  ],\n  encode: { x: 'ability', y: 'score' },\n  scale: {\n    x: { padding: 0.5, align: 0 },\n    y: {\n      domainMin: 0,\n      domainMax: 10,\n      tickCount: 5,\n      label: false,\n    },\n  },\n  style: {\n    fillOpacity: 0.5,\n    lineWidth: 2,\n  },\n  axis: {\n    x: { grid: true },\n    y: { tick: false, grid: true, title: false, zIndex: 1 },\n  },\n  interaction: {\n    tooltip: { crosshairsLineDash: [4, 4] },\n  },\n});\n\nchart.render();\n",paraId:14,tocIndex:5},{value:"Explanation",paraId:15,tocIndex:5},{value:":",paraId:15,tocIndex:5},{value:"ability",paraId:16,tocIndex:5},{value:" field maps to angular position in polar coordinates",paraId:16,tocIndex:5},{value:"score",paraId:16,tocIndex:5},{value:" field maps to radial length",paraId:16,tocIndex:5},{value:"Example 2: ",paraId:17,tocIndex:5},{value:"Performance Comparison Across Multiple Dimensions",paraId:17,tocIndex:5},{value:"This radar chart compares Huawei Mate and ZTE Grand Memo smartphones across five dimensions (sample data).",paraId:18,tocIndex:5},{value:"Performance",paraId:19,tocIndex:5},{value:"Type",paraId:19,tocIndex:5},{value:"Score (Max 100)",paraId:19,tocIndex:5},{value:"Usability",paraId:19,tocIndex:5},{value:"Huawei Mate",paraId:19,tocIndex:5},{value:"80",paraId:19,tocIndex:5},{value:"Features",paraId:19,tocIndex:5},{value:"Huawei Mate",paraId:19,tocIndex:5},{value:"90",paraId:19,tocIndex:5},{value:"Camera",paraId:19,tocIndex:5},{value:"Huawei Mate",paraId:19,tocIndex:5},{value:"80",paraId:19,tocIndex:5},{value:"Benchmark",paraId:19,tocIndex:5},{value:"Huawei Mate",paraId:19,tocIndex:5},{value:"70",paraId:19,tocIndex:5},{value:"Battery",paraId:19,tocIndex:5},{value:"Huawei Mate",paraId:19,tocIndex:5},{value:"90",paraId:19,tocIndex:5},{value:"Usability",paraId:19,tocIndex:5},{value:"ZTE Grand Memo",paraId:19,tocIndex:5},{value:"70",paraId:19,tocIndex:5},{value:"Features",paraId:19,tocIndex:5},{value:"ZTE Grand Memo",paraId:19,tocIndex:5},{value:"82",paraId:19,tocIndex:5},{value:"Camera",paraId:19,tocIndex:5},{value:"ZTE Grand Memo",paraId:19,tocIndex:5},{value:"81",paraId:19,tocIndex:5},{value:"Benchmark",paraId:19,tocIndex:5},{value:"ZTE Grand Memo",paraId:19,tocIndex:5},{value:"82",paraId:19,tocIndex:5},{value:"Battery",paraId:19,tocIndex:5},{value:"ZTE Grand Memo",paraId:19,tocIndex:5},{value:"78",paraId:19,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  coordinate: {\n    type: 'polar',\n  },\n  autoFit: true,\n  data: [\n    { performance: 'Usability', type: 'Huawei Mate', score: 80 },\n    { performance: 'Features', type: 'Huawei Mate', score: 90 },\n    { performance: 'Camera', type: 'Huawei Mate', score: 80 },\n    { performance: 'Benchmark', type: 'Huawei Mate', score: 70 },\n    { performance: 'Battery', type: 'Huawei Mate', score: 90 },\n    { performance: 'Usability', type: 'ZTE Grand Memo', score: 70 },\n    { performance: 'Features', type: 'ZTE Grand Memo', score: 82 },\n    { performance: 'Camera', type: 'ZTE Grand Memo', score: 81 },\n    { performance: 'Benchmark', type: 'ZTE Grand Memo', score: 82 },\n    { performance: 'Battery', type: 'ZTE Grand Memo', score: 78 },\n  ],\n  encode: { x: 'performance', y: 'score', color: 'type' },\n  scale: {\n    x: { padding: 0.5, align: 0 },\n    y: {\n      domainMin: 0,\n      domainMax: 100,\n      tickCount: 5,\n      label: false,\n    },\n  },\n  style: {\n    fillOpacity: 0.5,\n    lineWidth: 2,\n  },\n  axis: {\n    x: { grid: true, tick: false, gridLineDash: [0, 0] },\n    y: {\n      tick: false,\n      grid: true,\n      title: false,\n      zIndex: 1,\n      gridLineDash: [0, 0],\n      gridAreaFill: (dataum, index, data) => {\n        return index % 2 === 1 ? 'rgba(0, 0, 0, 0.04)' : '';\n      },\n    },\n  },\n  interaction: {\n    tooltip: { crosshairsLineDash: [4, 4] },\n  },\n});\n\nchart.render();\n",paraId:20,tocIndex:5},{value:"Explanation",paraId:21,tocIndex:5},{value:":",paraId:21,tocIndex:5},{value:"performance",paraId:22,tocIndex:5},{value:" maps to angular position",paraId:22,tocIndex:5},{value:"type",paraId:22,tocIndex:5},{value:" maps to color differentiation",paraId:22,tocIndex:5},{value:"score",paraId:22,tocIndex:5},{value:" maps to radial length",paraId:22,tocIndex:5},{value:"Pie Chart",paraId:23,tocIndex:6},{value:"Radar charts compare data (size/values) across multiple dimensions",paraId:24,tocIndex:7},{value:"Pie charts show proportions between categories",paraId:24,tocIndex:7},{value:"Rose charts compare data through distribution angles, lengths, and color density, showing parts-to-whole relationships",paraId:25,tocIndex:8},{value:"Radar charts compare data through edge/arc length from center, suitable for comparing categories across multiple dimensions",paraId:25,tocIndex:8}]},98965:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(69712);const t=[{value:"The Radial Bar Chart (also known as Circular Bar Chart) is an affine transformation of a bar chart from Cartesian coordinate system to polar coordinate system. Its meaning and usage are similar to ",paraId:0,tocIndex:0},{value:"Bar Charts",paraId:1,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:"The Radial Bar Chart has a ",paraId:2,tocIndex:0},{value:"radius feedback effect",paraId:2,tocIndex:0},{value:". Since the radial bar chart uses ",paraId:2,tocIndex:0},{value:"angle",paraId:2,tocIndex:0},{value:" to represent the size of each ring's value, the angle is the determining factor. So, even if the value of the outer ring (larger radius) is smaller than the inner ring (smaller radius), each outer ring will appear relatively longer than the inner rings. This can cause visual misunderstanding.",paraId:2,tocIndex:0},{value:"Moreover, because our visual system is better at comparing straight lines, the Cartesian coordinate system is more suitable for comparing the numerical values of different categories. Therefore, from a ",paraId:3,tocIndex:0},{value:"practical",paraId:3,tocIndex:0},{value:" perspective, radial bar charts are more of an ",paraId:3,tocIndex:0},{value:"aesthetic",paraId:3,tocIndex:0},{value:" need.",paraId:3,tocIndex:0},{value:"Other Names",paraId:4,tocIndex:0},{value:": Circular Bar Chart",paraId:4,tocIndex:0},{value:"Chart Type",paraId:5,tocIndex:1},{value:"Radial Bar Chart",paraId:5,tocIndex:1},{value:"Suitable Data",paraId:5,tocIndex:1},{value:"List: one categorical data field, one continuous data field",paraId:5,tocIndex:1},{value:"Function",paraId:5,tocIndex:1},{value:"Display comparison of categorical data values in an aesthetic way",paraId:5,tocIndex:1},{value:"Data-Visual Mapping",paraId:5,tocIndex:1},{value:"Category field maps to circular position",paraId:5,tocIndex:1},{value:"Value field maps to arc length (angle)",paraId:5,tocIndex:1},{value:"Colors can distinguish different categories",paraId:5,tocIndex:1},{value:"Suitable Data Volume",paraId:5,tocIndex:1},{value:"No more than 15 data points",paraId:5,tocIndex:1},{value:"A complete radial bar chart contains the following elements:",paraId:6,tocIndex:1},{value:"Rings",paraId:7,tocIndex:1},{value:": Angle represents values",paraId:7,tocIndex:1},{value:"Text",paraId:7,tocIndex:1},{value:": Values and category names",paraId:7,tocIndex:1},{value:"Example 1: ",paraId:8,tocIndex:3},{value:"Displaying categorical data comparison (requires sorting)",paraId:8,tocIndex:3},{value:"The chart below shows the level of American public concern about different areas of US-China issues.",paraId:9,tocIndex:3},{value:"Issue",paraId:10,tocIndex:3},{value:"Attention Rate",paraId:10,tocIndex:3},{value:"Taiwan Relations",paraId:10,tocIndex:3},{value:"0.21",paraId:10,tocIndex:3},{value:"China's Growing Military Power",paraId:10,tocIndex:3},{value:"0.47",paraId:10,tocIndex:3},{value:"China's Impact on Global Environment",paraId:10,tocIndex:3},{value:"0.49",paraId:10,tocIndex:3},{value:"US Trade Deficit with China",paraId:10,tocIndex:3},{value:"0.52",paraId:10,tocIndex:3},{value:"China's Human Rights Policy",paraId:10,tocIndex:3},{value:"0.53",paraId:10,tocIndex:3},{value:"Cyber Attacks from China",paraId:10,tocIndex:3},{value:"0.54",paraId:10,tocIndex:3},{value:"China Taking Away American Jobs",paraId:10,tocIndex:3},{value:"0.60",paraId:10,tocIndex:3},{value:"China Holding US Massive Debt",paraId:10,tocIndex:3},{value:"0.67",paraId:10,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  width: 1000,\n  height: 700,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { question: 'Taiwan Relations', percent: 0.21, odd: 0 },\n    { question: \"China's Growing Military Power\", percent: 0.47, odd: 1 },\n    { question: \"China's Impact on Global Environment\", percent: 0.49, odd: 0 },\n    { question: 'US Trade Deficit with China', percent: 0.52, odd: 1 },\n    { question: \"China's Human Rights Policy\", percent: 0.53, odd: 0 },\n    { question: 'Cyber Attacks from China', percent: 0.54, odd: 1 },\n    { question: 'China Taking Away American Jobs', percent: 0.6, odd: 0 },\n    { question: 'China Holding US Massive Debt', percent: 0.67, odd: 1 },\n  ],\n  coordinate: { type: 'radial', innerRadius: 0.2 },\n  encode: {\n    x: 'question',\n    y: 'percent',\n    color: 'odd',\n  },\n  scale: {\n    color: {\n      range: ['rgb(211,0,57)', 'rgb(224,74,116)'],\n    },\n    y: { domain: [0, 1] },\n  },\n  style: {\n    radiusTopLeft: 4,\n    radiusTopRight: 4,\n  },\n  label: {\n    text: 'percent',\n    position: 'inside',\n    style: {\n      fontWeight: 'bold',\n      fill: 'white',\n    },\n  },\n  axis: {\n    x: {\n      label: {\n        autoRotate: true,\n        autoEllipsis: true,\n        style: {\n          fontSize: 10,\n        },\n      },\n    },\n    y: {\n      label: false,\n      grid: false,\n    },\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:11,tocIndex:3},{value:"Example 2: ",paraId:12,tocIndex:3},{value:"Displaying country data comparison",paraId:12,tocIndex:3},{value:"The chart below shows the percentage of people in each country who think climate change is a serious problem.",paraId:13,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  width: 1200,\n  height: 800,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { country: 'China', percent: 0.18, condition: 'Special' },\n    { country: 'Russia', percent: 0.33, condition: 'Normal' },\n    { country: 'UK', percent: 0.41, condition: 'Normal' },\n    { country: 'USA', percent: 0.45, condition: 'Normal' },\n    { country: 'South Korea', percent: 0.48, condition: 'Normal' },\n    { country: 'Canada', percent: 0.51, condition: 'Normal' },\n    { country: 'Germany', percent: 0.55, condition: 'Normal' },\n    { country: 'Vietnam', percent: 0.69, condition: 'Normal' },\n    { country: 'Brazil', percent: 0.86, condition: 'Normal' },\n  ],\n  coordinate: {\n    type: 'radial',\n    innerRadius: 0.3,\n    startAngle: -Math.PI,\n    endAngle: -0.25 * Math.PI,\n  },\n  encode: {\n    x: 'country',\n    y: 'percent',\n    color: 'condition',\n  },\n  scale: {\n    color: {\n      range: ['#2370AE', '#A34265', '#505051'],\n    },\n  },\n  style: {\n    radiusTopLeft: 2,\n    radiusTopRight: 2,\n  },\n  label: {\n    text: 'percent',\n    position: 'inside',\n    style: {\n      fontWeight: 'bold',\n      fill: 'white',\n      fontSize: 10,\n    },\n  },\n  axis: {\n    x: {\n      label: {\n        autoRotate: true,\n        autoEllipsis: true,\n        style: {\n          fontSize: 12,\n        },\n      },\n    },\n    y: {\n      label: false,\n      grid: false,\n    },\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:14,tocIndex:3},{value:"Example 1: ",paraId:15,tocIndex:4},{value:"Unsorted data can be misleading",paraId:15,tocIndex:4},{value:"As mentioned in the introduction, radial bar charts have a radius feedback effect. Visually, rings with larger radius will appear bigger, while those with smaller radius appear smaller. This can cause misuse of radial bar charts. Therefore, we believe that radial bar charts must be ",paraId:16,tocIndex:4},{value:"sorted",paraId:16,tocIndex:4},{value:" when used.",paraId:16,tocIndex:4},{value:"The following shows a comparison between incorrect and correct usage:",paraId:17,tocIndex:4},{value:"Incorrect Example (Unsorted):",paraId:18,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  width: 1000,\n  height: 700,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { country: 'Brazil', percent: 0.86, condition: 'Normal' },\n    { country: 'Vietnam', percent: 0.69, condition: 'Normal' },\n    { country: 'Germany', percent: 0.55, condition: 'Normal' },\n    { country: 'Canada', percent: 0.51, condition: 'Normal' },\n    { country: 'South Korea', percent: 0.48, condition: 'Normal' },\n    { country: 'USA', percent: 0.45, condition: 'Normal' },\n    { country: 'UK', percent: 0.41, condition: 'Normal' },\n    { country: 'Russia', percent: 0.33, condition: 'Normal' },\n    { country: 'China', percent: 0.18, condition: 'Special' },\n  ],\n  coordinate: {\n    type: 'radial',\n    innerRadius: 0.2,\n    startAngle: -Math.PI,\n    endAngle: -0.25 * Math.PI,\n  },\n  encode: {\n    x: 'country',\n    y: 'percent',\n    color: 'condition',\n  },\n  scale: {\n    color: {\n      range: ['#2370AE', '#A34265', '#505051'],\n    },\n  },\n  style: {\n    radiusTopLeft: 2,\n    radiusTopRight: 2,\n  },\n  axis: {\n    x: {\n      label: {\n        autoRotate: true,\n        autoEllipsis: true,\n        style: {\n          fontSize: 10,\n        },\n      },\n    },\n    y: {\n      label: false,\n      grid: false,\n    },\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:19,tocIndex:4},{value:"In the incorrect example above, due to unsorted data, the outer ring Brazil (0.86) will visually appear much larger than the inner ring China (0.18), but this visual difference will be further amplified by the radius effect, causing misleading interpretations.",paraId:20,tocIndex:4},{value:"You can use colors or grouping to display multi-dimensional data comparisons:",paraId:21,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  width: 1000,\n  height: 700,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { category: 'Product A', value: 85, quarter: 'Q1' },\n    { category: 'Product B', value: 75, quarter: 'Q1' },\n    { category: 'Product C', value: 65, quarter: 'Q1' },\n    { category: 'Product D', value: 55, quarter: 'Q1' },\n    { category: 'Product E', value: 45, quarter: 'Q1' },\n  ],\n  coordinate: { type: 'radial', innerRadius: 0.2 },\n  encode: {\n    x: 'category',\n    y: 'value',\n    color: 'category',\n  },\n  scale: {\n    y: { domain: [0, 100] },\n  },\n  style: {\n    radiusTopLeft: 8,\n    radiusTopRight: 8,\n  },\n  label: {\n    text: 'value',\n    position: 'inside',\n    style: {\n      fontWeight: 'bold',\n      fill: 'white',\n    },\n  },\n  axis: {\n    x: {\n      label: {\n        autoRotate: true,\n        autoEllipsis: true,\n        style: {\n          fontSize: 10,\n        },\n      },\n    },\n    y: {\n      label: false,\n      grid: false,\n    },\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:22,tocIndex:6},{value:"Bar Charts",paraId:23,tocIndex:7},{value:"Radial Bar Charts",paraId:24,tocIndex:8},{value:": Use polar coordinate system, represent values through arc length, more visually appealing, but have radius feedback effect with lower accuracy in data comparison",paraId:24,tocIndex:8},{value:"Bar Charts",paraId:24,tocIndex:8},{value:": Use Cartesian coordinate system, represent values through rectangle length, more accurate and intuitive for data comparison",paraId:24,tocIndex:8},{value:"Line Charts",paraId:25,tocIndex:8},{value:"Pie Charts",paraId:26,tocIndex:8},{value:"Radial Bar Charts",paraId:27,tocIndex:9},{value:": Display absolute values of different categories",paraId:27,tocIndex:9},{value:"Pie Charts",paraId:27,tocIndex:9},{value:": Display proportional relationships of categories within the total",paraId:27,tocIndex:9},{value:"Line Charts",paraId:27,tocIndex:9},{value:": Display trends and changes over time or continuous variables",paraId:27,tocIndex:9},{value:"Radial Bar Charts",paraId:28,tocIndex:10},{value:": Focus on single-dimension numerical comparison of categories",paraId:28,tocIndex:10},{value:"Nightingale Charts",paraId:28,tocIndex:10},{value:": Display comprehensive performance across multiple dimensions",paraId:28,tocIndex:10}]},81764:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(64820);const t=[{value:"A regression curve chart is a statistical chart that adds regression curves on top of scatter plots to show mathematical relationships between two or more variables and predict trends. Regression curves use mathematical algorithms to fit data points, finding the best functional relationship between variables, helping analyze the inherent patterns in data and make trend predictions.",paraId:0,tocIndex:0},{value:"Regression curve charts combine the data distribution display capability of ",paraId:1,tocIndex:0},{value:"scatter plots",paraId:2,tocIndex:0},{value:" with the predictive functionality of mathematical modeling. They not only intuitively show the distribution of data points but also reveal potential relationships between variables through fitted curves, making them an important tool in data analysis and scientific research.",paraId:1,tocIndex:0},{value:"Common regression types include linear regression, polynomial regression, exponential regression, logarithmic regression, etc. Different regression methods are suitable for different data patterns and relationship types.",paraId:3,tocIndex:0},{value:"English Name",paraId:4,tocIndex:0},{value:": Regression Curve Chart",paraId:4,tocIndex:0},{value:"Chart Type",paraId:5,tocIndex:1},{value:"Regression Curve Chart",paraId:5,tocIndex:1},{value:"Suitable Data",paraId:5,tocIndex:1},{value:"Two continuous data fields: one independent variable field, one dependent variable field",paraId:5,tocIndex:1},{value:"Function",paraId:5,tocIndex:1},{value:"Display mathematical relationships between variables, identify data trends, perform predictive analysis",paraId:5,tocIndex:1},{value:"Data-Graphics Mapping",paraId:5,tocIndex:1},{value:"Independent variable field maps to horizontal axis position",paraId:5,tocIndex:1},{value:"Dependent variable field maps to vertical axis position",paraId:5,tocIndex:1},{value:"Data points show original observations",paraId:5,tocIndex:1},{value:"Regression curve shows fitted mathematical relationship",paraId:5,tocIndex:1},{value:"Suitable Data Amount",paraId:5,tocIndex:1},{value:"10-1000 data points, enough data points are needed for effective regression analysis",paraId:5,tocIndex:1},{value:"Components:",paraId:6,tocIndex:1},{value:"Scatter Points",paraId:7,tocIndex:1},{value:": Points representing original data observations",paraId:7,tocIndex:1},{value:"Regression Curve",paraId:7,tocIndex:1},{value:": Trend line fitted through mathematical algorithms",paraId:7,tocIndex:1},{value:"X-axis",paraId:7,tocIndex:1},{value:": Horizontal coordinate axis, usually representing the independent variable",paraId:7,tocIndex:1},{value:"Y-axis",paraId:7,tocIndex:1},{value:": Vertical coordinate axis, usually representing the dependent variable",paraId:7,tocIndex:1},{value:"Regression Equation",paraId:7,tocIndex:1},{value:": Mathematical formula describing variable relationships",paraId:7,tocIndex:1},{value:"Coefficient of Determination (R²)",paraId:7,tocIndex:1},{value:": Indicator measuring the goodness of fit of the regression model",paraId:7,tocIndex:1},{value:"Example 1: ",paraId:8,tocIndex:3},{value:"Linear Relationship Data Analysis",paraId:8,tocIndex:3},{value:"Linear regression is suitable for showing linear relationships between two variables, such as height vs. weight, temperature vs. sales, etc.",paraId:9,tocIndex:3},{value:"import { Chart } from '@antv/g2';\nimport { regressionLinear } from 'd3-regression';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/linear-regression.json',\n  },\n  children: [\n    {\n      type: 'point',\n      encode: { x: (d) => d[0], y: (d) => d[1] },\n      scale: { x: { domain: [0, 1] }, y: { domain: [0, 5] } },\n      style: { fillOpacity: 0.75, fill: '#1890ff' },\n    },\n    {\n      type: 'line',\n      data: {\n        transform: [\n          {\n            type: 'custom',\n            callback: regressionLinear(),\n          },\n        ],\n      },\n      encode: { x: (d) => d[0], y: (d) => d[1] },\n      style: { stroke: '#30BF78', lineWidth: 2 },\n      labels: [\n        {\n          text: 'y = 1.7x + 3.01',\n          selector: 'last',\n          position: 'right',\n          textAlign: 'end',\n          dy: -8,\n        },\n      ],\n      tooltip: false,\n    },\n  ],\n  axis: {\n    x: { title: 'Independent Variable X' },\n    y: { title: 'Dependent Variable Y' },\n  },\n});\n\nchart.render();\n",paraId:10,tocIndex:3},{value:"Description:",paraId:11,tocIndex:3},{value:"Scatter points show original data distribution",paraId:12,tocIndex:3},{value:"Linear regression line reveals linear relationship between two variables",paraId:12,tocIndex:3},{value:"Regression equation provides precise mathematical description",paraId:12,tocIndex:3},{value:"Suitable for prediction and trend analysis",paraId:12,tocIndex:3},{value:"Example 2: ",paraId:13,tocIndex:3},{value:"Non-linear Relationship - Quadratic Regression",paraId:13,tocIndex:3},{value:"When data shows a curved trend, quadratic regression (parabola) can be used to fit the data.",paraId:14,tocIndex:3},{value:"import { Chart } from '@antv/g2';\nimport { regressionQuad } from 'd3-regression';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst data = [\n  { x: -4, y: 5.2 },\n  { x: -3, y: 2.8 },\n  { x: -2, y: 1.5 },\n  { x: -1, y: 0.8 },\n  { x: 0, y: 0.5 },\n  { x: 1, y: 0.8 },\n  { x: 2, y: 1.5 },\n  { x: 3, y: 2.8 },\n  { x: 4, y: 5.2 },\n];\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data,\n  children: [\n    {\n      type: 'point',\n      encode: { x: 'x', y: 'y' },\n      style: { fillOpacity: 0.75, fill: '#1890ff' },\n    },\n    {\n      type: 'line',\n      data: {\n        transform: [\n          {\n            type: 'custom',\n            callback: regressionQuad()\n              .x((d) => d.x)\n              .y((d) => d.y)\n              .domain([-4, 4]),\n          },\n        ],\n      },\n      encode: { x: (d) => d[0], y: (d) => d[1] },\n      style: { stroke: '#30BF78', lineWidth: 2 },\n      labels: [\n        {\n          text: 'y = 0.3x² + 0.5',\n          selector: 'last',\n          textAlign: 'end',\n          dy: -8,\n        },\n      ],\n      tooltip: false,\n    },\n  ],\n  axis: {\n    x: { title: 'Independent Variable X' },\n    y: { title: 'Dependent Variable Y' },\n  },\n});\n\nchart.render();\n",paraId:15,tocIndex:3},{value:"Description:",paraId:16,tocIndex:3},{value:"Quadratic regression is suitable for displaying data relationships with parabolic characteristics",paraId:17,tocIndex:3},{value:"Can capture curved trends and extreme points in data",paraId:17,tocIndex:3},{value:"Commonly used for non-linear relationship analysis in physics and economics",paraId:17,tocIndex:3},{value:"Example 3: ",paraId:18,tocIndex:3},{value:"Exponential Growth Trend Analysis",paraId:18,tocIndex:3},{value:"Exponential regression is suitable for displaying exponential growth or decay data patterns, such as population growth, bacterial reproduction, etc.",paraId:19,tocIndex:3},{value:"import { Chart } from '@antv/g2';\nimport { regressionExp } from 'd3-regression';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/exponential-regression.json',\n  },\n  children: [\n    {\n      type: 'point',\n      encode: { x: (d) => d[0], y: (d) => d[1] },\n      scale: {\n        x: { domain: [0, 18] },\n        y: { domain: [0, 100000] },\n      },\n      style: { fillOpacity: 0.75, fill: '#1890ff' },\n    },\n    {\n      type: 'line',\n      data: {\n        transform: [\n          {\n            type: 'custom',\n            callback: regressionExp(),\n          },\n        ],\n      },\n      encode: {\n        x: (d) => d[0],\n        y: (d) => d[1],\n        shape: 'smooth',\n      },\n      style: { stroke: '#30BF78', lineWidth: 2 },\n      labels: [\n        {\n          text: 'y = 3477.32e^(0.18x)\\nR² = 0.998',\n          selector: 'last',\n          textAlign: 'end',\n          dy: -20,\n        },\n      ],\n      tooltip: false,\n    },\n  ],\n  axis: {\n    x: { title: 'Time' },\n    y: {\n      title: 'Value',\n      labelFormatter: '~s',\n    },\n  },\n});\n\nchart.render();\n",paraId:20,tocIndex:3},{value:"Description:",paraId:21,tocIndex:3},{value:"Exponential regression is suitable for analyzing rapid growth or decay trends",paraId:22,tocIndex:3},{value:"R² value close to 1 indicates very good fit",paraId:22,tocIndex:3},{value:"Commonly used for predicting future trends with exponential characteristics",paraId:22,tocIndex:3},{value:"Example 1: ",paraId:23,tocIndex:4},{value:"Insufficient Data Points",paraId:23,tocIndex:4},{value:"When there are too few data points, regression analysis may not be reliable and can lead to misleading conclusions.",paraId:24,tocIndex:4},{value:"import { Chart } from '@antv/g2';\nimport { regressionLinear } from 'd3-regression';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst insufficientData = [\n  { x: 1, y: 2 },\n  { x: 3, y: 4 },\n  { x: 5, y: 3 },\n];\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: insufficientData,\n  children: [\n    {\n      type: 'point',\n      encode: { x: 'x', y: 'y' },\n      style: {\n        fillOpacity: 0.8,\n        fill: '#ff4d4f',\n        r: 8,\n      },\n    },\n    {\n      type: 'line',\n      data: {\n        transform: [\n          {\n            type: 'custom',\n            callback: regressionLinear()\n              .x((d) => d.x)\n              .y((d) => d.y),\n          },\n        ],\n      },\n      encode: { x: (d) => d[0], y: (d) => d[1] },\n      style: {\n        stroke: '#ff4d4f',\n        lineWidth: 2,\n        strokeDasharray: [4, 4],\n      },\n      tooltip: false,\n    },\n  ],\n  axis: {\n    x: { title: 'Variable X' },\n    y: { title: 'Variable Y' },\n  },\n  title: 'Unsuitable: Regression Analysis with Too Few Data Points',\n});\n\nchart.render();\n",paraId:25,tocIndex:4},{value:"Problem Description:",paraId:26,tocIndex:4},{value:"Only 3 data points, insufficient sample size",paraId:27,tocIndex:4},{value:"Limited reliability and predictive capability of the regression line",paraId:27,tocIndex:4},{value:"Easily affected by outliers",paraId:27,tocIndex:4},{value:"Recommend at least 10 or more data points for regression analysis",paraId:27,tocIndex:4},{value:"Example 2: ",paraId:28,tocIndex:4},{value:"Data with No Clear Correlation",paraId:28,tocIndex:4},{value:"When there is no clear correlation between two variables, forcing a regression line may mislead the analysis.",paraId:29,tocIndex:4},{value:"import { Chart } from '@antv/g2';\nimport { regressionLinear } from 'd3-regression';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\n// Generate randomly distributed data (no correlation)\nconst randomData = Array.from({ length: 30 }, (_, i) => ({\n  x: Math.random() * 10,\n  y: Math.random() * 10,\n}));\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: randomData,\n  children: [\n    {\n      type: 'point',\n      encode: { x: 'x', y: 'y' },\n      style: {\n        fillOpacity: 0.8,\n        fill: '#ff4d4f',\n        r: 6,\n      },\n    },\n    {\n      type: 'line',\n      data: {\n        transform: [\n          {\n            type: 'custom',\n            callback: regressionLinear()\n              .x((d) => d.x)\n              .y((d) => d.y),\n          },\n        ],\n      },\n      encode: { x: (d) => d[0], y: (d) => d[1] },\n      style: {\n        stroke: '#ff4d4f',\n        lineWidth: 2,\n        strokeDasharray: [4, 4],\n      },\n      labels: [\n        {\n          text: 'R² ≈ 0.02 (extremely low)',\n          selector: 'last',\n          textAlign: 'end',\n          dy: -8,\n        },\n      ],\n      tooltip: false,\n    },\n  ],\n  axis: {\n    x: { title: 'Variable X' },\n    y: { title: 'Variable Y' },\n  },\n  title: 'Unsuitable: Data with No Correlation',\n});\n\nchart.render();\n",paraId:30,tocIndex:4},{value:"Problem Description:",paraId:31,tocIndex:4},{value:"Data points show random distribution with no clear trend pattern",paraId:32,tocIndex:4},{value:"Extremely low R² value indicates the regression model can hardly explain variable relationships",paraId:32,tocIndex:4},{value:"Regression line has no practical meaning and may mislead decision-making",paraId:32,tocIndex:4},{value:"Should perform correlation analysis first to confirm relationships between variables before regression",paraId:32,tocIndex:4},{value:"When data shows complex curved trends, polynomial regression can be used to fit more complex curves.",paraId:33,tocIndex:6},{value:"import { Chart } from '@antv/g2';\nimport { regressionPoly } from 'd3-regression';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst polynomialData = [\n  { x: 0, y: 140 },\n  { x: 1, y: 149 },\n  { x: 2, y: 159.6 },\n  { x: 3, y: 159 },\n  { x: 4, y: 155.9 },\n  { x: 5, y: 169 },\n  { x: 6, y: 162.9 },\n  { x: 7, y: 169 },\n  { x: 8, y: 180 },\n];\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: polynomialData,\n  children: [\n    {\n      type: 'point',\n      encode: { x: 'x', y: 'y' },\n      style: { fillOpacity: 0.75, fill: '#1890ff' },\n    },\n    {\n      type: 'line',\n      data: {\n        transform: [\n          {\n            type: 'custom',\n            callback: regressionPoly()\n              .x((d) => d.x)\n              .y((d) => d.y),\n          },\n        ],\n      },\n      encode: {\n        x: (d) => d[0],\n        y: (d) => d[1],\n        shape: 'smooth',\n      },\n      style: { stroke: '#30BF78', lineWidth: 2 },\n      labels: [\n        {\n          text: 'y = 0.24x³ - 3.00x² + 13.45x + 139.77\\nR² = 0.92',\n          selector: 'last',\n          textAlign: 'end',\n          dx: -8,\n          dy: -20,\n        },\n      ],\n      tooltip: false,\n    },\n  ],\n  axis: {\n    x: { title: 'Time' },\n    y: { title: 'Value' },\n  },\n});\n\nchart.render();\n",paraId:34,tocIndex:6},{value:"Description:",paraId:35,tocIndex:6},{value:"Polynomial regression can fit complex curved relationships",paraId:36,tocIndex:6},{value:"Suitable for handling data with multiple peaks and valleys",paraId:36,tocIndex:6},{value:"Need to be careful to avoid overfitting problems",paraId:36,tocIndex:6},{value:"Logarithmic regression is suitable for data patterns where the growth rate gradually slows down.",paraId:37,tocIndex:7},{value:"import { Chart } from '@antv/g2';\nimport { regressionLog } from 'd3-regression';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/logarithmic-regression.json',\n  },\n  children: [\n    {\n      type: 'point',\n      encode: { x: 'x', y: 'y' },\n      scale: { x: { domain: [0, 35] } },\n      style: { fillOpacity: 0.75, fill: '#1890ff' },\n    },\n    {\n      type: 'line',\n      data: {\n        transform: [\n          {\n            type: 'custom',\n            callback: regressionLog()\n              .x((d) => d.x)\n              .y((d) => d.y)\n              .domain([0.81, 35]),\n          },\n        ],\n      },\n      encode: {\n        x: (d) => d[0],\n        y: (d) => d[1],\n        shape: 'smooth',\n      },\n      style: { stroke: '#30BF78', lineWidth: 2 },\n      labels: [\n        {\n          text: 'y = 0.881·ln(x) + 4.173\\nR² = 0.958',\n          selector: 'last',\n          textAlign: 'end',\n          dy: -20,\n        },\n      ],\n      tooltip: false,\n    },\n  ],\n  axis: {\n    x: { title: 'Variable X' },\n    y: { title: 'Variable Y' },\n  },\n});\n\nchart.render();\n",paraId:38,tocIndex:7},{value:"Description:",paraId:39,tocIndex:7},{value:"Logarithmic regression is suitable for showing diminishing marginal effects",paraId:40,tocIndex:7},{value:"Commonly used for analyzing learning curves, diminishing returns scenarios",paraId:40,tocIndex:7},{value:"Can handle data patterns with gradually decreasing growth rates",paraId:40,tocIndex:7},{value:"Multiple regression methods can be compared in the same chart to show their comparative effects.",paraId:41,tocIndex:8},{value:"import { Chart } from '@antv/g2';\nimport {\n  regressionLinear,\n  regressionQuad,\n  regressionPoly,\n} from 'd3-regression';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst comparisonData = [\n  { x: 1, y: 2.1 },\n  { x: 2, y: 3.9 },\n  { x: 3, y: 6.8 },\n  { x: 4, y: 10.2 },\n  { x: 5, y: 15.1 },\n  { x: 6, y: 21.5 },\n  { x: 7, y: 29.8 },\n  { x: 8, y: 40.2 },\n];\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: comparisonData,\n  children: [\n    {\n      type: 'point',\n      encode: { x: 'x', y: 'y' },\n      style: {\n        fillOpacity: 0.8,\n        fill: '#1890ff',\n        r: 6,\n      },\n    },\n    // Linear regression\n    {\n      type: 'line',\n      data: {\n        transform: [\n          {\n            type: 'custom',\n            callback: regressionLinear()\n              .x((d) => d.x)\n              .y((d) => d.y),\n          },\n        ],\n      },\n      encode: { x: (d) => d[0], y: (d) => d[1] },\n      style: {\n        stroke: '#ff4d4f',\n        lineWidth: 2,\n        strokeDasharray: [4, 4],\n      },\n      tooltip: false,\n    },\n    // Quadratic regression\n    {\n      type: 'line',\n      data: {\n        transform: [\n          {\n            type: 'custom',\n            callback: regressionQuad()\n              .x((d) => d.x)\n              .y((d) => d.y),\n          },\n        ],\n      },\n      encode: { x: (d) => d[0], y: (d) => d[1] },\n      style: {\n        stroke: '#30BF78',\n        lineWidth: 2,\n      },\n      tooltip: false,\n    },\n  ],\n  axis: {\n    x: { title: 'Variable X' },\n    y: { title: 'Variable Y' },\n  },\n  legends: [\n    {\n      color: {\n        position: 'top',\n        itemMarker: (color, index) => {\n          if (index === 0)\n            return {\n              symbol: 'line',\n              style: { stroke: '#ff4d4f', strokeDasharray: [4, 4] },\n            };\n          if (index === 1)\n            return { symbol: 'line', style: { stroke: '#30BF78' } };\n        },\n        data: [\n          { color: '#ff4d4f', value: 'Linear Regression' },\n          { color: '#30BF78', value: 'Quadratic Regression' },\n        ],\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:42,tocIndex:8},{value:"Description:",paraId:43,tocIndex:8},{value:"Can simultaneously display the fitting effects of multiple regression methods",paraId:44,tocIndex:8},{value:"Helps choose the regression model that best fits the data characteristics",paraId:44,tocIndex:8},{value:"Find the best fitting method through comparative analysis",paraId:44,tocIndex:8},{value:"Scatter Plot",paraId:45,tocIndex:9},{value:"Regression curve charts add mathematical modeling and prediction functionality on top of scatter plots",paraId:46,tocIndex:10},{value:"Scatter plots focus on displaying data distribution and correlation, while regression curve charts emphasize trend analysis and prediction",paraId:46,tocIndex:10},{value:"Choose regression curve charts when trend prediction is needed, choose scatter plots when only data distribution observation is required",paraId:46,tocIndex:10},{value:"Line Chart",paraId:47,tocIndex:10},{value:"Regression curve charts are based on mathematical model fitting, while line charts directly connect data points",paraId:48,tocIndex:11},{value:"Regression curve charts can smooth noise and make predictions, while line charts accurately reflect each data point",paraId:48,tocIndex:11},{value:"Choose regression curve charts when trend pattern analysis is needed, choose line charts when precise change display is required",paraId:48,tocIndex:11}]},34538:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(39414);const t=[{value:"The Nightingale Rose Chart (also known as Coxcomb Chart or Polar Area Diagram) is a chart form invented by Florence Nightingale during the Crimean War for a report on soldier mortality.",paraId:0,tocIndex:0},{value:"The Nightingale Rose Chart is a bar chart plotted in polar coordinates, using the radius of circular arcs to represent the magnitude of data (the quantity).",paraId:1,tocIndex:0},{value:"Due to the square relationship between radius and area, the Nightingale Rose Chart exaggerates the proportional size of data, making it particularly suitable for comparing values that are close in magnitude.",paraId:2,tocIndex:0},{value:"Due to the cyclical nature of circles, the rose chart is also suitable for representing time concepts within a cycle, such as days of the week or months.",paraId:2,tocIndex:0},{value:"Other Names",paraId:3,tocIndex:0},{value:"Nightingale Rose Chart, Coxcomb Chart, Polar Area Diagram",paraId:4,tocIndex:0},{value:"Chart Type",paraId:5,tocIndex:1},{value:"Nightingale Rose Chart",paraId:5,tocIndex:1},{value:"Suitable Data",paraId:5,tocIndex:1},{value:"List: One categorical data field, one continuous data field",paraId:5,tocIndex:1},{value:"Functionality",paraId:5,tocIndex:1},{value:"Comparing the numerical values of categorical data",paraId:5,tocIndex:1},{value:"Data-to-Graphic Mapping",paraId:5,tocIndex:1},{value:"Categorical data field maps to the position on the category axis",paraId:5,tocIndex:1},{value:"Continuous data field maps to the height on the radius axis ",paraId:5,tocIndex:1},{value:"Categorical data can also set color to enhance category distinction",paraId:5,tocIndex:1},{value:"Suitable Data Count",paraId:5,tocIndex:1},{value:"Not exceeding 30 data items",paraId:5,tocIndex:1},{value:"Example 1: ",paraId:6,tocIndex:3},{value:"Comparing the size of different categories",paraId:6,tocIndex:3},{value:"The chart below shows a comparison of manufacturing indices for various countries, with the United States as the benchmark (100). China's manufacturing cost index is 96, meaning that if a product costs $1 to manufacture in the US, it would cost $0.96 in China. The chart indicates that China's manufacturing advantage is no longer significant.",paraId:7,tocIndex:3},{value:"country（Country）",paraId:8,tocIndex:3},{value:"cost（Manufacturing Index）",paraId:8,tocIndex:3},{value:"China",paraId:8,tocIndex:3},{value:"96",paraId:8,tocIndex:3},{value:"Germany",paraId:8,tocIndex:3},{value:"121",paraId:8,tocIndex:3},{value:"United States",paraId:8,tocIndex:3},{value:"100",paraId:8,tocIndex:3},{value:"Japan",paraId:8,tocIndex:3},{value:"111",paraId:8,tocIndex:3},{value:"South Korea",paraId:8,tocIndex:3},{value:"102",paraId:8,tocIndex:3},{value:"...",paraId:8,tocIndex:3},{value:"...",paraId:8,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  coordinate: { type: 'polar' },\n  data: [\n    { country: 'China', cost: 96 },\n    { country: 'Germany', cost: 121 },\n    { country: 'USA', cost: 100 },\n    { country: 'Japan', cost: 111 },\n    { country: 'Korea', cost: 102 },\n    { country: 'France', cost: 124 },\n    { country: 'Italy', cost: 123 },\n    { country: 'Netherlands', cost: 111 },\n    { country: 'Belgium', cost: 123 },\n    { country: 'UK', cost: 109 },\n    { country: 'Canada', cost: 115 },\n    { country: 'Russia', cost: 99 },\n    { country: 'Mexico', cost: 91 },\n    { country: 'India', cost: 87 },\n    { country: 'Switzerland', cost: 125 },\n    { country: 'Australia', cost: 130 },\n    { country: 'Spain', cost: 109 },\n    { country: 'Brazil', cost: 123 },\n    { country: 'Thailand', cost: 91 },\n    { country: 'Indonesia', cost: 83 },\n    { country: 'Poland', cost: 101 },\n    { country: 'Sweden', cost: 116 },\n    { country: 'Austria', cost: 111 },\n    { country: 'Czech', cost: 107 },\n  ],\n  encode: {\n    x: 'country',\n    y: 'cost',\n    color: 'country',\n  },\n  scale: {\n    y: { nice: true },\n    color: { palette: 'category20' },\n  },\n  axis: {\n    y: { labelFormatter: null },\n    x: { grid: true },\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:9,tocIndex:3},{value:"Example 1: ",paraId:10,tocIndex:4},{value:"Scenarios with too few categories",paraId:10,tocIndex:4},{value:"The chart below shows the number of male and female students in a class. This scenario compares a rose chart with a pie chart. When there are very few categories, a pie chart is more suitable than a rose chart.",paraId:11,tocIndex:4},{value:"gender",paraId:12,tocIndex:4},{value:"count",paraId:12,tocIndex:4},{value:"Male",paraId:12,tocIndex:4},{value:"40",paraId:12,tocIndex:4},{value:"Female",paraId:12,tocIndex:4},{value:"30",paraId:12,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  coordinate: { type: 'polar' },\n  data: [\n    { gender: 'Male', count: 40 },\n    { gender: 'Female', count: 30 },\n  ],\n  encode: {\n    x: 'gender',\n    y: 'count',\n    color: 'gender',\n  },\n  scale: {\n    y: { nice: true, min: 0 },\n  },\n});\n\nchart.render();\n",paraId:13,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  coordinate: { type: 'polar' },\n  data: [\n    { gender: 'Male', count: 40 },\n    { gender: 'Female', count: 30 },\n  ],\n  encode: {\n    x: 'gender',\n    y: 'count',\n    color: 'gender',\n  },\n  scale: {\n    y: { nice: true, min: 0 },\n  },\n});\n\nchart.render();\n",paraId:14,tocIndex:6},{value:"Example 2: ",paraId:15,tocIndex:6},{value:"Scenarios with vastly different category values",paraId:15,tocIndex:6},{value:"Below, a Nightingale Rose Chart and a horizontal bar chart are used to display population data for various provinces. In this scenario, using a rose chart is inappropriate because the vast differences in values make it difficult to observe smaller categories. A horizontal bar chart is recommended.",paraId:16,tocIndex:6},{value:"province",paraId:17,tocIndex:6},{value:"population",paraId:17,tocIndex:6},{value:"Beijing",paraId:17,tocIndex:6},{value:"19,612,368",paraId:17,tocIndex:6},{value:"Tianjin",paraId:17,tocIndex:6},{value:"12,938,693",paraId:17,tocIndex:6},{value:"Hebei",paraId:17,tocIndex:6},{value:"71,854,210",paraId:17,tocIndex:6},{value:"Shanxi",paraId:17,tocIndex:6},{value:"27,500,000",paraId:17,tocIndex:6},{value:"...",paraId:17,tocIndex:6},{value:"...",paraId:17,tocIndex:6},{value:"Nightingale Rose Chart (Not Recommended)",paraId:18,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  coordinate: { type: 'polar' },\n  data: [\n    { province: 'Beijing', population: 19612368 },\n    { province: 'Tianjin', population: 12938693 },\n    { province: 'Hebei', population: 71854210 },\n    { province: 'Shanxi', population: 27500000 },\n    { province: 'Inner Mongolia', population: 24706291 },\n    { province: 'Liaoning', population: 43746323 },\n    { province: 'Jilin', population: 27452815 },\n    { province: 'Heilongjiang', population: 38313991 },\n    { province: 'Shanghai', population: 23019196 },\n    { province: 'Jiangsu', population: 78660941 },\n    { province: 'Zhejiang', population: 54426891 },\n    { province: 'Anhui', population: 59500468 },\n    { province: 'Fujian', population: 36894217 },\n    { province: 'Jiangxi', population: 44567797 },\n    { province: 'Shandong', population: 95792719 },\n    { province: 'Henan', population: 94029939 },\n    { province: 'Hubei', population: 57237727 },\n    { province: 'Hunan', population: 65700762 },\n    { province: 'Guangdong', population: 104320459 },\n    { province: 'Guangxi', population: 46023761 },\n    { province: 'Hainan', population: 8671485 },\n    { province: 'Chongqing', population: 28846170 },\n    { province: 'Sichuan', population: 80417528 },\n    { province: 'Guizhou', population: 34748556 },\n    { province: 'Yunnan', population: 45966766 },\n    { province: 'Tibet', population: 3002165 },\n    { province: 'Shaanxi', population: 37327379 },\n    { province: 'Gansu', population: 25575263 },\n    { province: 'Qinghai', population: 5626723 },\n  ],\n  encode: {\n    x: 'province',\n    y: 'population',\n    color: 'province',\n  },\n  scale: {\n    y: { nice: true },\n    color: { palette: 'category20' },\n  },\n  axis: {\n    y: { labelFormatter: null },\n    x: {\n      labelFormatter: (text) =>\n        text.length > 6 ? text.slice(0, 6) + '...' : text,\n      labelRotate: Math.PI / 4,\n    },\n  },\n});\n\nchart.render();\n",paraId:19,tocIndex:6},{value:"Horizontal Bar Chart (Recommended)",paraId:20,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  coordinate: { type: 'rect' },\n  data: [\n    { province: 'Beijing', population: 19612368 },\n    { province: 'Tianjin', population: 12938693 },\n    { province: 'Hebei', population: 71854210 },\n    { province: 'Shanxi', population: 27500000 },\n    { province: 'Inner Mongolia', population: 24706291 },\n    { province: 'Liaoning', population: 43746323 },\n    { province: 'Jilin', population: 27452815 },\n    { province: 'Heilongjiang', population: 38313991 },\n    { province: 'Shanghai', population: 23019196 },\n    { province: 'Jiangsu', population: 78660941 },\n    { province: 'Zhejiang', population: 54426891 },\n    { province: 'Anhui', population: 59500468 },\n    { province: 'Fujian', population: 36894217 },\n    { province: 'Jiangxi', population: 44567797 },\n    { province: 'Shandong', population: 95792719 },\n    { province: 'Henan', population: 94029939 },\n    { province: 'Hubei', population: 57237727 },\n    { province: 'Hunan', population: 65700762 },\n    { province: 'Guangdong', population: 104320459 },\n    { province: 'Guangxi', population: 46023761 },\n    { province: 'Hainan', population: 8671485 },\n    { province: 'Chongqing', population: 28846170 },\n    { province: 'Sichuan', population: 80417528 },\n    { province: 'Guizhou', population: 34748556 },\n    { province: 'Yunnan', population: 45966766 },\n    { province: 'Tibet', population: 3002165 },\n    { province: 'Shaanxi', population: 37327379 },\n    { province: 'Gansu', population: 25575263 },\n    { province: 'Qinghai', population: 5626723 },\n  ],\n  encode: {\n    x: 'province',\n    y: 'population',\n    color: 'province',\n  },\n  scale: {\n    y: { nice: true },\n    color: { palette: 'category20' },\n  },\n  axis: {\n    y: { labelFormatter: null },\n    x: {\n      labelFormatter: (text) =>\n        text.length > 6 ? text.slice(0, 6) + '...' : text,\n      labelRotate: Math.PI / 4,\n    },\n  },\n});\n\nchart.render();\n",paraId:21,tocIndex:6},{value:"Example 3: ",paraId:22,tocIndex:6},{value:"Scenarios where some category values are too small",paraId:22,tocIndex:6},{value:"The chart below shows the pass rates for various subjects in a class, displayed using both a Nightingale Rose Chart and a horizontal bar chart. In this scenario, because some category values are too small, using a Nightingale Rose Chart can distort the graph, making it difficult to observe the true proportions of the data.",paraId:23,tocIndex:6},{value:"Subject",paraId:24,tocIndex:6},{value:"Pass Rate",paraId:24,tocIndex:6},{value:"Math",paraId:24,tocIndex:6},{value:"98%",paraId:24,tocIndex:6},{value:"English",paraId:24,tocIndex:6},{value:"95%",paraId:24,tocIndex:6},{value:"Physics",paraId:24,tocIndex:6},{value:"60%",paraId:24,tocIndex:6},{value:"Chemistry",paraId:24,tocIndex:6},{value:"55%",paraId:24,tocIndex:6},{value:"Biology",paraId:24,tocIndex:6},{value:"30%",paraId:24,tocIndex:6},{value:"Geography",paraId:24,tocIndex:6},{value:"5%",paraId:24,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  coordinate: { type: 'polar' },\n  data: [\n    { subject: 'Math', passRate: 98 },\n    { subject: 'English', passRate: 95 },\n    { subject: 'Physics', passRate: 60 },\n    { subject: 'Chemistry', passRate: 55 },\n    { subject: 'Biology', passRate: 30 },\n    { subject: 'Geography', passRate: 5 },\n  ],\n  encode: {\n    x: 'subject',\n    y: 'passRate',\n    color: 'subject',\n  },\n  scale: {\n    y: { nice: true },\n    color: { palette: 'category20' },\n  },\n  axis: {\n    y: { labelFormatter: null },\n    x: {\n      labelFormatter: (text) =>\n        text.length > 6 ? text.slice(0, 6) + '...' : text,\n      labelRotate: Math.PI / 4,\n    },\n  },\n});\n\nchart.render();\n",paraId:25,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  coordinate: { type: 'rect' },\n  data: [\n    { subject: 'Math', passRate: 98 },\n    { subject: 'English', passRate: 95 },\n    { subject: 'Physics', passRate: 60 },\n    { subject: 'Chemistry', passRate: 55 },\n    { subject: 'Biology', passRate: 30 },\n    { subject: 'Geography', passRate: 5 },\n  ],\n  encode: {\n    x: 'subject',\n    y: 'passRate',\n    color: 'subject',\n  },\n  scale: {\n    y: { nice: true },\n    color: { palette: 'category20' },\n  },\n  axis: {\n    y: { labelFormatter: null },\n    x: {\n      labelFormatter: (text) =>\n        text.length > 6 ? text.slice(0, 6) + '...' : text,\n      labelRotate: Math.PI / 4,\n    },\n  },\n});\n\nchart.render();\n",paraId:26,tocIndex:8},{value:"A sector Nightingale Rose Chart can be achieved by setting the start angle of the polar coordinates:",paraId:27,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  coordinate: {\n    type: 'polar',\n    startAngle: Math.PI,\n    endAngle: Math.PI * (3 / 2),\n  },\n  data: [\n    { country: 'China', cost: 96 },\n    { country: 'Germany', cost: 121 },\n    { country: 'USA', cost: 100 },\n    { country: 'Japan', cost: 111 },\n    { country: 'Korea', cost: 102 },\n    { country: 'France', cost: 124 },\n    { country: 'Italy', cost: 123 },\n    { country: 'Netherlands', cost: 111 },\n    { country: 'Belgium', cost: 123 },\n    { country: 'UK', cost: 109 },\n    { country: 'Canada', cost: 115 },\n    { country: 'Russia', cost: 99 },\n  ],\n  encode: {\n    x: 'country',\n    y: 'cost',\n    color: 'country',\n  },\n  scale: {\n    y: { nice: true },\n    color: { range: ['#fc8f48', '#ffd787'] },\n  },\n  style: {\n    lineWidth: 1,\n    stroke: '#fff',\n  },\n  labels: [\n    {\n      text: 'cost',\n      style: {\n        textAlign: 'center',\n        fontSize: 10,\n        fontWeight: 'bold',\n      },\n      transform: [{ type: 'overlapDodgeY' }],\n    },\n  ],\n});\n\nchart.render();\n",paraId:28,tocIndex:10},{value:"The Nightingale Rose Chart is essentially a bar chart plotted in polar coordinates. If a bar chart is extended to a stacked bar chart, a stacked rose chart can also be implemented.",paraId:29,tocIndex:11},{value:"The chart below shows refugee data from the last decade, broadly categorized into refugees who have crossed national borders, internally displaced persons who have not, and asylum-seekers who have not yet obtained refugee status.",paraId:30,tocIndex:11},{value:"year",paraId:31,tocIndex:11},{value:"internally displaced persons",paraId:31,tocIndex:11},{value:"refugees (crossed borders)",paraId:31,tocIndex:11},{value:"asylum-seekers",paraId:31,tocIndex:11},{value:"2000",paraId:31,tocIndex:11},{value:"21.0",paraId:31,tocIndex:11},{value:"16",paraId:31,tocIndex:11},{value:"0.8",paraId:31,tocIndex:11},{value:"2001",paraId:31,tocIndex:11},{value:"25.0",paraId:31,tocIndex:11},{value:"16",paraId:31,tocIndex:11},{value:"0.8",paraId:31,tocIndex:11},{value:"...",paraId:31,tocIndex:11},{value:"...",paraId:31,tocIndex:11},{value:"...",paraId:31,tocIndex:11},{value:"...",paraId:31,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  coordinate: {\n    type: 'polar',\n    innerRadius: 0.1,\n  },\n  data: [\n    { year: '2000', type: 'Internally Displaced', count: 21.0 },\n    { year: '2000', type: 'Cross-border Refugees', count: 16 },\n    { year: '2000', type: 'Asylum Seekers', count: 0.8 },\n    { year: '2001', type: 'Internally Displaced', count: 25.0 },\n    { year: '2001', type: 'Cross-border Refugees', count: 16 },\n    { year: '2001', type: 'Asylum Seekers', count: 0.8 },\n    { year: '2002', type: 'Internally Displaced', count: 25.0 },\n    { year: '2002', type: 'Cross-border Refugees', count: 15 },\n    { year: '2002', type: 'Asylum Seekers', count: 0.8 },\n    { year: '2003', type: 'Internally Displaced', count: 25.0 },\n    { year: '2003', type: 'Cross-border Refugees', count: 14 },\n    { year: '2003', type: 'Asylum Seekers', count: 0.7 },\n    { year: '2004', type: 'Internally Displaced', count: 25.0 },\n    { year: '2004', type: 'Cross-border Refugees', count: 14 },\n    { year: '2004', type: 'Asylum Seekers', count: 0.7 },\n    { year: '2005', type: 'Internally Displaced', count: 24.0 },\n    { year: '2005', type: 'Cross-border Refugees', count: 13 },\n    { year: '2005', type: 'Asylum Seekers', count: 0.8 },\n    { year: '2006', type: 'Internally Displaced', count: 24.0 },\n    { year: '2006', type: 'Cross-border Refugees', count: 14 },\n    { year: '2006', type: 'Asylum Seekers', count: 0.7 },\n    { year: '2007', type: 'Internally Displaced', count: 26.0 },\n    { year: '2007', type: 'Cross-border Refugees', count: 16 },\n    { year: '2007', type: 'Asylum Seekers', count: 0.7 },\n    { year: '2008', type: 'Internally Displaced', count: 26.0 },\n    { year: '2008', type: 'Cross-border Refugees', count: 15.2 },\n    { year: '2008', type: 'Asylum Seekers', count: 0.8 },\n    { year: '2009', type: 'Internally Displaced', count: 27.1 },\n    { year: '2009', type: 'Cross-border Refugees', count: 15.2 },\n    { year: '2009', type: 'Asylum Seekers', count: 1.0 },\n    { year: '2010', type: 'Internally Displaced', count: 27.5 },\n    { year: '2010', type: 'Cross-border Refugees', count: 15.4 },\n    { year: '2010', type: 'Asylum Seekers', count: 0.8 },\n    { year: '2011', type: 'Internally Displaced', count: 26.4 },\n    { year: '2011', type: 'Cross-border Refugees', count: 15.2 },\n    { year: '2011', type: 'Asylum Seekers', count: 0.9 },\n    { year: '2012', type: 'Internally Displaced', count: 28.8 },\n    { year: '2012', type: 'Cross-border Refugees', count: 15.4 },\n    { year: '2012', type: 'Asylum Seekers', count: 0.9 },\n    { year: '2013', type: 'Internally Displaced', count: 33.3 },\n    { year: '2013', type: 'Cross-border Refugees', count: 16.7 },\n    { year: '2013', type: 'Asylum Seekers', count: 1.2 },\n    { year: '2014', type: 'Internally Displaced', count: 38.2 },\n    { year: '2014', type: 'Cross-border Refugees', count: 19.5 },\n    { year: '2014', type: 'Asylum Seekers', count: 1.8 },\n  ],\n  encode: {\n    x: 'year',\n    y: 'count',\n    color: 'type',\n    series: 'type',\n  },\n  transform: [{ type: 'stackY' }],\n  scale: {\n    color: {\n      range: ['rgb(136,186,174)', 'rgb(184,189,61)', 'rgb(107,136,138)'],\n    },\n  },\n  style: {\n    stroke: 'white',\n    lineWidth: 1,\n  },\n});\n\nchart.render();\n",paraId:32,tocIndex:11},{value:"Line Charts",paraId:33,tocIndex:12},{value:"Pie Charts",paraId:34,tocIndex:12},{value:"Nightingale Rose Charts and Pie Charts",paraId:35,tocIndex:13},{value:"Nightingale Rose Charts use the radius of sectors to represent numerical values, while pie charts use the arc length (angle) of sectors to represent data proportions.",paraId:36,tocIndex:13},{value:"Nightingale Rose Charts can typically display more categories simultaneously than pie charts.\n(Note: Comparison with Line Charts is not detailed in this section based on the source material.)",paraId:36,tocIndex:13},{value:"The Nightingale Rose Chart is essentially a bar chart displayed in polar coordinates.",paraId:37,tocIndex:14},{value:"Bar charts use the height of rectangles to represent numerical values.",paraId:37,tocIndex:14},{value:"Nightingale Rose Charts use the radius of sectors to represent numerical values.",paraId:37,tocIndex:14}]},39902:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(76565);const t=[{value:"A Sankey diagram (Sankey Diagram) is a specialized flow diagram used to depict the flow of values from one set of nodes to another. The image above shows Napoleon's Russian Campaign of 1812, drawn by Charles Minard in 1869, which is a flow diagram overlaid on a map using the Sankey diagram technique. In 1898, Irish engineer Matthew Henry Phineas Riall Sankey first introduced an energy flow diagram in a paper about steam engine efficiency in the Minutes of Proceedings of the Institution of Civil Engineers, after which this type of diagram was named the Sankey diagram.",paraId:0,tocIndex:0},{value:"The width of the extending branches in the diagram corresponds to the size of the data flow. Key characteristics of Sankey diagrams include:",paraId:1,tocIndex:0},{value:"The total width of all incoming flows equals the total width of all outgoing flows, maintaining flow conservation",paraId:2,tocIndex:0},{value:"Internal flows are represented by different lines, with their widths proportionally showing the flow quantity of each branch",paraId:2,tocIndex:0},{value:"Nodes have varying widths representing the total flow volume at that particular state",paraId:2,tocIndex:0},{value:"Sankey diagrams are commonly used for visualizing data in energy, material composition, and financial analysis.",paraId:3,tocIndex:0},{value:"Chinese Name",paraId:4,tocIndex:0},{value:": 桑基图",paraId:4,tocIndex:0},{value:"Chart Type",paraId:5,tocIndex:2},{value:"Basic Sankey Diagram",paraId:5,tocIndex:2},{value:"Suitable Data",paraId:5,tocIndex:2},{value:"Flow data: containing source nodes, target nodes, and flow values",paraId:5,tocIndex:2},{value:"Function",paraId:5,tocIndex:2},{value:"Display flow relationships and quantities between different nodes",paraId:5,tocIndex:2},{value:"Data-Visual Mapping",paraId:5,tocIndex:2},{value:"Source nodes mapped to left positions",paraId:5,tocIndex:2},{value:"Target nodes mapped to right positions",paraId:5,tocIndex:2},{value:"Flow values mapped to link widths",paraId:5,tocIndex:2},{value:"Suitable Scenarios",paraId:5,tocIndex:2},{value:"Energy flow analysis, fund flow tracking, user path analysis",paraId:5,tocIndex:2},{value:"Example 1: ",paraId:6,tocIndex:4},{value:"Energy Flow Analysis",paraId:6,tocIndex:4},{value:"The following diagram shows an energy flow Sankey chart, displaying the complete process from primary energy sources to final consumption.",paraId:7,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'sankey',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/energy.json',\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => ({ links: data }),\n      },\n    ],\n  },\n  layout: {\n    nodeAlign: 'center',\n    nodePadding: 0.03,\n  },\n  style: {\n    labelSpacing: 3,\n    labelFontWeight: 'bold',\n    nodeStrokeWidth: 1.2,\n    linkFillOpacity: 0.4,\n  },\n});\n\nchart.render();\n",paraId:8,tocIndex:4},{value:"Explanation",paraId:9,tocIndex:4},{value:":",paraId:9,tocIndex:4},{value:"source",paraId:10,tocIndex:4},{value:" field maps to starting nodes, representing energy sources",paraId:10,tocIndex:4},{value:"target",paraId:10,tocIndex:4},{value:" field maps to destination nodes, representing energy destinations",paraId:10,tocIndex:4},{value:"value",paraId:10,tocIndex:4},{value:" field maps to link width, representing flow quantity",paraId:10,tocIndex:4},{value:"Color coding distinguishes different types of energy flows",paraId:10,tocIndex:4},{value:"Example 2: ",paraId:11,tocIndex:4},{value:"User Path Analysis",paraId:11,tocIndex:4},{value:"Sankey diagrams can effectively show user behavior paths within websites or applications, helping analyze user drop-off points and conversion funnels.",paraId:12,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst data = {\n  links: [\n    { source: 'Homepage', target: 'Product Page', value: 1000 },\n    { source: 'Homepage', target: 'About Us', value: 300 },\n    { source: 'Homepage', target: 'Contact', value: 200 },\n    { source: 'Product Page', target: 'Shopping Cart', value: 600 },\n    { source: 'Product Page', target: 'Product Details', value: 400 },\n    { source: 'Shopping Cart', target: 'Checkout', value: 450 },\n    { source: 'Shopping Cart', target: 'Continue Shopping', value: 150 },\n    { source: 'Checkout', target: 'Payment Success', value: 380 },\n    { source: 'Checkout', target: 'Abandon Payment', value: 70 },\n    { source: 'Product Details', target: 'Shopping Cart', value: 200 },\n    { source: 'Product Details', target: 'Go Back', value: 200 },\n  ],\n};\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'sankey',\n  autoFit: true,\n  data: { value: data },\n  layout: {\n    nodeAlign: 'justify',\n    nodePadding: 0.05,\n  },\n  style: {\n    labelSpacing: 5,\n    labelFontSize: 12,\n    nodeStrokeWidth: 2,\n    linkFillOpacity: 0.6,\n  },\n  scale: {\n    color: {\n      range: ['#1890ff', '#52c41a', '#faad14', '#f5222d', '#722ed1'],\n    },\n  },\n});\n\nchart.render();\n",paraId:13,tocIndex:4},{value:"Explanation",paraId:14,tocIndex:4},{value:":",paraId:14,tocIndex:4},{value:"Shows the complete user journey from homepage to final conversion",paraId:15,tocIndex:4},{value:"Link width represents user flow volume",paraId:15,tocIndex:4},{value:"Clearly identifies key user drop-off points",paraId:15,tocIndex:4},{value:"Example 3: ",paraId:16,tocIndex:4},{value:"Budget Flow Analysis",paraId:16,tocIndex:4},{value:"Sankey diagrams are particularly suitable for displaying budget allocation, cost analysis, and other financial flow relationships.",paraId:17,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst budgetData = {\n  links: [\n    { source: 'Total Budget', target: 'R&D Department', value: 5000000 },\n    { source: 'Total Budget', target: 'Marketing Department', value: 3000000 },\n    { source: 'Total Budget', target: 'Operations Department', value: 2000000 },\n    { source: 'R&D Department', target: 'Product Development', value: 3000000 },\n    { source: 'R&D Department', target: 'Technology Research', value: 2000000 },\n    { source: 'Marketing Department', target: 'Advertising', value: 2000000 },\n    {\n      source: 'Marketing Department',\n      target: 'Brand Building',\n      value: 1000000,\n    },\n    {\n      source: 'Operations Department',\n      target: 'Personnel Costs',\n      value: 1200000,\n    },\n    { source: 'Operations Department', target: 'Office Costs', value: 800000 },\n    { source: 'Product Development', target: 'Mobile App', value: 1800000 },\n    { source: 'Product Development', target: 'Web Platform', value: 1200000 },\n    { source: 'Advertising', target: 'Online Ads', value: 1500000 },\n    { source: 'Advertising', target: 'Offline Promotion', value: 500000 },\n  ],\n};\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'sankey',\n  autoFit: true,\n  data: { value: budgetData },\n  layout: {\n    nodeAlign: 'center',\n    nodePadding: 0.08,\n  },\n  style: {\n    labelSpacing: 8,\n    labelFontSize: 11,\n    nodeStrokeWidth: 1.5,\n    linkFillOpacity: 0.5,\n  },\n  scale: {\n    color: {\n      range: ['#096dd9', '#36cfc9', '#52c41a', '#faad14', '#ff7a45'],\n    },\n  },\n});\n\nchart.render();\n",paraId:18,tocIndex:4},{value:"Explanation",paraId:19,tocIndex:4},{value:":",paraId:19,tocIndex:4},{value:"Clearly shows budget allocation paths from overall to specific projects",paraId:20,tocIndex:4},{value:"Flow width intuitively represents fund allocation proportions",paraId:20,tocIndex:4},{value:"Color coding helps distinguish different budget category levels",paraId:20,tocIndex:4},{value:"Example 1: ",paraId:21,tocIndex:5},{value:"Not suitable for simple categorical comparisons",paraId:21,tocIndex:5},{value:"When data is primarily used for comparing values across different categories rather than showing flow relationships, Sankey diagrams are not the best choice. In such cases, bar charts or pie charts would be more intuitive.",paraId:22,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\n// Example: Sales comparison data (not suitable for Sankey diagrams)\nconst salesData = [\n  { category: 'Phones', value: 25000 },\n  { category: 'Computers', value: 18000 },\n  { category: 'Tablets', value: 12000 },\n  { category: 'Headphones', value: 8000 },\n  { category: 'Accessories', value: 5000 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: { value: salesData },\n  encode: {\n    x: 'category',\n    y: 'value',\n    color: 'category',\n  },\n  axis: {\n    y: { title: 'Sales Amount ($)' },\n    x: { title: 'Product Category' },\n  },\n  style: {\n    fill: '#1890ff',\n  },\n});\n\nchart.render();\n",paraId:23,tocIndex:5},{value:"Explanation",paraId:24,tocIndex:5},{value:": This type of data is better suited for bar charts because the focus is on comparing numerical values across categories, not showing flow relationships between data points. Using a Sankey diagram in this scenario would add unnecessary complexity.",paraId:24,tocIndex:5},{value:"Example 2: ",paraId:25,tocIndex:5},{value:"Not suitable for overly complex network relationships",paraId:25,tocIndex:5},{value:"When there are too many nodes (over 30) or overly complex flow relationships, Sankey diagrams may become difficult to read. In such cases, consider using network graphs or hierarchical diagrams.",paraId:26,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\n// Example: Complex organizational structure (not suitable for Sankey diagrams)\nconst complexData = {\n  links: [\n    { source: 'CEO', target: 'R&D VP', value: 1 },\n    { source: 'CEO', target: 'Sales VP', value: 1 },\n    { source: 'CEO', target: 'Marketing VP', value: 1 },\n    { source: 'CEO', target: 'Operations VP', value: 1 },\n    { source: 'R&D VP', target: 'Frontend Team', value: 1 },\n    { source: 'R&D VP', target: 'Backend Team', value: 1 },\n    { source: 'R&D VP', target: 'QA Team', value: 1 },\n    { source: 'R&D VP', target: 'DevOps Team', value: 1 },\n    { source: 'Sales VP', target: 'Direct Sales', value: 1 },\n    { source: 'Sales VP', target: 'Channel Sales', value: 1 },\n    { source: 'Sales VP', target: 'Business Dev', value: 1 },\n    { source: 'Sales VP', target: 'Customer Service', value: 1 },\n    { source: 'Marketing VP', target: 'Brand Team', value: 1 },\n    { source: 'Marketing VP', target: 'Events Team', value: 1 },\n    { source: 'Marketing VP', target: 'Content Team', value: 1 },\n    { source: 'Operations VP', target: 'Data Team', value: 1 },\n    { source: 'Operations VP', target: 'Product Team', value: 1 },\n    { source: 'Operations VP', target: 'User Experience', value: 1 },\n  ],\n};\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'sankey',\n  autoFit: true,\n  data: { value: complexData },\n  layout: {\n    nodeAlign: 'justify',\n    nodePadding: 0.02,\n  },\n  style: {\n    labelSpacing: 2,\n    labelFontSize: 10,\n    nodeStrokeWidth: 1,\n    linkFillOpacity: 0.3,\n  },\n});\n\nchart.render();\n",paraId:27,tocIndex:5},{value:"Explanation",paraId:28,tocIndex:5},{value:': This type of hierarchical structural data becomes overcrowded and difficult to read when displayed as a Sankey diagram. It\'s better suited for organizational charts, tree diagrams, or network graphs. Sankey diagrams excel at showing meaningful "flow" relationships rather than just organizational structures.',paraId:28,tocIndex:5},{value:"Different node alignment methods can be used to optimize the layout of Sankey diagrams.",paraId:29,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'sankey',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/energy.json',\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => ({ links: data.slice(0, 20) }), // Use partial data for demonstration\n      },\n    ],\n  },\n  layout: {\n    nodeAlign: 'left', // Options: 'left', 'right', 'center', 'justify'\n    nodePadding: 0.05,\n    nodeWidth: 0.02,\n  },\n  style: {\n    labelSpacing: 5,\n    labelFontWeight: 'bold',\n    nodeStrokeWidth: 2,\n    linkFillOpacity: 0.3,\n  },\n});\n\nchart.render();\n",paraId:30,tocIndex:7},{value:"Explanation",paraId:31,tocIndex:7},{value:":",paraId:31,tocIndex:7},{value:"nodeAlign: 'left'",paraId:32,tocIndex:7},{value:" aligns all nodes to the left",paraId:32,tocIndex:7},{value:"nodePadding",paraId:32,tocIndex:7},{value:" controls spacing between nodes",paraId:32,tocIndex:7},{value:"nodeWidth",paraId:32,tocIndex:7},{value:" controls the width of nodes",paraId:32,tocIndex:7},{value:"Colors can be customized based on node type or flow direction.",paraId:33,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'sankey',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/energy.json',\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => ({ links: data }),\n      },\n    ],\n  },\n  layout: {\n    nodeAlign: 'justify',\n    nodePadding: 0.03,\n  },\n  encode: {\n    color: (d, idx) => {\n      // Assign colors based on first letter of node name\n      const firstChar = d.key?.charAt(0).toLowerCase() || '';\n      if (firstChar <= 'f') return '#1890ff';\n      if (firstChar <= 'n') return '#52c41a';\n      if (firstChar <= 's') return '#faad14';\n      return '#f5222d';\n    },\n  },\n  style: {\n    labelSpacing: 3,\n    labelFontWeight: 'bold',\n    nodeStrokeWidth: 1,\n    linkFillOpacity: 0.6,\n  },\n});\n\nchart.render();\n",paraId:34,tocIndex:8},{value:"Explanation",paraId:35,tocIndex:8},{value:":",paraId:35,tocIndex:8},{value:"Use ",paraId:36,tocIndex:8},{value:"encode.color",paraId:36,tocIndex:8},{value:" to define custom color mapping functions",paraId:36,tocIndex:8},{value:"Colors can be dynamically assigned based on node properties, flow size, and other factors",paraId:36,tocIndex:8},{value:"Funnel Charts",paraId:37,tocIndex:9},{value:"Sankey diagrams show complex many-to-many flow relationships with multiple source and target nodes",paraId:38,tocIndex:10},{value:"Funnel charts primarily show single-path conversion processes, typically used for analyzing business conversion rates",paraId:38,tocIndex:10},{value:"Link width in Sankey diagrams represents flow volume, while funnel layer width represents conversion quantities",paraId:38,tocIndex:10},{value:"Sankey diagrams are suitable for complex process analysis, funnel charts for linear conversion analysis",paraId:38,tocIndex:10},{value:"Chord Diagrams",paraId:39,tocIndex:10},{value:"Sankey diagrams show directed flow relationships, emphasizing flow direction",paraId:40,tocIndex:11},{value:"Chord diagrams primarily show undirected associative relationships, emphasizing relationship strength",paraId:40,tocIndex:11},{value:"Sankey diagrams are suitable for process analysis, chord diagrams for relationship network analysis",paraId:40,tocIndex:11}]},9673:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(32866);const t=[{value:"A scatter plot is a visualization chart that displays the relationship between two continuous variables through points on a two-dimensional coordinate plane. The position of each data point is determined by the values of two variables, where one variable determines the horizontal position (x-axis) and the other determines the vertical position (y-axis).",paraId:0,tocIndex:0},{value:"Scatter plots differ from ",paraId:1,tocIndex:0},{value:"line charts",paraId:2,tocIndex:0},{value:" in that scatter plots are primarily used for exploring and displaying correlations between variables, distribution patterns, and identifying outliers, while line charts are better suited for showing trends in continuous data.",paraId:1,tocIndex:0},{value:"By observing the distribution of data points on a scatter plot, we can infer correlations between variables. If there is no relationship between variables, they will appear as randomly distributed discrete points on the scatter plot. If there is some correlation, most data points will be relatively dense and show some trend. Data correlation relationships mainly include: positive correlation (both variable values increase simultaneously), negative correlation (one variable value increases while the other decreases), no correlation, linear correlation, exponential correlation, etc.",paraId:3,tocIndex:0},{value:"Other Names",paraId:4,tocIndex:0},{value:": Scatter chart, Point plot",paraId:4,tocIndex:0},{value:"Chart Type",paraId:5,tocIndex:1},{value:"Scatter Plot",paraId:5,tocIndex:1},{value:"Suitable Data",paraId:5,tocIndex:1},{value:"List: Two continuous data fields",paraId:5,tocIndex:1},{value:"Function",paraId:5,tocIndex:1},{value:"Explore correlations between two variables, identify data patterns and outliers",paraId:5,tocIndex:1},{value:"Data-Graphics Mapping",paraId:5,tocIndex:1},{value:"First continuous data field mapped to horizontal axis position",paraId:5,tocIndex:1},{value:"Second continuous data field mapped to vertical axis position",paraId:5,tocIndex:1},{value:"Optional categorical field mapped to point color or size",paraId:5,tocIndex:1},{value:"Suitable Data Volume",paraId:5,tocIndex:1},{value:"10-1000 data points, consider sampling or using density plots for larger datasets",paraId:5,tocIndex:1},{value:"Components:",paraId:6,tocIndex:1},{value:"Data Points",paraId:7,tocIndex:1},{value:": Circles or other shapes representing each observation in the dataset",paraId:7,tocIndex:1},{value:"X-axis",paraId:7,tocIndex:1},{value:": The horizontal coordinate axis, usually representing the independent variable",paraId:7,tocIndex:1},{value:"Y-axis",paraId:7,tocIndex:1},{value:": The vertical coordinate axis, usually representing the dependent variable",paraId:7,tocIndex:1},{value:"Grid",paraId:7,tocIndex:1},{value:": Reference lines that assist in reading values",paraId:7,tocIndex:1},{value:"Legend",paraId:7,tocIndex:1},{value:": When there are multiple data series, explains the meaning of different points",paraId:7,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { height: 161, weight: 50 },\n    { height: 167, weight: 55 },\n    { height: 171, weight: 63 },\n    { height: 174, weight: 58 },\n    { height: 176, weight: 65 },\n    { height: 178, weight: 70 },\n    { height: 180, weight: 72 },\n    { height: 182, weight: 75 },\n    { height: 185, weight: 78 },\n    { height: 188, weight: 82 },\n  ],\n  encode: { x: 'height', y: 'weight' },\n  scale: { x: { range: [0, 1] }, y: { domainMin: 0, nice: true } },\n  children: [\n    {\n      type: 'point',\n      style: {\n        fill: '#1890ff',\n        fillOpacity: 0.7,\n        stroke: '#1890ff',\n        strokeWidth: 2,\n        r: 6,\n      },\n    },\n  ],\n  axis: {\n    x: { title: 'Height (cm)' },\n    y: { title: 'Weight (kg)' },\n  },\n});\n\nchart.render();\n",paraId:8,tocIndex:1},{value:"Scatter plots are particularly suitable for displaying data distribution and correlations between variables. The following four progressive examples demonstrate different applications of scatter plots:",paraId:9,tocIndex:3},{value:"The most basic scatter plot is used to show the distribution relationship between two continuous variables:",paraId:10,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value:\n      'https://assets.antv.antgroup.com/g2/top-30-countries-by-quality-of-life.json',\n  },\n  encode: { x: 'x', y: 'y' },\n  scale: { x: { domain: [137.5, 212] }, y: { domain: [0, 80] } },\n  labels: [{ text: 'name', fontSize: 10, dy: 6 }],\n  style: { mainStroke: '#5B8FF9', mainLineWidth: 2 },\n});\n\nchart.render();\n",paraId:11,tocIndex:4},{value:"Adding data annotations such as line and range annotations to help users better understand the data:",paraId:12,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'view',\n  data: {\n    type: 'fetch',\n    value:\n      'https://assets.antv.antgroup.com/g2/top-30-countries-by-quality-of-life.json',\n  },\n  style: { mainStroke: '#5B8FF9', mainLineWidth: 2 },\n  axis: { x: false, y: false },\n  children: [\n    {\n      type: 'range',\n      data: [\n        { x: [0, 0.5], y: [0, 0.5] },\n        { x: [0.5, 1], y: [0.5, 1] },\n      ],\n      encode: { x: 'x', y: 'y' },\n      scale: {\n        x: { independent: true, domain: [0, 1] },\n        y: { independent: true, domain: [0, 1] },\n      },\n      style: { stroke: '#5B8FF9', lineWidth: 1, fillOpacity: 0.15 },\n      animate: false,\n      tooltip: false,\n    },\n    {\n      type: 'point',\n      encode: { x: 'x', y: 'y', shape: 'point' },\n      scale: { x: { domain: [137.5, 212] }, y: { domain: [0, 80] } },\n      labels: [{ text: 'name', fontSize: 10, dy: 6 }],\n    },\n  ],\n});\n\nchart.render();\n",paraId:13,tocIndex:5},{value:"Using color channel to distinguish different categories of data:",paraId:14,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  },\n  encode: { x: 'height', y: 'weight', color: 'gender' },\n});\n\nchart.render();\n",paraId:15,tocIndex:6},{value:"You can also use custom data transform functions to preprocess data and add regression lines to show trend relationships between variables:",paraId:16,tocIndex:7},{value:"import { Chart } from '@antv/g2';\nimport { regressionLinear } from 'd3-regression';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/linear-regression.json',\n  },\n  children: [\n    {\n      type: 'point',\n      encode: { x: (d) => d[0], y: (d) => d[1], shape: 'point' },\n      scale: { x: { domain: [0, 1] }, y: { domain: [0, 5] } },\n      style: { fillOpacity: 0.75 },\n    },\n    {\n      type: 'line',\n      data: {\n        transform: [\n          {\n            type: 'custom',\n            callback: regressionLinear(),\n          },\n        ],\n      },\n      encode: { x: (d) => d[0], y: (d) => d[1] },\n      style: { stroke: '#30BF78', lineWidth: 2 },\n      labels: [\n        {\n          text: 'y = 1.7x+3.01',\n          selector: 'last',\n          position: 'right',\n          textAlign: 'end',\n          dy: -8,\n        },\n      ],\n      tooltip: false,\n    },\n  ],\n});\n\nchart.render();\n",paraId:17,tocIndex:7},{value:"When data points are heavily overlapped at certain positions, regular scatter plots cannot clearly show the true distribution of data. For example, the following chart shows a scatter plot with serious overlap issues:",paraId:18,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  },\n  encode: {\n    y: 'Horsepower',\n    x: 'Cylinders',\n    shape: 'hollow',\n    color: 'Cylinders',\n  },\n  transform: [{ type: 'sortX', channel: 'x' }],\n  scale: { x: { type: 'point' }, color: { type: 'ordinal' } },\n});\n\nchart.render();\n",paraId:19,tocIndex:9},{value:"Solution: Using Jitter Transform",paraId:20,tocIndex:9},{value:"Adding random offset to avoid overlap and make data distribution clearer:",paraId:21,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  },\n  encode: {\n    y: 'Horsepower',\n    x: 'Cylinders',\n    shape: 'hollow',\n    color: 'Cylinders',\n  },\n  transform: [{ type: 'sortX', channel: 'x' }, { type: 'jitterX' }],\n  scale: { x: { type: 'point' }, color: { type: 'ordinal' } },\n});\n\nchart.render();\n",paraId:22,tocIndex:9},{value:"Example 2: ",paraId:23,tocIndex:9},{value:"Unsuitable for Categorical Data Comparison",paraId:23,tocIndex:9},{value:"Scatter plots are not suitable for displaying numerical comparisons of categorical data. The following chart attempts to use a scatter plot to show sales of different products:",paraId:24,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { product: 'Product A', sales: 275 },\n    { product: 'Product B', sales: 115 },\n    { product: 'Product C', sales: 120 },\n    { product: 'Product D', sales: 350 },\n    { product: 'Product E', sales: 150 },\n  ],\n  encode: { x: 'product', y: 'sales' },\n  scale: { x: { range: [0, 1] }, y: { domainMin: 0, nice: true } },\n  children: [\n    {\n      type: 'point',\n      style: {\n        fill: '#1890ff',\n        fillOpacity: 0.8,\n        stroke: '#1890ff',\n        strokeWidth: 2,\n        r: 8,\n      },\n    },\n  ],\n  axis: {\n    x: { title: 'Product Type' },\n    y: { title: 'Sales' },\n  },\n  title: 'Inappropriate Usage: Using Scatter Plot for Categorical Data',\n});\n\nchart.render();\n",paraId:25,tocIndex:9},{value:"For categorical data comparison, ",paraId:26,tocIndex:9},{value:"bar charts",paraId:27,tocIndex:9},{value:" are more suitable:",paraId:26,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { product: 'Product A', sales: 275 },\n    { product: 'Product B', sales: 115 },\n    { product: 'Product C', sales: 120 },\n    { product: 'Product D', sales: 350 },\n    { product: 'Product E', sales: 150 },\n  ],\n  encode: { x: 'product', y: 'sales', color: 'product' },\n  axis: {\n    x: { title: 'Product Type' },\n    y: { title: 'Sales' },\n  },\n  title: 'Better Choice: Using Bar Chart for Categorical Data',\n});\n\nchart.render();\n",paraId:28,tocIndex:9},{value:"Add regression lines to more clearly show data trends:",paraId:29,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nconst data = [\n  { x: 1, y: 2.1 },\n  { x: 2, y: 3.8 },\n  { x: 3, y: 5.2 },\n  { x: 4, y: 6.9 },\n  { x: 5, y: 8.1 },\n  { x: 6, y: 9.8 },\n  { x: 7, y: 11.2 },\n  { x: 8, y: 13.1 },\n  { x: 9, y: 14.8 },\n  { x: 10, y: 16.5 },\n];\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data,\n  encode: { x: 'x', y: 'y' },\n  scale: { x: { range: [0, 1] }, y: { domainMin: 0, nice: true } },\n  children: [\n    {\n      type: 'point',\n      style: {\n        fill: '#1890ff',\n        fillOpacity: 0.8,\n        stroke: '#1890ff',\n        strokeWidth: 2,\n        r: 6,\n      },\n    },\n    {\n      type: 'line',\n      style: {\n        stroke: '#ff4d4f',\n        strokeWidth: 2,\n        strokeDasharray: [4, 4],\n      },\n    },\n  ],\n  axis: {\n    x: { title: 'X Variable' },\n    y: { title: 'Y Variable' },\n  },\n  title: 'Scatter Plot with Trend Line',\n});\n\nchart.render();\n",paraId:30,tocIndex:11},{value:"Add text labels to important data points to enhance data readability:",paraId:31,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nconst data = [\n  { product: 'Product A', satisfaction: 8.5, sales: 120, category: 'Technology' },\n  { product: 'Product B', satisfaction: 7.2, sales: 85, category: 'Home' },\n  { product: 'Product C', satisfaction: 9.1, sales: 200, category: 'Technology' },\n  { product: 'Product D', satisfaction: 6.8, sales: 95, category: 'Clothing' },\n  { product: 'Product E', satisfaction: 8.9, sales: 160, category: 'Technology' },\n  { product: 'Product F', satisfaction: 7.5, sales: 110, category: 'Home' },\n  { product: 'Product G', satisfaction: 6.2, sales: 70, category: 'Clothing' },\n  { product: 'Product H', satisfaction: 8.7, sales: 185, category: 'Technology' },\n];\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data,\n  encode: { x: 'satisfaction', y: 'sales', color: 'category' },\n  children: [\n    {\n      type: 'point',\n      style: {\n        r: 8,\n        fillOpacity: 0.8,\n        strokeWidth: 2,\n      },\n    },\n    {\n      type: 'text',\n      encode: { text: 'product' },\n      style: {\n        fontSize: 10,\n        textAlign: 'center',\n        dy: -12,\n        fontWeight: 'bold',\n      },\n    },\n  ],\n  axis: {\n    x: { title: 'Customer Satisfaction' },\n    y: { title: 'Sales (10k units)' },\n  },\n  legend: { color: { position: 'top' } },\n  title: 'Product Satisfaction vs Sales Analysis',\n});\n\nchart.render();\n",paraId:32,tocIndex:12},{value:"Use facet to create faceted scatter plots for easy comparison between different groups:",paraId:33,tocIndex:13},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nconst data = [\n  // 2020 data\n  { year: 2020, quarter: 'Q1', revenue: 120, profit: 15, company: 'Company A' },\n  { year: 2020, quarter: 'Q2', revenue: 135, profit: 18, company: 'Company A' },\n  { year: 2020, quarter: 'Q3', revenue: 145, profit: 22, company: 'Company A' },\n  { year: 2020, quarter: 'Q4', revenue: 160, profit: 25, company: 'Company A' },\n  { year: 2020, quarter: 'Q1', revenue: 95, profit: 12, company: 'Company B' },\n  { year: 2020, quarter: 'Q2', revenue: 110, profit: 14, company: 'Company B' },\n  { year: 2020, quarter: 'Q3', revenue: 125, profit: 18, company: 'Company B' },\n  { year: 2020, quarter: 'Q4', revenue: 140, profit: 21, company: 'Company B' },\n  // 2021 data\n  { year: 2021, quarter: 'Q1', revenue: 170, profit: 28, company: 'Company A' },\n  { year: 2021, quarter: 'Q2', revenue: 185, profit: 32, company: 'Company A' },\n  { year: 2021, quarter: 'Q3', revenue: 195, profit: 35, company: 'Company A' },\n  { year: 2021, quarter: 'Q4', revenue: 210, profit: 38, company: 'Company A' },\n  { year: 2021, quarter: 'Q1', revenue: 150, profit: 23, company: 'Company B' },\n  { year: 2021, quarter: 'Q2', revenue: 165, profit: 26, company: 'Company B' },\n  { year: 2021, quarter: 'Q3', revenue: 175, profit: 29, company: 'Company B' },\n  { year: 2021, quarter: 'Q4', revenue: 190, profit: 32, company: 'Company B' },\n];\n\nchart.options({\n  type: 'facetRect',\n  autoFit: true,\n  margin: 30,\n  data,\n  encode: { x: 'year' },\n  children: [\n    {\n      type: 'point',\n      encode: {\n        x: 'revenue',\n        y: 'profit',\n        color: 'company',\n        shape: 'quarter',\n      },\n      scale: {\n        shape: { range: ['circle', 'square', 'triangle', 'diamond'] },\n        x: { nice: true },\n        y: { nice: true },\n      },\n      style: {\n        r: 6,\n        fillOpacity: 0.8,\n        stroke: '#fff',\n        strokeWidth: 1,\n      },\n    },\n  ],\n  axis: {\n    x: { title: 'Revenue (10k)' },\n    y: { title: 'Profit (10k)' },\n  },\n  legend: {\n    color: { position: 'top' },\n    shape: { position: 'right' },\n  },\n  title: 'Company Revenue-Profit Relationship Annual Comparison',\n});\n\nchart.render();\n",paraId:34,tocIndex:13},{value:"Use multiple scatter plots to form a matrix, displaying correlations between multiple variables:",paraId:35,tocIndex:14},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\n// Generate correlation data\nconst generateCorrelationData = () => {\n  const data = [];\n  const variables = ['Sales', 'Ad Spend', 'Satisfaction'];\n\n  for (let i = 0; i < 50; i++) {\n    const sales = 100 + Math.random() * 200;\n    const advertising = sales * 0.1 + Math.random() * 20;\n    const satisfaction = 6 + (sales - 100) / 50 + Math.random() * 2;\n\n    data.push({\n      id: i,\n      Sales: sales,\n      'Ad Spend': advertising,\n      Satisfaction: Math.min(10, Math.max(1, satisfaction)),\n    });\n  }\n\n  return data;\n};\n\nconst rawData = generateCorrelationData();\n\n// Transform data to matrix format\nconst matrixData = [];\nconst variables = ['Sales', 'Ad Spend', 'Satisfaction'];\n\nvariables.forEach((xVar) => {\n  variables.forEach((yVar) => {\n    rawData.forEach((d) => {\n      matrixData.push({\n        xVar,\n        yVar,\n        x: d[xVar],\n        y: d[yVar],\n        id: d.id,\n      });\n    });\n  });\n});\n\nchart.options({\n  type: 'facetRect',\n  autoFit: true,\n  margin: 30,\n  data: matrixData,\n  encode: { x: 'xVar', y: 'yVar' },\n  children: [\n    {\n      type: 'point',\n      encode: { x: 'x', y: 'y' },\n      style: {\n        r: 3,\n        fillOpacity: 0.6,\n        fill: '#1890ff',\n        stroke: '#fff',\n        strokeWidth: 0.5,\n      },\n      scale: {\n        x: { nice: true },\n        y: { nice: true },\n      },\n    },\n  ],\n  axis: {\n    x: {\n      title: false,\n      labelFormatter: (d) => (typeof d === 'number' ? d.toFixed(0) : d),\n    },\n    y: {\n      title: false,\n      labelFormatter: (d) => (typeof d === 'number' ? d.toFixed(0) : d),\n    },\n  },\n  title: 'Multi-variable Correlation Matrix Scatter Plot',\n});\n\nchart.render();\n",paraId:36,tocIndex:14},{value:"Chart Type",paraId:37,tocIndex:15},{value:"Use Case",paraId:37,tocIndex:15},{value:"Advantages",paraId:37,tocIndex:15},{value:"Disadvantages",paraId:37,tocIndex:15},{value:"Scatter Plot",paraId:37,tocIndex:15},{value:"Explore variable relationships, outlier detection",paraId:37,tocIndex:15},{value:"Intuitive correlation display, easy pattern recognition",paraId:37,tocIndex:15},{value:"Point overlap with large datasets",paraId:37,tocIndex:15},{value:"Line Chart",paraId:37,tocIndex:15},{value:"Time series data, trend display",paraId:37,tocIndex:15},{value:"Clear trend visualization",paraId:37,tocIndex:15},{value:"Not suitable for variable correlation",paraId:37,tocIndex:15},{value:"Bar Chart",paraId:37,tocIndex:15},{value:"Categorical data comparison",paraId:37,tocIndex:15},{value:"Easy category comparison",paraId:37,tocIndex:15},{value:"Cannot show continuous variable relationships",paraId:37,tocIndex:15},{value:"Bubble Chart",paraId:37,tocIndex:15},{value:"Three-dimensional data display",paraId:37,tocIndex:15},{value:"More information content",paraId:37,tocIndex:15},{value:"Higher complexity, harder to interpret",paraId:37,tocIndex:15}]},44121:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(62914);const t=[{value:"\n## Introduction\n",paraId:0},{value:"A spiral chart is based on the Archimedes spiral coordinate system and is commonly used to plot time-varying data, drawing from the center of the spiral outward.",paraId:1},{value:"Spiral charts have two major advantages:",paraId:2},{value:"Plotting large amounts of data",paraId:3},{value:": Spiral charts save space and can be used to display trends in data over long time periods",paraId:3},{value:"Plotting periodic data",paraId:3},{value:": Each turn of the spiral chart has the same scale difference. When the scale difference of each turn is a multiple of the data period, it can intuitively express the periodicity of the data",paraId:3},{value:"By converting a linear time axis into a spiral shape in polar coordinates, spiral charts not only clearly show temporal trends but also highlight periodic patterns and outliers in the data. This representation offers unique visual advantages when handling large amounts of time series data, particularly suitable for observing data ",paraId:4},{value:"cycles",paraId:4},{value:" and change ",paraId:4},{value:"trends",paraId:4},{value:".",paraId:4},{value:"Chinese Name",paraId:5},{value:": 螺旋图",paraId:5},{value:"A spiral chart consists of several main components:\n",paraId:6,tocIndex:0},{value:"Chart Type",paraId:7,tocIndex:0},{value:"Spiral Chart",paraId:7,tocIndex:0},{value:"Suitable Data",paraId:7,tocIndex:0},{value:"One time data field, one continuous field",paraId:7,tocIndex:0},{value:"Function",paraId:7,tocIndex:0},{value:"Observe data ",paraId:7,tocIndex:0},{value:"cycles",paraId:7,tocIndex:0},{value:" and change ",paraId:7,tocIndex:0},{value:"trends",paraId:7,tocIndex:0},{value:"Data to Visual Mapping",paraId:7,tocIndex:0},{value:"Time data field maps to rotation angle θ axis, continuous field maps to coil spacing radius axis",paraId:7,tocIndex:0},{value:"Suitable Data Volume",paraId:7,tocIndex:0},{value:"100+ records",paraId:7,tocIndex:0},{value:"Example 1: ",paraId:8,tocIndex:2},{value:"Displaying Trends in Large Datasets",paraId:8,tocIndex:2},{value:"Due to the nonlinear nature of the spiral graph, it is not easy to accurately compare specific values ​​or rates of change.",paraId:9,tocIndex:2},{value:"import { Chart } from \"@antv/g2\";\n\n// 需要精确对比的数据示例\nconst data = [];\nconst categories = ['产品A', '产品B', '产品C', '产品D'];\ncategories.forEach((category, index) => {\n  for (let month = 1; month <= 12; month++) {\n    data.push({\n      time: `2023-${month.toString().padStart(2, '0')}`,\n      category: category,\n      sales: 80 + index * 5 + Math.random() * 10 // 接近的数值，需要精确比较\n    });\n  }\n});\n\nconst chart = new Chart({ \n  container: \"container\",\n  autoFit: true,\n  height: 400,\n  padding: [50, 50, 50, 50]\n});\n\nchart.options({\n  type: 'interval',\n  data,\n  coordinate: {\n    type: 'helix',\n    startAngle: 1 * Math.PI,\n    endAngle: 5 * Math.PI\n  },\n  encode: {\n    x: 'time',\n    y: 'sales',\n    color: 'category'\n  },\n  scale: {\n    color: { \n      palette: ['#1890ff', '#52c41a', '#fa8c16', '#f5222d']\n    },\n    time: {\n      type: 'time',\n      mask: 'yyyy.mm'\n    }\n  },\n  style: {\n    fillOpacity: 0.8\n  },\n\n});\n\nchart.render();\n",paraId:10,tocIndex:2},{value:"While spiral charts have many advantages, they also have some limitations:",paraId:11,tocIndex:3},{value:"1. Scenarios with Too Little Data",paraId:12,tocIndex:3},{value:"Spiral charts require sufficient data points (usually 100+ records) to form a complete spiral shape. If there's too little data, the spiral effect is not obvious, and regular line charts or scatter plots would be more appropriate.",paraId:13,tocIndex:3},{value:'import { Chart } from "@antv/g2";\n\nconst chart = new Chart({ container: "container" });\n\nchart.options({\n  type: "interval",\n  autoFit: true,\n  height: 500,\n  data: {\n    value: [\n      { time: "2025.07.11", value: 15 },\n      { time: "2025.07.12", value: 50 },\n      { time: "2025.07.13", value: 50 },\n      { time: "2025.07.14", value: 86 },\n      { time: "2025.07.15", value: 60 },\n    ],\n  },\n  encode: { x: "time", y: "value", color: "value" },\n  scale: { color: { type: "linear", range: ["#ffffff", "#1890FF"] } },\n  coordinate: {\n    type: "helix",\n    startAngle: 1.5707963267948966,\n    endAngle: 39.269908169872416,\n  },\n  animate: { enter: { type: "fadeIn" } },\n  tooltip: { title: "time" },\n});\n\nchart.render();\n\n',paraId:14,tocIndex:3},{value:"Better Line Chart Example:",paraId:15,tocIndex:3},{value:"import { Chart } from \"@antv/g2\";\n\n// Same 5-day data displayed as a line chart\nconst data = [];\nconst dates = ['2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04', '2023-01-05'];\nconst values = [45, 68, 52, 71, 59]; // Simulate 5 days of sales data\n\ndates.forEach((date, index) => {\n  data.push({\n    time: date,\n    value: values[index]\n  });\n});\n\nconst chart = new Chart({ \n  container: \"container\",\n  autoFit: true,\n  height: 400,\n  padding: [50, 50, 50, 50]\n});\n\nchart.options({\n  type: 'line',\n  data,\n  encode: {\n    x: 'time',\n    y: 'value'\n  },\n  scale: {\n    time: {\n      type: 'time',\n      mask: 'yyyy.mm.dd'\n    }\n  },\n  style: {\n    stroke: '#1890ff',\n    strokeWidth: 3,\n    lineJoin: 'round'\n  },\n  point: {\n    style: {\n      fill: '#1890ff',\n      stroke: '#ffffff',\n      strokeWidth: 2,\n      r: 6\n    }\n  },\n  axis: {\n    x: { \n      title: 'Time',\n      labelAutoRotate: false\n    },\n    y: { title: 'Sales' }\n  },\n  title: 'Recommended: Line Chart for Small Data Sets (5 days)'\n});\n\nchart.render();\n",paraId:16,tocIndex:3},{value:"2. Scenarios Requiring Precise Value Comparison",paraId:17,tocIndex:3},{value:"Due to the non-linear nature of spiral charts, they are not convenient for precise comparison of specific values or rates of change. In such cases, charts in a Cartesian coordinate system are more suitable.",paraId:18,tocIndex:3},{value:"import { Chart } from \"@antv/g2\";\n\n// Data requiring precise comparison\nconst data = [];\nconst categories = ['Product A', 'Product B', 'Product C', 'Product D'];\ncategories.forEach((category, index) => {\n  for (let month = 1; month <= 12; month++) {\n    data.push({\n      time: `2023-${month.toString().padStart(2, '0')}`,\n      category: category,\n      sales: 80 + index * 5 + Math.random() * 10 // Close values requiring precise comparison\n    });\n  }\n});\n\nconst chart = new Chart({ \n  container: \"container\",\n  autoFit: true,\n  height: 400,\n  padding: [50, 50, 50, 50]\n});\n\nchart.options({\n  type: 'interval',\n  data,\n  coordinate: {\n    type: 'helix',\n    startAngle: 1 * Math.PI,\n    endAngle: 5 * Math.PI\n  },\n  encode: {\n    x: 'time',\n    y: 'sales',\n    color: 'category'\n  },\n  scale: {\n    color: { \n      palette: ['#1890ff', '#52c41a', '#fa8c16', '#f5222d']\n    },\n    time: {\n      type: 'time',\n      mask: 'yyyy.mm'\n    }\n  },\n  style: {\n    fillOpacity: 0.8\n  },\n  title: 'Unsuitable Case: Difficult to Compare Precise Values'\n});\n\nchart.render();\n",paraId:19,tocIndex:3},{value:"Displaying spiral comparisons of multiple related data series:",paraId:20,tocIndex:5},{value:"import { Chart } from \"@antv/g2\";\n\n// Generate multi-layer spiral data\nconst data = [];\nconst series = ['Series A', 'Series B', 'Series C'];\n\nseries.forEach((seriesName, seriesIndex) => {\n  for (let i = 0; i < 120; i++) {\n    const angle = (i / 120) * 4 * Math.PI;\n    const baseRadius = 30 + seriesIndex * 15; // Different radius for different series\n    const radius = baseRadius + i * 0.8;\n    \n    // Different series have different data patterns\n    let value;\n    if (seriesIndex === 0) {\n      value = 50 + 20 * Math.sin(angle);\n    } else if (seriesIndex === 1) {\n      value = 45 + 25 * Math.cos(angle * 0.5);\n    } else {\n      value = 55 + 15 * Math.sin(angle * 2);\n    }\n    \n    value += Math.random() * 10;\n    \n    data.push({\n      time: i,\n      angle: angle * 180 / Math.PI,\n      radius: radius,\n      value: value,\n      series: seriesName\n    });\n  }\n});\n\nconst chart = new Chart({ \n  container: \"container\",\n  autoFit: true,\n  height: 600,\n  padding: [50, 50, 50, 50]\n});\n\nchart.options({\n  type: 'line',\n  data,\n  coordinate: { type: 'polar' },\n  encode: {\n    x: 'angle',\n    y: 'radius',\n    color: 'series'\n  },\n  scale: {\n    color: { \n      palette: ['#1890ff', '#52c41a', '#fa8c16']\n    },\n    x: { type: 'linear' },\n    y: { type: 'linear' }\n  },\n  style: {\n    strokeWidth: 2,\n    strokeOpacity: 0.8\n  },\n  axis: {\n    x: { title: null },\n    y: { title: 'Spiral Progress' }\n  },\n  legend: {\n    color: { title: 'Data Series' }\n  },\n  title: 'Multi-layer Spiral Comparison Chart'\n});\n\nchart.render();\n",paraId:21,tocIndex:5},{value:"Gene spiral charts are a specialized application of spiral charts in bioinformatics, commonly used to display patterns of gene expression data over time. Through the helical coordinate system, differences in gene expression under different conditions (such as wild-type WT and knockout KO) can be clearly observed:",paraId:22,tocIndex:6},{value:"import { Chart } from \"@antv/g2\";\n\n// Simulate gene expression data\nconst data = [];\nconst groups = ['WT', 'KO']; // Wild-type and knockout\nconst hours = 72; // 72-hour time series\nconst baseValues = {\n  WT: 2.0,   // Wild-type baseline expression level\n  KO: 2.3,   // Knockout baseline expression level\n};\n\nfor (let i = 0; i < hours; i++) {\n  const time = `${i}h`;\n  groups.forEach((group) => {\n    // Simulate cyclical changes and random fluctuations in gene expression\n    const cyclicPattern = Math.sin(i / 10) * 0.3; // Cyclical pattern\n    const randomNoise = Math.random() * 0.4 - 0.2; // Random noise\n    const trendFactor = group === 'KO' ? 0.1 : 0; // Knockout may have slight upward trend\n    \n    data.push({\n      time,\n      group,\n      logFPKM: baseValues[group] + cyclicPattern + randomNoise + (i * trendFactor / 100)\n    });\n  });\n}\n\nconst chart = new Chart({ \n  container: \"container\",\n  autoFit: true,\n  height: 600,\n  padding: [50, 50, 50, 50]\n});\n\nchart.options({\n  type: 'interval',\n  data,\n  coordinate: {\n    type: 'helix',\n    startAngle: 0.2 * Math.PI,\n    endAngle: 6.5 * Math.PI,\n    innerRadius: 0.1,\n  },\n  encode: {\n    x: 'time',\n    y: 'group',\n    color: 'logFPKM'\n  },\n  scale: {\n    color: {\n      type: 'linear',\n      range: ['#fff', '#ec4839']\n    }\n  },\n  style: {\n    fillOpacity: 0.8\n  },\n  tooltip: {\n    title: 'time',\n    items: [\n      { field: 'group', name: 'Group' },\n      {\n        field: 'logFPKM',\n        name: 'log(FPKM)',\n        valueFormatter: (value) => value.toFixed(2),\n      },\n    ],\n  },\n  animate: {\n    enter: { type: 'fadeIn', duration: 1000 }\n  },\n  axis: {\n    x: { title: 'Time Course' },\n    y: { title: 'Gene Group' }\n  },\n  legend: {\n    color: { title: 'Gene Expression Level log(FPKM)' }\n  },\n  title: 'Gene Expression Spiral Chart: WT vs KO (72 hours)'\n});\n\nchart.render();\n",paraId:23,tocIndex:6},{value:"This visualization approach is particularly suitable for:",paraId:24,tocIndex:6},{value:"Time-series Gene Expression Data",paraId:25,tocIndex:6},{value:": Displaying changes in gene expression over long time series",paraId:25,tocIndex:6},{value:"Multi-group Comparisons",paraId:25,tocIndex:6},{value:": Simultaneously comparing expression differences under different genotypes or treatment conditions",paraId:25,tocIndex:6},{value:"Periodic Pattern Recognition",paraId:25,tocIndex:6},{value:": Identifying circadian rhythms or other periodic patterns in gene expression",paraId:25,tocIndex:6},{value:"Expression Heatmap Display",paraId:25,tocIndex:6},{value:": Intuitively displaying expression intensity differences through color encoding",paraId:25,tocIndex:6},{value:"Line Chart",paraId:26,tocIndex:7},{value:"Spiral charts save space through spiral format, suitable for long time series data",paraId:27,tocIndex:8},{value:"Line charts display in linear coordinate system, more intuitively showing data change trends",paraId:27,tocIndex:8},{value:"Spiral charts better highlight periodic patterns, line charts are more suitable for analyzing precise temporal trends",paraId:27,tocIndex:8},{value:"Heatmap",paraId:28,tocIndex:8},{value:"Spiral charts show continuity of time series through spiral paths",paraId:29,tocIndex:9},{value:"Heatmaps show data density and patterns through color matrices",paraId:29,tocIndex:9},{value:"Spiral charts maintain temporal order, heatmaps are more suitable for displaying categorical data distributions",paraId:29,tocIndex:9}]},35577:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(31266);const t=[{value:"Stacked area charts are similar to basic area charts, with the key difference that each series starts from the cumulative total of the previous series. They display how each part contributes to the whole over time or across categories, emphasizing the part-to-whole relationship.",paraId:0,tocIndex:0},{value:"The overall area (top boundary) represents the total amount of all data. The stacked layers represent the magnitude of each series. Stacked area charts are particularly useful for showing how composition changes within a total. They are generally not suitable for datasets containing negative values. They are ideal for comparing multiple series over time.",paraId:1,tocIndex:0},{value:"Based on stacked area charts, if you normalize the total at each position to 100%, you get a percentage stacked area chart. While it does not reflect changes in the absolute total, it clearly shows how each category’s share changes over time or across ordered dimensions—very useful when analyzing large, time-varying, or ordered datasets.",paraId:2,tocIndex:0},{value:"Chart Type",paraId:3,tocIndex:1},{value:"Stacked Area Chart",paraId:3,tocIndex:1},{value:"Suitable Data",paraId:3,tocIndex:1},{value:"One categorical field, two continuous fields",paraId:3,tocIndex:1},{value:"Function",paraId:3,tocIndex:1},{value:"Compare the change/trend of each grouped series",paraId:3,tocIndex:1},{value:"Data-to-Visual Mapping",paraId:3,tocIndex:1},{value:"Two continuous fields mapped to the horizontal and vertical axes",paraId:3,tocIndex:1},{value:"Category mapped to color",paraId:3,tocIndex:1},{value:"Suitable Data Volume",paraId:3,tocIndex:1},{value:"No more than 12 categories mapped to color; at least two data points per category",paraId:3,tocIndex:1},{value:"Display the ",paraId:4,tocIndex:3},{value:"trend and proportion changes",paraId:4,tocIndex:3},{value:" of multiple series over time or categories.",paraId:4,tocIndex:3},{value:"Highlight the ",paraId:4,tocIndex:3},{value:"part-to-whole relationship",paraId:4,tocIndex:3},{value:".",paraId:4,tocIndex:3},{value:"Compare the ",paraId:4,tocIndex:3},{value:"cumulative changes",paraId:4,tocIndex:3},{value:" across series.",paraId:4,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', theme: 'classic' });\n\nchart.options({\n  type: 'area',\n  autoFit: true,\n  data: [\n    { country: 'Asia', year: '1750', value: 502 },\n    { country: 'Asia', year: '1800', value: 635 },\n    { country: 'Asia', year: '1850', value: 809 },\n    { country: 'Asia', year: '1900', value: 5268 },\n    { country: 'Asia', year: '1950', value: 4400 },\n    { country: 'Asia', year: '1999', value: 3634 },\n    { country: 'Asia', year: '2050', value: 947 },\n    { country: 'Africa', year: '1750', value: 106 },\n    { country: 'Africa', year: '1800', value: 107 },\n    { country: 'Africa', year: '1850', value: 111 },\n    { country: 'Africa', year: '1900', value: 1766 },\n    { country: 'Africa', year: '1950', value: 221 },\n    { country: 'Africa', year: '1999', value: 767 },\n    { country: 'Africa', year: '2050', value: 133 },\n    { country: 'Europe', year: '1750', value: 163 },\n    { country: 'Europe', year: '1800', value: 203 },\n    { country: 'Europe', year: '1850', value: 276 },\n    { country: 'Europe', year: '1900', value: 628 },\n    { country: 'Europe', year: '1950', value: 547 },\n    { country: 'Europe', year: '1999', value: 729 },\n    { country: 'Europe', year: '2050', value: 408 },\n    { country: 'Oceania', year: '1750', value: 200 },\n    { country: 'Oceania', year: '1800', value: 200 },\n    { country: 'Oceania', year: '1850', value: 200 },\n    { country: 'Oceania', year: '1900', value: 460 },\n    { country: 'Oceania', year: '1950', value: 230 },\n    { country: 'Oceania', year: '1999', value: 300 },\n    { country: 'Oceania', year: '2050', value: 300 },\n  ],\n  encode: { x: 'year', y: 'value', color: 'country' },\n  axis: { x: { title: false }, y: { title: false } },\n  transform: [\n    {\n      type: 'stackY',\n    },\n  ],\n});\n\nchart.render();\n",paraId:5,tocIndex:3},{value:"1. Avoid using stacked area charts for category comparisons",paraId:6,tocIndex:4},{value:"Stacked Area Chart (Not Recommended)",paraId:7,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', theme: 'classic' });\n\nchart.options({\n  type: 'area',\n  autoFit: true,\n  data: [\n    { year: '2001', genre: 'Strategy', sold: 11500 },\n    { year: '2001', genre: 'Sports', sold: 27500 },\n    { year: '2001', genre: 'Action', sold: 6000 },\n    { year: '2001', genre: 'Shooter', sold: 3500 },\n    { year: '2001', genre: 'Other', sold: 1500 },\n\n    { year: '2002', genre: 'Strategy', sold: 10500 },\n    { year: '2002', genre: 'Sports', sold: 29500 },\n    { year: '2002', genre: 'Action', sold: 8000 },\n    { year: '2002', genre: 'Shooter', sold: 4500 },\n    { year: '2002', genre: 'Other', sold: 1800 },\n\n    { year: '2003', genre: 'Strategy', sold: 12500 },\n    { year: '2003', genre: 'Sports', sold: 30500 },\n    { year: '2003', genre: 'Action', sold: 4000 },\n    { year: '2003', genre: 'Shooter', sold: 6500 },\n    { year: '2003', genre: 'Other', sold: 2000 },\n\n    { year: '2004', genre: 'Strategy', sold: 14500 },\n    { year: '2004', genre: 'Sports', sold: 31500 },\n    { year: '2004', genre: 'Action', sold: 5000 },\n    { year: '2004', genre: 'Shooter', sold: 6800 },\n    { year: '2004', genre: 'Other', sold: 1800 },\n  ],\n  encode: { x: 'year', y: 'sold', color: 'genre' },\n  axis: { x: { title: false }, y: { title: false } },\n  transform: [\n    {\n      type: 'stackY',\n    },\n  ],\n});\n\nchart.render();\n",paraId:8,tocIndex:4},{value:"Stacked Bar Chart (Recommended)",paraId:9,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', theme: 'classic' });\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { year: '2001', genre: 'Strategy', sold: 11500 },\n    { year: '2001', genre: 'Sports', sold: 27500 },\n    { year: '2001', genre: 'Action', sold: 6000 },\n    { year: '2001', genre: 'Shooter', sold: 3500 },\n    { year: '2001', genre: 'Other', sold: 1500 },\n\n    { year: '2002', genre: 'Strategy', sold: 10500 },\n    { year: '2002', genre: 'Sports', sold: 29500 },\n    { year: '2002', genre: 'Action', sold: 8000 },\n    { year: '2002', genre: 'Shooter', sold: 4500 },\n    { year: '2002', genre: 'Other', sold: 1800 },\n\n    { year: '2003', genre: 'Strategy', sold: 12500 },\n    { year: '2003', genre: 'Sports', sold: 30500 },\n    { year: '2003', genre: 'Action', sold: 4000 },\n    { year: '2003', genre: 'Shooter', sold: 6500 },\n    { year: '2003', genre: 'Other', sold: 2000 },\n\n    { year: '2004', genre: 'Strategy', sold: 14500 },\n    { year: '2004', genre: 'Sports', sold: 31500 },\n    { year: '2004', genre: 'Action', sold: 5000 },\n    { year: '2004', genre: 'Shooter', sold: 6800 },\n    { year: '2004', genre: 'Other', sold: 1800 },\n  ],\n  encode: { x: 'year', y: 'sold', color: 'genre' },\n  axis: { x: { title: false }, y: { title: false } },\n  transform: [\n    {\n      type: 'stackY',\n    },\n  ],\n});\n\nchart.render();\n",paraId:10,tocIndex:4},{value:"Normalize the total at each position to 100% to highlight proportion changes.",paraId:11,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { country: 'Asia', year: '1750', value: 502 },\n    { country: 'Asia', year: '1800', value: 635 },\n    { country: 'Asia', year: '1850', value: 809 },\n    { country: 'Asia', year: '1900', value: 947 },\n    { country: 'Asia', year: '1950', value: 1402 },\n    { country: 'Asia', year: '1999', value: 3634 },\n    { country: 'Asia', year: '2050', value: 5268 },\n    { country: 'Africa', year: '1750', value: 106 },\n    { country: 'Africa', year: '1800', value: 107 },\n    { country: 'Africa', year: '1850', value: 111 },\n    { country: 'Africa', year: '1900', value: 133 },\n    { country: 'Africa', year: '1950', value: 221 },\n    { country: 'Africa', year: '1999', value: 767 },\n    { country: 'Africa', year: '2050', value: 1766 },\n    { country: 'Europe', year: '1750', value: 163 },\n    { country: 'Europe', year: '1800', value: 203 },\n    { country: 'Europe', year: '1850', value: 276 },\n    { country: 'Europe', year: '1900', value: 408 },\n    { country: 'Europe', year: '1950', value: 547 },\n    { country: 'Europe', year: '1999', value: 729 },\n    { country: 'Europe', year: '2050', value: 628 },\n  ],\n  encode: { x: 'year', y: 'value', color: 'country' },\n  transform: [{ type: 'stackY' }, { type: 'normalizeY' }],\n  axis: { x: { title: false }, y: { title: false, labelFormatter: '.0%' } },\n  children: [\n    {\n      type: 'area',\n      tooltip: { items: [{ channel: 'y0', valueFormatter: '.0%' }] },\n    },\n    { type: 'line', tooltip: false },\n  ],\n});\n\nchart.render();\n",paraId:12,tocIndex:6},{value:"Use gradient fill to enhance visual appeal and highlight layering.",paraId:13,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'area',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/stocks.json',\n    transform: [\n      {\n        type: 'filter',\n        callback: (d) => d.symbol === 'GOOG',\n      },\n    ],\n  },\n  encode: {\n    x: (d) => new Date(d.date),\n    y: 'price',\n  },\n  style: {\n    fill: 'linear-gradient(-90deg, white 0%, darkgreen 100%)',\n  },\n  axis: { x: { title: false }, y: { title: false } },\n});\n\nchart.render();\n",paraId:14,tocIndex:7},{value:"A specific form of stacked area chart that symmetrically distributes layers around a central axis to present the flowing changes in data—especially suitable for showing how multiple categories change over time.",paraId:15,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'area',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/unemployment-by-industry.json',\n  },\n  encode: {\n    x: (d) => new Date(d.date),\n    y: 'unemployed',\n    color: 'industry',\n  },\n  transform: [\n    { type: 'stackY' },\n    { type: 'symmetryY' }, // symmetric distribution\n  ],\n  axis: { x: { title: false }, y: { title: false } },\n});\n\nchart.render();\n",paraId:16,tocIndex:8},{value:"Show layered effects across categories using special ordering and smooth curves to create a flowing look.",paraId:17,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'area',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f38a8ad0-6e1f-4bb3-894c-7db50781fdec.json',\n  },\n  encode: {\n    x: (d) => new Date(d.year),\n    y: 'revenue',\n    series: 'format',\n    color: 'group',\n    shape: 'smooth', // smooth curve\n  },\n  transform: [\n    {\n      type: 'stackY',\n      orderBy: 'maxIndex',\n      reverse: true,\n    },\n  ],\n  axis: {\n    x: { title: false },\n    y: { title: false, labelFormatter: '~s' },\n  },\n  tooltip: { channel: 'y', valueFormatter: '.2f' },\n});\n\nchart.render();\n",paraId:18,tocIndex:9},{value:"Area Charts",paraId:19,tocIndex:10},{value:"Area charts are suitable for displaying trends of a single series; stacked area charts are suitable for showing cumulative trends and proportions across multiple series.",paraId:20,tocIndex:11},{value:"Stacked Bar Charts",paraId:21,tocIndex:11},{value:"Both can present part-to-whole relationships. Stacked area charts are better for trend data; stacked bar charts are suitable for categorical comparisons.",paraId:22,tocIndex:12},{value:"Line Charts",paraId:23,tocIndex:12},{value:"Line charts are suitable for comparing precise values across series, while stacked area charts emphasize cumulative totals and proportions.",paraId:24,tocIndex:13}]},98302:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(72547);const t=[{value:"A stacked bar chart is an extension of the basic bar chart that displays categorical data by stacking multiple data series within a single bar. Each bar represents the total amount for a category, while the different colored segments within the bar represent the values of various subcategories. Stacked bar charts not only show the total quantity for each category but also display how each subcategory contributes to the total.",paraId:0,tocIndex:0},{value:"Stacked bar charts are particularly suitable for comparing the compositional structure of multiple categories and observing the distribution of subcategories across different main categories. Through color coding, users can easily identify different subcategories and compare their proportions within each main category.",paraId:1,tocIndex:0},{value:"When you need to display both totals and composition simultaneously, stacked bar charts are an excellent choice. They can be further extended to percentage stacked bar charts to show the relative proportions of each part.",paraId:2,tocIndex:0},{value:"Other Names",paraId:3,tocIndex:0},{value:": Stacked Column Chart",paraId:3,tocIndex:0},{value:"Chart Type",paraId:4,tocIndex:2},{value:"Vertical Stacked Bar Chart",paraId:4,tocIndex:2},{value:"Suitable Data",paraId:4,tocIndex:2},{value:"Multi-series categorical data: one categorical field, one continuous field, one series categorical field",paraId:4,tocIndex:2},{value:"Function",paraId:4,tocIndex:2},{value:"Compare totals of different categories and composition of subcategories",paraId:4,tocIndex:2},{value:"Data-to-Visual Mapping",paraId:4,tocIndex:2},{value:"Categorical field mapped to horizontal axis position",paraId:4,tocIndex:2},{value:"Numerical field mapped to bar height",paraId:4,tocIndex:2},{value:"Series field mapped to color, displayed stacked in the same bar",paraId:4,tocIndex:2},{value:"Suitable Data Volume",paraId:4,tocIndex:2},{value:"Main categories no more than 12, subcategories no more than 8",paraId:4,tocIndex:2},{value:"Chart Type",paraId:5,tocIndex:3},{value:"Horizontal Stacked Bar Chart",paraId:5,tocIndex:3},{value:"Suitable Data",paraId:5,tocIndex:3},{value:"Multi-series categorical data: one categorical field, one continuous field, one series categorical field",paraId:5,tocIndex:3},{value:"Function",paraId:5,tocIndex:3},{value:"Compare totals of different categories and composition of subcategories",paraId:5,tocIndex:3},{value:"Data-to-Visual Mapping",paraId:5,tocIndex:3},{value:"Categorical field mapped to vertical axis position",paraId:5,tocIndex:3},{value:"Numerical field mapped to bar width",paraId:5,tocIndex:3},{value:"Series field mapped to color",paraId:5,tocIndex:3},{value:"Suitable Data Volume",paraId:5,tocIndex:3},{value:"Main categories no more than 30, subcategories no more than 8",paraId:5,tocIndex:3},{value:"Example 1: ",paraId:6,tocIndex:5},{value:"Suitable for displaying monthly rainfall composition across multiple cities",paraId:6,tocIndex:5},{value:"The chart below shows the rainfall distribution in London and Berlin across different months, clearly showing both the total monthly rainfall and each city's contribution.",paraId:7,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { name: 'London', month: 'Jan.', rainfall: 18.9 },\n    { name: 'London', month: 'Feb.', rainfall: 28.8 },\n    { name: 'London', month: 'Mar.', rainfall: 39.3 },\n    { name: 'London', month: 'Apr.', rainfall: 81.4 },\n    { name: 'London', month: 'May', rainfall: 47 },\n    { name: 'London', month: 'Jun.', rainfall: 20.3 },\n    { name: 'London', month: 'Jul.', rainfall: 24 },\n    { name: 'London', month: 'Aug.', rainfall: 35.6 },\n    { name: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n    { name: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n    { name: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n    { name: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n    { name: 'Berlin', month: 'May', rainfall: 52.6 },\n    { name: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n    { name: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n    { name: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n  ],\n  encode: { x: 'month', y: 'rainfall', color: 'name' },\n  transform: [{ type: 'stackY' }],\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n      region: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:8,tocIndex:5},{value:"Explanation",paraId:9,tocIndex:5},{value:":",paraId:9,tocIndex:5},{value:"The ",paraId:10,tocIndex:5},{value:"month",paraId:10,tocIndex:5},{value:" field is mapped to horizontal axis position, representing the time dimension",paraId:10,tocIndex:5},{value:"The ",paraId:10,tocIndex:5},{value:"rainfall",paraId:10,tocIndex:5},{value:" field is mapped to bar height, stacked using the ",paraId:10,tocIndex:5},{value:"stackY",paraId:10,tocIndex:5},{value:" transform",paraId:10,tocIndex:5},{value:"The ",paraId:10,tocIndex:5},{value:"name",paraId:10,tocIndex:5},{value:" field is mapped to color to distinguish different cities",paraId:10,tocIndex:5},{value:"You can simultaneously compare total monthly rainfall and each city's contribution",paraId:10,tocIndex:5},{value:"Example 2: ",paraId:11,tocIndex:5},{value:"Suitable for displaying age structure comparison across regions",paraId:11,tocIndex:5},{value:"Stacked bar charts are very suitable for showing population age structure distribution across different regions, allowing you to see both total population and age composition.",paraId:12,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [{ type: 'stackY' }, { type: 'sortX', by: 'y', reverse: true }],\n  axis: {\n    x: {\n      labelSpacing: 4,\n      labelTransform: 'rotate(90)',\n    },\n    y: {\n      labelFormatter: '~s',\n      title: null,\n    },\n  },\n  legend: {\n    color: {\n      position: 'right',\n      title: 'Age Group',\n    },\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n      background: true,\n    },\n  ],\n});\n\nchart.render();\n",paraId:13,tocIndex:5},{value:"Explanation",paraId:14,tocIndex:5},{value:":",paraId:14,tocIndex:5},{value:"Uses ",paraId:15,tocIndex:5},{value:"sortX",paraId:15,tocIndex:5},{value:" transform to sort by total population for easier comparison",paraId:15,tocIndex:5},{value:"labelFormatter: '~s'",paraId:15,tocIndex:5},{value:" formats numeric display (e.g., 1M for 1 million)",paraId:15,tocIndex:5},{value:"Rotates x-axis labels to avoid overlap",paraId:15,tocIndex:5},{value:"Example 3: ",paraId:16,tocIndex:5},{value:"Horizontal stacked bar charts are suitable for scenarios with many categories",paraId:16,tocIndex:5},{value:"When there are many categories, horizontal stacked bar charts can better display labels and avoid text overlap.",paraId:17,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  width: 800,\n  height: 600,\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [{ type: 'stackY' }, { type: 'sortX', by: 'y', reverse: true }],\n  axis: {\n    y: {\n      labelFormatter: '~s',\n      title: null,\n    },\n    x: {\n      title: null,\n    },\n  },\n  legend: {\n    color: {\n      position: 'bottom',\n      title: 'Age Group',\n    },\n  },\n});\n\nchart.render();\n",paraId:18,tocIndex:5},{value:"Explanation",paraId:19,tocIndex:5},{value:":",paraId:19,tocIndex:5},{value:"Uses ",paraId:20,tocIndex:5},{value:"coordinate: { transform: [{ type: 'transpose' }] }",paraId:20,tocIndex:5},{value:" to achieve horizontal orientation",paraId:20,tocIndex:5},{value:"Labels can be arranged horizontally, improving readability",paraId:20,tocIndex:5},{value:"Suitable for data with many categories",paraId:20,tocIndex:5},{value:"Example 4: ",paraId:21,tocIndex:5},{value:"Percentage stacked bar charts display proportional relationships",paraId:21,tocIndex:5},{value:"When focusing on the proportion of each part rather than absolute values, percentage stacked bar charts are a better choice.",paraId:22,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  width: 800,\n  height: 600,\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'stackY' },\n    { type: 'normalizeY' },\n    { type: 'sortX', by: 'y', reverse: true },\n  ],\n  axis: {\n    y: {\n      labelFormatter: '.0%',\n      title: null,\n    },\n    x: {\n      title: null,\n    },\n  },\n  legend: {\n    color: {\n      position: 'bottom',\n      title: 'Age Group',\n    },\n  },\n  tooltip: {\n    channel: 'y0',\n    valueFormatter: '.0%',\n  },\n});\n\nchart.render();\n",paraId:23,tocIndex:5},{value:"Explanation",paraId:24,tocIndex:5},{value:":",paraId:24,tocIndex:5},{value:"Combines ",paraId:25,tocIndex:5},{value:"stackY",paraId:25,tocIndex:5},{value:" and ",paraId:25,tocIndex:5},{value:"normalizeY",paraId:25,tocIndex:5},{value:" transforms to achieve percentage stacking",paraId:25,tocIndex:5},{value:"labelFormatter: '.0%'",paraId:25,tocIndex:5},{value:" formats y-axis labels as percentages",paraId:25,tocIndex:5},{value:"Facilitates comparison of age structure proportions across states",paraId:25,tocIndex:5},{value:"Example 1: ",paraId:26,tocIndex:6},{value:"Not suitable for simple stacking of negative value data",paraId:26,tocIndex:6},{value:"Traditional stacked bar charts are not suitable for data containing negative values, as the stacking logic can cause visual confusion.",paraId:27,tocIndex:6},{value:"Example 2: ",paraId:28,tocIndex:6},{value:"Poor visual effect when there are too many subcategories",paraId:28,tocIndex:6},{value:"When the number of subcategories exceeds 8-10, color differentiation decreases, making it difficult for users to effectively distinguish and compare.",paraId:29,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\n// Simulate data with too many subcategories\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { category: 'A', type: 'Type1', value: 10 },\n    { category: 'A', type: 'Type2', value: 8 },\n    { category: 'A', type: 'Type3', value: 6 },\n    { category: 'A', type: 'Type4', value: 4 },\n    { category: 'A', type: 'Type5', value: 3 },\n    { category: 'A', type: 'Type6', value: 2 },\n    { category: 'A', type: 'Type7', value: 2 },\n    { category: 'A', type: 'Type8', value: 1 },\n    { category: 'A', type: 'Type9', value: 1 },\n    { category: 'A', type: 'Type10', value: 1 },\n    { category: 'A', type: 'Type11', value: 1 },\n    { category: 'A', type: 'Type12', value: 1 },\n    { category: 'B', type: 'Type1', value: 12 },\n    { category: 'B', type: 'Type2', value: 9 },\n    { category: 'B', type: 'Type3', value: 7 },\n    { category: 'B', type: 'Type4', value: 5 },\n    { category: 'B', type: 'Type5', value: 4 },\n    { category: 'B', type: 'Type6', value: 3 },\n    { category: 'B', type: 'Type7', value: 2 },\n    { category: 'B', type: 'Type8', value: 2 },\n    { category: 'B', type: 'Type9', value: 1 },\n    { category: 'B', type: 'Type10', value: 1 },\n    { category: 'B', type: 'Type11', value: 1 },\n    { category: 'B', type: 'Type12', value: 1 },\n  ],\n  encode: { x: 'category', y: 'value', color: 'type' },\n  transform: [{ type: 'stackY' }],\n});\n\nchart.render();\n",paraId:30,tocIndex:6},{value:'In such cases, it\'s recommended to merge smaller categories into an "Others" category or use other chart types.',paraId:31,tocIndex:6},{value:"Diverging stacked bar charts can display comparisons of positive and negative values, particularly suitable for showing profit/loss, increase/decrease contrasts.",paraId:32,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'view',\n  paddingLeft: 25,\n  children: [\n    {\n      type: 'interval',\n      data: {\n        type: 'fetch',\n        value: 'https://assets.antv.antgroup.com/g2/nivo-gain-lost.json',\n        transform: [\n          {\n            type: 'fold',\n            fields: [\n              'lost > 100$',\n              'lost <= 100$',\n              'gained <= 100$',\n              'gained > 100$',\n            ],\n          },\n        ],\n      },\n      encode: { x: 'user', y: 'value', color: 'key' },\n      transform: [{ type: 'stackY' }],\n      scale: {\n        x: { padding: 0.2 },\n        y: { domainMin: -100, domainMax: 100 },\n        color: {\n          domain: [\n            'lost > 100$',\n            'lost <= 100$',\n            'gained <= 100$',\n            'gained > 100$',\n          ],\n          range: ['#97e3d5', '#61cdbb', '#e25c3b', '#f47560'],\n        },\n      },\n      style: { radius: 10 },\n      axis: {\n        y: { position: 'right', title: false, labelFormatter: (v) => `${v}%` },\n      },\n      legend: { color: { title: false } },\n      labels: [\n        {\n          text: 'value',\n          position: 'inside',\n          formatter: (v) => (v ? `${v}%` : ''),\n          transform: [{ type: 'overlapDodgeY' }],\n          fill: '#000',\n          fontSize: 10,\n        },\n      ],\n    },\n    {\n      type: 'lineY',\n      data: [0],\n      style: { lineWidth: 2, stroke: '#e25c3b', strokeOpacity: 1 },\n    },\n    {\n      type: 'text',\n      style: {\n        x: -10,\n        y: '75%',\n        text: 'lost',\n        fontWeight: 'bold',\n        dy: -10,\n        transform: 'rotate(-90)',\n        fill: '#61cdbb',\n      },\n    },\n    {\n      type: 'text',\n      style: {\n        x: -10,\n        y: '20%',\n        text: 'gain',\n        fontWeight: 'bold',\n        dy: -10,\n        transform: 'rotate(-90)',\n        fill: '#e25c3b',\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:33,tocIndex:8},{value:"Explanation",paraId:34,tocIndex:8},{value:":",paraId:34,tocIndex:8},{value:"Uses positive and negative value data to show profit/loss comparison",paraId:35,tocIndex:8},{value:"Sets ",paraId:35,tocIndex:8},{value:"domainMin",paraId:35,tocIndex:8},{value:" and ",paraId:35,tocIndex:8},{value:"domainMax",paraId:35,tocIndex:8},{value:" to control axis range",paraId:35,tocIndex:8},{value:"Adds dividing line to highlight positive/negative value boundary",paraId:35,tocIndex:8},{value:"Uses rounded corner style to enhance visual effect",paraId:35,tocIndex:8},{value:"Bar Charts",paraId:36,tocIndex:9},{value:"Stacked bar charts show compositional relationships and totals of multiple subcategories",paraId:37,tocIndex:10},{value:"Regular bar charts are mainly used to compare single values across different categories",paraId:37,tocIndex:10},{value:"Stacked bar charts can simultaneously show part-to-whole relationships",paraId:37,tocIndex:10},{value:"Stacked Area Charts",paraId:38,tocIndex:10},{value:"Stacked bar charts are suitable for discrete categorical data comparison",paraId:39,tocIndex:11},{value:"Stacked area charts are suitable for continuous time series data trend display",paraId:39,tocIndex:11},{value:"Stacked bar charts are more convenient for precise numerical comparison",paraId:39,tocIndex:11},{value:"Pie Charts",paraId:40,tocIndex:11},{value:"Stacked bar charts can simultaneously compare composition across multiple categories",paraId:41,tocIndex:12},{value:"Pie charts can only show the composition proportion of a single whole",paraId:41,tocIndex:12},{value:"Stacked bar charts have advantages when comparing multiple categories",paraId:41,tocIndex:12}]},57802:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(147);const t=[{value:'A stem-and-leaf plot is a visualization chart used to display data distribution that retains original data information while intuitively showing the distribution shape. The stem-and-leaf plot organizes and displays data by decomposing it into "stems" (higher-order digits) and "leaves" (lower-order digits).',paraId:0,tocIndex:0},{value:"Stem-and-leaf plots differ from ",paraId:1,tocIndex:0},{value:"histograms",paraId:2,tocIndex:0},{value:" in that stem-and-leaf plots preserve the specific values of each data point, while histograms only show the frequency of data falling within intervals. Stem-and-leaf plots are particularly suitable for small to medium-sized datasets, as they can simultaneously display distribution shape, central tendency, and specific values.",paraId:1,tocIndex:0},{value:"When comparing the distribution of two groups of data, back-to-back bilateral stem-and-leaf plots can be used to clearly contrast the distribution characteristics of the two datasets.",paraId:3,tocIndex:0},{value:"English Name",paraId:4,tocIndex:0},{value:": Stem-and-Leaf Plot, Stem-and-Leaf Diagram",paraId:4,tocIndex:0},{value:"Chart Type",paraId:5,tocIndex:2},{value:"Single-Direction Stem-and-Leaf Plot",paraId:5,tocIndex:2},{value:"Suitable Data",paraId:5,tocIndex:2},{value:"List: A set of continuous numerical data",paraId:5,tocIndex:2},{value:"Function",paraId:5,tocIndex:2},{value:"Display data distribution shape while preserving original data information",paraId:5,tocIndex:2},{value:"Data-to-Visual Mapping",paraId:5,tocIndex:2},{value:"High-order digits of values serve as stems (arranged vertically)",paraId:5,tocIndex:2},{value:"Low-order digits of values serve as leaves (arranged horizontally)",paraId:5,tocIndex:2},{value:"Each row represents all data with the same stem value",paraId:5,tocIndex:2},{value:"Suitable Data Size",paraId:5,tocIndex:2},{value:"20-100 data points; other visualization methods are recommended for larger datasets",paraId:5,tocIndex:2},{value:"Chart Type",paraId:6,tocIndex:3},{value:"Bilateral Stem-and-Leaf Plot",paraId:6,tocIndex:3},{value:"Suitable Data",paraId:6,tocIndex:3},{value:"List: Two sets of continuous numerical data",paraId:6,tocIndex:3},{value:"Function",paraId:6,tocIndex:3},{value:"Compare distribution shapes and characteristics of two datasets",paraId:6,tocIndex:3},{value:"Data-to-Visual Mapping",paraId:6,tocIndex:3},{value:"Shared stems (arranged vertically in the center)",paraId:6,tocIndex:3},{value:"Left group data leaves arranged to the left",paraId:6,tocIndex:3},{value:"Right group data leaves arranged to the right",paraId:6,tocIndex:3},{value:"Different data groups distinguished by color",paraId:6,tocIndex:3},{value:"Suitable Data Size",paraId:6,tocIndex:3},{value:"20-50 data points per group",paraId:6,tocIndex:3},{value:"Components:",paraId:7,tocIndex:3},{value:"Stem",paraId:8,tocIndex:3},{value:": High-order digits of data, arranged vertically in the center of the chart",paraId:8,tocIndex:3},{value:"Leaf",paraId:8,tocIndex:3},{value:": Low-order digits of data, arranged horizontally on both sides of the stem",paraId:8,tocIndex:3},{value:"Separator Line",paraId:8,tocIndex:3},{value:": Vertical line separating left and right data groups",paraId:8,tocIndex:3},{value:"Title/Legend",paraId:8,tocIndex:3},{value:": Identifies the meaning of different data groups",paraId:8,tocIndex:3},{value:"Data Sorting",paraId:8,tocIndex:3},{value:": Leaves are typically arranged from small to large",paraId:8,tocIndex:3},{value:"Single-direction stem-and-leaf plots are suitable for displaying the distribution of a single group of data, clearly showing central tendency and distribution shape.",paraId:9,tocIndex:6},{value:"Example: ",paraId:10,tocIndex:6},{value:"Student Exam Score Distribution",paraId:10,tocIndex:6},{value:"The chart below shows the mathematics score distribution of a class:",paraId:11,tocIndex:6},{value:"Student Scores",paraId:12,tocIndex:6},{value:"65, 67, 69, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 85, 87, 89, 92, 93, 95",paraId:12,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\n// Single group data\nconst rawData = [\n  65, 67, 69, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 85, 87, 89, 92, 93, 95,\n];\n\n// Process single-direction stem-and-leaf plot data\nfunction processSingleStemLeaf(data) {\n  const stemMap = new Map();\n\n  data.forEach((score) => {\n    const stem = Math.floor(score / 10);\n    const leaf = score % 10;\n    if (!stemMap.has(stem)) {\n      stemMap.set(stem, []);\n    }\n    stemMap.get(stem).push(leaf);\n  });\n\n  // Sort leaves\n  Array.from(stemMap.values()).forEach((leaves) => {\n    leaves.sort((a, b) => a - b);\n  });\n\n  const stems = Array.from(stemMap.keys()).sort((a, b) => b - a); // Sort from large to small\n  const chartData = [];\n\n  stems.forEach((stem, index) => {\n    const yPos = index;\n    const leaves = stemMap.get(stem);\n\n    // Add stem\n    chartData.push({\n      x: 0.4,\n      y: yPos,\n      text: `${stem}`,\n      type: 'stem',\n      fill: '#333',\n      fontSize: 18,\n      fontWeight: 'bold',\n    });\n\n    // Add leaves\n    leaves.forEach((leaf, i) => {\n      chartData.push({\n        x: 0.47 + i * 0.04,\n        y: yPos,\n        text: `${leaf}`,\n        type: 'leaf',\n        fill: '#1890ff',\n        fontSize: 14,\n        fontWeight: 'normal',\n      });\n    });\n  });\n\n  return { chartData, maxY: stems.length };\n}\n\nconst { chartData, maxY } = processSingleStemLeaf(rawData);\n\nchart.options({\n  type: 'view',\n  data: chartData,\n  children: [\n    {\n      type: 'text',\n      encode: {\n        x: 'x',\n        y: 'y',\n        text: 'text',\n        fill: 'fill',\n        fontSize: 'fontSize',\n        fontWeight: 'fontWeight',\n      },\n      style: {\n        textAlign: 'center',\n        textBaseline: 'middle',\n      },\n    },\n  ],\n  scale: {\n    x: { domain: [0, 1], nice: false },\n    y: { domain: [-0.5, maxY - 0.5], nice: false },\n  },\n  axis: false,\n});\n\n// Add separator line using lineX method\nchart.lineX().data([0.45]).style({\n  lineWidth: 1,\n  stroke: '#333',\n  strokeOpacity: 0.6,\n});\n\nchart.render();\n",paraId:13,tocIndex:6},{value:"Explanation",paraId:14,tocIndex:6},{value:":",paraId:14,tocIndex:6},{value:"Stems represent the tens digit of scores (6, 7, 8, 9)",paraId:15,tocIndex:6},{value:"Leaves represent the ones digit of scores, arranged in ascending order",paraId:15,tocIndex:6},{value:"The chart shows that scores are mainly concentrated in the 70-80 range",paraId:15,tocIndex:6},{value:"Bilateral stem-and-leaf plots are particularly suitable for comparing distribution differences between two groups of data, intuitively showing the relative positions and distribution characteristics of both groups.",paraId:16,tocIndex:7},{value:"Example: ",paraId:17,tocIndex:7},{value:"Comparing Exam Score Distributions of Two Classes",paraId:17,tocIndex:7},{value:"The chart below shows a comparison of exam score distributions between Class A and Class B:",paraId:18,tocIndex:7},{value:"Data Group",paraId:19,tocIndex:7},{value:"Score Range",paraId:19,tocIndex:7},{value:"Class A",paraId:19,tocIndex:7},{value:"45-78",paraId:19,tocIndex:7},{value:"Class B",paraId:19,tocIndex:7},{value:"43-82",paraId:19,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nconst rawData = {\n  left: [\n    45, 47, 48, 52, 53, 55, 56, 57, 59, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72,\n    73, 74, 75, 76, 77, 78,\n  ],\n  right: [\n    43, 44, 46, 51, 54, 55, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 74,\n    75, 76, 77, 79, 82,\n  ],\n};\n\n// Process bilateral stem-and-leaf plot data\nfunction processDualStemLeaf(data) {\n  const stemMap = new Map();\n\n  ['left', 'right'].forEach((side) => {\n    data[side].forEach((score) => {\n      const stem = Math.floor(score / 10);\n      const leaf = score % 10;\n      if (!stemMap.has(stem)) {\n        stemMap.set(stem, { left: [], right: [] });\n      }\n      stemMap.get(stem)[side].push(leaf);\n    });\n  });\n\n  // Sort\n  Array.from(stemMap.values()).forEach((group) => {\n    group.left.sort((a, b) => b - a); // Left side descending\n    group.right.sort((a, b) => a - b); // Right side ascending\n  });\n\n  const stems = Array.from(stemMap.keys()).sort((a, b) => b - a); // Stems from large to small\n  const chartData = [];\n\n  stems.forEach((stem, index) => {\n    const yPos = index;\n    const { left, right } = stemMap.get(stem);\n\n    // Add stem\n    chartData.push({\n      x: 0.5,\n      y: yPos,\n      text: `${stem}`,\n      type: 'stem',\n      fill: '#333',\n      fontSize: 18,\n      fontWeight: 'bold',\n    });\n\n    // Add left leaves (Class A)\n    left.forEach((leaf, i) => {\n      chartData.push({\n        x: 0.45 - (i + 1) * 0.035,\n        y: yPos,\n        text: `${leaf}`,\n        type: 'leaf-left',\n        fill: '#1f77b4',\n        fontSize: 14,\n        fontWeight: 'normal',\n      });\n    });\n\n    // Add right leaves (Class B)\n    right.forEach((leaf, i) => {\n      chartData.push({\n        x: 0.55 + i * 0.035,\n        y: yPos,\n        text: `${leaf}`,\n        type: 'leaf-right',\n        fill: '#ff7f0e',\n        fontSize: 14,\n        fontWeight: 'normal',\n      });\n    });\n  });\n\n  // Add titles\n  chartData.push({\n    x: 0.35,\n    y: stems.length,\n    text: 'Class A',\n    type: 'title',\n    fill: '#1f77b4',\n    fontSize: 16,\n    fontWeight: 'bold',\n  });\n\n  chartData.push({\n    x: 0.65,\n    y: stems.length,\n    text: 'Class B',\n    type: 'title',\n    fill: '#ff7f0e',\n    fontSize: 16,\n    fontWeight: 'bold',\n  });\n\n  return { chartData, maxY: stems.length + 1 };\n}\n\nconst { chartData, maxY } = processDualStemLeaf(rawData);\n\nchart.options({\n  type: 'view',\n  data: chartData,\n  children: [\n    {\n      type: 'text',\n      encode: {\n        x: 'x',\n        y: 'y',\n        text: 'text',\n        fill: 'fill',\n        fontSize: 'fontSize',\n        fontWeight: 'fontWeight',\n      },\n      style: {\n        textAlign: 'center',\n        textBaseline: 'middle',\n      },\n    },\n    {\n      type: 'lineX',\n      data: [{ x: 0.47 }, { x: 0.53 }],\n      encode: {\n        x: 'x',\n      },\n      style: {\n        lineWidth: 2,\n        stroke: '#000',\n        strokeOpacity: 0.8,\n      },\n    },\n  ],\n  scale: {\n    x: { domain: [0, 1], nice: false },\n    y: { domain: [-0.5, maxY - 0.5], nice: false },\n  },\n  axis: false,\n});\n\nchart.render();\n",paraId:20,tocIndex:7},{value:"Explanation",paraId:21,tocIndex:7},{value:":",paraId:21,tocIndex:7},{value:"Stems represent the tens digit of scores, shared and displayed in the center",paraId:22,tocIndex:7},{value:"Left leaves represent Class A students' ones digits, arranged in descending order",paraId:22,tocIndex:7},{value:"Right leaves represent Class B students' ones digits, arranged in ascending order",paraId:22,tocIndex:7},{value:"Colors distinguish between the two classes' data",paraId:22,tocIndex:7},{value:"Clearly compares the score distribution differences between the two classes",paraId:22,tocIndex:7},{value:"When comparing data distributions across multiple categories, grouped stem-and-leaf plots can be used.",paraId:23,tocIndex:8},{value:"Example: ",paraId:24,tocIndex:8},{value:"Height Distribution Across Different Age Groups",paraId:24,tocIndex:8},{value:"The chart below shows height distributions for three age groups: teenagers, adults, and elderly:",paraId:25,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nconst ageGroupData = {\n  Teenagers: [155, 158, 160, 162, 165, 167, 168, 170, 172, 175],\n  Adults: [160, 163, 165, 168, 170, 172, 175, 177, 180, 182, 185],\n  Elderly: [150, 155, 158, 160, 162, 165, 167, 168, 170, 172],\n};\n\n// Process grouped stem-and-leaf plot data\nfunction processGroupedStemLeaf(data) {\n  const groups = Object.keys(data);\n  const colors = ['#1f77b4', '#ff7f0e', '#2ca02c'];\n  const chartData = [];\n  let currentY = 0;\n\n  groups.forEach((group, groupIndex) => {\n    const groupData = data[group];\n    const stemMap = new Map();\n\n    // Add group title\n    chartData.push({\n      x: 0.1,\n      y: currentY,\n      text: group,\n      type: 'group-title',\n      fill: colors[groupIndex],\n      fontSize: 16,\n      fontWeight: 'bold',\n    });\n    currentY += 0.5;\n\n    // Process data\n    groupData.forEach((height) => {\n      const stem = Math.floor(height / 10);\n      const leaf = height % 10;\n      if (!stemMap.has(stem)) {\n        stemMap.set(stem, []);\n      }\n      stemMap.get(stem).push(leaf);\n    });\n\n    // Sort leaves\n    Array.from(stemMap.values()).forEach((leaves) => {\n      leaves.sort((a, b) => a - b);\n    });\n\n    const stems = Array.from(stemMap.keys()).sort((a, b) => a - b);\n\n    stems.forEach((stem) => {\n      const leaves = stemMap.get(stem);\n\n      // Add stem\n      chartData.push({\n        x: 0.2,\n        y: currentY,\n        text: `${stem}`,\n        type: 'stem',\n        fill: '#333',\n        fontSize: 14,\n        fontWeight: 'bold',\n      });\n\n      // Add leaves\n      leaves.forEach((leaf, i) => {\n        chartData.push({\n          x: 0.27 + i * 0.03,\n          y: currentY,\n          text: `${leaf}`,\n          type: 'leaf',\n          fill: colors[groupIndex],\n          fontSize: 12,\n          fontWeight: 'normal',\n        });\n      });\n\n      currentY += 1;\n    });\n\n    currentY += 0.5; // Space between groups\n  });\n\n  return { chartData, maxY: currentY };\n}\n\nconst { chartData, maxY } = processGroupedStemLeaf(ageGroupData);\n\nchart.options({\n  type: 'view',\n  data: chartData,\n  children: [\n    {\n      type: 'text',\n      encode: {\n        x: 'x',\n        y: 'y',\n        text: 'text',\n        fill: 'fill',\n        fontSize: 'fontSize',\n        fontWeight: 'fontWeight',\n      },\n      style: {\n        textAlign: 'left',\n        textBaseline: 'middle',\n      },\n    },\n  ],\n  scale: {\n    x: { domain: [0, 1], nice: false },\n    y: { domain: [0, maxY], nice: false },\n  },\n  axis: false,\n});\n\n// Add separator line using lineX method\nchart.lineX().data([0.25]).style({\n  lineWidth: 1,\n  stroke: '#333',\n  strokeOpacity: 0.6,\n});\n\nchart.render();\n",paraId:26,tocIndex:8},{value:"Explanation",paraId:27,tocIndex:8},{value:":",paraId:27,tocIndex:8},{value:"Data is grouped and displayed by age group",paraId:28,tocIndex:8},{value:"Each group uses different colors for distinction",paraId:28,tocIndex:8},{value:"Clearly compares height distribution characteristics across different age groups",paraId:28,tocIndex:8},{value:"Suitable for displaying distribution comparisons of multiple category data",paraId:28,tocIndex:8},{value:"Example 1: ",paraId:29,tocIndex:9},{value:"Cases with excessive data volume",paraId:29,tocIndex:9},{value:"When data volume exceeds 100 points, stem-and-leaf plots become too crowded and difficult to read. In such cases, histograms or box plots are recommended.",paraId:30,tocIndex:9},{value:"Example 2: ",paraId:31,tocIndex:9},{value:"Cases with excessive data range",paraId:31,tocIndex:9},{value:"When data spans a very large range (e.g., from 1 to 10,000), the number of stems becomes excessive, making the chart overly long. It's recommended to group or transform the data appropriately first.",paraId:32,tocIndex:9},{value:"Example 3: ",paraId:33,tocIndex:9},{value:"Scenarios requiring precise numerical comparison",paraId:33,tocIndex:9},{value:"Although stem-and-leaf plots preserve original data, when precise numerical calculations and comparisons are needed, tabular format may be more suitable.",paraId:34,tocIndex:9},{value:"Histograms",paraId:35,tocIndex:10},{value:"Stem-and-Leaf Plots",paraId:36,tocIndex:11},{value:": Preserve specific values of each data point, showing both distribution shape and data integrity, but only suitable for small to medium-sized datasets",paraId:36,tocIndex:11},{value:"Histograms",paraId:36,tocIndex:11},{value:": Display data distribution through grouped intervals, can handle large amounts of data, but lose specific numerical information of original data",paraId:36,tocIndex:11},{value:"Box Plots",paraId:37,tocIndex:11},{value:"Stem-and-Leaf Plots",paraId:38,tocIndex:12},{value:": Show complete data distribution shape and each data point, convenient for identifying data patterns and specific positions of outliers",paraId:38,tocIndex:12},{value:"Box Plots",paraId:38,tocIndex:12},{value:": Display statistical characteristics of data distribution through five-number summary (minimum, Q1, median, Q3, maximum), more concise but with limited information",paraId:38,tocIndex:12},{value:"Scatter Plots",paraId:39,tocIndex:12},{value:"Stem-and-Leaf Plots",paraId:40,tocIndex:13},{value:": Focus on displaying single variable distribution, organizing data in an orderly manner through stem-leaf structure",paraId:40,tocIndex:13},{value:"Scatter Plots",paraId:40,tocIndex:13},{value:": Display relationships and correlations between two variables, more suitable for exploring association patterns between variables",paraId:40,tocIndex:13}]},19339:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(38099);const t=[{value:"A sunburst chart is a hierarchical data visualization that displays multi-level data structures using concentric circles. Each level is represented by a ring, where the inner and outer radii indicate the depth of the level, and the angular size represents the data values. Sunburst charts combine the advantages of pie charts and tree diagrams, using circular segmentation to display multi-level nested information structures.",paraId:0,tocIndex:0},{value:"Sunburst charts are particularly suitable for displaying hierarchical data with clear parent-child relationships, providing an intuitive view of proportional relationships and hierarchical structures between different levels. Through their circular layout, sunburst charts effectively showcase hierarchical relationships and proportional distributions in data, offering advantages over tree diagrams such as space efficiency and more intuitive overall visualization.",paraId:1,tocIndex:0},{value:"Sunburst charts also support drill-down interactions, allowing users to click on sectors to view detailed information at specific levels, making them an indispensable tool in business analysis, geographic research, and other fields.",paraId:2,tocIndex:0},{value:"Alternative Names",paraId:3,tocIndex:0},{value:": Radial Tree Chart, Multi-level Pie Chart",paraId:3,tocIndex:0},{value:"Chart Type",paraId:4,tocIndex:1},{value:"Sunburst Chart",paraId:4,tocIndex:1},{value:"Suitable Data",paraId:4,tocIndex:1},{value:"Hierarchical data: nested data structures with multi-level parent-child relationships",paraId:4,tocIndex:1},{value:"Function",paraId:4,tocIndex:1},{value:"Display proportional relationships and hierarchical structures in hierarchical data",paraId:4,tocIndex:1},{value:"Data to Visual Mapping",paraId:4,tocIndex:1},{value:"Hierarchical relationships mapped to concentric rings",paraId:4,tocIndex:1},{value:"Value sizes mapped to sector angles",paraId:4,tocIndex:1},{value:"Different categories distinguished by colors",paraId:4,tocIndex:1},{value:"Suitable Scenarios",paraId:4,tocIndex:1},{value:"Organizational structures, file systems, budget allocations, and other data with clear hierarchical relationships",paraId:4,tocIndex:1},{value:"Example 1: ",paraId:5,tocIndex:3},{value:"Displaying File System Hierarchy",paraId:5,tocIndex:3},{value:"The following chart shows a file system's hierarchical structure, where the sunburst chart clearly displays the size distribution of various folders and files.",paraId:6,tocIndex:3},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'sunburst',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  },\n  encode: {\n    value: 'sum',\n  },\n  animate: { enter: { type: 'waveIn' } },\n});\n\nchart.render();\n",paraId:7,tocIndex:3},{value:"Example 2: ",paraId:8,tocIndex:3},{value:"Displaying Budget Allocation Structure",paraId:8,tocIndex:3},{value:"Sunburst charts can clearly show budget allocation between different projects and sub-projects, helping managers understand resource distribution.",paraId:9,tocIndex:3},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'sunburst',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  },\n  encode: {\n    value: 'sum',\n  },\n  labels: [\n    {\n      text: 'name',\n      transform: [\n        {\n          type: 'overflowHide',\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:10,tocIndex:3},{value:"Example 1: ",paraId:11,tocIndex:4},{value:"Readability Issues with Excessive Hierarchy Depth",paraId:11,tocIndex:4},{value:"When hierarchy exceeds 4 levels, the outer sectors of sunburst charts become extremely small and difficult to identify. The following shows a 6-level deep sunburst chart where the outer layers are completely unrecognizable.",paraId:12,tocIndex:4},{value:"Sunburst Chart (Not Recommended)",paraId:13,tocIndex:4},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\n// Create deep hierarchy data (6 levels) - generated programmatically\nfunction generateDeepData() {\n  const createNode = (prefix, depth, maxDepth) => {\n    if (depth >= maxDepth) {\n      return {\n        label: `${prefix}-Leaf Node`,\n        count: Math.floor(Math.random() * 20) + 5,\n      };\n    }\n\n    const children = [];\n    const childCount = depth < 3 ? 3 : 2; // First 3 levels have 3 children each, subsequent levels have 2\n\n    for (let i = 1; i <= childCount; i++) {\n      children.push(createNode(`${prefix}-${i}`, depth + 1, maxDepth));\n    }\n\n    return {\n      label: `${prefix}`,\n      children: children,\n    };\n  };\n\n  return createNode('ROOT', 0, 6);\n}\n\nconst deepData = generateDeepData();\n\nchart.options({\n  type: 'sunburst',\n  data: { value: deepData },\n  encode: {\n    value: 'count',\n    text: 'label',\n  },\n  style: { radius: 4 }, // Small border radius\n  legend: false,\n});\n\nchart.render();\n",paraId:14,tocIndex:4},{value:"Treemap (Recommended)",paraId:15,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\n// Create deep hierarchy data (6 levels) - generated programmatically\nfunction generateDeepData() {\n  const createNode = (prefix, depth, maxDepth) => {\n    if (depth >= maxDepth) {\n      return {\n        name: `${prefix}-Leaf Node`,\n        value: Math.floor(Math.random() * 20) + 5,\n      };\n    }\n\n    const children = [];\n    const childCount = depth < 3 ? 3 : 2; // First 3 levels have 3 children each, subsequent levels have 2\n\n    for (let i = 1; i <= childCount; i++) {\n      children.push(createNode(`${prefix}-${i}`, depth + 1, maxDepth));\n    }\n\n    return {\n      name: `${prefix}`,\n      children: children,\n    };\n  };\n\n  return createNode('ROOT', 0, 6);\n}\n\nconst deepData = generateDeepData();\n\nchart.options({\n  type: 'treemap',\n  data: { value: deepData },\n  layout: {\n    path: (d) => d.name.replace(/\\./g, '/'),\n    tile: 'treemapBinary',\n    paddingInner: 1,\n  },\n  encode: {\n    value: 'value',\n  },\n  style: {\n    labelFill: '#000',\n    labelStroke: '#fff',\n    labelLineWidth: 1,\n    labelFontSize: 10,\n    labelPosition: 'top-left',\n    labelDx: 2,\n    labelDy: 2,\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:16,tocIndex:4},{value:"Explanation",paraId:17,tocIndex:4},{value:": When data hierarchy is too deep, the outer sectors of sunburst charts become extremely small, labels overlap severely, and users struggle to extract meaningful information. In such cases, ",paraId:17,tocIndex:4},{value:"treemaps",paraId:17,tocIndex:4},{value:" are recommended.",paraId:17,tocIndex:4},{value:"Example 2: ",paraId:18,tocIndex:4},{value:"Issues with Too Many Categories",paraId:18,tocIndex:4},{value:"When the second level contains more than 20 categories, both color distinction and angle perception in sunburst charts become difficult, with crowded and hard-to-read labels.",paraId:19,tocIndex:4},{value:"Sunburst Chart (Not Recommended)",paraId:20,tocIndex:4},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\n// Create hierarchical data with too many categories (25 subcategories in second level)\nconst manyData = {\n  label: 'Retail Chain Enterprise',\n  children: [\n    {\n      label: 'North China Region',\n      children: [\n        { label: 'Beijing Chaoyang Store', count: 142 },\n        { label: 'Beijing Haidian Store', count: 135 },\n        { label: 'Beijing Xicheng Store', count: 128 },\n        { label: 'Tianjin Binhai Store', count: 156 },\n        { label: 'Shijiazhuang Yuhua Store', count: 98 },\n        { label: 'Taiyuan Yingze Store', count: 89 },\n        { label: 'Hohhot Xincheng Store', count: 67 },\n      ],\n    },\n    {\n      label: 'East China Region',\n      children: [\n        { label: 'Shanghai Pudong Store', count: 189 },\n        { label: 'Shanghai Jingan Store', count: 167 },\n        { label: 'Hangzhou Xihu Store', count: 145 },\n        { label: 'Nanjing Gulou Store', count: 134 },\n        { label: 'Suzhou Park Store', count: 123 },\n        { label: 'Wuxi New District Store', count: 112 },\n        { label: 'Ningbo Haishu Store', count: 101 },\n        { label: 'Hefei Shushan Store', count: 95 },\n        { label: 'Fuzhou Gulou Store', count: 87 },\n        { label: 'Xiamen Siming Store', count: 79 },\n        { label: 'Nanchang Donghu Store', count: 72 },\n        { label: 'Jinan Lixia Store', count: 88 },\n        { label: 'Qingdao Shinan Store', count: 94 },\n        { label: 'Yantai Zhifu Store', count: 76 },\n        { label: 'Weifang Kuiwen Store', count: 68 },\n        { label: 'Linyi Lanshan Store', count: 63 },\n        { label: 'Zibo Zhangdian Store', count: 58 },\n        { label: 'Weihai Huancui Store', count: 54 },\n      ],\n    },\n  ],\n};\n\nchart.options({\n  type: 'sunburst',\n  data: { value: manyData },\n  encode: {\n    value: 'count',\n    text: 'label',\n  },\n  labels: [\n    {\n      text: 'name',\n    },\n  ],\n  legend: false,\n});\n\nchart.render();\n",paraId:21,tocIndex:4},{value:"Bar Chart (Recommended)",paraId:22,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nconst manyCategories = [\n  { category: 'Beijing Chaoyang Store', value: 142, group: 'North China' },\n  { category: 'Beijing Haidian Store', value: 135, group: 'North China' },\n  { category: 'Beijing Xicheng Store', value: 128, group: 'North China' },\n  { category: 'Tianjin Binhai Store', value: 156, group: 'North China' },\n  { category: 'Shijiazhuang Yuhua Store', value: 98, group: 'North China' },\n  { category: 'Taiyuan Yingze Store', value: 89, group: 'North China' },\n  { category: 'Hohhot Xincheng Store', value: 67, group: 'North China' },\n  { category: 'Shanghai Pudong Store', value: 189, group: 'East China' },\n  { category: 'Shanghai Jingan Store', value: 167, group: 'East China' },\n  { category: 'Hangzhou Xihu Store', value: 145, group: 'East China' },\n  { category: 'Nanjing Gulou Store', value: 134, group: 'East China' },\n  { category: 'Suzhou Park Store', value: 123, group: 'East China' },\n  { category: 'Wuxi New District Store', value: 112, group: 'East China' },\n  { category: 'Ningbo Haishu Store', value: 101, group: 'East China' },\n  { category: 'Hefei Shushan Store', value: 95, group: 'East China' },\n  { category: 'Fuzhou Gulou Store', value: 87, group: 'East China' },\n  { category: 'Xiamen Siming Store', value: 79, group: 'East China' },\n  { category: 'Nanchang Donghu Store', value: 72, group: 'East China' },\n  { category: 'Jinan Lixia Store', value: 88, group: 'East China' },\n  { category: 'Qingdao Shinan Store', value: 94, group: 'East China' },\n  { category: 'Yantai Zhifu Store', value: 76, group: 'East China' },\n  { category: 'Weifang Kuiwen Store', value: 68, group: 'East China' },\n  { category: 'Linyi Lanshan Store', value: 63, group: 'East China' },\n  { category: 'Zibo Zhangdian Store', value: 58, group: 'East China' },\n  { category: 'Weihai Huancui Store', value: 54, group: 'East China' },\n];\n\nchart.options({\n  type: 'interval',\n  data: manyCategories,\n  encode: { x: 'category', y: 'value', color: 'group' },\n  transform: [{ type: 'dodgeX' }],\n  coordinate: { transform: [{ type: 'transpose' }] },\n  legend: { color: { position: 'top' } },\n});\n\nchart.render();\n",paraId:23,tocIndex:4},{value:"Explanation",paraId:24,tocIndex:4},{value:": When sunburst charts contain too many categories (like the 25 stores shown above), the second-level sectors become too small in angle, labels overlap severely, colors are difficult to distinguish, and the visual effect becomes chaotic. In such cases, ",paraId:24,tocIndex:4},{value:"grouped bar charts",paraId:24,tocIndex:4},{value:" are recommended for clear comparison.",paraId:24,tocIndex:4},{value:"Example 3: ",paraId:25,tocIndex:4},{value:"Issues with Small Value Differences",paraId:25,tocIndex:4},{value:"When the value differences between second-level categories are very small, the angular differences in sunburst charts are not obvious, making effective comparison difficult.",paraId:26,tocIndex:4},{value:"Sunburst Chart (Not Recommended)",paraId:27,tocIndex:4},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\n// Create two-level data with very small value differences (second-level city sales differences within 1%)\nconst similarData = {\n  label: 'National Sales Network',\n  children: [\n    {\n      label: 'East China Region',\n      children: [\n        { label: 'Shanghai', count: 2997 },\n        { label: 'Hangzhou', count: 3001 },\n        { label: 'Nanjing', count: 2999 },\n        { label: 'Suzhou', count: 3003 },\n      ],\n    },\n    {\n      label: 'North China Region',\n      children: [\n        { label: 'Beijing', count: 2998 },\n        { label: 'Tianjin', count: 3002 },\n        { label: 'Shijiazhuang', count: 2996 },\n        { label: 'Jinan', count: 3004 },\n      ],\n    },\n  ],\n};\n\nchart.options({\n  type: 'sunburst',\n  data: { value: similarData },\n  encode: {\n    value: 'count',\n    text: 'label',\n  },\n  legend: { color: { position: 'bottom' } },\n});\n\nchart.render();\n",paraId:28,tocIndex:4},{value:"Bar Chart (Recommended)",paraId:29,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\n// Corresponding bar chart data (8 cities)\nconst smallDiffData = [\n  { category: 'Shanghai', value: 2997, group: 'East China' },\n  { category: 'Hangzhou', value: 3001, group: 'East China' },\n  { category: 'Nanjing', value: 2999, group: 'East China' },\n  { category: 'Suzhou', value: 3003, group: 'East China' },\n  { category: 'Beijing', value: 2998, group: 'North China' },\n  { category: 'Tianjin', value: 3002, group: 'North China' },\n  { category: 'Shijiazhuang', value: 2996, group: 'North China' },\n  { category: 'Jinan', value: 3004, group: 'North China' },\n];\n\nchart.options({\n  type: 'interval',\n  data: smallDiffData,\n  encode: { x: 'category', y: 'value', color: 'group' },\n  transform: [{ type: 'dodgeX' }],\n  axis: {\n    y: { nice: false, domain: [2990, 3010] }, // Narrow Y-axis range to highlight differences\n  },\n  legend: { color: { position: 'top' } },\n});\n\nchart.render();\n",paraId:30,tocIndex:4},{value:"Explanation",paraId:31,tocIndex:4},{value:": When value differences between categories are very small (like the city sales figures above ranging from 2996-3004, with differences less than 0.3%), the angular differences in sunburst charts are extremely minimal, making it impossible for users to visually perceive subtle value differences. In such cases, ",paraId:31,tocIndex:4},{value:"grouped bar charts",paraId:31,tocIndex:4},{value:" with adjusted Y-axis ranges are recommended to highlight the differences.",paraId:31,tocIndex:4},{value:"Adding labels to sunburst charts makes the data clearer and more readable:",paraId:32,tocIndex:6},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'sunburst',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  },\n  encode: {\n    value: 'sum',\n  },\n  labels: [\n    {\n      text: 'name',\n      transform: [\n        {\n          type: 'overflowHide',\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:33,tocIndex:6},{value:"By setting color channels, you can better distinguish different categories:",paraId:34,tocIndex:7},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'sunburst',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  },\n  encode: {\n    value: 'sum',\n    color: 'label',\n  },\n});\n\nchart.render();\n",paraId:35,tocIndex:7},{value:"You can customize the appearance of sunburst charts through style configuration:",paraId:36,tocIndex:8},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'sunburst',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  },\n  encode: {\n    value: 'sum',\n  },\n  style: {\n    radius: 8,\n    // Built-in opacity fillOpacity, calculated as 0.85 ** depth based on level\n    fillOpacity: (v) => v['fillOpacity'],\n    fill: (v) => {\n      if (v['path'] === 'Category 3') return 'red';\n      if (v['name'] === 'Category 2.1.1') return 'red';\n    },\n  },\n});\n\nchart.render();\n",paraId:37,tocIndex:8},{value:"Sunburst charts support drill-down interactions, allowing users to click on sectors for hierarchical navigation:",paraId:38,tocIndex:9},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'sunburst',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  },\n  encode: {\n    value: 'sum',\n  },\n  labels: [\n    {\n      text: 'name',\n      transform: [\n        {\n          type: 'overflowHide',\n        },\n      ],\n    },\n  ],\n  interaction: {\n    drillDown: {\n      breadCrumb: {\n        rootText: 'Start',\n        style: {\n          fontSize: '18px',\n          fill: '#333',\n        },\n        active: {\n          fill: 'red',\n        },\n      },\n      // FixedColor default: true, true -> drillDown update scale, false -> scale keep.\n      isFixedColor: false,\n    },\n  },\n  state: {\n    active: { zIndex: 2, stroke: 'red' },\n    inactive: { zIndex: 1, stroke: '#fff' },\n  },\n});\n\nchart.render();\n",paraId:39,tocIndex:9},{value:"Pie Charts",paraId:40,tocIndex:10},{value:"Sunburst charts can be viewed as multi-level pie charts, offering the following advantages over regular pie charts:",paraId:41,tocIndex:11},{value:"Can display multi-level hierarchical relationships, while pie charts only show single-level data",paraId:42,tocIndex:11},{value:"Better space utilization, displaying more information in one chart",paraId:42,tocIndex:11},{value:"Support drill-down interactions for layer-by-layer data exploration",paraId:42,tocIndex:11},{value:"When data has hierarchical structure, sunburst charts are more suitable than pie charts.",paraId:42,tocIndex:11},{value:"Both sunburst charts and treemaps can display hierarchical data, but with different characteristics:",paraId:43,tocIndex:12},{value:"Comparison Dimension",paraId:44,tocIndex:12},{value:"Sunburst Chart",paraId:44,tocIndex:12},{value:"Treemap",paraId:44,tocIndex:12},{value:"Visual Form",paraId:44,tocIndex:12},{value:"Circular layout",paraId:44,tocIndex:12},{value:"Rectangular layout",paraId:44,tocIndex:12},{value:"Space Utilization",paraId:44,tocIndex:12},{value:"Circular boundaries, lower space efficiency",paraId:44,tocIndex:12},{value:"Rectangular filling, higher space efficiency",paraId:44,tocIndex:12},{value:"Hierarchy Display",paraId:44,tocIndex:12},{value:"Concentric circles, clear hierarchical relationships",paraId:44,tocIndex:12},{value:"Nested rectangles, clear containment relationships",paraId:44,tocIndex:12},{value:"Proportion Perception",paraId:44,tocIndex:12},{value:"Angular comparison, moderate accuracy",paraId:44,tocIndex:12},{value:"Area comparison, more accurate",paraId:44,tocIndex:12},{value:"Use Cases",paraId:44,tocIndex:12},{value:"Emphasize hierarchical relationships and overall structure",paraId:44,tocIndex:12},{value:"Emphasize precise proportional comparisons",paraId:44,tocIndex:12},{value:"Donut charts can be viewed as two-level sunburst charts:",paraId:45,tocIndex:13},{value:"Advantages of Sunburst Charts over Donut Charts",paraId:46,tocIndex:13},{value:":",paraId:46,tocIndex:13},{value:"Support three or more levels of multi-level data",paraId:47,tocIndex:13},{value:"Can display more complex hierarchical relationships",paraId:47,tocIndex:13},{value:"More suitable for deep hierarchical data like organizational structures",paraId:47,tocIndex:13},{value:"Advantages of Donut Charts",paraId:48,tocIndex:13},{value:":",paraId:48,tocIndex:13},{value:"More concise and easier to understand",paraId:49,tocIndex:13},{value:"Clearer display for two-level data",paraId:49,tocIndex:13}]},49634:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(46856);const t=[{value:"A treemap is a visualization chart used to display hierarchical data through a series of nested rectangles representing tree-structured data. The area of each rectangle is proportional to its corresponding value, and colors are typically used to distinguish different categories or levels. Treemaps transform tree data structures into rectangular fills in planar space, providing an intuitive display of data hierarchy and value proportions.",paraId:0,tocIndex:0},{value:"Treemaps are particularly suitable for displaying large amounts of data with hierarchical relationships, such as file systems, organizational structures, budget allocations, and stock markets. Compared to traditional tree structure diagrams, treemaps can utilize space more effectively and have the capability to show proportions, enabling users to quickly understand data distribution and importance.",paraId:1,tocIndex:0},{value:"Treemaps also support interactive drill-down functionality, allowing users to click on a rectangular area to view detailed sub-items of that level, making it a powerful tool for data exploration and analysis.",paraId:2,tocIndex:0},{value:"English Name",paraId:3,tocIndex:0},{value:": Treemap",paraId:3,tocIndex:0},{value:"Chart Type",paraId:4,tocIndex:1},{value:"Treemap",paraId:4,tocIndex:1},{value:"Suitable Data",paraId:4,tocIndex:1},{value:"Hierarchical data: nested data with tree structure, including categorical and value fields",paraId:4,tocIndex:1},{value:"Function",paraId:4,tocIndex:1},{value:"Display proportional relationships and distribution of hierarchical data",paraId:4,tocIndex:1},{value:"Data-Visual Mapping",paraId:4,tocIndex:1},{value:"Hierarchy mapped to nested rectangles",paraId:4,tocIndex:1},{value:"Value size mapped to rectangle area",paraId:4,tocIndex:1},{value:"Different categories distinguished by color and position",paraId:4,tocIndex:1},{value:"Suitable Scenarios",paraId:4,tocIndex:1},{value:"File systems, organizational structures, budget allocations, stock portfolios with clear hierarchical relationships",paraId:4,tocIndex:1},{value:"Example 1: ",paraId:5,tocIndex:3},{value:"Displaying File System Structure",paraId:5,tocIndex:3},{value:"The following chart shows the hierarchical structure of a software project's file system. Through treemap visualization, you can clearly see the size distribution of various modules and files, helping developers understand the code structure.",paraId:6,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'treemap',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/flare-treemap.json',\n  },\n  layout: {\n    path: (d) => d.name.replace(/\\./g, '/'),\n    tile: 'treemapBinary',\n    paddingInner: 1,\n  },\n  encode: {\n    value: 'size',\n    color: (d) => d.parent?.data.name.split('.')[1] || 'root',\n  },\n  style: {\n    labelText: (d) => {\n      const name = d.data.name\n        .split('.')\n        .pop()\n        .split(/(?=[A-Z][a-z])/g)[0];\n      return name;\n    },\n    labelFill: '#000',\n    labelPosition: 'top-left',\n    labelDx: 3,\n    labelDy: 3,\n    fillOpacity: 0.7,\n  },\n  tooltip: {\n    title: (d) => d.path?.join?.('.') || d.data.name,\n    items: [{ field: 'value', name: 'Size' }],\n  },\n});\n\nchart.render();\n",paraId:7,tocIndex:3},{value:"Explanation",paraId:8,tocIndex:3},{value:":",paraId:8,tocIndex:3},{value:"Use ",paraId:9,tocIndex:3},{value:"path",paraId:9,tocIndex:3},{value:" configuration to transform flattened data into hierarchical structure",paraId:9,tocIndex:3},{value:"Set ",paraId:9,tocIndex:3},{value:"layout.tile",paraId:9,tocIndex:3},{value:" to ",paraId:9,tocIndex:3},{value:"treemapBinary",paraId:9,tocIndex:3},{value:" to use binary layout algorithm",paraId:9,tocIndex:3},{value:"Set ",paraId:9,tocIndex:3},{value:"paddingInner",paraId:9,tocIndex:3},{value:" for inner padding between rectangles to enhance visual separation",paraId:9,tocIndex:3},{value:"Example 2: ",paraId:10,tocIndex:3},{value:"Displaying Budget Allocation",paraId:10,tocIndex:3},{value:"Treemaps are excellent for showing budget allocation across different projects and sub-projects, helping managers quickly understand resource allocation.",paraId:11,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nconst budgetData = {\n  name: 'Annual Budget',\n  children: [\n    {\n      name: 'R&D Department',\n      children: [\n        { name: 'Frontend Development', value: 1200 },\n        { name: 'Backend Development', value: 1500 },\n        { name: 'Testing', value: 800 },\n        { name: 'Design', value: 600 },\n      ],\n    },\n    {\n      name: 'Marketing Department',\n      children: [\n        { name: 'Advertising', value: 2000 },\n        { name: 'Event Planning', value: 800 },\n        { name: 'Content Marketing', value: 500 },\n      ],\n    },\n    {\n      name: 'Operations Department',\n      children: [\n        { name: 'Customer Service', value: 700 },\n        { name: 'Data Analysis', value: 400 },\n        { name: 'Operations Support', value: 300 },\n      ],\n    },\n    { name: 'Other Expenses', value: 1200 },\n  ],\n};\n\nchart.options({\n  type: 'treemap',\n  data: { value: budgetData },\n  layout: {\n    tile: 'treemapSquarify',\n    paddingInner: 2,\n  },\n  encode: {\n    value: 'value',\n    color: (d) => d.path[1] || d.data.name,\n  },\n  style: {\n    labelText: (d) => d.data.name,\n    labelFill: '#fff',\n    labelStroke: '#000',\n    labelLineWidth: 0.5,\n    labelFontSize: 12,\n  },\n  tooltip: {\n    title: (d) => d.data.name,\n    items: [\n      { field: 'value', name: 'Budget', valueFormatter: (v) => `${v}k USD` },\n    ],\n  },\n});\n\nchart.render();\n",paraId:12,tocIndex:3},{value:"Explanation",paraId:13,tocIndex:3},{value:":",paraId:13,tocIndex:3},{value:"Use hierarchical structure data, no need to configure ",paraId:14,tocIndex:3},{value:"path",paraId:14,tocIndex:3},{value:"tile: 'treemapSquarify'",paraId:14,tocIndex:3},{value:" uses golden ratio algorithm, producing rectangles closer to squares",paraId:14,tocIndex:3},{value:"Center labels with ",paraId:14,tocIndex:3},{value:"labelPosition: 'center'",paraId:14,tocIndex:3},{value:"Example 3: ",paraId:15,tocIndex:3},{value:"Displaying Sales Data Hierarchy",paraId:15,tocIndex:3},{value:"Treemaps can effectively show multi-level sales data structure, from regions to product categories to specific products.",paraId:16,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nconst salesData = {\n  name: 'National Sales',\n  children: [\n    {\n      name: 'East Region',\n      children: [\n        {\n          name: 'Digital Products',\n          children: [\n            { name: 'Smartphones', value: 3200 },\n            { name: 'Computers', value: 2800 },\n            { name: 'Tablets', value: 1500 },\n          ],\n        },\n        {\n          name: 'Home Appliances',\n          children: [\n            { name: 'Refrigerators', value: 2100 },\n            { name: 'Washing Machines', value: 1800 },\n            { name: 'Air Conditioners', value: 2500 },\n          ],\n        },\n      ],\n    },\n    {\n      name: 'North Region',\n      children: [\n        {\n          name: 'Digital Products',\n          children: [\n            { name: 'Smartphones', value: 2800 },\n            { name: 'Computers', value: 2400 },\n            { name: 'Tablets', value: 1200 },\n          ],\n        },\n        {\n          name: 'Home Appliances',\n          children: [\n            { name: 'Refrigerators', value: 1900 },\n            { name: 'Washing Machines', value: 1600 },\n            { name: 'Air Conditioners', value: 2200 },\n          ],\n        },\n      ],\n    },\n    {\n      name: 'South Region',\n      children: [\n        { name: 'Digital Products', value: 2200 },\n        { name: 'Home Appliances', value: 1800 },\n      ],\n    },\n  ],\n};\n\nchart.options({\n  type: 'treemap',\n  data: { value: salesData },\n  layout: {\n    tile: 'treemapSliceDice',\n    paddingInner: 3,\n    layer: 2, // Show only first two layers\n  },\n  encode: {\n    value: 'value',\n    color: (d) => d.path[1] || 'default',\n  },\n  style: {\n    labelText: (d) => {\n      const name = d.data.name;\n      const value = d.value;\n      return d.depth <= 1 ? `${name}\\n${Math.round(value)}k` : name;\n    },\n    labelFill: '#000',\n    labelFontSize: (d) =>\n      Math.max(10, Math.min(16, Math.sqrt(d.x1 - d.x0) * 2)),\n    stroke: '#fff',\n    lineWidth: 2,\n  },\n  interaction: {\n    treemapDrillDown: {\n      breadCrumbY: 12,\n      activeFill: '#873bf4',\n      breadCrumbFill: 'rgba(0, 0, 0, 0.85)',\n      breadCrumbFontSize: 12,\n    },\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:17,tocIndex:3},{value:"Example 1: ",paraId:18,tocIndex:4},{value:"Data Comparison with Minimal Value Differences",paraId:18,tocIndex:4},{value:"When data values have very small differences, the area differences in treemaps are not noticeable, making it difficult for users to perceive subtle value variations.",paraId:19,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\n// Data with very small differences\nconst similarData = {\n  name: 'Regional Sales (Similar Values)',\n  children: [\n    { name: 'Beijing', value: 9995 },\n    { name: 'Shanghai', value: 10001 },\n    { name: 'Guangzhou', value: 9999 },\n    { name: 'Shenzhen', value: 10003 },\n    { name: 'Hangzhou', value: 9997 },\n    { name: 'Nanjing', value: 10002 },\n  ],\n};\n\nchart.options({\n  type: 'treemap',\n  data: { value: similarData },\n  encode: { value: 'value' },\n  style: {\n    labelText: (d) => `${d.data.name}\\n${d.value}`,\n    labelFill: '#000',\n  },\n});\n\nchart.render();\n",paraId:20,tocIndex:4},{value:"Bar Chart (Recommended)",paraId:21,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nconst similarDataFlat = [\n  { name: 'Beijing', value: 9995 },\n  { name: 'Shanghai', value: 10001 },\n  { name: 'Guangzhou', value: 9999 },\n  { name: 'Shenzhen', value: 10003 },\n  { name: 'Hangzhou', value: 9997 },\n  { name: 'Nanjing', value: 10002 },\n];\n\nchart.options({\n  type: 'interval',\n  data: similarDataFlat,\n  encode: { x: 'name', y: 'value', color: 'name' },\n  axis: {\n    y: { nice: false, domain: [9990, 10010] }, // Narrow Y-axis range to highlight differences\n  },\n});\n\nchart.render();\n",paraId:22,tocIndex:4},{value:"Explanation",paraId:23,tocIndex:4},{value:": When data value differences are less than 5%, treemap area differences are barely perceptible. In such cases, bar charts with adjusted Y-axis ranges are recommended to highlight the differences.",paraId:23,tocIndex:4},{value:"Example 2: ",paraId:24,tocIndex:4},{value:"Simple Categorical Data Without Hierarchy",paraId:24,tocIndex:4},{value:"For simple categorical data without hierarchical relationships, treemaps appear overly complex compared to pie charts or bar charts.",paraId:25,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\n// Simple categorical data without hierarchy\nconst simpleData = {\n  name: 'Product Sales',\n  children: [\n    { name: 'Product A', value: 230 },\n    { name: 'Product B', value: 180 },\n    { name: 'Product C', value: 150 },\n    { name: 'Product D', value: 120 },\n  ],\n};\n\nchart.options({\n  type: 'treemap',\n  data: { value: simpleData },\n  encode: { value: 'value' },\n  style: {\n    labelText: (d) => d.data.name,\n    labelFill: '#000',\n  },\n});\n\nchart.render();\n",paraId:26,tocIndex:4},{value:"Pie Chart (Recommended)",paraId:27,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nconst simpleDataFlat = [\n  { name: 'Product A', value: 230 },\n  { name: 'Product B', value: 180 },\n  { name: 'Product C', value: 150 },\n  { name: 'Product D', value: 120 },\n];\n\nchart.options({\n  type: 'interval',\n  data: simpleDataFlat,\n  encode: { y: 'value', color: 'name' },\n  transform: [{ type: 'stackY' }],\n  coordinate: { type: 'theta' },\n  legend: {\n    color: { position: 'right' },\n  },\n});\n\nchart.render();\n",paraId:28,tocIndex:4},{value:"Explanation",paraId:29,tocIndex:4},{value:": For simple categorical proportion data, pie charts can more intuitively show the proportion relationship of each part within the whole.",paraId:29,tocIndex:4},{value:"One of the most powerful features of treemaps is support for drill-down interaction, allowing users to click on an area to explore detailed information at that level:",paraId:30,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nconst drillDownData = {\n  name: 'Products',\n  children: [\n    {\n      name: 'Stationery',\n      children: [\n        {\n          name: 'Pens',\n          children: [\n            { name: 'Pencils', value: 430 },\n            { name: 'Ballpoint Pens', value: 530 },\n            { name: 'Fountain Pens', value: 80 },\n            { name: 'Markers', value: 130 },\n          ],\n        },\n        { name: 'Notebooks', value: 160 },\n        { name: 'Folders', value: 90 },\n        { name: 'Others', value: 80 },\n      ],\n    },\n    {\n      name: 'Snacks',\n      children: [\n        { name: 'Cookies', value: 280 },\n        { name: 'Spicy Strips', value: 150 },\n        { name: 'Candy', value: 210 },\n        {\n          name: 'Beverages',\n          children: [\n            { name: 'Cola', value: 122 },\n            { name: 'Mineral Water', value: 244 },\n            { name: 'Juice', value: 49 },\n            { name: 'Milk', value: 82 },\n          ],\n        },\n        { name: 'Others', value: 40 },\n      ],\n    },\n    { name: 'Other Products', value: 450 },\n  ],\n};\n\nchart.options({\n  type: 'treemap',\n  data: { value: drillDownData },\n  layout: {\n    tile: 'treemapBinary',\n    paddingInner: 5,\n  },\n  encode: { value: 'value' },\n  style: {\n    labelFill: '#000',\n    labelStroke: '#fff',\n    labelLineWidth: 1.5,\n    labelFontSize: 14,\n    labelPosition: 'top-left',\n    labelDx: 5,\n    labelDy: 5,\n  },\n  interaction: {\n    treemapDrillDown: {\n      breadCrumbY: 12,\n      activeFill: '#873bf4',\n      breadCrumbFill: 'rgba(0, 0, 0, 0.85)',\n      breadCrumbFontSize: 12,\n    },\n  },\n  tooltip: {\n    title: (d) => d.data.name,\n    items: [{ field: 'value', name: 'Quantity' }],\n  },\n});\n\nchart.render();\n",paraId:31,tocIndex:6},{value:"Through rich style configurations, you can create personalized treemaps:",paraId:32,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nconst customData = {\n  name: 'Tech Stack',\n  children: [\n    {\n      name: 'Frontend',\n      children: [\n        { name: 'React', value: 45 },\n        { name: 'Vue', value: 35 },\n        { name: 'Angular', value: 20 },\n      ],\n    },\n    {\n      name: 'Backend',\n      children: [\n        { name: 'Node.js', value: 40 },\n        { name: 'Python', value: 35 },\n        { name: 'Java', value: 25 },\n      ],\n    },\n    {\n      name: 'Database',\n      children: [\n        { name: 'MySQL', value: 50 },\n        { name: 'MongoDB', value: 30 },\n        { name: 'Redis', value: 20 },\n      ],\n    },\n  ],\n};\n\nchart.options({\n  type: 'treemap',\n  data: { value: customData },\n  layout: {\n    tile: 'treemapResquarify',\n    paddingInner: 4,\n    paddingOuter: 2,\n  },\n  encode: {\n    value: 'value',\n    color: (d) => d.path[1] || 'default',\n  },\n  scale: {\n    color: {\n      range: ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD'],\n    },\n  },\n  style: {\n    labelText: (d) => d.data.name,\n    labelFill: '#fff',\n    labelStroke: '#000',\n    labelLineWidth: 1,\n    labelFontSize: (d) => Math.max(10, Math.min(18, (d.x1 - d.x0) * 0.1)),\n    labelFontWeight: 'bold',\n    stroke: '#fff',\n    lineWidth: 3,\n    radius: 4, // Rounded corners\n    fillOpacity: 0.9,\n    shadowColor: 'rgba(0, 0, 0, 0.1)',\n    shadowBlur: 4,\n    shadowOffsetX: 2,\n    shadowOffsetY: 2,\n  },\n  interaction: [\n    {\n      type: 'elementHighlight',\n    },\n  ],\n});\n\nchart.render();\n",paraId:33,tocIndex:7},{value:"Gradient colors can enhance the visual effect of treemaps:",paraId:34,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n  autoFit: true,\n});\n\nconst gradientData = {\n  name: 'Market Share',\n  children: [\n    { name: 'Alibaba', value: 28 },\n    { name: 'Tencent', value: 25 },\n    { name: 'ByteDance', value: 18 },\n    { name: 'Meituan', value: 15 },\n    { name: 'JD.com', value: 12 },\n    { name: 'Baidu', value: 10 },\n    { name: 'NetEase', value: 8 },\n    { name: 'Xiaomi', value: 7 },\n    { name: 'DiDi', value: 6 },\n    { name: 'PDD', value: 5 },\n    { name: 'Sina', value: 4 },\n    { name: 'Sohu', value: 3 },\n    { name: '360', value: 2 },\n    { name: 'Others', value: 7 },\n  ],\n};\n\nchart.options({\n  type: 'treemap',\n  data: { value: gradientData },\n  layout: {\n    tile: 'treemapSquarify',\n    paddingInner: 3,\n  },\n  encode: {\n    value: 'value',\n    color: 'value',\n  },\n  scale: {\n    color: {\n      type: 'sequential',\n      range: ['#E8F4FD', '#1890FF'],\n    },\n  },\n  style: {\n    labelText: (d) => `${d.data.name}\\n${d.value}%`,\n    labelFill: (d) => (d.value > 20 ? '#fff' : '#000'),\n    labelFontSize: 14,\n    labelFontWeight: 'bold',\n    stroke: '#fff',\n    lineWidth: 2,\n  },\n  tooltip: {\n    title: (d) => d.data.name,\n    items: [\n      { field: 'value', name: 'Market Share', valueFormatter: (v) => `${v}%` },\n    ],\n  },\n});\n\nchart.render();\n",paraId:35,tocIndex:8},{value:"Sunburst",paraId:36,tocIndex:9},{value:"Both treemaps and sunburst charts can display hierarchical data, but have different characteristics:",paraId:37,tocIndex:10},{value:"Comparison Dimension",paraId:38,tocIndex:10},{value:"Treemap",paraId:38,tocIndex:10},{value:"Sunburst Chart",paraId:38,tocIndex:10},{value:"Visual Form",paraId:38,tocIndex:10},{value:"Rectangular layout",paraId:38,tocIndex:10},{value:"Circular layout",paraId:38,tocIndex:10},{value:"Space Utilization",paraId:38,tocIndex:10},{value:"Rectangle filling, high efficiency",paraId:38,tocIndex:10},{value:"Circular boundary, lower efficiency",paraId:38,tocIndex:10},{value:"Proportion Perception",paraId:38,tocIndex:10},{value:"Area comparison, more accurate",paraId:38,tocIndex:10},{value:"Angle comparison, moderate",paraId:38,tocIndex:10},{value:"Hierarchy Display",paraId:38,tocIndex:10},{value:"Nested rectangles, clear containment",paraId:38,tocIndex:10},{value:"Concentric circles, clear hierarchy",paraId:38,tocIndex:10},{value:"Suitable Scenarios",paraId:38,tocIndex:10},{value:"Emphasize precise proportion comparison",paraId:38,tocIndex:10},{value:"Emphasize hierarchy and overall structure",paraId:38,tocIndex:10},{value:"Pie Chart",paraId:39,tocIndex:10},{value:"Advantages of treemaps over pie charts:",paraId:40,tocIndex:11},{value:"Hierarchical Data",paraId:41,tocIndex:11},{value:": Treemaps can display multi-level data, while pie charts can only show single-level data",paraId:41,tocIndex:11},{value:"Space Utilization",paraId:41,tocIndex:11},{value:": Treemaps utilize space more effectively and display more information",paraId:41,tocIndex:11},{value:"Precise Comparison",paraId:41,tocIndex:11},{value:": Rectangle areas are easier for precise comparison than angles",paraId:41,tocIndex:11},{value:"Interactivity",paraId:41,tocIndex:11},{value:": Support drill-down interaction for layer-by-layer data exploration",paraId:41,tocIndex:11},{value:"Advantages of pie charts:",paraId:42,tocIndex:11},{value:"Overall Perception",paraId:43,tocIndex:11},{value:": Better display of relationship between parts and the whole",paraId:43,tocIndex:11},{value:"Simplicity",paraId:43,tocIndex:11},{value:": Clearer and easier to understand for simple categorical data",paraId:43,tocIndex:11}]},82697:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(70487);const t=[{value:"A Venn diagram is a chart that uses circles or other closed curves to represent sets and their relationships, invented by British mathematician John Venn in 1880. Venn diagrams use overlapping areas to show the intersection, union, and difference relationships between different sets, making it a classic chart type in data visualization for displaying set relationships.",paraId:0,tocIndex:0},{value:"Venn diagrams are particularly suitable for showing relationships between different data sets, such as overlapping relationships between user groups, intersections of product features, overlapping users in market analysis, etc. Through intuitive circular areas and overlapping parts, they can clearly express complex set logical relationships.",paraId:1,tocIndex:0},{value:"When you need to analyze commonalities and differences between multiple groups or categories, Venn diagrams are a very effective visualization tool. They can help users quickly understand inclusion, intersection, and independent relationships between data.",paraId:2,tocIndex:0},{value:"Chart Type",paraId:3,tocIndex:2},{value:"Basic Venn Diagram",paraId:3,tocIndex:2},{value:"Suitable Data",paraId:3,tocIndex:2},{value:"Set data: data containing set names, set sizes, and intersection relationships",paraId:3,tocIndex:2},{value:"Function",paraId:3,tocIndex:2},{value:"Display intersection, union, and independent relationships between different sets",paraId:3,tocIndex:2},{value:"Data to Graphics Mapping",paraId:3,tocIndex:2},{value:"Set names map to circular areas",paraId:3,tocIndex:2},{value:"Set sizes map to circular area",paraId:3,tocIndex:2},{value:"Intersection relationships are represented by overlapping areas",paraId:3,tocIndex:2},{value:"Suitable Scenarios",paraId:3,tocIndex:2},{value:"Relationship analysis of 2-4 sets, user group analysis, product feature comparison",paraId:3,tocIndex:2},{value:"Chart Type",paraId:4,tocIndex:3},{value:"Hollow Venn Diagram",paraId:4,tocIndex:3},{value:"Suitable Data",paraId:4,tocIndex:3},{value:"Set data: data containing set names, set sizes, and intersection relationships",paraId:4,tocIndex:3},{value:"Function",paraId:4,tocIndex:3},{value:"Highlight boundary lines, reduce color interference, more clearly display set boundaries",paraId:4,tocIndex:3},{value:"Data to Graphics Mapping",paraId:4,tocIndex:3},{value:"Set names map to circular boundaries",paraId:4,tocIndex:3},{value:"Set sizes map to circular area",paraId:4,tocIndex:3},{value:"Hollow design highlights structural relationships",paraId:4,tocIndex:3},{value:"Suitable Scenarios",paraId:4,tocIndex:3},{value:"Scenarios requiring emphasis on set boundaries, black-and-white print-friendly displays",paraId:4,tocIndex:3},{value:"Example 1: ",paraId:5,tocIndex:5},{value:"User Group Overlap Analysis",paraId:5,tocIndex:5},{value:"The following chart shows the overlapping relationships between user groups on different platforms, helping understand user distribution across multiple platforms.",paraId:6,tocIndex:5},{value:"Description",paraId:7,tocIndex:5},{value:"Sets",paraId:7,tocIndex:5},{value:"Users",paraId:7,tocIndex:5},{value:"WeChat only",paraId:7,tocIndex:5},{value:"['WeChat']",paraId:7,tocIndex:5},{value:"1200",paraId:7,tocIndex:5},{value:"Weibo only",paraId:7,tocIndex:5},{value:"['Weibo']",paraId:7,tocIndex:5},{value:"800",paraId:7,tocIndex:5},{value:"TikTok only",paraId:7,tocIndex:5},{value:"['TikTok']",paraId:7,tocIndex:5},{value:"1000",paraId:7,tocIndex:5},{value:"WeChat+Weibo users",paraId:7,tocIndex:5},{value:"['WeChat', 'Weibo']",paraId:7,tocIndex:5},{value:"300",paraId:7,tocIndex:5},{value:"WeChat+TikTok users",paraId:7,tocIndex:5},{value:"['WeChat', 'TikTok']",paraId:7,tocIndex:5},{value:"400",paraId:7,tocIndex:5},{value:"Weibo+TikTok users",paraId:7,tocIndex:5},{value:"['Weibo', 'TikTok']",paraId:7,tocIndex:5},{value:"200",paraId:7,tocIndex:5},{value:"All three platforms",paraId:7,tocIndex:5},{value:"['WeChat', 'Weibo', 'TikTok']",paraId:7,tocIndex:5},{value:"150",paraId:7,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'path',\n  data: {\n    type: 'inline',\n    value: [\n      { sets: ['WeChat'], size: 1200, label: 'WeChat' },\n      { sets: ['Weibo'], size: 800, label: 'Weibo' },\n      { sets: ['TikTok'], size: 1000, label: 'TikTok' },\n      { sets: ['WeChat', 'Weibo'], size: 300, label: 'WeChat&Weibo' },\n      { sets: ['WeChat', 'TikTok'], size: 400, label: 'WeChat&TikTok' },\n      { sets: ['Weibo', 'TikTok'], size: 200, label: 'Weibo&TikTok' },\n      { sets: ['WeChat', 'Weibo', 'TikTok'], size: 150 },\n    ],\n    transform: [\n      {\n        type: 'venn',\n      },\n    ],\n  },\n  encode: {\n    d: 'path',\n    color: 'key',\n  },\n  labels: [\n    {\n      position: 'inside',\n      text: (d) => d.label || '',\n    },\n  ],\n  style: {\n    opacity: (d) => (d.sets.length > 1 ? 0.3 : 0.7),\n  },\n  state: {\n    inactive: { opacity: 0.2 },\n    active: { opacity: 0.9 },\n  },\n  interactions: [{ type: 'elementHighlight' }],\n  legend: false,\n});\n\nchart.render();\n",paraId:8,tocIndex:5},{value:"Notes",paraId:9,tocIndex:5},{value:":",paraId:9,tocIndex:5},{value:"The ",paraId:10,tocIndex:5},{value:"sets",paraId:10,tocIndex:5},{value:" field defines set relationships, using one element for individual sets and multiple elements for intersections",paraId:10,tocIndex:5},{value:"The ",paraId:10,tocIndex:5},{value:"size",paraId:10,tocIndex:5},{value:" field maps to circular area size, representing user count",paraId:10,tocIndex:5},{value:"The ",paraId:10,tocIndex:5},{value:"padding",paraId:10,tocIndex:5},{value:" parameter controls canvas padding to avoid graphic clipping",paraId:10,tocIndex:5},{value:"Use transparency to distinguish individual sets from intersection areas",paraId:10,tocIndex:5},{value:"Example 2: ",paraId:11,tocIndex:5},{value:"Product Feature Comparison Analysis",paraId:11,tocIndex:5},{value:"Venn diagrams can clearly show the overlap of different product features, helping product managers with feature planning.",paraId:12,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'path',\n  data: {\n    type: 'inline',\n    value: [\n      { sets: ['Product A'], size: 25, label: 'A' },\n      { sets: ['Product B'], size: 20, label: 'B' },\n      { sets: ['Product A', 'Product B'], size: 15, label: 'Common' },\n    ],\n    transform: [\n      {\n        type: 'venn',\n      },\n    ],\n  },\n  encode: {\n    d: 'path',\n    color: 'key',\n  },\n  labels: [\n    {\n      position: 'inside',\n      text: (d) => d.label,\n      style: {\n        fontSize: 12,\n        fontWeight: 'bold',\n      },\n      transform: [\n        {\n          type: 'overlapDodgeY',\n        },\n      ],\n    },\n  ],\n  style: {\n    fillOpacity: 0.6,\n    stroke: '#fff',\n    lineWidth: 2,\n  },\n  scale: {\n    color: {\n      range: ['#1890FF', '#52C41A', '#FF7A45'],\n    },\n  },\n  tooltip: {\n    items: [\n      {\n        name: 'Feature Count',\n        field: 'size',\n      },\n      {\n        name: 'Set',\n        field: 'key',\n      },\n    ],\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:13,tocIndex:5},{value:"Notes",paraId:14,tocIndex:5},{value:":",paraId:14,tocIndex:5},{value:"Use custom color schemes to highlight different product characteristics",paraId:15,tocIndex:5},{value:"Add border lines to enhance visual separation",paraId:15,tocIndex:5},{value:"Configure detailed tooltip information display",paraId:15,tocIndex:5},{value:"Example 3: ",paraId:16,tocIndex:5},{value:"Skill Overlap Analysis",paraId:16,tocIndex:5},{value:"Show the skill overlap among team members to help with project assignment and team building.",paraId:17,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'path',\n  data: {\n    type: 'inline',\n    value: [\n      { sets: ['Frontend'], size: 12, label: 'Frontend' },\n      { sets: ['Backend'], size: 15, label: 'Backend' },\n      { sets: ['Design'], size: 8, label: 'Design' },\n      { sets: ['Frontend', 'Backend'], size: 5, label: 'Full Stack' },\n      { sets: ['Frontend', 'Design'], size: 3, label: 'Frontend+Design' },\n      { sets: ['Backend', 'Design'], size: 2, label: 'Backend+Design' },\n      {\n        sets: ['Frontend', 'Backend', 'Design'],\n        size: 1,\n        label: 'Full Talent',\n      },\n    ],\n    transform: [\n      {\n        type: 'venn',\n        padding: 15,\n      },\n    ],\n  },\n  encode: {\n    d: 'path',\n    color: 'key',\n  },\n  labels: [\n    {\n      position: 'inside',\n      text: (d) => `${d.label}\\n(${d.size} people)`,\n      style: {\n        fontSize: 10,\n        textAlign: 'center',\n      },\n      transform: [\n        {\n          type: 'overlapDodgeY',\n        },\n      ],\n    },\n  ],\n  style: {\n    fillOpacity: 0.5,\n  },\n  interactions: [{ type: 'elementHighlight' }],\n  legend: {\n    color: {\n      position: 'bottom',\n      layout: { justifyContent: 'center' },\n    },\n  },\n});\n\nchart.render();\n",paraId:18,tocIndex:5},{value:"Notes",paraId:19,tocIndex:5},{value:":",paraId:19,tocIndex:5},{value:"Display both skill type and headcount in labels",paraId:20,tocIndex:5},{value:"Use interactive highlighting effects to enhance user experience",paraId:20,tocIndex:5},{value:"Appropriate transparency settings for easy viewing of overlapping areas",paraId:20,tocIndex:5},{value:"Example 1: ",paraId:21,tocIndex:6},{value:"Venn diagrams are not suitable when there are too many sets",paraId:21,tocIndex:6},{value:"When the number of sets exceeds 4, Venn diagrams become overly complex and overlapping relationships are difficult to express clearly.",paraId:22,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\n// 5-set Venn diagram - not recommended\nchart.options({\n  type: 'path',\n  data: {\n    type: 'inline',\n    value: [\n      { sets: ['A'], size: 10, label: 'A' },\n      { sets: ['B'], size: 10, label: 'B' },\n      { sets: ['C'], size: 10, label: 'C' },\n      { sets: ['D'], size: 10, label: 'D' },\n      { sets: ['E'], size: 10, label: 'E' },\n      { sets: ['A', 'B'], size: 3 },\n      { sets: ['A', 'C'], size: 3 },\n      { sets: ['A', 'D'], size: 3 },\n      { sets: ['B', 'C'], size: 3 },\n      { sets: ['B', 'D'], size: 3 },\n      { sets: ['C', 'D'], size: 3 },\n      { sets: ['A', 'B', 'C'], size: 1 },\n      { sets: ['A', 'B', 'D'], size: 1 },\n      { sets: ['A', 'C', 'D'], size: 1 },\n      { sets: ['B', 'C', 'D'], size: 1 },\n    ],\n    transform: [\n      {\n        type: 'venn',\n        padding: 10,\n      },\n    ],\n  },\n  encode: {\n    d: 'path',\n    color: 'key',\n  },\n  labels: [\n    {\n      position: 'inside',\n      text: (d) => d.label || '',\n    },\n  ],\n  style: {\n    fillOpacity: 0.4,\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:23,tocIndex:6},{value:"Notes",paraId:24,tocIndex:6},{value:": The above chart with 5 sets produces too many overlapping areas, making it visually confusing and difficult to read. In such cases, it's recommended to use ",paraId:24,tocIndex:6},{value:"Sunburst Chart",paraId:25,tocIndex:6},{value:" or ",paraId:24,tocIndex:6},{value:"Sankey Diagram",paraId:26,tocIndex:6},{value:".",paraId:24,tocIndex:6},{value:"Example 2: ",paraId:27,tocIndex:6},{value:"Venn diagrams are not suitable when data differences are extreme",paraId:27,tocIndex:6},{value:"When set sizes differ extremely, small sets may not be clearly visible.",paraId:28,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'path',\n  data: {\n    type: 'inline',\n    value: [\n      { sets: ['Large Enterprise'], size: 10000, label: 'Large Enterprise' },\n      { sets: ['Medium Enterprise'], size: 1000, label: 'Medium Enterprise' },\n      { sets: ['Small Enterprise'], size: 100, label: 'Small Enterprise' },\n      { sets: ['Large Enterprise', 'Medium Enterprise'], size: 200 },\n      { sets: ['Medium Enterprise', 'Small Enterprise'], size: 50 },\n      { sets: ['Large Enterprise', 'Small Enterprise'], size: 10 },\n    ],\n    transform: [\n      {\n        type: 'venn',\n        padding: 10,\n      },\n    ],\n  },\n  encode: {\n    d: 'path',\n    color: 'key',\n  },\n  labels: [\n    {\n      position: 'inside',\n      text: (d) => d.label || '',\n    },\n  ],\n  style: {\n    fillOpacity: 0.6,\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:29,tocIndex:6},{value:"Notes",paraId:30,tocIndex:6},{value:": In the above chart, the circular area for small enterprises is too small to display clearly. In this case, it's recommended to use ",paraId:30,tocIndex:6},{value:"Treemap",paraId:31,tocIndex:6},{value:" or normalize the data.",paraId:30,tocIndex:6},{value:"Hollow Venn diagrams remove fill colors and only keep border lines, suitable for scenarios that need to emphasize boundary relationships.",paraId:32,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'path',\n  data: {\n    type: 'inline',\n    value: [\n      { sets: ['iOS'], size: 15, label: 'iOS Users' },\n      { sets: ['Android'], size: 12, label: 'Android Users' },\n      { sets: ['Web'], size: 10, label: 'Web Users' },\n      { sets: ['iOS', 'Android'], size: 2, label: 'Dual Platform' },\n      { sets: ['iOS', 'Web'], size: 2, label: 'iOS+Web' },\n      { sets: ['Android', 'Web'], size: 1, label: 'Android+Web' },\n      { sets: ['iOS', 'Android', 'Web'], size: 1 },\n    ],\n    transform: [\n      {\n        type: 'venn',\n        padding: 10,\n      },\n    ],\n  },\n  encode: {\n    d: 'path',\n    color: 'key',\n    shape: 'hollow',\n  },\n  labels: [\n    {\n      position: 'inside',\n      text: (d) => d.label || '',\n      fill: '#000',\n      style: {\n        fontSize: 11,\n      },\n    },\n  ],\n  style: {\n    opacity: 0.8,\n    lineWidth: 3,\n  },\n  tooltip: false,\n});\n\nchart.render();\n",paraId:33,tocIndex:8},{value:"Notes",paraId:34,tocIndex:8},{value:":",paraId:34,tocIndex:8},{value:"Use ",paraId:35,tocIndex:8},{value:"shape: 'hollow'",paraId:35,tocIndex:8},{value:" to create hollow effect",paraId:35,tocIndex:8},{value:"Suitable for black-and-white printing and scenarios requiring structural emphasis",paraId:35,tocIndex:8},{value:"Set label color to black to ensure readability",paraId:35,tocIndex:8},{value:"Create more brand-characteristic Venn diagrams through custom colors and styles.",paraId:36,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'path',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/lastfm.json',\n    transform: [\n      {\n        type: 'venn',\n        padding: 12,\n        sets: 'sets',\n        size: 'size',\n        as: ['key', 'path'],\n      },\n    ],\n  },\n  encode: {\n    d: 'path',\n    color: 'key',\n  },\n  labels: [\n    {\n      position: 'inside',\n      text: (d) => d.label || '',\n      style: {\n        fontSize: 12,\n        fontWeight: 'bold',\n      },\n      transform: [{ type: 'contrastReverse' }],\n    },\n  ],\n  style: {\n    opacity: (d) => (d.sets.length > 1 ? 0.4 : 0.7),\n    stroke: '#fff',\n    lineWidth: 2,\n  },\n  scale: {\n    color: {\n      range: ['#667eea', '#764ba2', '#f093fb'],\n    },\n  },\n  state: {\n    inactive: { opacity: 0.1 },\n    active: { opacity: 0.9 },\n  },\n  interactions: [{ type: 'elementHighlight' }],\n  legend: false,\n});\n\nchart.render();\n",paraId:37,tocIndex:9},{value:"Notes",paraId:38,tocIndex:9},{value:":",paraId:38,tocIndex:9},{value:"Use gradient color schemes to enhance visual effects",paraId:39,tocIndex:9},{value:"Add white borders to enhance area separation",paraId:39,tocIndex:9},{value:"Interactive state configuration improves user experience",paraId:39,tocIndex:9},{value:"Sunburst Chart",paraId:40,tocIndex:10},{value:"Venn diagrams are suitable for showing intersection relationships between sets, emphasizing overlapping parts",paraId:41,tocIndex:11},{value:"Sunburst charts are suitable for showing hierarchical structures and categorical relationships, emphasizing containment relationships",paraId:41,tocIndex:11},{value:"Sankey Diagram",paraId:42,tocIndex:11},{value:"Venn diagrams show static set relationships, suitable for analyzing current status",paraId:43,tocIndex:12},{value:"Sankey diagrams show flow relationships, suitable for analyzing data flow and conversion",paraId:43,tocIndex:12},{value:"Treemap",paraId:44,tocIndex:12},{value:"Venn diagrams emphasize overlapping relationships between sets, suitable for relationship analysis",paraId:45,tocIndex:13},{value:"Treemaps emphasize hierarchical structure and proportion relationships, suitable for structural analysis",paraId:45,tocIndex:13}]},90128:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(8958);const t=[{value:"A Violin Plot is a data visualization chart that combines ",paraId:0,tocIndex:0},{value:"boxplot",paraId:1,tocIndex:0},{value:" and ",paraId:0,tocIndex:0},{value:"kernel density estimation",paraId:2,tocIndex:0},{value:", used to display the distribution shape and statistical summary of data. The violin plot is named after its violin-like shape.",paraId:0,tocIndex:0},{value:"Violin plots show the density distribution of data across different value intervals through density curves, while overlaying statistical information from boxplots (such as median, quartiles, etc.), providing a more intuitive reflection of data distribution characteristics, including multimodality, skewness, and outlier situations.",paraId:3,tocIndex:0},{value:"Compared to traditional boxplots, violin plots provide richer distribution information and are particularly suitable for comparing data distribution characteristics across multiple groups, making them an important tool for exploratory data analysis and statistical visualization.",paraId:4,tocIndex:0},{value:"English Name",paraId:5,tocIndex:0},{value:": Violin Plot",paraId:5,tocIndex:0},{value:"Chart Type",paraId:6,tocIndex:2},{value:"Violin Plot",paraId:6,tocIndex:2},{value:"Suitable Data",paraId:6,tocIndex:2},{value:"One categorical data field, one continuous data field",paraId:6,tocIndex:2},{value:"Function",paraId:6,tocIndex:2},{value:"Display data distribution shape, density, and statistical summary; compare distribution characteristics across different groups",paraId:6,tocIndex:2},{value:"Data to Graphics Mapping",paraId:6,tocIndex:2},{value:"Categorical data field maps to horizontal axis position",paraId:6,tocIndex:2},{value:"Continuous data field transforms to density distribution via KDE",paraId:6,tocIndex:2},{value:"Statistical values map to boxplot elements",paraId:6,tocIndex:2},{value:"Density maps to graphic width",paraId:6,tocIndex:2},{value:"Suitable Data Volume",paraId:6,tocIndex:2},{value:"At least 20-30 data points recommended per group",paraId:6,tocIndex:2},{value:"The main components of a violin plot include:",paraId:7,tocIndex:2},{value:"Density Contour",paraId:8,tocIndex:2},{value:": Smooth curves generated through kernel density estimation (KDE), showing the density distribution of data at different values",paraId:8,tocIndex:2},{value:"Boxplot",paraId:8,tocIndex:2},{value:": Traditional boxplot overlaid on the density contour, displaying statistical information such as median and quartiles",paraId:8,tocIndex:2},{value:"Median Line",paraId:8,tocIndex:2},{value:": Marks the median position of the data",paraId:8,tocIndex:2},{value:"Quartile Lines",paraId:8,tocIndex:2},{value:": Mark the positions of upper and lower quartiles",paraId:8,tocIndex:2},{value:"Outliers",paraId:8,tocIndex:2},{value:": Data points beyond the normal range",paraId:8,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/species.json',\n  },\n  children: [\n    {\n      type: 'density',\n      data: {\n        transform: [\n          {\n            type: 'kde',\n            field: 'y',\n            groupBy: ['x', 'species'],\n          },\n        ],\n      },\n      encode: {\n        x: 'x',\n        y: 'y',\n        series: 'species',\n        color: 'species',\n        size: 'size',\n      },\n      tooltip: false,\n    },\n    {\n      type: 'boxplot',\n      encode: {\n        x: 'x',\n        y: 'y',\n        series: 'species',\n        color: 'species',\n        shape: 'violin',\n      },\n      style: {\n        opacity: 0.5,\n        strokeOpacity: 0.5,\n        point: false,\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:9,tocIndex:2},{value:"Chart Type",paraId:10,tocIndex:3},{value:"Kernel Density Plot",paraId:10,tocIndex:3},{value:"Suitable Data",paraId:10,tocIndex:3},{value:"One categorical data field, one continuous data field",paraId:10,tocIndex:3},{value:"Function",paraId:10,tocIndex:3},{value:"Display probability density distribution of data, identify data distribution patterns",paraId:10,tocIndex:3},{value:"Data to Graphics Mapping",paraId:10,tocIndex:3},{value:"Categorical data field maps to horizontal axis position",paraId:10,tocIndex:3},{value:"Continuous data field transforms to density distribution via KDE",paraId:10,tocIndex:3},{value:"Density values map to area size",paraId:10,tocIndex:3},{value:"Suitable Data Volume",paraId:10,tocIndex:3},{value:"At least 50+ data points recommended",paraId:10,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'density',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/species.json',\n    transform: [\n      {\n        type: 'kde',\n        field: 'y',\n        groupBy: ['x'],\n        size: 20,\n      },\n    ],\n  },\n  encode: {\n    x: 'x',\n    y: 'y',\n    color: 'x',\n    size: 'size',\n  },\n  tooltip: false,\n});\n\nchart.render();\n",paraId:11,tocIndex:3},{value:"Chart Type",paraId:12,tocIndex:4},{value:"Polar Violin Plot",paraId:12,tocIndex:4},{value:"Suitable Data",paraId:12,tocIndex:4},{value:"Cyclical or periodic data: time series, angular data, etc.",paraId:12,tocIndex:4},{value:"Function",paraId:12,tocIndex:4},{value:"Display data distribution in polar coordinate system, suitable for visualization of periodic or cyclical data",paraId:12,tocIndex:4},{value:"Data to Graphics Mapping",paraId:12,tocIndex:4},{value:"Categorical data field maps to angle",paraId:12,tocIndex:4},{value:"Continuous data field maps to radial distance",paraId:12,tocIndex:4},{value:"Density information maps to area shape after KDE transformation",paraId:12,tocIndex:4},{value:"Suitable Scenarios",paraId:12,tocIndex:4},{value:"Time period analysis, directional data analysis",paraId:12,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  coordinate: { type: 'polar' },\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/species.json',\n  },\n  children: [\n    {\n      type: 'density',\n      data: {\n        transform: [\n          {\n            type: 'kde',\n            field: 'y',\n            groupBy: ['x', 'species'],\n          },\n        ],\n      },\n      encode: {\n        x: 'x',\n        y: 'y',\n        series: 'species',\n        color: 'species',\n        size: 'size',\n      },\n      tooltip: false,\n    },\n    {\n      type: 'boxplot',\n      encode: {\n        x: 'x',\n        y: 'y',\n        series: 'species',\n        color: 'species',\n        shape: 'violin',\n      },\n      style: {\n        opacity: 0.5,\n        strokeOpacity: 0.5,\n        point: false,\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:13,tocIndex:4},{value:"Example 1: ",paraId:14,tocIndex:6},{value:"Multi-group Data Distribution Comparison",paraId:14,tocIndex:6},{value:"When comparing data distribution characteristics across multiple groups or categories, violin plots can simultaneously display the distribution shape, central tendency, and dispersion of each group, making it easy to identify differences between groups.",paraId:15,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/species.json',\n  },\n  children: [\n    {\n      type: 'density',\n      data: {\n        transform: [\n          {\n            type: 'kde',\n            field: 'y',\n            groupBy: ['x', 'species'],\n          },\n        ],\n      },\n      encode: {\n        x: 'x',\n        y: 'y',\n        series: 'species',\n        color: 'species',\n        size: 'size',\n      },\n      tooltip: false,\n    },\n    {\n      type: 'boxplot',\n      encode: {\n        x: 'x',\n        y: 'y',\n        series: 'species',\n        color: 'species',\n        shape: 'violin',\n      },\n      style: {\n        opacity: 0.5,\n        strokeOpacity: 0.5,\n        point: false,\n      },\n    },\n  ],\n  axis: {\n    x: { title: 'Groups' },\n    y: { title: 'Value Distribution' },\n  },\n});\n\nchart.render();\n",paraId:16,tocIndex:6},{value:"Example 2: ",paraId:17,tocIndex:6},{value:"Exploring Data Distribution Patterns",paraId:17,tocIndex:6},{value:"Used to identify data distribution characteristics, such as whether it follows a normal distribution, existence of multimodality, degree of skewness, etc., providing richer distribution information than boxplots.",paraId:18,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'density',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/species.json',\n    transform: [\n      {\n        type: 'kde',\n        field: 'y',\n        groupBy: ['x'],\n        size: 30,\n      },\n    ],\n  },\n  encode: {\n    x: 'x',\n    y: 'y',\n    color: 'x',\n    size: 'size',\n  },\n  style: {\n    fillOpacity: 0.6,\n    stroke: '#FFF',\n    lineWidth: 1,\n  },\n  axis: {\n    x: { title: 'Category' },\n    y: { title: 'Density Distribution' },\n  },\n  tooltip: {\n    title: (d) => `Category: ${d.x}`,\n    items: [\n      { field: 'y', name: 'Density Value' },\n      { field: 'size', name: 'Probability' },\n    ],\n  },\n});\n\nchart.render();\n",paraId:19,tocIndex:6},{value:"Example 3: ",paraId:20,tocIndex:6},{value:"Outlier Detection",paraId:20,tocIndex:6},{value:"By combining density distribution with statistical information from boxplots, outliers can be more accurately identified and their position within the overall distribution can be better understood.",paraId:21,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/morley.json',\n  },\n  children: [\n    {\n      type: 'density',\n      data: {\n        transform: [\n          {\n            type: 'kde',\n            field: 'Speed',\n            groupBy: ['Expt'],\n          },\n        ],\n      },\n      encode: {\n        x: 'Expt',\n        y: 'Speed',\n        size: 'size',\n        color: 'Expt',\n      },\n      style: {\n        fillOpacity: 0.4,\n      },\n      tooltip: false,\n    },\n    {\n      type: 'boxplot',\n      encode: {\n        x: 'Expt',\n        y: 'Speed',\n        color: 'Expt',\n        shape: 'violin',\n      },\n      style: {\n        opacity: 0.8,\n        point: { fill: 'red', size: 3 },\n      },\n    },\n  ],\n  axis: {\n    x: { title: 'Experiment Group' },\n    y: { title: 'Speed of Light Measurement' },\n  },\n});\n\nchart.render();\n",paraId:22,tocIndex:6},{value:"❌ ",paraId:23,tocIndex:7},{value:"Insufficient Data",paraId:23,tocIndex:7},{value:": When each group has fewer than 20 data points, kernel density estimation may not be accurate enough. Consider using boxplots or scatter plots instead.",paraId:23,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\n// Simulate small dataset\nconst smallData = [\n  { group: 'A', value: 12 },\n  { group: 'A', value: 15 },\n  { group: 'A', value: 13 },\n  { group: 'B', value: 18 },\n  { group: 'B', value: 16 },\n  { group: 'B', value: 20 },\n  { group: 'C', value: 25 },\n  { group: 'C', value: 22 },\n  { group: 'C', value: 24 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'boxplot',\n  data: smallData,\n  encode: {\n    x: 'group',\n    y: 'value',\n    color: 'group',\n  },\n  style: {\n    boxFill: 'lightblue',\n    boxFillOpacity: 0.6,\n    point: { fill: 'red', size: 4 },\n  },\n  axis: {\n    x: { title: 'Groups' },\n    y: { title: 'Values' },\n  },\n  title: 'Use boxplot for small datasets',\n});\n\nchart.render();\n",paraId:24,tocIndex:7},{value:"❌ ",paraId:25,tocIndex:7},{value:"Discrete Data",paraId:25,tocIndex:7},{value:": For categorical or count data, the continuous density distribution of violin plots has no practical meaning. Consider using bar charts or column charts instead.",paraId:25,tocIndex:7},{value:"The following example shows the correct visualization approach for discrete data:",paraId:26,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\n// Simulate discrete count data\nconst discreteData = [\n  { category: 'Product A', count: 45 },\n  { category: 'Product B', count: 67 },\n  { category: 'Product C', count: 33 },\n  { category: 'Product D', count: 52 },\n  { category: 'Product E', count: 28 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  data: discreteData,\n  encode: {\n    x: 'category',\n    y: 'count',\n    color: 'category',\n  },\n  style: {\n    fillOpacity: 0.8,\n  },\n  axis: {\n    x: { title: 'Product Category' },\n    y: { title: 'Sales Quantity' },\n  },\n  title: 'Use bar chart for discrete data',\n});\n\nchart.render();\n",paraId:27,tocIndex:7},{value:"❌ ",paraId:28,tocIndex:7},{value:"Single Data Series",paraId:28,tocIndex:7},{value:": If there's only one data series without need for group comparison, histograms or density plots might be more concise and effective.",paraId:28,tocIndex:7},{value:"❌ ",paraId:29,tocIndex:7},{value:"Real-time Data Monitoring",paraId:29,tocIndex:7},{value:": Violin plots require complete datasets for density estimation and are not suitable for streaming or real-time updating data scenarios.",paraId:29,tocIndex:7},{value:"Boxplot",paraId:30,tocIndex:8},{value:"Violin plots display complete data distribution shape and density, providing richer distribution information",paraId:31,tocIndex:9},{value:"Boxplots mainly show statistical summaries (five-number summary), more concise but with limited information",paraId:31,tocIndex:9},{value:"Violin plots are suitable for exploring detailed distribution characteristics, while boxplots are suitable for quick comparison of multiple groups",paraId:31,tocIndex:9},{value:"Histogram",paraId:32,tocIndex:9},{value:"Violin plots show distribution through smooth density curves and support multi-group comparison",paraId:33,tocIndex:10},{value:"Histograms show frequency distribution through binning, suitable for distribution analysis of single datasets",paraId:33,tocIndex:10},{value:"Violin plots are more suitable for continuous distribution visualization, while histograms are suitable for discretized distribution statistics",paraId:33,tocIndex:10}]},11171:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(99284);const t=[{value:"A word cloud is a chart type that visually displays text data by adjusting the size, color, and position of words to reflect their importance or frequency in the text. Word clouds transform textual information into intuitive visual representations, enabling users to quickly identify key words and themes in the text.",paraId:0,tocIndex:0},{value:"Word clouds are particularly suitable for analyzing large amounts of text data, such as social media comments, user feedback, article content, survey reports, etc. Through the comparison of word sizes, users can quickly understand which words are most important or appear most frequently, thereby extracting core information and trends from the text.",paraId:1,tocIndex:0},{value:"Word clouds not only have practical analytical value but also possess strong artistic appeal and visual impact, making them commonly used in presentations, report covers, and data visualization displays.",paraId:2,tocIndex:0},{value:"English Name",paraId:3,tocIndex:0},{value:": Word Cloud, Tag Cloud",paraId:3,tocIndex:0},{value:"Chart Type",paraId:4,tocIndex:1},{value:"Word Cloud",paraId:4,tocIndex:1},{value:"Suitable Data",paraId:4,tocIndex:1},{value:"List: text field, frequency or weight field",paraId:4,tocIndex:1},{value:"Function",paraId:4,tocIndex:1},{value:"Display frequency distribution and importance of text data",paraId:4,tocIndex:1},{value:"Data-Visual Mapping",paraId:4,tocIndex:1},{value:"Text field maps to word content",paraId:4,tocIndex:1},{value:"Frequency field maps to font size",paraId:4,tocIndex:1},{value:"Optional category field maps to color",paraId:4,tocIndex:1},{value:"Suitable Data Volume",paraId:4,tocIndex:1},{value:"20-200 words, too many will cause layout congestion",paraId:4,tocIndex:1},{value:"Components:",paraId:5,tocIndex:1},{value:"Words",paraId:6,tocIndex:1},{value:": Key vocabulary in the text, the core elements of word cloud",paraId:6,tocIndex:1},{value:"Font Size",paraId:6,tocIndex:1},{value:": Usually proportional to frequency or importance",paraId:6,tocIndex:1},{value:"Color Encoding",paraId:6,tocIndex:1},{value:": Can be used to distinguish different categories or emphasize importance",paraId:6,tocIndex:1},{value:"Layout Algorithm",paraId:6,tocIndex:1},{value:": Determines the spatial distribution of words",paraId:6,tocIndex:1},{value:"Shape Container",paraId:6,tocIndex:1},{value:": The overall outline of the word cloud, can be rectangular, circular, or custom shapes",paraId:6,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 600,\n});\n\nchart.options({\n  type: 'wordCloud',\n  paddingTop: 40,\n  layout: { spiral: 'rectangular', fontSize: [20, 100] },\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/philosophy-word.json',\n  },\n  encode: { color: 'text' },\n});\n\nchart.render();\n",paraId:7,tocIndex:4},{value:"Word clouds with specific shapes can be created by combining with images.",paraId:8,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'wordCloud',\n  width: 700,\n  height: 400,\n  layout: {\n    imageMask:\n      'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*LKU4TYEiB-4AAAAAAAAAAAAADmJ7AQ/original',\n    fontSize: 8,\n  },\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/antvdemo/assets/data/antv-keywords.json',\n  },\n  encode: { color: 'name', text: 'name' },\n  legend: false,\n});\n\nchart.render();\n",paraId:9,tocIndex:5},{value:"When data has poor differentiation, using word clouds cannot achieve highlighting effects.",paraId:10,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 600,\n});\n\nchart.options({\n  type: 'wordCloud',\n  data: [\n    // Adjectives with similar frequencies in English literature (based on corpus statistics)\n    // These words appear 89-115 times in literary works, with very small differences\n    { text: 'beautiful', value: 115 },\n    { text: 'wonderful', value: 112 },\n    { text: 'excellent', value: 109 },\n    { text: 'amazing', value: 106 },\n    { text: 'brilliant', value: 103 },\n    { text: 'fantastic', value: 100 },\n    { text: 'marvelous', value: 97 },\n    { text: 'splendid', value: 94 },\n    { text: 'gorgeous', value: 91 },\n    { text: 'stunning', value: 89 },\n  ],\n  layout: {\n    spiral: 'rectangular',\n    fontSize: [18, 28], // Small range, visual differences not obvious\n    padding: 3,\n  },\n  encode: {\n    color: 'text',\n  },\n  scale: {\n    color: {\n      palette: ['#1890ff', '#52c41a', '#fa8c16', '#722ed1', '#eb2f96'],\n    },\n  },\n  style: {\n    fontFamily: 'Arial, sans-serif',\n  },\n  axis: false,\n  legend: false,\n  tooltip: {\n    items: [\n      { field: 'text', name: 'Adjective' },\n      { field: 'value', name: 'Literature Frequency' },\n    ],\n  },\n});\n\nchart.render();\n\n// Problem: Word frequency differences are too small (only 26 units), word cloud cannot effectively highlight key words\n// All words appear almost the same size visually, losing the core value of word cloud\n// Suggestion: Use bar chart, column chart, or table to accurately compare these similar values\n",paraId:11,tocIndex:7},{value:"When there's too little data, it's difficult to create an attractive word cloud layout. We recommend using ",paraId:12,tocIndex:8},{value:"bar charts",paraId:13,tocIndex:8},{value:".",paraId:12,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 600,\n});\n\nchart.options({\n  type: 'wordCloud',\n  data: [\n    // Frequency of the word \"death\" in Shakespeare's four great tragedies (real corpus data)\n    { text: 'Hamlet', value: 67 },\n    { text: 'Macbeth', value: 45 },\n    { text: 'Othello', value: 23 },\n    { text: 'King Lear', value: 19 },\n  ],\n  layout: {\n    spiral: 'rectangular',\n    fontSize: [18, 48],\n    padding: 8,\n  },\n  encode: {\n    color: 'text',\n  },\n  scale: {\n    color: {\n      palette: ['#722ed1', '#eb2f96', '#fa8c16', '#52c41a'],\n    },\n  },\n  style: {\n    fontFamily: 'Times New Roman, serif',\n    fontWeight: 'bold',\n  },\n  axis: false,\n  legend: false,\n  tooltip: {\n    items: [\n      { field: 'text', name: 'Play' },\n      { field: 'value', name: '\"death\" Frequency' },\n    ],\n  },\n});\n\nchart.render();\n",paraId:14,tocIndex:8},{value:"Effect using bar chart:",paraId:15,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 600,\n  height: 300,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { play: 'Hamlet', frequency: 67 },\n    { play: 'Macbeth', frequency: 45 },\n    { play: 'Othello', frequency: 23 },\n    { play: 'King Lear', frequency: 19 },\n  ],\n  encode: {\n    x: 'play',\n    y: 'frequency',\n    color: 'play',\n  },\n  scale: {\n    color: {\n      palette: ['#722ed1', '#eb2f96', '#fa8c16', '#52c41a'],\n    },\n  },\n  axis: {\n    x: {\n      title: \"Shakespeare's Four Great Tragedies\",\n      labelTransform: 'rotate(45)',\n    },\n    y: { title: 'Frequency of \"death\"' },\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:16,tocIndex:8},{value:"Bubble Chart",paraId:17,tocIndex:9},{value:"Word Cloud",paraId:18,tocIndex:10},{value:": Specifically for text data, uses font size to represent importance",paraId:18,tocIndex:10},{value:"Bubble Chart",paraId:18,tocIndex:10},{value:": For numerical data, uses bubble size to represent values",paraId:18,tocIndex:10},{value:"Bar Chart",paraId:19,tocIndex:10},{value:"Word Cloud",paraId:20,tocIndex:11},{value:": Strong visual impact, suitable for overview display",paraId:20,tocIndex:11},{value:"Bar Chart",paraId:20,tocIndex:11},{value:": Precise numerical comparison, suitable for detailed analysis",paraId:20,tocIndex:11}]},41126:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(46612);const t=[{value:"Problem Description",paraId:0,tocIndex:0},{value:"When using AntV G2 to draw charts, manually setting ",paraId:1,tocIndex:0},{value:"padding",paraId:1,tocIndex:0},{value:" may cause the chart title or other chart components to not display properly or disappear completely.",paraId:1,tocIndex:0},{value:"Related issue: ",paraId:2,tocIndex:0},{value:"Title not displayed after setting",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  padding: 20,\n  title: {\n    align: 'center',\n    title: 'This is a chart title.',\n    subtitle: 'Displayed are sampled values.',\n  },\n  data: [\n    { country: 'Asia', year: '1750', value: 502 },\n    { country: 'Asia', year: '1800', value: 635 },\n    { country: 'Asia', year: '1850', value: 809 },\n    { country: 'Asia', year: '1900', value: 947 },\n    { country: 'Asia', year: '1950', value: 1402 },\n    { country: 'Asia', year: '1999', value: 3634 },\n    { country: 'Asia', year: '2050', value: 5268 },\n    { country: 'Africa', year: '1750', value: 106 },\n    { country: 'Africa', year: '1800', value: 107 },\n    { country: 'Africa', year: '1850', value: 111 },\n    { country: 'Africa', year: '1900', value: 133 },\n    { country: 'Africa', year: '1950', value: 221 },\n    { country: 'Africa', year: '1999', value: 767 },\n    { country: 'Africa', year: '2050', value: 1766 },\n    { country: 'Europe', year: '1750', value: 163 },\n    { country: 'Europe', year: '1800', value: 203 },\n    { country: 'Europe', year: '1850', value: 276 },\n    { country: 'Europe', year: '1900', value: 408 },\n    { country: 'Europe', year: '1950', value: 547 },\n    { country: 'Europe', year: '1999', value: 729 },\n    { country: 'Europe', year: '2050', value: 628 },\n  ],\n  encode: {\n    x: 'year',\n    y: 'value',\n    color: 'country',\n  },\n  transform: [{ type: 'stackY' }],\n  style: {\n    fillOpacity: 0.3,\n  },\n});\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"Cause Analysis",paraId:4,tocIndex:0},{value:"G2 automatically calculates the required spacing for all components by default, but once a fixed ",paraId:5,tocIndex:0},{value:"padding",paraId:5,tocIndex:0},{value:" value is specified, this automatic adjustment logic is bypassed, potentially causing incomplete component display.",paraId:5,tocIndex:0},{value:"Solutions",paraId:6,tocIndex:0},{value:"There are two ways to solve this problem:",paraId:7,tocIndex:0},{value:"Use Default Layout (Recommended)",paraId:8,tocIndex:0},{value:"Don't manually set ",paraId:9,tocIndex:0},{value:"padding",paraId:9,tocIndex:0},{value:", let G2 automatically calculate the optimal spacing to ensure all components display properly:",paraId:9,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  title: {\n    align: 'center',\n    title: 'This is a chart title.',\n    subtitle: 'Displayed are sampled values.',\n  },\n  data: [\n    { country: 'Asia', year: '1750', value: 502 },\n    { country: 'Asia', year: '1800', value: 635 },\n    { country: 'Asia', year: '1850', value: 809 },\n    { country: 'Asia', year: '1900', value: 947 },\n    { country: 'Asia', year: '1950', value: 1402 },\n    { country: 'Asia', year: '1999', value: 3634 },\n    { country: 'Asia', year: '2050', value: 5268 },\n    { country: 'Africa', year: '1750', value: 106 },\n    { country: 'Africa', year: '1800', value: 107 },\n    { country: 'Africa', year: '1850', value: 111 },\n    { country: 'Africa', year: '1900', value: 133 },\n    { country: 'Africa', year: '1950', value: 221 },\n    { country: 'Africa', year: '1999', value: 767 },\n    { country: 'Africa', year: '2050', value: 1766 },\n    { country: 'Europe', year: '1750', value: 163 },\n    { country: 'Europe', year: '1800', value: 203 },\n    { country: 'Europe', year: '1850', value: 276 },\n    { country: 'Europe', year: '1900', value: 408 },\n    { country: 'Europe', year: '1950', value: 547 },\n    { country: 'Europe', year: '1999', value: 729 },\n    { country: 'Europe', year: '2050', value: 628 },\n  ],\n  encode: {\n    x: 'year',\n    y: 'value',\n    color: 'country',\n  },\n  transform: [{ type: 'stackY' }],\n  style: {\n    fillOpacity: 0.3,\n  },\n});\n\nchart.render();\n",paraId:10,tocIndex:0},{value:"Set Padding Correctly",paraId:11,tocIndex:0},{value:"If you really need to manually set ",paraId:12,tocIndex:0},{value:"padding",paraId:12,tocIndex:0},{value:", please ensure sufficient space is reserved for dynamically generated components:",paraId:12,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  paddingTop: 100,\n  title: {\n    align: 'center',\n    title: 'This is a chart title.',\n    subtitle: 'Displayed are sampled values.',\n  },\n  data: [\n    { country: 'Asia', year: '1750', value: 502 },\n    { country: 'Asia', year: '1800', value: 635 },\n    { country: 'Asia', year: '1850', value: 809 },\n    { country: 'Asia', year: '1900', value: 947 },\n    { country: 'Asia', year: '1950', value: 1402 },\n    { country: 'Asia', year: '1999', value: 3634 },\n    { country: 'Asia', year: '2050', value: 5268 },\n    { country: 'Africa', year: '1750', value: 106 },\n    { country: 'Africa', year: '1800', value: 107 },\n    { country: 'Africa', year: '1850', value: 111 },\n    { country: 'Africa', year: '1900', value: 133 },\n    { country: 'Africa', year: '1950', value: 221 },\n    { country: 'Africa', year: '1999', value: 767 },\n    { country: 'Africa', year: '2050', value: 1766 },\n    { country: 'Europe', year: '1750', value: 163 },\n    { country: 'Europe', year: '1800', value: 203 },\n    { country: 'Europe', year: '1850', value: 276 },\n    { country: 'Europe', year: '1900', value: 408 },\n    { country: 'Europe', year: '1950', value: 547 },\n    { country: 'Europe', year: '1999', value: 729 },\n    { country: 'Europe', year: '2050', value: 628 },\n  ],\n  encode: {\n    x: 'year',\n    y: 'value',\n    color: 'country',\n  },\n  transform: [{ type: 'stackY' }],\n  style: {\n    fillOpacity: 0.3,\n  },\n});\n\nchart.render();\n",paraId:13,tocIndex:0},{value:"You can also pass ",paraId:14,tocIndex:0},{value:"paddingTop",paraId:14,tocIndex:0},{value:" when creating the ",paraId:14,tocIndex:0},{value:"Chart",paraId:14,tocIndex:0},{value:" instance, which works exactly the same:",paraId:14,tocIndex:0},{value:"const chart = new Chart({\n  container: 'container',\n  paddingTop: 100,\n});\n",paraId:15,tocIndex:0},{value:"Notes",paraId:16,tocIndex:0},{value:"When manually setting ",paraId:17,tocIndex:0},{value:"padding",paraId:17,tocIndex:0},{value:", it's recommended to determine appropriate values through debugging",paraId:17,tocIndex:0},{value:"Consider the space requirements of components like titles and legends",paraId:17,tocIndex:0},{value:"When specific layout is not required, prioritize using G2's automatic layout functionality",paraId:17,tocIndex:0},{value:"See the detailed documentation on ",paraId:18,tocIndex:0},{value:"Chart Layout",paraId:19,tocIndex:0},{value:".",paraId:18,tocIndex:0},{value:"Problem Description",paraId:20,tocIndex:1},{value:"When drawing stacked area charts or multi-line charts, you need to configure the chart styles. However, when directly specifying stroke colors or stroke opacity in the style, all areas or regions will apply the same style. How do you differentiate styles for different categories?",paraId:21,tocIndex:1},{value:"Solution",paraId:22,tocIndex:1},{value:"When configuring mark styles, not only do we support direct configuration like ",paraId:23,tocIndex:1},{value:"string",paraId:23,tocIndex:1},{value:" and ",paraId:23,tocIndex:1},{value:"number",paraId:23,tocIndex:1},{value:", but also callback functions like ",paraId:23,tocIndex:1},{value:"string | (datum, index, data, column) => string",paraId:23,tocIndex:1},{value:". We can customize special styles for different filter conditions based on the parameters in the callback function. Note that the ",paraId:23,tocIndex:1},{value:"datum",paraId:23,tocIndex:1},{value:" here is the data item corresponding to the mark, which depends on the mark's characteristics ",paraId:23,tocIndex:1},{value:"Graphic Template",paraId:23,tocIndex:1},{value:". Each graphic corresponds to one or more data items. For example, scatter plots have each graphic corresponding to one data item, while area charts have one graphic corresponding to multiple data items, and ",paraId:23,tocIndex:1},{value:"datum",paraId:23,tocIndex:1},{value:" will also return multiple data records.",paraId:23,tocIndex:1},{value:"Examples",paraId:24,tocIndex:1},{value:"Stacked area chart with varying stroke colors",paraId:25,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  data: [\n    { country: 'Asia', year: '1750', value: 502 },\n    { country: 'Asia', year: '1800', value: 635 },\n    { country: 'Asia', year: '1850', value: 809 },\n    { country: 'Asia', year: '1900', value: 947 },\n    { country: 'Asia', year: '1950', value: 1402 },\n    { country: 'Asia', year: '1999', value: 3634 },\n    { country: 'Asia', year: '2050', value: 5268 },\n    { country: 'Africa', year: '1750', value: 106 },\n    { country: 'Africa', year: '1800', value: 107 },\n    { country: 'Africa', year: '1850', value: 111 },\n    { country: 'Africa', year: '1900', value: 133 },\n    { country: 'Africa', year: '1950', value: 221 },\n    { country: 'Africa', year: '1999', value: 767 },\n    { country: 'Africa', year: '2050', value: 1766 },\n    { country: 'Europe', year: '1750', value: 163 },\n    { country: 'Europe', year: '1800', value: 203 },\n    { country: 'Europe', year: '1850', value: 276 },\n    { country: 'Europe', year: '1900', value: 408 },\n    { country: 'Europe', year: '1950', value: 547 },\n    { country: 'Europe', year: '1999', value: 729 },\n    { country: 'Europe', year: '2050', value: 628 },\n  ],\n  encode: {\n    x: 'year',\n    y: 'value',\n    color: 'country',\n  },\n  transform: [{ type: 'stackY' }],\n  style: {\n    fillOpacity: 0.3,\n    lineWidth: (datum, index, data, column) =>\n      datum[0].country === 'Asia' ? 2 : 0, // Area marks have default stroke width of 0, need to explicitly set lineWidth to show stroke\n    stroke: (datum, index, data, column) =>\n      datum[0].country === 'Asia' ? 'red' : null,\n  },\n});\n\nchart.render();\n",paraId:26,tocIndex:1},{value:"Multi-line chart with differentiated styles",paraId:27,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/c48dbbb1-fccf-4a46-b68f-a3ddb4908b68.json',\n  },\n  encode: {\n    x: 'date',\n    y: 'value',\n    color: 'type',\n  },\n  axis: {\n    y: {\n      labelFormatter: (v) =>\n        `${v}`.replace(/\\d{1,3}(?=(\\d{3})+$)/g, (s) => `${s},`),\n    },\n  },\n  scale: { color: { range: ['#30BF78', '#F4664A', '#FAAD14'] } }, // Custom color domain for color channel\n  style: {\n    lineDash: (datum, index, data, column) => {\n      if (datum[0].type === 'register') return [4, 4];\n    },\n    lineWidth: (datum, index, data, column) => {\n      if (datum[0].type !== 'register') return 2;\n    },\n  },\n});\n\nchart.render();\n",paraId:28,tocIndex:1},{value:"Multi-shape scatter plot",paraId:29,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/bd73a175-4417-4749-8b88-bc04d955e899.csv',\n  },\n  encode: {\n    x: 'x',\n    y: 'y',\n    shape: 'category',\n    color: 'category',\n    size: () => 1,\n  },\n  legend: {\n    size: false,\n  },\n  scale: {\n    shape: { range: ['circle', 'plus', 'diamond'] },\n    size: { rangeMin: 5 }, // Set minimum domain for size channel scale to 5\n  }, // Define shape domain for shape channel\n  transform: [{ type: 'groupX', size: 'sum' }], // Group discrete x channel and map sum to size channel\n  style: {\n    fillOpacity: (datum, index, data, column) =>\n      datum.category !== 'setosa' ? 0.8 : 0,\n    stroke: (datum, index, data, column) => {\n      if (datum.category !== 'setosa') {\n        return '#FADC7C';\n      }\n    },\n    lineWidth: (datum, index, data, column) =>\n      datum.category !== 'setosa' ? 1 : 2,\n  },\n});\n\nchart.render();\n",paraId:30,tocIndex:1},{value:"Problem Description",paraId:31,tocIndex:2},{value:"In business scenarios, tooltip needs to display a lot of information, so ",paraId:32,tocIndex:2},{value:"enterable: true",paraId:32,tocIndex:2},{value:" is configured to support scrolling when hovering. However, when moving the mouse, tooltip sometimes doesn't close properly, causing obstruction and lag effects on the chart.",paraId:32,tocIndex:2},{value:"Cause Analysis and Solutions",paraId:33,tocIndex:2},{value:"Obstruction Issue",paraId:34,tocIndex:2},{value:"G2's internal algorithm tries to constrain the tooltip within the chart, but if the chart height is too small, even with automatic tooltip position calculation, it will still overflow the chart.",paraId:35,tocIndex:2},{value:"Freezing Issue",paraId:36,tocIndex:2},{value:"The chart area is too small, and moving directly from inside the tooltip to outside the chart doesn't trigger the tooltip disappear event, which is bound to the chart.",paraId:37,tocIndex:2},{value:"Solution",paraId:38,tocIndex:2},{value:"Both issues are caused by the chart area being too small and tooltip taking up too much space (more than half). It's recommended to reduce tooltip area (scrolling is already available) or increase chart area.",paraId:39,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { year: '1991', value: 15468 },\n    { year: '1992', value: 16100 },\n    { year: '1993', value: 15900 },\n    { year: '1994', value: 17409 },\n    { year: '1995', value: 17000 },\n    { year: '1996', value: 31056 },\n    { year: '1997', value: 31982 },\n    { year: '1998', value: 32040 },\n    { year: '1999', value: 33233 },\n  ],\n  children: [\n    {\n      type: 'area',\n      encode: { x: (d) => d.year, y: 'value', shape: 'area' },\n      style: { opacity: 0.2 },\n      axis: { y: { labelFormatter: '~s', title: false } },\n    },\n    { type: 'line', encode: { x: 'year', y: 'value', shape: 'line' } },\n  ],\n});\n\nchart.render();\n",paraId:40,tocIndex:3},{value:"Solution",paraId:41,tocIndex:3},{value:"Configure the ",paraId:42,tocIndex:3},{value:"nice",paraId:42,tocIndex:3},{value:" property of the scale that needs adjustment to true, extending the domain range to make the output ticks display more friendly.",paraId:42,tocIndex:3},{value:"({\n  scale: {\n    y: {\n      nice: true,\n    },\n  },\n});\n",paraId:43,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { year: '1991', value: 15468 },\n    { year: '1992', value: 16100 },\n    { year: '1993', value: 15900 },\n    { year: '1994', value: 17409 },\n    { year: '1995', value: 17000 },\n    { year: '1996', value: 31056 },\n    { year: '1997', value: 31982 },\n    { year: '1998', value: 32040 },\n    { year: '1999', value: 33233 },\n  ],\n  scale: {\n    y: {\n      nice: true, // Extend y channel scale domain range to make output ticks display more friendly\n    },\n  },\n  children: [\n    {\n      type: 'area',\n      encode: { x: (d) => d.year, y: 'value', shape: 'area' },\n      style: { opacity: 0.2 },\n      axis: { y: { labelFormatter: '~s', title: false } },\n    },\n    { type: 'line', encode: { x: 'year', y: 'value', shape: 'line' } },\n  ],\n});\n\nchart.render();\n",paraId:44,tocIndex:3},{value:"Problem Description",paraId:45,tocIndex:4},{value:"In business scenarios, you may need the y-axis domain to display opposite to normal coordinate axis, making values increase from top to bottom. In other words, smaller y channel values should appear higher in the chart, suitable for scenarios where smaller numbers represent greater weight, such as rankings.",paraId:46,tocIndex:4},{value:"Solution",paraId:47,tocIndex:4},{value:"Adjust the y channel scale range, which defaults to ",paraId:48,tocIndex:4},{value:"[1,0]",paraId:48,tocIndex:4},{value:". If inversion is needed, adjust to ",paraId:48,tocIndex:4},{value:"[0,1]",paraId:48,tocIndex:4},{value:". For better appearance, you can also adjust the x-axis position accordingly.",paraId:48,tocIndex:4},{value:"Here's an example of a top-to-bottom bar chart. The same principle applies when creating left-to-right bar charts. (Note that bar charts are column charts with transposed coordinate axis, where left-right corresponds to the x-axis)",paraId:49,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { letter: 'A', frequency: 0.08167 },\n    { letter: 'B', frequency: 0.01492 },\n    { letter: 'C', frequency: 0.02782 },\n    { letter: 'D', frequency: 0.04253 },\n    { letter: 'E', frequency: 0.12702 },\n  ],\n  encode: { x: 'letter', y: 'frequency' },\n  scale: { y: { range: [0, 1] } },\n  axis: { x: { position: 'top' } },\n});\n\nchart.render();\n",paraId:50,tocIndex:4},{value:"For some marks like area charts, when we use the above method to invert, the filled area will also move to the upper half of the chart, which may not meet expectations in certain business scenarios, such as ranking trend charts. In such cases, more customized handling is needed combining ",paraId:51,tocIndex:4},{value:"encode.y",paraId:51,tocIndex:4},{value:", ",paraId:51,tocIndex:4},{value:"axis.y.labelFormatter",paraId:51,tocIndex:4},{value:", and other properties.",paraId:51,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  paddingRight: 10,\n  data: [\n    { month: 'January', rank: 200 },\n    { month: 'February', rank: 160 },\n    { month: 'March', rank: 100 },\n    { month: 'April', rank: 80 },\n    { month: 'May', rank: 99 },\n    { month: 'June', rank: 36 },\n    { month: 'July', rank: 40 },\n    { month: 'August', rank: 20 },\n    { month: 'September', rank: 12 },\n    { month: 'October', rank: 15 },\n    { month: 'November', rank: 6 },\n    { month: 'December', rank: 1 },\n  ],\n  scale: {\n    y: {\n      nice: true,\n      tickMethod: () => [0, 50, 100, 170, 199],\n    },\n  },\n  axis: {\n    y: {\n      labelFormatter: (d) => `Rank ${200 - d}`,\n    },\n  },\n  children: [\n    {\n      type: 'area',\n      encode: { x: (d) => d.month, y: (d) => 200 - d.rank, shape: 'smooth' },\n      style: { opacity: 0.2 },\n      axis: { y: { labelFormatter: '~s', title: false } },\n      style: {\n        fill: 'l(270) 0:#ffffff 0.9:#7ec2f3 1:#1890ff',\n        fillOpacity: 0.2,\n      },\n      tooltip: false,\n    },\n    {\n      type: 'line',\n      encode: { x: (d) => d.month, y: (d) => 200 - d.rank, shape: 'smooth' },\n      interaction: {\n        tooltip: {\n          render: (event, { title, items }) => `\n<div style=\"display: flex; align-items: center;\">\n  <span>${title}: Rank </span>\n  <h2\n    style=\"\n        margin-left: 8px; \n        margin-right: 8px; \n        margin-top:4px;\n        font-size: 18px; \n        line-height: 36px; \n        font-weight: 500px\"\n  >\n    ${200 - items[0].value}\n  </h2>\n</div>\n          `,\n        },\n      },\n      style: {\n        lineWidth: 2,\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:52,tocIndex:4},{value:"Below is a simple line chart where you can see the x-axis has obvious ",paraId:53,tocIndex:5},{value:"paddingOuter",paraId:53,tocIndex:5},{value:" with a default value of ",paraId:53,tocIndex:5},{value:"0.5",paraId:53,tocIndex:5},{value:".",paraId:53,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  viewStyle: {\n    contentFill: 'l(270) 0:#ffffff 0.5:#7ec2f3 1:#1890ff',\n  },\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  labels: [{ text: 'value', style: { dx: -10, dy: -12 } }],\n  encode: { x: 'year', y: 'value' },\n  scale: { y: { domainMin: 0, nice: true } },\n});\n\nchart.render();\n",paraId:54,tocIndex:5},{value:"Point scale is a band scale with constant bandWidth of 0, internally fixing the following properties:",paraId:55,tocIndex:5},{value:"padding: 0.5, // Internal assignment\npaddingInner: 1, // Cannot be modified\npaddingOuter: 0.5 // Internal assignment\n",paraId:56,tocIndex:5},{value:"If you want to customize the ",paraId:57,tocIndex:5},{value:"paddingOuter",paraId:57,tocIndex:5},{value:" value, you can achieve this by modifying ",paraId:57,tocIndex:5},{value:"padding",paraId:57,tocIndex:5},{value:". For example:",paraId:57,tocIndex:5},{value:"(scale: {\n  x: {\n    type: 'point',\n    padding: 0, // Only affects paddingOuter, paddingInner is always 1\n  },\n});\n",paraId:58,tocIndex:5},{value:"Through configuration, you can make the spacing at both ends of the line chart equal to ",paraId:59,tocIndex:5},{value:"0",paraId:59,tocIndex:5},{value:".",paraId:59,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  viewStyle: {\n    contentFill: 'l(270) 0:#ffffff 0.5:#7ec2f3 1:#1890ff',\n  },\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  labels: [{ text: 'value', style: { dx: -10, dy: -12 } }],\n  encode: { x: 'year', y: 'value' },\n  scale: {\n    y: { domainMin: 0, nice: true },\n    x: {\n      padding: 0,\n    },\n  },\n});\n\nchart.render();\n",paraId:60,tocIndex:5},{value:"With the new ",paraId:61,tocIndex:6},{value:"defaultSelect",paraId:61,tocIndex:6},{value:" option, you can specify which legend items should be selected by default when the chart is first rendered:",paraId:61,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 100 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  legend: {\n    color: {\n      defaultSelect: ['Sports', 'Strategy', 'Action'],\n    },\n  },\n});\n\nchart.render();\n",paraId:62,tocIndex:6},{value:"This approach is much simpler and more intuitive than the previous method of manually triggering the ",paraId:63,tocIndex:6},{value:"legendFilter",paraId:63,tocIndex:6},{value:" interaction. The chart will automatically display only the data corresponding to the selected legend items on initial render.",paraId:63,tocIndex:6},{value:"Problem Description",paraId:64,tocIndex:7},{value:"In certain interactive scenarios, you need to listen for whether the mouse has moved outside the chart container boundaries to execute corresponding business logic, such as hiding tooltips, resetting highlight states, etc.",paraId:65,tocIndex:7},{value:"Solution",paraId:66,tocIndex:7},{value:"You can detect mouse enter and leave states by listening to DOM events on the chart container.",paraId:67,tocIndex:7},{value:"import { Chart, ChartEvent } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', autoFit: true });\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 100 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  viewStyle: {\n    viewFill: 'blue',\n    viewFillOpacity: 0.3,\n  },\n});\n\nchart.render();\n\nlet containerMouseEntered = false;\n\nchart.on('afterrender', () => {\n  // Get chart container DOM element\n  const container = chart.getContainer();\n\n  // Create status display panel\n  const statusPanel = document.createElement('div');\n  statusPanel.id = 'mouse-status-panel';\n  statusPanel.style.cssText = `\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    background: rgba(0, 0, 0, 0.8);\n    color: white;\n    padding: 12px;\n    border-radius: 6px;\n    font-family: monospace;\n    font-size: 12px;\n    line-height: 1.4;\n    z-index: 1000;\n    min-width: 220px;\n  `;\n\n  // Update status display\n  const updateStatus = (isInside, eventInfo = {}) => {\n    const status = isInside ? '✅ Mouse inside container' : '❌ Mouse outside container';\n    const containerRect = container.getBoundingClientRect();\n\n    statusPanel.innerHTML = `\n      <div style=\"font-weight: bold; margin-bottom: 8px;\">${status}</div>\n      <div>Container size: ${container.offsetWidth} × ${container.offsetHeight}</div>\n      <div>Container position: (${Math.round(containerRect.left)}, ${Math.round(\n      containerRect.top,\n    )})</div>\n      ${\n        eventInfo.clientX !== undefined\n          ? `<div>Mouse coordinates: (${eventInfo.clientX}, ${eventInfo.clientY})</div>`\n          : ''\n      }\n      ${eventInfo.type ? `<div>Event type: ${eventInfo.type}</div>` : ''}\n      <div style=\"margin-top: 8px; font-size: 11px; opacity: 0.8;\">\n        Move mouse over the chart to try!\n      </div>\n    `;\n  };\n\n  if (container) {\n    // Add status panel to container's parent element\n    container.parentElement.style.position = 'relative';\n    container.parentElement.appendChild(statusPanel);\n\n    // Initialize display\n    updateStatus(false);\n\n    // Listen for mouse entering container\n    container.addEventListener('mouseenter', (e) => {\n      containerMouseEntered = true;\n      updateStatus(true, {\n        type: e.type,\n        clientX: e.clientX,\n        clientY: e.clientY,\n      });\n    });\n\n    // Listen for mouse moving within container\n    container.addEventListener('mousemove', (e) => {\n      if (containerMouseEntered) {\n        updateStatus(true, {\n          type: e.type,\n          clientX: e.clientX,\n          clientY: e.clientY,\n        });\n      }\n    });\n\n    // Listen for mouse leaving container\n    container.addEventListener('mouseleave', (e) => {\n      if (containerMouseEntered) {\n        containerMouseEntered = false;\n        updateStatus(false, {\n          type: e.type,\n          clientX: e.clientX,\n          clientY: e.clientY,\n        });\n      }\n    });\n  }\n});\n",paraId:68,tocIndex:7},{value:"Complete Example",paraId:69,tocIndex:7},{value:"Here's a complete example showing how to control tooltip display and hiding through event triggers. When clicking on an element, the tooltip shows; when clicking on empty area or when the mouse leaves the container, the tooltip hide event is manually triggered.",paraId:70,tocIndex:7},{value:"import { Chart, ChartEvent } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', autoFit: true });\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 100 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  viewStyle: {\n    viewFill: 'blue',\n    viewFillOpacity: 0.3,\n  },\n  interaction: {\n    tooltip: {\n      disableNative: true, // Disable pointerover and pointerout events.\n    },\n  },\n});\n\nchart.render();\n\nlet containerMouseEntered = false;\n\nchart.on('afterrender', () => {\n  // Get chart container DOM element\n  const container = chart.getContainer();\n\n  if (container) {\n    // Listen for mouse entering container\n    container.addEventListener('mouseenter', (e) => {\n      containerMouseEntered = true;\n    });\n\n    // Listen for mouse leaving container\n    container.addEventListener('mouseleave', (e) => {\n      if (containerMouseEntered) {\n        containerMouseEntered = false;\n        chart.emit('tooltip:hide');\n      }\n    });\n  }\n});\n\nchart.on('element:click', ({ data }) => chart.emit('tooltip:show', { data }));\nchart.on('plot:click', () => chart.emit('tooltip:hide'));\n",paraId:71,tocIndex:7},{value:"Problem Description",paraId:72,tocIndex:8},{value:"When using G2 to draw charts, the default legend position and size may not meet business requirements. You need precise control over the legend's position, alignment, dimensions, and spacing from the chart.",paraId:73,tocIndex:8},{value:"Solution",paraId:74,tocIndex:8},{value:"G2 provides multiple configuration options to precisely control legend size and layout:",paraId:75,tocIndex:8},{value:"Basic Position Configuration",paraId:76,tocIndex:8},{value:"Use ",paraId:77,tocIndex:8},{value:"position",paraId:77,tocIndex:8},{value:" to set the legend's basic position:",paraId:77,tocIndex:8},{value:"legend: {\n  color: {\n    position: 'top', // 'top' | 'right' | 'left' | 'bottom'\n  }\n}\n",paraId:78,tocIndex:8},{value:"Precise Alignment Configuration",paraId:79,tocIndex:8},{value:"Use ",paraId:80,tocIndex:8},{value:"layout",paraId:80,tocIndex:8},{value:" to configure the legend's precise alignment using Flexbox layout model:",paraId:80,tocIndex:8},{value:"legend: {\n  color: {\n    position: 'top',\n    layout: {\n      justifyContent: 'center',    // Main axis alignment: 'flex-start' | 'center' | 'flex-end'\n      alignItems: 'flex-start',    // Cross axis alignment: 'flex-start' | 'center' | 'flex-end'\n      flexDirection: 'row',        // Main axis direction: 'row' | 'column'\n    }\n  }\n}\n",paraId:81,tocIndex:8},{value:"Size Control Configuration",paraId:82,tocIndex:8},{value:"size",paraId:83,tocIndex:8},{value:": Controls legend size on the cross axis (height for horizontal layout, width for vertical layout)",paraId:83,tocIndex:8},{value:"length",paraId:83,tocIndex:8},{value:": Controls legend size on the main axis (width for horizontal layout, height for vertical layout)",paraId:83,tocIndex:8},{value:"crossPadding",paraId:83,tocIndex:8},{value:": Controls distance between legend and chart area",paraId:83,tocIndex:8},{value:"legend: {\n  color: {\n    size: 80,         // Legend cross axis size\n    length: 300,      // Legend main axis length\n    crossPadding: 20, // Distance from chart\n  }\n}\n",paraId:84,tocIndex:8},{value:"Complete Example",paraId:85,tocIndex:8},{value:"Here are several common legend layout scenarios:",paraId:86,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 400,\n  width: 600,\n});\nconst container = chart.getContainer();\n\nconst data = [\n  { genre: 'Sports', sold: 50 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\nchart.options({\n  type: 'interval',\n  data,\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  legend: {\n    color: {\n      position: 'top',\n      layout: {\n        justifyContent: 'center', // Horizontal center\n        alignItems: 'flex-start',\n      },\n      size: 60, // Control legend cross axis size\n      length: 250, // Control legend main axis length\n      crossPadding: 20, // Distance from chart\n    },\n  },\n});\n\n// Create layout selector\nconst controlPanel = document.createElement('div');\ncontrolPanel.style.cssText = `\n  margin-bottom: 16px;\n  padding: 16px;\n  background: #f5f5f5;\n  border-radius: 8px;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 16px;\n`;\n\n// Layout scenario selector\nconst sceneContainer = document.createElement('div');\nsceneContainer.innerHTML = `\n  <label style=\"display: block; margin-bottom: 8px; font-weight: bold;\">\n    Select layout scenario:\n  </label>\n`;\n\nconst sceneSelect = document.createElement('select');\nsceneSelect.style.cssText = 'width: 100%; padding: 4px;';\nconst scenes = [\n  { label: 'Top center (Dashboard style)', value: 'top-center' },\n  { label: 'Right vertical center (Detailed chart)', value: 'right-center' },\n  { label: 'Bottom left aligned (Space saving)', value: 'bottom-start' },\n  { label: 'Left bottom aligned', value: 'left-end' },\n  { label: 'Right top aligned (Compact)', value: 'right-start' },\n];\n\nsceneSelect.innerHTML = scenes\n  .map(\n    (scene, index) =>\n      `<option value=\"${scene.value}\" ${index === 0 ? 'selected' : ''}>${\n        scene.label\n      }</option>`,\n  )\n  .join('');\n\nsceneContainer.appendChild(sceneSelect);\n\n// Size control\nconst sizeContainer = document.createElement('div');\nsizeContainer.innerHTML = `\n  <label style=\"display: block; margin-bottom: 8px; font-weight: bold;\">\n    Legend size control:\n  </label>\n  <div style=\"margin-bottom: 8px;\">\n    <label>crossPadding (Distance from chart): </label>\n    <input type=\"range\" id=\"crossPadding\" min=\"5\" max=\"50\" value=\"20\" style=\"width: 100%;\">\n    <span id=\"crossPaddingValue\">20</span>\n  </div>\n  <div style=\"margin-bottom: 8px;\">\n    <label>size (Cross axis size): </label>\n    <input type=\"range\" id=\"size\" min=\"40\" max=\"200\" value=\"60\" style=\"width: 100%;\">\n    <span id=\"sizeValue\">60</span>\n  </div>\n  <div>\n    <label>length (Main axis length): </label>\n    <input type=\"range\" id=\"length\" min=\"40\" max=\"400\" value=\"250\" style=\"width: 100%;\">\n    <span id=\"lengthValue\">250</span>\n  </div>\n`;\n\ncontrolPanel.appendChild(sceneContainer);\ncontrolPanel.appendChild(sizeContainer);\n\nconst updateChart = () => {\n  const selectedScene = sceneSelect.value;\n  const crossPadding = parseInt(document.getElementById('crossPadding').value);\n  const size = parseInt(document.getElementById('size').value);\n  const length = parseInt(document.getElementById('length').value);\n\n  let position, justifyContent;\n\n  switch (selectedScene) {\n    case 'top-center':\n      position = 'top';\n      justifyContent = 'center';\n      break;\n    case 'right-center':\n      position = 'right';\n      justifyContent = 'center';\n      break;\n    case 'bottom-start':\n      position = 'bottom';\n      justifyContent = 'flex-start';\n      break;\n    case 'left-end':\n      position = 'left';\n      justifyContent = 'flex-end';\n      break;\n    case 'right-start':\n      position = 'right';\n      justifyContent = 'flex-start';\n      break;\n  }\n\n  chart.options({\n    legend: {\n      color: {\n        position,\n        layout: {\n          justifyContent,\n          alignItems: 'flex-start',\n        },\n        size,\n        length,\n        crossPadding,\n      },\n    },\n  });\n  chart.render();\n};\n\n// Bind events\nsceneSelect.addEventListener('change', updateChart);\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const crossPaddingSlider = document.getElementById('crossPadding');\n  const crossPaddingValue = document.getElementById('crossPaddingValue');\n  const sizeSlider = document.getElementById('size');\n  const sizeValue = document.getElementById('sizeValue');\n  const lengthSlider = document.getElementById('length');\n  const lengthValue = document.getElementById('lengthValue');\n\n  if (crossPaddingSlider && crossPaddingValue) {\n    crossPaddingSlider.addEventListener('input', (e) => {\n      crossPaddingValue.textContent = e.target.value;\n      updateChart();\n    });\n  }\n\n  if (sizeSlider && sizeValue) {\n    sizeSlider.addEventListener('input', (e) => {\n      sizeValue.textContent = e.target.value;\n      updateChart();\n    });\n  }\n\n  if (lengthSlider && lengthValue) {\n    lengthSlider.addEventListener('input', (e) => {\n      lengthValue.textContent = e.target.value;\n      updateChart();\n    });\n  }\n});\n\n// Insert control panel\ncontainer.insertBefore(controlPanel, container.firstChild);\n\n// Initial render\nchart.render();\n\n// Ensure slider events are properly bound\nsetTimeout(() => {\n  const crossPaddingSlider = document.getElementById('crossPadding');\n  const crossPaddingValue = document.getElementById('crossPaddingValue');\n  const sizeSlider = document.getElementById('size');\n  const sizeValue = document.getElementById('sizeValue');\n  const lengthSlider = document.getElementById('length');\n  const lengthValue = document.getElementById('lengthValue');\n\n  if (crossPaddingSlider && crossPaddingValue) {\n    crossPaddingSlider.addEventListener('input', (e) => {\n      crossPaddingValue.textContent = e.target.value;\n      updateChart();\n    });\n  }\n\n  if (sizeSlider && sizeValue) {\n    sizeSlider.addEventListener('input', (e) => {\n      sizeValue.textContent = e.target.value;\n      updateChart();\n    });\n  }\n\n  if (lengthSlider && lengthValue) {\n    lengthSlider.addEventListener('input', (e) => {\n      lengthValue.textContent = e.target.value;\n      updateChart();\n    });\n  }\n}, 100);\n",paraId:87,tocIndex:8},{value:"See the complete documentation on ",paraId:88,tocIndex:8},{value:"Legend Component",paraId:89,tocIndex:8},{value:" for more configuration options.",paraId:88,tocIndex:8},{value:"Problem Description",paraId:90,tocIndex:9},{value:"In data visualization, it's often necessary to draw line charts containing both actual values and predicted values, where the actual value portion is represented by solid lines and the predicted value portion by dashed lines, so users can clearly distinguish between historical data and prediction data.",paraId:91,tocIndex:9},{value:"Solution",paraId:92,tocIndex:9},{value:"In G2, one line corresponds to one Mark, and you cannot set different styles within the same line. To achieve mixed solid and dashed line effects, you need to:",paraId:93,tocIndex:9},{value:"Core Approach",paraId:94,tocIndex:9},{value:": Group data by type (actual/predicted), use ",paraId:94,tocIndex:9},{value:"series",paraId:94,tocIndex:9},{value:" encoding to create multiple line segments, then set different styles for different types of line segments through ",paraId:94,tocIndex:9},{value:"style",paraId:94,tocIndex:9},{value:" callback functions.",paraId:94,tocIndex:9},{value:"Key Configuration",paraId:95,tocIndex:9},{value:":",paraId:95,tocIndex:9},{value:"Data Grouping",paraId:96,tocIndex:9},{value:": Ensure connection point data exists in both groups to maintain line continuity",paraId:96,tocIndex:9},{value:"encode Configuration",paraId:96,tocIndex:9},{value:":\n",paraId:96,tocIndex:9},{value:"color",paraId:97,tocIndex:9},{value:": Used for legend grouping, different groups show different colors",paraId:97,tocIndex:9},{value:"series",paraId:97,tocIndex:9},{value:": Used to create multiple line segments, data points with the same series value will be connected as one line",paraId:97,tocIndex:9},{value:"Style Callback",paraId:96,tocIndex:9},{value:": Set solid or dashed lines based on data type through ",paraId:96,tocIndex:9},{value:"style.lineDash",paraId:96,tocIndex:9},{value:" callback function",paraId:96,tocIndex:9},{value:"Example Code",paraId:98,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    // Product A actual data\n    {\n      year: '2018',\n      value: 80,\n      product: 'Product A',\n      type: 'Actual',\n      series: 'Product A-Actual',\n    },\n    {\n      year: '2019',\n      value: 95,\n      product: 'Product A',\n      type: 'Actual',\n      series: 'Product A-Actual',\n    },\n    {\n      year: '2020',\n      value: 100,\n      product: 'Product A',\n      type: 'Actual',\n      series: 'Product A-Actual',\n    },\n    {\n      year: '2021',\n      value: 120,\n      product: 'Product A',\n      type: 'Actual',\n      series: 'Product A-Actual',\n    },\n    {\n      year: '2022',\n      value: 110,\n      product: 'Product A',\n      type: 'Actual',\n      series: 'Product A-Actual',\n    },\n    // Product A prediction data (note 2022 connection point duplication)\n    {\n      year: '2022',\n      value: 110,\n      product: 'Product A',\n      type: 'Prediction',\n      series: 'Product A-Prediction',\n    },\n    {\n      year: '2023',\n      value: 125,\n      product: 'Product A',\n      type: 'Prediction',\n      series: 'Product A-Prediction',\n    },\n    {\n      year: '2024',\n      value: 140,\n      product: 'Product A',\n      type: 'Prediction',\n      series: 'Product A-Prediction',\n    },\n    {\n      year: '2025',\n      value: 160,\n      product: 'Product A',\n      type: 'Prediction',\n      series: 'Product A-Prediction',\n    },\n    {\n      year: '2026',\n      value: 180,\n      product: 'Product A',\n      type: 'Prediction',\n      series: 'Product A-Prediction',\n    },\n\n    // Product B actual data\n    {\n      year: '2018',\n      value: 60,\n      product: 'Product B',\n      type: 'Actual',\n      series: 'Product B-Actual',\n    },\n    {\n      year: '2019',\n      value: 70,\n      product: 'Product B',\n      type: 'Actual',\n      series: 'Product B-Actual',\n    },\n    {\n      year: '2020',\n      value: 80,\n      product: 'Product B',\n      type: 'Actual',\n      series: 'Product B-Actual',\n    },\n    {\n      year: '2021',\n      value: 90,\n      product: 'Product B',\n      type: 'Actual',\n      series: 'Product B-Actual',\n    },\n    {\n      year: '2022',\n      value: 95,\n      product: 'Product B',\n      type: 'Actual',\n      series: 'Product B-Actual',\n    },\n    // Product B prediction data\n    {\n      year: '2022',\n      value: 95,\n      product: 'Product B',\n      type: 'Prediction',\n      series: 'Product B-Prediction',\n    },\n    {\n      year: '2023',\n      value: 100,\n      product: 'Product B',\n      type: 'Prediction',\n      series: 'Product B-Prediction',\n    },\n    {\n      year: '2024',\n      value: 110,\n      product: 'Product B',\n      type: 'Prediction',\n      series: 'Product B-Prediction',\n    },\n    {\n      year: '2025',\n      value: 125,\n      product: 'Product B',\n      type: 'Prediction',\n      series: 'Product B-Prediction',\n    },\n    {\n      year: '2026',\n      value: 145,\n      product: 'Product B',\n      type: 'Prediction',\n      series: 'Product B-Prediction',\n    },\n  ],\n  encode: {\n    x: 'year',\n    y: 'value',\n    color: 'product', // Used for legend grouping (product dimension)\n    series: 'series', // Used to create line segments (product-type combination)\n  },\n  scale: {\n    x: { range: [0, 1] },\n    y: { nice: true },\n  },\n  axis: {\n    x: { title: 'Year' },\n    y: { title: 'Sales (10k yuan)' },\n  },\n  children: [\n    {\n      type: 'line',\n      encode: { shape: 'smooth' },\n      style: {\n        lineWidth: 2,\n        lineDash: (d) => {\n          // Set line type based on data type: prediction data uses dashed line, actual data uses solid line\n          return d[0].type === 'Prediction' ? [4, 4] : null;\n        },\n      },\n    },\n    {\n      type: 'point',\n      encode: { shape: 'circle' },\n      style: { size: 3 },\n    },\n  ],\n});\n\nchart.render();\n",paraId:99,tocIndex:9},{value:"Key Points",paraId:100,tocIndex:9},{value:"Data Structure Design",paraId:101,tocIndex:9},{value:": Each data item includes ",paraId:101,tocIndex:9},{value:"product",paraId:101,tocIndex:9},{value:" (product), ",paraId:101,tocIndex:9},{value:"type",paraId:101,tocIndex:9},{value:" (actual/prediction), ",paraId:101,tocIndex:9},{value:"series",paraId:101,tocIndex:9},{value:" (line segment identifier) fields",paraId:101,tocIndex:9},{value:"Connection Point Handling",paraId:102,tocIndex:9},{value:": 2022 data exists in both actual and prediction groups to ensure line continuity",paraId:102,tocIndex:9},{value:"Encoding Configuration",paraId:103,tocIndex:9},{value:":",paraId:103,tocIndex:9},{value:"color: 'product'",paraId:104,tocIndex:9},{value:": Group by product, generate legend",paraId:104,tocIndex:9},{value:"series: 'series'",paraId:104,tocIndex:9},{value:": Group by combination field, create independent line segments",paraId:104,tocIndex:9},{value:"Style Callback",paraId:105,tocIndex:9},{value:":",paraId:105,tocIndex:9},{value:"style: {\n  lineDash: (d) => (d[0].type === 'Prediction' ? [4, 4] : null);\n}\n",paraId:106,tocIndex:9},{value:"Notes",paraId:107,tocIndex:9},{value:"series",paraId:108,tocIndex:9},{value:" encoding determines which data points will be connected as one line",paraId:108,tocIndex:9},{value:"color",paraId:108,tocIndex:9},{value:" encoding affects legend display and color mapping",paraId:108,tocIndex:9},{value:"d[0]",paraId:108,tocIndex:9},{value:" in style callback function represents the first data point corresponding to the current line segment",paraId:108,tocIndex:9},{value:"Connection points (such as 2022 in the example) must exist in both groups",paraId:108,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  { category: 'Frontend Development', type: 'HTML Structure', score: 3.48 },\n  { category: 'Frontend Development', type: 'CSS Styling', score: 3.52 },\n  { category: 'Frontend Development', type: 'JavaScript Programming', score: 3.31 },\n  { category: 'Frontend Development', type: 'React Framework', score: 3.28 },\n  { category: 'Backend Development', type: 'Java Programming', score: 3.35 },\n  { category: 'Backend Development', type: 'Database Design', score: 3.58 },\n  { category: 'Backend Development', type: 'API Development', score: 3.12 },\n  { category: 'Backend Development', type: 'Microservice Architecture', score: 3.45 },\n  { category: 'Data Analysis', type: 'Python Data Processing', score: 3.42 },\n  { category: 'Data Analysis', type: 'SQL Query Optimization', score: 3.33 },\n  { category: 'Data Analysis', type: 'Machine Learning Modeling', score: 3.56 },\n  { category: 'Data Analysis', type: 'Data Visualization', score: 3.39 },\n  { category: 'Product Design', type: 'User Experience Design', score: 3.47 },\n  { category: 'Product Design', type: 'Interactive Prototyping', score: 3.24 },\n  { category: 'Product Design', type: 'Requirements Analysis', score: 3.51 },\n  { category: 'Product Design', type: 'Competitive Analysis', score: 3.38 },\n  { category: 'Testing Quality', type: 'Automated Test Scripts', score: 3.44 },\n  { category: 'Testing Quality', type: 'Performance Testing', score: 3.29 },\n  { category: 'Testing Quality', type: 'Security Vulnerability Scanning', score: 3.36 },\n  { category: 'Testing Quality', type: 'Compatibility Verification', score: 3.18 },\n  { category: 'DevOps Deployment', type: 'Docker Containerization', score: 3.41 },\n  { category: 'DevOps Deployment', type: 'Kubernetes Orchestration', score: 3.33 },\n  { category: 'DevOps Deployment', type: 'Monitoring and Alerting', score: 3.27 },\n  { category: 'DevOps Deployment', type: 'CI/CD Pipeline', score: 3.49 },\n];\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data,\n  encode: {\n    x: 'type',\n    y: 'score',\n    color: (d) => d.category,\n  },\n  coordinate: {\n    transform: [\n      {\n        type: 'transpose',\n      },\n    ],\n  },\n  axis: {\n    x: { title: false }, // Hide x-axis title\n  },\n  scale: {\n    color: {\n      range: ['#BAE7FF', '#80C9FE', '#70E3E3', '#ABF5F5', '#FFB3BA', '#FFDFBA'], // Customize colors here\n    },\n  },\n});\n\nchart.render();\n",paraId:109,tocIndex:10},{value:"Problem Description",paraId:110,tocIndex:11},{value:"When using G2's state management (State) configuration, the configured ",paraId:111,tocIndex:11},{value:"active",paraId:111,tocIndex:11},{value:", ",paraId:111,tocIndex:11},{value:"selected",paraId:111,tocIndex:11},{value:", and other state styles don't take effect, and the chart's interactive effects don't meet expectations.",paraId:111,tocIndex:11},{value:"Cause Analysis",paraId:112,tocIndex:11},{value:"When the syntax is correct, State configuration not taking effect usually has the following reasons:",paraId:113,tocIndex:11},{value:"Incorrect configuration hierarchy",paraId:114,tocIndex:11},{value:": State configuration propagation mechanism has limitations, especially with multiple Marks",paraId:114,tocIndex:11},{value:"Missing interaction plugins",paraId:114,tocIndex:11},{value:": State needs to work with corresponding interaction plugins to take effect",paraId:114,tocIndex:11},{value:"Solutions",paraId:115,tocIndex:11},{value:"Check configuration hierarchy (most common cause)",paraId:116,tocIndex:11},{value:"With multiple Marks, you must configure State at each Mark level separately:",paraId:117,tocIndex:11},{value:"// ❌ Wrong: With multiple marks, state at view level won't propagate\nchart.options({\n  type: 'view',\n  state: { active: { fill: 'red' } }, // This configuration won't propagate to child marks\n  children: [{ type: 'line' }, { type: 'point' }],\n});\n\n// ✅ Correct: Configure state at each mark level separately\nchart.options({\n  type: 'view',\n  children: [\n    {\n      type: 'line',\n      state: { active: { stroke: 'red', strokeWidth: 2 } },\n    },\n    {\n      type: 'point',\n      state: { active: { fill: 'red', r: 6 } },\n    },\n  ],\n});\n",paraId:118,tocIndex:11},{value:"With single Mark, you can configure at view level:",paraId:119,tocIndex:11},{value:"// ✅ With single mark, state configuration at view level takes effect\nchart.options({\n  type: 'view',\n  state: { active: { fill: 'red' } }, // Will propagate to child mark\n  children: [\n    { type: 'line' }, // Will inherit state configuration from view\n  ],\n});\n",paraId:120,tocIndex:11},{value:"Configure directly at Mark level:",paraId:121,tocIndex:11},{value:"// ✅ Configure directly at mark level\nchart.options({\n  type: 'line',\n  state: { active: { stroke: 'red', strokeWidth: 2 } },\n});\n",paraId:122,tocIndex:11},{value:"Ensure correct interaction configuration",paraId:123,tocIndex:11},{value:"State needs to work with interactions to take effect:",paraId:124,tocIndex:11},{value:"chart.options({\n  type: 'interval',\n  state: {\n    active: { fill: 'red' },\n    inactive: { fill: '#aaa' },\n    selected: { fill: 'orange' },\n    unselected: { fill: '#eee' },\n  },\n  // Must configure corresponding interactions\n  interaction: {\n    elementHighlight: true, // Enable hover highlight\n    elementSelect: true, // Enable click selection\n  },\n});\n",paraId:125,tocIndex:11},{value:"Common interactions and corresponding states:",paraId:126,tocIndex:11},{value:"Interaction",paraId:127,tocIndex:11},{value:"Corresponding State",paraId:127,tocIndex:11},{value:"Description",paraId:127,tocIndex:11},{value:"elementHighlight",paraId:127,tocIndex:11},{value:"active/inactive",paraId:127,tocIndex:11},{value:"Hover highlight",paraId:127,tocIndex:11},{value:"elementSelect",paraId:127,tocIndex:11},{value:"selected/unselected",paraId:127,tocIndex:11},{value:"Click selection",paraId:127,tocIndex:11},{value:"brushHighlight",paraId:127,tocIndex:11},{value:"active/inactive",paraId:127,tocIndex:11},{value:"Area brush highlight",paraId:127,tocIndex:11},{value:"legendHighlight",paraId:127,tocIndex:11},{value:"active/inactive",paraId:127,tocIndex:11},{value:"Legend highlight",paraId:127,tocIndex:11},{value:"elementHighlightByColor",paraId:127,tocIndex:11},{value:"active/inactive",paraId:127,tocIndex:11},{value:"Highlight by color",paraId:127,tocIndex:11},{value:"elementSelectByColor",paraId:127,tocIndex:11},{value:"selected/unselected",paraId:127,tocIndex:11},{value:"Select by color",paraId:127,tocIndex:11},{value:"Complete configuration example",paraId:128,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { letter: 'A', frequency: 0.08167 },\n    { letter: 'B', frequency: 0.01492 },\n    { letter: 'C', frequency: 0.02782 },\n  ],\n  encode: { x: 'letter', y: 'frequency' },\n  state: {\n    // On hover: green fill + black stroke\n    active: { fill: 'green', stroke: 'black', strokeWidth: 1 },\n    // On selection: red fill (overrides active fill) + keeps active stroke\n    selected: { fill: 'red' },\n  },\n  interaction: { elementHighlight: true, elementSelect: true },\n});\n\nchart.render();\n",paraId:129,tocIndex:11},{value:"Problem Description",paraId:130,tocIndex:12},{value:"When using G2's state management with both ",paraId:131,tocIndex:12},{value:"elementHighlight",paraId:131,tocIndex:12},{value:" and ",paraId:131,tocIndex:12},{value:"elementSelect",paraId:131,tocIndex:12},{value:" interactions enabled, multiple states (like ",paraId:131,tocIndex:12},{value:"active",paraId:131,tocIndex:12},{value:" and ",paraId:131,tocIndex:12},{value:"selected",paraId:131,tocIndex:12},{value:") may take effect simultaneously, but the style behavior doesn't meet expectations.",paraId:131,tocIndex:12},{value:"Cause Analysis",paraId:132,tocIndex:12},{value:"G2 supports multiple states taking effect simultaneously. When the same property is configured by multiple states, the final effective style is selected based on priority. Different states have the following priorities:",paraId:133,tocIndex:12},{value:"selected:   3 (highest)\nunselected: 3\nactive:     2\ninactive:   2\ndefault:    1 (lowest)\n",paraId:134,tocIndex:12},{value:"Solutions",paraId:135,tocIndex:12},{value:"Understand state priority mechanism",paraId:136,tocIndex:12},{value:"Higher priority states will override properties of the same name in lower priority states:",paraId:137,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { letter: 'A', frequency: 0.08167 },\n    { letter: 'B', frequency: 0.01492 },\n    { letter: 'C', frequency: 0.02782 },\n  ],\n  encode: { x: 'letter', y: 'frequency' },\n  state: {\n    // On hover: green fill + black stroke\n    active: { fill: 'green', stroke: 'black', strokeWidth: 1 },\n    // On selection: red fill (overrides active fill) + keeps active stroke\n    selected: { fill: 'red' },\n  },\n  interaction: { elementHighlight: true, elementSelect: true },\n});\n\nchart.render();\n",paraId:138,tocIndex:12},{value:"Effect explanation",paraId:139,tocIndex:12},{value:":",paraId:139,tocIndex:12},{value:"Hover only: Shows green fill + black stroke",paraId:140,tocIndex:12},{value:"Selection only: Shows red fill",paraId:140,tocIndex:12},{value:"Hover over selected element: Red fill (selected has higher priority) + black stroke (provided by active)",paraId:140,tocIndex:12},{value:"Properly configure styles for different priorities",paraId:141,tocIndex:12},{value:"Avoid configuring the same style properties in different priority states, or ensure high priority states provide complete style configuration:",paraId:142,tocIndex:12},{value:"chart.options({\n  state: {\n    active: {\n      stroke: 'blue',\n      strokeWidth: 2,\n      opacity: 0.8,\n    },\n    selected: {\n      fill: 'orange',\n      stroke: 'black',\n      strokeWidth: 3,\n      // Don't configure opacity, will keep active's opacity effect\n    },\n  },\n});\n",paraId:143,tocIndex:12},{value:"Use dynamic styles for complex scenarios",paraId:144,tocIndex:12},{value:"For complex state combinations, you can use functions to dynamically calculate styles:",paraId:145,tocIndex:12},{value:"chart.options({\n  state: {\n    active: {\n      fill: (d) => (d.frequency > 0.05 ? 'lightblue' : 'lightgreen'),\n    },\n    selected: {\n      fill: (d) => (d.frequency > 0.05 ? 'darkblue' : 'darkgreen'),\n      strokeWidth: 3,\n    },\n  },\n});\n",paraId:146,tocIndex:12},{value:"Problem Description",paraId:147,tocIndex:13},{value:"When using G2 to draw charts in specific business scenarios, data often contains invalid values like ",paraId:148,tocIndex:13},{value:"null",paraId:148,tocIndex:13},{value:", ",paraId:148,tocIndex:13},{value:"undefined",paraId:148,tocIndex:13},{value:", or empty strings. By default, these null values are also displayed in the tooltip, affecting user experience and data readability.",paraId:148,tocIndex:13},{value:"Solution",paraId:149,tocIndex:13},{value:"You can use ",paraId:150,tocIndex:13},{value:"interaction.tooltip.filter",paraId:150,tocIndex:13},{value:" configuration to filter out these invalid data items, preventing null values from showing in the tooltip.",paraId:150,tocIndex:13},{value:"Basic filter configuration",paraId:151,tocIndex:13},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  data: [\n    { month: 'Jan', city: 'Tokyo', temperature: null },\n    { month: 'Jan', city: 'London', temperature: 3.9 },\n    { month: 'Feb', city: 'Tokyo', temperature: 8 },\n    { month: 'Feb', city: 'London', temperature: 4.2 },\n    { month: 'Mar', city: 'Tokyo', temperature: 9.5 },\n    { month: 'Mar', city: 'London', temperature: 5.7 },\n  ],\n  encode: { x: 'month', y: 'temperature', color: 'city' },\n  // Filter null and undefined values\n  interaction: {\n    tooltip: {\n      filter: (d) => d.value !== null && d.value !== undefined,\n    },\n  },\n  children: [\n    {\n      type: 'line',\n      encode: { shape: 'smooth' },\n      tooltip: {\n        items: [{ channel: 'y' }],\n      },\n    },\n    { type: 'point', encode: { shape: 'point' }, tooltip: false },\n  ],\n});\n\nchart.render();\n",paraId:152,tocIndex:13},{value:"Filtering for specific value ranges",paraId:153,tocIndex:13},{value:"Besides filtering null values, you can also filter data in specific value ranges:",paraId:154,tocIndex:13},{value:"// Filter negative values and null values\ninteraction: {\n  tooltip: {\n    filter: (d) => d.value !== null && d.value !== undefined && d.value >= 0,\n  },\n}\n\n// Filter outliers (data outside reasonable range)\ninteraction: {\n  tooltip: {\n    filter: (d) => {\n      if (d.value === null || d.value === undefined) return false;\n      return d.value >= 0 && d.value <= 1000; // Only show values in 0-1000 range\n    },\n  },\n}\n",paraId:155,tocIndex:13},{value:"Problem Description",paraId:156,tocIndex:14},{value:"When using G2 to create charts, legend item text may be very long and cannot be fully displayed due to layout space constraints. We need to implement ellipsis for long text while supporting hover interaction to show the complete content.",paraId:157,tocIndex:14},{value:"Solution",paraId:158,tocIndex:14},{value:"G2 provides the ",paraId:159,tocIndex:14},{value:"poptip",paraId:159,tocIndex:14},{value:" configuration to solve the problem of long legend text. By configuring ",paraId:159,tocIndex:14},{value:"poptip",paraId:159,tocIndex:14},{value:", you can display complete tooltip information when legend text is truncated and the user hovers over it.",paraId:159,tocIndex:14},{value:"Key Configuration",paraId:160,tocIndex:14},{value:"itemWidth",paraId:161,tocIndex:14},{value:": Limit legend item width to trigger text truncation",paraId:161,tocIndex:14},{value:"poptip.render",paraId:161,tocIndex:14},{value:": Customize tooltip content, supports string or ",paraId:161,tocIndex:14},{value:"html",paraId:161,tocIndex:14},{value:"poptip.domStyles",paraId:161,tocIndex:14},{value:": Customize tooltip box styles",paraId:161,tocIndex:14},{value:"poptip.position",paraId:161,tocIndex:14},{value:": Set tooltip position",paraId:161,tocIndex:14},{value:"poptip.offset",paraId:161,tocIndex:14},{value:": Set tooltip offset, recommend setting to [0, positive number] to avoid flickering when triggering ",paraId:161,tocIndex:14},{value:"poptip",paraId:161,tocIndex:14},{value:"Complete Example",paraId:162,tocIndex:14},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 300,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { category: 'This is a very long category name A that exceeds the display range', value: 40 },\n    { category: 'This is a very long category name B that exceeds the display range', value: 32 },\n    { category: 'This is a very long category name C that exceeds the display range', value: 28 },\n  ],\n  encode: { x: 'category', y: 'value', color: 'category' },\n  coordinate: {\n    transform: [\n      {\n        type: 'transpose',\n      },\n    ],\n  },\n  legend: {\n    color: {\n      itemWidth: 120, // Limit width to trigger poptip\n      poptip: {\n        render: (item) => `Full name: ${item.label}`,\n        position: 'top',\n        offset: [0, 20],\n        domStyles: {\n          '.component-poptip': {\n            background: 'rgb(114, 128, 191)',\n            color: '#fff',\n            padding: '12px 16px',\n            borderRadius: '8px',\n            backdropFilter: 'blur(10px)',\n            fontSize: '14px',\n            lineHeight: '1.5',\n            maxWidth: '280px',\n            zIndex: '1000',\n          },\n          '.component-poptip-arrow': {\n            display: 'block',\n            borderTopColor: '#667eea',\n          },\n          '.component-poptip-text': {\n            color: '#fff',\n            lineHeight: '1.5',\n          },\n        },\n      },\n    },\n  },\n});\n\nchart.render();\n",paraId:163,tocIndex:14},{value:"See the ",paraId:164,tocIndex:14},{value:"Legend Component",paraId:165,tocIndex:14},{value:" documentation for more configuration options.",paraId:164,tocIndex:14},{value:"Problem Description",paraId:166,tocIndex:15},{value:"When using G2 to create charts, when using ",paraId:167,tocIndex:15},{value:"interaction.tooltip.render",paraId:167,tocIndex:15},{value:" to customize tooltip rendering content, even though no commas were added, the final rendered tooltip is separated by commas.",paraId:167,tocIndex:15},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { name: 'London', month: 'Jan.', rainfall: 18.9 },\n    { name: 'London', month: 'Feb.', rainfall: 28.8 },\n    { name: 'London', month: 'Mar.', rainfall: 39.3 },\n    { name: 'London', month: 'Apr.', rainfall: 81.4 },\n    { name: 'London', month: 'May', rainfall: 47 },\n    { name: 'London', month: 'Jun.', rainfall: 20.3 },\n    { name: 'London', month: 'Jul.', rainfall: 24 },\n    { name: 'London', month: 'Aug.', rainfall: 35.6 },\n    { name: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n    { name: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n    { name: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n    { name: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n    { name: 'Berlin', month: 'May', rainfall: 52.6 },\n    { name: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n    { name: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n    { name: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n  ],\n  encode: { x: 'month', y: 'rainfall', color: 'name' },\n  transform: [{ type: 'dodgeX' }],\n  interaction: {\n    tooltip: {\n      shared: true,\n      render: (event, { title, items }) => `<div>\n    <h3 style=\"padding: 0; margin: 0; color: red;\">${title}</h3>\n    <div>${items.map(\n      (d) => `\n    <div><span style=\"color: ${d.color}\">${d.name}</span> ${d.value}</div>\n    `,\n    )}</div>\n    </div>\n    `,\n    },\n  },\n});\n\nchart.render();\n",paraId:168,tocIndex:15},{value:"Cause Analysis",paraId:169,tocIndex:15},{value:"The root cause of this problem lies in the behavior of JavaScript's array ",paraId:170,tocIndex:15},{value:"toString()",paraId:170,tocIndex:15},{value:" method. When using ",paraId:170,tocIndex:15},{value:"items.map()",paraId:170,tocIndex:15},{value:" to return a string array, within the ",paraId:170,tocIndex:15},{value:"${}",paraId:170,tocIndex:15},{value:" of template literals, JavaScript automatically calls the array's ",paraId:170,tocIndex:15},{value:"toString()",paraId:170,tocIndex:15},{value:" method for type conversion. The array's ",paraId:170,tocIndex:15},{value:"toString()",paraId:170,tocIndex:15},{value:" method uses commas to connect all array elements, which is why commas appear.",paraId:170,tocIndex:15},{value:"For example:",paraId:171,tocIndex:15},{value:"const array = ['<div>item1</div>', '<div>item2</div>', '<div>item3</div>'];\nconsole.log(`${array}`); // Output: <div>item1</div>,<div>item2</div>,<div>item3</div>\n",paraId:172,tocIndex:15},{value:"Solution",paraId:173,tocIndex:15},{value:"Use the ",paraId:174,tocIndex:15},{value:".join('')",paraId:174,tocIndex:15},{value:" method to connect array elements into a string, rather than relying on JavaScript's automatic type conversion:",paraId:174,tocIndex:15},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { name: 'London', month: 'Jan.', rainfall: 18.9 },\n    { name: 'London', month: 'Feb.', rainfall: 28.8 },\n    { name: 'London', month: 'Mar.', rainfall: 39.3 },\n    { name: 'London', month: 'Apr.', rainfall: 81.4 },\n    { name: 'London', month: 'May', rainfall: 47 },\n    { name: 'London', month: 'Jun.', rainfall: 20.3 },\n    { name: 'London', month: 'Jul.', rainfall: 24 },\n    { name: 'London', month: 'Aug.', rainfall: 35.6 },\n    { name: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n    { name: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n    { name: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n    { name: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n    { name: 'Berlin', month: 'May', rainfall: 52.6 },\n    { name: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n    { name: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n    { name: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n  ],\n  encode: { x: 'month', y: 'rainfall', color: 'name' },\n  transform: [{ type: 'dodgeX' }],\n  interaction: {\n    tooltip: {\n      shared: true,\n      render: (event, { title, items }) => `<div>\n    <h3 style=\"padding: 0; margin: 0; color: red;\">${title}</h3>\n    <div>${items\n      .map(\n        (d) => `\n    <div><span style=\"color: ${d.color}\">${d.name}</span> ${d.value}</div>\n    `,\n      )\n      .join('')}</div>\n    </div>\n    `,\n    },\n  },\n});\n\nchart.render();\n",paraId:175,tocIndex:15},{value:"Key Changes",paraId:176,tocIndex:15},{value:":",paraId:176,tocIndex:15},{value:"// ❌ Wrong: Will produce comma separation\n${items.map((d) => `<div>...</div>`)}\n\n// ✅ Correct: Use join('') to avoid commas\n${items.map((d) => `<div>...</div>`).join('')}\n",paraId:177,tocIndex:15},{value:"Alternative Solutions",paraId:178,tocIndex:15},{value:"Using forEach + string concatenation",paraId:179,tocIndex:15},{value:":",paraId:179,tocIndex:15},{value:'render: (event, { title, items }) => {\n  let content = `<h3 style="padding: 0; margin: 0; color: red;">${title}</h3>`;\n  items.forEach((d) => {\n    content += `<div><span style="color: ${d.color}">${d.name}</span> ${d.value}</div>`;\n  });\n  return `<div>${content}</div>`;\n};\n',paraId:180,tocIndex:15},{value:"Using reduce method",paraId:181,tocIndex:15},{value:":",paraId:181,tocIndex:15},{value:'render: (event, { title, items }) => `<div>\n  <h3 style="padding: 0; margin: 0; color: red;">${title}</h3>\n  <div>${items.reduce(\n    (acc, d) =>\n      acc +\n      `<div><span style="color: ${d.color}">${d.name}</span> ${d.value}</div>`,\n    \'\',\n  )}</div>\n</div>`;\n',paraId:182,tocIndex:15},{value:"Important Notes",paraId:183,tocIndex:15},{value:"Always use ",paraId:184,tocIndex:15},{value:".join('')",paraId:184,tocIndex:15},{value:" when converting arrays to strings for embedding in template literals",paraId:184,tocIndex:15},{value:"If you need specific separators (like line breaks), you can use ",paraId:184,tocIndex:15},{value:".join('\\n')",paraId:184,tocIndex:15},{value:" or other separators",paraId:184,tocIndex:15},{value:"This issue may occur in similar scenarios in other frameworks like React JSX, Vue templates, etc.",paraId:184,tocIndex:15}]},90748:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(17280);const t=[{value:"new Chart(params: ChartCfg) => View;\n",paraId:0,tocIndex:1},{value:"Creates a Chart object.",paraId:1,tocIndex:1},{value:"const chart = new Chart({\n  container: 'container',\n  width: 640,\n  height: 480,\n});\n",paraId:2,tocIndex:1},{value:" ",paraId:3,tocIndex:2},{value:"string | HTMLElement",paraId:3,tocIndex:2},{value:" ",paraId:3,tocIndex:2},{value:"optional",paraId:3,tocIndex:2},{value:" ",paraId:3,tocIndex:2},{value:"Specifies the DOM container for chart rendering. Accepts either a DOM ID or DOM element instance.",paraId:4,tocIndex:2},{value:"// Pass DOM id\nconst chart = new Chart({\n  container: 'container',\n});\n\n// Pass DOM instance\nconst container = document.createElement('div');\nconst chart = new Chart({\n  container,\n});\n\n// Get default container\nconst chart = new Chart();\nchart.options({});\nchart.render();\nreturn chart.getContainer();\n",paraId:5,tocIndex:2},{value:" ",paraId:6,tocIndex:3},{value:"boolean",paraId:6,tocIndex:3},{value:" ",paraId:6,tocIndex:3},{value:"optional",paraId:6,tocIndex:3},{value:" ",paraId:6,tocIndex:3},{value:"default:",paraId:6,tocIndex:3},{value:" ",paraId:6,tocIndex:3},{value:"false",paraId:6,tocIndex:3},{value:"Whether the chart auto-adapts to container dimensions. Default ",paraId:7,tocIndex:3},{value:"false",paraId:7,tocIndex:3},{value:" requires manual width/height setting. When ",paraId:7,tocIndex:3},{value:"autoFit: true",paraId:7,tocIndex:3},{value:", automatically uses container dimensions while respecting user-defined height.",paraId:7,tocIndex:3},{value:" ",paraId:8,tocIndex:4},{value:"boolean",paraId:8,tocIndex:4},{value:" ",paraId:8,tocIndex:4},{value:"optional",paraId:8,tocIndex:4},{value:" ",paraId:8,tocIndex:4},{value:"default:",paraId:8,tocIndex:4},{value:" ",paraId:8,tocIndex:4},{value:"false",paraId:8,tocIndex:4},{value:"Whether to clip graphics exceeding the drawing area.",paraId:9,tocIndex:4},{value:"With ",paraId:10,tocIndex:4},{value:"clip = false",paraId:10,tocIndex:4},{value:", out-of-bound graphics remain visible:",paraId:10,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .data([\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ])\n  .encode('x', 'year')\n  .encode('y', 'value')\n  .scale('x', { range: [0, 1] })\n  .scale('y', { domainMin: 6, nice: true });\n\nchart.line().label({\n  text: 'value',\n  style: {\n    dx: -10,\n    dy: -12,\n  },\n});\nchart.point().style('fill', 'white').tooltip(false);\nchart.render();\n",paraId:11,tocIndex:4},{value:"Set ",paraId:12,tocIndex:4},{value:"clip = true",paraId:12,tocIndex:4},{value:" to enable clipping. Adjust ",paraId:12,tocIndex:4},{value:"inset",paraId:12,tocIndex:4},{value:" if points get clipped:",paraId:12,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  clip: true,\n  inset: 20,\n});\n\nchart\n  .data([\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ])\n  .encode('x', 'year')\n  .encode('y', 'value')\n  .scale('x', {\n    range: [0, 1],\n  })\n  .scale('y', {\n    domainMin: 6,\n    nice: true,\n  });\n\nchart.line().label({\n  text: 'value',\n  style: {\n    dx: -10,\n    dy: -12,\n  },\n});\n\nchart.point().style('fill', 'white').tooltip(false);\nchart.render();\n",paraId:13,tocIndex:4},{value:" ",paraId:14,tocIndex:5},{value:"number",paraId:14,tocIndex:5},{value:" ",paraId:14,tocIndex:5},{value:"optional",paraId:14,tocIndex:5},{value:" ",paraId:14,tocIndex:5},{value:"default:",paraId:14,tocIndex:5},{value:" ",paraId:14,tocIndex:5},{value:"640",paraId:14,tocIndex:5},{value:" ",paraId:14,tocIndex:5},{value:"Chart width.",paraId:15,tocIndex:5},{value:"number",paraId:16,tocIndex:6},{value:" ",paraId:16,tocIndex:6},{value:"optional",paraId:16,tocIndex:6},{value:" ",paraId:16,tocIndex:6},{value:"default:",paraId:16,tocIndex:6},{value:" ",paraId:16,tocIndex:6},{value:"480",paraId:16,tocIndex:6},{value:" ",paraId:16,tocIndex:6},{value:"Chart height.",paraId:17,tocIndex:6},{value:" ",paraId:18,tocIndex:7},{value:"number",paraId:18,tocIndex:7},{value:" ",paraId:18,tocIndex:7},{value:"optional",paraId:18,tocIndex:7},{value:" ",paraId:18,tocIndex:7},{value:"default:",paraId:18,tocIndex:7},{value:" ",paraId:18,tocIndex:7},{value:"0",paraId:18,tocIndex:7},{value:" ",paraId:18,tocIndex:7},{value:"Chart depth for 3D visualizations.",paraId:19,tocIndex:7},{value:" ",paraId:20,tocIndex:8},{value:"'auto' | number",paraId:20,tocIndex:8},{value:" ",paraId:20,tocIndex:8},{value:"optional",paraId:20,tocIndex:8},{value:" ",paraId:20,tocIndex:8},{value:"default:",paraId:20,tocIndex:8},{value:" ",paraId:20,tocIndex:8},{value:"'auto'",paraId:20,tocIndex:8},{value:"Sets chart padding using CSS box model conventions.",paraId:21,tocIndex:8},{value:"const chart = new Chart({\n  container: 'container',\n  width: 1000,\n  height: 500,\n  padding: 20,\n});\n",paraId:22,tocIndex:8},{value:" ",paraId:23,tocIndex:9},{value:"number",paraId:23,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"optional",paraId:23,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"default:",paraId:23,tocIndex:9},{value:" ",paraId:23,tocIndex:9},{value:"16",paraId:23,tocIndex:9},{value:"Sets chart margin using CSS box model .",paraId:24,tocIndex:9},{value:"const chart = new Chart({\n  container: 'container',\n  width: 1000,\n  height: 500,\n  margin: 20,\n});\n",paraId:25,tocIndex:9},{value:" ",paraId:26,tocIndex:10},{value:"number",paraId:26,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"optional",paraId:26,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"default:",paraId:26,tocIndex:10},{value:" ",paraId:26,tocIndex:10},{value:"0",paraId:26,tocIndex:10},{value:"Sets breathing space around chart area.",paraId:27,tocIndex:10},{value:"const chart = new G2.Chart({\n  container: 'container',\n  width: 1000,\n  height: 500,\n  inset: 20,\n});\n",paraId:28,tocIndex:10},{value:"See ",paraId:29,tocIndex:10},{value:"Chart Layout",paraId:30,tocIndex:10},{value:" for layout details.",paraId:29,tocIndex:10},{value:"Canvas",paraId:31,tocIndex:11},{value:" | ",paraId:31,tocIndex:11},{value:"SVG",paraId:31,tocIndex:11},{value:" | ",paraId:31,tocIndex:11},{value:"WebGL",paraId:31,tocIndex:11},{value:" ",paraId:31,tocIndex:11},{value:"optional",paraId:31,tocIndex:11},{value:" ",paraId:31,tocIndex:11},{value:"default:",paraId:31,tocIndex:11},{value:" ",paraId:31,tocIndex:11},{value:"Canvas",paraId:31,tocIndex:11},{value:" ",paraId:31,tocIndex:11},{value:"Specifies rendering engine (default: Canvas). For SVG/WebGL, import respective packages:",paraId:32,tocIndex:11},{value:"import { Chart } from '@antv/g2';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\n\nconst chart = new Chart({\n  container: 'container',\n  // Alternatively, you can choose the WebGLRenderer. If not specified, the default will be CanvasRenderer.\n  renderer: new SVGRenderer(),\n});\n",paraId:33,tocIndex:11},{value:"See ",paraId:34,tocIndex:11},{value:"renderer",paraId:35,tocIndex:11},{value:" for renderer details.",paraId:34,tocIndex:11},{value:" ",paraId:36,tocIndex:12},{value:"'classic' | 'classicDark' | 'academy' | customTheme",paraId:36,tocIndex:12},{value:" ",paraId:36,tocIndex:12},{value:"optional",paraId:36,tocIndex:12},{value:"Configures chart theme. Register custom themes using ",paraId:37,tocIndex:12},{value:"register",paraId:37,tocIndex:12},{value:" :",paraId:37,tocIndex:12},{value:"import { Light, register, Chart } from '@antv/g2';\n\n// define theme\nfunction CustomTheme() {\n  const light = Light();\n  return {\n    ...light,\n    category20: [\n      '#FFC0CB',\n      '#A2F5E8',\n      '#D4B0FF',\n      '#FFF3A3',\n      '#9AD6E3',\n      '#FFD8B1',\n      '#C3E6B4',\n      '#E8CFF8',\n      '#FFB7A0',\n      '#B8D0EB',\n      '#F5E6C3',\n      '#EED5B7',\n      '#C5D4EB',\n      '#D9C2F0',\n      '#D4EDC9',\n      '#B8E0A8',\n      '#EFD3A7',\n      '#F7CBD4',\n      '#F7ABD4',\n      '#F0E6E6',\n    ],\n  };\n}\n\n// register theme\nregister('theme.custom', CustomTheme);\n\nconst chart = new Chart({\n  container: 'container',\n  theme: { type: 'custom' }, // use theme\n});\n\nchart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency', color: 'letter' },\n  axis: { y: { labelFormatter: '.0%' } },\n});\n\nchart.render();\n",paraId:38,tocIndex:12},{value:" ",paraId:39,tocIndex:13},{value:"any[]",paraId:39,tocIndex:13},{value:" ",paraId:39,tocIndex:13},{value:"optional",paraId:39,tocIndex:13},{value:"Specify the plugins to be used during rendering. As a flexible extension mechanism, plugins allow users to enhance G2's functionality, such as creating hand-drawn-style charts.",paraId:40,tocIndex:13},{value:"import { Plugin } from '@antv/g-plugin-rough-canvas-renderer';\n\nconst chart = new Chart({\n  container: 'container',\n  plugins: [new Plugin()],\n});\n",paraId:41,tocIndex:13},{value:"Accessibility's text search functionality can also be achieved through plugins.",paraId:42,tocIndex:13},{value:"import { Plugin } from '@antv/g-plugin-a11y';\n\nconst plugin = new Plugin({ enableExtractingText: true });\n\nconst chart = new Chart({\n  container: 'container',\n  plugins: [plugin],\n});\n",paraId:43,tocIndex:13},{value:"For more information on plugin usage, see ",paraId:44,tocIndex:13},{value:"plugin-rough",paraId:45,tocIndex:13},{value:" and ",paraId:44,tocIndex:13},{value:"plugin-a11y",paraId:46,tocIndex:13},{value:".",paraId:44,tocIndex:13},{value:"G2 provides an imperative Functional API for defining charts. Here's an example of declaring the simplest bar chart:",paraId:47,tocIndex:14},{value:"import { Chart } from '@antv/g2';\n\n// Initialize the chart instance\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// declare the visualization\nchart\n  .interval() // Create an Interval mark\n  .data([\n    // Bind the data\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre') // Encode data to the x channel\n  .encode('y', 'sold'); // Encode data to the y channel\n\n// Render the visualization\nchart.render();\n",paraId:48,tocIndex:14},{value:"The Functional API is built on top of the Spec API. Simply put, each ",paraId:49,tocIndex:14},{value:"Chart",paraId:49,tocIndex:14},{value:" instance has an ",paraId:49,tocIndex:14},{value:"options",paraId:49,tocIndex:14},{value:" object. The Functional API generates this ",paraId:49,tocIndex:14},{value:"options",paraId:49,tocIndex:14},{value:" object through a series of methods, while the Spec API directly sets it. Regardless of which API you use, G2 ultimately renders the current ",paraId:49,tocIndex:14},{value:"options",paraId:49,tocIndex:14},{value:". Therefore, both APIs are equally capable of defining visualizations.",paraId:49,tocIndex:14},{value:"Setting Properties",paraId:50,tocIndex:14},{value:"Retrieve or set the overall chart configuration, known as the Spec.",paraId:51,tocIndex:15},{value:"// Retrieve configuration\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  })\n  .encode('x', 'height')\n  .encode('y', 'weight')\n  .encode('color', 'gender');\nconsole.log(chart.options());\n\n// Set configuration\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  },\n  encode: { x: 'height', y: 'weight', color: 'gender' },\n});\n",paraId:52,tocIndex:15},{value:"Creating Composite Containers",paraId:53,tocIndex:15},{value:"In G2, the Spec is essentially a hierarchical ",paraId:54,tocIndex:15},{value:"View Tree",paraId:54,tocIndex:15},{value:", consisting of various nodes. Each node is defined by ",paraId:54,tocIndex:15},{value:"node.type",paraId:54,tocIndex:15},{value:", which determines its role, and nesting can be achieved through ",paraId:54,tocIndex:15},{value:"node.children",paraId:54,tocIndex:15},{value:".",paraId:54,tocIndex:15},{value:'A "view" can be simply understood as a chart, or a ',paraId:55,tocIndex:15},{value:"Single View Plot",paraId:55,tocIndex:15},{value:'. This "tree" uses different container nodes to manage charts in time and space, enabling the creation of ',paraId:55,tocIndex:15},{value:"Multiple View Plots",paraId:55,tocIndex:15},{value:".",paraId:55,tocIndex:15},{value:"For example:",paraId:56,tocIndex:15},{value:"({\n  type: 'spaceFlex',\n  children: [\n    {\n      type: 'view',\n      children: [{ type: 'line' }, { type: 'point' }],\n    },\n    {\n      type: 'interval',\n    },\n  ],\n});\n",paraId:57,tocIndex:15},{value:"The hierarchy can be declared programmatically using the API by adding specific ",paraId:58,tocIndex:15},{value:"child",paraId:58,tocIndex:15},{value:" nodes to a ",paraId:58,tocIndex:15},{value:"parent",paraId:58,tocIndex:15},{value:" using the syntax ",paraId:58,tocIndex:15},{value:"parent.[child]()",paraId:58,tocIndex:15},{value:". The above hierarchy can be expressed as follows:",paraId:58,tocIndex:15},{value:"const spaceFlex = chart.spaceFlex();\n\nconst view = spaceFlex.view();\n\nview.line();\n\nview.point();\n\nspaceFlex.interval();\n",paraId:59,tocIndex:15},{value:"Add a ",paraId:60,tocIndex:16},{value:"view",paraId:61,tocIndex:16},{value:" to the chart.In G2, a View is used to render multiple marks. A View possesses its own coordinate system and serves as the smallest unit for applying interactions.",paraId:60,tocIndex:16},{value:"const spaceFlex = chart.spaceFlex();\n\nconst view = spaceFlex.view();\n\nview.line();\nview.point();\n",paraId:62,tocIndex:16},{value:"Add a ",paraId:63,tocIndex:17},{value:"spaceLayer",paraId:64,tocIndex:17},{value:" composite container.",paraId:63,tocIndex:17},{value:"spaceLayer",paraId:63,tocIndex:17},{value:" does not divide the space in any way; multiple views share the same spatial area, which is often used for view overlapping.",paraId:63,tocIndex:17},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst layer = chart.spaceLayer().data({\n  type: 'fetch',\n  value:\n    'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  format: 'csv',\n});\n\n// bar chart\nlayer\n  .interval()\n  .attr('paddingLeft', 50)\n  .transform({ type: 'sortX', reverse: true, by: 'y' })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('color', 'letter');\n\n// pie chart\nlayer\n  .interval()\n  .attr('paddingLeft', 400)\n  .attr('paddingBottom', 200)\n  .coordinate({ type: 'theta' })\n  .transform({ type: 'stackY' })\n  .legend(false)\n  .encode('y', 'frequency')\n  .encode('color', 'letter');\n\nchart.render();\n",paraId:65,tocIndex:17},{value:"Add a ",paraId:66,tocIndex:18},{value:"spaceFlex",paraId:67,tocIndex:18},{value:" composite container.",paraId:66,tocIndex:18},{value:"spaceFlex",paraId:66,tocIndex:18},{value:" divides the spatial area using a layout method similar to CSS flex, commonly used for views that require comparison of multiple charts.",paraId:66,tocIndex:18},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 900,\n});\n\nconst flex = chart\n  .spaceFlex()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n  })\n  .attr('direction', 'col')\n  .attr('ratio', [1, 2]);\n\nflex\n  .interval()\n  .attr('paddingBottom', 0)\n  .attr('paddingRight', 300)\n  .transform({ type: 'groupX', y: 'max' })\n  .axis('x', false)\n  .encode('x', (d) => new Date(d.date).getUTCDate())\n  .encode('y', 'temp_max')\n  .encode('color', 'steelblue');\n\nflex\n  .spaceFlex()\n  .attr('ratio', [2, 1])\n  .call((node) =>\n    node\n      .cell()\n      .attr('paddingRight', 0)\n      .attr('paddingBottom', 50)\n      .transform({ type: 'group', color: 'max' })\n      .encode('x', (d) => new Date(d.date).getUTCDate())\n      .encode('y', (d) => new Date(d.date).getUTCMonth())\n      .encode('color', 'temp_max')\n      .style('inset', 0.5)\n      .axis('x', { title: 'Date' })\n      .axis('y', { title: 'Month' })\n      .legend({ color: false })\n      .scale('color', {\n        type: 'sequential',\n        palette: 'gnBu',\n      }),\n  )\n  .call((node) =>\n    node\n      .interval()\n      .attr('paddingBottom', 50)\n      .transform({ type: 'groupX', y: 'max' })\n      .coordinate({ transform: [{ type: 'transpose' }] });\n      .axis('x', false)\n      .encode('x', (d) => new Date(d.date).getUTCMonth())\n      .encode('y', 'temp_max')\n      .encode('color', 'steelblue'),\n  );\n\nchart.render();\n",paraId:68,tocIndex:18},{value:"Add a ",paraId:69,tocIndex:19},{value:"facetRect",paraId:70,tocIndex:19},{value:" composite container.",paraId:69,tocIndex:19},{value:"facetRect",paraId:69,tocIndex:19},{value:" divides space and data using the row and column field dimensions, visualizing data segments within each subspace.",paraId:69,tocIndex:19},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 928,\n  height: 270,\n  paddingBottom: 50,\n});\n\nconst facetRect = chart\n  .facetRect()\n  .attr('paddingBottom', 50)\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/anscombe.json',\n  })\n  .encode('x', 'series');\n\nfacetRect\n  .point()\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .style('stroke', '#000')\n  .attr('inset', 10);\n\nchart.render();\n",paraId:71,tocIndex:19},{value:"Add a ",paraId:72,tocIndex:20},{value:"facetCircle",paraId:73,tocIndex:20},{value:" composite container.",paraId:72,tocIndex:20},{value:"facetCircle",paraId:72,tocIndex:20},{value:" divides spatial data into segments using circular partitioning based on specified fields and then visualizes the data for each facet.",paraId:72,tocIndex:20},{value:"import { Chart } from '@antv/g2';\n\nconst M = [\n  'Jan.',\n  'Feb.',\n  'Mar.',\n  'Apr.',\n  'May',\n  'Jun.',\n  'Jul.',\n  'Aug.',\n  'Sept.',\n  'Oct.',\n  'Nov.',\n  'Dec.',\n];\nconst N = ['A', 'B', 'C', 'D'];\nconst data = M.flatMap((month) =>\n  N.map((name) => ({\n    month,\n    name,\n    value: Math.random(),\n  })),\n);\n\nconst chart = new Chart({\n  container: 'container',\n  width: 480,\n  height: 480,\n});\n\nconst facetCircle = chart.facetCircle().data(data).encode('position', 'month');\n\nfacetCircle\n  .interval()\n  .encode('x', 'name')\n  .encode('y', 'value')\n  .encode('color', 'name');\n\nchart.render();\n",paraId:74,tocIndex:20},{value:"Add a ",paraId:75,tocIndex:21},{value:"repeatMatrix",paraId:76,tocIndex:21},{value:" composite container.",paraId:75,tocIndex:21},{value:"repeatMatrix",paraId:75,tocIndex:21},{value:" partitions the space based on the number of fields and then visualizes the data within these subspaces.",paraId:75,tocIndex:21},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 300,\n  height: 720,\n  paddingLeft: 50,\n  paddingBottom: 60,\n});\n\nconst repeatMatrix = chart\n  .repeatMatrix()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/weather.json',\n    transform: [\n      {\n        type: 'map',\n        callback: ({ date, ...d }) => ({\n          ...d,\n          date: new Date(date).getMonth() + '',\n        }),\n      },\n    ],\n  })\n  .encode('y', ['temp_max', 'precipitation', 'wind'])\n  .encode('x', 'date');\n\nrepeatMatrix\n  .line()\n  .transform({ type: 'groupX', y: 'mean' })\n  .encode('color', 'location')\n  .scale('y', { zero: true });\n\nchart.render();\n",paraId:77,tocIndex:21},{value:"Add a ",paraId:78,tocIndex:22},{value:"geoView",paraId:79,tocIndex:22},{value:" composite container.",paraId:78,tocIndex:22},{value:"geoView",paraId:78,tocIndex:22},{value:" serves as a container for map rendering, allowing the overlay of multiple geoPath layers. Like the normal ",paraId:78,tocIndex:22},{value:"view",paraId:78,tocIndex:22},{value:", its child mark will also inherit the parent's data.",paraId:78,tocIndex:22},{value:"import { Chart } from '@antv/g2';\nimport { feature } from 'topojson-client';\n\nPromise.all([\n  fetch('https://assets.antv.antgroup.com/g2/londonBoroughs.json').then((res) =>\n    res.json(),\n  ),\n  fetch('https://assets.antv.antgroup.com/g2/londonCentroids.json').then(\n    (res) => res.json(),\n  ),\n  fetch('https://assets.antv.antgroup.com/g2/londonTubeLines.json').then(\n    (res) => res.json(),\n  ),\n]).then((values) => {\n  const [londonBoroughs, londonCentroids, londonTubeLines] = values;\n  const london = feature(\n    londonBoroughs,\n    londonBoroughs.objects.boroughs,\n  ).features;\n  const line = feature(londonTubeLines, londonTubeLines.objects.line).features;\n\n  const chart = new Chart({\n    container: 'container',\n    autoFit: true,\n  });\n\n  const geoView = chart.geoView();\n\n  geoView\n    .geoPath()\n    .data(london)\n    .style('fill', 'lightgray')\n    .style('stroke', 'white')\n    .style('strokeWidth', 2);\n\n  geoView\n    .text()\n    .data(londonCentroids)\n    .encode('x', 'cx')\n    .encode('y', 'cy')\n    .encode('text', (d) => d.name.split(/\\W/)[0])\n    .style('fontSize', 8)\n    .style('opacity', 0.6);\n\n  geoView\n    .geoPath()\n    .data(line)\n    .encode('color', 'id')\n    .encode('shape', 'hollow')\n    .scale('color', {\n      domain: [\n        'Bakerloo',\n        'Central',\n        'Circle',\n        'District',\n        'DLR',\n        'Hammersmith & City',\n        'Jubilee',\n        'Metropolitan',\n        'Northern',\n        'Piccadilly',\n        'Victoria',\n        'Waterloo & City',\n      ],\n      range: [\n        'rgb(137,78,36)',\n        'rgb(220,36,30)',\n        'rgb(255,206,0)',\n        'rgb(1,114,41)',\n        'rgb(0,175,173)',\n        'rgb(215,153,175)',\n        'rgb(106,114,120)',\n        'rgb(114,17,84)',\n        'rgb(0,0,0)',\n        'rgb(0,24,168)',\n        'rgb(0,160,226)',\n        'rgb(106,187,170)',\n      ],\n    });\n\n  chart.render();\n});\n",paraId:80,tocIndex:22},{value:"Add a ",paraId:81,tocIndex:23},{value:"timingKeyframe",paraId:82,tocIndex:23},{value:" composite container.",paraId:81,tocIndex:23},{value:"timingKeyframe",paraId:81,tocIndex:23},{value:" performs seamless transition animations between different views, linking visual elements using ",paraId:81,tocIndex:23},{value:"mark.key",paraId:81,tocIndex:23},{value:" and ",paraId:81,tocIndex:23},{value:"mark.groupKey",paraId:81,tocIndex:23},{value:".",paraId:81,tocIndex:23},{value:"fetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/fbe4a8c1-ce04-4ba3-912a-0b26d6965333.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const chart = new Chart({\n      container: 'container',\n      paddingTop: 60,\n      paddingLeft: 100,\n    });\n\n    const keyframe = chart\n      .timingKeyframe()\n      .attr('direction', 'alternate')\n      .attr('iterationCount', 4);\n\n    // bar chart\n    keyframe\n      .interval()\n      .data(data)\n      .transform({ type: 'groupX', y: 'mean' })\n      .encode('x', 'gender')\n      .encode('y', 'weight')\n      .encode('color', 'gender')\n      .encode('key', 'gender'); // Specify the key\n\n    // scatter chart\n    keyframe\n      .point()\n      .data(data)\n      .encode('x', 'height')\n      .encode('y', 'weight')\n      .encode('color', 'gender')\n      .encode('groupKey', 'gender') // Specify the key for grouping.\n      .encode('shape', 'point');\n\n    chart.render();\n  });\n",paraId:83,tocIndex:23},{value:"Creating Marks",paraId:84,tocIndex:23},{value:"Next, we'll introduce the API in G2 for creating marks. Marks can be added to different container nodes, including ",paraId:85,tocIndex:23},{value:"chart",paraId:85,tocIndex:23},{value:", ",paraId:85,tocIndex:23},{value:"view",paraId:85,tocIndex:23},{value:", ",paraId:85,tocIndex:23},{value:"geoView",paraId:85,tocIndex:23},{value:", ",paraId:85,tocIndex:23},{value:"spaceLayer",paraId:85,tocIndex:23},{value:", ",paraId:85,tocIndex:23},{value:"facetRect",paraId:85,tocIndex:23},{value:", ",paraId:85,tocIndex:23},{value:"spaceFlex",paraId:85,tocIndex:23},{value:", ",paraId:85,tocIndex:23},{value:"facetCircle",paraId:85,tocIndex:23},{value:", ",paraId:85,tocIndex:23},{value:"repeatMatrix",paraId:85,tocIndex:23},{value:", and ",paraId:85,tocIndex:23},{value:"timingKeyframe",paraId:85,tocIndex:23},{value:",They all inherit from ",paraId:85,tocIndex:23},{value:"view",paraId:85,tocIndex:23},{value:", so they are uniformly represented as ",paraId:85,tocIndex:23},{value:"view.${mark}()",paraId:85,tocIndex:23},{value:".",paraId:85,tocIndex:23},{value:"Adds an ",paraId:86,tocIndex:24},{value:"interval",paraId:87,tocIndex:24},{value:" mark. ",paraId:86,tocIndex:24},{value:"interval",paraId:86,tocIndex:24},{value:" is commonly used to create visualizations like bar charts, column charts, or pie charts. By varying the coordinate system, scales, and data transformations, it offers a versatile range of visual styles. It is one of the most frequently used marks in chart grammar.",paraId:86,tocIndex:24},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/87b2ff47-2a33-4509-869c-dae4cdd81163.csv',\n    format: 'csv',\n    transform: [\n      {\n        type: 'filter',\n        callback: (d) => d.year === 2000,\n      },\n    ],\n  })\n  .transform({ type: 'groupX', y: 'sum' })\n  .encode('x', 'age')\n  .encode('y', 'people')\n  .encode('color', 'sex')\n  .scale('color', { type: 'ordinal', range: ['#ca8861', '#675193'] })\n  .axis('y', { labelFormatter: '~s' })\n  .style('fillOpacity', 0.7);\n\nchart.render();\n",paraId:88,tocIndex:24},{value:"Adds a ",paraId:89,tocIndex:25},{value:"rect",paraId:90,tocIndex:25},{value:" mark. The ",paraId:89,tocIndex:25},{value:"rect",paraId:89,tocIndex:25},{value:" mark is a core chart element used to draw rectangular shapes. By configuring properties such as starting point, endpoint, width, height, color, and style, it enables various visualization scenarios.",paraId:89,tocIndex:25},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .rect()\n  .data({\n    type: 'fetch',\n    value: 'data/athletes.csv',\n  })\n  .encode('x', 'weight')\n  .encode('y', 'height')\n  .encode('color', 'sex')\n  .transform([{ type: 'bin', opacity: 'count' }])\n  .style('inset', 0.5);\n\nchart.render();\n",paraId:91,tocIndex:25},{value:"Adds a ",paraId:92,tocIndex:26},{value:"point",paraId:93,tocIndex:26},{value:" mark. The ",paraId:92,tocIndex:26},{value:"point",paraId:92,tocIndex:26},{value:" mark is primarily used for scatter plots, also known as dot plots or scatter diagrams. Scatter plots display data points on a Cartesian coordinate system, representing their values through position.",paraId:92,tocIndex:26},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n  })\n  .encode('x', 'GDP')\n  .encode('y', 'LifeExpectancy')\n  .encode('size', 'Population')\n  .encode('color', 'continent')\n  .encode('shape', 'point')\n  .scale('size', { type: 'log', range: [4, 20] })\n  .style('fillOpacity', 0.3)\n  .style('lineWidth', 1);\n\nchart.render();\n",paraId:94,tocIndex:26},{value:"Adds an ",paraId:95,tocIndex:27},{value:"area",paraId:96,tocIndex:27},{value:" mark. The ",paraId:95,tocIndex:27},{value:"area",paraId:95,tocIndex:27},{value:" mark is commonly used to create area charts. These charts illustrate changes in data values over ordered variables, often displaying trends or patterns in the data.",paraId:95,tocIndex:27},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/aapl.json',\n  transform: [\n    {\n      type: 'map',\n      callback: (d) => ({\n        ...d,\n        date: new Date(d.date),\n      }),\n    },\n  ],\n});\n\nchart.area().encode('x', 'date').encode('y', 'close');\n\nchart.render();\n",paraId:97,tocIndex:27},{value:"Adds a ",paraId:98,tocIndex:28},{value:"line",paraId:99,tocIndex:28},{value:" mark. The ",paraId:98,tocIndex:28},{value:"line",paraId:98,tocIndex:28},{value:" mark uses a series of points to draw a line that represents changes in data across an ordered dimension. It is commonly used in line charts and is one of the most widely used marks.",paraId:98,tocIndex:28},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .line()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  })\n  .encode('x', 'date')\n  .encode('y', 'close');\n\nchart.render();\n",paraId:100,tocIndex:28},{value:"Adds a ",paraId:101,tocIndex:29},{value:"vector",paraId:102,tocIndex:29},{value:" mark. The ",paraId:101,tocIndex:29},{value:"vector",paraId:101,tocIndex:29},{value:" mark visualizes data as arrows, representing vector fields such as wind or flow patterns. The arrow's position, size, color, and angle can be customized to convey various information.",paraId:101,tocIndex:29},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .vector()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antfincdn/F5VcgnqRku/wind.json',\n  })\n  .encode('x', 'longitude')\n  .encode('y', 'latitude')\n  .encode('rotate', ({ u, v }) => (Math.atan2(v, u) * 180) / Math.PI)\n  .encode('size', ({ u, v }) => Math.hypot(v, u))\n  .encode('color', ({ u, v }) => Math.hypot(v, u))\n  .scale('size', { range: [6, 20] })\n  .scale('color', { type: 'sequential', palette: 'viridis' })\n  .axis('x', { grid: false })\n  .axis('y', { grid: false })\n  .legend(false);\n\nchart.render();\n",paraId:103,tocIndex:29},{value:"Adds a ",paraId:104,tocIndex:30},{value:"link",paraId:105,tocIndex:30},{value:" mark. The ",paraId:104,tocIndex:30},{value:"link",paraId:104,tocIndex:30},{value:" mark is similar to a line chart, but it connects pairs of points specified by arrays of two values in the ",paraId:104,tocIndex:30},{value:"x",paraId:104,tocIndex:30},{value:" and ",paraId:104,tocIndex:30},{value:"y",paraId:104,tocIndex:30},{value:" channels. It retrieves corresponding ",paraId:104,tocIndex:30},{value:"(x, y)",paraId:104,tocIndex:30},{value:" pairs and connects them with directed line segments, optionally adding arrows.",paraId:104,tocIndex:30},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .link()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antfincdn/SM13%24lHuYH/metros.json',\n  })\n  .encode('x', ['POP_1980', 'POP_2015'])\n  .encode('y', ['R90_10_1980', 'R90_10_2015'])\n  .encode('color', (d) => d.R90_10_2015 - d.R90_10_1980)\n  .scale('x', { type: 'log' })\n  .style('arrowSize', 6)\n  .axis('x', { labelFormatter: '~s', label: { autoHide: true } })\n  .legend(false);\n\nchart.render();\n",paraId:106,tocIndex:30},{value:"Adds a ",paraId:107,tocIndex:31},{value:"polygon",paraId:108,tocIndex:31},{value:" mark. The ",paraId:107,tocIndex:31},{value:"polygon",paraId:107,tocIndex:31},{value:" mark uses a set of ",paraId:107,tocIndex:31},{value:"(x, y)",paraId:107,tocIndex:31},{value:" data points to form a closed shape. It is often combined with community visualization layout algorithms to process and display data.",paraId:107,tocIndex:31},{value:"import { Chart } from '@antv/g2';\nimport * as d3 from 'd3-voronoi';\n\nconst layout = (data) => {\n  return d3\n    .voronoi()\n    .x((d) => d.x)\n    .y((d) => d.y)\n    .extent([\n      [0, 0],\n      [800, 600],\n    ])\n    .polygons(data)\n    .map((p) =>\n      Object.assign({}, p, {\n        x: p.map((pi) => pi[0]),\n        y: p.map((pi) => pi[1]),\n      }),\n    );\n};\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 0,\n  paddingRight: 0,\n  paddingTop: 0,\n  paddingBottom: 0,\n});\n\nchart\n  .polygon()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/voronoi.json',\n    transform: [\n      {\n        type: 'custom',\n        callback: layout,\n      },\n    ],\n  })\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('color', (d) => d.data.value)\n  .scale('x', { domain: [0, 800] })\n  .scale('y', { domain: [0, 600] })\n  .axis(false)\n  .style('stroke', '#fff')\n  .style('fillOpacity', 0.65);\n\nchart.render();\n",paraId:109,tocIndex:31},{value:"Adds an ",paraId:110,tocIndex:32},{value:"image",paraId:111,tocIndex:32},{value:" mark. The ",paraId:110,tocIndex:32},{value:"image",paraId:110,tocIndex:32},{value:" mark is typically not used alone but enhances other marks by adding visual elements like icons or logos. This helps convey information more intuitively and improves the overall visualization.",paraId:110,tocIndex:32},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  {\n    name: 'Internet Explorer',\n    value: 26,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/eOYRaLPOmkieVvjyjTzM.png',\n  },\n  {\n    name: 'Chrome',\n    value: 40,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/dWJWRLWfpOEbwCyxmZwu.png',\n  },\n  {\n    name: 'Firefox',\n    value: 30,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/ZEPeDluKmAoTioCABBTc.png',\n  },\n  {\n    name: 'Safari',\n    value: 24,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/eZYhlLzqWLAYwOHQAXmc.png',\n  },\n  {\n    name: 'Opera',\n    value: 15,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/vXiGOWCGZNKuVVpVYQAw.png',\n  },\n  {\n    name: 'Undetectable',\n    value: 8,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/NjApYXminrnhBgOXyuaK.png',\n  },\n];\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.data(data);\n\nchart\n  .link()\n  .encode('x', ['name', 'name'])\n  .encode('y', (d) => [0, d.value])\n  .style('stroke', '#dfdfdf')\n  .style('lineDash', [2, 2]);\n\nchart\n  .line()\n  .encode('x', 'name')\n  .encode('y', 'value')\n  .encode('shape', 'smooth')\n  .scale('x', { type: 'band' })\n  .scale('y', { domain: [0, 50] })\n  .style('opacity', 0.5);\n\nchart\n  .image()\n  .encode('x', 'name')\n  .encode('y', 'value')\n  .encode('src', 'url')\n  .scale('x', { type: 'band' })\n  .scale('y', { domain: [0, 50] });\n\nchart.render();\n",paraId:112,tocIndex:32},{value:"Adds a ",paraId:113,tocIndex:33},{value:"text",paraId:114,tocIndex:33},{value:" mark. The ",paraId:113,tocIndex:33},{value:"text",paraId:113,tocIndex:33},{value:" mark is a graphical element used to add textual annotations, labels, or explanatory content directly onto a chart. This enhances the readability and effectiveness of data visualizations.",paraId:113,tocIndex:33},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.data({\n  type: 'fetch',\n  value:\n    'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n});\n\nchart\n  .interval()\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .axis('y', { labelFormatter: '.0%' });\n\nchart\n  .text()\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('text', 'frequency')\n  .style('fill', 'black')\n  .style('textAlign', 'center')\n  .style('dy', -5);\n\nchart.render();\n",paraId:115,tocIndex:33},{value:"Adds a ",paraId:116,tocIndex:34},{value:"lineX",paraId:117,tocIndex:34},{value:" mark. The ",paraId:116,tocIndex:34},{value:"lineX",paraId:116,tocIndex:34},{value:" mark draws a vertical auxiliary line perpendicular to the x-axis. It is commonly used to highlight averages or other aggregated data points.",paraId:116,tocIndex:34},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 50,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/movies.json',\n  transform: [\n    {\n      type: 'filter',\n      callback: (d) => d['IMDB Rating'] > 0,\n    },\n  ],\n});\n\nchart\n  .rect()\n  .transform({ type: 'binX', y: 'count', thresholds: 9 })\n  .encode('x', 'IMDB Rating')\n  .scale('y', { domainMax: 1000 })\n  .style('inset', 1);\n\nchart\n  .lineX()\n  .transform({ type: 'groupColor', y: 'mean' })\n  .encode('x', 'IMDB Rating')\n  .style('stroke', '#F4664A')\n  .style('strokeOpacity', 1)\n  .style('lineWidth', 5);\n\nchart.render();\n",paraId:118,tocIndex:34},{value:"Adds a ",paraId:119,tocIndex:35},{value:"lineY",paraId:120,tocIndex:35},{value:" mark. The ",paraId:119,tocIndex:35},{value:"lineY",paraId:119,tocIndex:35},{value:" mark draws a horizontal auxiliary line perpendicular to the y-axis. It is often used to highlight averages or other aggregated data points.",paraId:119,tocIndex:35},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n});\n\nchart\n  .interval()\n  .transform({ type: 'groupX', y: 'mean' })\n  .encode('x', (d) => new Date(d.date).getUTCMonth())\n  .encode('y', 'precipitation')\n  .scale('y', { tickCount: 5, domainMax: 6 });\n\nchart\n  .lineY()\n  .transform({ type: 'groupX', y: 'mean' })\n  .encode('y', 'precipitation')\n  .style('stroke', '#F4664A')\n  .style('strokeOpacity', 1)\n  .style('lineWidth', 2);\n\nchart.render();\n",paraId:121,tocIndex:35},{value:"Adds a ",paraId:122,tocIndex:36},{value:"range",paraId:123,tocIndex:36},{value:" mark. The ",paraId:122,tocIndex:36},{value:"range",paraId:122,tocIndex:36},{value:" mark defines a rectangular area using two sets of coordinates: one for the horizontal direction ",paraId:122,tocIndex:36},{value:"(x1, x2)",paraId:122,tocIndex:36},{value:" and another for the vertical direction ",paraId:122,tocIndex:36},{value:"(y1, y2)",paraId:122,tocIndex:36},{value:". It is commonly used to highlight background regions or mark specific areas.",paraId:122,tocIndex:36},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.data({\n  type: 'fetch',\n  value:\n    'https://gw.alipayobjects.com/os/bmw-prod/0b37279d-1674-42b4-b285-29683747ad9a.json',\n});\n\nchart.lineX().data([0]);\nchart.lineY().data([0]);\n\nchart\n  .range()\n  .data([\n    { x: [-25, 0], y: [-30, 0], region: '1' },\n    { x: [-25, 0], y: [0, 20], region: '2' },\n    { x: [0, 5], y: [-30, 0], region: '2' },\n    { x: [0, 5], y: [0, 20], region: '1' },\n  ])\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('color', 'region')\n  .scale('color', {\n    range: ['#d8d0c0', '#a3dda1'],\n    independent: true,\n    guide: null,\n  })\n  .style('fillOpacity', 0.2);\n\nchart\n  .point()\n  .encode('x', 'change in female rate')\n  .encode('y', 'change in male rate')\n  .encode('size', 'pop')\n  .encode('color', 'continent')\n  .encode('shape', 'point')\n  .scale('color', {\n    range: ['#ffd500', '#82cab2', '#193442', '#d18768', '#7e827a'],\n  })\n  .axis('x', { title: false })\n  .axis('y', { title: false })\n  .scale('x', { domain: [-25, 5] })\n  .scale('y', { domain: [-30, 20] })\n  .scale('size', { range: [4, 30] })\n  .style('stroke', '#bbb')\n  .style('fillOpacity', 0.8);\n\nchart.render();\n",paraId:124,tocIndex:36},{value:"Adds a ",paraId:125,tocIndex:37},{value:"rangeX",paraId:126,tocIndex:37},{value:" mark. The ",paraId:125,tocIndex:37},{value:"rangeX",paraId:125,tocIndex:37},{value:" mark uses a pair of ",paraId:125,tocIndex:37},{value:"x",paraId:125,tocIndex:37},{value:" values ",paraId:125,tocIndex:37},{value:"(x1, x2)",paraId:125,tocIndex:37},{value:" to define a rectangular area along the x-axis. It is often used to highlight specific regions.",paraId:125,tocIndex:37},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 360,\n  paddingLeft: 60,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/year-population.json',\n});\n\nchart\n  .rangeX()\n  .data([\n    { year: [new Date('1933'), new Date('1945')], event: 'Nazi Rule' },\n    { year: [new Date('1948'), new Date('1989')], event: 'GDR (East Germany)' },\n  ])\n  .encode('x', 'year')\n  .encode('color', 'event')\n  .scale('color', { independent: true, range: ['#FAAD14', '#30BF78'] })\n  .style('fillOpacity', 0.75);\n\nchart\n  .line()\n  .encode('x', (d) => new Date(d.year))\n  .encode('y', 'population')\n  .encode('color', '#333');\n\nchart\n  .point()\n  .encode('x', (d) => new Date(d.year))\n  .encode('y', 'population')\n  .encode('color', '#333')\n  .style('lineWidth', 1.5);\n\nchart.render();\n",paraId:127,tocIndex:37},{value:"Additionally, ",paraId:128,tocIndex:37},{value:"rangeX",paraId:128,tocIndex:37},{value:" supports a shorthand syntax:",paraId:128,tocIndex:37},{value:"chart\n  .rangeX()\n  .data([[new Date('2010'), new Date('2011')]])\n  .encode('x', (d) => d);\n\n// Simplified version:\nchart.rangeX().data([new Date('2010'), new Date('2011')]);\n",paraId:129,tocIndex:37},{value:"Adds a ",paraId:130,tocIndex:38},{value:"rangeY",paraId:131,tocIndex:38},{value:" mark. The ",paraId:130,tocIndex:38},{value:"rangeY",paraId:130,tocIndex:38},{value:" mark uses a pair of ",paraId:130,tocIndex:38},{value:"y",paraId:130,tocIndex:38},{value:" values ",paraId:130,tocIndex:38},{value:"(y1, y2)",paraId:130,tocIndex:38},{value:" to define a rectangular area along the y-axis. It is often used to highlight specific regions.",paraId:130,tocIndex:38},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  })\n  .encode('x', 'height')\n  .encode('y', 'weight')\n  .encode('color', 'gender');\n\nchart\n  .rangeY()\n  .data([{ y: [54, 72] }])\n  .encode('y', 'y');\n\nchart.render();\n",paraId:132,tocIndex:38},{value:"Additionally, ",paraId:133,tocIndex:38},{value:"rangeY",paraId:133,tocIndex:38},{value:" supports a shorthand syntax:",paraId:133,tocIndex:38},{value:"chart\n  .rangeY()\n  .data([\n    [54, 60],\n    [65, 72],\n  ])\n  .encode('y', (d) => d);\n\n// Simplified version:\nchart.rangeY().data([\n  [54, 60],\n  [65, 72],\n]);\n",paraId:134,tocIndex:38},{value:"Adds a ",paraId:135,tocIndex:39},{value:"connector",paraId:135,tocIndex:39},{value:" mark. The ",paraId:135,tocIndex:39},{value:"connector",paraId:135,tocIndex:39},{value:" is used to draw auxiliary lines that connect two elements, often highlighting relationships or transitions between data points.",paraId:135,tocIndex:39},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  insetTop: 30,\n});\n\nchart\n  .data([\n    { x: 'Net Sales', value: 5085000, start: 0, end: 5085000 },\n    { x: 'Cost of Sales', value: -1250450, start: 5085000, end: 3834550 },\n    { x: 'Operating Expenses', value: -2350050, start: 3834550, end: 1484500 },\n    { x: 'Other Income', value: 750000, start: 1484500, end: 2234500 },\n    { x: 'Extraordinary Gain', value: -230050, start: 2234500, end: 2004450 },\n    { x: 'Interest Expense', value: -500000, start: 2004450, end: 1504450 },\n    { x: 'Taxis', value: 490000, start: 1504450, end: 1994450 },\n    { x: 'Net Income', isTotal: true, value: 1994450, start: 0, end: 1994450 },\n  ])\n  .axis('x', { title: false, labelTransform: 'rotate(-90)' })\n  .axis('y', { labelFormatter: '~s' })\n  .legend(null);\n\nchart\n  .link()\n  .data({ transform: [{ type: 'custom', callback: linkData }] })\n  .encode('x', ['x1', 'x2'])\n  .encode('y', 'value')\n  .style('stroke', '#697474')\n  .style('lineDash', [4, 2])\n  .tooltip(false);\n\nchart\n  .connector()\n  .data({ transform: [{ type: 'custom', callback: connectorData }] })\n  .encode('x', ['x1', 'x2'])\n  .encode('y', ['y1', 'y2'])\n  .label({\n    text: (d) => `${d.y2 - d.y1}`,\n    formatter: '~s',\n    fontSize: 10,\n    dy: 2,\n  })\n  .style({ stroke: '#697474', offset: 16 })\n  .tooltip(false);\n\nchart\n  .interval()\n  .encode('x', 'x')\n  .encode('y', ['start', 'end'])\n  .encode('color', (d, idx) =>\n    idx === 0 || d.isTotal ? 'D' : d.value > 0 ? 'P' : 'N',\n  )\n  .scale('color', {\n    domain: ['P', 'N', 'D'],\n    range: ['#64b5f6', '#ef6c00', '#96a6a6'],\n  })\n  .encode('size', 24)\n  .style('stroke', '#697474')\n  .label({\n    text: 'value',\n    formatter: '~s',\n    position: (d) => (d.value > 0 ? 'top' : 'bottom'),\n    textBaseline: (d) => (d.value > 0 ? 'bottom' : 'top'),\n    fontSize: 10,\n    dy: (d) => (d.value > 0 ? -4 : 4),\n  })\n  .tooltip({ channel: 'y', valueFormatter: '~s' })\n  .tooltip({ channel: 'y1', valueFormatter: '~s' });\n\nchart.render();\n\n// Process data.\nfunction linkData(data) {\n  return data.reduce((r, d, idx) => {\n    if (idx > 0) {\n      return r.concat({\n        x1: data[idx - 1].x,\n        x2: d.x,\n        value: d.isTotal ? d.end : d.start,\n      });\n    }\n    return r;\n  }, []);\n}\n\nfunction connectorData(data) {\n  return [\n    {\n      x1: data[0].x,\n      y1: data[0].end,\n      x2: data[data.length - 1].x,\n      y2: data[data.length - 1].end,\n    },\n  ];\n}\n",paraId:136,tocIndex:39},{value:"Adds a ",paraId:137,tocIndex:40},{value:"sankey",paraId:137,tocIndex:40},{value:" mark. A Sankey diagram is a specialized flow diagram used to depict the flow of values from one set of nodes to another. It’s particularly effective for visualizing resource distribution, energy flows, or hierarchical data.",paraId:137,tocIndex:40},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  padding: 10,\n});\n\nchart\n  .sankey()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/energy.json',\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => ({ links: data }),\n      },\n    ],\n  })\n  .layout({\n    nodeAlign: 'center',\n    nodePadding: 0.03,\n  })\n  .scale('color', { range: schemeTableau10 })\n  .style('labelSpacing', 3)\n  .style('labelFontWeight', 'bold')\n  .style('nodeStrokeWidth', 1.2)\n  .style('linkFillOpacity', 0.4);\n\nchart.render();\n",paraId:138,tocIndex:40},{value:"Adds a ",paraId:139,tocIndex:41},{value:"treemap",paraId:139,tocIndex:41},{value:" mark. A treemap recursively divides space into rectangles based on the associated values of each node, making it ideal for visualizing weighted, hierarchical data. It provides a clear and intuitive way to compare data at the same level.",paraId:139,tocIndex:41},{value:"import { Chart } from '@antv/g2';\nimport { schemeTableau10 } from 'd3-scale-chromatic';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .treemap()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/flare-treemap.json',\n  })\n  .layout({\n    path: (d) => d.name.replace(/\\./g, '/'),\n    tile: 'treemapBinary',\n    paddingInner: 1,\n  })\n  .encode('value', 'size')\n  .scale('color', { range: schemeTableau10 })\n  .style(\n    'labelText',\n    (d) =>\n      d.data.name\n        .split('.')\n        .pop()\n        .split(/(?=[A-Z][a-z])/g)[0],\n  )\n  .style('labelFill', '#000')\n  .style('labelPosition', 'top-left')\n  .style('fillOpacity', 0.5);\n\nchart.render();\n",paraId:140,tocIndex:41},{value:"Adds a ",paraId:141,tocIndex:42},{value:"box",paraId:141,tocIndex:42},{value:" mark. The ",paraId:141,tocIndex:42},{value:"box",paraId:141,tocIndex:42},{value:" mark is used to create boxplots (also known as box-and-whisker plots), which are statistical charts that display the distribution of a dataset. Typically, they include the minimum, first quartile, median, third quartile, and maximum values. You can also combine it with point marks to highlight outliers.",paraId:141,tocIndex:42},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { x: 'Oceania', y: [1, 9, 16, 22, 24] },\n  { x: 'East Europe', y: [1, 5, 8, 12, 16] },\n  { x: 'Australia', y: [1, 8, 12, 19, 26] },\n  { x: 'South America', y: [2, 8, 12, 21, 28] },\n  { x: 'North Africa', y: [1, 8, 14, 18, 24] },\n  { x: 'North America', y: [3, 10, 17, 28, 30] },\n  { x: 'West Europe', y: [1, 7, 10, 17, 22] },\n  { x: 'West Africa', y: [1, 6, 8, 13, 16] },\n];\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .box()\n  .data(data)\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('color', 'x')\n  .scale('x', { paddingInner: 0.6, paddingOuter: 0.3 })\n  .scale('y', { zero: true })\n  .legend(false)\n  .style('stroke', 'black');\n\nchart.render();\n",paraId:142,tocIndex:42},{value:"Adds a ",paraId:143,tocIndex:43},{value:"boxplot",paraId:143,tocIndex:43},{value:" mark. While similar to ",paraId:143,tocIndex:43},{value:"box",paraId:143,tocIndex:43},{value:", the ",paraId:143,tocIndex:43},{value:"boxplot",paraId:143,tocIndex:43},{value:" is a higher-level mark that automatically performs data grouping and statistical aggregation. This makes it particularly useful for exploratory data analysis in the front end, whereas ",paraId:143,tocIndex:43},{value:"box",paraId:143,tocIndex:43},{value:" is better suited for pre-aggregated data.",paraId:143,tocIndex:43},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 60,\n  inset: 6,\n});\n\nchart\n  .boxplot()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/morley.json',\n  })\n  .encode('x', 'Expt')\n  .encode('y', 'Speed');\n\nchart.render();\n",paraId:144,tocIndex:43},{value:"Adds a ",paraId:145,tocIndex:44},{value:"density",paraId:145,tocIndex:44},{value:" mark. A density plot visualizes the probability density of a continuous variable using Kernel Density Estimation (KDE). It smooths discrete data points into a continuous curve, offering insights into the data's central tendency, distribution shape, and potential outliers.",paraId:145,tocIndex:44},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/species.json',\n  transform: [\n    {\n      type: 'kde',\n      field: 'y',\n      groupBy: ['x'],\n      size: 20,\n    },\n  ],\n});\n\nchart\n  .density()\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('color', 'x')\n  .encode('size', 'size')\n  .tooltip(false);\n\nchart.render();\n",paraId:146,tocIndex:44},{value:"Adds a ",paraId:147,tocIndex:45},{value:"heatmap",paraId:147,tocIndex:45},{value:" mark. A heatmap uses color intensity to map the density or magnitude of two-dimensional data. It excels at revealing patterns, clusters, and anomalies within datasets.",paraId:147,tocIndex:45},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  padding: 0,\n});\n\nchart.axis(false);\n\nchart\n  .image()\n  .style(\n    'src',\n    'https://gw.alipayobjects.com/zos/rmsportal/NeUTMwKtPcPxIFNTWZOZ.png',\n  )\n  .style('x', '50%')\n  .style('y', '50%')\n  .style('width', '100%')\n  .style('height', '100%')\n  .tooltip(false);\n\nchart\n  .heatmap()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/heatmap.json',\n  })\n  .encode('x', 'g')\n  .encode('y', 'l')\n  .encode('color', 'tmp')\n  .style('opacity', 0)\n  .tooltip(false);\n\nchart.render();\n",paraId:148,tocIndex:45},{value:"Adds a ",paraId:149,tocIndex:46},{value:"custom shape",paraId:149,tocIndex:46},{value:" mark. The ",paraId:149,tocIndex:46},{value:"shape",paraId:149,tocIndex:46},{value:" mark in G2 is a flexible tool for drawing static, custom graphics on a chart. It’s commonly used for annotations, watermarks, badges, or other personalized elements.",paraId:149,tocIndex:46},{value:'In the example below, the "Confidential Data" badge is drawn using the ',paraId:150,tocIndex:46},{value:"shape",paraId:150,tocIndex:46},{value:" mark. To render custom shapes, you can retrieve the ",paraId:150,tocIndex:46},{value:"document",paraId:150,tocIndex:46},{value:" object from the chart context and use ",paraId:150,tocIndex:46},{value:"document.createElement",paraId:150,tocIndex:46},{value:" to create basic shapes like circles.",paraId:150,tocIndex:46},{value:"import { Chart } from '@antv/g2';\n\nfunction point(style) {\n  const { x, y, fill } = style;\n\n  const {\n    canvas: { document },\n  } = chart.getContext();\n\n  return document.createElement('circle', {\n    style: {\n      cx: x,\n      cy: y,\n      fill,\n    },\n  });\n}\n\nchart.shape().style({\n  x: '50%',\n  y: '50%',\n  fill: 'red',\n  render: point,\n});\n\nchart.render();\n",paraId:151,tocIndex:46},{value:"Adds a ",paraId:152,tocIndex:47},{value:"pack",paraId:152,tocIndex:47},{value:" mark. Circle packing is a variation of tree diagrams where hierarchical structures are represented using nested circles instead of rectangles. It’s particularly effective for illustrating containment relationships.",paraId:152,tocIndex:47},{value:"import { Chart } from '@antv/g2';\nimport { interpolateHcl } from 'd3-interpolate';\n\nconst chart = new Chart({\n  container: 'container',\n  padding: 20,\n});\n\nchart\n  .pack()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/flare.json',\n  })\n  .layout({\n    padding: 5,\n  })\n  .encode('value', 'value')\n  .encode('color', 'depth')\n  .scale('color', {\n    domain: [0, 5],\n    range: ['hsl(152,80%,80%)', 'hsl(228,30%,40%)'],\n    interpolate: interpolateHcl,\n  })\n  .style('labelText', (d) =>\n    d.r >= 10 && d.height === 0 ? `${d.data.name}` : '',\n  )\n  .axis(false)\n  .legend(false);\n\nchart.render();\n",paraId:153,tocIndex:47},{value:"Adds a ",paraId:154,tocIndex:48},{value:"force-directed graph",paraId:154,tocIndex:48},{value:" mark. Force-directed graphs are used to visualize complex relational networks. In this layout, nodes act like charged particles that repel each other while edges act as springs, pulling connected nodes together.",paraId:154,tocIndex:48},{value:"import { Chart } from '@antv/g2';\nimport { schemeTableau10 } from 'd3-scale-chromatic';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .forceGraph()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/miserable.json',\n  })\n  .scale('color', { range: schemeTableau10 });\n\nchart.render();\n",paraId:155,tocIndex:48},{value:"Adds a ",paraId:156,tocIndex:49},{value:"tree",paraId:157,tocIndex:49},{value:" mark. A tree diagram visually breaks down a system or phenomenon into a branch-like structure, also known as a tree map or hierarchy diagram. In a tree structure, the root node has no predecessor, while every other node has exactly one predecessor. Leaf nodes have no successors, and the number of successors for other nodes can be one or multiple.",paraId:156,tocIndex:49},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 1500,\n  width: 800,\n});\n\nchart\n  .tree()\n  .coordinate({ transform: [{ type: 'transpose' }] })\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/flare.json',\n  })\n  .layout({\n    sortBy: (a, b) => a.value - b.value,\n  })\n  .style('nodeFill', (d) => (d.height === 0 ? '#999' : '#000'))\n  .style('linkStroke', '#999')\n  .style('labelText', (d) => d.data.name || '-')\n  .style('labelFontSize', (d) => (d.height === 0 ? 7 : 12))\n  .style('labelTextAlign', (d) => (d.height === 0 ? 'start' : 'end'))\n  .style('labelPosition', (d) => (d.height !== 0 ? 'left' : 'right'))\n  .style('labelDx', (d) => (d.height === 0 ? 5 : -5))\n  .style('labelBackground', true)\n  .style('labelBackgroundFill', '#fff');\n\nchart.render();\n",paraId:158,tocIndex:49},{value:"Adds a ",paraId:159,tocIndex:50},{value:"wordCloud",paraId:160,tocIndex:50},{value:" mark. The ",paraId:159,tocIndex:50},{value:"wordCloud",paraId:159,tocIndex:50},{value:" mark is specifically designed to generate word clouds, a visualization method that intuitively displays the frequency of keywords in text data. Words are represented with varying sizes, colors, and positions to reflect their importance or weight.",paraId:159,tocIndex:50},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  padding: 0,\n});\n\nchart\n  .wordCloud()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/philosophy-word.json',\n  })\n  .layout({\n    spiral: 'rectangular',\n  })\n  .encode('color', 'text')\n  .axis(false);\n\nchart.render();\n",paraId:161,tocIndex:50},{value:"Adds a ",paraId:162,tocIndex:51},{value:"gauge",paraId:163,tocIndex:51},{value:" mark. The ",paraId:162,tocIndex:51},{value:"gauge",paraId:162,tocIndex:51},{value:" is used to create dashboard-style visualizations, commonly employed to show progress, proportions, or comparisons.",paraId:162,tocIndex:51},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart\n  .gauge()\n  .data({\n    value: {\n      target: 120,\n      total: 400,\n      name: 'score',\n    },\n  })\n  .legend(false);\n\nchart.render();\n",paraId:164,tocIndex:51},{value:"Adds a ",paraId:165,tocIndex:52},{value:"geoPath",paraId:166,tocIndex:52},{value:" mark. The ",paraId:165,tocIndex:52},{value:"geoPath",paraId:165,tocIndex:52},{value:" mark is used to render maps by integrating GeoJSON data.",paraId:165,tocIndex:52},{value:"import { Chart } from '@antv/g2';\nimport { feature } from 'topojson-client';\n\nPromise.all([\n  fetch('https://assets.antv.antgroup.com/g2/us-10m.json').then((res) =>\n    res.json(),\n  ),\n  fetch('https://assets.antv.antgroup.com/g2/unemployment2.json').then((res) =>\n    res.json(),\n  ),\n]).then((values) => {\n  const [us, unemployment] = values;\n  const counties = feature(us, us.objects.counties).features;\n\n  const chart = new Chart({\n    container: 'container',\n  });\n\n  chart\n    .geoPath()\n    .projection({ type: 'albersUsa' })\n    .data({\n      value: counties,\n      transform: [\n        {\n          type: 'join',\n          join: unemployment,\n          on: ['id', 'id'],\n          select: ['rate'],\n        },\n      ],\n    })\n    .scale('color', {\n      type: 'sequential',\n      palette: 'ylGnBu',\n      unknown: '#fff',\n    })\n    .encode('color', 'rate');\n\n  chart.render();\n});\n",paraId:167,tocIndex:52},{value:"Adds a ",paraId:168,tocIndex:53},{value:"point3D",paraId:169,tocIndex:53},{value:" mark. The ",paraId:168,tocIndex:53},{value:"point3D",paraId:168,tocIndex:53},{value:" mark is primarily used to create 3D scatter plots, analyzing data distribution through point granularity.",paraId:168,tocIndex:53},{value:"import { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\nimport { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\n\n// Create a WebGL renderer.\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ThreeDPlugin());\nrenderer.registerPlugin(new ControlPlugin());\n\n// Customize our own Chart with threedlib.\nconst Chart = extend(Runtime, { ...corelib(), ...threedlib() });\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  depth: 400, // Define the depth of the chart.\n});\n\nchart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('color', 'Origin')\n  .encode('shape', 'cube')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setType(CameraType.ORBITING);\n\n  // Add a directional light to the scene.\n  const light = new DirectionalLight({\n    style: {\n      intensity: 3,\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n});\n",paraId:170,tocIndex:53},{value:"Adds a ",paraId:171,tocIndex:54},{value:"line3D",paraId:172,tocIndex:54},{value:" mark. The ",paraId:171,tocIndex:54},{value:"line3D",paraId:171,tocIndex:54},{value:" mark is used to create 3D line charts.",paraId:171,tocIndex:54},{value:"import { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\nimport { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\n\n// Create a WebGL renderer.\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ThreeDPlugin());\nrenderer.registerPlugin(new ControlPlugin());\n\n// Customize our own Chart with threedlib.\nconst Chart = extend(Runtime, { ...corelib(), ...threedlib() });\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  depth: 400, // Define the depth of the chart.\n});\n\n/**\n * 3D Line\n * @see https://plotly.com/javascript/3d-line-plots/\n */\nconst pointCount = 31;\nlet r;\nconst data = [];\n\nfor (let i = 0; i < pointCount; i++) {\n  r = 10 * Math.cos(i / 10);\n  data.push({\n    x: r * Math.cos(i),\n    y: r * Math.sin(i),\n    z: i,\n  });\n}\n\nchart\n  .line3D()\n  .data(data)\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('z', 'z')\n  .encode('size', 4)\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  // Use perspective projection mode.\n  camera.setPerspective(0.1, 5000, 45, 640 / 480);\n  camera.setType(CameraType.ORBITING);\n});\n",paraId:173,tocIndex:54},{value:"Adds an ",paraId:174,tocIndex:55},{value:"interval3D",paraId:175,tocIndex:55},{value:" mark. The ",paraId:174,tocIndex:55},{value:"interval3D",paraId:174,tocIndex:55},{value:" mark is used to create 3D bar charts.",paraId:174,tocIndex:55},{value:"import { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\nimport { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\n\n// Create a WebGL renderer.\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ThreeDPlugin());\nrenderer.registerPlugin(new ControlPlugin());\n\n// Customize our own Chart with threedlib.\nconst Chart = extend(Runtime, { ...corelib(), ...threedlib() });\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  depth: 400, // Define the depth of the chart.\n});\nconst data: { x: string; z: string; y: number; color: number }[] = [];\nfor (let x = 0; x < 5; ++x) {\n  for (let z = 0; z < 5; ++z) {\n    data.push({\n      x: `x-${x}`,\n      z: `z-${z}`,\n      y: 10 - x - z,\n      color: Math.random() < 0.33 ? 0 : Math.random() < 0.67 ? 1 : 2,\n    });\n  }\n}\n\nchart\n  .interval3D()\n  .data({\n    type: 'inline',\n    value: data,\n  })\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('z', 'z')\n  .encode('color', 'color')\n  .encode('shape', 'cube')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 })\n  .style('opacity', 0.7);\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  // Use perspective projection mode.\n  camera.setPerspective(0.1, 5000, 45, 640 / 480);\n  camera.rotate(-40, 30, 0);\n  camera.dolly(70);\n  camera.setType(CameraType.ORBITING);\n\n  // Add a directional light to the scene.\n  const light = new DirectionalLight({\n    style: {\n      intensity: 2.5,\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n});\n",paraId:176,tocIndex:55},{value:"Adds a ",paraId:177,tocIndex:56},{value:"surface3D",paraId:178,tocIndex:56},{value:" mark. The ",paraId:177,tocIndex:56},{value:"surface3D",paraId:177,tocIndex:56},{value:" mark is used to create 3D surface plots.",paraId:177,tocIndex:56},{value:"import { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\nimport { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\nimport diric from 'dirichlet';\n\n// Set the width/height to 100.\nconst size = 100;\nconst points: { x: number; y: number; z: number }[] = [];\nfor (let i = 0; i < size + 1; i++) {\n  for (let j = 0; j < size + 1; j++) {\n    points.push({\n      x: i,\n      y: j,\n      z:\n        0.1 *\n        size *\n        diric(5, (5.0 * (i - size / 2)) / size) *\n        diric(5, (5.0 * (j - size / 2)) / size),\n    });\n  }\n}\n\n// Create a WebGL renderer.\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ThreeDPlugin());\nrenderer.registerPlugin(new ControlPlugin());\n\n// Customize our own Chart with threedlib.\nconst Chart = extend(Runtime, { ...corelib(), ...threedlib() });\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  width: 600,\n  height: 600,\n  depth: 300, // Define the depth of the chart.\n});\n\nchart\n  .surface3D()\n  .data(points)\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('z', 'z')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 1 })\n  .axis('y', { gridLineWidth: 1, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 1 });\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  // Use perspective projection mode.\n  camera.setPerspective(0.1, 3000, 45, 600 / 600);\n  camera.rotate(30, 30, 0);\n  camera.dolly(60);\n  camera.setType(CameraType.ORBITING);\n});\n",paraId:179,tocIndex:56},{value:"Setting Attributes",paraId:180,tocIndex:56},{value:"Get or set the chart's configuration options. Below is a list of supported properties:",paraId:181,tocIndex:57},{value:"Property",paraId:182,tocIndex:57},{value:"Description",paraId:182,tocIndex:57},{value:"Type",paraId:182,tocIndex:57},{value:"class",paraId:182,tocIndex:57},{value:"CSS class name",paraId:182,tocIndex:57},{value:"string",paraId:182,tocIndex:57},{value:"x",paraId:182,tocIndex:57},{value:"Horizontal position, typically used to adjust a chart's placement in a composite view",paraId:182,tocIndex:57},{value:"number",paraId:182,tocIndex:57},{value:"y",paraId:182,tocIndex:57},{value:"Vertical position, typically used to adjust a chart's placement in a composite view",paraId:182,tocIndex:57},{value:"number",paraId:182,tocIndex:57},{value:"width",paraId:182,tocIndex:57},{value:"Element width",paraId:182,tocIndex:57},{value:"number",paraId:182,tocIndex:57},{value:"height",paraId:182,tocIndex:57},{value:"Element height",paraId:182,tocIndex:57},{value:"number",paraId:182,tocIndex:57},{value:"paddingLeft",paraId:182,tocIndex:57},{value:"Padding on the left",paraId:182,tocIndex:57},{value:"Padding",paraId:182,tocIndex:57},{value:"paddingRight",paraId:182,tocIndex:57},{value:"Padding on the right",paraId:182,tocIndex:57},{value:"Padding",paraId:182,tocIndex:57},{value:"paddingBottom",paraId:182,tocIndex:57},{value:"Padding at the bottom",paraId:182,tocIndex:57},{value:"Padding",paraId:182,tocIndex:57},{value:"paddingTop",paraId:182,tocIndex:57},{value:"Padding at the top",paraId:182,tocIndex:57},{value:"Padding",paraId:182,tocIndex:57},{value:"padding",paraId:182,tocIndex:57},{value:"Composite padding",paraId:182,tocIndex:57},{value:"Padding",paraId:182,tocIndex:57},{value:"inset",paraId:182,tocIndex:57},{value:"Overall spacing (inset) width",paraId:182,tocIndex:57},{value:"number",paraId:182,tocIndex:57},{value:"insetLeft",paraId:182,tocIndex:57},{value:"Spacing (inset) width on the left",paraId:182,tocIndex:57},{value:"number",paraId:182,tocIndex:57},{value:"insetBottom",paraId:182,tocIndex:57},{value:"Spacing (inset) width at the bottom",paraId:182,tocIndex:57},{value:"number",paraId:182,tocIndex:57},{value:"insetTop",paraId:182,tocIndex:57},{value:"Spacing (inset) width at the top",paraId:182,tocIndex:57},{value:"number",paraId:182,tocIndex:57},{value:"insetRight",paraId:182,tocIndex:57},{value:"Spacing (inset) width on the right",paraId:182,tocIndex:57},{value:"number",paraId:182,tocIndex:57},{value:"margin",paraId:182,tocIndex:57},{value:"Composite margin",paraId:182,tocIndex:57},{value:"number",paraId:182,tocIndex:57},{value:"marginLeft",paraId:182,tocIndex:57},{value:"Margin on the left",paraId:182,tocIndex:57},{value:"number",paraId:182,tocIndex:57},{value:"marginBottom",paraId:182,tocIndex:57},{value:"Margin at the bottom",paraId:182,tocIndex:57},{value:"number",paraId:182,tocIndex:57},{value:"marginTop",paraId:182,tocIndex:57},{value:"Margin at the top",paraId:182,tocIndex:57},{value:"number",paraId:182,tocIndex:57},{value:"marginRight",paraId:182,tocIndex:57},{value:"Margin on the right",paraId:182,tocIndex:57},{value:"number",paraId:182,tocIndex:57},{value:"frame",paraId:182,tocIndex:57},{value:"Whether to display a border",paraId:182,tocIndex:57},{value:"boolean",paraId:182,tocIndex:57},{value:"zIndex",paraId:182,tocIndex:57},{value:"Layer stacking order",paraId:182,tocIndex:57},{value:"number",paraId:182,tocIndex:57},{value:"clip",paraId:182,tocIndex:57},{value:"Whether to clip overflowing content",paraId:182,tocIndex:57},{value:"boolean",paraId:182,tocIndex:57},{value:"// Get configuration options\nconst point = chart.point();\nconsole.log(point.attr());\n\n// Set configuration options\npoint.attr('padding', 0);\n",paraId:183,tocIndex:57},{value:"Set the data for the mark. Supports various data sources and transformations. See ",paraId:184,tocIndex:58},{value:"data",paraId:185,tocIndex:58},{value:" for more details.",paraId:184,tocIndex:58},{value:"chart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n});\n\nchart.interval().data([\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n]);\n",paraId:186,tocIndex:58},{value:"Define how data fields are encoded to visual channels. See ",paraId:187,tocIndex:59},{value:"encode",paraId:188,tocIndex:59},{value:" for more details.",paraId:187,tocIndex:59},{value:"chart\n  .interval()\n  .encode('x', 'civilization')\n  .encode('y', ['start', 'end'])\n  .encode('color', 'region');\n\nchart.facetCircle().encode('position', 'month');\n\nchart.encode('x', 'year').encode('y', 'value');\n",paraId:189,tocIndex:59},{value:"Define the scale of data for each channel. See ",paraId:190,tocIndex:60},{value:"scale",paraId:191,tocIndex:60},{value:" for more details.",paraId:190,tocIndex:60},{value:"chart.scale('color', { type: 'ordinal', range: ['#ca8861', '#675193'] });\n\nchart.line().scale('y', {\n  domain: [0, 1],\n});\n",paraId:192,tocIndex:60},{value:"Configure the legend for a mark. See ",paraId:193,tocIndex:61},{value:"legend",paraId:194,tocIndex:61},{value:" for more details.",paraId:193,tocIndex:61},{value:"// Disable legend for the color channel\nchart.legend('color', false);\n\nchart\n  .interval()\n  .legend('color', { labelFormatter: (d) => (d === 1 ? 'Male' : 'Female') });\n",paraId:195,tocIndex:61},{value:"Configure tooltips for a mark. See ",paraId:196,tocIndex:62},{value:"tooltip",paraId:197,tocIndex:62},{value:" for more details.",paraId:196,tocIndex:62},{value:"chart.interval().tooltip({ channel: 'y', valueFormatter: '.0%' });\n\n// Disable tooltip for link marks\nchart.link().tooltip(false);\n",paraId:198,tocIndex:62},{value:"Configure the axis of a mark. See ",paraId:199,tocIndex:63},{value:"axis",paraId:200,tocIndex:63},{value:" for more details.",paraId:199,tocIndex:63},{value:"chart\n  .interval()\n  .axis('y', { labelFormatter: '~s' })\n  .axis('x', { labelTransform: 'rotate(90)' });\n\nchart.axis('y', { title: false });\n",paraId:201,tocIndex:63},{value:"Set sliders for the chart to enable panning or zooming. See ",paraId:202,tocIndex:64},{value:"slider",paraId:203,tocIndex:64},{value:" for more details.",paraId:202,tocIndex:64},{value:"chart\n  .point()\n  .slider('x', { labelFormatter: (d) => d.toFixed(1) })\n  .slider('y', { labelFormatter: (d) => d.toFixed(1) });\n\nchart.slider('y', true).slider('x', true);\n",paraId:204,tocIndex:64},{value:"Add labels to a mark. See ",paraId:205,tocIndex:65},{value:"label",paraId:206,tocIndex:65},{value:" for more details.",paraId:205,tocIndex:65},{value:"chart\n  .interval()\n  .label({\n    text: (d, i) => (i !== 0 ? '转换率' : ''),\n    position: 'top-right',\n    textAlign: 'left',\n    textBaseline: 'middle',\n    fill: '#aaa',\n    dx: 60,\n  })\n  .label({\n    text: (d, i, data) =>\n      i !== 0 ? r(data[i - 1]['value'], data[i]['value']) : '',\n    position: 'top-right',\n    textAlign: 'left',\n    textBaseline: 'middle',\n    dx: 60,\n    dy: 15,\n  });\n\nchart.interval().label({\n  text: 'id',\n  position: 'spider',\n  connectorDistance: 0,\n  fontWeight: 'bold',\n  textBaseline: 'bottom',\n  textAlign: (d) => (['c', 'sass'].includes(d.id) ? 'end' : 'start'),\n  dy: -4,\n});\n",paraId:207,tocIndex:65},{value:"Configures label transformations for the chart. See ",paraId:208,tocIndex:66},{value:"label",paraId:209,tocIndex:66},{value:" for details.",paraId:208,tocIndex:66},{value:"chart\n  .labelTransform({ type: 'overlapHide' })\n  .labelTransform({ type: 'contrastReverse' });\n\nchart.labelTransform([{ type: 'overlapHide' }, { type: 'contrastReverse' }]);\n",paraId:210,tocIndex:66},{value:"Sets the styles for the chart elements. See ",paraId:211,tocIndex:67},{value:"style",paraId:212,tocIndex:67},{value:" for details.",paraId:211,tocIndex:67},{value:"chart.rect().style('inset', 0.5);\n\nchart.liquid().data(0.3).style({\n  outlineBorder: 4,\n  outlineDistance: 8,\n  waveLength: 128,\n});\n",paraId:213,tocIndex:67},{value:"Applies a theme to the chart. See ",paraId:214,tocIndex:68},{value:"theme",paraId:215,tocIndex:68},{value:" for details.",paraId:214,tocIndex:68},{value:"chart.theme({ type: 'academy' });\n\nchart.theme({\n  type: 'classicDark',\n  view: {\n    viewFill: '#141414',\n  },\n}); // Apply dark theme.\n",paraId:216,tocIndex:68},{value:"Configures interactions for the chart. See ",paraId:217,tocIndex:69},{value:"interaction",paraId:218,tocIndex:69},{value:" for details.",paraId:217,tocIndex:69},{value:"// Disable the legendFilter interaction\nchart.interaction('legendFilter', false);\n\nchart.line().interaction('tooltip', {\n  render: (event, { items }) => {\n    const target = event.target;\n    const format = (item) => `${item.name}: ${item.value}`;\n    if (target.className === 'g2-tooltip-marker') {\n      const color = target.style.fill;\n      const item = items.find((i) => i.color === color);\n      return format(item);\n    }\n    return items.map(format).join('<br>');\n  },\n});\n",paraId:219,tocIndex:69},{value:"Configures animations for the chart. See ",paraId:220,tocIndex:70},{value:"animation",paraId:221,tocIndex:70},{value:" for details.",paraId:220,tocIndex:70},{value:"chart\n  .interval()\n  .animate('enter', { type: 'fadeIn', duration: 1000 })\n  .animate('exit', { type: 'fadeOut', duration: 2000 });\n\n// Disable animations\nchart.animate(false);\n",paraId:222,tocIndex:70},{value:"Adds scrollbars to the chart. See ",paraId:223,tocIndex:71},{value:"scrollbar",paraId:224,tocIndex:71},{value:" for details.",paraId:223,tocIndex:71},{value:"chart.line().scrollbar('x', {}).scrollbar('y', { value: 0.2 });\n",paraId:225,tocIndex:71},{value:"Sets the chart title. See ",paraId:226,tocIndex:72},{value:"title",paraId:227,tocIndex:72},{value:" for details.",paraId:226,tocIndex:72},{value:"chart.title({\n  align: 'right',\n  title: 'Sold by genre, sorted by sold',\n  titleFontSize: 15,\n  subtitle: 'It shows the sales volume of each genre, sorted by sales.',\n  subtitleFill: 'red',\n  subtitleFontSize: 12,\n  subtitleShadowColor: 'yellow',\n  subtitleShadowBlur: 5,\n  subtitleFontStyle: 'italic',\n});\n\nchart.title('Pareto Chart of Customer Complaints');\n",paraId:228,tocIndex:72},{value:"Configures styles for different states of the chart. See ",paraId:229,tocIndex:73},{value:"state",paraId:230,tocIndex:73},{value:" for details.",paraId:229,tocIndex:73},{value:"chart\n  .interval()\n  .state('selected', { fill: '#1783FF', stroke: 'black', strokeWidth: 1 })\n  .state('unselected', { fill: '#ccc' });\n\nchart.sunburst().state({\n  active: { zIndex: 2, stroke: 'red' },\n  inactive: { zIndex: 1, stroke: '#fff' },\n});\n",paraId:231,tocIndex:73},{value:"Applies data transformations to the chart. See ",paraId:232,tocIndex:74},{value:"transform",paraId:233,tocIndex:74},{value:" for details.",paraId:232,tocIndex:74},{value:"chart\n  .interval()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/world-history.json',\n  })\n  .transform({ type: 'sortX', by: 'y' })\n  .transform({ type: 'sortColor', by: 'y', reducer: 'min' });\n\nchart.area().transform([{ type: 'stackY' }, { type: 'normalizeY' }]);\n",paraId:234,tocIndex:74},{value:"Triggers the rendering of the chart.",paraId:235,tocIndex:76},{value:"render(): void;\n",paraId:236,tocIndex:76},{value:"Destroys the chart container and canvas, and unbinds all events.",paraId:237,tocIndex:77},{value:"destroy(): void;\n",paraId:238,tocIndex:77},{value:"Clears all the content drawn on the chart but does not destroy the chart. The chart instance remains usable.",paraId:239,tocIndex:78},{value:"clear(): void;\n",paraId:240,tocIndex:78},{value:"Displays the graphical elements rendered by the current node.",paraId:241,tocIndex:79},{value:"show(): void;\n",paraId:242,tocIndex:79},{value:"Hides the graphical elements rendered by the current node.",paraId:243,tocIndex:80},{value:"hide(): void;\n",paraId:244,tocIndex:80},{value:"Updates the data source for the chart and re-renders it.",paraId:245,tocIndex:81},{value:"changeData(data: any): void;\n",paraId:246,tocIndex:81},{value:"Changes the width and height of the chart and re-renders it.",paraId:247,tocIndex:82},{value:"changeSize(width: number, height: number): void;\n",paraId:248,tocIndex:82},{value:"Automatically adjusts the canvas size to fit its parent DOM container and re-renders the chart.",paraId:249,tocIndex:83},{value:"forceFit(): void;\n",paraId:250,tocIndex:83},{value:"Updates the data source for a specific mark and re-renders the chart.",paraId:251,tocIndex:84},{value:"changeData(data: any): void;\n",paraId:252,tocIndex:84},{value:"Gets the HTML container of the chart.",paraId:253,tocIndex:86},{value:"getContainer(): HTMLElement;\n",paraId:254,tocIndex:86},{value:"Returns the context information of the chart.",paraId:255,tocIndex:87},{value:"getContext(): G2Context;\n",paraId:256,tocIndex:87},{value:"You can use ",paraId:257,tocIndex:87},{value:"getContext()",paraId:257,tocIndex:87},{value:" to access the chart's ",paraId:257,tocIndex:87},{value:"document",paraId:257,tocIndex:87},{value:" and add custom interactions.",paraId:257,tocIndex:87},{value:"chart.on('afterrender', () => {\n  const { canvas } = chart.getContext();\n  const { document } = canvas;\n  // https://github.com/antvis/G2/blob/v5/src/interaction/legendFilter.ts\n  const items = document.getElementsByClassName('items-item');\n  const datum = items.map((item) => item.__data__);\n  items.forEach((item, index) => {\n    item.addEventListener('click', (ev) => {\n      console.log(datum[index]);\n    });\n  });\n});\n",paraId:258,tocIndex:87},{value:"Return the tooltip data corresponding to the coordinate point.",paraId:259,tocIndex:88},{value:"Usage example:",paraId:260,tocIndex:88},{value:"chart.getDataByXY({x: 200, y: 100}, { shared: true })\n",paraId:261,tocIndex:88},{value:"configuration:",paraId:262,tocIndex:88},{value:"type Point = {\n  x: number;\n  y: number;\n}\n\ntype Options = {\n  /** \n   * Whether elements with the same x share the tooltip\n   * @default false\n  */\n  shared?: boolean;\n}\n",paraId:263,tocIndex:88},{value:"Returns the view instance used during chart rendering.",paraId:264,tocIndex:89},{value:"getView(): G2ViewDescriptor;\n",paraId:265,tocIndex:89},{value:"Returns the coordinate instance used during chart rendering.",paraId:266,tocIndex:90},{value:"getCoordinate(): Coordinate;\n",paraId:267,tocIndex:90},{value:"Returns the theme instance applied during chart rendering.",paraId:268,tocIndex:91},{value:"getTheme(): G2Theme;\n",paraId:269,tocIndex:91},{value:"Returns the canvas group instance used during chart rendering.",paraId:270,tocIndex:92},{value:"getGroup(): DisplayObject;\n",paraId:271,tocIndex:92},{value:"Returns all the scale instances used during chart rendering.",paraId:272,tocIndex:93},{value:"getScale(): Record<string, Scale>;\n",paraId:273,tocIndex:93},{value:"Finds and returns the scale instance corresponding to a specific channel name during chart rendering.",paraId:274,tocIndex:94},{value:"getScaleByChannel(channel: string): Scale;\n",paraId:275,tocIndex:94},{value:"Returns the view instance used during view rendering.",paraId:276,tocIndex:95},{value:"getView(): G2ViewDescriptor;\n",paraId:277,tocIndex:95},{value:"Returns the coordinate instance used during view rendering.",paraId:278,tocIndex:96},{value:"getCoordinate(): Coordinate;\n",paraId:279,tocIndex:96},{value:"Returns the theme instance applied during view rendering.",paraId:280,tocIndex:97},{value:"getTheme(): G2Theme;\n",paraId:281,tocIndex:97},{value:"Returns the canvas group instance used during view rendering.",paraId:282,tocIndex:98},{value:"getGroup(): DisplayObject;\n",paraId:283,tocIndex:98},{value:"Returns all the scale instances used during view rendering.",paraId:284,tocIndex:99},{value:"getScale(): Record<string, Scale>;\n",paraId:285,tocIndex:99},{value:"Finds and returns the scale instance corresponding to a specific channel name during view rendering.",paraId:286,tocIndex:100},{value:"getScaleByChannel(channel: string): Scale;\n",paraId:287,tocIndex:100},{value:"Returns the canvas group instance used during mark rendering.",paraId:288,tocIndex:101},{value:"getGroup(): DisplayObject;\n",paraId:289,tocIndex:101},{value:"Returns all the scale instances used during mark rendering.",paraId:290,tocIndex:102},{value:"getScale(): Record<string, Scale>;\n",paraId:291,tocIndex:102},{value:"Finds and returns the scale instance corresponding to a specific channel name during mark rendering.",paraId:292,tocIndex:103},{value:"getScaleByChannel(channel: string): Scale;\n",paraId:293,tocIndex:103},{value:"All nodes that inherit from the ",paraId:294,tocIndex:104},{value:"Node",paraId:294,tocIndex:104},{value:" type can use various node operation methods, such as the return value of the ",paraId:294,tocIndex:104},{value:"getNodeByKey()",paraId:294,tocIndex:104},{value:" method.",paraId:294,tocIndex:104},{value:"Finds all child nodes of a certain type.",paraId:295,tocIndex:105},{value:"getNodesByType(type: string): Node[];\n",paraId:296,tocIndex:105},{value:"Here is an example of finding the first ",paraId:297,tocIndex:105},{value:"rect",paraId:297,tocIndex:105},{value:" shape:",paraId:297,tocIndex:105},{value:"chart.getNodesByType('rect')[0].changeData(data);\n",paraId:298,tocIndex:105},{value:"Finds a child node of the current node by its key.",paraId:299,tocIndex:106},{value:"getNodeByKey(key: string): Node;\n",paraId:300,tocIndex:106},{value:"Creates a new ",paraId:301,tocIndex:107},{value:"Node",paraId:301,tocIndex:107},{value:" and appends it to the chart as a child node.",paraId:301,tocIndex:107},{value:"append(Ctor: new (value: Record<string, any>) => Node<ChildValue, Value>): Node<ChildValue, Value>;\n",paraId:302,tocIndex:107},{value:"Removes the current node from its parent.",paraId:303,tocIndex:108},{value:"remove(): Node;\n",paraId:304,tocIndex:108},{value:"Applies a specified callback function to the node value.",paraId:305,tocIndex:109},{value:"call(callback: (node: this, ...params: any[]) => any, ...params: any[]): this;\n",paraId:306,tocIndex:109},{value:"Listens to events on the chart.",paraId:307,tocIndex:111},{value:"on(event: string, callback: (...args: any[]) => any, once?: boolean): this;\n",paraId:308,tocIndex:111},{value:"Lifecycle Events",paraId:309,tocIndex:111},{value:"Event",paraId:310,tocIndex:111},{value:"Description",paraId:310,tocIndex:111},{value:"beforerender",paraId:310,tocIndex:111},{value:"Triggered before the chart is rendered.",paraId:310,tocIndex:111},{value:"afterrender",paraId:310,tocIndex:111},{value:"Triggered after the chart is rendered.",paraId:310,tocIndex:111},{value:"beforepaint",paraId:310,tocIndex:111},{value:"Triggered after layout calculations but before rendering.",paraId:310,tocIndex:111},{value:"afterpaint",paraId:310,tocIndex:111},{value:"Triggered after the chart is drawn.",paraId:310,tocIndex:111},{value:"beforechangedata",paraId:310,tocIndex:111},{value:"Triggered before the chart updates its data.",paraId:310,tocIndex:111},{value:"afterchangedata",paraId:310,tocIndex:111},{value:"Triggered after the chart updates its data.",paraId:310,tocIndex:111},{value:"beforechangesize",paraId:310,tocIndex:111},{value:"Triggered before the chart updates its size.",paraId:310,tocIndex:111},{value:"afterchangesize",paraId:310,tocIndex:111},{value:"Triggered after the chart updates its size.",paraId:310,tocIndex:111},{value:"beforedestroy",paraId:310,tocIndex:111},{value:"Triggered before the chart is destroyed.",paraId:310,tocIndex:111},{value:"afterdestroy",paraId:310,tocIndex:111},{value:"Triggered after the chart is destroyed.",paraId:310,tocIndex:111},{value:"You can declare lifecycle events using ",paraId:311,tocIndex:111},{value:"chart.on()",paraId:311,tocIndex:111},{value:". For example:",paraId:311,tocIndex:111},{value:"chart.on('afterrender', (e) => {\n  console.log('Chart has been rendered!');\n});\n",paraId:312,tocIndex:111},{value:"Listens for events on the chart, but only triggers once.",paraId:313,tocIndex:112},{value:"once(event: string, callback: (...args: any[]) => any): this;\n",paraId:314,tocIndex:112},{value:"Triggers an event on the chart.",paraId:315,tocIndex:113},{value:"emit(event: string, ...args: any[]): this;\n",paraId:316,tocIndex:113},{value:"Unbinds event listeners from the chart.",paraId:317,tocIndex:114},{value:"off(event?: string, callback?: (...args: any[]) => any): void;\n",paraId:318,tocIndex:114},{value:"For more detailed information about events in G2, see ",paraId:319,tocIndex:114},{value:"Events",paraId:320,tocIndex:114},{value:".",paraId:319,tocIndex:114},{value:"Extends the chart library by importing additional components.",paraId:321,tocIndex:116},{value:"extend(Runtime: new (options: RuntimeOptions) => Runtime<Spec>, library: Library): Chart;\n",paraId:322,tocIndex:116},{value:"To reduce the size of the main G2 package, some advanced chart components are not included by default. Using ",paraId:323,tocIndex:116},{value:"extend",paraId:323,tocIndex:116},{value:", you can import extension libraries and even 3D chart libraries to unlock more charting capabilities.",paraId:323,tocIndex:116},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart\n  .sunburst()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  })\n  .encode('value', 'sum')\n  .encode('color', 'label');\n\nchart.render();\n",paraId:324,tocIndex:116},{value:"import { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\nimport { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\n\n// Create a WebGL renderer.\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ThreeDPlugin());\nrenderer.registerPlugin(new ControlPlugin());\n\n// Customize our own Chart with threedlib.\nconst Chart = extend(Runtime, { ...corelib(), ...threedlib() });\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  depth: 400, // Set chart depth\n});\n\nchart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('color', 'Origin')\n  .encode('size', 'Cylinders')\n  .encode('shape', 'sphere')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setPerspective(0.1, 5000, 45, 640 / 480);\n  camera.setType(CameraType.ORBITING);\n\n  // Add a directional light into the scene.\n  const light = new DirectionalLight({\n    style: {\n      intensity: 3,\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n});\n",paraId:325,tocIndex:116},{value:"Registers custom components into the chart library.",paraId:326,tocIndex:117},{value:"register(key: `${G2ComponentNamespaces | 'symbol'}.${any}`, component: G2Component | SymbolFactor): void;\n",paraId:327,tocIndex:117},{value:"G2 is highly extensible: almost all visualization components can be customized. To start, you need to use ",paraId:328,tocIndex:117},{value:"register",paraId:328,tocIndex:117},{value:" to add custom visual components.",paraId:328,tocIndex:117},{value:"Below is an example of registering a custom square-shaped legend marker:",paraId:329,tocIndex:118},{value:"import { Chart, register, type SymbolFactor } from '@antv/g2';\n\nconst customSquare = Object.assign<SymbolFactor, Partial<SymbolFactor>>(\n  (x, y, r) => {\n    const radius = r / 2;\n\n    return [\n      ['M', x + radius, y - r],\n      ['L', x - radius, y - r],\n      ['A', radius, radius, 0, 0, 0, x - r, y - radius],\n      ['L', x - r, y + radius],\n      ['A', radius, radius, 0, 0, 0, x - radius, y + r],\n      ['L', x + radius, y + r],\n      ['A', radius, radius, 0, 0, 0, x + r, y + radius],\n      ['L', x + r, y - radius],\n      ['A', radius, radius, 0, 0, 0, x + radius, y - r],\n      ['Z'],\n    ];\n  },\n  {\n    // For a hollow design, use ['stroke', 'lineWidth']\n    style: ['fill'],\n  },\n);\n\nregister('symbol.customSquare', customSquare);\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\nconst colorField = 'genre';\n\nchart\n  .interval()\n  .data(data)\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  .encode('color', colorField)\n  .legend({\n    color: {\n      itemMarker: 'customSquare',\n    },\n  });\n\nchart.render();\n",paraId:330,tocIndex:118},{value:"You can also create unique bar chart shapes:",paraId:331,tocIndex:119},{value:"import { Chart, register } from '@antv/g2';\n\nregister('shape.interval.column25d', myColumn);\n\nconst data = [\n  { year: '1951', sales: 38 },\n  { year: '1952', sales: 52 },\n  { year: '1956', sales: 61 },\n  { year: '1957', sales: 145 },\n  { year: '1958', sales: 48 },\n  { year: '1959', sales: 38 },\n  { year: '1960', sales: 38 },\n  { year: '1962', sales: 38 },\n  { year: '1963', sales: 65 },\n  { year: '1964', sales: 122 },\n  { year: '1967', sales: 132 },\n  { year: '1968', sales: 144 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.data(data);\n\nchart\n  .interval()\n  .encode('x', 'year')\n  .encode('y', 'sales')\n  .style('shape', 'column25d')\n  .scale('x', { padding: 0.3 });\n\nchart.legend('year', {\n  width: 10,\n});\n\nchart.render();\n\n/**\n * Draw 2.5d column shape.\n */\nfunction myColumn({ fill, stroke }, context) {\n  return (points) => {\n    const x3 = points[1][0] - points[0][0];\n    const x4 = x3 / 2 + points[0][0];\n    const { document } = context;\n    const g = document.createElement('g', {});\n\n    const r = document.createElement('polygon', {\n      style: {\n        points: [\n          [points[0][0], points[0][1]],\n          [x4, points[1][1] + 8],\n          [x4, points[3][1] + 8],\n          [points[3][0], points[3][1]],\n        ],\n        fill: 'rgba(114, 177, 207, 0.5)',\n        stroke: 'rgba(0,0,0,0.1)',\n        strokeOpacity: 0.1,\n        inset: 30,\n      },\n    });\n\n    const p = document.createElement('polygon', {\n      style: {\n        points: [\n          [x4, points[1][1] + 8],\n          [points[1][0], points[1][1]],\n          [points[2][0], points[2][1]],\n          [x4, points[2][1] + 8],\n        ],\n        fill: 'rgba(126, 212, 236, 0.5)',\n        stroke: 'rgba(0,0,0,0.3)',\n        strokeOpacity: 0.1,\n      },\n    });\n\n    const t = document.createElement('polygon', {\n      style: {\n        points: [\n          [points[0][0], points[0][1]],\n          [x4, points[1][1] - 8],\n          [points[1][0], points[1][1]],\n          [x4, points[1][1] + 8],\n        ],\n        fill: 'rgba(173, 240, 255, 0.65)',\n      },\n    });\n\n    g.appendChild(r);\n    g.appendChild(p);\n    g.appendChild(t);\n\n    return g;\n  };\n}\n",paraId:332,tocIndex:119}]},81322:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(77494);const t=[{value:"In G2, the ",paraId:0,tocIndex:0},{value:"Axis",paraId:0,tocIndex:0},{value:' component serves as the "ruler" of charts, establishing the mapping relationship between data and visual positions. Through scales, labels, grid lines, and other elements, it helps users intuitively understand data distribution and proportions. It enables you to quickly comprehend the position and numerical values in graphics.',paraId:0,tocIndex:0},{value:"Simply put, axis help us correlate data numbers with positions on the chart, making charts easier to understand.",paraId:1,tocIndex:0},{value:'For example: In a bar chart, the horizontal axis usually represents time, and the vertical axis represents sales. This way, you can see at a glance that "sales were 2 million in March and rose to 3 million in April."',paraId:2,tocIndex:0},{value:"Through the overview content above, I believe you now have a clear understanding of axis. So how exactly do you use them? Next, I'll guide you step by step on how to configure axis.",paraId:3,tocIndex:2},{value:'Configuring axis is like building with blocks - just remember a simple core principle: "Use the axis property, configure by direction, change what needs to be changed where it needs to be changed."',paraId:4,tocIndex:2},{value:"Step 1: Enable Axis (enabled by default)",paraId:5,tocIndex:2},{value:"G2 automatically generates axis based on your data types. No configuration is needed to see basic axis.",paraId:6,tocIndex:2},{value:"chart.options({\n  type: 'interval',\n  width: 500,\n  height: 300,\n  data: [\n    { id: 1, month: 'March', sales: 200 },\n    { id: 3, month: 'April', sales: 300 },\n    { id: 4, month: 'May', sales: 400 },\n    { id: 5, month: 'June', sales: 500 },\n    { id: 6, month: 'July', sales: 600 },\n    { id: 7, month: 'August', sales: 700 },\n  ],\n  encode: { x: 'month', y: 'sales', color: 'month' },\n  // No axis configuration needed for automatic axis generation\n  // axis: {},\n});\n",paraId:7,tocIndex:2},{value:"Step 2: Configure by Direction",paraId:8,tocIndex:2},{value:"Configure x (horizontal direction) axis",paraId:9,tocIndex:2},{value:"chart.options({\n  type: 'interval',\n  width: 500,\n  height: 300,\n  data: [\n    { id: 1, month: 'March', sales: 200 },\n    { id: 3, month: 'April', sales: 300 },\n    { id: 4, month: 'May', sales: 400 },\n    { id: 5, month: 'June', sales: 500 },\n    { id: 6, month: 'July', sales: 600 },\n    { id: 7, month: 'August', sales: 700 },\n  ],\n  encode: { x: 'month', y: 'sales', color: 'month' },\n  // Configure axis\n  axis: {\n    // Configure horizontal axis properties\n    x: {\n      // Configuration parameters and examples can be found below...\n    },\n  },\n});\n",paraId:10,tocIndex:2},{value:"Configure y (vertical direction) axis",paraId:11,tocIndex:2},{value:"chart.options({\n  type: 'interval',\n  width: 500,\n  height: 300,\n  data: [\n    { id: 1, month: 'March', sales: 200 },\n    { id: 3, month: 'April', sales: 300 },\n    { id: 4, month: 'May', sales: 400 },\n    { id: 5, month: 'June', sales: 500 },\n    { id: 6, month: 'July', sales: 600 },\n    { id: 7, month: 'August', sales: 700 },\n  ],\n  encode: { x: 'month', y: 'sales', color: 'month' },\n  // Configure axis\n  axis: {\n    // Configure vertical axis properties\n    y: {\n      // Configuration parameters and examples can be found below...\n    },\n  },\n});\n",paraId:12,tocIndex:2},{value:"Axis can be configured at the Mark level. In G2, each mark has its own axis. If the marks correspond to synchronized scales, the axis will be merged.",paraId:13,tocIndex:3},{value:"({\n  type: 'interval',\n  axis: {\n    x: { labelFormatter: '%0' },\n    y: { tickCount: 5 },\n  },\n});\n",paraId:14,tocIndex:3},{value:"Axis can also be configured at the View level. Axis have inheritance properties. Axis declared on views will be passed to marks declared in ",paraId:15,tocIndex:3},{value:"children",paraId:15,tocIndex:3},{value:". If the mark has a corresponding channel axis, they merge; otherwise, it has no effect.",paraId:15,tocIndex:3},{value:"({\n  type: 'view',\n  axis: {\n    x: { labelFormatter: '%0' },\n    y: { tickCount: 5 },\n  },\n});\n",paraId:16,tocIndex:3},{value:"Hide axis for each channel:",paraId:17,tocIndex:4},{value:"Hide x axis:",paraId:18,tocIndex:4},{value:"({\n  type: 'interval',\n  axis: { x: false }, // Hide x horizontal axis\n});\n",paraId:19,tocIndex:4},{value:"Hide y axis:",paraId:20,tocIndex:4},{value:"({\n  type: 'interval',\n  axis: { y: false }, // Hide y vertical axis\n});\n",paraId:21,tocIndex:4},{value:"Hide multiple axis",paraId:22,tocIndex:4},{value:"({\n  type: 'interval',\n  axis: false,\n});\n",paraId:23,tocIndex:4},{value:"Each axis consists of title, line, tick, label, grid, and breaks.",paraId:24,tocIndex:5},{value:"Property",paraId:25,tocIndex:5},{value:"Description",paraId:25,tocIndex:5},{value:"Type",paraId:25,tocIndex:5},{value:"Default Value",paraId:25,tocIndex:5},{value:"Required",paraId:25,tocIndex:5},{value:"title",paraId:25,tocIndex:5},{value:"Set axis title text and style",paraId:25,tocIndex:5},{value:"title",paraId:26,tocIndex:5},{value:"-",paraId:25,tocIndex:5},{value:"line",paraId:25,tocIndex:5},{value:"Set axis line display and style",paraId:25,tocIndex:5},{value:"line",paraId:27,tocIndex:5},{value:"-",paraId:25,tocIndex:5},{value:"tick",paraId:25,tocIndex:5},{value:"Set axis tick display and style",paraId:25,tocIndex:5},{value:"tick",paraId:28,tocIndex:5},{value:"-",paraId:25,tocIndex:5},{value:"label",paraId:25,tocIndex:5},{value:"Set axis label display and style",paraId:25,tocIndex:5},{value:"label",paraId:29,tocIndex:5},{value:"-",paraId:25,tocIndex:5},{value:"grid",paraId:25,tocIndex:5},{value:"Set axis grid display and style",paraId:25,tocIndex:5},{value:"grid",paraId:30,tocIndex:5},{value:"-",paraId:25,tocIndex:5},{value:"breaks",paraId:25,tocIndex:5},{value:"Set axis breaks display and style",paraId:25,tocIndex:5},{value:"breaks",paraId:31,tocIndex:5},{value:"-",paraId:25,tocIndex:5},{value:"animate",paraId:25,tocIndex:5},{value:"Set axis animation effects",paraId:25,tocIndex:5},{value:"boolean",paraId:25,tocIndex:5},{value:" | ",paraId:25,tocIndex:5},{value:"animate",paraId:32,tocIndex:5},{value:"-",paraId:25,tocIndex:5},{value:"position",paraId:25,tocIndex:5},{value:"Set axis position",paraId:25,tocIndex:5},{value:"left",paraId:25,tocIndex:5},{value:" | ",paraId:25,tocIndex:5},{value:"right",paraId:25,tocIndex:5},{value:" | ",paraId:25,tocIndex:5},{value:"top",paraId:25,tocIndex:5},{value:" | ",paraId:25,tocIndex:5},{value:"bottom",paraId:25,tocIndex:5},{value:"x: bottom",paraId:25,tocIndex:5},{value:" | ",paraId:25,tocIndex:5},{value:"y: left",paraId:25,tocIndex:5},{value:"Title, line, tick, label, and grid configurations are at the same level, not configured as objects, but through prefix + property approach.",paraId:33},{value:"For example, to configure label rotation, it's not configured under a label object, but through the following approach:",paraId:34},{value:"({\n  axis: {\n    x: {\n      title: 'X Axis Title',\n      labelFontSize: 12,\n      labelFormatter: (d) => `2025-${d}`,\n      size: 100,\n      transform: [\n        // Rotation\n        {\n          type: 'rotate',\n          optionalAngles: [0, 45, 90], // Try rotating 0°, 45°, 90°\n          recoverWhenFailed: true, // Recover to default angle if rotation fails\n        },\n      ],\n    },\n  },\n});\n",paraId:35},{value:"Property",paraId:36,tocIndex:6},{value:"Description",paraId:36,tocIndex:6},{value:"Type",paraId:36,tocIndex:6},{value:"Default Value",paraId:36,tocIndex:6},{value:"Required",paraId:36,tocIndex:6},{value:"title",paraId:36,tocIndex:6},{value:"Turn off title or set title content",paraId:36,tocIndex:6},{value:"false",paraId:36,tocIndex:6},{value:"|",paraId:36,tocIndex:6},{value:"string",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"DisplayObject",paraId:36,tocIndex:6},{value:"-",paraId:36,tocIndex:6},{value:"titleSpacing",paraId:36,tocIndex:6},{value:"Distance from title to axis",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number",paraId:36,tocIndex:6},{value:"10",paraId:36,tocIndex:6},{value:"titlePosition",paraId:36,tocIndex:6},{value:"Title position relative to axis, supports abbreviation like 'top' as 't'",paraId:36,tocIndex:6},{value:"'top'",paraId:36,tocIndex:6},{value:"|",paraId:36,tocIndex:6},{value:"'bottom'",paraId:36,tocIndex:6},{value:"|",paraId:36,tocIndex:6},{value:"'left'",paraId:36,tocIndex:6},{value:"|",paraId:36,tocIndex:6},{value:"'right'",paraId:36,tocIndex:6},{value:"'lb'",paraId:36,tocIndex:6},{value:"titleFontSize",paraId:36,tocIndex:6},{value:"Title font size",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number",paraId:36,tocIndex:6},{value:"-",paraId:36,tocIndex:6},{value:"titleFontWeight",paraId:36,tocIndex:6},{value:"Title font weight",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number",paraId:36,tocIndex:6},{value:"-",paraId:36,tocIndex:6},{value:"titleFontFamily",paraId:36,tocIndex:6},{value:"Title font family",paraId:36,tocIndex:6},{value:"string",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => string",paraId:36,tocIndex:6},{value:"-",paraId:36,tocIndex:6},{value:"titleLineHeight",paraId:36,tocIndex:6},{value:"Title line height",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number",paraId:36,tocIndex:6},{value:"1",paraId:36,tocIndex:6},{value:"titleTextAlign",paraId:36,tocIndex:6},{value:"Title text horizontal alignment",paraId:36,tocIndex:6},{value:"'center'",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"'end'",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"'left'",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"'right'",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"'start'",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => string",paraId:36,tocIndex:6},{value:"'start'",paraId:36,tocIndex:6},{value:"titleTextBaseline",paraId:36,tocIndex:6},{value:"Title text vertical baseline",paraId:36,tocIndex:6},{value:"'top'",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"'middle'",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"'bottom'",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"'alphabetic'",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"'hanging'",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => string",paraId:36,tocIndex:6},{value:"'middle'",paraId:36,tocIndex:6},{value:"titleFill",paraId:36,tocIndex:6},{value:"Title text fill color",paraId:36,tocIndex:6},{value:"string",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => string",paraId:36,tocIndex:6},{value:"-",paraId:36,tocIndex:6},{value:"titleFillOpacity",paraId:36,tocIndex:6},{value:"Title text fill opacity",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number",paraId:36,tocIndex:6},{value:"1",paraId:36,tocIndex:6},{value:"titleStroke",paraId:36,tocIndex:6},{value:"Title text stroke color",paraId:36,tocIndex:6},{value:"string",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => string",paraId:36,tocIndex:6},{value:"transparent",paraId:36,tocIndex:6},{value:"titleStrokeOpacity",paraId:36,tocIndex:6},{value:"Title text stroke opacity",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number",paraId:36,tocIndex:6},{value:"1",paraId:36,tocIndex:6},{value:"titleLineWidth",paraId:36,tocIndex:6},{value:"Title text stroke width",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number",paraId:36,tocIndex:6},{value:"0",paraId:36,tocIndex:6},{value:"titleLineDash",paraId:36,tocIndex:6},{value:"Title text stroke dash configuration",paraId:36,tocIndex:6},{value:"number[]",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number[]",paraId:36,tocIndex:6},{value:"[]",paraId:36,tocIndex:6},{value:"titleOpacity",paraId:36,tocIndex:6},{value:"Title text overall opacity",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number",paraId:36,tocIndex:6},{value:"1",paraId:36,tocIndex:6},{value:"titleShadowColor",paraId:36,tocIndex:6},{value:"Title text shadow color",paraId:36,tocIndex:6},{value:"string",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => string",paraId:36,tocIndex:6},{value:"transparent",paraId:36,tocIndex:6},{value:"titleShadowBlur",paraId:36,tocIndex:6},{value:"Title text shadow Gaussian blur coefficient",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number",paraId:36,tocIndex:6},{value:"0",paraId:36,tocIndex:6},{value:"titleShadowOffsetX",paraId:36,tocIndex:6},{value:"Title text shadow horizontal offset",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number",paraId:36,tocIndex:6},{value:"0",paraId:36,tocIndex:6},{value:"titleShadowOffsetY",paraId:36,tocIndex:6},{value:"Title text shadow vertical offset",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number",paraId:36,tocIndex:6},{value:"0",paraId:36,tocIndex:6},{value:"titleCursor",paraId:36,tocIndex:6},{value:"Title text cursor style",paraId:36,tocIndex:6},{value:"string",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => string",paraId:36,tocIndex:6},{value:"default",paraId:36,tocIndex:6},{value:"titleDx",paraId:36,tocIndex:6},{value:"Title text horizontal offset",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number",paraId:36,tocIndex:6},{value:"0",paraId:36,tocIndex:6},{value:"titleDy",paraId:36,tocIndex:6},{value:"Title text vertical offset",paraId:36,tocIndex:6},{value:"number",paraId:36,tocIndex:6},{value:" | ",paraId:36,tocIndex:6},{value:"(datum, index, data) => number",paraId:36,tocIndex:6},{value:"0",paraId:36,tocIndex:6},{value:"Configuration approach",paraId:37,tocIndex:6},{value:"({\n  // Configure axis\n  axis: {\n    // Configure y axis\n    y: {\n      // Axis title configuration\n      title: 'Frequency', // Set y-axis title\n      titleSpacing: 30, // Set spacing between y-axis title and axis line\n      titlePosition: 'left', // Set y-axis title position\n      titleFill: 'steelblue', // Set y-axis title color\n      titleFontSize: 16, // Set y-axis title font size\n      titleFontWeight: 'bold', // Set y-axis title font weight\n      titleFontFamily: 'Arial', // Set y-axis title font family\n      titleTextAlign: 'center', // Set y-axis title horizontal alignment\n      titleTextBaseline: 'middle', // Set y-axis title vertical baseline\n      titleOpacity: 0.9, // Set y-axis title overall opacity\n      titleStroke: '#333', // Set y-axis title stroke color\n      titleLineWidth: 1, // Set y-axis title stroke width\n      titleShadowColor: 'rgba(0,0,0,0.3)', // Set y-axis title shadow color\n      titleShadowBlur: 3, // Set y-axis title shadow blur\n      titleShadowOffsetX: 2, // Set y-axis title shadow horizontal offset\n      titleShadowOffsetY: 2, // Set y-axis title shadow vertical offset\n      titleDx: 5, // Set y-axis title horizontal offset\n      titleDy: 0, // Set y-axis title vertical offset\n      titleCursor: 'pointer', // Set y-axis title cursor style\n    },\n    // Configure x axis\n    x: {\n      // Axis title configuration\n      title: 'Letter', // Set x-axis title\n      titleSpacing: 20, // Set spacing between x-axis title and axis line\n      titlePosition: 'bottom', // Set x-axis title position\n      titleFontSize: 14, // Set x-axis title font size\n      titleFontWeight: 'normal', // Set x-axis title font weight\n      titleFill: '#666', // Set x-axis title color\n      titleTextAlign: 'center', // Set x-axis title horizontal alignment\n      titleOpacity: 1, // Set x-axis title opacity\n      titleLineHeight: 1.2, // Set x-axis title line height\n      titleFillOpacity: 0.8, // Set x-axis title fill opacity\n    },\n  },\n});\n",paraId:38,tocIndex:6},{value:"Property",paraId:39,tocIndex:7},{value:"Description",paraId:39,tocIndex:7},{value:"Type",paraId:39,tocIndex:7},{value:"Default Value",paraId:39,tocIndex:7},{value:"Required",paraId:39,tocIndex:7},{value:"line",paraId:39,tocIndex:7},{value:"Whether to show axis line",paraId:39,tocIndex:7},{value:"boolean",paraId:39,tocIndex:7},{value:"false",paraId:39,tocIndex:7},{value:"arrow",paraId:39,tocIndex:7},{value:"Whether to show arrow",paraId:39,tocIndex:7},{value:"boolean",paraId:39,tocIndex:7},{value:"true",paraId:39,tocIndex:7},{value:"lineExtension",paraId:39,tocIndex:7},{value:"Extension lines on both sides of axis",paraId:39,tocIndex:7},{value:"[number, number]",paraId:39,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"lineArrow",paraId:39,tocIndex:7},{value:"Define axis line arrow shape, defaults to arrow shape",paraId:39,tocIndex:7},{value:"DisplayObject",paraId:39,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"lineArrowOffset",paraId:39,tocIndex:7},{value:"Arrow offset length",paraId:39,tocIndex:7},{value:"number",paraId:39,tocIndex:7},{value:"15",paraId:39,tocIndex:7},{value:"lineArrowSize",paraId:39,tocIndex:7},{value:"Arrow size",paraId:39,tocIndex:7},{value:"number",paraId:39,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"lineStroke",paraId:39,tocIndex:7},{value:"Axis line stroke color",paraId:39,tocIndex:7},{value:"string",paraId:39,tocIndex:7},{value:" | ",paraId:39,tocIndex:7},{value:"(datum, index, data) => string",paraId:39,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"lineStrokeOpacity",paraId:39,tocIndex:7},{value:"Axis line stroke opacity",paraId:39,tocIndex:7},{value:"number",paraId:39,tocIndex:7},{value:" | ",paraId:39,tocIndex:7},{value:"(datum, index, data) => number",paraId:39,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"lineLineWidth",paraId:39,tocIndex:7},{value:"Axis line stroke width",paraId:39,tocIndex:7},{value:"number",paraId:39,tocIndex:7},{value:" | ",paraId:39,tocIndex:7},{value:"(datum, index, data) => number",paraId:39,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"lineLineDash",paraId:39,tocIndex:7},{value:"Axis line stroke dash configuration, first value is segment length, second is gap distance. Setting [0, 0] means no stroke.",paraId:39,tocIndex:7},{value:"[number,number]",paraId:39,tocIndex:7},{value:" | ",paraId:39,tocIndex:7},{value:"(datum, index, data) => [number,number]",paraId:39,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"lineOpacity",paraId:39,tocIndex:7},{value:"Axis line overall opacity",paraId:39,tocIndex:7},{value:"number",paraId:39,tocIndex:7},{value:" | ",paraId:39,tocIndex:7},{value:"(datum, index, data) => number",paraId:39,tocIndex:7},{value:"1",paraId:39,tocIndex:7},{value:"lineShadowColor",paraId:39,tocIndex:7},{value:"Axis line shadow color",paraId:39,tocIndex:7},{value:"string",paraId:39,tocIndex:7},{value:" | ",paraId:39,tocIndex:7},{value:"(datum, index, data) => string",paraId:39,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"lineShadowBlur",paraId:39,tocIndex:7},{value:"Axis line shadow Gaussian blur coefficient",paraId:39,tocIndex:7},{value:"number",paraId:39,tocIndex:7},{value:" | ",paraId:39,tocIndex:7},{value:"(datum, index, data) => number",paraId:39,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"lineShadowOffsetX",paraId:39,tocIndex:7},{value:"Axis line shadow horizontal offset",paraId:39,tocIndex:7},{value:"number",paraId:39,tocIndex:7},{value:" | ",paraId:39,tocIndex:7},{value:"(datum, index, data) => number",paraId:39,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"lineShadowOffsetY",paraId:39,tocIndex:7},{value:"Axis line shadow vertical offset",paraId:39,tocIndex:7},{value:"number",paraId:39,tocIndex:7},{value:" | ",paraId:39,tocIndex:7},{value:"(datum, index, data) => number",paraId:39,tocIndex:7},{value:"-",paraId:39,tocIndex:7},{value:"lineCursor",paraId:39,tocIndex:7},{value:"Axis line cursor style",paraId:39,tocIndex:7},{value:"string",paraId:39,tocIndex:7},{value:" | ",paraId:39,tocIndex:7},{value:"(datum, index, data) => string",paraId:39,tocIndex:7},{value:"default",paraId:39,tocIndex:7},{value:"Configuration approach",paraId:40,tocIndex:7},{value:"({\n  axis: {\n    x: {\n      line: true, // Whether to show axis line\n      arrow: true, // Whether to show arrow\n      lineArrowOffset: 10, // Arrow offset length\n      lineArrowSize: 30, // Arrow size\n      lineLineWidth: 10, // Axis line stroke width\n      lineExtension: [5, 5], // Extension lines on both sides of axis\n      lineStroke: '#333', // Axis line stroke color\n      lineStrokeOpacity: 0.8, // Axis line stroke opacity\n      lineLineDash: [5, 5], // Axis line stroke dash configuration\n      lineOpacity: 1, // Axis line overall opacity\n      lineShadowColor: 'rgba(0,0,0,0.3)', // Axis line shadow color\n      lineShadowBlur: 3, // Axis line shadow Gaussian blur coefficient\n      lineShadowOffsetX: 2, // Axis line shadow horizontal offset\n      lineShadowOffsetY: 2, // Axis line shadow vertical offset\n      lineCursor: 'pointer', // Axis line cursor style\n    },\n    y: {\n      line: true, // Whether to show axis line\n      arrow: true, // Whether to show arrow\n      lineArrowOffset: 10, // Arrow offset length\n      lineArrowSize: 30, // Arrow size\n      lineLineWidth: 10, // Axis line stroke width\n      lineStroke: '#666', // Axis line stroke color\n      lineOpacity: 0.9, // Axis line overall opacity\n    },\n  },\n});\n",paraId:41,tocIndex:7},{value:"Property",paraId:42,tocIndex:8},{value:"Description",paraId:42,tocIndex:8},{value:"Type",paraId:42,tocIndex:8},{value:"Default Value",paraId:42,tocIndex:8},{value:"Required",paraId:42,tocIndex:8},{value:"tick",paraId:42,tocIndex:8},{value:"Whether to show ticks",paraId:42,tocIndex:8},{value:"boolean",paraId:42,tocIndex:8},{value:"true",paraId:42,tocIndex:8},{value:"tickCount",paraId:42,tocIndex:8},{value:"Set recommended number of ticks to generate; tickCount is only a suggestion",paraId:42,tocIndex:8},{value:"number",paraId:42,tocIndex:8},{value:"-",paraId:42,tocIndex:8},{value:"tickMethod",paraId:42,tocIndex:8},{value:"Custom tick generation method",paraId:42,tocIndex:8},{value:"(start: number | Date, end: number | Date, tickCount: number) => number[]",paraId:42,tocIndex:8},{value:"-",paraId:42,tocIndex:8},{value:"tickFilter",paraId:42,tocIndex:8},{value:"Tick filtering",paraId:42,tocIndex:8},{value:"(datum, index, data)=>boolean",paraId:42,tocIndex:8},{value:"-",paraId:42,tocIndex:8},{value:"tickFormatter",paraId:42,tocIndex:8},{value:"Tick formatting, for custom tick styles, callback returns tick direction",paraId:42,tocIndex:8},{value:"DisplayObject",paraId:42,tocIndex:8},{value:" | ",paraId:42,tocIndex:8},{value:"(datum, index, data, Vector)=> DisplayObject",paraId:42,tocIndex:8},{value:"-",paraId:42,tocIndex:8},{value:"tickDirection",paraId:42,tocIndex:8},{value:"Tick direction, ",paraId:42,tocIndex:8},{value:"positive",paraId:42,tocIndex:8},{value:" for side axis direction (main axis clockwise 90°), ",paraId:42,tocIndex:8},{value:"negative",paraId:42,tocIndex:8},{value:" for negative side axis",paraId:42,tocIndex:8},{value:"'positive'",paraId:42,tocIndex:8},{value:" | ",paraId:42,tocIndex:8},{value:"'negative'",paraId:42,tocIndex:8},{value:"positive",paraId:42,tocIndex:8},{value:"tickLength",paraId:42,tocIndex:8},{value:"Tick length",paraId:42,tocIndex:8},{value:"number",paraId:42,tocIndex:8},{value:"|",paraId:42,tocIndex:8},{value:"(datum, index, data)=>number",paraId:42,tocIndex:8},{value:"15",paraId:42,tocIndex:8},{value:"tickStroke",paraId:42,tocIndex:8},{value:"Tick stroke color",paraId:42,tocIndex:8},{value:"string",paraId:42,tocIndex:8},{value:" | ",paraId:42,tocIndex:8},{value:"(datum, index, data, Vector)=>string",paraId:42,tocIndex:8},{value:"-",paraId:42,tocIndex:8},{value:"tickStrokeOpacity",paraId:42,tocIndex:8},{value:"Tick stroke opacity",paraId:42,tocIndex:8},{value:"number",paraId:42,tocIndex:8},{value:" | ",paraId:42,tocIndex:8},{value:"(datum, index, data, Vector)=>number",paraId:42,tocIndex:8},{value:"-",paraId:42,tocIndex:8},{value:"tickLineWidth",paraId:42,tocIndex:8},{value:"Tick stroke width",paraId:42,tocIndex:8},{value:"number",paraId:42,tocIndex:8},{value:" | ",paraId:42,tocIndex:8},{value:"(datum, index, data, Vector)=>number",paraId:42,tocIndex:8},{value:"-",paraId:42,tocIndex:8},{value:"tickLineDash",paraId:42,tocIndex:8},{value:"Tick stroke dash configuration, first value is segment length, second is gap distance. Setting [0, 0] means no stroke.",paraId:42,tocIndex:8},{value:"[number,number]",paraId:42,tocIndex:8},{value:" | ",paraId:42,tocIndex:8},{value:"(datum, index, data, Vector)=>[number,number]",paraId:42,tocIndex:8},{value:"-",paraId:42,tocIndex:8},{value:"tickOpacity",paraId:42,tocIndex:8},{value:"Tick overall opacity",paraId:42,tocIndex:8},{value:"number",paraId:42,tocIndex:8},{value:" | ",paraId:42,tocIndex:8},{value:"(datum, index, data, Vector)=>number",paraId:42,tocIndex:8},{value:"-",paraId:42,tocIndex:8},{value:"tickShadowColor",paraId:42,tocIndex:8},{value:"Tick shadow color",paraId:42,tocIndex:8},{value:"string",paraId:42,tocIndex:8},{value:" | ",paraId:42,tocIndex:8},{value:"(datum, index, data, Vector)=>string",paraId:42,tocIndex:8},{value:"-",paraId:42,tocIndex:8},{value:"tickShadowBlur",paraId:42,tocIndex:8},{value:"Tick shadow Gaussian blur coefficient",paraId:42,tocIndex:8},{value:"number",paraId:42,tocIndex:8},{value:" | ",paraId:42,tocIndex:8},{value:"(datum, index, data, Vector)=>number",paraId:42,tocIndex:8},{value:"-",paraId:42,tocIndex:8},{value:"tickShadowOffsetX",paraId:42,tocIndex:8},{value:"Tick shadow horizontal offset",paraId:42,tocIndex:8},{value:"number",paraId:42,tocIndex:8},{value:" | ",paraId:42,tocIndex:8},{value:"(datum, index, data, Vector)=>number",paraId:42,tocIndex:8},{value:"-",paraId:42,tocIndex:8},{value:"tickShadowOffsetY",paraId:42,tocIndex:8},{value:"Tick shadow vertical offset",paraId:42,tocIndex:8},{value:"number",paraId:42,tocIndex:8},{value:" | ",paraId:42,tocIndex:8},{value:"(datum, index, data, Vector)=>number",paraId:42,tocIndex:8},{value:"-",paraId:42,tocIndex:8},{value:"tickCursor",paraId:42,tocIndex:8},{value:"Tick cursor style",paraId:42,tocIndex:8},{value:"string",paraId:42,tocIndex:8},{value:" | ",paraId:42,tocIndex:8},{value:"(datum, index, data, Vector)=>string",paraId:42,tocIndex:8},{value:"default",paraId:42,tocIndex:8},{value:"({\n  // Configure axis\n  axis: {\n    y: {\n      tickCount: 10, // Set recommended number of ticks to generate\n      tickLength: 20, // Set y-axis tick length\n      tickFilter: (_, i) => i % 3 !== 0, // Filter y-axis ticks, show every 3rd tick\n      tick: true, // Whether to show ticks\n      tickDirection: 'positive', // Tick direction\n      tickStroke: '#333', // Tick stroke color\n      tickStrokeOpacity: 0.8, // Tick stroke opacity\n      tickLineWidth: 2, // Tick stroke width\n      tickLineDash: [2, 2], // Tick stroke dash configuration\n      tickOpacity: 1, // Tick overall opacity\n      tickShadowColor: 'rgba(0,0,0,0.2)', // Tick shadow color\n      tickShadowBlur: 2, // Tick shadow Gaussian blur coefficient\n      tickShadowOffsetX: 1, // Tick shadow horizontal offset\n      tickShadowOffsetY: 1, // Tick shadow vertical offset\n      tickCursor: 'crosshair', // Tick cursor style\n    },\n    x: {\n      tick: true, // Whether to show ticks\n      tickCount: 8, // Set recommended number of ticks to generate\n      tickMethod: (start, end, count) => {\n        // Custom tick generation method\n        const step = (end - start) / (count - 1);\n        return Array.from({ length: count }, (_, i) => start + i * step);\n      },\n      tickLength: 10, // Tick length\n      tickDirection: 'positive', // Tick direction\n      tickStroke: '#3366ff', // Tick stroke color\n      tickLineWidth: 5, // Tick stroke width\n      tickOpacity: 0.9, // Tick overall opacity\n      tickFilter: (_, i) => i % 2 === 0, // Filter ticks, show only even index ticks\n    },\n  },\n});\n",paraId:43,tocIndex:8},{value:"Property",paraId:44,tocIndex:9},{value:"Description",paraId:44,tocIndex:9},{value:"Type",paraId:44,tocIndex:9},{value:"Default Value",paraId:44,tocIndex:9},{value:"Required",paraId:44,tocIndex:9},{value:"label",paraId:44,tocIndex:9},{value:"Whether to show tick labels",paraId:44,tocIndex:9},{value:"boolean",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelFontSize",paraId:44,tocIndex:9},{value:"Label font size",paraId:44,tocIndex:9},{value:"number",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>number",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelFontFamily",paraId:44,tocIndex:9},{value:"Label font family",paraId:44,tocIndex:9},{value:"string",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>string",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelFontWeight",paraId:44,tocIndex:9},{value:"Label font weight",paraId:44,tocIndex:9},{value:"number",paraId:44,tocIndex:9},{value:" |",paraId:44,tocIndex:9},{value:"(datum, index, data)=>number",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelLineHeight",paraId:44,tocIndex:9},{value:"Label line height",paraId:44,tocIndex:9},{value:"number",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>number",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelTextAlign",paraId:44,tocIndex:9},{value:"Label text horizontal alignment",paraId:44,tocIndex:9},{value:"'center'",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"'end'",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"'left'",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"'right'",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"'start'",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>string",paraId:44,tocIndex:9},{value:"'start'",paraId:44,tocIndex:9},{value:"labelTextBaseline",paraId:44,tocIndex:9},{value:"Label text vertical baseline",paraId:44,tocIndex:9},{value:"'top'",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"'middle'",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"'bottom'",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"'alphabetic'",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"'hanging'",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>string",paraId:44,tocIndex:9},{value:"'bottom'",paraId:44,tocIndex:9},{value:"labelAlign",paraId:44,tocIndex:9},{value:"Label alignment",paraId:44,tocIndex:9},{value:"- 'horizontal' always horizontal",paraId:44,tocIndex:9},{value:" - 'parallel' parallel to axis",paraId:44,tocIndex:9},{value:" - 'perpendicular' perpendicular to axis",paraId:44,tocIndex:9},{value:"'horizontal'",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"'parallel'",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"'perpendicular'",paraId:44,tocIndex:9},{value:"parallel",paraId:44,tocIndex:9},{value:"labelFilter",paraId:44,tocIndex:9},{value:"Label filtering",paraId:44,tocIndex:9},{value:"(datum, index, data)=> boolean",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelFormatter",paraId:44,tocIndex:9},{value:"Label formatting, accepts function or ",paraId:44,tocIndex:9},{value:"d3-format",paraId:44,tocIndex:9},{value:" supported string",paraId:44,tocIndex:9},{value:"string",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, array) => string",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelRender",paraId:44,tocIndex:9},{value:"Custom label render, support HtmlString, the usage is the same as that of ",paraId:44,tocIndex:9},{value:"labelFormatter",paraId:44,tocIndex:9},{value:"string",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, array) => string",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"transform",paraId:44,tocIndex:9},{value:"Label transform to avoid text overlap. Supports text ellipsis, overlap hiding, auto rotation",paraId:44,tocIndex:9},{value:"Transform[]",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelTransform",paraId:44,tocIndex:9},{value:"Label transform shortcuts for local coordinate system transforms including scale, translate, rotate, skew, matrix transforms, see ",paraId:44,tocIndex:9},{value:"transform",paraId:44,tocIndex:9},{value:"string",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelAutoHide",paraId:44,tocIndex:9},{value:"Auto hide overlapping labels, effective when size is set",paraId:44,tocIndex:9},{value:"boolean",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"HideOverlapCfg",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelAutoRotate",paraId:44,tocIndex:9},{value:"Auto rotate labels, effective when size is set",paraId:44,tocIndex:9},{value:"boolean",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"RotateOverlapCfg",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelAutoEllipsis",paraId:44,tocIndex:9},{value:"Auto ellipsis labels, effective when size is set",paraId:44,tocIndex:9},{value:"boolean",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"EllipsisOverlapCfg",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelAutoWrap",paraId:44,tocIndex:9},{value:"Auto wrap labels, effective when size is set",paraId:44,tocIndex:9},{value:"boolean",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"WrapOverlapCfg",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelDirection",paraId:44,tocIndex:9},{value:"Label position relative to axis line, refer to ",paraId:44,tocIndex:9},{value:"tickDirection",paraId:44,tocIndex:9},{value:"'positive'",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"'negative'",paraId:44,tocIndex:9},{value:"positive",paraId:44,tocIndex:9},{value:"labelSpacing",paraId:44,tocIndex:9},{value:"Spacing between label and its corresponding tick",paraId:44,tocIndex:9},{value:"number",paraId:44,tocIndex:9},{value:"0",paraId:44,tocIndex:9},{value:"labelFill",paraId:44,tocIndex:9},{value:"Label text fill color",paraId:44,tocIndex:9},{value:"string",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>string",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelFillOpacity",paraId:44,tocIndex:9},{value:"Label text fill opacity",paraId:44,tocIndex:9},{value:"number",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>number",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelStroke",paraId:44,tocIndex:9},{value:"Label text stroke color",paraId:44,tocIndex:9},{value:"string",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>string",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelStrokeOpacity",paraId:44,tocIndex:9},{value:"Label text stroke opacity",paraId:44,tocIndex:9},{value:"number",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>number",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelLineWidth",paraId:44,tocIndex:9},{value:"Label text stroke width",paraId:44,tocIndex:9},{value:"number",paraId:44,tocIndex:9},{value:" |",paraId:44,tocIndex:9},{value:"(datum, index, data)=>number",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelLineDash",paraId:44,tocIndex:9},{value:"Label text stroke dash configuration, first value is segment length, second is gap distance. Setting [0, 0] means no stroke.",paraId:44,tocIndex:9},{value:"[number,number]",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>[number, number]",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelOpacity",paraId:44,tocIndex:9},{value:"Label text overall opacity",paraId:44,tocIndex:9},{value:"number",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>number",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelShadowColor",paraId:44,tocIndex:9},{value:"Label text shadow color",paraId:44,tocIndex:9},{value:"string",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>string",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelShadowBlur",paraId:44,tocIndex:9},{value:"Label text shadow Gaussian blur coefficient",paraId:44,tocIndex:9},{value:"number",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>number",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelShadowOffsetX",paraId:44,tocIndex:9},{value:"Label text shadow horizontal offset",paraId:44,tocIndex:9},{value:"number",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>number",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelShadowOffsetY",paraId:44,tocIndex:9},{value:"Label text shadow vertical offset",paraId:44,tocIndex:9},{value:"number",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>number",paraId:44,tocIndex:9},{value:"-",paraId:44,tocIndex:9},{value:"labelCursor",paraId:44,tocIndex:9},{value:"Label text cursor style",paraId:44,tocIndex:9},{value:"string",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>string",paraId:44,tocIndex:9},{value:"default",paraId:44,tocIndex:9},{value:"labelDx",paraId:44,tocIndex:9},{value:"Label text horizontal offset",paraId:44,tocIndex:9},{value:"number",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>number",paraId:44,tocIndex:9},{value:"0",paraId:44,tocIndex:9},{value:"labelDy",paraId:44,tocIndex:9},{value:"Label text vertical offset",paraId:44,tocIndex:9},{value:"number",paraId:44,tocIndex:9},{value:" | ",paraId:44,tocIndex:9},{value:"(datum, index, data)=>number",paraId:44,tocIndex:9},{value:"0",paraId:44,tocIndex:9},{value:"The ",paraId:45,tocIndex:10},{value:"labelFormatter",paraId:45,tocIndex:10},{value:" visual channel is used to adjust label formatting.",paraId:45,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  width: 500,\n  height: 300,\n  data: [\n    { id: 1, month: '03', sales: 200 },\n    { id: 3, month: '04', sales: 300 },\n    { id: 4, month: '05', sales: 400 },\n    { id: 5, month: '06', sales: 500 },\n    { id: 6, month: '07', sales: 600 },\n    { id: 7, month: '08', sales: 700 },\n  ],\n  encode: { x: 'month', y: 'sales', color: 'month' },\n  axis: {\n    y: {\n      title: 'Sales',\n    },\n    x: {\n      title: 'Month',\n      labelFontSize: 12,\n      labelFormatter: (d) => `2025-${d}`, // Label formatting\n    },\n  },\n});\nchart.render();\n",paraId:46,tocIndex:11},{value:"G2 supports using ",paraId:47,tocIndex:12},{value:"d3-format",paraId:47,tocIndex:12},{value:" compatible format strings, which is a powerful and standardized numerical formatting specification.",paraId:47,tocIndex:12},{value:"Basic syntax of D3 format: ",paraId:48,tocIndex:13},{value:"[[fill]align][sign][symbol][0][width][,][.precision][~][type]",paraId:48,tocIndex:13},{value:"fill",paraId:49,tocIndex:13},{value:": Fill character, default is space",paraId:49,tocIndex:13},{value:"align",paraId:49,tocIndex:13},{value:": Alignment (",paraId:49,tocIndex:13},{value:"<",paraId:49,tocIndex:13},{value:" left align, ",paraId:49,tocIndex:13},{value:"^",paraId:49,tocIndex:13},{value:" center, ",paraId:49,tocIndex:13},{value:">",paraId:49,tocIndex:13},{value:" right align, ",paraId:49,tocIndex:13},{value:"=",paraId:49,tocIndex:13},{value:" number right align)",paraId:49,tocIndex:13},{value:"sign",paraId:49,tocIndex:13},{value:": Sign display (",paraId:49,tocIndex:13},{value:"+",paraId:49,tocIndex:13},{value:" always show sign, ",paraId:49,tocIndex:13},{value:"-",paraId:49,tocIndex:13},{value:" only show negative sign, ",paraId:49,tocIndex:13},{value:"(",paraId:49,tocIndex:13},{value:" negative numbers in parentheses)",paraId:49,tocIndex:13},{value:"symbol",paraId:49,tocIndex:13},{value:": Prefix symbol (",paraId:49,tocIndex:13},{value:"#",paraId:49,tocIndex:13},{value:" base prefix, ",paraId:49,tocIndex:13},{value:"$",paraId:49,tocIndex:13},{value:" currency symbol)",paraId:49,tocIndex:13},{value:"0",paraId:49,tocIndex:13},{value:": Zero padding",paraId:49,tocIndex:13},{value:"width",paraId:49,tocIndex:13},{value:": Minimum width",paraId:49,tocIndex:13},{value:",",paraId:49,tocIndex:13},{value:": Thousands separator",paraId:49,tocIndex:13},{value:"precision",paraId:49,tocIndex:13},{value:": Precision",paraId:49,tocIndex:13},{value:"~",paraId:49,tocIndex:13},{value:": Remove trailing zeros",paraId:49,tocIndex:13},{value:"type",paraId:49,tocIndex:13},{value:": Format type",paraId:49,tocIndex:13},{value:"Type",paraId:50,tocIndex:14},{value:"Description",paraId:50,tocIndex:14},{value:"Example",paraId:50,tocIndex:14},{value:"d",paraId:50,tocIndex:14},{value:"Integer",paraId:50,tocIndex:14},{value:"42",paraId:50,tocIndex:14},{value:"f",paraId:50,tocIndex:14},{value:"Fixed decimals",paraId:50,tocIndex:14},{value:"42.00",paraId:50,tocIndex:14},{value:"e",paraId:50,tocIndex:14},{value:"Scientific",paraId:50,tocIndex:14},{value:"4.2e+1",paraId:50,tocIndex:14},{value:"s",paraId:50,tocIndex:14},{value:"SI prefix",paraId:50,tocIndex:14},{value:"42k",paraId:50,tocIndex:14},{value:", ",paraId:50,tocIndex:14},{value:"1.5M",paraId:50,tocIndex:14},{value:"%",paraId:50,tocIndex:14},{value:"Percentage",paraId:50,tocIndex:14},{value:"42%",paraId:50,tocIndex:14},{value:"$",paraId:50,tocIndex:14},{value:"Currency format",paraId:50,tocIndex:14},{value:"$42.00",paraId:50,tocIndex:14},{value:"r",paraId:50,tocIndex:14},{value:"Significant digits",paraId:50,tocIndex:14},{value:"42.0",paraId:50,tocIndex:14},{value:"g",paraId:50,tocIndex:14},{value:"General format",paraId:50,tocIndex:14},{value:"42",paraId:50,tocIndex:14},{value:"// Common numeric formats\n'.2f'; // Fixed 2 decimals: 23.45\n'.0f'; // Integer: 23\n'.1%'; // Percentage: 23.4%\n',.0f'; // Thousands separator: 1,234,567\n\n// SI prefix format (recommended for large numbers)\n's'; // SI prefix: 1.2M, 3.4k\n'.1s'; // 1 decimal SI: 1.2M, 3.4k\n'~s'; // Trim trailing zeros SI: 1.2M, 3k\n'.0s'; // Integer SI: 1M, 3k\n\n// Currency format\n'$,.2f'; // USD: $1,234.56\n'$.2s'; // USD SI: $1.23M\n\n// Scientific notation\n'.2e'; // Scientific: 1.23e+6\n'.2g'; // General format: 1.2e+6 or 1234\n\n// Base formats\n'd'; // Decimal integer: 1234\n'x'; // Hexadecimal: 4d2\n'o'; // Octal: 2322\n'b'; // Binary: 10011010010\n",paraId:51,tocIndex:15},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  width: 600,\n  height: 400,\n  data: [\n    { type: 'Revenue', value: 1234567.89 },\n    { type: 'Expense', value: -987654.32 },\n    { type: 'Profit', value: 246913.57 },\n    { type: 'Investment', value: 5000000 },\n  ],\n  encode: { x: 'type', y: 'value', color: 'type' },\n  axis: {\n    y: {\n      title: 'Amount (USD)',\n      // Using d3-format string\n      labelFormatter: ',.2s', // Thousands separator + 2 significant digits + SI prefix\n    },\n    x: {\n      title: 'Business Type',\n    },\n  },\n});\nchart.render();\n",paraId:52,tocIndex:16},{value:"Besides using d3-format strings, you can also pass custom functions:",paraId:53,tocIndex:17},{value:"axis: {\n  y: {\n    labelFormatter: (value, index, data) => {\n      // Custom logic\n      if (value >= 1000000) {\n        return (value / 1000000).toFixed(1) + 'M';\n      } else if (value >= 1000) {\n        return (value / 1000).toFixed(1) + 'K';\n      }\n      return value.toString();\n    },\n  },\n}\n",paraId:54,tocIndex:17},{value:"labelTransform",paraId:55,tocIndex:18},{value:" is a shortcut provided by G for local coordinate system transforms, consistent with ",paraId:55,tocIndex:18},{value:"CSS Transform",paraId:55,tocIndex:18},{value:".",paraId:55,tocIndex:18},{value:"The following example shows how to configure ",paraId:56,tocIndex:18},{value:"labelTransform",paraId:56,tocIndex:18},{value:" to rotate x-axis labels by 90 degrees.",paraId:56,tocIndex:18},{value:"({\n  axis: {\n    x: {\n      title: 'X Axis Title',\n      labelFontSize: 12,\n      labelFormatter: (d) => `2025-${d}`,\n      labelTransform: 'rotate(90)',\n    },\n  },\n});\n",paraId:57,tocIndex:18},{value:"To avoid label overlap or exceeding display range, the system provides multiple optimization methods including ellipsis, rotation, hiding, and wrapping.\nThese features can be configured in two ways:",paraId:58,tocIndex:19},{value:"transform",paraId:59,tocIndex:19},{value:" array (multi-strategy combination)",paraId:59,tocIndex:19},{value:"labelAutoXXX",paraId:59,tocIndex:19},{value:" series properties (single strategy shortcuts) ",paraId:59,tocIndex:19},{value:"Recommended",paraId:59,tocIndex:19},{value:"Both approaches have identical core functionality, differing only in use cases and configuration methods.",paraId:60,tocIndex:19},{value:"transform",paraId:61,tocIndex:19},{value:" array (multi-strategy combination)",paraId:61,tocIndex:19},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  width: 500,\n  height: 500,\n  data: [\n    { id: 1, label: 'X Axis Label 1', value: 200 },\n    { id: 3, label: 'X Axis Label 2', value: 300 },\n    { id: 4, label: 'X Axis Label 3', value: 400 },\n    { id: 5, label: 'X Axis Label 4', value: 500 },\n    { id: 6, label: 'X Axis Label 5', value: 600 },\n    { id: 7, label: 'X Axis Label 6', value: 700 },\n    { id: 8, label: 'X Axis Label 999', value: 800 },\n  ],\n  encode: { x: 'label', y: 'value' },\n  axis: {\n    y: {\n      title: 'Y Axis Title',\n    },\n    x: {\n      title: 'X Axis Title',\n      labelFontSize: 12,\n      labelFormatter: (d) => `2025-${d}`,\n      transform: [\n        // Ellipsis\n        {\n          type: 'ellipsis',\n          suffix: '..', // Ellipsis suffix (default ...)\n          minLength: 8, // No ellipsis if less than 8 characters\n          maxLength: 12, // Force ellipsis if more than 12 characters\n        },\n        // Wrap\n        {\n          type: 'wrap',\n          wordWrapWidth: 80, // Maximum line width 80px\n          maxLines: 2, // Maximum 2 lines\n          recoverWhenFailed: true, // Recover to default if wrapping fails\n        },\n        // Rotate\n        {\n          type: 'rotate',\n          optionalAngles: [0, 45, 90], // Try rotating 0°, 45°, 90°\n          recoverWhenFailed: true, // Recover to default angle if rotation fails\n        },\n        // Hide\n        {\n          type: 'hide',\n          keepHeader: true, // Keep first label\n          keepTail: true, // Keep last label\n        },\n      ],\n    },\n  },\n});\nchart.render();\n",paraId:62,tocIndex:19},{value:"Using ",paraId:63,tocIndex:19},{value:"labelAutoHide",paraId:63,tocIndex:19},{value:", ",paraId:63,tocIndex:19},{value:"labelAutoRotate",paraId:63,tocIndex:19},{value:", ",paraId:63,tocIndex:19},{value:"labelAutoEllipsis",paraId:63,tocIndex:19},{value:", ",paraId:63,tocIndex:19},{value:"labelAutoWrap",paraId:63,tocIndex:19},{value:" properties (requires ",paraId:63,tocIndex:19},{value:"size",paraId:63,tocIndex:19},{value:" setting)",paraId:63,tocIndex:19},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  width: 500,\n  height: 500,\n  data: [\n    { id: 1, label: 'X Axis Label 1', value: 200 },\n    { id: 3, label: 'X Axis Label 2', value: 300 },\n    { id: 4, label: 'X Axis Label 3', value: 400 },\n    { id: 5, label: 'X Axis Label 4', value: 500 },\n    { id: 6, label: 'X Axis Label 5', value: 600 },\n    { id: 7, label: 'X Axis Label 6', value: 700 },\n    { id: 8, label: 'X Axis Label 999', value: 800 },\n  ],\n  encode: { x: 'label', y: 'value' },\n  axis: {\n    y: {\n      title: 'Y Axis Title',\n    },\n    x: {\n      title: 'X Axis Title',\n      labelFontSize: 12,\n      labelFormatter: (d) => `2025-${d}`,\n\n      size: 100, // Must set size\n      labelAutoEllipsis: {\n        suffix: '..',\n        minLength: 8,\n        maxLength: 12,\n      },\n      labelAutoWrap: {\n        wordWrapWidth: 80,\n        maxLines: 2,\n        recoverWhenFailed: true,\n      },\n      labelAutoRotate: {\n        optionalAngles: [0, 45, 90], // Try rotating 0°, 45°, 90°\n        recoverWhenFailed: true, // Recover to default angle if rotation fails\n      },\n      labelAutoHide: {\n        keepHeader: true, // Keep first label\n        keepTail: true, // Keep last label\n      },\n    },\n  },\n});\nchart.render();\n",paraId:64,tocIndex:19},{value:"export interface Transform {\n  /** Extra margin when avoiding label overlap */\n  margin?: number[];\n}\n\nexport interface EllipsisOverlapCfg extends Transform {\n  type: 'ellipsis';\n  /** Ellipsis replacement character, default is ... */\n  suffix?: string;\n  /** No ellipsis if text is shorter than this length */\n  minLength: string | number;\n  /** Always ellipsis if text is shorter than this length */\n  maxLength?: string | number;\n  /** Step size for each ellipsis operation */\n  step?: string | number;\n}\n\nexport interface RotateOverlapCfg extends Transform {\n  type: 'rotate';\n  /** Optional rotation angle values */\n  optionalAngles: number[];\n  /** Whether to recover to default rotation angle when rotation cannot avoid overlap */\n  recoverWhenFailed?: boolean;\n}\n\nexport interface HideOverlapCfg extends Transform {\n  type: 'hide';\n  /** Ensure first label is not hidden */\n  keepHeader?: boolean;\n  /** Ensure last label is not hidden */\n  keepTail?: boolean;\n}\n\nexport interface WrapOverlapCfg extends Transform {\n  type: 'wrap';\n  /** Maximum width per line */\n  wordWrapWidth?: number;\n  /** Maximum number of lines */\n  maxLines?: number;\n  recoverWhenFailed?: boolean;\n}\n",paraId:65,tocIndex:19},{value:"Grid lines have different styles in different coordinate systems",paraId:66,tocIndex:20},{value:"Scenario",paraId:67,tocIndex:20},{value:"Style",paraId:67,tocIndex:20},{value:"Cartesian",paraId:67,tocIndex:20},{value:"Polar",paraId:67,tocIndex:20},{value:"Polar",paraId:67,tocIndex:20},{value:"Polar",paraId:67,tocIndex:20},{value:" ",paraId:67,tocIndex:20},{value:"Radar",paraId:67,tocIndex:20},{value:"Property",paraId:68,tocIndex:20},{value:"Description",paraId:68,tocIndex:20},{value:"Type",paraId:68,tocIndex:20},{value:"Default Value",paraId:68,tocIndex:20},{value:"Required",paraId:68,tocIndex:20},{value:"grid",paraId:68,tocIndex:20},{value:"Whether to show grid lines",paraId:68,tocIndex:20},{value:"boolean",paraId:68,tocIndex:20},{value:"false",paraId:68,tocIndex:20},{value:"gridFilter",paraId:68,tocIndex:20},{value:"Grid line filtering",paraId:68,tocIndex:20},{value:"(datum, index, data)=> boolean",paraId:68,tocIndex:20},{value:"-",paraId:68,tocIndex:20},{value:"gridLength",paraId:68,tocIndex:20},{value:"Grid line length. Generally, user configuration is not needed.",paraId:68,tocIndex:20},{value:"number",paraId:68,tocIndex:20},{value:" | ",paraId:68,tocIndex:20},{value:"(datum, index, data)=> number",paraId:68,tocIndex:20},{value:"0",paraId:68,tocIndex:20},{value:"gridAreaFill",paraId:68,tocIndex:20},{value:"Grid area fill color",paraId:68,tocIndex:20},{value:"string",paraId:68,tocIndex:20},{value:" | ",paraId:68,tocIndex:20},{value:"string[]",paraId:68,tocIndex:20},{value:"| ",paraId:68,tocIndex:20},{value:"(datum, index, data)=> string",paraId:68,tocIndex:20},{value:"-",paraId:68,tocIndex:20},{value:"gridStroke",paraId:68,tocIndex:20},{value:"Grid line stroke color",paraId:68,tocIndex:20},{value:"string",paraId:68,tocIndex:20},{value:" | ",paraId:68,tocIndex:20},{value:"(datum, index, data)=> string",paraId:68,tocIndex:20},{value:"-",paraId:68,tocIndex:20},{value:"gridStrokeOpacity",paraId:68,tocIndex:20},{value:"Grid line stroke opacity",paraId:68,tocIndex:20},{value:"number",paraId:68,tocIndex:20},{value:" | ",paraId:68,tocIndex:20},{value:"(datum, index, data)=> number",paraId:68,tocIndex:20},{value:"-",paraId:68,tocIndex:20},{value:"gridLineWidth",paraId:68,tocIndex:20},{value:"Grid line stroke width",paraId:68,tocIndex:20},{value:"number",paraId:68,tocIndex:20},{value:" | ",paraId:68,tocIndex:20},{value:"(datum, index, data)=> number",paraId:68,tocIndex:20},{value:"-",paraId:68,tocIndex:20},{value:"gridLineDash",paraId:68,tocIndex:20},{value:"Grid line stroke dash configuration, first value is segment length, second is gap distance. Setting [0, 0] means no stroke.",paraId:68,tocIndex:20},{value:"[number,number]",paraId:68,tocIndex:20},{value:" | ",paraId:68,tocIndex:20},{value:"(datum, index, data)=> [number,number]",paraId:68,tocIndex:20},{value:"-",paraId:68,tocIndex:20},{value:"gridOpacity",paraId:68,tocIndex:20},{value:"Grid line overall opacity",paraId:68,tocIndex:20},{value:"number",paraId:68,tocIndex:20},{value:" | ",paraId:68,tocIndex:20},{value:"(datum, index, data)=> number",paraId:68,tocIndex:20},{value:"-",paraId:68,tocIndex:20},{value:"gridShadowColor",paraId:68,tocIndex:20},{value:"Grid line shadow color",paraId:68,tocIndex:20},{value:"string",paraId:68,tocIndex:20},{value:" | ",paraId:68,tocIndex:20},{value:"(datum, index, data)=> string",paraId:68,tocIndex:20},{value:"-",paraId:68,tocIndex:20},{value:"gridShadowBlur",paraId:68,tocIndex:20},{value:"Grid line shadow Gaussian blur coefficient",paraId:68,tocIndex:20},{value:"number",paraId:68,tocIndex:20},{value:" | ",paraId:68,tocIndex:20},{value:"(datum, index, data)=> number",paraId:68,tocIndex:20},{value:"-",paraId:68,tocIndex:20},{value:"gridShadowOffsetX",paraId:68,tocIndex:20},{value:"Grid line shadow horizontal offset",paraId:68,tocIndex:20},{value:"number",paraId:68,tocIndex:20},{value:" | ",paraId:68,tocIndex:20},{value:"(datum, index, data)=> number",paraId:68,tocIndex:20},{value:"-",paraId:68,tocIndex:20},{value:"gridShadowOffsetY",paraId:68,tocIndex:20},{value:"Grid line shadow vertical offset",paraId:68,tocIndex:20},{value:"number",paraId:68,tocIndex:20},{value:" | ",paraId:68,tocIndex:20},{value:"(datum, index, data)=> number",paraId:68,tocIndex:20},{value:"-",paraId:68,tocIndex:20},{value:"gridCursor",paraId:68,tocIndex:20},{value:"Grid line cursor style",paraId:68,tocIndex:20},{value:"string",paraId:68,tocIndex:20},{value:" | ",paraId:68,tocIndex:20},{value:"(datum, index, data)=> string",paraId:68,tocIndex:20},{value:"default",paraId:68,tocIndex:20},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  width: 600,\n  height: 400,\n  data: [\n    { month: 'Jan', sales: 2000 },\n    { month: 'Feb', sales: 1500 },\n    { month: 'Mar', sales: 3000 },\n    { month: 'Apr', sales: 2500 },\n    { month: 'May', sales: 4000 },\n    { month: 'Jun', sales: 3500 },\n  ],\n  encode: { x: 'month', y: 'sales', color: 'month' },\n  axis: {\n    y: {\n      title: 'Sales (10k)',\n      // Show basic grid lines\n      grid: true,\n      gridStroke: '#e6e6e6', // Grid line color\n      gridLineWidth: 2, // Grid line width\n      gridStrokeOpacity: 0.7, // Grid line opacity\n      gridLineDash: [0, 0],\n    },\n    x: {\n      title: 'Month',\n      // X-axis usually doesn't need grid lines\n      grid: false,\n    },\n  },\n});\nchart.render();\n",paraId:69,tocIndex:22},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  width: 600,\n  height: 400,\n  data: [\n    { time: '9:00', temperature: 18 },\n    { time: '12:00', temperature: 24 },\n    { time: '15:00', temperature: 28 },\n    { time: '18:00', temperature: 22 },\n    { time: '21:00', temperature: 20 },\n  ],\n  encode: { x: 'time', y: 'temperature' },\n  style: { stroke: '#5B8FF9', lineWidth: 2 },\n  axis: {\n    y: {\n      title: 'Temperature (°C)',\n      grid: true,\n      gridStroke: '#d9d9d9',\n      gridLineDash: [4, 4], // Dash configuration: 4px solid, 4px gap\n      gridStrokeOpacity: 0.8,\n    },\n    x: {\n      title: 'Time',\n      grid: true,\n      gridStroke: '#f0f0f0',\n      gridLineDash: [2, 2], // Finer dashes\n      gridStrokeOpacity: 0.6,\n    },\n  },\n});\nchart.render();\n",paraId:70,tocIndex:23},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  width: 600,\n  height: 400,\n  data: [\n    { product: 'Product A', sales: 120 },\n    { product: 'Product B', sales: 200 },\n    { product: 'Product C', sales: 150 },\n    { product: 'Product D', sales: 300 },\n    { product: 'Product E', sales: 250 },\n  ],\n  encode: { x: 'product', y: 'sales', color: 'product' },\n  axis: {\n    y: {\n      title: 'Sales (units)',\n      grid: true,\n      gridStroke: '#e8e8e8',\n      gridLineWidth: 1,\n      gridAreaFill: ['#fafafa', '#ffffff'], // Alternating fill colors\n      gridOpacity: 0.9,\n    },\n    x: {\n      title: 'Product Type',\n      grid: false,\n    },\n  },\n});\nchart.render();\n",paraId:71,tocIndex:24},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  width: 600,\n  height: 400,\n  data: [\n    { quarter: 'Q1', revenue: 100, expense: 80 },\n    { quarter: 'Q2', revenue: 120, expense: 90 },\n    { quarter: 'Q3', revenue: 150, expense: 110 },\n    { quarter: 'Q4', revenue: 180, expense: 140 },\n  ],\n  encode: { x: 'quarter', y: 'revenue' },\n  style: { fillOpacity: 0.6 },\n  axis: {\n    y: {\n      title: 'Amount (10k)',\n      grid: true,\n      gridStroke: '#cccccc',\n      gridLineWidth: 1,\n      // Show only even-indexed grid lines\n      gridFilter: (datum, index) => index % 2 === 0,\n      gridStrokeOpacity: 0.8,\n    },\n    x: {\n      title: 'Quarter',\n      grid: true,\n      gridStroke: '#e6e6e6',\n      gridLineDash: [3, 3],\n      gridStrokeOpacity: 0.5,\n    },\n  },\n});\nchart.render();\n",paraId:72,tocIndex:25},{value:"{\n  breaks: [\n    {\n      start: 5000,\n      end: 50000,\n      gap: '3%',\n    }\n  ]\n}\n",paraId:73,tocIndex:26},{value:"Property",paraId:74,tocIndex:26},{value:"Description",paraId:74,tocIndex:26},{value:"Type",paraId:74,tocIndex:26},{value:"Default Value",paraId:74,tocIndex:26},{value:"Required",paraId:74,tocIndex:26},{value:"start",paraId:74,tocIndex:26},{value:"Axis break start value",paraId:74,tocIndex:26},{value:"number",paraId:74,tocIndex:26},{value:"-",paraId:74,tocIndex:26},{value:"end",paraId:74,tocIndex:26},{value:"Axis break end value",paraId:74,tocIndex:26},{value:"number",paraId:74,tocIndex:26},{value:"-",paraId:74,tocIndex:26},{value:"gap",paraId:74,tocIndex:26},{value:"Proportion of the axis break interval in the main axis direction, supporting two types: 0 ~ 1 (decimal) and percentage",paraId:74,tocIndex:26},{value:"number",paraId:74,tocIndex:26},{value:" | string",paraId:74,tocIndex:26},{value:"-",paraId:74,tocIndex:26},{value:"vertices",paraId:74,tocIndex:26},{value:"Number of undulating vertices for the axis break",paraId:74,tocIndex:26},{value:"number",paraId:74,tocIndex:26},{value:"50",paraId:74,tocIndex:26},{value:"verticeOffset",paraId:74,tocIndex:26},{value:"Amplitude of the axis break undulation",paraId:74,tocIndex:26},{value:"number",paraId:74,tocIndex:26},{value:"3",paraId:74,tocIndex:26},{value:"compress",paraId:74,tocIndex:26},{value:"Axis break compression mode, ",paraId:74,tocIndex:26},{value:"middle",paraId:74,tocIndex:26},{value:": Compress at the center, ",paraId:74,tocIndex:26},{value:"start",paraId:74,tocIndex:26},{value:": Compress near the start value, ",paraId:74,tocIndex:26},{value:"end",paraId:74,tocIndex:26},{value:": Compress near the end value",paraId:74,tocIndex:26},{value:"middle",paraId:74,tocIndex:26},{value:" | ",paraId:74,tocIndex:26},{value:"start",paraId:74,tocIndex:26},{value:" | ",paraId:74,tocIndex:26},{value:"end",paraId:74,tocIndex:26},{value:"middle",paraId:74,tocIndex:26},{value:"stroke",paraId:74,tocIndex:26},{value:"Axis break stroke color",paraId:74,tocIndex:26},{value:"string",paraId:74,tocIndex:26},{value:"#fff",paraId:74,tocIndex:26},{value:"fill",paraId:74,tocIndex:26},{value:"Axis break fill color",paraId:74,tocIndex:26},{value:"string",paraId:74,tocIndex:26},{value:"#aaa",paraId:74,tocIndex:26},{value:"lineDash",paraId:74,tocIndex:26},{value:"Dashed line style for the axis break stroke",paraId:74,tocIndex:26},{value:"string",paraId:74,tocIndex:26},{value:"2 2",paraId:74,tocIndex:26},{value:"For more configurations, refer to the basic drawing properties of canvas.",paraId:75,tocIndex:26},{value:"Supports setting animation effects for updates",paraId:76,tocIndex:27},{value:"Property",paraId:77,tocIndex:27},{value:"Description",paraId:77,tocIndex:27},{value:"Type",paraId:77,tocIndex:27},{value:"Default Value",paraId:77,tocIndex:27},{value:"Required",paraId:77,tocIndex:27},{value:"animate",paraId:77,tocIndex:27},{value:"Whether to enable animation",paraId:77,tocIndex:27},{value:"boolean",paraId:77,tocIndex:27},{value:" | ",paraId:77,tocIndex:27},{value:"EffectTiming",paraId:77,tocIndex:27},{value:"-",paraId:77,tocIndex:27},{value:"EffectTiming supports the following configurable properties:",paraId:78,tocIndex:27},{value:"Property",paraId:79,tocIndex:27},{value:"Description",paraId:79,tocIndex:27},{value:"Type",paraId:79,tocIndex:27},{value:"Default Value",paraId:79,tocIndex:27},{value:"Required",paraId:79,tocIndex:27},{value:"delay",paraId:79,tocIndex:27},{value:"Delay execution time (ms)",paraId:79,tocIndex:27},{value:"number",paraId:79,tocIndex:27},{value:"-",paraId:79,tocIndex:27},{value:"duration",paraId:79,tocIndex:27},{value:"Animation duration (ms)",paraId:79,tocIndex:27},{value:"number",paraId:79,tocIndex:27},{value:"-",paraId:79,tocIndex:27},{value:"easing",paraId:79,tocIndex:27},{value:"Animation easing function",paraId:79,tocIndex:27},{value:"Easing",paraId:79,tocIndex:27},{value:"-",paraId:79,tocIndex:27},{value:"endDelay",paraId:79,tocIndex:27},{value:"End delay execution time (ms)",paraId:79,tocIndex:27},{value:"number",paraId:79,tocIndex:27},{value:"-",paraId:79,tocIndex:27},{value:"fill",paraId:79,tocIndex:27},{value:"Animation display effect when not running",paraId:79,tocIndex:27},{value:"Fill",paraId:79,tocIndex:27},{value:"-",paraId:79,tocIndex:27},{value:"The axis component itself has no specific event types.",paraId:80,tocIndex:28},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval', // Set chart type to bar chart\n  marginTop: 40, // Set chart top margin in pixels\n  data: [\n    { id: 1, label: 'X Axis Label 1', value: 200 },\n    { id: 3, label: 'X Axis Label 2', value: 300 },\n    { id: 4, label: 'X Axis Label 3', value: 400 },\n    { id: 5, label: 'X Axis Label 4', value: 500 },\n    { id: 6, label: 'X Axis Label 5', value: 600 },\n    { id: 7, label: 'X Axis Label 6', value: 700 },\n  ],\n  // Set data encoding\n  encode: { x: 'label', y: 'value' },\n  axis: {\n    // Configure x axis\n    x: {\n      position: 'bottom', // Set axis position\n\n      // Axis title configuration\n      title: 'X Axis Title', // Axis title content\n      titleFontWeight: 500, // Title font weight\n      titleSpacing: 15, // Distance from title to axis\n      titlePosition: 'bottom', // Title position relative to axis\n      titleFontSize: 14, // Title font size\n      titleFill: '#333', // Title fill color\n\n      // Grid line configuration\n      grid: true, // Whether to show grid lines\n      gridLineWidth: 2, // Grid line stroke width\n      gridStroke: '#f0f0f0', // Grid line stroke color\n      gridStrokeOpacity: 0.8, // Grid line stroke opacity\n      gridLineDash: [3, 3], // Grid line stroke dash configuration\n      gridOpacity: 0.9, // Grid line overall opacity\n      gridAreaFill: ['#fafafa', '#ffffff'], // Grid area fill color\n      gridFilter: (_, i) => i % 2 === 0, // Grid line filtering\n\n      // Axis line configuration\n      line: true, // Whether to show axis line\n      lineLineWidth: 5, // Axis line stroke width\n      lineStroke: '#f50', // Axis line stroke color\n      arrow: true, // Whether to show arrow\n      lineArrowOffset: 8, // Arrow offset length\n\n      // Axis tick configuration\n      tick: true, // Whether to show ticks\n      tickCount: 8, // Set recommended number of ticks to generate\n      tickLineWidth: 5, // Tick stroke width\n      tickLength: 10, // Tick length\n      tickStroke: '#3366ff', // Tick stroke color\n      tickDirection: 'positive', // Tick direction\n      tickStrokeOpacity: 0.8, // Tick stroke opacity\n\n      // Axis label configuration\n      label: true, // Whether to show tick labels\n      labelFontSize: 12, // Label font size\n      labelFill: '#009900', // Label fill color\n      labelFontWeight: 500, // Label font weight\n      labelFontFamily: 'Arial', // Label font family\n      labelTextAlign: 'center', // Label text horizontal alignment\n      labelTextBaseline: 'middle', // Label text vertical baseline\n      labelAlign: 'horizontal', // Label alignment\n      labelDirection: 'positive', // Label position relative to axis line\n      labelSpacing: 5, // Spacing between label and its corresponding tick\n      labelFillOpacity: 0.9, // Label fill opacity\n      labelStroke: '#ffffff', // Label stroke color\n      labelStrokeOpacity: 0.5, // Label stroke opacity\n      labelLineWidth: 1, // Label stroke width\n      labelOpacity: 1, // Label overall opacity\n      labelDx: 2, // Label horizontal offset\n      labelDy: 0, // Label vertical offset\n      labelCursor: 'pointer', // Label cursor style\n    },\n    // Configure y axis\n    y: {\n      position: 'left', // Set axis position\n\n      // Axis title configuration\n      title: 'Y Axis Title', // Axis title content\n      titleFontWeight: 500, // Title font weight\n      titleSpacing: 20, // Distance from title to axis\n      titlePosition: 'left', // Title position relative to axis\n      titleFontSize: 14, // Title font size\n      titleFill: '#333', // Title fill color\n\n      // Grid line configuration\n      grid: true, // Whether to show grid lines\n      gridLineWidth: 2, // Grid line stroke width\n      gridStroke: '#e6e6e6', // Grid line stroke color\n      gridStrokeOpacity: 0.7, // Grid line stroke opacity\n      gridLineDash: [5, 5], // Grid line stroke dash configuration\n      gridOpacity: 0.8, // Grid line overall opacity\n\n      // Axis line configuration\n      line: true, // Whether to show axis line\n      lineLineWidth: 5, // Axis line stroke width\n      lineStroke: '#f50', // Axis line stroke color\n      arrow: false, // Whether to show arrow\n      lineOpacity: 1, // Axis line overall opacity\n\n      // Axis tick configuration\n      tick: true, // Whether to show ticks\n      tickCount: 8, // Set recommended number of ticks to generate\n      tickLineWidth: 5, // Tick stroke width\n      tickLength: 10, // Tick length\n      tickStroke: '#3366ff', // Tick stroke color\n      tickDirection: 'negative', // Tick direction\n      tickStrokeOpacity: 0.8, // Tick stroke opacity\n\n      // Axis label configuration\n      label: true, // Whether to show tick labels\n      labelFontSize: 12, // Label font size\n      labelFill: '#009900', // Label fill color\n      labelFontWeight: 500, // Label font weight\n      labelFontFamily: 'Helvetica', // Label font family\n      labelTextAlign: 'right', // Label text horizontal alignment\n      labelTextBaseline: 'middle', // Label text vertical baseline\n      labelAlign: 'perpendicular', // Label alignment\n      labelSpacing: 8, // Spacing between label and its corresponding tick\n      labelLineHeight: 1.2, // Label line height\n      labelFormatter: (d) => `${d}万`, // Label formatting\n    },\n  },\n});\n\nchart.render();\n",paraId:81,tocIndex:29},{value:"For more examples, please visit the ",paraId:82,tocIndex:29},{value:"Chart Examples - Axis",paraId:83,tocIndex:29},{value:" page.",paraId:82,tocIndex:29},{value:"Financial data requires precise price display and concise time axis, commonly used for stock prices, fund values, and other scenarios:",paraId:84,tocIndex:31},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  width: 600,\n  height: 400,\n  data: [\n    { date: '2024-01-01', price: 23.45, volume: 120000 },\n    { date: '2024-01-02', price: 24.12, volume: 150000 },\n    { date: '2024-01-03', price: 23.89, volume: 98000 },\n    { date: '2024-01-04', price: 25.3, volume: 200000 },\n    { date: '2024-01-05', price: 24.78, volume: 175000 },\n    { date: '2024-01-08', price: 26.15, volume: 220000 },\n  ],\n  encode: { x: 'date', y: 'price' },\n  style: { stroke: '#ff6b35', lineWidth: 2 },\n  axis: {\n    x: {\n      title: 'Trading Date',\n      // Time formatting requires custom function\n      labelFormatter: (d) => {\n        const date = new Date(d);\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const day = String(date.getDate()).padStart(2, '0');\n        return `${month}-${day}`;\n      },\n      labelFontSize: 11,\n    },\n    y: {\n      title: 'Stock Price ($)',\n      // Using d3-format: fixed 2 decimals\n      labelFormatter: '.2f', // Equivalent to d.toFixed(2)\n      grid: true,\n      gridStroke: '#f5f5f5',\n      tickCount: 6,\n    },\n  },\n});\nchart.render();\n",paraId:85,tocIndex:31},{value:"D3-format vs Custom Function Comparison:",paraId:86,tocIndex:31},{value:"// ✅ D3-format (recommended for standard number formats)\nlabelFormatter: '.2f'; // Fixed 2 decimals: 23.45\nlabelFormatter: '.1%'; // Percentage: 23.4%\nlabelFormatter: '$,.2f'; // Currency format: $1,234.56\n\n// ✅ Custom function (complex logic, special requirements)\nlabelFormatter: (d) => `$${d.toFixed(2)}`; // Dollar symbol\nlabelFormatter: (d) => {\n  /* Complex business logic */\n};\n",paraId:87,tocIndex:31},{value:"Sales data usually involves large amounts, requiring automatic conversion to appropriate units for display. Compare d3-format and custom function applications:",paraId:88,tocIndex:32},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  width: 600,\n  height: 400,\n  data: [\n    { category: 'Electronics', sales: 8500000 },\n    { category: 'Clothing', sales: 12300000 },\n    { category: 'Home & Garden', sales: 6800000 },\n    { category: 'Beauty', sales: 15600000 },\n    { category: 'Food & Beverage', sales: 9200000 },\n  ],\n  encode: { x: 'category', y: 'sales', color: 'category' },\n  axis: {\n    x: {\n      title: 'Product Category',\n      labelFontSize: 12,\n    },\n    y: {\n      title: 'Sales',\n      // Using d3-format: SI prefix format, automatic K/M units\n      labelFormatter: '~s', // 8.5M, 12.3M, 6.8M, 15.6M, 9.2M\n      grid: true,\n      gridStroke: '#e8e8e8',\n      tickCount: 5,\n    },\n  },\n});\nchart.render();\n",paraId:89,tocIndex:33},{value:"import { Chart } from '@antv/g2';\n\nconst chart2 = new Chart({\n  container: 'container',\n});\n\nchart2.options({\n  type: 'interval',\n  width: 600,\n  height: 400,\n  data: [\n    { category: 'Electronics', sales: 8500000 },\n    { category: 'Clothing', sales: 12300000 },\n    { category: 'Home & Garden', sales: 6800000 },\n    { category: 'Beauty', sales: 15600000 },\n    { category: 'Food & Beverage', sales: 9200000 },\n  ],\n  encode: { x: 'category', y: 'sales', color: 'category' },\n  axis: {\n    x: {\n      title: 'Product Category',\n      labelFontSize: 12,\n    },\n    y: {\n      title: 'Sales',\n      // Custom localized unit format\n      labelFormatter: (value) => {\n        if (value >= 1000000) {\n          return `${(value / 1000000).toFixed(1)}M`;\n        } else if (value >= 1000) {\n          return `${(value / 1000).toFixed(0)}K`;\n        } else {\n          return value.toString();\n        }\n      },\n      grid: true,\n      gridStroke: '#e8e8e8',\n      tickCount: 5,\n    },\n  },\n});\nchart2.render();\n",paraId:90,tocIndex:34},{value:"User data typically uses international standard K, M units, D3-format provides a concise implementation:",paraId:91,tocIndex:35},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  width: 600,\n  height: 400,\n  data: [\n    { quarter: '2023 Q1', users: 125000 },\n    { quarter: '2023 Q2', users: 158000 },\n    { quarter: '2023 Q3', users: 234000 },\n    { quarter: '2023 Q4', users: 312000 },\n    { quarter: '2024 Q1', users: 425000 },\n    { quarter: '2024 Q2', users: 586000 },\n  ],\n  encode: { x: 'quarter', y: 'users' },\n  style: {\n    fill: 'linear-gradient(270deg, #667eea 0%, #764ba2 100%)',\n    fillOpacity: 0.6,\n  },\n  axis: {\n    x: {\n      title: 'Quarter',\n      // Time string processing requires custom function\n      labelFormatter: (d) => {\n        return d.replace('2023 ', '').replace('2024 ', '24');\n      },\n      labelFontSize: 11,\n    },\n    y: {\n      title: 'User Count',\n      // Using d3-format: International standard K/M format\n      labelFormatter: '.0s', // 125k, 158k, 234k, 312k, 425k, 586k\n      grid: true,\n      gridStroke: '#f0f0f0',\n      gridLineDash: [3, 3],\n      tickCount: 6,\n    },\n  },\n});\nchart.render();\n",paraId:92,tocIndex:35},{value:"In real business scenarios, you often encounter problems with axis labels being too long, causing overlap or exceeding display bounds. G2 provides four core solutions, each with its optimal use cases:",paraId:93,tocIndex:36},{value:"Solution",paraId:94,tocIndex:37},{value:"Use Case",paraId:94,tocIndex:37},{value:"Advantages",paraId:94,tocIndex:37},{value:"Disadvantages",paraId:94,tocIndex:37},{value:"Recommended Business Scenarios",paraId:94,tocIndex:37},{value:"Ellipsis",paraId:94,tocIndex:37},{value:"Varying text lengths, users can get full info elsewhere",paraId:94,tocIndex:37},{value:"Maintains tidiness, stable layout",paraId:94,tocIndex:37},{value:"Information loss",paraId:94,tocIndex:37},{value:"Product names, user IDs, filenames",paraId:94,tocIndex:37},{value:"Rotation",paraId:94,tocIndex:37},{value:"Similar text lengths, sufficient space",paraId:94,tocIndex:37},{value:"Preserves complete info, clear visual",paraId:94,tocIndex:37},{value:"Needs more vertical space, slightly worse readability",paraId:94,tocIndex:37},{value:"Dates/times, region names, category labels",paraId:94,tocIndex:37},{value:"Wrap",paraId:94,tocIndex:37},{value:"Medium-length text, sufficient vertical space",paraId:94,tocIndex:37},{value:"Preserves complete info, easy to read",paraId:94,tocIndex:37},{value:"Takes more vertical space",paraId:94,tocIndex:37},{value:"Product descriptions, department names",paraId:94,tocIndex:37},{value:"Hide",paraId:94,tocIndex:37},{value:"High label density, focus on trends",paraId:94,tocIndex:37},{value:"Resolves overlap, keeps key points",paraId:94,tocIndex:37},{value:"Information missing",paraId:94,tocIndex:37},{value:"Time series, big data visualization",paraId:94,tocIndex:37},{value:'E-commerce platforms need to display bestselling products, with product names varying from "iPhone" to "Apple iPhone 15 Pro Max 1TB Space Black":',paraId:95,tocIndex:38},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  width: 650, // Reduce width to trigger ellipsis\n  data: [\n    { product: 'iPhone 15 Pro Max', sales: 2500 },\n    { product: 'Samsung Galaxy S24 Ultra 512GB Phantom Black Edition', sales: 1800 },\n    {\n      product: 'Apple MacBook Pro 16-inch M3 Max chip 1TB Space Gray',\n      sales: 1200,\n    },\n    { product: 'Sony WH-1000XM5 Wireless Noise Canceling Headphones Midnight Black', sales: 3200 },\n    { product: 'Xiaomi 14 Ultra Photography Kit 16GB+1TB White Limited Edition', sales: 2100 },\n    { product: 'iPad Pro 12.9-inch M2 chip 1TB WiFi Space Gray', sales: 1600 },\n    { product: 'MacBook Air 15-inch M2 chip 512GB Starlight', sales: 1400 },\n    { product: 'AirPods Pro 2nd Generation Active Noise Cancellation Wireless Earbuds', sales: 2800 },\n  ],\n  encode: { x: 'product', y: 'sales', color: 'product' },\n  axis: {\n    x: {\n      title: 'Bestselling Products',\n      labelFontSize: 11,\n      // Ellipsis solution: suitable for product name scenarios\n      size: 100,\n      transform: [\n        {\n          type: 'ellipsis',\n          suffix: '...', // Ellipsis symbol\n        },\n      ],\n    },\n    y: {\n      title: 'Sales (Units)',\n      labelFormatter: ',.0f', // Thousands separator format\n      grid: true,\n      gridStroke: '#f0f0f0',\n    },\n  },\n  tooltip: {\n    // Show full product name on hover\n    title: (d) => d.product,\n    items: [{ field: 'sales', name: 'Sales', formatter: ',.0f' }],\n  },\n});\nchart.render();\n",paraId:96,tocIndex:38},{value:"Features",paraId:97,tocIndex:38},{value:"Maintains chart tidiness, avoids product name overlap",paraId:98,tocIndex:38},{value:"Users can view full product names through tooltip",paraId:98,tocIndex:38},{value:"Suitable for scenarios with greatly varying product name lengths",paraId:98,tocIndex:38},{value:'Need to display hourly user activity, time labels need to show "YYYY-MM-DD HH:mm" format:',paraId:99,tocIndex:39},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  width: 600, // Reduce width to trigger rotation\n  marginBottom: 30, // Reserve space for rotation\n  data: [\n    { time: '2024-01-15 08:00', activeUsers: 1200 },\n    { time: '2024-01-15 09:00', activeUsers: 1800 },\n    { time: '2024-01-15 10:00', activeUsers: 2800 },\n    { time: '2024-01-15 11:00', activeUsers: 3200 },\n    { time: '2024-01-15 12:00', activeUsers: 4500 },\n    { time: '2024-01-15 13:00', activeUsers: 4200 },\n    { time: '2024-01-15 14:00', activeUsers: 3200 },\n    { time: '2024-01-15 15:00', activeUsers: 3600 },\n    { time: '2024-01-15 16:00', activeUsers: 3800 },\n    { time: '2024-01-15 17:00', activeUsers: 4800 },\n    { time: '2024-01-15 18:00', activeUsers: 5200 },\n    { time: '2024-01-15 19:00', activeUsers: 4800 },\n    { time: '2024-01-15 20:00', activeUsers: 4100 },\n    { time: '2024-01-15 21:00', activeUsers: 3500 },\n    { time: '2024-01-15 22:00', activeUsers: 2600 },\n    { time: '2024-01-15 23:00', activeUsers: 1900 },\n  ],\n  encode: { x: 'time', y: 'activeUsers' },\n  style: { stroke: '#5B8FF9', lineWidth: 2 },\n  axis: {\n    x: {\n      title: 'Time',\n      labelFontSize: 10,\n      // Rotation solution: suitable for time labels\n      size: 100,\n      transform: [\n        {\n          type: 'rotate',\n          optionalAngles: [0, 30, 45, 60, 90], // Try multiple angles\n          recoverWhenFailed: true, // Recover to default angle when failed\n        },\n      ],\n    },\n    y: {\n      title: 'Active Users',\n      labelFormatter: ',.0f',\n      grid: true,\n      gridStroke: '#e6e6e6',\n      gridLineDash: [3, 3],\n    },\n  },\n});\nchart.render();\n",paraId:100,tocIndex:39},{value:"Features",paraId:101,tocIndex:39},{value:"Preserves complete time information for precise analysis",paraId:102,tocIndex:39},{value:"Automatically selects best rotation angle to avoid overlap",paraId:102,tocIndex:39},{value:"Suitable for time series, region names, and other fixed format labels",paraId:102,tocIndex:39},{value:"Display quarterly performance by department, department names are medium length and need to be shown completely:",paraId:103,tocIndex:40},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  width: 800,\n  data: [\n    { department: 'Marketing Department', score: 85 },\n    { department: 'Product Development Center', score: 92 },\n    { department: 'Customer Service Department', score: 78 },\n    { department: 'Human Resources Management', score: 81 },\n    { department: 'Finance and Audit Department', score: 89 },\n    { department: 'Strategic Planning Center', score: 87 },\n  ],\n  encode: { x: 'department', y: 'score', color: 'department' },\n  axis: {\n    x: {\n      title: 'Department',\n      labelFontSize: 12,\n      // Wrap solution: suitable for department names\n      size: 100,\n      transform: [\n        {\n          type: 'wrap',\n          wordWrapWidth: 80, // Maximum 80 pixels per line\n          maxLines: 2, // Maximum 2 lines\n          recoverWhenFailed: true, // Recover to default layout when wrap fails\n        },\n      ],\n    },\n    y: {\n      title: 'Performance Score',\n      grid: true,\n      gridStroke: '#f5f5f5',\n      domain: [0, 100],\n    },\n  },\n});\nchart.render();\n",paraId:104,tocIndex:40},{value:"Features",paraId:105,tocIndex:40},{value:"Preserves complete department names for accurate identification",paraId:106,tocIndex:40},{value:"Wrap layout maintains good readability",paraId:106,tocIndex:40},{value:"Suitable for medium-length label text",paraId:106,tocIndex:40},{value:"Display continuous trading day stock price trends, dense data points, focus on trends rather than specific dates:",paraId:107,tocIndex:41},{value:"import { Chart } from '@antv/g2';\n\n// Generate mock stock data\nconst generateStockData = () => {\n  const data = [];\n  let price = 100;\n  const startDate = new Date('2024-01-01');\n\n  for (let i = 0; i < 90; i++) {\n    // Increase to 90 data points\n    const currentDate = new Date(startDate);\n    currentDate.setDate(startDate.getDate() + i);\n\n    // Random price fluctuation\n    price += (Math.random() - 0.5) * 4;\n    price = Math.max(80, Math.min(120, price)); // Limit to 80-120 range\n\n    data.push({\n      date: currentDate.toISOString().split('T')[0],\n      price: Math.round(price * 100) / 100,\n    });\n  }\n  return data;\n};\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  width: 700, // Reduce width to increase density\n  marginRight: 30, // Reserve space for keeping the last tick value\n  data: generateStockData(),\n  encode: { x: 'date', y: 'price' },\n  style: { stroke: '#722ed1', lineWidth: 1.5 },\n  axis: {\n    x: {\n      title: 'Trading Date',\n      labelFontSize: 9,\n      // Hide solution: suitable for dense data\n      size: 100,\n      transform: [\n        {\n          type: 'hide',\n          keepHeader: true, // Keep first date\n          keepTail: true, // Keep last date\n        },\n      ],\n    },\n    y: {\n      title: 'Stock Price ($)',\n      labelFormatter: '.2f',\n      grid: true,\n      gridStroke: '#f0f0f0',\n      gridLineDash: [2, 2],\n    },\n  },\n});\nchart.render();\n",paraId:108,tocIndex:41},{value:"Features",paraId:109,tocIndex:41},{value:"Solves label overlap problem with dense data points",paraId:110,tocIndex:41},{value:"Preserves key time nodes at beginning and end",paraId:110,tocIndex:41},{value:"Emphasizes data trends rather than specific values",paraId:110,tocIndex:41},{value:"For simple scenarios, it's recommended to use ",paraId:111,tocIndex:42},{value:"labelAutoXXX",paraId:111,tocIndex:42},{value:" series properties:",paraId:111,tocIndex:42},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  width: 650, // Reduce width to trigger transformation effects\n  marginBottom: 50, // Reserve space for multiple transformations\n  marginRight: 100,\n  data: [\n    { region: 'Beijing Chaoyang CBD Core Financial Center', revenue: 8500 },\n    { region: 'Shanghai Pudong Lujiazui Financial Trade Zone HQ Base', revenue: 9200 },\n    { region: 'Shenzhen Nanshan High-tech Industrial Park', revenue: 7800 },\n    { region: 'Guangzhou Tianhe Zhujiang New Town International Business Center', revenue: 6900 },\n    { region: 'Hangzhou Xihu Internet Innovation Industrial Park', revenue: 5600 },\n    { region: 'Chengdu High-tech Software Industrial Park Tech Innovation Zone', revenue: 4800 },\n    { region: 'Suzhou Industrial Park Bio-Nano Science Park', revenue: 5200 },\n    { region: 'Nanjing Jiangning Future Tech City Innovation Base', revenue: 4500 },\n  ],\n  encode: { x: 'region', y: 'revenue', color: 'region' },\n  axis: {\n    x: {\n      title: 'Business Region',\n      labelFontSize: 10,\n      size: 100,\n      // Quick configuration, equivalent to transform array\n      labelAutoEllipsis: true, // Enable auto ellipsis\n      labelAutoRotate: true, // Enable auto rotation\n      labelAutoHide: true, // Enable auto hide\n      labelAutoWrap: true, // Enable auto wrap\n    },\n    y: {\n      title: 'Revenue (10K)',\n      labelFormatter: ',.0f',\n      grid: true,\n      gridStroke: '#e8e8e8',\n    },\n  },\n});\nchart.render();\n",paraId:112,tocIndex:42}]},54505:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(68378);const t=[{value:"In G2, ",paraId:0,tocIndex:0},{value:"Data Labels",paraId:0,tocIndex:0},{value:" are one of the means to add annotations to charts, providing content annotation for the current group of data. They include elements such as data points, connector lines, and text values, which are selected based on different chart types. Through concise text descriptions, they reduce misunderstandings, make charts easier to interpret, and emphasize key data or trends, guiding attention to important information.",paraId:0,tocIndex:0},{value:"Includes connector lines and text value elements, which are selected based on different chart types.",paraId:1,tocIndex:1},{value:"Among them, pie charts, donut charts, rose charts, etc., can use connector line elements to connect label text elements and mark graphics.",paraId:2,tocIndex:1},{value:"chart.options({\n  type: 'interval',\n  labels: [\n    { text: 'genre' }, // Specify the bound field\n    {\n      text: 'sold', // Specify the bound field\n      fill: '#fff', // Specify style\n    },\n  ],\n});\n",paraId:3,tocIndex:3},{value:"You can configure ",paraId:4,tocIndex:4},{value:"labelTransform",paraId:4,tocIndex:4},{value:" at the ",paraId:4,tocIndex:4},{value:"view",paraId:4,tocIndex:4},{value:" level to declare label transformations",paraId:4,tocIndex:4},{value:"API approach",paraId:5,tocIndex:4},{value:"// First method\nchart\n  .labelTransform({ type: 'overlapHide' })\n  .labelTransform({ type: 'contrastReverse' });\n\n// Second method\nchart.labelTransform([{ type: 'overlapHide' }, { type: 'contrastReverse' }]);\n",paraId:6,tocIndex:4},{value:"Spec configuration",paraId:7,tocIndex:4},{value:"({\n  type: 'view',\n  labelTransform: [{ type: 'overlapHide' }, { type: 'contrastReverse' }],\n});\n",paraId:8,tocIndex:4},{value:"Each mark can have multiple labels. Here's a simple example:",paraId:9,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  height: 300,\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold' },\n  labels: [\n    { text: 'genre', style: { dy: -15 } },\n    { text: 'sold', style: { fill: '#fff', dy: 5 } },\n  ],\n});\n\nchart.render();\n",paraId:10,tocIndex:5},{value:"Property",paraId:11,tocIndex:6},{value:"Description",paraId:11,tocIndex:6},{value:"Type",paraId:11,tocIndex:6},{value:"Default Value",paraId:11,tocIndex:6},{value:"Required",paraId:11,tocIndex:6},{value:"dx",paraId:11,tocIndex:6},{value:"Label text horizontal offset, can also be configured through style.dx",paraId:11,tocIndex:6},{value:"number",paraId:11,tocIndex:6},{value:"0",paraId:11,tocIndex:6},{value:"dy",paraId:11,tocIndex:6},{value:"Label text vertical offset, can also be configured through style.dy",paraId:11,tocIndex:6},{value:"number",paraId:11,tocIndex:6},{value:"0",paraId:11,tocIndex:6},{value:"offset",paraId:11,tocIndex:6},{value:"Label offset distance, can also be configured through style.offset",paraId:11,tocIndex:6},{value:"number",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"text",paraId:11,tocIndex:6},{value:"Label data channel, similar to mark's ",paraId:11,tocIndex:6},{value:"x",paraId:11,tocIndex:6},{value:" channel, corresponds to text element, can use callback to customize ",paraId:11,tocIndex:6},{value:"string",paraId:11,tocIndex:6},{value:" text",paraId:11,tocIndex:6},{value:"string | Function",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"innerHTML",paraId:11,tocIndex:6},{value:"Similar to ",paraId:11,tocIndex:6},{value:"text",paraId:11,tocIndex:6},{value:" configuration, when both are configured, ",paraId:11,tocIndex:6},{value:"text",paraId:11,tocIndex:6},{value:" becomes ineffective, can use callback to customize ",paraId:11,tocIndex:6},{value:"string",paraId:11,tocIndex:6},{value:" text or ",paraId:11,tocIndex:6},{value:"HTMLElement",paraId:11,tocIndex:6},{value:" complex html",paraId:11,tocIndex:6},{value:"string | Function",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"formatter",paraId:11,tocIndex:6},{value:"Label text formatting",paraId:11,tocIndex:6},{value:"string",paraId:11,tocIndex:6},{value:" | ",paraId:11,tocIndex:6},{value:"Function<string>",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"render",paraId:11,tocIndex:6},{value:"Same configuration type as ",paraId:11,tocIndex:6},{value:"innerHTML",paraId:11,tocIndex:6},{value:"string | Function",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"selector",paraId:11,tocIndex:6},{value:"Label selector, can retain or hide labels",paraId:11,tocIndex:6},{value:"selector",paraId:12,tocIndex:6},{value:"{type: 'cartesian' }",paraId:11,tocIndex:6},{value:"transform",paraId:11,tocIndex:6},{value:"Label transformation, used to optimize label display, solving label overlap and color visibility issues",paraId:11,tocIndex:6},{value:"transform",paraId:13,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"position",paraId:11,tocIndex:6},{value:"Label position relative to graphics, not label direction",paraId:11,tocIndex:6},{value:"position",paraId:14,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"style",paraId:11,tocIndex:6},{value:"Label style configuration",paraId:11,tocIndex:6},{value:"style",paraId:15,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"background",paraId:11,tocIndex:6},{value:"Whether to show background color",paraId:11,tocIndex:6},{value:"boolean",paraId:11,tocIndex:6},{value:"See ",paraId:11,tocIndex:6},{value:"background",paraId:16,tocIndex:6},{value:"connector",paraId:11,tocIndex:6},{value:"Whether to show connector lines, used in non-Cartesian coordinate systems like pie and donut charts",paraId:11,tocIndex:6},{value:"boolean",paraId:11,tocIndex:6},{value:"See ",paraId:11,tocIndex:6},{value:"connector",paraId:17,tocIndex:6},{value:"label",paraId:18,tocIndex:7},{value:" text element content configuration",paraId:18,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  height: 340,\n  insetTop: 20,\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold' },\n  labels: [\n    { text: 'sold', style: { dy: -30 } }, // text maps to field sold\n    { text: ({ genre }) => genre, style: { dy: -20 } }, // text custom return string type\n    {\n      innerHTML: 'genre',\n      dx: 20,\n      dy: 10,\n      style: { fill: '#fff', color: '#333', fontSize: 10 },\n    }, // innerHTML maps to field genre Note: background color might be black sometimes, need to configure fill background color. color is text color, HTMLElement itself can also configure styles\n    {\n      // innerHTML custom return HTMLElement type data\n      innerHTML: ({ genre, sold }) =>\n        `<div style=\"padding:0 4px;border-radius: 10px;background: #f5f5f5;border: 2px solid #5ea9e6;font-size: 11px;\">${genre}:${sold}</div>`,\n      dx: 10,\n      dy: 50,\n      style: { fill: 'rgba(0,0,0,0)', color: '#333' },\n    },\n  ],\n});\n\nchart.render();\n",paraId:19,tocIndex:7},{value:"You can also try configuring HTMLElement with ",paraId:20,tocIndex:7},{value:"render",paraId:20,tocIndex:7},{value:", the parameters differ from innerHTML, but the return is consistent.",paraId:20,tocIndex:7},{value:"type RenderFunc = (text: string, datum: object, index: number, {channel: Record<string, Channel>}) => String | HTMLElement;\n",paraId:21,tocIndex:7},{value:"label",paraId:22,tocIndex:8},{value:" selector",paraId:22,tocIndex:8},{value:"For marks that correspond to multiple data items per graphic, we can use ",paraId:23,tocIndex:8},{value:"selector",paraId:23,tocIndex:8},{value:" to choose which marks to retain. Currently supported values are:",paraId:23,tocIndex:8},{value:"first",paraId:24,tocIndex:8},{value:" - First one",paraId:24,tocIndex:8},{value:"last",paraId:24,tocIndex:8},{value:" - Last one",paraId:24,tocIndex:8},{value:"function",paraId:24,tocIndex:8},{value:" - Custom selector",paraId:24,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  height: 300,\n  insetLeft: 40,\n  insetRight: 40,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/indices.json',\n  },\n  encode: { x: (d) => new Date(d.Date), y: 'Close', color: 'Symbol' },\n  scale: { y: { type: 'log' } },\n  axis: { y: { title: '↑ Change in price (%)' } },\n  labels: [\n    {\n      text: ({ Symbol }) => `first ${Symbol}`,\n      selector: 'first', // First in mark graphics\n      fontSize: 13,\n      style: { fill: 'blue', fontWeight: 600, dx: -50 },\n    },\n    {\n      text: ({ Symbol }) => `last ${Symbol}`,\n      selector: 'last', // Last in mark graphics\n      fontSize: 13,\n      style: { fill: 'red', fontWeight: 600 },\n    },\n    {\n      text: ({ Symbol }) => `custom ${Symbol}`,\n      selector: (v) => {\n        // Custom filtering, returns all label arrays containing coordinates and other info. Need to return this info, can filter and process.\n        return v.filter(({ bounds }) => {\n          const bound = bounds[0];\n          return (\n            // Filter labels in chart coordinates x:[200,200.5] y:[200,350]\n            bound[0] > 200 &&\n            bound[0] < 200.5 &&\n            bound[1] > 200 &&\n            bound[1] < 350\n          );\n        });\n      },\n      fontSize: 13,\n      style: { fill: '#ac1ce6', fontWeight: 600 },\n    },\n  ],\n});\n\nchart.render();\n",paraId:25,tocIndex:8},{value:"label",paraId:26,tocIndex:9},{value:" transformation",paraId:26,tocIndex:9},{value:"When label display doesn't meet expectations, such as overlapping or unclear colors, we can use ",paraId:27,tocIndex:9},{value:"Label Transform",paraId:27,tocIndex:9},{value:" to optimize label display. It can also be configured directly at the view level to process labels for the entire view.",paraId:27,tocIndex:9},{value:"Currently supported label transformations:",paraId:28,tocIndex:9},{value:"type",paraId:29,tocIndex:9},{value:"Description",paraId:29,tocIndex:9},{value:"overlapDodgeY",paraId:29,tocIndex:9},{value:"Adjusts overlapping labels in the y direction to prevent label overlap",paraId:29,tocIndex:9},{value:"contrastReverse",paraId:29,tocIndex:9},{value:"When label color has low contrast on graphic background, selects optimal contrast color from specified palette",paraId:29,tocIndex:9},{value:"overflowStroke",paraId:29,tocIndex:9},{value:"In case of overflow, select a color with the best contrast from the specified color palette to stroke",paraId:29,tocIndex:9},{value:"overflowHide",paraId:29,tocIndex:9},{value:"Hides labels when they don't fit on the graphic",paraId:29,tocIndex:9},{value:"overlapHide",paraId:29,tocIndex:9},{value:"Hides overlapping labels, by default keeps the first one and hides subsequent ones",paraId:29,tocIndex:9},{value:"exceedAdjust",paraId:29,tocIndex:9},{value:"Automatically detects and corrects label overflow, moving labels in reverse direction when they exceed view area",paraId:29,tocIndex:9},{value:"Different transformation types target different label issues. Understanding the differences between each ",paraId:30,tocIndex:9},{value:"transform",paraId:30,tocIndex:9},{value:" label transformation is essential.",paraId:30,tocIndex:9},{value:"Targets chaotic situations caused by crowded overlapping labels, adjusting overlapping labels in the y direction.",paraId:31,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  height: 300,\n  insetLeft: 40,\n  insetRight: 40,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/cb99c4ab-e0a3-4c76-9586-fe7fa2ff1a8c.csv',\n  },\n  encode: {\n    x: (d) => new Date(d.date).getFullYear(),\n    y: 'price',\n    color: 'symbol',\n  },\n  transform: [{ type: 'groupX', y: 'mean' }],\n  labels: [{ text: 'price' }],\n});\nchart.render();\n",paraId:32,tocIndex:11},{value:"overlapDodgeY",paraId:33},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  height: 300,\n  insetLeft: 40,\n  insetRight: 40,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/cb99c4ab-e0a3-4c76-9586-fe7fa2ff1a8c.csv',\n  },\n  encode: {\n    x: (d) => new Date(d.date).getFullYear(),\n    y: 'price',\n    color: 'symbol',\n  },\n  transform: [{ type: 'groupX', y: 'mean' }],\n  labels: [{ text: 'price', transform: [{ type: 'overlapDodgeY' }] }],\n});\n\nchart.render();\n",paraId:34,tocIndex:12},{value:"Property",paraId:35,tocIndex:12},{value:"Description",paraId:35,tocIndex:12},{value:"Type",paraId:35,tocIndex:12},{value:"Default",paraId:35,tocIndex:12},{value:"Required",paraId:35,tocIndex:12},{value:"maxIterations",paraId:35,tocIndex:12},{value:"Maximum number of iterations for position adjustment",paraId:35,tocIndex:12},{value:"number",paraId:35,tocIndex:12},{value:"10",paraId:35,tocIndex:12},{value:"padding",paraId:35,tocIndex:12},{value:"Expected spacing between labels after adjustment",paraId:35,tocIndex:12},{value:"number",paraId:35,tocIndex:12},{value:"1",paraId:35,tocIndex:12},{value:"maxError",paraId:35,tocIndex:12},{value:"Maximum error, the difference between actual spacing and expected spacing padding",paraId:35,tocIndex:12},{value:"number",paraId:35,tocIndex:12},{value:"0.1",paraId:35,tocIndex:12},{value:"contrastReverse",paraId:36,tocIndex:13},{value:" selects optimal contrast color from a specified palette when label color has low ",paraId:36,tocIndex:13},{value:"color contrast",paraId:36,tocIndex:13},{value:" on graphic background. Addresses issues where graphic color and ",paraId:36,tocIndex:13},{value:"label",paraId:36,tocIndex:13},{value:" color are similar, making labels hard to see, mostly occurring in multi-colored bar charts (mark interval) where colors vary and manual ",paraId:36,tocIndex:13},{value:"label",paraId:36,tocIndex:13},{value:" color changes are difficult.",paraId:36,tocIndex:13},{value:"When some graphic colors are close to label colors, visibility issues occur.",paraId:37,tocIndex:14},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  height: 300,\n  data: [\n    { genre: 'Sports', sold: 40 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  scale: {\n    color: { range: ['#ff0000', '#f0d2fc', '#2b00ff', '#ff8000', '#064501'] },\n  },\n  labels: [{ text: 'genre' }],\n});\n\nchart.render();\n",paraId:38,tocIndex:14},{value:"contrastReverse",paraId:33},{value:"Optimizes color for unclear ",paraId:39,tocIndex:15},{value:"label",paraId:39,tocIndex:15},{value:" text.",paraId:39,tocIndex:15},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  height: 300,\n  data: [\n    { genre: 'Sports', sold: 40 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  scale: {\n    color: { range: ['#ff0000', '#f0d2fc', '#2b00ff', '#ff8000', '#064501'] },\n  },\n  labels: [{ text: 'genre', transform: [{ type: 'contrastReverse' }] }],\n});\n\nchart.render();\n",paraId:40,tocIndex:15},{value:"Property",paraId:41,tocIndex:15},{value:"Description",paraId:41,tocIndex:15},{value:"Type",paraId:41,tocIndex:15},{value:"Default",paraId:41,tocIndex:15},{value:"Required",paraId:41,tocIndex:15},{value:"threshold",paraId:41,tocIndex:15},{value:"Color contrast threshold between label and background graphic, colors recommended above threshold",paraId:41,tocIndex:15},{value:"number",paraId:41,tocIndex:15},{value:"4.5",paraId:41,tocIndex:15},{value:"palette",paraId:41,tocIndex:15},{value:"Alternative color palette for contrast improvement algorithm",paraId:41,tocIndex:15},{value:"string[]",paraId:41,tocIndex:15},{value:"['#000', '#fff']",paraId:41,tocIndex:15},{value:"overflowStroke",paraId:42,tocIndex:16},{value:" selects an optimal contrast color from a specified palette to add stroke to the label. Similar to the principle of white text with black border, it addresses the issue where label color blends with the background when labels overflow elements, making them hard to read.",paraId:42,tocIndex:16},{value:"In the following example, the label color has good contrast with the graphic background, but readability becomes very poor when overflowing.",paraId:43,tocIndex:17},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  width: 200,\n  type: 'interval',\n  scale: {\n    color: { range: ['#222'] },\n  },\n  autoFit: true,\n  data: [\n    { letter: 'A', frequency: 8167 },\n    { letter: 'B', frequency: 1492 },\n    { letter: 'C', frequency: 2782 },\n    { letter: 'D', frequency: 4253 },\n    { letter: 'E', frequency: 2702 },\n    { letter: 'H', frequency: 6094 },\n    { letter: 'I', frequency: 2288 },\n  ],\n  encode: { x: 'letter', y: 'frequency', color: () => 'bar' },\n  labels: [\n    {\n      text: 'frequency',\n      transform: [\n        {\n          type: 'contrastReverse',\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:44,tocIndex:17},{value:"overflowStroke",paraId:33},{value:"Optimizes stroke for unclear ",paraId:45,tocIndex:18},{value:"label",paraId:45,tocIndex:18},{value:" text.",paraId:45,tocIndex:18},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  width: 200,\n  type: 'interval',\n  scale: {\n    color: { range: ['#222'] },\n  },\n  autoFit: true,\n  data: [\n    { letter: 'A', frequency: 8167 },\n    { letter: 'B', frequency: 1492 },\n    { letter: 'C', frequency: 2782 },\n    { letter: 'D', frequency: 4253 },\n    { letter: 'E', frequency: 2702 },\n    { letter: 'H', frequency: 6094 },\n    { letter: 'I', frequency: 2288 },\n  ],\n  encode: { x: 'letter', y: 'frequency', color: () => 'bar' },\n  labels: [\n    {\n      text: 'frequency',\n      transform: [\n        {\n          type: 'contrastReverse',\n        },\n        {\n          type: 'overflowStroke',\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:46,tocIndex:18},{value:"Property",paraId:47,tocIndex:18},{value:"Description",paraId:47,tocIndex:18},{value:"Type",paraId:47,tocIndex:18},{value:"Default",paraId:47,tocIndex:18},{value:"Required",paraId:47,tocIndex:18},{value:"threshold",paraId:47,tocIndex:18},{value:"Overflow threshold, the larger the threshold, the less likely it is to trigger",paraId:47,tocIndex:18},{value:"number",paraId:47,tocIndex:18},{value:"2",paraId:47,tocIndex:18},{value:"palette",paraId:47,tocIndex:18},{value:"Alternative color palette for contrast improvement algorithm",paraId:47,tocIndex:18},{value:"string[]",paraId:47,tocIndex:18},{value:"['#000', '#fff']",paraId:47,tocIndex:18},{value:"overflowHide",paraId:48,tocIndex:19},{value:" hides labels when they don't fit on the graphic. The difference from ",paraId:48,tocIndex:19},{value:"overlapDodgeY",paraId:48,tocIndex:19},{value:":",paraId:48,tocIndex:19},{value:"overlapDodgeY",paraId:49,tocIndex:19},{value:" addresses ",paraId:49,tocIndex:19},{value:"label",paraId:49,tocIndex:19},{value:" to ",paraId:49,tocIndex:19},{value:"label",paraId:49,tocIndex:19},{value:" overlap, multiple ",paraId:49,tocIndex:19},{value:"label",paraId:49,tocIndex:19},{value:" overlaps causing blur.",paraId:49,tocIndex:19},{value:"overflowHide",paraId:49,tocIndex:19},{value:" addresses ",paraId:49,tocIndex:19},{value:"label",paraId:49,tocIndex:19},{value:" to ",paraId:49,tocIndex:19},{value:"mark",paraId:49,tocIndex:19},{value:" graphic relationship, multiple small graphics causing blur.",paraId:49,tocIndex:19},{value:"When a chart has multiple small graphics, if each small graphic has a mapped ",paraId:50,tocIndex:20},{value:"label",paraId:50,tocIndex:20},{value:", overlap and chart blur occur. Examples include sunburst charts, treemap charts, etc.",paraId:50,tocIndex:20},{value:"overflowHide",paraId:33},{value:"Hides ",paraId:51,tocIndex:21},{value:"label",paraId:51,tocIndex:21},{value:" text that exceeds corresponding graphics. Note: Some special charts have built-in ",paraId:51,tocIndex:21},{value:"label",paraId:51,tocIndex:21},{value:" configuration and can be configured at the view level.",paraId:51,tocIndex:21},{value:"Try this:",paraId:52,tocIndex:21},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart\n  .sunburst()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  })\n  .encode('value', 'sum')\n  .label({\n    text: 'name',\n    transform: [\n      {\n        type: 'overflowHide',\n      },\n    ],\n  });\n\nchart.render();\n",paraId:53,tocIndex:21},{value:"overlapHide",paraId:54,tocIndex:22},{value:" hides overlapping labels, by default keeps the first one and hides subsequent ones. The difference from ",paraId:54,tocIndex:22},{value:"overlapDodgeY",paraId:54,tocIndex:22},{value:" is that ",paraId:54,tocIndex:22},{value:"overlapHide",paraId:54,tocIndex:22},{value:" hides rather than moves.",paraId:54,tocIndex:22},{value:"When some graphic colors are close to label colors, visibility issues occur.",paraId:55,tocIndex:23},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  height: 300,\n  insetLeft: 40,\n  insetRight: 40,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/cb99c4ab-e0a3-4c76-9586-fe7fa2ff1a8c.csv',\n  },\n  encode: {\n    x: (d) => new Date(d.date).getFullYear(),\n    y: 'price',\n    color: 'symbol',\n  },\n  transform: [{ type: 'groupX', y: 'mean' }],\n  labels: [{ text: 'price' }],\n});\nchart.render();\n",paraId:56,tocIndex:23},{value:"overlapHide",paraId:33},{value:"Optimizes unclear ",paraId:57,tocIndex:24},{value:"label",paraId:57,tocIndex:24},{value:" colors.",paraId:57,tocIndex:24},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  height: 300,\n  insetLeft: 40,\n  insetRight: 40,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/cb99c4ab-e0a3-4c76-9586-fe7fa2ff1a8c.csv',\n  },\n  encode: {\n    x: (d) => new Date(d.date).getFullYear(),\n    y: 'price',\n    color: 'symbol',\n  },\n  transform: [{ type: 'groupX', y: 'mean' }],\n  labels: [{ text: 'price', transform: [{ type: 'overlapHide' }] }],\n});\n\nchart.render();\n",paraId:58,tocIndex:24},{value:"exceedAdjust",paraId:59,tocIndex:25},{value:" automatically detects and corrects label overflow, moving labels in the reverse direction when they exceed the specified area.",paraId:59,tocIndex:25},{value:"Property",paraId:60,tocIndex:26},{value:"Description",paraId:60,tocIndex:26},{value:"Type",paraId:60,tocIndex:26},{value:"Default",paraId:60,tocIndex:26},{value:"bounds",paraId:60,tocIndex:26},{value:"Specify boundary region type for detection, supported from ",paraId:60,tocIndex:26},{value:"5.3.4",paraId:60,tocIndex:26},{value:"'view' | 'main'",paraId:60,tocIndex:26},{value:"'view'",paraId:60,tocIndex:26},{value:"offsetX",paraId:60,tocIndex:26},{value:"Additional X-axis offset when auto-adjusting position",paraId:60,tocIndex:26},{value:"number",paraId:60,tocIndex:26},{value:"0",paraId:60,tocIndex:26},{value:"offsetY",paraId:60,tocIndex:26},{value:"Additional Y-axis offset when auto-adjusting position",paraId:60,tocIndex:26},{value:"number",paraId:60,tocIndex:26},{value:"0",paraId:60,tocIndex:26},{value:"'view'",paraId:61,tocIndex:26},{value:": Detects if labels exceed the entire view area (including margin and padding)",paraId:61,tocIndex:26},{value:"'main'",paraId:61,tocIndex:26},{value:": Detects if labels exceed the main area (excluding margin and padding)",paraId:61,tocIndex:26},{value:"'offsetX'",paraId:61,tocIndex:26},{value:": Additional X-axis offset when triggering auto-adjustment, left boundary shifts right, right boundary shifts left",paraId:61,tocIndex:26},{value:"'offsetY'",paraId:61,tocIndex:26},{value:": Additional Y-axis offset when triggering auto-adjustment, top boundary shifts down, bottom boundary shifts up",paraId:61,tocIndex:26},{value:"label",paraId:62,tocIndex:27},{value:" text exceeds the chart, and the exceeded portion gets clipped.",paraId:62,tocIndex:27},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  height: 300,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/cb99c4ab-e0a3-4c76-9586-fe7fa2ff1a8c.csv',\n  },\n  encode: {\n    x: (d) => new Date(d.date).getFullYear(),\n    y: 'price',\n    color: 'symbol',\n  },\n  transform: [{ type: 'groupX', y: 'mean' }],\n  labels: [{ text: 'price' }],\n});\nchart.render();\n",paraId:63,tocIndex:27},{value:"exceedAdjust",paraId:33},{value:"Optimizes direction for ",paraId:64,tocIndex:28},{value:"label",paraId:64,tocIndex:28},{value:" text exceeding the view, with default boundary as view area.",paraId:64,tocIndex:28},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  {\n    date: '2025-07-01',\n    price: 600,\n    showLabel: 1,\n    tooltip: 'Lowest Price ¥600',\n  },\n  {\n    date: '2025-07-02',\n    price: 660,\n  },\n  {\n    date: '2025-07-03',\n    price: 778,\n  },\n  {\n    date: '2025-07-04',\n    price: 780,\n  },\n  {\n    date: '2025-07-05',\n    price: 810,\n  },\n  {\n    date: '2025-07-06',\n    price: 815,\n  },\n  {\n    date: '2025-07-07',\n    price: 778,\n  },\n  {\n    date: '2025-07-08',\n    price: 778,\n  },\n  {\n    date: '2025-07-09',\n    price: 778,\n  },\n  {\n    date: '2025-07-10',\n    price: 778,\n  },\n  {\n    date: '2025-07-11',\n    price: 890,\n  },\n  {\n    date: '2025-07-12',\n    price: 814,\n  },\n  {\n    date: '2025-07-13',\n    price: 890,\n  },\n  {\n    date: '2025-07-14',\n    price: 820,\n  },\n  {\n    date: '2025-07-15',\n    price: 790,\n  },\n  {\n    date: '2025-07-16',\n    price: 810,\n  },\n  {\n    date: '2025-07-17',\n    price: 790,\n  },\n  {\n    date: '2025-07-18',\n    price: 860,\n  },\n  {\n    date: '2025-07-19',\n    price: 780,\n  },\n  {\n    date: '2025-07-20',\n    price: 860,\n  },\n  {\n    date: '2025-07-21',\n    price: 860,\n  },\n  {\n    date: '2025-07-22',\n    price: 860,\n  },\n  {\n    date: '2025-07-23',\n    price: 860,\n  },\n  {\n    date: '2025-07-24',\n    price: 860,\n  },\n  {\n    date: '2025-07-25',\n    price: 860,\n  },\n  {\n    date: '2025-07-26',\n    price: 860,\n  },\n  {\n    date: '2025-07-27',\n    price: 860,\n  },\n  {\n    date: '2025-07-28',\n    price: 860,\n  },\n  {\n    date: '2025-07-29',\n    price: 860,\n  },\n  {\n    date: '2025-07-30',\n    price: 860,\n  },\n  {\n    date: '2025-07-31',\n    price: 860,\n  },\n  {\n    date: '2025-08-01',\n    price: 860,\n  },\n  {\n    date: '2025-08-02',\n    price: 860,\n  },\n  {\n    date: '2025-08-03',\n    price: 860,\n  },\n  {\n    date: '2025-08-04',\n    price: 860,\n  },\n  {\n    date: '2025-08-05',\n    price: 860,\n  },\n  {\n    date: '2025-08-06',\n    price: 860,\n  },\n  {\n    date: '2025-08-07',\n    price: 860,\n  },\n  {\n    date: '2025-08-08',\n    price: 860,\n  },\n  {\n    date: '2025-08-09',\n    price: 860,\n  },\n  {\n    date: '2025-08-10',\n    price: 860,\n  },\n  {\n    date: '2025-08-11',\n    price: 860,\n  },\n  {\n    date: '2025-08-12',\n    price: 860,\n  },\n  {\n    date: '2025-08-13',\n    price: 860,\n  },\n  {\n    date: '2025-08-14',\n    price: 860,\n  },\n  {\n    date: '2025-08-15',\n    price: 860,\n  },\n  {\n    date: '2025-08-16',\n    price: 740,\n  },\n  {\n    date: '2025-08-17',\n    price: 740,\n  },\n  {\n    date: '2025-08-18',\n    price: 740,\n  },\n  {\n    date: '2025-08-19',\n    price: 740,\n  },\n  {\n    date: '2025-08-20',\n    price: 740,\n  },\n  {\n    date: '2025-08-21',\n    price: 740,\n  },\n  {\n    date: '2025-08-22',\n    price: 740,\n  },\n  {\n    date: '2025-08-23',\n    price: 740,\n  },\n  {\n    date: '2025-08-24',\n    price: 740,\n  },\n  {\n    date: '2025-08-25',\n    price: 740,\n  },\n  {\n    date: '2025-08-26',\n    price: 740,\n  },\n  {\n    date: '2025-08-27',\n    price: 740,\n  },\n  {\n    date: '2025-08-28',\n    price: 740,\n  },\n  {\n    date: '2025-08-29',\n    price: 740,\n  },\n  {\n    date: '2025-08-30',\n    price: 740,\n  },\n  {\n    date: '2025-08-31',\n    price: 740,\n    showLabel: 1,\n    tooltip: 'Highest Price ¥740',\n  },\n];\nconst result = (data.filter((item) => item.showLabel) || []).map((item) => {\n  return {\n    type: 'lineX',\n    data: [item],\n    encode: {\n      x: 'date',\n      y: 'price',\n      color: 'linear-gradient(-90deg, #1677FF5B 0%,#1677FF 100%)',\n    },\n    style: {\n      lineWidth: 3,\n      lineDash: [3, 3],\n    },\n    labels: item.tooltip\n      ? [\n          {\n            text: 'tooltip',\n            fill: '#000000',\n            fillOpacity: 1,\n            fontSize: 22,\n            fontWeight: 500,\n            lineHeight: 30,\n            textAlign: 'center',\n            background: true,\n            backgroundFill: '#ffffff',\n            backgroundRadius: 24,\n            backgroundOpacity: 1,\n            backgroundPadding: [10, 16],\n            backgroundRadius: 10,\n            backgroundShadowColor: 'rgba(42,102,187,0.17)',\n            backgroundShadowBlur: 22,\n            transform: [{ type: 'exceedAdjust' }], // Default view boundary\n          },\n        ]\n      : [],\n  };\n});\n\nchart.options({\n  width: 654,\n  height: 310,\n  type: 'view',\n  margin: 20,\n  marginLeft: 10,\n  insetLeft: 24,\n  insetRight: 24,\n  insetBottom: 24,\n  animate: false,\n  axis: {\n    x: {\n      title: '',\n      size: 16,\n      line: true,\n      lineLineWidth: 1.5,\n      lineStroke: '#DEE3EB',\n      tick: false,\n      labelFontSize: 22,\n      labelFill: '#545C67',\n      labelFontWeight: 500,\n      labelDy: 8,\n      labelFormatter: (str) => {\n        if (/^\\d{4}-\\d{2}-\\d{2}$/.test(str)) {\n          const [year, month, day] = str.split('-');\n          return `${+month}/${+day}`;\n        }\n        return str;\n      },\n      tickFilter: (d, index) => {\n        if (data[index]?.showLabel) {\n          return true;\n        }\n        return false;\n      },\n    },\n    y: {\n      title: '',\n      tick: false,\n      line: true,\n      lineStroke: '#DEE3EB',\n      lineLineWidth: 1.5,\n      labelDx: -8,\n      labelFontSize: 22,\n      labelFill: '#545C67',\n      labelFontWeight: 500,\n      grid: false,\n    },\n  },\n  scale: {\n    y: {\n      type: 'linear',\n      tickCount: 5,\n      domain: [600, 860],\n      nice: true,\n    },\n  },\n  children: [\n    {\n      type: 'area',\n      data: data,\n      encode: {\n        x: 'date',\n        y: 'price',\n        shape: 'smooth',\n      },\n      style: {\n        fill: `linear-gradient(-90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0) 50%,rgba(105, 168, 255, 0.61) 100%)`,\n      },\n    },\n    {\n      type: 'line',\n      data: data,\n      encode: {\n        x: 'date',\n        y: 'price',\n        shape: 'smooth',\n      },\n      style: {\n        stroke:\n          'linear-gradient(0deg, #91BDFF 0%, #1777FF 24.148%, #1777FF 75.172%,#1677FF32 100%)',\n        lineWidth: 6,\n      },\n    },\n    ...result,\n  ],\n});\n\nchart.render();\n",paraId:65,tocIndex:28},{value:"As you can see, when the area is set to the view area, it will still cover the axis tick labels. In this case, you need to modify the bounds parameter.",paraId:66,tocIndex:28},{value:"exceedAdjust",paraId:33},{value:"Using ",paraId:67,tocIndex:29},{value:"bounds: 'main'",paraId:67,tocIndex:29},{value:" configuration, only adjusts when labels exceed the main area (excluding margin and padding).",paraId:67,tocIndex:29},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  {\n    date: '2025-07-01',\n    price: 600,\n    showLabel: 1,\n    tooltip: 'Lowest Price ¥600',\n  },\n  {\n    date: '2025-07-02',\n    price: 660,\n  },\n  {\n    date: '2025-07-03',\n    price: 778,\n  },\n  {\n    date: '2025-07-04',\n    price: 780,\n  },\n  {\n    date: '2025-07-05',\n    price: 810,\n  },\n  {\n    date: '2025-07-06',\n    price: 815,\n  },\n  {\n    date: '2025-07-07',\n    price: 778,\n  },\n  {\n    date: '2025-07-08',\n    price: 778,\n  },\n  {\n    date: '2025-07-09',\n    price: 778,\n  },\n  {\n    date: '2025-07-10',\n    price: 778,\n  },\n  {\n    date: '2025-07-11',\n    price: 890,\n  },\n  {\n    date: '2025-07-12',\n    price: 814,\n  },\n  {\n    date: '2025-07-13',\n    price: 890,\n  },\n  {\n    date: '2025-07-14',\n    price: 820,\n  },\n  {\n    date: '2025-07-15',\n    price: 790,\n  },\n  {\n    date: '2025-07-16',\n    price: 810,\n  },\n  {\n    date: '2025-07-17',\n    price: 790,\n  },\n  {\n    date: '2025-07-18',\n    price: 860,\n  },\n  {\n    date: '2025-07-19',\n    price: 780,\n  },\n  {\n    date: '2025-07-20',\n    price: 860,\n  },\n  {\n    date: '2025-07-21',\n    price: 860,\n  },\n  {\n    date: '2025-07-22',\n    price: 860,\n  },\n  {\n    date: '2025-07-23',\n    price: 860,\n  },\n  {\n    date: '2025-07-24',\n    price: 860,\n  },\n  {\n    date: '2025-07-25',\n    price: 860,\n  },\n  {\n    date: '2025-07-26',\n    price: 860,\n  },\n  {\n    date: '2025-07-27',\n    price: 860,\n  },\n  {\n    date: '2025-07-28',\n    price: 860,\n  },\n  {\n    date: '2025-07-29',\n    price: 860,\n  },\n  {\n    date: '2025-07-30',\n    price: 860,\n  },\n  {\n    date: '2025-07-31',\n    price: 860,\n  },\n  {\n    date: '2025-08-01',\n    price: 860,\n  },\n  {\n    date: '2025-08-02',\n    price: 860,\n  },\n  {\n    date: '2025-08-03',\n    price: 860,\n  },\n  {\n    date: '2025-08-04',\n    price: 860,\n  },\n  {\n    date: '2025-08-05',\n    price: 860,\n  },\n  {\n    date: '2025-08-06',\n    price: 860,\n  },\n  {\n    date: '2025-08-07',\n    price: 860,\n  },\n  {\n    date: '2025-08-08',\n    price: 860,\n  },\n  {\n    date: '2025-08-09',\n    price: 860,\n  },\n  {\n    date: '2025-08-10',\n    price: 860,\n  },\n  {\n    date: '2025-08-11',\n    price: 860,\n  },\n  {\n    date: '2025-08-12',\n    price: 860,\n  },\n  {\n    date: '2025-08-13',\n    price: 860,\n  },\n  {\n    date: '2025-08-14',\n    price: 860,\n  },\n  {\n    date: '2025-08-15',\n    price: 860,\n  },\n  {\n    date: '2025-08-16',\n    price: 740,\n  },\n  {\n    date: '2025-08-17',\n    price: 740,\n  },\n  {\n    date: '2025-08-18',\n    price: 740,\n  },\n  {\n    date: '2025-08-19',\n    price: 740,\n  },\n  {\n    date: '2025-08-20',\n    price: 740,\n  },\n  {\n    date: '2025-08-21',\n    price: 740,\n  },\n  {\n    date: '2025-08-22',\n    price: 740,\n  },\n  {\n    date: '2025-08-23',\n    price: 740,\n  },\n  {\n    date: '2025-08-24',\n    price: 740,\n  },\n  {\n    date: '2025-08-25',\n    price: 740,\n  },\n  {\n    date: '2025-08-26',\n    price: 740,\n  },\n  {\n    date: '2025-08-27',\n    price: 740,\n  },\n  {\n    date: '2025-08-28',\n    price: 740,\n  },\n  {\n    date: '2025-08-29',\n    price: 740,\n  },\n  {\n    date: '2025-08-30',\n    price: 740,\n  },\n  {\n    date: '2025-08-31',\n    price: 740,\n    showLabel: 1,\n    tooltip: 'Highest Price ¥740',\n  },\n];\nconst result = (data.filter((item) => item.showLabel) || []).map((item) => {\n  return {\n    type: 'lineX',\n    data: [item],\n    encode: {\n      x: 'date',\n      y: 'price',\n      color: 'linear-gradient(-90deg, #1677FF5B 0%,#1677FF 100%)',\n    },\n    style: {\n      lineWidth: 3,\n      lineDash: [3, 3],\n    },\n    labels: item.tooltip\n      ? [\n          {\n            text: 'tooltip',\n            fill: '#000000',\n            fillOpacity: 1,\n            fontSize: 22,\n            fontWeight: 500,\n            lineHeight: 30,\n            textAlign: 'center',\n            background: true,\n            backgroundFill: '#ffffff',\n            backgroundRadius: 24,\n            backgroundOpacity: 1,\n            backgroundPadding: [10, 16],\n            backgroundRadius: 10,\n            backgroundShadowColor: 'rgba(42,102,187,0.17)',\n            backgroundShadowBlur: 22,\n            transform: [{ type: 'exceedAdjust', bounds: 'main', offsetX: 25 }], // Boundary configured as main area, with horizontal offset of 25\n          },\n        ]\n      : [],\n  };\n});\n\nchart.options({\n  width: 654,\n  height: 310,\n  type: 'view',\n  margin: 20,\n  marginLeft: 10,\n  insetLeft: 24,\n  insetRight: 24,\n  insetBottom: 24,\n  animate: false,\n  axis: {\n    x: {\n      title: '',\n      size: 16,\n      line: true,\n      lineLineWidth: 1.5,\n      lineStroke: '#DEE3EB',\n      tick: false,\n      labelFontSize: 22,\n      labelFill: '#545C67',\n      labelFontWeight: 500,\n      labelDy: 8,\n      labelFormatter: (str) => {\n        if (/^\\d{4}-\\d{2}-\\d{2}$/.test(str)) {\n          const [year, month, day] = str.split('-');\n          return `${+month}/${+day}`;\n        }\n        return str;\n      },\n      tickFilter: (d, index) => {\n        if (data[index]?.showLabel) {\n          return true;\n        }\n        return false;\n      },\n    },\n    y: {\n      title: '',\n      tick: false,\n      line: true,\n      lineStroke: '#DEE3EB',\n      lineLineWidth: 1.5,\n      labelDx: -8,\n      labelFontSize: 22,\n      labelFill: '#545C67',\n      labelFontWeight: 500,\n      grid: false,\n    },\n  },\n  scale: {\n    y: {\n      type: 'linear',\n      tickCount: 5,\n      domain: [600, 860],\n      nice: true,\n    },\n  },\n  children: [\n    {\n      type: 'area',\n      data: data,\n      encode: {\n        x: 'date',\n        y: 'price',\n        shape: 'smooth',\n      },\n      style: {\n        fill: `linear-gradient(-90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0) 50%,rgba(105, 168, 255, 0.61) 100%)`,\n      },\n    },\n    {\n      type: 'line',\n      data: data,\n      encode: {\n        x: 'date',\n        y: 'price',\n        shape: 'smooth',\n      },\n      style: {\n        stroke:\n          'linear-gradient(0deg, #91BDFF 0%, #1777FF 24.148%, #1777FF 75.172%,#1677FF32 100%)',\n        lineWidth: 6,\n      },\n    },\n    ...result,\n  ],\n});\n\nchart.render();\n",paraId:68,tocIndex:29},{value:"Supports 9 positions: ",paraId:69,tocIndex:31},{value:"top",paraId:69,tocIndex:31},{value:", ",paraId:69,tocIndex:31},{value:"left",paraId:69,tocIndex:31},{value:", ",paraId:69,tocIndex:31},{value:"right",paraId:69,tocIndex:31},{value:", ",paraId:69,tocIndex:31},{value:"bottom",paraId:69,tocIndex:31},{value:", ",paraId:69,tocIndex:31},{value:"top-left",paraId:69,tocIndex:31},{value:", ",paraId:69,tocIndex:31},{value:"top-right",paraId:69,tocIndex:31},{value:", ",paraId:69,tocIndex:31},{value:"bottom-left",paraId:69,tocIndex:31},{value:", ",paraId:69,tocIndex:31},{value:"bottom-right",paraId:69,tocIndex:31},{value:", ",paraId:69,tocIndex:31},{value:"inside",paraId:69,tocIndex:31},{value:".",paraId:69,tocIndex:31},{value:"const { Chart, ChartEvent } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\n\nchart.options({\n  height: 300,\n  type: 'cell',\n  data: [\n    { x: 'x-a', y: 'y-a', data: 1 },\n    { x: 'x-a', y: 'y-b', data: 3 },\n    { x: 'x-a', y: 'y-c', data: 2 },\n    { x: 'x-b', y: 'y-a', data: 8 },\n    { x: 'x-b', y: 'y-b', data: 5 },\n    { x: 'x-b', y: 'y-c', data: 6 },\n    { x: 'x-c', y: 'y-a', data: 7 },\n    { x: 'x-c', y: 'y-b', data: 4 },\n    { x: 'x-c', y: 'y-c', data: 9 },\n  ],\n  legend: false,\n  axis: false,\n  encode: {\n    x: 'x', // Encode x axis\n    y: 'y', // Encode y axis\n    color: 'data', // Use data field from data\n  },\n  labels: [\n    {\n      text: 'data',\n      style: { fontSize: 16, stroke: '#fff', lineWidth: 2 },\n    },\n  ],\n  style: {\n    inset: 5,\n    lineWidth: 10,\n  },\n});\n\n// Insert Encode-Color selector\nconst selectorContainer = document.createElement('div');\nselectorContainer.textContent = 'position: ';\nconst selector = document.createElement('select');\nselector.innerHTML = [\n  'top',\n  'left',\n  'right',\n  'bottom',\n  'top-left',\n  'top-right',\n  'bottom-left',\n  'bottom-right',\n  'inside',\n].reduce((v, position) => {\n  return `${v}<option value=\"${position}\" ${\n    position === 'top' ? 'selected' : ''\n  }>${position}</option>`;\n}, '');\n\nselector.onchange = (e) => {\n  chart.options({\n    labels: [\n      {\n        text: 'data',\n        position: e.target.value,\n        style: { fontSize: 16, stroke: '#fff', lineWidth: 2 },\n      },\n    ],\n  });\n  chart.render(); // Re-render chart\n};\nselectorContainer.appendChild(selector);\ncontainer.insertBefore(selectorContainer, container.childNodes[0]);\n\nchart.render();\n",paraId:70,tocIndex:31},{value:"Supports ",paraId:71,tocIndex:32},{value:"outside",paraId:71,tocIndex:32},{value:", ",paraId:71,tocIndex:32},{value:"inside",paraId:71,tocIndex:32},{value:" two types. See ",paraId:71,tocIndex:32},{value:"Pie Chart/Donut Chart",paraId:72,tocIndex:32},{value:".",paraId:71,tocIndex:32},{value:"position",paraId:73,tocIndex:32},{value:"Usage",paraId:73,tocIndex:32},{value:"Before Usage",paraId:73,tocIndex:32},{value:"After Usage",paraId:73,tocIndex:32},{value:"spider",paraId:73,tocIndex:32},{value:"Adjusts labels to align along coordinate axis edges, for polar coordinate system",paraId:73,tocIndex:32},{value:"surround",paraId:73,tocIndex:32},{value:"Adjusts labels to surround coordinate system in a circle, for rose charts in polar coordinate system",paraId:73,tocIndex:32},{value:"Additionally, provides special ",paraId:74,tocIndex:32},{value:"area",paraId:74,tocIndex:32},{value:" for area charts, see ",paraId:74,tocIndex:32},{value:"Area Chart Special Labels",paraId:75,tocIndex:32},{value:". For radial type charts, adds ",paraId:74,tocIndex:32},{value:"spider",paraId:74,tocIndex:32},{value:" and ",paraId:74,tocIndex:32},{value:"surround",paraId:74,tocIndex:32},{value:" types.",paraId:74,tocIndex:32},{value:"position",paraId:76,tocIndex:32},{value:"Usage",paraId:76,tocIndex:32},{value:"Before Usage",paraId:76,tocIndex:32},{value:"After Usage",paraId:76,tocIndex:32},{value:"area",paraId:76,tocIndex:32},{value:"Displays area chart labels in the center of area regions with certain rotation",paraId:76,tocIndex:32},{value:"style",paraId:77,tocIndex:33},{value:" label style configuration, internally processed, can configure styles directly in configuration options. For specific style configuration, see ",paraId:77,tocIndex:33},{value:"Text Style Configuration",paraId:78,tocIndex:33},{value:", ",paraId:77,tocIndex:33},{value:"connector line styles",paraId:79,tocIndex:33},{value:", ",paraId:77,tocIndex:33},{value:"background styles",paraId:80,tocIndex:33},{value:".",paraId:77,tocIndex:33},{value:"({\n  labels: [\n    {\n      style: {\n        fontSize: 20,\n        fontWeight: 600,\n        lineHeight: 30,\n        textAlign: 'center',\n        connectorStroke: '#000',\n        connectorLineWidth: 2,\n        backgroundFill: '#f5f5f5',\n        backgroundRadius: 4,\n      },\n    },\n  ],\n});\n",paraId:81,tocIndex:33},{value:"Label ",paraId:82,tocIndex:34},{value:"text style",paraId:82,tocIndex:34},{value:" configuration, inherits from ",paraId:82,tocIndex:34},{value:"G",paraId:82,tocIndex:34},{value:" engine's ",paraId:82,tocIndex:34},{value:"Text",paraId:82,tocIndex:34},{value:", all styles are applicable.",paraId:82,tocIndex:34},{value:"Property",paraId:83,tocIndex:34},{value:"Description",paraId:83,tocIndex:34},{value:"Type",paraId:83,tocIndex:34},{value:"Default",paraId:83,tocIndex:34},{value:"Required",paraId:83,tocIndex:34},{value:"fontSize",paraId:83,tocIndex:34},{value:"Label text size",paraId:83,tocIndex:34},{value:"number",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"Function",paraId:83,tocIndex:34},{value:"-",paraId:83,tocIndex:34},{value:"fontFamily",paraId:83,tocIndex:34},{value:"Label text font family",paraId:83,tocIndex:34},{value:"string",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"Function",paraId:83,tocIndex:34},{value:"-",paraId:83,tocIndex:34},{value:"fontWeight",paraId:83,tocIndex:34},{value:"Label text weight",paraId:83,tocIndex:34},{value:"number",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"Function",paraId:83,tocIndex:34},{value:"-",paraId:83,tocIndex:34},{value:"lineHeight",paraId:83,tocIndex:34},{value:"Label text line height",paraId:83,tocIndex:34},{value:"number",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"Function",paraId:83,tocIndex:34},{value:"-",paraId:83,tocIndex:34},{value:"textAlign",paraId:83,tocIndex:34},{value:"Sets horizontal alignment of label text content, supported properties: ",paraId:83,tocIndex:34},{value:"center",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"end",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"left",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"right",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"start",paraId:83,tocIndex:34},{value:", default is ",paraId:83,tocIndex:34},{value:"start",paraId:83,tocIndex:34},{value:"string",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"Function",paraId:83,tocIndex:34},{value:"start",paraId:83,tocIndex:34},{value:"textBaseline",paraId:83,tocIndex:34},{value:"Sets vertical baseline when drawing label text, supported properties: ",paraId:83,tocIndex:34},{value:"top",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"middle",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"bottom",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"alphabetic",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"hanging",paraId:83,tocIndex:34},{value:". Default is ",paraId:83,tocIndex:34},{value:"bottom",paraId:83,tocIndex:34},{value:"string",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"Function",paraId:83,tocIndex:34},{value:"bottom",paraId:83,tocIndex:34},{value:"fill",paraId:83,tocIndex:34},{value:"Label text fill color",paraId:83,tocIndex:34},{value:"string",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"Function",paraId:83,tocIndex:34},{value:"-",paraId:83,tocIndex:34},{value:"fillOpacity",paraId:83,tocIndex:34},{value:"Label text fill opacity",paraId:83,tocIndex:34},{value:"number",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"Function",paraId:83,tocIndex:34},{value:"-",paraId:83,tocIndex:34},{value:"stroke",paraId:83,tocIndex:34},{value:"Label text stroke",paraId:83,tocIndex:34},{value:"string",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"Function",paraId:83,tocIndex:34},{value:"-",paraId:83,tocIndex:34},{value:"strokeOpacity",paraId:83,tocIndex:34},{value:"Label text stroke opacity",paraId:83,tocIndex:34},{value:"number",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"Function",paraId:83,tocIndex:34},{value:"-",paraId:83,tocIndex:34},{value:"lineWidth",paraId:83,tocIndex:34},{value:"Label text stroke width",paraId:83,tocIndex:34},{value:"number",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"Function",paraId:83,tocIndex:34},{value:"-",paraId:83,tocIndex:34},{value:"lineDash",paraId:83,tocIndex:34},{value:"Label text stroke dash configuration, first value is dash segment length, second value is gap distance. Setting lineDash to [0, 0] results in no stroke.",paraId:83,tocIndex:34},{value:"[number,number]",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"Function<[number, number]>",paraId:83,tocIndex:34},{value:"-",paraId:83,tocIndex:34},{value:"opacity",paraId:83,tocIndex:34},{value:"Label text overall opacity",paraId:83,tocIndex:34},{value:"number",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"Function",paraId:83,tocIndex:34},{value:"-",paraId:83,tocIndex:34},{value:"shadowColor",paraId:83,tocIndex:34},{value:"Label text shadow color",paraId:83,tocIndex:34},{value:"string",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"Function",paraId:83,tocIndex:34},{value:"-",paraId:83,tocIndex:34},{value:"shadowBlur",paraId:83,tocIndex:34},{value:"Label text shadow Gaussian blur coefficient",paraId:83,tocIndex:34},{value:"number",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"Function",paraId:83,tocIndex:34},{value:"-",paraId:83,tocIndex:34},{value:"shadowOffsetX",paraId:83,tocIndex:34},{value:"Label text shadow horizontal offset",paraId:83,tocIndex:34},{value:"number",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"Function",paraId:83,tocIndex:34},{value:"-",paraId:83,tocIndex:34},{value:"shadowOffsetY",paraId:83,tocIndex:34},{value:"Label text shadow vertical offset",paraId:83,tocIndex:34},{value:"number",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"Function",paraId:83,tocIndex:34},{value:"-",paraId:83,tocIndex:34},{value:"cursor",paraId:83,tocIndex:34},{value:"Mouse cursor style. Same as CSS cursor style, default 'default'.",paraId:83,tocIndex:34},{value:"string",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"Function",paraId:83,tocIndex:34},{value:"default",paraId:83,tocIndex:34},{value:"dx",paraId:83,tocIndex:34},{value:"Label text horizontal offset",paraId:83,tocIndex:34},{value:"number",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"Function",paraId:83,tocIndex:34},{value:"0",paraId:83,tocIndex:34},{value:"dy",paraId:83,tocIndex:34},{value:"Label text vertical offset",paraId:83,tocIndex:34},{value:"number",paraId:83,tocIndex:34},{value:" | ",paraId:83,tocIndex:34},{value:"Function",paraId:83,tocIndex:34},{value:"0",paraId:83,tocIndex:34},{value:"({\n  labels: [\n    {\n      fill: '#000',\n      fontSize: 20,\n      lineHeight: 30,\n      fontWeight: 600,\n      textAlign: 'center',\n      textBaseline: 'middle',\n      fontFamily: 'sans-serif',\n      opacity: 0.9,\n      cursor: 'pointer',\n      lineDash: [3, 4],\n      lineWidth: 2,\n      stroke: '#fff',\n      strokeOpacity: 0.4,\n      shadowOffsetX: 10,\n      shadowOffsetY: 10,\n      shadowColor: '#000',\n      shadowBlur: 2,\n    },\n  ],\n});\n",paraId:84,tocIndex:34},{value:"Label ",paraId:85,tocIndex:35},{value:"connector line style",paraId:85,tocIndex:35},{value:" configuration, format: ",paraId:85,tocIndex:35},{value:"connector${style}",paraId:85,tocIndex:35},{value:", e.g.: ",paraId:85,tocIndex:35},{value:"connectorStroke",paraId:85,tocIndex:35},{value:" represents connector line color. Requires position ",paraId:85,tocIndex:35},{value:"spider",paraId:85,tocIndex:35},{value:", ",paraId:85,tocIndex:35},{value:"surround",paraId:85,tocIndex:35},{value:" to have connector elements.",paraId:85,tocIndex:35},{value:"Parameter",paraId:86,tocIndex:35},{value:"Description",paraId:86,tocIndex:35},{value:"Type",paraId:86,tocIndex:35},{value:"Default",paraId:86,tocIndex:35},{value:"Required",paraId:86,tocIndex:35},{value:"connectorStroke",paraId:86,tocIndex:35},{value:"Connector line color",paraId:86,tocIndex:35},{value:"string",paraId:86,tocIndex:35},{value:"-",paraId:86,tocIndex:35},{value:"connectorStrokeOpacity",paraId:86,tocIndex:35},{value:"Connector line opacity",paraId:86,tocIndex:35},{value:"number",paraId:86,tocIndex:35},{value:"-",paraId:86,tocIndex:35},{value:"connectorLineWidth",paraId:86,tocIndex:35},{value:"Connector line stroke width",paraId:86,tocIndex:35},{value:"number",paraId:86,tocIndex:35},{value:"-",paraId:86,tocIndex:35},{value:"connectorLineDash",paraId:86,tocIndex:35},{value:"Connector line dash configuration, first value is dash segment length, second value is gap distance. Setting lineDash to [0,0] results in no stroke.",paraId:86,tocIndex:35},{value:"[number,number]",paraId:86,tocIndex:35},{value:"-",paraId:86,tocIndex:35},{value:"connectorOpacity",paraId:86,tocIndex:35},{value:"Connector line overall opacity",paraId:86,tocIndex:35},{value:"number",paraId:86,tocIndex:35},{value:"-",paraId:86,tocIndex:35},{value:"connectorShadowColor",paraId:86,tocIndex:35},{value:"Connector line shadow color",paraId:86,tocIndex:35},{value:"string",paraId:86,tocIndex:35},{value:"-",paraId:86,tocIndex:35},{value:"connectorShadowBlur",paraId:86,tocIndex:35},{value:"Connector line shadow Gaussian blur coefficient",paraId:86,tocIndex:35},{value:"number",paraId:86,tocIndex:35},{value:"-",paraId:86,tocIndex:35},{value:"connectorShadowOffsetX",paraId:86,tocIndex:35},{value:"Connector line shadow horizontal offset",paraId:86,tocIndex:35},{value:"number",paraId:86,tocIndex:35},{value:"-",paraId:86,tocIndex:35},{value:"connectorShadowOffsetY",paraId:86,tocIndex:35},{value:"Connector line shadow vertical offset",paraId:86,tocIndex:35},{value:"number",paraId:86,tocIndex:35},{value:"-",paraId:86,tocIndex:35},{value:"connectorCursor",paraId:86,tocIndex:35},{value:"Mouse cursor style. Same as CSS cursor style",paraId:86,tocIndex:35},{value:"string",paraId:86,tocIndex:35},{value:"default",paraId:86,tocIndex:35},{value:"connectorDistance",paraId:86,tocIndex:35},{value:"Distance between connector line and text",paraId:86,tocIndex:35},{value:"number",paraId:86,tocIndex:35},{value:"-",paraId:86,tocIndex:35},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  width: 500,\n  height: 400,\n  data: [\n    { id: 'c', value: 526 },\n    { id: 'sass', value: 220 },\n    { id: 'php', value: 325 },\n    { id: 'elixir', value: 561 },\n  ],\n  encode: { y: 'value', color: 'id' },\n  transform: [{ type: 'stackY' }],\n  coordinate: { type: 'theta', innerRadius: 0.25, outerRadius: 0.8 },\n  legend: false,\n  labels: [\n    {\n      text: 'id',\n      position: 'spider',\n      fontWeight: 'bold',\n      fontSize: 14,\n      textBaseline: 'bottom',\n      textAlign: (d) => (['c', 'sass'].includes(d.id) ? 'end' : 'start'),\n      connectorDistance: 5, // Distance between text and connector line\n      connectorStroke: '#0649f2',\n      connectorLineWidth: 1,\n      connectorLineDash: [3, 4],\n      connectorOpacity: 0.8,\n    },\n  ],\n});\n\nchart.render();\n",paraId:87,tocIndex:35},{value:"Label ",paraId:88,tocIndex:36},{value:"text background box style",paraId:88,tocIndex:36},{value:" configuration, format: ",paraId:88,tocIndex:36},{value:"background${style}",paraId:88,tocIndex:36},{value:", e.g.: ",paraId:88,tocIndex:36},{value:"backgroundFill",paraId:88,tocIndex:36},{value:" represents background box fill color.",paraId:88,tocIndex:36},{value:"Parameter",paraId:89,tocIndex:36},{value:"Description",paraId:89,tocIndex:36},{value:"Type",paraId:89,tocIndex:36},{value:"Default",paraId:89,tocIndex:36},{value:"Required",paraId:89,tocIndex:36},{value:"backgroundFill",paraId:89,tocIndex:36},{value:"Background box fill color",paraId:89,tocIndex:36},{value:"string",paraId:89,tocIndex:36},{value:"-",paraId:89,tocIndex:36},{value:"backgroundFillOpacity",paraId:89,tocIndex:36},{value:"Background box fill opacity",paraId:89,tocIndex:36},{value:"number",paraId:89,tocIndex:36},{value:"-",paraId:89,tocIndex:36},{value:"backgroundStroke",paraId:89,tocIndex:36},{value:"Background box stroke",paraId:89,tocIndex:36},{value:"string",paraId:89,tocIndex:36},{value:"-",paraId:89,tocIndex:36},{value:"backgroundStrokeOpacity",paraId:89,tocIndex:36},{value:"Background box stroke opacity",paraId:89,tocIndex:36},{value:"number",paraId:89,tocIndex:36},{value:"-",paraId:89,tocIndex:36},{value:"backgroundLineWidth",paraId:89,tocIndex:36},{value:"Background box stroke width",paraId:89,tocIndex:36},{value:"number",paraId:89,tocIndex:36},{value:"-",paraId:89,tocIndex:36},{value:"backgroundLineDash",paraId:89,tocIndex:36},{value:"Background box stroke dash configuration, first value is dash segment length, second value is gap distance. Setting lineDash to [0,0] results in no stroke.",paraId:89,tocIndex:36},{value:"[number,number]",paraId:89,tocIndex:36},{value:"-",paraId:89,tocIndex:36},{value:"backgroundOpacity",paraId:89,tocIndex:36},{value:"Background box overall opacity",paraId:89,tocIndex:36},{value:"number",paraId:89,tocIndex:36},{value:"-",paraId:89,tocIndex:36},{value:"backgroundShadowColor",paraId:89,tocIndex:36},{value:"Background box shadow color",paraId:89,tocIndex:36},{value:"string",paraId:89,tocIndex:36},{value:"-",paraId:89,tocIndex:36},{value:"backgroundShadowBlur",paraId:89,tocIndex:36},{value:"Background box shadow Gaussian blur coefficient",paraId:89,tocIndex:36},{value:"number",paraId:89,tocIndex:36},{value:"-",paraId:89,tocIndex:36},{value:"backgroundShadowOffsetX",paraId:89,tocIndex:36},{value:"Background box shadow horizontal offset",paraId:89,tocIndex:36},{value:"number",paraId:89,tocIndex:36},{value:"-",paraId:89,tocIndex:36},{value:"backgroundShadowOffsetY",paraId:89,tocIndex:36},{value:"Background box shadow vertical offset",paraId:89,tocIndex:36},{value:"number",paraId:89,tocIndex:36},{value:"-",paraId:89,tocIndex:36},{value:"backgroundCursor",paraId:89,tocIndex:36},{value:"Mouse cursor style. Same as CSS cursor style",paraId:89,tocIndex:36},{value:"string",paraId:89,tocIndex:36},{value:"default",paraId:89,tocIndex:36},{value:"backgroundRadius",paraId:89,tocIndex:36},{value:"Background box border radius",paraId:89,tocIndex:36},{value:"number",paraId:89,tocIndex:36},{value:"-",paraId:89,tocIndex:36},{value:"backgroundPadding",paraId:89,tocIndex:36},{value:"Background box padding",paraId:89,tocIndex:36},{value:"number[]",paraId:89,tocIndex:36},{value:"-",paraId:89,tocIndex:36},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  width: 500,\n  height: 400,\n  data: [\n    { id: 'c', value: 526 },\n    { id: 'sass', value: 220 },\n    { id: 'php', value: 325 },\n    { id: 'elixir', value: 561 },\n  ],\n  encode: { y: 'value', color: 'id' },\n  transform: [{ type: 'stackY' }],\n  coordinate: { type: 'theta', innerRadius: 0.25, outerRadius: 0.8 },\n  legend: false,\n  labels: [\n    {\n      text: 'value',\n      fill: '#0700fa', // Text style\n      background: true, // Background display\n      backgroundFill: '#fff',\n      backgroundRadius: 4,\n      backgroundPadding: [10, 10, 10, 10],\n      backgroundOpacity: 0.4,\n      backgroundStroke: '#000',\n      backgroundLineDash: [3, 4],\n      backgroundLineWidth: 1,\n    },\n  ],\n});\n\nchart.render();\n",paraId:90,tocIndex:36}]},99920:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(43068);const t=[{value:"In G2, ",paraId:0,tocIndex:0},{value:"Legend",paraId:0,tocIndex:0},{value:" is an auxiliary element of the chart that uses color, size, and shape to distinguish different data types and is used for data filtering in charts. It can be understood as the visualization of scales corresponding to non-spatial channels (",paraId:0,tocIndex:0},{value:"color",paraId:0,tocIndex:0},{value:", ",paraId:0,tocIndex:0},{value:"opacity",paraId:0,tocIndex:0},{value:", ",paraId:0,tocIndex:0},{value:"size",paraId:0,tocIndex:0},{value:", ",paraId:0,tocIndex:0},{value:"shape",paraId:0,tocIndex:0},{value:"). G2 automatically generates different legends based on the set graphic attribute mappings and data types. When a variable corresponds to multiple graphic attributes, G2 merges the legends to achieve simplification.",paraId:0,tocIndex:0},{value:"The four non-spatial channels ",paraId:1,tocIndex:0},{value:"color",paraId:1,tocIndex:0},{value:", ",paraId:1,tocIndex:0},{value:"opacity",paraId:1,tocIndex:0},{value:", ",paraId:1,tocIndex:0},{value:"size",paraId:1,tocIndex:0},{value:", and ",paraId:1,tocIndex:0},{value:"shape",paraId:1,tocIndex:0},{value:" automatically generate different legends when they receive parameters that are determined to be fields from the data source:",paraId:1,tocIndex:0},{value:"Visual Channel",paraId:2,tocIndex:0},{value:"Description",paraId:2,tocIndex:0},{value:"color",paraId:2,tocIndex:0},{value:"Generate legend based on different colors",paraId:2,tocIndex:0},{value:"opacity",paraId:2,tocIndex:0},{value:"Generate legend based on different opacity",paraId:2,tocIndex:0},{value:"size",paraId:2,tocIndex:0},{value:"Generate legend based on different sizes",paraId:2,tocIndex:0},{value:"shape",paraId:2,tocIndex:0},{value:"Generate legend based on different shapes",paraId:2,tocIndex:0},{value:"There are two ways to configure legends:",paraId:3,tocIndex:2},{value:"First, pass a ",paraId:4,tocIndex:2},{value:"boolean",paraId:4,tocIndex:2},{value:" to set whether to display the legend.",paraId:4,tocIndex:2},{value:"({\n  type: 'interval',\n  legend: false; // Hide all legends\n})\n",paraId:5,tocIndex:2},{value:"({\n  type: 'interval',\n  legend: {color: false}; // Hide the legend for the color channel\n})\n",paraId:6,tocIndex:2},{value:"Second, pass ",paraId:7,tocIndex:2},{value:"legendOption",paraId:7,tocIndex:2},{value:" to configure the legend as a whole.",paraId:7,tocIndex:2},{value:"({\n  type: 'interval',\n  legend: {\n    color: {},\n    size: {},\n  },\n});\n",paraId:8,tocIndex:2},{value:"Legends can be configured at the Mark level. In G2, each mark has its own legend. If the scales corresponding to marks are synchronized, the legends are also merged.",paraId:9,tocIndex:3},{value:"({\n  type: 'interval',\n  legend: {\n    color: {},\n    size: {},\n  },\n});\n",paraId:10,tocIndex:3},{value:"Legends can also be configured at the View level. Legends have transitivity. Legends declared on a view are passed to the marks declared in ",paraId:11,tocIndex:3},{value:"children",paraId:11,tocIndex:3},{value:". If the mark has a legend for the corresponding channel, they are merged; otherwise, they don't affect each other.",paraId:11,tocIndex:3},{value:"({\n  type: 'view',\n  legend: {\n    color: {},\n    size: {},\n  },\n});\n",paraId:12,tocIndex:3},{value:"Legends in G2 are divided into ",paraId:13,tocIndex:4},{value:"continuous legends",paraId:13,tocIndex:4},{value:" and ",paraId:13,tocIndex:4},{value:"categorical legends",paraId:13,tocIndex:4},{value:". Due to the different structures of these two types of legends, their configuration options also differ.",paraId:13,tocIndex:4},{value:"Some configuration options are scoped to categorical legends and continuous legends:\n",paraId:14,tocIndex:4},{value:"Categorical Legend",paraId:15,tocIndex:4},{value:"Continuous Legend",paraId:16,tocIndex:4},{value:"Property",paraId:17,tocIndex:4},{value:"Description",paraId:17,tocIndex:4},{value:"Type",paraId:17,tocIndex:4},{value:"Default Value",paraId:17,tocIndex:4},{value:"Required",paraId:17,tocIndex:4},{value:"orientation",paraId:17,tocIndex:4},{value:"Legend orientation, which is the scroll direction for categorical legends",paraId:17,tocIndex:4},{value:"horizontal",paraId:17,tocIndex:4},{value:" | ",paraId:17,tocIndex:4},{value:"vertical",paraId:17,tocIndex:4},{value:"horizontal",paraId:17,tocIndex:4},{value:"position",paraId:17,tocIndex:4},{value:"Position of the legend",paraId:17,tocIndex:4},{value:"top",paraId:17,tocIndex:4},{value:" | ",paraId:17,tocIndex:4},{value:"right",paraId:17,tocIndex:4},{value:" | ",paraId:17,tocIndex:4},{value:"left",paraId:17,tocIndex:4},{value:" | ",paraId:17,tocIndex:4},{value:"bottom",paraId:17,tocIndex:4},{value:"top",paraId:17,tocIndex:4},{value:"layout",paraId:17,tocIndex:4},{value:"Adjust the flex layout of the legend",paraId:17,tocIndex:4},{value:"layout",paraId:18,tocIndex:4},{value:"See ",paraId:17,tocIndex:4},{value:"layout",paraId:19,tocIndex:4},{value:"size",paraId:17,tocIndex:4},{value:"Size of the legend component",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"-",paraId:17,tocIndex:4},{value:"length",paraId:17,tocIndex:4},{value:"Length of the legend component",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"-",paraId:17,tocIndex:4},{value:"crossPadding",paraId:17,tocIndex:4},{value:"Distance from legend to chart area",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"12",paraId:17,tocIndex:4},{value:"order",paraId:17,tocIndex:4},{value:"Order of legend in layout",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"1",paraId:17,tocIndex:4},{value:"title",paraId:17,tocIndex:4},{value:"Configure legend title",paraId:17,tocIndex:4},{value:"title",paraId:20,tocIndex:4},{value:"See ",paraId:17,tocIndex:4},{value:"title",paraId:21,tocIndex:4},{value:"cols ",paraId:17,tocIndex:4},{value:"Categorical Legend",paraId:22,tocIndex:4},{value:"Specify the number of legend items displayed per row; empty means no limit on columns",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"-",paraId:17,tocIndex:4},{value:"colPadding ",paraId:17,tocIndex:4},{value:"Categorical Legend",paraId:23,tocIndex:4},{value:"Specify horizontal spacing between legend items",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"12",paraId:17,tocIndex:4},{value:"rowPadding ",paraId:17,tocIndex:4},{value:"Categorical Legend",paraId:24,tocIndex:4},{value:"Specify vertical spacing between legend items",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"8",paraId:17,tocIndex:4},{value:"maxRows ",paraId:17,tocIndex:4},{value:"Categorical Legend",paraId:25,tocIndex:4},{value:"Specify maximum number of rows for legend",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"3",paraId:17,tocIndex:4},{value:"maxCols ",paraId:17,tocIndex:4},{value:"Categorical Legend",paraId:26,tocIndex:4},{value:"Specify maximum number of columns for legend",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"3",paraId:17,tocIndex:4},{value:"itemMarker ",paraId:17,tocIndex:4},{value:"Categorical Legend",paraId:27,tocIndex:4},{value:"Configure legend item marker",paraId:17,tocIndex:4},{value:"itemMarker",paraId:28,tocIndex:4},{value:"See ",paraId:17,tocIndex:4},{value:"itemMarker",paraId:29,tocIndex:4},{value:"itemLabel ",paraId:17,tocIndex:4},{value:"Categorical Legend",paraId:30,tocIndex:4},{value:"Configure legend item label text",paraId:17,tocIndex:4},{value:"itemLabel",paraId:31,tocIndex:4},{value:"See ",paraId:17,tocIndex:4},{value:"itemLabel",paraId:32,tocIndex:4},{value:"itemValue ",paraId:17,tocIndex:4},{value:"Categorical Legend",paraId:33,tocIndex:4},{value:"Configure legend item value",paraId:17,tocIndex:4},{value:"itemValue",paraId:34,tocIndex:4},{value:"See ",paraId:17,tocIndex:4},{value:"itemValue",paraId:35,tocIndex:4},{value:"itemBackground ",paraId:17,tocIndex:4},{value:"Categorical Legend",paraId:36,tocIndex:4},{value:"Configure legend item background",paraId:17,tocIndex:4},{value:"itemBackground",paraId:37,tocIndex:4},{value:"See ",paraId:17,tocIndex:4},{value:"itemBackground",paraId:38,tocIndex:4},{value:"itemWidth ",paraId:17,tocIndex:4},{value:"Categorical Legend",paraId:39,tocIndex:4},{value:"Configure legend item width",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"-",paraId:17,tocIndex:4},{value:"itemSpan ",paraId:17,tocIndex:4},{value:"Categorical Legend",paraId:40,tocIndex:4},{value:"Configure space allocation for legend item marker, label, and value",paraId:17,tocIndex:4},{value:"number | number[]",paraId:17,tocIndex:4},{value:"[1, 1, 1]",paraId:17,tocIndex:4},{value:"itemSpacing ",paraId:17,tocIndex:4},{value:"Categorical Legend",paraId:41,tocIndex:4},{value:"Configure spacing between legend item marker, label, value and focus icon",paraId:17,tocIndex:4},{value:"number | number[]",paraId:17,tocIndex:4},{value:"[8, 8, 4]",paraId:17,tocIndex:4},{value:"nav ",paraId:17,tocIndex:4},{value:"Categorical Legend",paraId:42,tocIndex:4},{value:"Configure legend navigator",paraId:17,tocIndex:4},{value:"nav",paraId:43,tocIndex:4},{value:"See ",paraId:17,tocIndex:4},{value:"nav",paraId:44,tocIndex:4},{value:"poptip ",paraId:17,tocIndex:4},{value:"Categorical Legend",paraId:45,tocIndex:4},{value:"Legend item poptip",paraId:17,tocIndex:4},{value:"poptip",paraId:46,tocIndex:4},{value:"See ",paraId:17,tocIndex:4},{value:"poptip",paraId:47,tocIndex:4},{value:"focus ",paraId:17,tocIndex:4},{value:"Categorical Legend",paraId:48,tocIndex:4},{value:"Whether to enable legend focus",paraId:17,tocIndex:4},{value:"boolean",paraId:17,tocIndex:4},{value:"false",paraId:17,tocIndex:4},{value:"focusMarkerSize ",paraId:17,tocIndex:4},{value:"Categorical Legend",paraId:49,tocIndex:4},{value:"Legend Focus Icon Size",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"12",paraId:17,tocIndex:4},{value:"defaultSelect ",paraId:17,tocIndex:4},{value:"Categorical Legend",paraId:50,tocIndex:4},{value:"Default selected legend items",paraId:17,tocIndex:4},{value:"string[]",paraId:17,tocIndex:4},{value:"-",paraId:17,tocIndex:4},{value:"color ",paraId:17,tocIndex:4},{value:"Continuous Legend",paraId:51,tocIndex:4},{value:"Configure color band colors for continuous legend",paraId:17,tocIndex:4},{value:"string[] | ",paraId:17,tocIndex:4},{value:"d3-interpolate",paraId:17,tocIndex:4},{value:"-",paraId:17,tocIndex:4},{value:"block ",paraId:17,tocIndex:4},{value:"Continuous Legend",paraId:52,tocIndex:4},{value:"Whether continuous legend displays by intervals",paraId:17,tocIndex:4},{value:"boolean",paraId:17,tocIndex:4},{value:"false",paraId:17,tocIndex:4},{value:"type ",paraId:17,tocIndex:4},{value:"Continuous Legend",paraId:53,tocIndex:4},{value:"Configure type of continuous legend",paraId:17,tocIndex:4},{value:"size",paraId:17,tocIndex:4},{value:" |",paraId:17,tocIndex:4},{value:"color",paraId:17,tocIndex:4},{value:"color",paraId:17,tocIndex:4},{value:"ribbon ",paraId:17,tocIndex:4},{value:"Continuous Legend",paraId:54,tocIndex:4},{value:"Configure color band of continuous legend",paraId:17,tocIndex:4},{value:"ribbon",paraId:55,tocIndex:4},{value:"See ",paraId:17,tocIndex:4},{value:"ribbon",paraId:56,tocIndex:4},{value:"handle ",paraId:17,tocIndex:4},{value:"Continuous Legend",paraId:57,tocIndex:4},{value:"Configure slider handle of continuous legend",paraId:17,tocIndex:4},{value:"handle",paraId:58,tocIndex:4},{value:"See ",paraId:17,tocIndex:4},{value:"handle",paraId:59,tocIndex:4},{value:"label ",paraId:17,tocIndex:4},{value:"Continuous Legend",paraId:60,tocIndex:4},{value:"Configure labels/tick values of continuous legend",paraId:17,tocIndex:4},{value:"label",paraId:61,tocIndex:4},{value:"See ",paraId:17,tocIndex:4},{value:"label",paraId:62,tocIndex:4},{value:"indicator ",paraId:17,tocIndex:4},{value:"Continuous Legend",paraId:63,tocIndex:4},{value:"Configure indicator of continuous legend",paraId:17,tocIndex:4},{value:"indicator",paraId:64,tocIndex:4},{value:"See ",paraId:17,tocIndex:4},{value:"indicator",paraId:65,tocIndex:4},{value:"optional",paraId:66,tocIndex:5},{value:" ",paraId:66,tocIndex:5},{value:"horizontal | vertical",paraId:66,tocIndex:5},{value:" ",paraId:66,tocIndex:5},{value:"Legend orientation, which is the scroll direction for categorical legends. Default is ",paraId:67,tocIndex:5},{value:"horizontal",paraId:67,tocIndex:5},{value:".",paraId:67,tocIndex:5},{value:" ",paraId:68,tocIndex:6},{value:"optional",paraId:68,tocIndex:6},{value:" ",paraId:68,tocIndex:6},{value:'"top" | "right" | "left" | "bottom"',paraId:68,tocIndex:6},{value:" ",paraId:68,tocIndex:6},{value:"Position of the legend. Default is ",paraId:69,tocIndex:6},{value:"top",paraId:69,tocIndex:6},{value:".",paraId:69,tocIndex:6},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\nconst positionList = ['top', 'right', 'left', 'bottom'];\nconst positionMap = positionList.map((p) => {\n  return {\n    label: p,\n    value: p,\n  };\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { name: 'London', month: 'Jan.', avgRainfall: 18.9 },\n    { name: 'London', month: 'Feb.', avgRainfall: 28.8 },\n    { name: 'London', month: 'Mar.', avgRainfall: 39.3 },\n    { name: 'London', month: 'Apr.', avgRainfall: 81.4 },\n    { name: 'London', month: 'May', avgRainfall: 47 },\n    { name: 'London', month: 'Jun.', avgRainfall: 20.3 },\n    { name: 'London', month: 'Jul.', avgRainfall: 24 },\n    { name: 'London', month: 'Aug.', avgRainfall: 35.6 },\n    { name: 'Berlin', month: 'Jan.', avgRainfall: 12.4 },\n    { name: 'Berlin', month: 'Feb.', avgRainfall: 23.2 },\n    { name: 'Berlin', month: 'Mar.', avgRainfall: 34.5 },\n    { name: 'Berlin', month: 'Apr.', avgRainfall: 99.7 },\n    { name: 'Berlin', month: 'May', avgRainfall: 52.6 },\n    { name: 'Berlin', month: 'Jun.', avgRainfall: 35.5 },\n    { name: 'Berlin', month: 'Jul.', avgRainfall: 37.4 },\n    { name: 'Berlin', month: 'Aug.', avgRainfall: 42.4 },\n  ],\n  encode: { x: 'month', y: 'avgRainfall', color: 'name' },\n  transform: [{ type: 'dodgeX' }],\n});\n\nconst handleSetPosition = (position) => {\n  chart.options({\n    legend: {\n      color: {\n        position,\n      },\n    },\n  });\n  chart.render(); // Re-render the chart\n};\n\n// Insert Position selector\nconst selectorContainer = document.createElement('div');\nselectorContainer.textContent = 'Select legend position ';\nconst selector = document.createElement('select');\nselector.innerHTML = positionMap.map(\n  (position, index) =>\n    `<option value=\"${position.value}\" ${index === 0 ? 'selected' : ''}>${\n      position.label\n    }</option>`,\n);\nselector.onchange = (e) => {\n  handleSetPosition(e.target.value);\n};\nselectorContainer.appendChild(selector);\ncontainer.insertBefore(selectorContainer, container.childNodes[0]);\n\nchart.render();\n",paraId:70,tocIndex:6},{value:" ",paraId:71,tocIndex:7},{value:"LegendLayoutCfg",paraId:71,tocIndex:7},{value:" ",paraId:71,tocIndex:7},{value:"optional",paraId:71,tocIndex:7},{value:" ",paraId:71,tocIndex:7},{value:"Legend component supports adjusting its position on the canvas through the ",paraId:72,tocIndex:7},{value:"layout",paraId:72,tocIndex:7},{value:" property. Legend layout uses the ",paraId:72,tocIndex:7},{value:"Flexbox layout model",paraId:72,tocIndex:7},{value:", where ",paraId:72,tocIndex:7},{value:"position",paraId:72,tocIndex:7},{value:" determines the legend's basic position on the canvas, and ",paraId:72,tocIndex:7},{value:"layout",paraId:72,tocIndex:7},{value:" further controls the precise alignment within the legend.",paraId:72,tocIndex:7},{value:"The key to understanding legend layout is mastering the concepts of ",paraId:73,tocIndex:8},{value:"main axis",paraId:73,tocIndex:8},{value:" and ",paraId:73,tocIndex:8},{value:"cross axis",paraId:73,tocIndex:8},{value:":",paraId:73,tocIndex:8},{value:"position",paraId:74,tocIndex:8},{value:"Default flexDirection",paraId:74,tocIndex:8},{value:"Main Axis Direction",paraId:74,tocIndex:8},{value:"Cross Axis Direction",paraId:74,tocIndex:8},{value:"Main Axis Meaning",paraId:74,tocIndex:8},{value:"Cross Axis Meaning",paraId:74,tocIndex:8},{value:"top",paraId:74,tocIndex:8},{value:"row",paraId:74,tocIndex:8},{value:"Horizontal →",paraId:74,tocIndex:8},{value:"Vertical ↓",paraId:74,tocIndex:8},{value:"Legend items left-right",paraId:74,tocIndex:8},{value:"Legend area top-bottom",paraId:74,tocIndex:8},{value:"bottom",paraId:74,tocIndex:8},{value:"row",paraId:74,tocIndex:8},{value:"Horizontal →",paraId:74,tocIndex:8},{value:"Vertical ↑",paraId:74,tocIndex:8},{value:"Legend items left-right",paraId:74,tocIndex:8},{value:"Legend area top-bottom",paraId:74,tocIndex:8},{value:"left",paraId:74,tocIndex:8},{value:"column",paraId:74,tocIndex:8},{value:"Vertical ↓",paraId:74,tocIndex:8},{value:"Horizontal →",paraId:74,tocIndex:8},{value:"Legend items top-bottom",paraId:74,tocIndex:8},{value:"Legend area left-right",paraId:74,tocIndex:8},{value:"right",paraId:74,tocIndex:8},{value:"column",paraId:74,tocIndex:8},{value:"Vertical ↓",paraId:74,tocIndex:8},{value:"Horizontal ←",paraId:74,tocIndex:8},{value:"Legend items top-bottom",paraId:74,tocIndex:8},{value:"Legend area left-right",paraId:74,tocIndex:8},{value:"LegendLayoutCfg",paraId:75,tocIndex:9},{value:" configuration:",paraId:75,tocIndex:9},{value:"Property",paraId:76,tocIndex:9},{value:"Description",paraId:76,tocIndex:9},{value:"Type",paraId:76,tocIndex:9},{value:"Default Value",paraId:76,tocIndex:9},{value:"Affects",paraId:76,tocIndex:9},{value:"Required",paraId:76,tocIndex:9},{value:"justifyContent",paraId:76,tocIndex:9},{value:"Main axis align",paraId:76,tocIndex:9},{value:"flex-start",paraId:76,tocIndex:9},{value:" | ",paraId:76,tocIndex:9},{value:"flex-end",paraId:76,tocIndex:9},{value:" | ",paraId:76,tocIndex:9},{value:"center",paraId:76,tocIndex:9},{value:"flex-start",paraId:76,tocIndex:9},{value:"Main",paraId:76,tocIndex:9},{value:"alignItems",paraId:76,tocIndex:9},{value:"Cross axis align",paraId:76,tocIndex:9},{value:"flex-start",paraId:76,tocIndex:9},{value:" | ",paraId:76,tocIndex:9},{value:"flex-end",paraId:76,tocIndex:9},{value:" | ",paraId:76,tocIndex:9},{value:"center",paraId:76,tocIndex:9},{value:"flex-start",paraId:76,tocIndex:9},{value:"Cross",paraId:76,tocIndex:9},{value:"flexDirection",paraId:76,tocIndex:9},{value:"Main axis direction",paraId:76,tocIndex:9},{value:"row",paraId:76,tocIndex:9},{value:" | ",paraId:76,tocIndex:9},{value:"column",paraId:76,tocIndex:9},{value:"row",paraId:76,tocIndex:9},{value:" when position is ",paraId:76,tocIndex:9},{value:"top",paraId:76,tocIndex:9},{value:" and ",paraId:76,tocIndex:9},{value:"bottom",paraId:76,tocIndex:9},{value:", ",paraId:76,tocIndex:9},{value:"column",paraId:76,tocIndex:9},{value:" otherwise",paraId:76,tocIndex:9},{value:"-",paraId:76,tocIndex:9},{value:"Through the combination of ",paraId:77,tocIndex:10},{value:"position",paraId:77,tocIndex:10},{value:" and ",paraId:77,tocIndex:10},{value:"layout",paraId:77,tocIndex:10},{value:", precise positioning of legends can be achieved:",paraId:77,tocIndex:10},{value:"// 1. Top center legend\n({\n  legend: {\n    color: {\n      position: 'top', // Legend at top\n      layout: {\n        justifyContent: 'center', // Main axis (horizontal) center\n      },\n    },\n  },\n});\n\n// 2. Right vertical center legend\n({\n  legend: {\n    color: {\n      position: 'right', // Legend at right\n      layout: {\n        justifyContent: 'center', // Main axis (vertical) center\n      },\n    },\n  },\n});\n\n// 3. Bottom right-aligned legend\n({\n  legend: {\n    color: {\n      position: 'bottom', // Legend at bottom\n      layout: {\n        justifyContent: 'flex-end', // Main axis (horizontal) right-align\n      },\n    },\n  },\n});\n\n// 4. Left bottom-aligned legend\n({\n  legend: {\n    color: {\n      position: 'left', // Legend at left\n      layout: {\n        justifyContent: 'flex-end', // Main axis (vertical) bottom-align\n      },\n    },\n  },\n});\n",paraId:78,tocIndex:10},{value:"Through the interactive example below, you can intuitively see the effects of different ",paraId:79,tocIndex:11},{value:"position",paraId:79,tocIndex:11},{value:" and ",paraId:79,tocIndex:11},{value:"layout",paraId:79,tocIndex:11},{value:" combinations:",paraId:79,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 400,\n  width: 600,\n});\nconst container = chart.getContainer();\n\nconst data = [\n  { genre: 'Sports', sold: 50 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\nchart.options({\n  type: 'interval',\n  data,\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  legend: {\n    color: {\n      position: 'top',\n      layout: {\n        justifyContent: 'flex-start',\n        alignItems: 'flex-start',\n      },\n    },\n  },\n});\n\nconst positionOptions = [\n  { value: 'top', label: 'Top (top)' },\n  { value: 'bottom', label: 'Bottom (bottom)' },\n  { value: 'left', label: 'Left (left)' },\n  { value: 'right', label: 'Right (right)' },\n];\n\nconst justifyOptions = [\n  { value: 'flex-start', label: 'Start align (flex-start)' },\n  { value: 'center', label: 'Center align (center)' },\n  { value: 'flex-end', label: 'End align (flex-end)' },\n];\n\nconst alignOptions = [\n  { value: 'flex-start', label: 'Start align (flex-start)' },\n  { value: 'center', label: 'Center align (center)' },\n  { value: 'flex-end', label: 'End align (flex-end)' },\n];\n\n// Create control panel\nconst controlPanel = document.createElement('div');\ncontrolPanel.style.cssText = `\n  margin-bottom: 16px;\n  padding: 16px;\n  background: #f5f5f5;\n  border-radius: 8px;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  gap: 16px;\n`;\n\n// Position selector\nconst positionContainer = document.createElement('div');\npositionContainer.innerHTML = `\n  <label style=\"display: block; margin-bottom: 8px; font-weight: bold;\">\n    Legend Position (position):\n  </label>\n`;\nconst positionSelect = document.createElement('select');\npositionSelect.style.cssText = 'width: 100%; padding: 4px;';\npositionSelect.innerHTML = positionOptions\n  .map(\n    (option, index) =>\n      `<option value=\"${option.value}\" ${index === 0 ? 'selected' : ''}>${\n        option.label\n      }</option>`,\n  )\n  .join('');\npositionContainer.appendChild(positionSelect);\n\n// JustifyContent selector\nconst justifyContainer = document.createElement('div');\njustifyContainer.innerHTML = `\n  <label style=\"display: block; margin-bottom: 8px; font-weight: bold;\">\n    Main Axis Align (justifyContent):\n  </label>\n`;\nconst justifySelect = document.createElement('select');\njustifySelect.style.cssText = 'width: 100%; padding: 4px;';\njustifySelect.innerHTML = justifyOptions\n  .map(\n    (option, index) =>\n      `<option value=\"${option.value}\" ${index === 0 ? 'selected' : ''}>${\n        option.label\n      }</option>`,\n  )\n  .join('');\njustifyContainer.appendChild(justifySelect);\n\n// AlignItems selector\nconst alignContainer = document.createElement('div');\nalignContainer.innerHTML = `\n  <label style=\"display: block; margin-bottom: 8px; font-weight: bold;\">\n    Cross Axis Align (alignItems):\n  </label>\n`;\nconst alignSelect = document.createElement('select');\nalignSelect.style.cssText = 'width: 100%; padding: 4px;';\nalignSelect.innerHTML = alignOptions\n  .map(\n    (option, index) =>\n      `<option value=\"${option.value}\" ${index === 0 ? 'selected' : ''}>${\n        option.label\n      }</option>`,\n  )\n  .join('');\nalignContainer.appendChild(alignSelect);\n\ncontrolPanel.appendChild(positionContainer);\ncontrolPanel.appendChild(justifyContainer);\ncontrolPanel.appendChild(alignContainer);\n\n// Status display\nconst statusDiv = document.createElement('div');\nstatusDiv.style.cssText = `\n  margin-bottom: 16px;\n  padding: 12px;\n  background: #e6f7ff;\n  border: 1px solid #91d5ff;\n  border-radius: 4px;\n  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\n  font-size: 12px;\n`;\n\nconst updateChart = () => {\n  const position = positionSelect.value;\n  const justifyContent = justifySelect.value;\n  const alignItems = alignSelect.value;\n\n  chart.options({\n    legend: {\n      color: {\n        position,\n        layout: {\n          justifyContent,\n          alignItems,\n        },\n      },\n    },\n  });\n  chart.render();\n\n  // Update status display\n  const isHorizontal = position === 'top' || position === 'bottom';\n  const mainAxis = isHorizontal ? 'Horizontal' : 'Vertical';\n  const crossAxis = isHorizontal ? 'Vertical' : 'Horizontal';\n\n  statusDiv.innerHTML = `\nCurrent Config: position: \"${position}\", justifyContent: \"${justifyContent}\", alignItems: \"${alignItems}\"<br>\nMain Axis Direction: ${mainAxis} | Cross Axis Direction: ${crossAxis}<br>\nMain Axis Align: ${justifyContent} | Cross Axis Align: ${alignItems}\n  `;\n};\n\n// Bind events\npositionSelect.addEventListener('change', updateChart);\njustifySelect.addEventListener('change', updateChart);\nalignSelect.addEventListener('change', updateChart);\n\n// Insert control panel\ncontainer.insertBefore(controlPanel, container.firstChild);\ncontainer.insertBefore(statusDiv, container.lastChild);\n\n// Initial render\nupdateChart();\n",paraId:80,tocIndex:11},{value:"Here are some common legend layout requirements and their configuration methods:",paraId:81,tocIndex:12},{value:"// 🎯 Scenario 1: Top center display, suitable for dashboards\n({\n  legend: {\n    color: {\n      position: 'top',\n      layout: {\n        justifyContent: 'center', // Horizontal center\n      },\n    },\n  },\n});\n\n// 🎯 Scenario 2: Right vertical center, suitable for detailed charts\n({\n  legend: {\n    color: {\n      position: 'right',\n      layout: {\n        justifyContent: 'center', // Vertical center\n      },\n    },\n  },\n});\n\n// 🎯 Scenario 3: Bottom left-aligned, space-saving\n({\n  legend: {\n    color: {\n      position: 'bottom',\n      layout: {\n        justifyContent: 'flex-start', // Left-aligned\n      },\n    },\n  },\n});\n\n// 🎯 Scenario 4: Right top-aligned, compact layout\n({\n  legend: {\n    color: {\n      position: 'right',\n      layout: {\n        justifyContent: 'flex-start', // Top-aligned\n      },\n    },\n  },\n});\n\n// 🎯 Scenario 5: Left bottom-aligned, aligned with chart bottom\n({\n  legend: {\n    color: {\n      position: 'left',\n      layout: {\n        justifyContent: 'flex-end', // Bottom-aligned\n      },\n    },\n  },\n});\n",paraId:82,tocIndex:12},{value:"💡 ",paraId:83,tocIndex:12},{value:"Layout Tips",paraId:83,tocIndex:12},{value:"Horizontal center",paraId:84,tocIndex:12},{value:": ",paraId:84,tocIndex:12},{value:"position: 'top'",paraId:84,tocIndex:12},{value:" + ",paraId:84,tocIndex:12},{value:"justifyContent: 'center'",paraId:84,tocIndex:12},{value:"Vertical center",paraId:84,tocIndex:12},{value:": ",paraId:84,tocIndex:12},{value:"position: 'right'",paraId:84,tocIndex:12},{value:" + ",paraId:84,tocIndex:12},{value:"justifyContent: 'center'",paraId:84,tocIndex:12},{value:"Compact layout",paraId:84,tocIndex:12},{value:": Use ",paraId:84,tocIndex:12},{value:"flex-start",paraId:84,tocIndex:12},{value:" to keep legend close to chart",paraId:84,tocIndex:12},{value:" ",paraId:85,tocIndex:13},{value:"number",paraId:85,tocIndex:13},{value:" ",paraId:85,tocIndex:13},{value:"optional",paraId:85,tocIndex:13},{value:" ",paraId:85,tocIndex:13},{value:"Size of the Legend component, used for G2 internal layout calculation and space allocation. Affects the component size on the ",paraId:86,tocIndex:13},{value:"cross axis",paraId:86,tocIndex:13},{value:":",paraId:86,tocIndex:13},{value:"For horizontal layout legends (",paraId:87,tocIndex:13},{value:"position: 'top'",paraId:87,tocIndex:13},{value:" or ",paraId:87,tocIndex:13},{value:"'bottom'",paraId:87,tocIndex:13},{value:"), controls the legend height",paraId:87,tocIndex:13},{value:"For vertical layout legends (",paraId:87,tocIndex:13},{value:"position: 'left'",paraId:87,tocIndex:13},{value:" or ",paraId:87,tocIndex:13},{value:"'right'",paraId:87,tocIndex:13},{value:"), controls the legend width",paraId:87,tocIndex:13},{value:"Manual configuration will cause G2's internal calculation logic to fail, requiring you to configure margin, padding, inset, etc. yourself. See ",paraId:88,tocIndex:13},{value:"Chart Layout",paraId:89,tocIndex:13},{value:". Not recommended for configuration unless customization scenarios are needed.",paraId:88,tocIndex:13},{value:" ",paraId:90,tocIndex:14},{value:"number",paraId:90,tocIndex:14},{value:" ",paraId:90,tocIndex:14},{value:"optional",paraId:90,tocIndex:14},{value:" ",paraId:90,tocIndex:14},{value:"Length of the Legend component, used for G2 internal layout calculation and space allocation. Affects the component size on the ",paraId:91,tocIndex:14},{value:"main axis",paraId:91,tocIndex:14},{value:":",paraId:91,tocIndex:14},{value:"For horizontal layout legends (",paraId:92,tocIndex:14},{value:"position: 'top'",paraId:92,tocIndex:14},{value:" or ",paraId:92,tocIndex:14},{value:"'bottom'",paraId:92,tocIndex:14},{value:"), controls the legend width",paraId:92,tocIndex:14},{value:"For vertical layout legends (",paraId:92,tocIndex:14},{value:"position: 'left'",paraId:92,tocIndex:14},{value:" or ",paraId:92,tocIndex:14},{value:"'right'",paraId:92,tocIndex:14},{value:"), controls the legend height",paraId:92,tocIndex:14},{value:" ",paraId:93,tocIndex:15},{value:"number",paraId:93,tocIndex:15},{value:" ",paraId:93,tocIndex:15},{value:"optional",paraId:93,tocIndex:15},{value:" ",paraId:93,tocIndex:15},{value:"Distance between the Legend component and the chart. Default is ",paraId:94,tocIndex:15},{value:"12",paraId:94,tocIndex:15},{value:".",paraId:94,tocIndex:15},{value:" ",paraId:95,tocIndex:16},{value:"number",paraId:95,tocIndex:16},{value:" ",paraId:95,tocIndex:16},{value:"optional",paraId:95,tocIndex:16},{value:" ",paraId:95,tocIndex:16},{value:"Sort order of the Legend component during layout. Default is ",paraId:96,tocIndex:16},{value:"1",paraId:96,tocIndex:16},{value:". All components in G2 have default sort sizes, with smaller values closer to the chart area. For example, the Title component has a default sort of ",paraId:96,tocIndex:16},{value:"2",paraId:96,tocIndex:16},{value:", which is farther from the chart area than the Legend component with default sort of ",paraId:96,tocIndex:16},{value:"1",paraId:96,tocIndex:16},{value:".",paraId:96,tocIndex:16},{value:" ",paraId:97,tocIndex:17},{value:"LegendTitleCfg",paraId:97,tocIndex:17},{value:" ",paraId:97,tocIndex:17},{value:"optional",paraId:97,tocIndex:17},{value:" ",paraId:97,tocIndex:17},{value:"Legend title configuration. ",paraId:98,tocIndex:17},{value:"LegendTitleCfg",paraId:98,tocIndex:17},{value:" configuration:",paraId:98,tocIndex:17},{value:"Property",paraId:99,tocIndex:17},{value:"Description",paraId:99,tocIndex:17},{value:"Type",paraId:99,tocIndex:17},{value:"Default Value",paraId:99,tocIndex:17},{value:"Required",paraId:99,tocIndex:17},{value:"title",paraId:99,tocIndex:17},{value:"Close title or set title content",paraId:99,tocIndex:17},{value:"false | string",paraId:99,tocIndex:17},{value:"true for continuous legend, false for categorical",paraId:99,tocIndex:17},{value:"titleSpacing",paraId:99,tocIndex:17},{value:"Spacing from title to content area",paraId:99,tocIndex:17},{value:"number | number[]",paraId:99,tocIndex:17},{value:"4",paraId:99,tocIndex:17},{value:"titleInset",paraId:99,tocIndex:17},{value:"Title text inner padding",paraId:99,tocIndex:17},{value:"number | number[]",paraId:99,tocIndex:17},{value:"0",paraId:99,tocIndex:17},{value:"titlePosition",paraId:99,tocIndex:17},{value:"Title position. Can use abbreviated form, e.g., ",paraId:99,tocIndex:17},{value:"i",paraId:99,tocIndex:17},{value:" for ",paraId:99,tocIndex:17},{value:"inner",paraId:99,tocIndex:17},{value:", ",paraId:99,tocIndex:17},{value:"lt",paraId:99,tocIndex:17},{value:" for ",paraId:99,tocIndex:17},{value:"left-top",paraId:99,tocIndex:17},{value:"top",paraId:99,tocIndex:17},{value:" | ",paraId:99,tocIndex:17},{value:"bottom",paraId:99,tocIndex:17},{value:" |",paraId:99,tocIndex:17},{value:"left",paraId:99,tocIndex:17},{value:" |",paraId:99,tocIndex:17},{value:"right",paraId:99,tocIndex:17},{value:" |",paraId:99,tocIndex:17},{value:"left-top",paraId:99,tocIndex:17},{value:" |",paraId:99,tocIndex:17},{value:"left-bottom",paraId:99,tocIndex:17},{value:" |",paraId:99,tocIndex:17},{value:"right-top",paraId:99,tocIndex:17},{value:" |",paraId:99,tocIndex:17},{value:"right-bottom",paraId:99,tocIndex:17},{value:" |",paraId:99,tocIndex:17},{value:"inner",paraId:99,tocIndex:17},{value:"-",paraId:99,tocIndex:17},{value:"titleFontSize",paraId:99,tocIndex:17},{value:"Title text size",paraId:99,tocIndex:17},{value:"number | (datum, index, data) => number",paraId:99,tocIndex:17},{value:"12",paraId:99,tocIndex:17},{value:"titleFontFamily",paraId:99,tocIndex:17},{value:"Title text font",paraId:99,tocIndex:17},{value:"string | (datum, index, data) => string",paraId:99,tocIndex:17},{value:"-",paraId:99,tocIndex:17},{value:"titleFontWeight",paraId:99,tocIndex:17},{value:"Title font weight",paraId:99,tocIndex:17},{value:"number | (datum, index, data) => number",paraId:99,tocIndex:17},{value:"normal",paraId:99,tocIndex:17},{value:"titleLineHeight",paraId:99,tocIndex:17},{value:"Title text line height",paraId:99,tocIndex:17},{value:"number | (datum, index, data) => number",paraId:99,tocIndex:17},{value:"-",paraId:99,tocIndex:17},{value:"titleTextAlign",paraId:99,tocIndex:17},{value:"Set current text alignment for title content",paraId:99,tocIndex:17},{value:"center",paraId:99,tocIndex:17},{value:" | ",paraId:99,tocIndex:17},{value:"end",paraId:99,tocIndex:17},{value:" | ",paraId:99,tocIndex:17},{value:"left",paraId:99,tocIndex:17},{value:" | ",paraId:99,tocIndex:17},{value:"right",paraId:99,tocIndex:17},{value:" | ",paraId:99,tocIndex:17},{value:"start",paraId:99,tocIndex:17},{value:"start",paraId:99,tocIndex:17},{value:"titleTextBaseline",paraId:99,tocIndex:17},{value:"Set current text baseline used when drawing title text",paraId:99,tocIndex:17},{value:"top",paraId:99,tocIndex:17},{value:" | ",paraId:99,tocIndex:17},{value:"middle",paraId:99,tocIndex:17},{value:" | ",paraId:99,tocIndex:17},{value:"bottom",paraId:99,tocIndex:17},{value:" | ",paraId:99,tocIndex:17},{value:"alphabetic",paraId:99,tocIndex:17},{value:" | ",paraId:99,tocIndex:17},{value:"hanging",paraId:99,tocIndex:17},{value:"bottom",paraId:99,tocIndex:17},{value:"titleFill",paraId:99,tocIndex:17},{value:"Title text color",paraId:99,tocIndex:17},{value:"string | (datum, index, data) => string",paraId:99,tocIndex:17},{value:"#1D2129",paraId:99,tocIndex:17},{value:"titleFillOpacity",paraId:99,tocIndex:17},{value:"Title text color opacity",paraId:99,tocIndex:17},{value:"number | (datum, index, data) => number",paraId:99,tocIndex:17},{value:"0.65",paraId:99,tocIndex:17},{value:"titleStroke",paraId:99,tocIndex:17},{value:"Title text stroke color",paraId:99,tocIndex:17},{value:"string | (datum, index, data) => string",paraId:99,tocIndex:17},{value:"-",paraId:99,tocIndex:17},{value:"titleStrokeOpacity",paraId:99,tocIndex:17},{value:"Title text stroke color opacity",paraId:99,tocIndex:17},{value:"number | (datum, index, data) => number",paraId:99,tocIndex:17},{value:"-",paraId:99,tocIndex:17},{value:"titleLineWidth",paraId:99,tocIndex:17},{value:"Title stroke width",paraId:99,tocIndex:17},{value:"number | (datum, index, data) => number",paraId:99,tocIndex:17},{value:"-",paraId:99,tocIndex:17},{value:"titleLineDash",paraId:99,tocIndex:17},{value:"Title text stroke dash configuration. First value is dash segment length, second is gap length. Setting lineDash to [0,0] means no stroke.",paraId:99,tocIndex:17},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:99,tocIndex:17},{value:"-",paraId:99,tocIndex:17},{value:"titleOpacity",paraId:99,tocIndex:17},{value:"Title text overall opacity",paraId:99,tocIndex:17},{value:"number | (datum, index, data) => number",paraId:99,tocIndex:17},{value:"-",paraId:99,tocIndex:17},{value:"titleShadowColor",paraId:99,tocIndex:17},{value:"Title text shadow color",paraId:99,tocIndex:17},{value:"string | (datum, index, data) => string",paraId:99,tocIndex:17},{value:"-",paraId:99,tocIndex:17},{value:"titleShadowBlur",paraId:99,tocIndex:17},{value:"Title text shadow Gaussian blur coefficient",paraId:99,tocIndex:17},{value:"number | (datum, index, data) => number",paraId:99,tocIndex:17},{value:"-",paraId:99,tocIndex:17},{value:"titleShadowOffsetX",paraId:99,tocIndex:17},{value:"Title shadow horizontal offset",paraId:99,tocIndex:17},{value:"number | (datum, index, data) => number",paraId:99,tocIndex:17},{value:"-",paraId:99,tocIndex:17},{value:"titleShadowOffsetY",paraId:99,tocIndex:17},{value:"Title shadow vertical offset",paraId:99,tocIndex:17},{value:"number | (datum, index, data) => number",paraId:99,tocIndex:17},{value:"-",paraId:99,tocIndex:17},{value:"titleCursor",paraId:99,tocIndex:17},{value:"Title cursor style. Same as CSS cursor style.",paraId:99,tocIndex:17},{value:"string | (datum, index, data) => string",paraId:99,tocIndex:17},{value:"default",paraId:99,tocIndex:17},{value:"In the Legend component, when configuring the title, it's not configured as an object, but with the ",paraId:100,tocIndex:17},{value:"title",paraId:100,tocIndex:17},{value:" prefix plus property:",paraId:100,tocIndex:17},{value:"({\n  legend: {\n    size: {\n      title: 'Legend Title',\n      titleSpacing: 0,\n      titleInset: 0,\n      titlePosition: 't',\n      titleFontSize: 16,\n      titleFontFamily: 'sans-serif',\n      titleFontWeight: 500,\n      titleLineHeight: 20,\n      titleTextAlign: 'center',\n      titleTextBaseline: 'middle',\n      titleFill: '#000',\n      titleFillOpacity: 0.9,\n      titleStroke: '#DAF5EC',\n      titleStrokeOpacity: 0.9,\n      titleLineWidth: 2,\n      titleLineDash: [4, 8],\n      titleOpacity: 1,\n      titleShadowColor: '#d3d3d3',\n      titleShadowBlur: 10,\n      titleShadowOffsetX: 10,\n      titleShadowOffsetY: 10,\n      titleCursor: 'pointer',\n    },\n  },\n});\n",paraId:101,tocIndex:17},{value:"Try it:",paraId:102,tocIndex:17},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', height: 300 });\n\nchart.options({\n  type: 'legends',\n  title: 'Legend Title',\n  titleSpacing: 0,\n  titleInset: 0,\n  titlePosition: 't',\n  titleFontSize: 16,\n  titleFontFamily: 'sans-serif',\n  titleFontWeight: 500,\n  titleLineHeight: 20,\n  titleTextAlign: 'center',\n  titleTextBaseline: 'middle',\n  titleFill: '#000',\n  titleFillOpacity: 0.9,\n  titleStroke: '#DAF5EC',\n  titleStrokeOpacity: 0.9,\n  titleLineWidth: 2,\n  titleLineDash: [4, 8],\n  titleOpacity: 1,\n  titleShadowColor: '#d3d3d3',\n  titleShadowBlur: 10,\n  titleShadowOffsetX: 10,\n  titleShadowOffsetY: 10,\n  titleCursor: 'pointer',\n  scale: {\n    size: {\n      type: 'linear',\n      domain: [0, 10],\n      range: [0, 100],\n    },\n  },\n});\n\nchart.render();\n",paraId:103,tocIndex:17},{value:" ",paraId:104,tocIndex:18},{value:"number",paraId:104,tocIndex:18},{value:" ",paraId:104,tocIndex:18},{value:"optional",paraId:104,tocIndex:18},{value:" ",paraId:104,tocIndex:18},{value:"Applicable to ",paraId:105,tocIndex:18},{value:"Categorical Legend",paraId:106,tocIndex:18},{value:". Specifies the number of legend items displayed per row. When empty, it means the number of columns is unlimited.",paraId:105,tocIndex:18},{value:"Legend layout uses ",paraId:107,tocIndex:18},{value:"flow layout",paraId:107,tocIndex:18},{value:" by default.",paraId:107,tocIndex:18},{value:"When ",paraId:108,tocIndex:18},{value:"cols",paraId:108,tocIndex:18},{value:" is specified, ",paraId:108,tocIndex:18},{value:"grid layout",paraId:108,tocIndex:18},{value:" is used.",paraId:108,tocIndex:18},{value:" ",paraId:109,tocIndex:19},{value:"number",paraId:109,tocIndex:19},{value:" ",paraId:109,tocIndex:19},{value:"optional",paraId:109,tocIndex:19},{value:" ",paraId:109,tocIndex:19},{value:"Applicable to ",paraId:110,tocIndex:19},{value:"Categorical Legend",paraId:111,tocIndex:19},{value:". Specifies horizontal spacing between legend items. Default is ",paraId:110,tocIndex:19},{value:"12",paraId:110,tocIndex:19},{value:".",paraId:110,tocIndex:19},{value:" ",paraId:112,tocIndex:20},{value:"number",paraId:112,tocIndex:20},{value:" ",paraId:112,tocIndex:20},{value:"optional",paraId:112,tocIndex:20},{value:" ",paraId:112,tocIndex:20},{value:"Applicable to ",paraId:113,tocIndex:20},{value:"Categorical Legend",paraId:114,tocIndex:20},{value:". Specifies vertical spacing between legend items. Default is ",paraId:113,tocIndex:20},{value:"8",paraId:113,tocIndex:20},{value:".",paraId:113,tocIndex:20},{value:" ",paraId:115,tocIndex:21},{value:"number",paraId:115,tocIndex:21},{value:" ",paraId:115,tocIndex:21},{value:"optional",paraId:115,tocIndex:21},{value:" ",paraId:115,tocIndex:21},{value:"Applicable to ",paraId:116,tocIndex:21},{value:"Categorical Legend",paraId:117,tocIndex:21},{value:". Specifies maximum number of rows for legend. Default is ",paraId:116,tocIndex:21},{value:"3",paraId:116,tocIndex:21},{value:".",paraId:116,tocIndex:21},{value:"⚠️ ",paraId:118,tocIndex:21},{value:"Note",paraId:118,tocIndex:21},{value:": This configuration only takes effect in ",paraId:118,tocIndex:21},{value:"horizontal layout",paraId:118,tocIndex:21},{value:" (",paraId:118,tocIndex:21},{value:"position: 'top'",paraId:118,tocIndex:21},{value:" or ",paraId:118,tocIndex:21},{value:"'bottom'",paraId:118,tocIndex:21},{value:"). When legend position is ",paraId:118,tocIndex:21},{value:"'left'",paraId:118,tocIndex:21},{value:" or ",paraId:118,tocIndex:21},{value:"'right'",paraId:118,tocIndex:21},{value:", G2 automatically calculates the number of rows based on container height, and ",paraId:118,tocIndex:21},{value:"maxRows",paraId:118,tocIndex:21},{value:" configuration will be ignored.",paraId:118,tocIndex:21},{value:" ",paraId:119,tocIndex:22},{value:"number",paraId:119,tocIndex:22},{value:" ",paraId:119,tocIndex:22},{value:"optional",paraId:119,tocIndex:22},{value:" ",paraId:119,tocIndex:22},{value:"Applicable to ",paraId:120,tocIndex:22},{value:"Categorical Legend",paraId:121,tocIndex:22},{value:". Specifies maximum number of columns for legend. Default is ",paraId:120,tocIndex:22},{value:"3",paraId:120,tocIndex:22},{value:".",paraId:120,tocIndex:22},{value:"⚠️ ",paraId:122,tocIndex:22},{value:"Note",paraId:122,tocIndex:22},{value:": This configuration only takes effect in ",paraId:122,tocIndex:22},{value:"vertical layout",paraId:122,tocIndex:22},{value:" (",paraId:122,tocIndex:22},{value:"position: 'left'",paraId:122,tocIndex:22},{value:" or ",paraId:122,tocIndex:22},{value:"'right'",paraId:122,tocIndex:22},{value:"). When legend position is ",paraId:122,tocIndex:22},{value:"'top'",paraId:122,tocIndex:22},{value:" or ",paraId:122,tocIndex:22},{value:"'bottom'",paraId:122,tocIndex:22},{value:", G2 automatically calculates the number of columns based on container width, and ",paraId:122,tocIndex:22},{value:"maxCols",paraId:122,tocIndex:22},{value:" configuration will be ignored.",paraId:122,tocIndex:22},{value:"💡 ",paraId:123,tocIndex:22},{value:"How do maxRows and maxCols affect legend layout?",paraId:123,tocIndex:22},{value:"maxRows and maxCols are used to limit the maximum number of rows and columns in legend layout, but they have different effects under different layout directions:",paraId:124,tocIndex:22},{value:"Parameter",paraId:125,tocIndex:22},{value:"Horizontal Layout (top/bottom)",paraId:125,tocIndex:22},{value:"Vertical Layout (left/right)",paraId:125,tocIndex:22},{value:"maxRows",paraId:125,tocIndex:22},{value:"✅ Limits rows, controls legend height",paraId:125,tocIndex:22},{value:"❌ ",paraId:125,tocIndex:22},{value:"No effect",paraId:125,tocIndex:22},{value:", rows auto-calculated by height",paraId:125,tocIndex:22},{value:"maxCols",paraId:125,tocIndex:22},{value:"❌ ",paraId:125,tocIndex:22},{value:"No effect",paraId:125,tocIndex:22},{value:", rows auto-calculated by width",paraId:125,tocIndex:22},{value:"✅ Limits columns, controls legend width",paraId:125,tocIndex:22},{value:"⚠️ ",paraId:126,tocIndex:22},{value:"Note",paraId:126,tocIndex:22},{value:": When using ",paraId:126,tocIndex:22},{value:"maxRows",paraId:126,tocIndex:22},{value:" and ",paraId:126,tocIndex:22},{value:"maxCols",paraId:126,tocIndex:22},{value:", avoid manually configuring legend container's ",paraId:126,tocIndex:22},{value:"size",paraId:126,tocIndex:22},{value:" and ",paraId:126,tocIndex:22},{value:"length",paraId:126,tocIndex:22},{value:".",paraId:126,tocIndex:22},{value:" ",paraId:127,tocIndex:23},{value:"LegendItemMarkerCfg",paraId:127,tocIndex:23},{value:" ",paraId:127,tocIndex:23},{value:"optional",paraId:127,tocIndex:23},{value:" ",paraId:127,tocIndex:23},{value:"Applicable to ",paraId:128,tocIndex:23},{value:"Categorical Legend",paraId:129,tocIndex:23},{value:". Configure legend item markers. ",paraId:128,tocIndex:23},{value:"LegendItemMarkerCfg",paraId:128,tocIndex:23},{value:" configuration:",paraId:128,tocIndex:23},{value:"Property",paraId:130,tocIndex:23},{value:"Description",paraId:130,tocIndex:23},{value:"Type",paraId:130,tocIndex:23},{value:"Default Value",paraId:130,tocIndex:23},{value:"Required",paraId:130,tocIndex:23},{value:"itemMarker",paraId:130,tocIndex:23},{value:"Legend item marker",paraId:130,tocIndex:23},{value:"Symbols",paraId:130,tocIndex:23},{value:" |(datum, index, data)=>",paraId:130,tocIndex:23},{value:"Symbols",paraId:130,tocIndex:23},{value:"circle",paraId:130,tocIndex:23},{value:"itemMarkerSize",paraId:130,tocIndex:23},{value:"Legend item marker size",paraId:130,tocIndex:23},{value:"number | (datum, index, data) => number",paraId:130,tocIndex:23},{value:"8",paraId:130,tocIndex:23},{value:"itemMarkerFill",paraId:130,tocIndex:23},{value:"Legend item marker fill color",paraId:130,tocIndex:23},{value:"string | (datum, index, data) => string",paraId:130,tocIndex:23},{value:"-",paraId:130,tocIndex:23},{value:"itemMarkerFillOpacity",paraId:130,tocIndex:23},{value:"Legend item marker fill opacity",paraId:130,tocIndex:23},{value:"number | (datum, index, data) => number",paraId:130,tocIndex:23},{value:"1",paraId:130,tocIndex:23},{value:"itemMarkerStroke",paraId:130,tocIndex:23},{value:"Legend item marker stroke",paraId:130,tocIndex:23},{value:"string | (datum, index, data) => string",paraId:130,tocIndex:23},{value:"-",paraId:130,tocIndex:23},{value:"itemMarkerStrokeOpacity",paraId:130,tocIndex:23},{value:"Legend item marker stroke opacity",paraId:130,tocIndex:23},{value:"number | (datum, index, data) => number",paraId:130,tocIndex:23},{value:"-",paraId:130,tocIndex:23},{value:"itemMarkerLineWidth",paraId:130,tocIndex:23},{value:"Legend item marker stroke width",paraId:130,tocIndex:23},{value:"number | (datum, index, data) => number",paraId:130,tocIndex:23},{value:"4",paraId:130,tocIndex:23},{value:" for line markers",paraId:130,tocIndex:23},{value:"itemMarkerLineDash",paraId:130,tocIndex:23},{value:"Legend item marker stroke dash configuration. First value is dash segment length, second is gap length. Setting lineDash to [0,0] means no stroke.",paraId:130,tocIndex:23},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:130,tocIndex:23},{value:"-",paraId:130,tocIndex:23},{value:"itemMarkerOpacity",paraId:130,tocIndex:23},{value:"Legend item marker overall opacity",paraId:130,tocIndex:23},{value:"number | (datum, index, data) => number",paraId:130,tocIndex:23},{value:"-",paraId:130,tocIndex:23},{value:"itemMarkerShadowColor",paraId:130,tocIndex:23},{value:"Legend item marker shadow color",paraId:130,tocIndex:23},{value:"string | (datum, index, data) => string",paraId:130,tocIndex:23},{value:"-",paraId:130,tocIndex:23},{value:"itemMarkerShadowBlur",paraId:130,tocIndex:23},{value:"Legend item marker shadow Gaussian blur coefficient",paraId:130,tocIndex:23},{value:"number | (datum, index, data) => number",paraId:130,tocIndex:23},{value:"-",paraId:130,tocIndex:23},{value:"itemMarkerShadowOffsetX",paraId:130,tocIndex:23},{value:"Set horizontal distance of shadow from legend item marker",paraId:130,tocIndex:23},{value:"number | (datum, index, data) => number",paraId:130,tocIndex:23},{value:"-",paraId:130,tocIndex:23},{value:"itemMarkerShadowOffsetY",paraId:130,tocIndex:23},{value:"Set vertical distance of shadow from legend item marker",paraId:130,tocIndex:23},{value:"number | (datum, index, data) => number",paraId:130,tocIndex:23},{value:"-",paraId:130,tocIndex:23},{value:"itemMarkerCursor",paraId:130,tocIndex:23},{value:"Legend item marker cursor style. Same as CSS cursor style.",paraId:130,tocIndex:23},{value:"string | (datum, index, data) => string",paraId:130,tocIndex:23},{value:"default",paraId:130,tocIndex:23},{value:"Property",paraId:131,tocIndex:24},{value:"Description",paraId:131,tocIndex:24},{value:"bowtie",paraId:131,tocIndex:24},{value:"Shape type: Bowtie",paraId:131,tocIndex:24},{value:"cross",paraId:131,tocIndex:24},{value:"Shape type: Cross",paraId:131,tocIndex:24},{value:"dash",paraId:131,tocIndex:24},{value:"Shape type: Dash",paraId:131,tocIndex:24},{value:"diamond",paraId:131,tocIndex:24},{value:"Shape type: Diamond",paraId:131,tocIndex:24},{value:"dot",paraId:131,tocIndex:24},{value:"Shape type: Dot",paraId:131,tocIndex:24},{value:"hexagon",paraId:131,tocIndex:24},{value:"Shape type: Hexagon",paraId:131,tocIndex:24},{value:"hollowBowtie",paraId:131,tocIndex:24},{value:"Shape type: Hollow Bowtie",paraId:131,tocIndex:24},{value:"hollowDiamond",paraId:131,tocIndex:24},{value:"Shape type: Hollow Diamond",paraId:131,tocIndex:24},{value:"hollowHexagon",paraId:131,tocIndex:24},{value:"Shape type: Hollow Hexagon",paraId:131,tocIndex:24},{value:"hollowPoint",paraId:131,tocIndex:24},{value:"Shape type: Hollow Point",paraId:131,tocIndex:24},{value:"hollowSquare",paraId:131,tocIndex:24},{value:"Shape type: Hollow Square",paraId:131,tocIndex:24},{value:"hollowTriangle",paraId:131,tocIndex:24},{value:"Shape type: Hollow Triangle",paraId:131,tocIndex:24},{value:"hollowTriangleDown",paraId:131,tocIndex:24},{value:"Shape type: Hollow Triangle Down",paraId:131,tocIndex:24},{value:"hv",paraId:131,tocIndex:24},{value:"Style type: HV Path",paraId:131,tocIndex:24},{value:"hvh",paraId:131,tocIndex:24},{value:"Style type: HVH Path",paraId:131,tocIndex:24},{value:"hyphen",paraId:131,tocIndex:24},{value:"Shape type: Hyphen",paraId:131,tocIndex:24},{value:"line",paraId:131,tocIndex:24},{value:"Shape type: Line",paraId:131,tocIndex:24},{value:"plus",paraId:131,tocIndex:24},{value:"Shape type: Plus",paraId:131,tocIndex:24},{value:"point",paraId:131,tocIndex:24},{value:"Shape type: Solid Point",paraId:131,tocIndex:24},{value:"rect",paraId:131,tocIndex:24},{value:"Shape type: Rectangle",paraId:131,tocIndex:24},{value:"smooth",paraId:131,tocIndex:24},{value:"Style type: Smooth Curve",paraId:131,tocIndex:24},{value:"square",paraId:131,tocIndex:24},{value:"Shape type: Square",paraId:131,tocIndex:24},{value:"tick",paraId:131,tocIndex:24},{value:"Shape type: Tick",paraId:131,tocIndex:24},{value:"triangleDown",paraId:131,tocIndex:24},{value:"Shape type: Triangle Down",paraId:131,tocIndex:24},{value:"triangle",paraId:131,tocIndex:24},{value:"Shape type: Triangle",paraId:131,tocIndex:24},{value:"vh",paraId:131,tocIndex:24},{value:"Style type: VH Path",paraId:131,tocIndex:24},{value:"vhv",paraId:131,tocIndex:24},{value:"Style type: VHV Path",paraId:131,tocIndex:24},{value:"Try it:",paraId:132,tocIndex:24},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\n// Available itemMarker shapes\nconst shapeList = [\n  'bowtie',\n  'cross',\n  'dash',\n  'diamond',\n  'dot',\n  'hexagon',\n  'hollowBowtie',\n  'hollowDiamond',\n  'hollowHexagon',\n  'hollowPoint',\n  'hollowSquare',\n  'hollowTriangle',\n  'hollowTriangleDown',\n  'hv',\n  'hvh',\n  'hyphen',\n  'line',\n  'plus',\n  'point',\n  'rect',\n  'smooth',\n  'square',\n  'tick',\n  'triangleDown',\n  'triangle',\n  'vh',\n  'vhv',\n];\nconst shapeMap = shapeList.map((p) => {\n  return {\n    label: p,\n    value: p,\n  };\n});\n\nchart.options({\n  type: 'legends',\n  height: 60,\n  itemMarker: 'bowtie',\n  scale: {\n    color: {\n      type: 'ordinal',\n      domain: ['a', 'b'],\n      range: ['steelblue', 'orange'],\n    },\n  },\n});\n\nconst handleSetShape = (shape) => {\n  chart.options({\n    itemMarker: shape,\n  });\n  chart.render(); // Re-render the chart\n};\n\nconst selectorContainer = document.createElement('div');\nselectorContainer.textContent = 'Select legend item marker shape ';\nconst selector = document.createElement('select');\nselector.innerHTML = shapeMap.map(\n  (shape, index) =>\n    `<option value=\"${shape.value}\" ${index === 0 ? 'selected' : ''}>${\n      shape.label\n    }</option>`,\n);\nselector.onchange = (e) => {\n  handleSetShape(e.target.value);\n};\nselectorContainer.appendChild(selector);\ncontainer.insertBefore(selectorContainer, container.childNodes[0]);\n\nchart.render();\n",paraId:133,tocIndex:24},{value:"In the Legend component, when configuring legend item markers, it's not configured as an object, but with the ",paraId:134,tocIndex:24},{value:"itemMarker",paraId:134,tocIndex:24},{value:" prefix plus property:",paraId:134,tocIndex:24},{value:"({\n  legend: {\n    color: {\n      itemMarker: 'rect',\n      itemMarkerSize: 20,\n      itemMarkerFill: '#000',\n      itemMarkerFillOpacity: 0.9,\n      itemMarkerStroke: '#DAF5EC',\n      itemMarkerStrokeOpacity: 0.9,\n      itemMarkerLineWidth: 2,\n      itemMarkerLineDash: [4, 8],\n      itemMarkerOpacity: 1,\n      itemMarkerShadowColor: '#d3d3d3',\n      itemMarkerShadowBlur: 10,\n      itemMarkerShadowOffsetX: 10,\n      itemMarkerShadowOffsetY: 10,\n      itemMarkerCursor: 'pointer',\n    },\n  },\n});\n",paraId:135,tocIndex:24},{value:" ",paraId:136,tocIndex:25},{value:"LegendItemLabelCfg",paraId:136,tocIndex:25},{value:" ",paraId:136,tocIndex:25},{value:"optional",paraId:136,tocIndex:25},{value:" ",paraId:136,tocIndex:25},{value:"Applicable to ",paraId:137,tocIndex:25},{value:"Categorical Legend",paraId:138,tocIndex:25},{value:". Configure legend item labels. ",paraId:137,tocIndex:25},{value:"LegendItemLabelCfg",paraId:137,tocIndex:25},{value:" configuration:",paraId:137,tocIndex:25},{value:"Property",paraId:139,tocIndex:25},{value:"Description",paraId:139,tocIndex:25},{value:"Type",paraId:139,tocIndex:25},{value:"Default Value",paraId:139,tocIndex:25},{value:"Required",paraId:139,tocIndex:25},{value:"itemLabelText",paraId:139,tocIndex:25},{value:"Legend item label content",paraId:139,tocIndex:25},{value:"string | (datum, index, data) => string",paraId:139,tocIndex:25},{value:"-",paraId:139,tocIndex:25},{value:"itemLabelFontSize",paraId:139,tocIndex:25},{value:"Legend item label text size",paraId:139,tocIndex:25},{value:"number | (datum, index, data) => number",paraId:139,tocIndex:25},{value:"12",paraId:139,tocIndex:25},{value:"itemLabelFontFamily",paraId:139,tocIndex:25},{value:"Legend item label text font",paraId:139,tocIndex:25},{value:"string | (datum, index, data) => string",paraId:139,tocIndex:25},{value:"-",paraId:139,tocIndex:25},{value:"itemLabelFontWeight",paraId:139,tocIndex:25},{value:"Legend item label font weight",paraId:139,tocIndex:25},{value:"number | (datum, index, data) => number",paraId:139,tocIndex:25},{value:"normal",paraId:139,tocIndex:25},{value:"itemLabelLineHeight",paraId:139,tocIndex:25},{value:"Legend item label text line height",paraId:139,tocIndex:25},{value:"number | (datum, index, data) => number",paraId:139,tocIndex:25},{value:"-",paraId:139,tocIndex:25},{value:"itemLabelTextAlign",paraId:139,tocIndex:25},{value:"Set current text alignment for legend item label content",paraId:139,tocIndex:25},{value:"center",paraId:139,tocIndex:25},{value:" | ",paraId:139,tocIndex:25},{value:"end",paraId:139,tocIndex:25},{value:" | ",paraId:139,tocIndex:25},{value:"left",paraId:139,tocIndex:25},{value:" | ",paraId:139,tocIndex:25},{value:"right",paraId:139,tocIndex:25},{value:" | ",paraId:139,tocIndex:25},{value:"start",paraId:139,tocIndex:25},{value:"start",paraId:139,tocIndex:25},{value:"itemLabelTextBaseline",paraId:139,tocIndex:25},{value:"Set current text baseline used when drawing legend item label text",paraId:139,tocIndex:25},{value:"top",paraId:139,tocIndex:25},{value:" | ",paraId:139,tocIndex:25},{value:"middle",paraId:139,tocIndex:25},{value:" | ",paraId:139,tocIndex:25},{value:"bottom",paraId:139,tocIndex:25},{value:" | ",paraId:139,tocIndex:25},{value:"alphabetic",paraId:139,tocIndex:25},{value:" | ",paraId:139,tocIndex:25},{value:"hanging",paraId:139,tocIndex:25},{value:"bottom",paraId:139,tocIndex:25},{value:"itemLabelFill",paraId:139,tocIndex:25},{value:"Legend item label text color",paraId:139,tocIndex:25},{value:"string | (datum, index, data) => string",paraId:139,tocIndex:25},{value:"#1D2129",paraId:139,tocIndex:25},{value:"itemLabelFillOpacity",paraId:139,tocIndex:25},{value:"Legend item label text color opacity",paraId:139,tocIndex:25},{value:"number | (datum, index, data) => number",paraId:139,tocIndex:25},{value:"0.9",paraId:139,tocIndex:25},{value:"itemLabelStroke",paraId:139,tocIndex:25},{value:"Legend item label text stroke color",paraId:139,tocIndex:25},{value:"string | (datum, index, data) => string",paraId:139,tocIndex:25},{value:"-",paraId:139,tocIndex:25},{value:"itemLabelStrokeOpacity",paraId:139,tocIndex:25},{value:"Legend item label text stroke color opacity",paraId:139,tocIndex:25},{value:"number | (datum, index, data) => number",paraId:139,tocIndex:25},{value:"-",paraId:139,tocIndex:25},{value:"itemLabelLineWidth",paraId:139,tocIndex:25},{value:"Legend item label text stroke width",paraId:139,tocIndex:25},{value:"number | (datum, index, data) => number",paraId:139,tocIndex:25},{value:"-",paraId:139,tocIndex:25},{value:"itemLabelLineDash",paraId:139,tocIndex:25},{value:"Legend item label text stroke dash configuration. First value is dash segment length, second is gap length. Setting lineDash to [0,0] means no stroke.",paraId:139,tocIndex:25},{value:"[number,number] | (da tu m, index, data) => [number , number]",paraId:139,tocIndex:25},{value:"-",paraId:139,tocIndex:25},{value:"itemLabelOpacity",paraId:139,tocIndex:25},{value:"Legend item label text overall opacity",paraId:139,tocIndex:25},{value:"number | (datum, index, data) => number",paraId:139,tocIndex:25},{value:"-",paraId:139,tocIndex:25},{value:"itemLabelShadowColor",paraId:139,tocIndex:25},{value:"Legend item label text shadow color",paraId:139,tocIndex:25},{value:"string | (datum, index, data) => string",paraId:139,tocIndex:25},{value:"-",paraId:139,tocIndex:25},{value:"itemLabelShadowBlur",paraId:139,tocIndex:25},{value:"Legend item label text shadow Gaussian blur coefficient",paraId:139,tocIndex:25},{value:"number | (datum, index, data) => number",paraId:139,tocIndex:25},{value:"-",paraId:139,tocIndex:25},{value:"itemLabelShadowOffsetX",paraId:139,tocIndex:25},{value:"Set horizontal distance of shadow from legend item label text",paraId:139,tocIndex:25},{value:"number | (datum, index, data) => number",paraId:139,tocIndex:25},{value:"-",paraId:139,tocIndex:25},{value:"itemLabelShadowOffsetY",paraId:139,tocIndex:25},{value:"Set vertical distance of shadow from legend item label text",paraId:139,tocIndex:25},{value:"number | (datum, index, data) => number",paraId:139,tocIndex:25},{value:"-",paraId:139,tocIndex:25},{value:"itemLabelCursor",paraId:139,tocIndex:25},{value:"Legend item label cursor style. Same as CSS cursor style.",paraId:139,tocIndex:25},{value:"string | (datum, index, data) => string",paraId:139,tocIndex:25},{value:"default",paraId:139,tocIndex:25},{value:"In the Legend component, when configuring legend item labels, it's not configured as an object, but with the ",paraId:140,tocIndex:25},{value:"itemLabel",paraId:140,tocIndex:25},{value:" prefix plus property:",paraId:140,tocIndex:25},{value:"({\n  legend: {\n    color: {\n      itemLabelText: 'Legend Item Label',\n      itemLabelFontSize: 16,\n      itemLabelFontFamily: 'sans-serif',\n      itemLabelFontWeight: 500,\n      itemLabelLineHeight: 20,\n      itemLabelTextAlign: 'center',\n      itemLabelTextBaseline: 'middle',\n      itemLabelFill: '#000',\n      itemLabelFillOpacity: 0.9,\n      itemLabelStroke: '#DAF5EC',\n      itemLabelStrokeOpacity: 0.9,\n      itemLabelLineWidth: 2,\n      itemLabelLineDash: [4, 8],\n      itemLabelOpacity: 1,\n      itemLabelShadowColor: '#d3d3d3',\n      itemLabelShadowBlur: 10,\n      itemLabelShadowOffsetX: 10,\n      itemLabelShadowOffsetY: 10,\n      itemLabelCursor: 'pointer',\n    },\n  },\n});\n",paraId:141,tocIndex:25},{value:" ",paraId:142,tocIndex:26},{value:"LegendItemValueCfg",paraId:142,tocIndex:26},{value:" ",paraId:142,tocIndex:26},{value:"optional",paraId:142,tocIndex:26},{value:" ",paraId:142,tocIndex:26},{value:"Applicable to ",paraId:143,tocIndex:26},{value:"Categorical Legend",paraId:144,tocIndex:26},{value:". Configure legend item values. ",paraId:143,tocIndex:26},{value:"LegendItemValueCfg",paraId:143,tocIndex:26},{value:" configuration:",paraId:143,tocIndex:26},{value:"Property",paraId:145,tocIndex:26},{value:"Description",paraId:145,tocIndex:26},{value:"Type",paraId:145,tocIndex:26},{value:"Default Value",paraId:145,tocIndex:26},{value:"Required",paraId:145,tocIndex:26},{value:"itemValueText",paraId:145,tocIndex:26},{value:"Legend item value content",paraId:145,tocIndex:26},{value:"string | (datum, index, data) => string",paraId:145,tocIndex:26},{value:"-",paraId:145,tocIndex:26},{value:"itemValueFontSize",paraId:145,tocIndex:26},{value:"Legend item value text size",paraId:145,tocIndex:26},{value:"number | (datum, index, data) => number",paraId:145,tocIndex:26},{value:"12",paraId:145,tocIndex:26},{value:"itemValueFontFamily",paraId:145,tocIndex:26},{value:"Legend item value text font",paraId:145,tocIndex:26},{value:"string | (datum, index, data) => string",paraId:145,tocIndex:26},{value:"-",paraId:145,tocIndex:26},{value:"itemValueFontWeight",paraId:145,tocIndex:26},{value:"Legend item value font weight",paraId:145,tocIndex:26},{value:"number | (datum, index, data) => number",paraId:145,tocIndex:26},{value:"normal",paraId:145,tocIndex:26},{value:"itemValueLineHeight",paraId:145,tocIndex:26},{value:"Legend item value text line height",paraId:145,tocIndex:26},{value:"number | (datum, index, data) => number",paraId:145,tocIndex:26},{value:"-",paraId:145,tocIndex:26},{value:"itemValueTextAlign",paraId:145,tocIndex:26},{value:"Set current text alignment for legend item value content",paraId:145,tocIndex:26},{value:"center",paraId:145,tocIndex:26},{value:" | ",paraId:145,tocIndex:26},{value:"end",paraId:145,tocIndex:26},{value:" | ",paraId:145,tocIndex:26},{value:"left",paraId:145,tocIndex:26},{value:" | ",paraId:145,tocIndex:26},{value:"right",paraId:145,tocIndex:26},{value:" | ",paraId:145,tocIndex:26},{value:"start",paraId:145,tocIndex:26},{value:"start",paraId:145,tocIndex:26},{value:"itemValueTextBaseline",paraId:145,tocIndex:26},{value:"Set current text baseline used when drawing legend item value text",paraId:145,tocIndex:26},{value:"top",paraId:145,tocIndex:26},{value:" | ",paraId:145,tocIndex:26},{value:"middle",paraId:145,tocIndex:26},{value:" | ",paraId:145,tocIndex:26},{value:"bottom",paraId:145,tocIndex:26},{value:" | ",paraId:145,tocIndex:26},{value:"alphabetic",paraId:145,tocIndex:26},{value:" | ",paraId:145,tocIndex:26},{value:"hanging",paraId:145,tocIndex:26},{value:"bottom",paraId:145,tocIndex:26},{value:"itemValueFill",paraId:145,tocIndex:26},{value:"Legend item value text color",paraId:145,tocIndex:26},{value:"string | (datum, index, data) => string",paraId:145,tocIndex:26},{value:"#1D2129",paraId:145,tocIndex:26},{value:"itemValueFillOpacity",paraId:145,tocIndex:26},{value:"Legend item value text color opacity",paraId:145,tocIndex:26},{value:"number | (datum, index, data) => number",paraId:145,tocIndex:26},{value:"0.65",paraId:145,tocIndex:26},{value:"itemValueStroke",paraId:145,tocIndex:26},{value:"Legend item value text stroke color",paraId:145,tocIndex:26},{value:"string | (datum, index, data) => string",paraId:145,tocIndex:26},{value:"-",paraId:145,tocIndex:26},{value:"itemValueStrokeOpacity",paraId:145,tocIndex:26},{value:"Legend item value text stroke color opacity",paraId:145,tocIndex:26},{value:"number | (datum, index, data) => number",paraId:145,tocIndex:26},{value:"-",paraId:145,tocIndex:26},{value:"itemValueLineWidth",paraId:145,tocIndex:26},{value:"Legend item value text stroke width",paraId:145,tocIndex:26},{value:"number | (datum, index, data) => number",paraId:145,tocIndex:26},{value:"-",paraId:145,tocIndex:26},{value:"itemValueLineDash",paraId:145,tocIndex:26},{value:"Legend item value text stroke dash configuration. First value is dash segment length, second is gap length. Setting lineDash to [0,0] means no stroke.",paraId:145,tocIndex:26},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:145,tocIndex:26},{value:"-",paraId:145,tocIndex:26},{value:"itemValueOpacity",paraId:145,tocIndex:26},{value:"Legend item value text overall opacity",paraId:145,tocIndex:26},{value:"number | (datum, index, data) => number",paraId:145,tocIndex:26},{value:"-",paraId:145,tocIndex:26},{value:"itemValueShadowColor",paraId:145,tocIndex:26},{value:"Legend item value text shadow color",paraId:145,tocIndex:26},{value:"string | (datum, index, data) => string",paraId:145,tocIndex:26},{value:"-",paraId:145,tocIndex:26},{value:"itemValueShadowBlur",paraId:145,tocIndex:26},{value:"Legend item value text shadow Gaussian blur coefficient",paraId:145,tocIndex:26},{value:"number | (datum, index, data) => number",paraId:145,tocIndex:26},{value:"-",paraId:145,tocIndex:26},{value:"itemValueShadowOffsetX",paraId:145,tocIndex:26},{value:"Set horizontal distance of shadow from legend item value text",paraId:145,tocIndex:26},{value:"number | (datum, index, data) => number",paraId:145,tocIndex:26},{value:"-",paraId:145,tocIndex:26},{value:"itemValueShadowOffsetY",paraId:145,tocIndex:26},{value:"Set vertical distance of shadow from legend item value text",paraId:145,tocIndex:26},{value:"number | (datum, index, data) => number",paraId:145,tocIndex:26},{value:"-",paraId:145,tocIndex:26},{value:"itemValueCursor",paraId:145,tocIndex:26},{value:"Legend item value cursor style. Same as CSS cursor style.",paraId:145,tocIndex:26},{value:"string | (datum, index, data) => string",paraId:145,tocIndex:26},{value:"default",paraId:145,tocIndex:26},{value:"In the Legend component, when configuring legend item values, it's not configured as an object, but with the ",paraId:146,tocIndex:26},{value:"itemValue",paraId:146,tocIndex:26},{value:" prefix plus property:",paraId:146,tocIndex:26},{value:"({\n  legend: {\n    color: {\n      itemValueText: 'Legend Item Value',\n      itemValueFontSize: 16,\n      itemValueFontFamily: 'sans-serif',\n      itemValueFontWeight: 500,\n      itemValueLineHeight: 20,\n      itemValueTextAlign: 'center',\n      itemValueTextBaseline: 'middle',\n      itemValueFill: '#000',\n      itemValueFillOpacity: 0.9,\n      itemValueStroke: '#DAF5EC',\n      itemValueStrokeOpacity: 0.9,\n      itemValueLineWidth: 2,\n      itemValueLineDash: [4, 8],\n      itemValueOpacity: 1,\n      itemValueShadowColor: '#d3d3d3',\n      itemValueShadowBlur: 10,\n      itemValueShadowOffsetX: 10,\n      itemValueShadowOffsetY: 10,\n      itemValueCursor: 'pointer',\n    },\n  },\n});\n",paraId:147,tocIndex:26},{value:" ",paraId:148,tocIndex:27},{value:"LegendItemBackgroundCfg",paraId:148,tocIndex:27},{value:" ",paraId:148,tocIndex:27},{value:"optional",paraId:148,tocIndex:27},{value:" ",paraId:148,tocIndex:27},{value:"Applicable to ",paraId:149,tocIndex:27},{value:"Categorical Legend",paraId:150,tocIndex:27},{value:". Configure legend item backgrounds. ",paraId:149,tocIndex:27},{value:"LegendItemBackgroundCfg",paraId:149,tocIndex:27},{value:" configuration:",paraId:149,tocIndex:27},{value:"Property",paraId:151,tocIndex:27},{value:"Description",paraId:151,tocIndex:27},{value:"Type",paraId:151,tocIndex:27},{value:"Default Value",paraId:151,tocIndex:27},{value:"Required",paraId:151,tocIndex:27},{value:"itemBackgroundRadius",paraId:151,tocIndex:27},{value:"Legend item background border radius",paraId:151,tocIndex:27},{value:"number | (datum, index, data) => number",paraId:151,tocIndex:27},{value:"0",paraId:151,tocIndex:27},{value:"itemBackgroundFill",paraId:151,tocIndex:27},{value:"Legend item background fill color",paraId:151,tocIndex:27},{value:"string | (datum, index, data) => string",paraId:151,tocIndex:27},{value:"transparent",paraId:151,tocIndex:27},{value:"itemBackgroundFillOpacity",paraId:151,tocIndex:27},{value:"Legend item background fill opacity",paraId:151,tocIndex:27},{value:"number | (datum, index, data) => number",paraId:151,tocIndex:27},{value:"-",paraId:151,tocIndex:27},{value:"itemBackgroundStroke",paraId:151,tocIndex:27},{value:"Legend item background stroke",paraId:151,tocIndex:27},{value:"string | (datum, index, data) => string",paraId:151,tocIndex:27},{value:"-",paraId:151,tocIndex:27},{value:"itemBackgroundStrokeOpacity",paraId:151,tocIndex:27},{value:"Legend item background stroke opacity",paraId:151,tocIndex:27},{value:"number | (datum, index, data) => number",paraId:151,tocIndex:27},{value:"-",paraId:151,tocIndex:27},{value:"itemBackgroundLineWidth",paraId:151,tocIndex:27},{value:"Legend item background stroke width",paraId:151,tocIndex:27},{value:"number | (datum, index, data) => number",paraId:151,tocIndex:27},{value:"-",paraId:151,tocIndex:27},{value:"itemBackgroundLineDash",paraId:151,tocIndex:27},{value:"Legend item background stroke dash configuration. First value is dash segment length, second is gap length. Setting lineDash to [0,0] means no stroke.",paraId:151,tocIndex:27},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:151,tocIndex:27},{value:"-",paraId:151,tocIndex:27},{value:"itemBackgroundOpacity",paraId:151,tocIndex:27},{value:"Legend item background overall opacity",paraId:151,tocIndex:27},{value:"number | (datum, index, data) => number",paraId:151,tocIndex:27},{value:"-",paraId:151,tocIndex:27},{value:"itemBackgroundShadowColor",paraId:151,tocIndex:27},{value:"Legend item background shadow color",paraId:151,tocIndex:27},{value:"string | (datum, index, data) => string",paraId:151,tocIndex:27},{value:"-",paraId:151,tocIndex:27},{value:"itemBackgroundShadowBlur",paraId:151,tocIndex:27},{value:"Legend item background shadow Gaussian blur coefficient",paraId:151,tocIndex:27},{value:"number | (datum, index, data) => number",paraId:151,tocIndex:27},{value:"-",paraId:151,tocIndex:27},{value:"itemBackgroundShadowOffsetX",paraId:151,tocIndex:27},{value:"Set horizontal distance of shadow from legend item background",paraId:151,tocIndex:27},{value:"number | (datum, index, data) => number",paraId:151,tocIndex:27},{value:"-",paraId:151,tocIndex:27},{value:"itemBackgroundShadowOffsetY",paraId:151,tocIndex:27},{value:"Set vertical distance of shadow from legend item background",paraId:151,tocIndex:27},{value:"number | (datum, index, data) => number",paraId:151,tocIndex:27},{value:"-",paraId:151,tocIndex:27},{value:"itemBackgroundCursor",paraId:151,tocIndex:27},{value:"Legend item background cursor style. Same as CSS cursor style.",paraId:151,tocIndex:27},{value:"string | (datum, index, data) => string",paraId:151,tocIndex:27},{value:"default",paraId:151,tocIndex:27},{value:"In the Legend component, when configuring legend item backgrounds, it's not configured as an object, but with the ",paraId:152,tocIndex:27},{value:"itemBackground",paraId:152,tocIndex:27},{value:" prefix plus property:",paraId:152,tocIndex:27},{value:"({\n  legend: {\n    color: {\n      itemBackgroundRadius: 50,\n      itemBackgroundFill: '#000',\n      itemBackgroundFillOpacity: 0.9,\n      itemBackgroundStroke: '#DAF5EC',\n      itemBackgroundStrokeOpacity: 0.9,\n      itemBackgroundLineWidth: 2,\n      itemBackgroundLineDash: [4, 8],\n      itemBackgroundOpacity: 1,\n      itemBackgroundShadowColor: '#d3d3d3',\n      itemBackgroundShadowBlur: 10,\n      itemBackgroundShadowOffsetX: 10,\n      itemBackgroundShadowOffsetY: 10,\n      itemBackgroundCursor: 'pointer',\n    },\n  },\n});\n",paraId:153,tocIndex:27},{value:"Next, try combining various properties of ",paraId:154,tocIndex:27},{value:"itemMarker",paraId:154,tocIndex:27},{value:", ",paraId:154,tocIndex:27},{value:"itemLabel",paraId:154,tocIndex:27},{value:", ",paraId:154,tocIndex:27},{value:"itemValue",paraId:154,tocIndex:27},{value:", and ",paraId:154,tocIndex:27},{value:"itemBackground",paraId:154,tocIndex:27},{value:" to configure a custom legend:",paraId:154,tocIndex:27},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', height: 350 });\nconst shapeList = ['bowtie', 'smooth', 'hv', 'rect', 'hollowPoint'];\nconst data = [\n  { genre: 'Sports', sold: 50 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\nchart.options({\n  type: 'interval',\n  data,\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  legend: {\n    color: {\n      size: 100,\n      itemWidth: 120,\n      // itemMarker\n      itemMarker: (d, index) => shapeList[index],\n      // itemLabel\n      itemLabelFill: 'red',\n      // itemValue\n      itemValueText: (d, index) => data[index]['sold'],\n      // itemBackground\n      itemBackgroundFill: (d) => d.color,\n      itemBackgroundFillOpacity: 0.2,\n    },\n  },\n});\n\nchart.render();\n",paraId:155,tocIndex:27},{value:" ",paraId:156,tocIndex:28},{value:"number",paraId:156,tocIndex:28},{value:" ",paraId:156,tocIndex:28},{value:"optional",paraId:156,tocIndex:28},{value:" ",paraId:156,tocIndex:28},{value:"Applicable to ",paraId:157,tocIndex:28},{value:"Categorical Legend",paraId:158,tocIndex:28},{value:". Configure legend item width.",paraId:157,tocIndex:28},{value:" ",paraId:159,tocIndex:29},{value:"number|number[]",paraId:159,tocIndex:29},{value:" ",paraId:159,tocIndex:29},{value:"optional",paraId:159,tocIndex:29},{value:" ",paraId:159,tocIndex:29},{value:"Applicable to ",paraId:160,tocIndex:29},{value:"Categorical Legend",paraId:161,tocIndex:29},{value:". Configure space allocation for legend item marker, label, and value. Default is ",paraId:160,tocIndex:29},{value:"[1, 1, 1]",paraId:160,tocIndex:29},{value:".",paraId:160,tocIndex:29},{value:" ",paraId:162,tocIndex:30},{value:"number|number[]",paraId:162,tocIndex:30},{value:" ",paraId:162,tocIndex:30},{value:"optional",paraId:162,tocIndex:30},{value:" ",paraId:162,tocIndex:30},{value:"Applicable to ",paraId:163,tocIndex:30},{value:"Categorical Legend",paraId:164,tocIndex:30},{value:". Configure spacing between legend item marker, label, value and focus icon. Default is ",paraId:163,tocIndex:30},{value:"[8, 8, 4]",paraId:163,tocIndex:30},{value:".",paraId:163,tocIndex:30},{value:" ",paraId:165,tocIndex:31},{value:"LegendNavCfg",paraId:165,tocIndex:31},{value:" ",paraId:165,tocIndex:31},{value:"optional",paraId:165,tocIndex:31},{value:" ",paraId:165,tocIndex:31},{value:"Applicable to ",paraId:166,tocIndex:31},{value:"Categorical Legend",paraId:167,tocIndex:31},{value:". Configure legend navigator. In grid layout, page capacity = ",paraId:166,tocIndex:31},{value:"gridRow",paraId:166,tocIndex:31},{value:" × ",paraId:166,tocIndex:31},{value:"gridCol",paraId:166,tocIndex:31},{value:". If the number of categorical items exceeds this capacity, pagination occurs. In flex layout, page capacity is calculated dynamically, limited by container width and height. When categorical items exceed container height or width, pagination occurs and the navigator component is shown.",paraId:166,tocIndex:31},{value:"💡 ",paraId:168,tocIndex:31},{value:"Vertical Layout Legend Pagination Configuration",paraId:168,tocIndex:31},{value:"For vertical layout legends (",paraId:169,tocIndex:31},{value:"position: 'right'",paraId:169,tocIndex:31},{value:" or ",paraId:169,tocIndex:31},{value:"'left'",paraId:169,tocIndex:31},{value:"), since ",paraId:169,tocIndex:31},{value:"maxRows",paraId:169,tocIndex:31},{value:" doesn't take effect, it's recommended to enable pagination through the following methods:",paraId:169,tocIndex:31},{value:"legend: {\n  color: {\n    position: 'right',\n    size: 100,               // Limit legend width, trigger pagination\n    length: 200,             // Limit legend height, trigger pagination\n    navOrientation: 'vertical', // Vertical navigator\n    navDefaultPage: 0,       // Default to first page\n    navLoop: true,           // Enable loop pagination\n  }\n}\n",paraId:170,tocIndex:31},{value:"LegendNavCfg",paraId:171,tocIndex:31},{value:" configuration:",paraId:171,tocIndex:31},{value:"Property",paraId:172,tocIndex:31},{value:"Description",paraId:172,tocIndex:31},{value:"Type",paraId:172,tocIndex:31},{value:"Default Value",paraId:172,tocIndex:31},{value:"Required",paraId:172,tocIndex:31},{value:"navEffect",paraId:172,tocIndex:31},{value:"Page transition effect",paraId:172,tocIndex:31},{value:"See ",paraId:172,tocIndex:31},{value:"Web Animations API",paraId:172,tocIndex:31},{value:"linear",paraId:172,tocIndex:31},{value:"navDuration",paraId:172,tocIndex:31},{value:"Single page transition animation duration",paraId:172,tocIndex:31},{value:"number",paraId:172,tocIndex:31},{value:"200",paraId:172,tocIndex:31},{value:"navOrientation",paraId:172,tocIndex:31},{value:"Pagination scroll direction",paraId:172,tocIndex:31},{value:"- Horizontal ",paraId:172,tocIndex:31},{value:"horizontal",paraId:172,tocIndex:31},{value:"- Vertical ",paraId:172,tocIndex:31},{value:"vertical",paraId:172,tocIndex:31},{value:"horizontal",paraId:172,tocIndex:31},{value:" |",paraId:172,tocIndex:31},{value:"vertical",paraId:172,tocIndex:31},{value:"horizontal",paraId:172,tocIndex:31},{value:"navDefaultPage",paraId:172,tocIndex:31},{value:"Default page number to display",paraId:172,tocIndex:31},{value:"number",paraId:172,tocIndex:31},{value:"0",paraId:172,tocIndex:31},{value:"navLoop",paraId:172,tocIndex:31},{value:"Whether to enable loop pagination",paraId:172,tocIndex:31},{value:"boolean",paraId:172,tocIndex:31},{value:"false",paraId:172,tocIndex:31},{value:"navPageWidth",paraId:172,tocIndex:31},{value:"Navigator page width",paraId:172,tocIndex:31},{value:"number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navPageHeight",paraId:172,tocIndex:31},{value:"Navigator page height",paraId:172,tocIndex:31},{value:"number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navControllerPadding",paraId:172,tocIndex:31},{value:"Spacing between navigator buttons and page numbers",paraId:172,tocIndex:31},{value:"number | number[]",paraId:172,tocIndex:31},{value:"5",paraId:172,tocIndex:31},{value:"navControllerSpacing",paraId:172,tocIndex:31},{value:"Spacing between navigator buttons and pages, can configure spacing between navigator and legend",paraId:172,tocIndex:31},{value:"number | number[]",paraId:172,tocIndex:31},{value:"5",paraId:172,tocIndex:31},{value:"navPageNumFontSize",paraId:172,tocIndex:31},{value:"Navigator page number text size",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"12",paraId:172,tocIndex:31},{value:"navPageNumFontFamily",paraId:172,tocIndex:31},{value:"Navigator page number text font",paraId:172,tocIndex:31},{value:"string | (datum, index, data) => string",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navPageNumFontWeight",paraId:172,tocIndex:31},{value:"Navigator page number font weight",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"normal",paraId:172,tocIndex:31},{value:"navPageNumLineHeight",paraId:172,tocIndex:31},{value:"Navigator page number text line height",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navPageNumTextAlign",paraId:172,tocIndex:31},{value:"Set current text alignment for navigator page number content",paraId:172,tocIndex:31},{value:"center",paraId:172,tocIndex:31},{value:" | ",paraId:172,tocIndex:31},{value:"end",paraId:172,tocIndex:31},{value:" | ",paraId:172,tocIndex:31},{value:"left",paraId:172,tocIndex:31},{value:" | ",paraId:172,tocIndex:31},{value:"right",paraId:172,tocIndex:31},{value:" | ",paraId:172,tocIndex:31},{value:"start",paraId:172,tocIndex:31},{value:"start",paraId:172,tocIndex:31},{value:"navPageNumTextBaseline",paraId:172,tocIndex:31},{value:"Set current text baseline used when drawing navigator page number text",paraId:172,tocIndex:31},{value:"top",paraId:172,tocIndex:31},{value:" | ",paraId:172,tocIndex:31},{value:"middle",paraId:172,tocIndex:31},{value:" | ",paraId:172,tocIndex:31},{value:"bottom",paraId:172,tocIndex:31},{value:" | ",paraId:172,tocIndex:31},{value:"alphabetic",paraId:172,tocIndex:31},{value:" | ",paraId:172,tocIndex:31},{value:"hanging",paraId:172,tocIndex:31},{value:"bottom",paraId:172,tocIndex:31},{value:"navPageNumFill",paraId:172,tocIndex:31},{value:"Navigator page number text color",paraId:172,tocIndex:31},{value:"string | (datum, index, data) => string",paraId:172,tocIndex:31},{value:"#1D2129",paraId:172,tocIndex:31},{value:"navPageNumFillOpacity",paraId:172,tocIndex:31},{value:"Navigator page number text color opacity",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"0.45",paraId:172,tocIndex:31},{value:"navPageNumStroke",paraId:172,tocIndex:31},{value:"Navigator page number text stroke color",paraId:172,tocIndex:31},{value:"string | (datum, index, data) => string",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navPageNumStrokeOpacity",paraId:172,tocIndex:31},{value:"Navigator page number text stroke color opacity",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navPageNumLineWidth",paraId:172,tocIndex:31},{value:"Navigator page number text stroke width",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navPageNumLineDash",paraId:172,tocIndex:31},{value:"Navigator page number text stroke dash configuration. First value is dash segment length, second is gap length. Setting lineDash to [0,0] means no stroke.",paraId:172,tocIndex:31},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navPageNumOpacity",paraId:172,tocIndex:31},{value:"Navigator page number text overall opacity",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navPageNumShadowColor",paraId:172,tocIndex:31},{value:"Navigator page number text shadow color",paraId:172,tocIndex:31},{value:"string | (datum, index, data) => string",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navPageNumShadowBlur",paraId:172,tocIndex:31},{value:"Navigator page number text shadow Gaussian blur coefficient",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navPageNumShadowOffsetX",paraId:172,tocIndex:31},{value:"Set horizontal distance of shadow from navigator page number text",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navPageNumShadowOffsetY",paraId:172,tocIndex:31},{value:"Set vertical distance of shadow from navigator page number text",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navPageNumCursor",paraId:172,tocIndex:31},{value:"Navigator page number cursor style. Same as CSS cursor style.",paraId:172,tocIndex:31},{value:"string | (datum, index, data) => string",paraId:172,tocIndex:31},{value:"default",paraId:172,tocIndex:31},{value:"navButtonSize",paraId:172,tocIndex:31},{value:"Navigator button size",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navButtonFill",paraId:172,tocIndex:31},{value:"Navigator button fill color",paraId:172,tocIndex:31},{value:"string | (datum, index, data) => string",paraId:172,tocIndex:31},{value:"#1D2129",paraId:172,tocIndex:31},{value:"navButtonFillOpacity",paraId:172,tocIndex:31},{value:"Navigator button fill opacity",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"0.65",paraId:172,tocIndex:31},{value:"navButtonStroke",paraId:172,tocIndex:31},{value:"Navigator button stroke",paraId:172,tocIndex:31},{value:"string | (datum, index, data) => string",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navButtonStrokeOpacity",paraId:172,tocIndex:31},{value:"Navigator button stroke opacity",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navButtonLineWidth",paraId:172,tocIndex:31},{value:"Navigator button stroke width",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navButtonLineDash",paraId:172,tocIndex:31},{value:"Navigator button stroke dash configuration. First value is dash segment length, second is gap length. Setting lineDash to [0,0] means no stroke.",paraId:172,tocIndex:31},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navButtonOpacity",paraId:172,tocIndex:31},{value:"Navigator button overall opacity",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navButtonShadowColor",paraId:172,tocIndex:31},{value:"Navigator button shadow color",paraId:172,tocIndex:31},{value:"string | (datum, index, data) => string",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navButtonShadowBlur",paraId:172,tocIndex:31},{value:"Navigator button shadow Gaussian blur coefficient",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navButtonShadowOffsetX",paraId:172,tocIndex:31},{value:"Set horizontal distance of shadow from navigator button",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navButtonShadowOffsetY",paraId:172,tocIndex:31},{value:"Set vertical distance of shadow from navigator button",paraId:172,tocIndex:31},{value:"number | (datum, index, data) => number",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"navButtonCursor",paraId:172,tocIndex:31},{value:"Navigator button cursor style. Same as CSS cursor style.",paraId:172,tocIndex:31},{value:"string | (datum, index, data) => string",paraId:172,tocIndex:31},{value:"default",paraId:172,tocIndex:31},{value:"navFormatter",paraId:172,tocIndex:31},{value:"Page number text formatter",paraId:172,tocIndex:31},{value:"(current: number, total: number) => string",paraId:172,tocIndex:31},{value:"-",paraId:172,tocIndex:31},{value:"In the Legend component, when configuring navigator properties, it's not configured as an object, but with the ",paraId:173,tocIndex:31},{value:"nav",paraId:173,tocIndex:31},{value:" prefix plus property:",paraId:173,tocIndex:31},{value:"({\n  legend: {\n    color: {\n      navEffect: 'cubic-bezier',\n      navDuration: 400,\n      navOrientation: 'vertical',\n      navDefaultPage: 1,\n      navLoop: true,\n      navPageWidth: 10,\n      navPageHeight: 10,\n      navControllerPadding: 10,\n      navControllerSpacing: 10,\n\n      // Configure navPageNum drawing properties\n      navPageNumFontSize: 16,\n      navPageNumFontFamily: 'sans-serif',\n      navPageNumFontWeight: 500,\n      navPageNumLineHeight: 20,\n      navPageNumTextAlign: 'center',\n      navPageNumTextBaseline: 'middle',\n      navPageNumFill: '#000',\n      navPageNumFillOpacity: 0.9,\n      navPageNumStroke: '#DAF5EC',\n      navPageNumStrokeOpacity: 0.9,\n      navPageNumLineWidth: 2,\n      navPageNumLineDash: [4, 8],\n      navPageNumOpacity: 1,\n      navPageNumShadowColor: '#d3d3d3',\n      navPageNumShadowBlur: 10,\n      navPageNumShadowOffsetX: 10,\n      navPageNumShadowOffsetY: 10,\n      navPageNumCursor: 'pointer',\n\n      // Configure navButton drawing properties\n      navButtonFill: '#000',\n      navButtonFillOpacity: 0.9,\n      navButtonStroke: '#DAF5EC',\n      navButtonStrokeOpacity: 0.9,\n      navButtonLineWidth: 2,\n      navButtonLineDash: [4, 8],\n      navButtonOpacity: 1,\n      navButtonShadowColor: '#d3d3d3',\n      navButtonShadowBlur: 10,\n      navButtonShadowOffsetX: 10,\n      navButtonShadowOffsetY: 10,\n      navButtonCursor: 'pointer',\n    },\n  },\n});\n",paraId:174,tocIndex:31},{value:"Try it:",paraId:175,tocIndex:31},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', height: 350 });\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 50 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  legend: {\n    color: {\n      itemWidth: 160,\n      navEffect: 'cubic-bezier',\n      navDuration: 400,\n      navOrientation: 'vertical',\n      navDefaultPage: 2,\n      navLoop: true,\n\n      // Configure navPageNum drawing properties\n      navPageNumFontSize: 16,\n      navPageNumFontFamily: 'sans-serif',\n      navPageNumFontWeight: 500,\n      navPageNumLineHeight: 20,\n      navPageNumTextAlign: 'center',\n      navPageNumTextBaseline: 'middle',\n      navPageNumFill: '#2989FF',\n      navPageNumFillOpacity: 0.9,\n      navPageNumStroke: '#DAF5EC',\n      navPageNumStrokeOpacity: 0.9,\n      navPageNumLineWidth: 2,\n      navPageNumLineDash: [4, 8],\n      navPageNumOpacity: 1,\n      navPageNumShadowColor: '#d3d3d3',\n      navPageNumShadowBlur: 10,\n      navPageNumShadowOffsetX: 10,\n      navPageNumShadowOffsetY: 10,\n      navPageNumCursor: 'pointer',\n\n      // Configure navButton drawing properties\n      navButtonFill: '#2989FF',\n      navButtonFillOpacity: 0.7,\n      navButtonStroke: '#DAF5EC',\n      navButtonStrokeOpacity: 0.9,\n      navButtonLineWidth: 2,\n      navButtonLineDash: [4, 8],\n      navButtonOpacity: 0.9,\n      navButtonShadowColor: '#d3d3d3',\n      navButtonShadowBlur: 10,\n      navButtonShadowOffsetX: 10,\n      navButtonShadowOffsetY: 10,\n      navButtonCursor: 'pointer',\n\n      navFormatter: (current, total) => `Page ${current}/Total ${total}`,\n    },\n  },\n});\n\nchart.render();\n",paraId:176,tocIndex:31},{value:" ",paraId:177,tocIndex:32},{value:"LegendPoptipCfg",paraId:177,tocIndex:32},{value:" ",paraId:177,tocIndex:32},{value:"optional",paraId:177,tocIndex:32},{value:" ",paraId:177,tocIndex:32},{value:"Applicable to ",paraId:178,tocIndex:32},{value:"Categorical Legend",paraId:179,tocIndex:32},{value:". Configure the tooltip information for legend items, which is generally used when the legend is too long to be fully displayed.",paraId:178,tocIndex:32},{value:"Property",paraId:180,tocIndex:32},{value:"Description",paraId:180,tocIndex:32},{value:"Type",paraId:180,tocIndex:32},{value:"Default Value",paraId:180,tocIndex:32},{value:"Required",paraId:180,tocIndex:32},{value:"render",paraId:180,tocIndex:32},{value:"Custom rendering content is available, and HTML characters are supported.",paraId:180,tocIndex:32},{value:"string",paraId:180,tocIndex:32},{value:" | ",paraId:180,tocIndex:32},{value:"() => string",paraId:180,tocIndex:32},{value:"-",paraId:180,tocIndex:32},{value:"-",paraId:180,tocIndex:32},{value:"position",paraId:180,tocIndex:32},{value:"The position of the Poptip box can be overridden through CSS styles.",paraId:180,tocIndex:32},{value:"top left right bottom top-left top-right bottom-left bottom-right left-top left-bottom right-top right-bottom",paraId:180,tocIndex:32},{value:"-",paraId:180,tocIndex:32},{value:"-",paraId:180,tocIndex:32},{value:"offset",paraId:180,tocIndex:32},{value:"Offset",paraId:180,tocIndex:32},{value:"[number, number]",paraId:180,tocIndex:32},{value:"[0, 20]",paraId:180,tocIndex:32},{value:"-",paraId:180,tocIndex:32},{value:"follow",paraId:180,tocIndex:32},{value:"Whether to follow the mouse. When set to true, the position setting will be ignored.",paraId:180,tocIndex:32},{value:"boolean",paraId:180,tocIndex:32},{value:"-",paraId:180,tocIndex:32},{value:"-",paraId:180,tocIndex:32},{value:"domStyles",paraId:180,tocIndex:32},{value:"Container Styles",paraId:180,tocIndex:32},{value:"object",paraId:180,tocIndex:32},{value:"-",paraId:180,tocIndex:32},{value:"-",paraId:180,tocIndex:32},{value:"The default configuration of domStyles is as follows:",paraId:181,tocIndex:32},{value:"{\n  domStyles: {\n    '.component-poptip': {\n      opacity: '1',\n      padding: '8px 12px',\n      background: '#fff',\n      boxShadow: '0 2px 8px rgba(0, 0, 0, 0.15)',\n    },\n    '.component-poptip-arrow': {\n      display: 'none',\n    },\n    '.component-poptip-text': {\n      color: '#000',\n      lineHeight: '20px',\n    },\n  },\n}\n",paraId:182,tocIndex:32},{value:" ",paraId:183,tocIndex:33},{value:"optional",paraId:183,tocIndex:33},{value:" ",paraId:183,tocIndex:33},{value:"boolean",paraId:183,tocIndex:33},{value:" ",paraId:183,tocIndex:33},{value:"Applicable to ",paraId:184,tocIndex:33},{value:"Categorical Legend",paraId:185,tocIndex:33},{value:". Whether to enable legend focus functionality. Default is ",paraId:184,tocIndex:33},{value:"false",paraId:184,tocIndex:33},{value:".",paraId:184,tocIndex:33},{value:"When set to ",paraId:186,tocIndex:33},{value:"true",paraId:186,tocIndex:33},{value:", the legend item will display the focus icon. Users can display only the corresponding chart elements by clicking the focus icon to better highlight the data they are concerned about.",paraId:186,tocIndex:33},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { name: 'London', month: 'Jan.', avgRainfall: 18.9 },\n    { name: 'London', month: 'Feb.', avgRainfall: 28.8 },\n    { name: 'London', month: 'Mar.', avgRainfall: 39.3 },\n    { name: 'London', month: 'Apr.', avgRainfall: 81.4 },\n    { name: 'London', month: 'May', avgRainfall: 47 },\n    { name: 'London', month: 'Jun.', avgRainfall: 20.3 },\n    { name: 'London', month: 'Jul.', avgRainfall: 24 },\n    { name: 'London', month: 'Aug.', avgRainfall: 35.6 },\n    { name: 'Berlin', month: 'Jan.', avgRainfall: 12.4 },\n    { name: 'Berlin', month: 'Feb.', avgRainfall: 23.2 },\n    { name: 'Berlin', month: 'Mar.', avgRainfall: 34.5 },\n    { name: 'Berlin', month: 'Apr.', avgRainfall: 99.7 },\n    { name: 'Berlin', month: 'May', avgRainfall: 52.6 },\n    { name: 'Berlin', month: 'Jun.', avgRainfall: 35.5 },\n    { name: 'Berlin', month: 'Jul.', avgRainfall: 37.4 },\n    { name: 'Berlin', month: 'Aug.', avgRainfall: 42.4 },\n  ],\n  encode: { x: 'month', y: 'avgRainfall', color: 'name' },\n  transform: [{ type: 'dodgeX' }],\n  legend: {\n    color: {\n      focus: true,\n      focusMarkerSize: 12\n    },\n  },\n});\n\nchart.render();\n",paraId:187,tocIndex:33},{value:" ",paraId:188,tocIndex:34},{value:"optional",paraId:188,tocIndex:34},{value:" ",paraId:188,tocIndex:34},{value:"number",paraId:188,tocIndex:34},{value:" ",paraId:188,tocIndex:34},{value:"\nApplicable to ",paraId:188,tocIndex:34},{value:"Categorical Legend",paraId:189,tocIndex:34},{value:". Configure the size of legend item focus icon.",paraId:188,tocIndex:34},{value:" ",paraId:190,tocIndex:35},{value:"string[] | ",paraId:190,tocIndex:35},{value:"d3-interpolate",paraId:190,tocIndex:35},{value:" ",paraId:190,tocIndex:35},{value:"optional",paraId:190,tocIndex:35},{value:" ",paraId:190,tocIndex:35},{value:"Applicable to ",paraId:191,tocIndex:35},{value:"Continuous Legend",paraId:192,tocIndex:35},{value:". Configure color band colors for continuous legend. When it's an array, colors are taken sequentially.",paraId:191,tocIndex:35},{value:" ",paraId:193,tocIndex:36},{value:"boolean",paraId:193,tocIndex:36},{value:" ",paraId:193,tocIndex:36},{value:"optional",paraId:193,tocIndex:36},{value:" ",paraId:193,tocIndex:36},{value:"Applicable to ",paraId:194,tocIndex:36},{value:"Continuous Legend",paraId:195,tocIndex:36},{value:". Whether continuous legend displays by intervals. Default is false.",paraId:194,tocIndex:36},{value:" ",paraId:196,tocIndex:37},{value:"size | color",paraId:196,tocIndex:37},{value:" ",paraId:196,tocIndex:37},{value:"optional",paraId:196,tocIndex:37},{value:" ",paraId:196,tocIndex:37},{value:"Applicable to ",paraId:197,tocIndex:37},{value:"Continuous Legend",paraId:198,tocIndex:37},{value:". Configure type of continuous legend. Default is ",paraId:197,tocIndex:37},{value:"color",paraId:197,tocIndex:37},{value:".",paraId:197,tocIndex:37},{value:"Combining ",paraId:199,tocIndex:37},{value:"block",paraId:199,tocIndex:37},{value:" and ",paraId:199,tocIndex:37},{value:"type",paraId:199,tocIndex:37},{value:" properties can configure different styles of continuous legends. Continuous data legends have 4 styles:",paraId:199,tocIndex:37},{value:"Continuous representation ",paraId:200,tocIndex:37},{value:"Default",paraId:200,tocIndex:37},{value:"Range representation ",paraId:201,tocIndex:37},{value:"block=true",paraId:201,tocIndex:37},{value:"Size representation ",paraId:202,tocIndex:37},{value:"type='size'",paraId:202,tocIndex:37},{value:"Size, range representation ",paraId:203,tocIndex:37},{value:"type='size'",paraId:203,tocIndex:37},{value:" ",paraId:203,tocIndex:37},{value:"block=true",paraId:203,tocIndex:37},{value:"Legend component exposes some special events to get component interaction information.",paraId:204,tocIndex:38},{value:"Event Type",paraId:205,tocIndex:38},{value:"Description",paraId:205,tocIndex:38},{value:"Type",paraId:205,tocIndex:38},{value:"click ",paraId:205,tocIndex:38},{value:"Categorical Legend",paraId:206,tocIndex:38},{value:"Triggered when clicking legend item",paraId:205,tocIndex:38},{value:"(item:Selection)=>void",paraId:205,tocIndex:38},{value:"mouseenter ",paraId:205,tocIndex:38},{value:"Categorical Legend",paraId:207,tocIndex:38},{value:"Triggered when mouse enters legend item",paraId:205,tocIndex:38},{value:"(item: Selection)=>void",paraId:205,tocIndex:38},{value:"mouseleave ",paraId:205,tocIndex:38},{value:"Categorical Legend",paraId:208,tocIndex:38},{value:"Triggered when mouse leaves legend item",paraId:205,tocIndex:38},{value:"(item:Selection)=>void",paraId:205,tocIndex:38},{value:"valuechange ",paraId:205,tocIndex:38},{value:"Continuous Legend",paraId:209,tocIndex:38},{value:"Triggered when sliding window range changes",paraId:205,tocIndex:38},{value:"(range: [number, number])=>void",paraId:205,tocIndex:38},{value:"indicate ",paraId:205,tocIndex:38},{value:"Continuous Legend",paraId:210,tocIndex:38},{value:"Triggered when indicator value changes",paraId:205,tocIndex:38},{value:"(value: number, range: [number, number])=>void",paraId:205,tocIndex:38},{value:"Component appears only after chart rendering, so component events should be mounted after ",paraId:211,tocIndex:38},{value:"afterrender",paraId:211,tocIndex:38},{value:". Here's an example:",paraId:211,tocIndex:38},{value:"chart.on('afterrender', () => {\n  const { canvas } = chart.getContext();\n  const { document } = canvas;\n  document\n    .querySelector('.component')\n    .addEventListener('valuechange', (range) => {});\n});\n",paraId:212,tocIndex:38},{value:"With the ",paraId:213,tocIndex:40},{value:"defaultSelect",paraId:213,tocIndex:40},{value:" option, you can specify which legend items should be selected by default when the chart is first rendered:",paraId:213,tocIndex:40},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 100 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  legend: {\n    color: {\n      defaultSelect: ['Sports', 'Strategy', 'Action'],\n    },\n  },\n});\n\nchart.render();\n",paraId:214,tocIndex:40},{value:"You can also manually trigger the ",paraId:215,tocIndex:40},{value:"legend:filter",paraId:215,tocIndex:40},{value:" at the right time to achieve this effect:",paraId:215,tocIndex:40},{value:"chart.on(ChartEvent.AFTER_RENDER, () => {\n  chart.emit('legend:filter', {\n    data: { channel: 'color', values: ['Sports', 'Strategy', 'Action'] },\n  });\n});\n",paraId:216,tocIndex:40},{value:"When legend position is ",paraId:217,tocIndex:41},{value:"right",paraId:217,tocIndex:41},{value:" or ",paraId:217,tocIndex:41},{value:"left",paraId:217,tocIndex:41},{value:", since ",paraId:217,tocIndex:41},{value:"maxRows",paraId:217,tocIndex:41},{value:" doesn't take effect, you need to control legend height through the ",paraId:217,tocIndex:41},{value:"length",paraId:217,tocIndex:41},{value:" property to achieve pagination.",paraId:217,tocIndex:41},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 350,\n  width: 600,\n});\n\n// Create data with multiple legend items\nconst data = [\n  { category: 'Category A', value: 40 },\n  { category: 'Category B', value: 35 },\n  { category: 'Category C', value: 30 },\n  { category: 'Category D', value: 25 },\n  { category: 'Category E', value: 20 },\n  { category: 'Category F', value: 18 },\n  { category: 'Category G', value: 15 },\n  { category: 'Category H', value: 12 },\n  { category: 'Category I', value: 10 },\n  { category: 'Category J', value: 8 },\n  { category: 'Category K', value: 6 },\n  { category: 'Category L', value: 4 },\n];\n\nchart.options({\n  type: 'interval',\n  data,\n  encode: { x: 'category', y: 'value', color: 'category' },\n  legend: {\n    color: {\n      position: 'right',\n      length: 150, // Limit legend height to trigger pagination\n      size: 120, // Control legend width\n      navOrientation: 'vertical', // Vertical pagination\n      navDefaultPage: 0, // Default to first page\n      navLoop: true, // Enable loop navigation\n      navButtonFill: '#1890ff', // Pagination button color\n      navPageNumFill: '#1890ff', // Page number color\n      navFormatter: (current, total) => `${current + 1}/${total}`, // Page number format\n    },\n  },\n});\n\nchart.render();\n",paraId:218,tocIndex:41},{value:"In actual development, the built-in legend item markers may not meet your requirements. Don't worry, G2 provides powerful customization features.",paraId:219,tocIndex:42},{value:"Each symbol can be customized, mainly in three steps:",paraId:220,tocIndex:43},{value:"Define symbol path.",paraId:221,tocIndex:43},{value:"Register symbol.",paraId:221,tocIndex:43},{value:"Use symbol.",paraId:221,tocIndex:43},{value:"First, let's see how to define a symbol path. A symbol path is a function that takes the starting point coordinates x, y and drawing radius, and returns a path.",paraId:222,tocIndex:43},{value:"import { type SymbolFactor } from '@antv/g2';\n\nconst triangle: SymbolFactor = (x, y, r) => {\n  const diffY = r * Math.sin((1 / 3) * Math.PI);\n  return [\n    ['M', x - r, y + diffY],\n    ['L', x, y - diffY],\n    ['L', x + r, y + diffY],\n    ['Z'],\n  ];\n};\ntriangle.style = ['fill'];\n",paraId:223,tocIndex:43},{value:"Next is registering the symbol, by calling ",paraId:224,tocIndex:43},{value:"G2.register('symbol.${symbol}', Symbol)",paraId:224,tocIndex:43},{value:". Where ",paraId:224,tocIndex:43},{value:"symbol",paraId:224,tocIndex:43},{value:" is the symbol name and ",paraId:224,tocIndex:43},{value:"Symbol",paraId:224,tocIndex:43},{value:" is the defined symbol path. For example, registering a triangle symbol:",paraId:224,tocIndex:43},{value:"import { register } from '@antv/g2';\n\nregister('symbol.customTriangle', triangle);\n",paraId:225,tocIndex:43},{value:"Finally, use the symbol:",paraId:226,tocIndex:43},{value:"legend: {\n  color: {\n    itemMarker: 'customTriangle';\n  }\n}\n",paraId:227,tocIndex:43},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst logo = [\n  [\n    'TikTok',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*8IXHQLvx9QkAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'Kuaishou',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*swueRrrKvbcAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'Xiaomi',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*79G3TIt3mBoAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'WeChat',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*_ELBTJLp0dQAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'Keep',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*JzbKRpFhR14AAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'Chrome',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*xLnYTaZfdh8AAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'QQ',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*AbGNTpA5JLwAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'Youku',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*UL6lS4jw9lUAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'Baidu Maps',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*I6nrTITAxcoAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'Tencent Video',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*zwVvT5OFnuYAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'Bilibili',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*6jkAQayTiMMAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'Word',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*FbkXT6K6mVEAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'Excel',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*CKb-R6ZAFpYAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'PowerPoint',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*K7-FT4RYRqIAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'Tencent Meeting',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*xbPXR7snu44AAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'NetEase Cloud Music',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*upKlRJ9QB4cAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'Safari',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kjDHRbiW734AAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'Maps',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*tl-2QIB8LKIAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'Docker',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*iJ4dS49yrJ4AAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'VSCode',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*rR6nRInEcz4AAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'Baidu Netdisk',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*futaTbIAkG4AAAAAAAAAAAAADmJ7AQ/original',\n  ],\n  [\n    'Evernote',\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Skh1S4BfL9oAAAAAAAAAAAAADmJ7AQ/original',\n  ],\n];\n\nchart\n  .interval()\n  .data(logo)\n  .encode('x', (d) => d[0])\n  .encode('y', () => Math.random())\n  .encode('color', (d) => d[1])\n  .scale('y', { nice: true })\n  .legend({\n    color: {\n      itemMarker: (_, index) => () => {\n        const { document } = chart.getContext().canvas;\n        const image = document.createElement('image', {\n          style: {\n            width: 20,\n            height: 20,\n            transform: `translate(-10, -10)`,\n            src: logo[index][1],\n          },\n        });\n        return image;\n      },\n      itemMarkerSize: 40,\n      itemLabelText: (_, index) => logo[index][0],\n      maxRows: 1,\n    },\n  })\n  .tooltip(false);\n\nchart.render();\n",paraId:228,tocIndex:44},{value:"G2's built-in legends are drawn with canvas or svg. If you want to render legends with HTML, you can customize legends by following these steps:",paraId:229,tocIndex:45},{value:"Turn off built-in legends and render the chart.",paraId:230,tocIndex:45},{value:"Wait for chart rendering to complete, then render HTML legend based on scale data.",paraId:230,tocIndex:45},{value:"Add interactions (if needed).",paraId:230,tocIndex:45},{value:"First, turn off built-in legends and render the chart.",paraId:231,tocIndex:45},{value:"chart.options({ legend: false });\n",paraId:232,tocIndex:45},{value:"Then wait for chart rendering to complete and call ",paraId:233,tocIndex:45},{value:"legendColor",paraId:233,tocIndex:45},{value:" to render HTML legend:",paraId:233,tocIndex:45},{value:"chart.render().then(legendColor);\n",paraId:234,tocIndex:45},{value:"In ",paraId:235,tocIndex:45},{value:"legendColor",paraId:235,tocIndex:45},{value:", we first need to draw the legend. The following example draws the legend and adds it in front of the canvas:",paraId:235,tocIndex:45},{value:"function legendColor(chart) {\n  const node = chart.getContainer();\n  const legend = document.createElement('div');\n  node.insertBefore(legend, node.childNodes[0]);\n\n  // ...\n}\n",paraId:236,tocIndex:45},{value:"After drawing the legend, we need to draw legend items. This data comes from the corresponding channel's scale: ",paraId:237,tocIndex:45},{value:"chart.getScale().color",paraId:237,tocIndex:45},{value:", and get corresponding names and values through the scale's domain and range.",paraId:237,tocIndex:45},{value:"function legendColor(chart) {\n  // ...\n  const scale = chart.getScale().color;\n  const { domain } = scale.getOptions();\n  const items = domain.map(() => {});\n  // ...\n}\n",paraId:238,tocIndex:45},{value:"After drawing legend items, we should add interactions to each legend item through ",paraId:239,tocIndex:45},{value:"item.onclick",paraId:239,tocIndex:45},{value:", collect currently selected values, and add Filter transforms to the chart declaration based on these values, then re-render the chart. The complete implementation is as follows:",paraId:239,tocIndex:45},{value:"import { Chart } from '@antv/g2';\n\n// Add legend\nfunction legendColor(chart) {\n  // Create Legend and mount legend\n  const node = chart.getContainer();\n  const legend = document.createElement('div');\n  legend.style.display = 'flex';\n  node.insertBefore(legend, node.childNodes[0]);\n\n  // Create and mount Items\n  const { color: scale } = chart.getScale();\n  const { domain } = scale.getOptions();\n  const items = domain.map((value) => {\n    const item = document.createElement('div');\n    const color = scale.map(value);\n    item.style.marginLeft = '1em';\n    item.innerHTML = `\n      <span style=\"\n        background-color:${color};\n        display:inline-block;\n        width:10px;\n        height:10px;\"\n      ></span>\n      <span>${value}</span>\n      `;\n    return item;\n  });\n  items.forEach((d) => legend.append(d));\n\n  // Listen to events\n  const selectedValues = [...domain];\n  const options = chart.options();\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    const value = domain[i];\n    item.style.cursor = 'pointer';\n    item.onclick = () => {\n      const index = selectedValues.indexOf(value);\n      if (index !== -1) {\n        selectedValues.splice(index, 1);\n        item.style.opacity = 0.5;\n      } else {\n        selectedValues.push(value);\n        item.style.opacity = 1;\n      }\n      changeColor(selectedValues);\n    };\n  }\n\n  // Re-render view\n  function changeColor(value) {\n    const { transform = [] } = options;\n    const newTransform = [{ type: 'filter', color: { value } }, ...transform];\n    chart.options({\n      ...options,\n      transform: newTransform, // Specify new transform\n      scale: { color: { domain } },\n    });\n    chart.render(); // Re-render chart\n  }\n}\n\n// Draw chart\nconst container = document.createElement('div');\n\nconst chart = new Chart({\n  container: 'container',\n  container,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  legend: false,\n});\n\nchart.render().then(legendColor);\n",paraId:240,tocIndex:45},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 300,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { category: 'This is a very long category name A that exceeds the display range', value: 40 },\n    { category: 'This is a very long category name B that exceeds the display range', value: 32 },\n    { category: 'This is a very long category name C that exceeds the display range', value: 28 },\n  ],\n  encode: { x: 'category', y: 'value', color: 'category' },\n  coordinate: {\n    transform: [\n      {\n        type: 'transpose',\n      },\n    ],\n  },\n  legend: {\n    color: {\n      itemWidth: 120, // Limit width to trigger poptip\n      poptip: {\n        render: (item) => `Full name: ${item.label}\n        `,\n        position: 'top',\n        offset: [0, 20],\n        domStyles: {\n          '.component-poptip': {\n            background: 'rgb(114, 128, 191) ',\n            color: '#fff',\n            padding: '12px 16px',\n            borderRadius: '8px',\n            backdropFilter: 'blur(10px)',\n            fontSize: '14px',\n            lineHeight: '1.5',\n            maxWidth: '280px',\n            zIndex: '1000',\n          },\n          '.component-poptip-arrow': {\n            display: 'block',\n            borderTopColor: '#667eea',\n          },\n          '.component-poptip-text': {\n            color: '#fff',\n            lineHeight: '1.5',\n          },\n        },\n      },\n    },\n  },\n});\n\nchart.render();\n",paraId:241,tocIndex:46}]},12354:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(89368);const t=[{value:"In G2, ",paraId:0,tocIndex:0},{value:"Scrollbar",paraId:0,tocIndex:0},{value:" can be used to filter data and can be bound to the x or y channel. Scrollbars are turned off by default. It solves the problem of chart information being too dense to be fully displayed.",paraId:0,tocIndex:0},{value:"When to use: Whether content exceeds the display area depends on the amount of content and the size of the display area. When the content to be displayed exceeds the size of the display area in the vertical direction, a vertical scrollbar should be used to control the displayed portion. The same principle applies to horizontal scrollbars.",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  height: 300,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency', y1: 0.000001 },\n  scale: { y: { type: 'log' } },\n  scrollbar: {\n    x: {\n      ratio: 0.2,\n      trackSize: 14,\n      trackFill: '#000',\n      trackFillOpacity: 1,\n    },\n    y: {\n      ratio: 0.5,\n      trackSize: 12,\n      value: 0.1,\n      trackFill: '#000',\n      trackFillOpacity: 1,\n    },\n  },\n});\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"Scrollbars can be configured at the Mark level. In G2, each Mark has its own scrollbar. If the scales corresponding to marks are synchronized, the scrollbars will also be merged.",paraId:3,tocIndex:2},{value:"({\n  type: 'interval',\n  scrollbar: {\n    x: {}, // x-axis scrollbar\n    y: {}, // y-axis scrollbar\n  },\n});\n",paraId:4,tocIndex:2},{value:"Scrollbars can also be configured at the View level. Scrollbars have inheritance properties. Scrollbars declared on a view will be passed to marks declared in ",paraId:5,tocIndex:2},{value:"children",paraId:5,tocIndex:2},{value:". If the mark has a scrollbar for the corresponding channel, they will be merged; otherwise, it won't affect anything.",paraId:5,tocIndex:2},{value:"({\n  type: 'view',\n  scrollbar: {\n    x: {},\n    y: {},\n  },\n});\n",paraId:6,tocIndex:2},{value:"Property",paraId:7,tocIndex:3},{value:"Description",paraId:7,tocIndex:3},{value:"Type",paraId:7,tocIndex:3},{value:"Default Value",paraId:7,tocIndex:3},{value:"Required",paraId:7,tocIndex:3},{value:"ratio",paraId:7,tocIndex:3},{value:"Scrollbar ratio, the proportion of single page data in total data",paraId:7,tocIndex:3},{value:"number",paraId:7,tocIndex:3},{value:"0.5",paraId:7,tocIndex:3},{value:"value",paraId:7,tocIndex:3},{value:"Starting position of scrollbar, default is ",paraId:7,tocIndex:3},{value:"0",paraId:7,tocIndex:3},{value:" for horizontal, ",paraId:7,tocIndex:3},{value:"1",paraId:7,tocIndex:3},{value:" for vertical",paraId:7,tocIndex:3},{value:"[0, 1]",paraId:7,tocIndex:3},{value:"slidable",paraId:7,tocIndex:3},{value:"Whether it can be dragged",paraId:7,tocIndex:3},{value:"boolean",paraId:7,tocIndex:3},{value:"true",paraId:7,tocIndex:3},{value:"position",paraId:7,tocIndex:3},{value:"Scrollbar position relative to chart",paraId:7,tocIndex:3},{value:"string",paraId:7,tocIndex:3},{value:"bottom",paraId:7,tocIndex:3},{value:"isRound",paraId:7,tocIndex:3},{value:"Whether scrollbar style is rounded",paraId:7,tocIndex:3},{value:"boolean",paraId:7,tocIndex:3},{value:"true",paraId:7,tocIndex:3},{value:"style",paraId:7,tocIndex:3},{value:"Scrollbar style configuration, all styles can be configured directly",paraId:7,tocIndex:3},{value:"style",paraId:8,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  autoFit: true,\n  height: 300,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/unemployment-by-industry.json',\n  },\n  encode: {\n    x: (d) => new Date(d.date),\n    y: 'unemployed',\n    color: 'industry',\n    shape: 'smooth',\n  },\n  transform: [{ type: 'stackY' }],\n  scrollbar: {\n    x: {\n      // Configuration options\n      ratio: 0.2,\n      value: 0.1,\n      slidable: true,\n      isRound: true,\n      position: 'top',\n\n      // Scrollbar thumb style\n      thumbFillOpacity: 0.2,\n      thumbFill: '#000',\n      thumbStroke: '#000',\n\n      // Scrollbar track style\n      trackFill: '#fa0',\n      trackStroke: '#f00',\n      trackLineWidth: 2,\n      trackFillOpacity: 1,\n      trackSize: 14,\n      trackLength: 300,\n    },\n  },\n});\n\nchart.render();\n",paraId:9,tocIndex:3},{value:"style",paraId:10,tocIndex:4},{value:" scrollbar style configuration. Internal processing allows you to configure styles directly in the configuration options. For specific style configurations, refer to ",paraId:10,tocIndex:4},{value:"Scrollbar Thumb",paraId:11,tocIndex:4},{value:" and ",paraId:10,tocIndex:4},{value:"Scrollbar Track",paraId:12,tocIndex:4},{value:".",paraId:10,tocIndex:4},{value:"Property",paraId:13,tocIndex:5},{value:"Description",paraId:13,tocIndex:5},{value:"Type",paraId:13,tocIndex:5},{value:"Default Value",paraId:13,tocIndex:5},{value:"Required",paraId:13,tocIndex:5},{value:"thumbFill",paraId:13,tocIndex:5},{value:"Scrollbar thumb fill color",paraId:13,tocIndex:5},{value:"string",paraId:13,tocIndex:5},{value:"#000",paraId:13,tocIndex:5},{value:"thumbFillOpacity",paraId:13,tocIndex:5},{value:"Scrollbar thumb fill opacity",paraId:13,tocIndex:5},{value:"number",paraId:13,tocIndex:5},{value:"0.15",paraId:13,tocIndex:5},{value:"thumbStroke",paraId:13,tocIndex:5},{value:"Scrollbar thumb stroke color",paraId:13,tocIndex:5},{value:"string",paraId:13,tocIndex:5},{value:"–",paraId:13,tocIndex:5},{value:"thumbLineWidth",paraId:13,tocIndex:5},{value:"Scrollbar thumb stroke width",paraId:13,tocIndex:5},{value:"number",paraId:13,tocIndex:5},{value:"–",paraId:13,tocIndex:5},{value:"thumbStrokeOpacity",paraId:13,tocIndex:5},{value:"Scrollbar thumb stroke opacity",paraId:13,tocIndex:5},{value:"number",paraId:13,tocIndex:5},{value:"–",paraId:13,tocIndex:5},{value:"thumbLineDash",paraId:13,tocIndex:5},{value:"Scrollbar thumb dash configuration",paraId:13,tocIndex:5},{value:"[number,number]",paraId:13,tocIndex:5},{value:"–",paraId:13,tocIndex:5},{value:"thumbOpacity",paraId:13,tocIndex:5},{value:"Scrollbar thumb overall opacity",paraId:13,tocIndex:5},{value:"number",paraId:13,tocIndex:5},{value:"–",paraId:13,tocIndex:5},{value:"thumbShadowColor",paraId:13,tocIndex:5},{value:"Scrollbar thumb shadow color",paraId:13,tocIndex:5},{value:"string",paraId:13,tocIndex:5},{value:"–",paraId:13,tocIndex:5},{value:"thumbShadowBlur",paraId:13,tocIndex:5},{value:"Scrollbar thumb shadow blur coefficient",paraId:13,tocIndex:5},{value:"number",paraId:13,tocIndex:5},{value:"–",paraId:13,tocIndex:5},{value:"thumbShadowOffsetX",paraId:13,tocIndex:5},{value:"Scrollbar thumb shadow horizontal offset",paraId:13,tocIndex:5},{value:"number",paraId:13,tocIndex:5},{value:"–",paraId:13,tocIndex:5},{value:"thumbShadowOffsetY",paraId:13,tocIndex:5},{value:"Scrollbar thumb shadow vertical offset",paraId:13,tocIndex:5},{value:"number",paraId:13,tocIndex:5},{value:"–",paraId:13,tocIndex:5},{value:"thumbCursor",paraId:13,tocIndex:5},{value:"Scrollbar thumb cursor style",paraId:13,tocIndex:5},{value:"string",paraId:13,tocIndex:5},{value:"default",paraId:13,tocIndex:5},{value:"({\n  scrollbar: {\n    x: {\n      thumbFill: '#1173a1',\n      thumbFillOpacity: 1,\n      thumbStroke: 'red',\n      thumbLineWidth: 2,\n      thumbStrokeOpacity: 0.9,\n    },\n    y: {},\n  },\n});\n",paraId:14,tocIndex:5},{value:"Property",paraId:15,tocIndex:6},{value:"Description",paraId:15,tocIndex:6},{value:"Type",paraId:15,tocIndex:6},{value:"Default Value",paraId:15,tocIndex:6},{value:"Required",paraId:15,tocIndex:6},{value:"trackSize",paraId:15,tocIndex:6},{value:"Scrollbar track width",paraId:15,tocIndex:6},{value:"number",paraId:15,tocIndex:6},{value:"10",paraId:15,tocIndex:6},{value:"trackLength",paraId:15,tocIndex:6},{value:"Scrollbar track length",paraId:15,tocIndex:6},{value:"number",paraId:15,tocIndex:6},{value:"–",paraId:15,tocIndex:6},{value:"trackFill",paraId:15,tocIndex:6},{value:"Scrollbar track fill color",paraId:15,tocIndex:6},{value:"string",paraId:15,tocIndex:6},{value:"–",paraId:15,tocIndex:6},{value:"trackFillOpacity",paraId:15,tocIndex:6},{value:"Scrollbar track fill opacity",paraId:15,tocIndex:6},{value:"number",paraId:15,tocIndex:6},{value:"0",paraId:15,tocIndex:6},{value:"trackStroke",paraId:15,tocIndex:6},{value:"Scrollbar track stroke color",paraId:15,tocIndex:6},{value:"string",paraId:15,tocIndex:6},{value:"–",paraId:15,tocIndex:6},{value:"trackLineWidth",paraId:15,tocIndex:6},{value:"Scrollbar track stroke width",paraId:15,tocIndex:6},{value:"number",paraId:15,tocIndex:6},{value:"–",paraId:15,tocIndex:6},{value:"trackStrokeOpacity",paraId:15,tocIndex:6},{value:"Scrollbar track stroke opacity",paraId:15,tocIndex:6},{value:"number",paraId:15,tocIndex:6},{value:"–",paraId:15,tocIndex:6},{value:"trackLineDash",paraId:15,tocIndex:6},{value:"Scrollbar track dash configuration",paraId:15,tocIndex:6},{value:"[number,number]",paraId:15,tocIndex:6},{value:"–",paraId:15,tocIndex:6},{value:"trackOpacity",paraId:15,tocIndex:6},{value:"Scrollbar track overall opacity",paraId:15,tocIndex:6},{value:"number",paraId:15,tocIndex:6},{value:"–",paraId:15,tocIndex:6},{value:"trackShadowColor",paraId:15,tocIndex:6},{value:"Scrollbar track shadow color",paraId:15,tocIndex:6},{value:"string",paraId:15,tocIndex:6},{value:"–",paraId:15,tocIndex:6},{value:"trackShadowBlur",paraId:15,tocIndex:6},{value:"Scrollbar track shadow blur coefficient",paraId:15,tocIndex:6},{value:"number",paraId:15,tocIndex:6},{value:"–",paraId:15,tocIndex:6},{value:"trackShadowOffsetX",paraId:15,tocIndex:6},{value:"Scrollbar track shadow horizontal offset",paraId:15,tocIndex:6},{value:"number",paraId:15,tocIndex:6},{value:"–",paraId:15,tocIndex:6},{value:"trackShadowOffsetY",paraId:15,tocIndex:6},{value:"Scrollbar track shadow vertical offset",paraId:15,tocIndex:6},{value:"number",paraId:15,tocIndex:6},{value:"–",paraId:15,tocIndex:6},{value:"trackCursor",paraId:15,tocIndex:6},{value:"Scrollbar track cursor style",paraId:15,tocIndex:6},{value:"string",paraId:15,tocIndex:6},{value:"default",paraId:15,tocIndex:6},{value:"({\n  scrollbar: {\n    x: {\n      trackSize: 20,\n      trackLength: 300,\n      trackFillOpacity: 1,\n      trackFill: 'red',\n      trackLineWidth: 2,\n      trackStroke: 'red',\n      trackStrokeOpacity: 0.4,\n    },\n    y: {},\n  },\n});\n",paraId:16,tocIndex:6},{value:"Property",paraId:17,tocIndex:7},{value:"Description",paraId:17,tocIndex:7},{value:"Type",paraId:17,tocIndex:7},{value:"valuechange",paraId:17,tocIndex:7},{value:"Triggered when scroll value changes, listen via event",paraId:17,tocIndex:7},{value:"({detail: { oldValue: any; value: any }}) => void",paraId:17,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  height: 300,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency', y1: 0.000001 },\n  scale: { y: { type: 'log' } },\n  scrollbar: { x: true },\n});\n\n// After rendering the chart\nchart.on('afterrender', () => {\n  const { canvas } = chart.getContext();\n  const { document } = canvas;\n  document\n    .querySelector('.g2-scrollbar')\n    .addEventListener('valuechange', (evt) => {\n      console.log(evt.detail.oldValue); // Data before scroll update\n      console.log(evt.detail.value); // Data after update\n    });\n});\n\nchart.render();\n",paraId:18,tocIndex:7}]},93468:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(21273);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"Slider",paraId:0,tocIndex:0},{value:" in G2 can be used to filter data, allowing users to focus on local data at a time when dealing with large datasets. It's an auxiliary component for data visualization. It condenses large amounts of data onto an axis, enabling users to view data at both macro and micro levels, and drag to observe data evolution within a certain range. The slider can be bound to x or y channels to display sliders in different directions. Sliders are disabled by default.",paraId:0,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst formatter = (dateTimeString) => {\n  return new Date(dateTimeString).toLocaleString();\n};\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  },\n  encode: { x: 'date', y: 'close' },\n  slider: {\n    x: {\n      labelFormatter: (d) => `${formatter(d)}`,\n    },\n  },\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"Sliders can be configured at the Mark level. In G2, each mark has its own slider. If the scales corresponding to marks are synchronized, the sliders will also be merged.",paraId:2,tocIndex:1},{value:"({\n  type: 'interval',\n  slider: {\n    x: {},\n    y: {},\n  },\n});\n",paraId:3,tocIndex:1},{value:"Sliders can also be configured at the View level. Sliders have inheritance. Sliders declared on a view will be passed to the marks declared in ",paraId:4,tocIndex:1},{value:"children",paraId:4,tocIndex:1},{value:". If the mark has a slider for the corresponding channel, they will be merged; otherwise, it won't affect anything.",paraId:4,tocIndex:1},{value:"({\n  type: 'view',\n  slider: {\n    x: {},\n    y: {},\n  },\n});\n",paraId:5,tocIndex:1},{value:"Sliders are condensed representations of value domain data, closely related to the scale types corresponding to position channels ",paraId:6,tocIndex:2},{value:"x",paraId:6,tocIndex:2},{value:" and ",paraId:6,tocIndex:2},{value:"y",paraId:6,tocIndex:2},{value:". Generally, sliders are more frequently used with temporal scales, less frequently with continuous scales, and almost never with categorical scales.",paraId:6,tocIndex:2},{value:"Temporal axis with very large data span",paraId:7,tocIndex:2},{value:" [High frequency use]: For example, when time series data spans 10 years and you need to observe data trends during this period, it's recommended to enable the slider;",paraId:7,tocIndex:2},{value:"Temporal axis with high data density",paraId:7,tocIndex:2},{value:" [High frequency use]: For example, minute-level real-time data updates. When you need to view data trends within a day, it's recommended to enable the slider;",paraId:7,tocIndex:2},{value:"Continuous axis with high data density",paraId:7,tocIndex:2},{value:" [Low frequency use]: For example, viewing average height distribution for ages 1-100. Enabling the slider allows global viewing of height distribution;",paraId:7,tocIndex:2},{value:"Categorical axis",paraId:7,tocIndex:2},{value:" [Not recommended].",paraId:7,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  },\n  encode: { x: 'date', y: 'close' },\n  slider: { y: {} }, // Enable Y-direction slider\n});\n\nchart.render();\n",paraId:8,tocIndex:3},{value:"Property",paraId:9,tocIndex:4},{value:"Description",paraId:9,tocIndex:4},{value:"Type",paraId:9,tocIndex:4},{value:"Default",paraId:9,tocIndex:4},{value:"Required",paraId:9,tocIndex:4},{value:"padding",paraId:9,tocIndex:4},{value:"Slider inner padding",paraId:9,tocIndex:4},{value:"number | number[]",paraId:9,tocIndex:4},{value:"-",paraId:9,tocIndex:4},{value:"values",paraId:9,tocIndex:4},{value:"Initial selection range of slider, within 0 ~ 1 interval",paraId:9,tocIndex:4},{value:"[number, number]",paraId:9,tocIndex:4},{value:"-",paraId:9,tocIndex:4},{value:"slidable",paraId:9,tocIndex:4},{value:"Whether to allow dragging selection and handles",paraId:9,tocIndex:4},{value:"boolean",paraId:9,tocIndex:4},{value:"true",paraId:9,tocIndex:4},{value:"brushable",paraId:9,tocIndex:4},{value:"Whether to enable brushing",paraId:9,tocIndex:4},{value:"boolean",paraId:9,tocIndex:4},{value:"true",paraId:9,tocIndex:4},{value:"labelFormatter",paraId:9,tocIndex:4},{value:"Slider handle label formatter",paraId:9,tocIndex:4},{value:"(value: number)=>string",paraId:9,tocIndex:4},{value:"-",paraId:9,tocIndex:4},{value:"showHandle",paraId:9,tocIndex:4},{value:"Whether to show drag handles",paraId:9,tocIndex:4},{value:"boolean",paraId:9,tocIndex:4},{value:"true",paraId:9,tocIndex:4},{value:"showLabel",paraId:9,tocIndex:4},{value:"Whether to show handle text",paraId:9,tocIndex:4},{value:"boolean",paraId:9,tocIndex:4},{value:"true",paraId:9,tocIndex:4},{value:"showLabelOnInteraction",paraId:9,tocIndex:4},{value:"Show handle text only when adjusting handles or brushing, effective when showLabel is false",paraId:9,tocIndex:4},{value:"boolean",paraId:9,tocIndex:4},{value:"false",paraId:9,tocIndex:4},{value:"autoFitLabel",paraId:9,tocIndex:4},{value:"Whether to automatically adjust handle text position",paraId:9,tocIndex:4},{value:"boolean",paraId:9,tocIndex:4},{value:"true",paraId:9,tocIndex:4},{value:"style",paraId:9,tocIndex:4},{value:"Configure slider component styles",paraId:9,tocIndex:4},{value:"style",paraId:10,tocIndex:4},{value:"See ",paraId:9,tocIndex:4},{value:"style",paraId:11,tocIndex:4},{value:"Configure slider component styles.",paraId:12,tocIndex:5},{value:"Property",paraId:13,tocIndex:5},{value:"Description",paraId:13,tocIndex:5},{value:"Type",paraId:13,tocIndex:5},{value:"Default",paraId:13,tocIndex:5},{value:"Required",paraId:13,tocIndex:5},{value:"selection",paraId:13,tocIndex:5},{value:"Configure selection area styles",paraId:13,tocIndex:5},{value:"selection",paraId:14,tocIndex:5},{value:"See ",paraId:13,tocIndex:5},{value:"selection",paraId:15,tocIndex:5},{value:"track",paraId:13,tocIndex:5},{value:"Configure track styles",paraId:13,tocIndex:5},{value:"track",paraId:16,tocIndex:5},{value:"See ",paraId:13,tocIndex:5},{value:"track",paraId:17,tocIndex:5},{value:"handle",paraId:13,tocIndex:5},{value:"Configure handle styles",paraId:13,tocIndex:5},{value:"handle",paraId:18,tocIndex:5},{value:"See ",paraId:13,tocIndex:5},{value:"handle",paraId:19,tocIndex:5},{value:"sparkline",paraId:13,tocIndex:5},{value:"Configure sparkline styles",paraId:13,tocIndex:5},{value:"sparkline",paraId:20,tocIndex:5},{value:"See ",paraId:13,tocIndex:5},{value:"sparkline",paraId:21,tocIndex:5},{value:"Configure slider selection area styles.",paraId:22,tocIndex:6},{value:"Property",paraId:23,tocIndex:6},{value:"Description",paraId:23,tocIndex:6},{value:"Type",paraId:23,tocIndex:6},{value:"Default",paraId:23,tocIndex:6},{value:"Required",paraId:23,tocIndex:6},{value:"selectionFill",paraId:23,tocIndex:6},{value:"Selection area fill color",paraId:23,tocIndex:6},{value:"string",paraId:23,tocIndex:6},{value:"#1783FF",paraId:23,tocIndex:6},{value:"selectionFillOpacity",paraId:23,tocIndex:6},{value:"Selection area fill opacity",paraId:23,tocIndex:6},{value:"number",paraId:23,tocIndex:6},{value:"0.15",paraId:23,tocIndex:6},{value:"selectionStroke",paraId:23,tocIndex:6},{value:"Selection area stroke color",paraId:23,tocIndex:6},{value:"string",paraId:23,tocIndex:6},{value:"-",paraId:23,tocIndex:6},{value:"selectionStrokeOpacity",paraId:23,tocIndex:6},{value:"Selection area stroke opacity",paraId:23,tocIndex:6},{value:"number",paraId:23,tocIndex:6},{value:"-",paraId:23,tocIndex:6},{value:"selectionLineWidth",paraId:23,tocIndex:6},{value:"Selection area stroke width",paraId:23,tocIndex:6},{value:"number",paraId:23,tocIndex:6},{value:"-",paraId:23,tocIndex:6},{value:"selectionLineDash",paraId:23,tocIndex:6},{value:"Selection area stroke dash configuration",paraId:23,tocIndex:6},{value:"[number,number]",paraId:23,tocIndex:6},{value:"-",paraId:23,tocIndex:6},{value:"selectionOpacity",paraId:23,tocIndex:6},{value:"Selection area overall opacity",paraId:23,tocIndex:6},{value:"number",paraId:23,tocIndex:6},{value:"-",paraId:23,tocIndex:6},{value:"selectionShadowColor",paraId:23,tocIndex:6},{value:"Selection area shadow color",paraId:23,tocIndex:6},{value:"string",paraId:23,tocIndex:6},{value:"-",paraId:23,tocIndex:6},{value:"selectionShadowBlur",paraId:23,tocIndex:6},{value:"Selection area shadow blur coefficient",paraId:23,tocIndex:6},{value:"number",paraId:23,tocIndex:6},{value:"-",paraId:23,tocIndex:6},{value:"selectionShadowOffsetX",paraId:23,tocIndex:6},{value:"Selection area shadow horizontal offset",paraId:23,tocIndex:6},{value:"number",paraId:23,tocIndex:6},{value:"-",paraId:23,tocIndex:6},{value:"selectionShadowOffsetY",paraId:23,tocIndex:6},{value:"Selection area shadow vertical offset",paraId:23,tocIndex:6},{value:"number",paraId:23,tocIndex:6},{value:"-",paraId:23,tocIndex:6},{value:"selectionCursor",paraId:23,tocIndex:6},{value:"Selection area cursor style",paraId:23,tocIndex:6},{value:"string",paraId:23,tocIndex:6},{value:"default",paraId:23,tocIndex:6},{value:"When configuring selection styles in the Slider component, use the ",paraId:24,tocIndex:6},{value:"selection",paraId:24,tocIndex:6},{value:" prefix with properties instead of object configuration.",paraId:24,tocIndex:6},{value:"({\n  slider: {\n    x: {\n      // Can be configured outside style as well, G2 internally handles compatibility\n      style: {\n        selectionFill: '#000',\n        selectionFillOpacity: 0.9,\n        selectionStroke: '#DAF5EC',\n        selectionStrokeOpacity: 0.9,\n        selectionLineWidth: 2,\n        selectionLineDash: [4, 8],\n        selectionOpacity: 1,\n        selectionShadowColor: '#d3d3d3',\n        selectionShadowBlur: 10,\n        selectionShadowOffsetX: 10,\n        selectionShadowOffsetY: 10,\n        selectionCursor: 'pointer',\n      },\n    },\n  },\n});\n",paraId:25,tocIndex:6},{value:"Configure slider track styles.",paraId:26,tocIndex:7},{value:"Property",paraId:27,tocIndex:7},{value:"Description",paraId:27,tocIndex:7},{value:"Type",paraId:27,tocIndex:7},{value:"Default",paraId:27,tocIndex:7},{value:"Required",paraId:27,tocIndex:7},{value:"trackLength",paraId:27,tocIndex:7},{value:"Track length",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:"-",paraId:27,tocIndex:7},{value:"trackSize",paraId:27,tocIndex:7},{value:"Track size",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:"16",paraId:27,tocIndex:7},{value:"trackFill",paraId:27,tocIndex:7},{value:"Track fill color",paraId:27,tocIndex:7},{value:"string",paraId:27,tocIndex:7},{value:"#416180",paraId:27,tocIndex:7},{value:"trackFillOpacity",paraId:27,tocIndex:7},{value:"Track fill opacity",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:"1",paraId:27,tocIndex:7},{value:"trackStroke",paraId:27,tocIndex:7},{value:"Track stroke color",paraId:27,tocIndex:7},{value:"string",paraId:27,tocIndex:7},{value:"-",paraId:27,tocIndex:7},{value:"trackStrokeOpacity",paraId:27,tocIndex:7},{value:"Track stroke opacity",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:"-",paraId:27,tocIndex:7},{value:"trackLineWidth",paraId:27,tocIndex:7},{value:"Track stroke width",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:"-",paraId:27,tocIndex:7},{value:"trackLineDash",paraId:27,tocIndex:7},{value:"Track stroke dash configuration",paraId:27,tocIndex:7},{value:"[number,number]",paraId:27,tocIndex:7},{value:"-",paraId:27,tocIndex:7},{value:"trackOpacity",paraId:27,tocIndex:7},{value:"Track overall opacity",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:"-",paraId:27,tocIndex:7},{value:"trackShadowColor",paraId:27,tocIndex:7},{value:"Track shadow color",paraId:27,tocIndex:7},{value:"string",paraId:27,tocIndex:7},{value:"-",paraId:27,tocIndex:7},{value:"trackShadowBlur",paraId:27,tocIndex:7},{value:"Track shadow blur coefficient",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:"-",paraId:27,tocIndex:7},{value:"trackShadowOffsetX",paraId:27,tocIndex:7},{value:"Track shadow horizontal offset",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:"-",paraId:27,tocIndex:7},{value:"trackShadowOffsetY",paraId:27,tocIndex:7},{value:"Track shadow vertical offset",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:"-",paraId:27,tocIndex:7},{value:"trackCursor",paraId:27,tocIndex:7},{value:"Track cursor style",paraId:27,tocIndex:7},{value:"string",paraId:27,tocIndex:7},{value:"default",paraId:27,tocIndex:7},{value:"When configuring selection styles in the Slider component, use the ",paraId:28,tocIndex:7},{value:"track",paraId:28,tocIndex:7},{value:" prefix with properties instead of object configuration.",paraId:28,tocIndex:7},{value:"({\n  slider: {\n    x: {\n      // Can be configured outside style as well, G2 internally handles compatibility\n      style: {\n        trackSize: 20,\n        trackFill: '#000',\n        trackFillOpacity: 0.9,\n        trackStroke: '#DAF5EC',\n        trackStrokeOpacity: 0.9,\n        trackLineWidth: 2,\n        trackLineDash: [4, 8],\n        trackOpacity: 1,\n        trackShadowColor: '#d3d3d3',\n        trackShadowBlur: 10,\n        trackShadowOffsetX: 10,\n        trackShadowOffsetY: 10,\n        trackCursor: 'pointer',\n      },\n    },\n  },\n});\n",paraId:29,tocIndex:7},{value:"Configure slider handle styles.",paraId:30,tocIndex:8},{value:"Property",paraId:31,tocIndex:8},{value:"Description",paraId:31,tocIndex:8},{value:"Type",paraId:31,tocIndex:8},{value:"Default",paraId:31,tocIndex:8},{value:"Required",paraId:31,tocIndex:8},{value:"handleLabelFontSize",paraId:31,tocIndex:8},{value:"Handle label font size",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"12",paraId:31,tocIndex:8},{value:"handleLabelFontFamily",paraId:31,tocIndex:8},{value:"Handle label font family",paraId:31,tocIndex:8},{value:"string",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleLabelFontWeight",paraId:31,tocIndex:8},{value:"Handle label font weight",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"normal",paraId:31,tocIndex:8},{value:"handleLabelLineHeight",paraId:31,tocIndex:8},{value:"Handle label line height",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleLabelTextAlign",paraId:31,tocIndex:8},{value:"Set current alignment for handle label text content",paraId:31,tocIndex:8},{value:"center",paraId:31,tocIndex:8},{value:" | ",paraId:31,tocIndex:8},{value:"end",paraId:31,tocIndex:8},{value:" | ",paraId:31,tocIndex:8},{value:"left",paraId:31,tocIndex:8},{value:" | ",paraId:31,tocIndex:8},{value:"right",paraId:31,tocIndex:8},{value:" | ",paraId:31,tocIndex:8},{value:"start",paraId:31,tocIndex:8},{value:"start",paraId:31,tocIndex:8},{value:"handleLabelTextBaseline",paraId:31,tocIndex:8},{value:"Set current text baseline used when drawing handle label text",paraId:31,tocIndex:8},{value:"top",paraId:31,tocIndex:8},{value:" | ",paraId:31,tocIndex:8},{value:"middle",paraId:31,tocIndex:8},{value:" | ",paraId:31,tocIndex:8},{value:"bottom",paraId:31,tocIndex:8},{value:" | ",paraId:31,tocIndex:8},{value:"alphabetic",paraId:31,tocIndex:8},{value:" | ",paraId:31,tocIndex:8},{value:"hanging",paraId:31,tocIndex:8},{value:"bottom",paraId:31,tocIndex:8},{value:"handleLabelFill",paraId:31,tocIndex:8},{value:"Handle label font color",paraId:31,tocIndex:8},{value:"string",paraId:31,tocIndex:8},{value:"#1D2129",paraId:31,tocIndex:8},{value:"handleLabelFillOpacity",paraId:31,tocIndex:8},{value:"Handle label font color opacity",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"0.45",paraId:31,tocIndex:8},{value:"handleLabelStroke",paraId:31,tocIndex:8},{value:"Handle label font stroke color",paraId:31,tocIndex:8},{value:"string",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleLabelStrokeOpacity",paraId:31,tocIndex:8},{value:"Handle label font stroke color opacity",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleLabelLineWidth",paraId:31,tocIndex:8},{value:"Handle label font stroke width",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleLabelLineDash",paraId:31,tocIndex:8},{value:"Handle label font stroke dash configuration. First value is dash segment length, second is gap distance. Setting [0,0] removes stroke.",paraId:31,tocIndex:8},{value:"[number , number]",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleLabelOpacity",paraId:31,tocIndex:8},{value:"Handle label text overall opacity",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleLabelShadowColor",paraId:31,tocIndex:8},{value:"Handle label text shadow color",paraId:31,tocIndex:8},{value:"string",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleLabelShadowBlur",paraId:31,tocIndex:8},{value:"Handle label text shadow Gaussian blur coefficient",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleLabelShadowOffsetX",paraId:31,tocIndex:8},{value:"Shadow horizontal distance from handle label text",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleLabelShadowOffsetY",paraId:31,tocIndex:8},{value:"Shadow vertical distance from handle label text",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleLabelCursor",paraId:31,tocIndex:8},{value:"Handle label cursor style. Same as CSS cursor style",paraId:31,tocIndex:8},{value:"string",paraId:31,tocIndex:8},{value:"default",paraId:31,tocIndex:8},{value:"handleIconRadius",paraId:31,tocIndex:8},{value:"Handle icon corner radius",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"2",paraId:31,tocIndex:8},{value:"handleIconSize",paraId:31,tocIndex:8},{value:"Handle icon size",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"10",paraId:31,tocIndex:8},{value:"handleIconFill",paraId:31,tocIndex:8},{value:"Handle icon fill color",paraId:31,tocIndex:8},{value:"string",paraId:31,tocIndex:8},{value:"#f7f7f7",paraId:31,tocIndex:8},{value:"handleIconFillOpacity",paraId:31,tocIndex:8},{value:"Handle icon fill opacity",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"1",paraId:31,tocIndex:8},{value:"handleIconStroke",paraId:31,tocIndex:8},{value:"Handle icon stroke",paraId:31,tocIndex:8},{value:"string",paraId:31,tocIndex:8},{value:"#1D2129",paraId:31,tocIndex:8},{value:"handleIconStrokeOpacity",paraId:31,tocIndex:8},{value:"Handle icon stroke opacity",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"0.25",paraId:31,tocIndex:8},{value:"handleIconLineWidth",paraId:31,tocIndex:8},{value:"Handle icon stroke width",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"1",paraId:31,tocIndex:8},{value:"handleIconLineDash",paraId:31,tocIndex:8},{value:"Handle icon stroke dash configuration. First value is dash segment length, second is gap distance. Setting [0,0] removes stroke.",paraId:31,tocIndex:8},{value:"[number , number]",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleIconOpacity",paraId:31,tocIndex:8},{value:"Handle icon overall opacity",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleIconShadowColor",paraId:31,tocIndex:8},{value:"Handle icon shadow color",paraId:31,tocIndex:8},{value:"string",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleIconShadowBlur",paraId:31,tocIndex:8},{value:"Handle icon shadow Gaussian blur coefficient",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleIconShadowOffsetX",paraId:31,tocIndex:8},{value:"Shadow horizontal distance from handle icon",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleIconShadowOffsetY",paraId:31,tocIndex:8},{value:"Shadow vertical distance from handle icon",paraId:31,tocIndex:8},{value:"number",paraId:31,tocIndex:8},{value:"-",paraId:31,tocIndex:8},{value:"handleIconCursor",paraId:31,tocIndex:8},{value:"Handle icon cursor style. Same as CSS cursor style",paraId:31,tocIndex:8},{value:"string",paraId:31,tocIndex:8},{value:"default",paraId:31,tocIndex:8},{value:"When configuring slider handle properties in the Slider component, use the ",paraId:32,tocIndex:8},{value:"handle",paraId:32,tocIndex:8},{value:" prefix with properties instead of object configuration.",paraId:32,tocIndex:8},{value:"({\n  slider: {\n    x: {\n      // Can be configured outside style as well, G2 internally handles compatibility\n      style: {\n        // Configure handleLabel drawing properties\n        handleLabelFontSize: 16,\n        handleLabelFontFamily: 'sans-serif',\n        handleLabelFontWeight: 500,\n        handleLabelLineHeight: 20,\n        handleLabelTextAlign: 'center',\n        handleLabelTextBaseline: 'middle',\n        handleLabelFill: '#000',\n        handleLabelFillOpacity: 0.9,\n        handleLabelStroke: '#DAF5EC',\n        handleLabelStrokeOpacity: 0.9,\n        handleLabelLineWidth: 2,\n        handleLabelLineDash: [4, 8],\n        handleLabelOpacity: 1,\n        handleLabelShadowColor: '#d3d3d3',\n        handleLabelShadowBlur: 10,\n        handleLabelShadowOffsetX: 10,\n        handleLabelShadowOffsetY: 10,\n        handleLabelCursor: 'pointer',\n\n        handleIconSize: 50,\n        // Configure handleIcon drawing properties\n        handleIconFill: '#000',\n        handleIconFillOpacity: 0.9,\n        handleIconStroke: '#DAF5EC',\n        handleIconStrokeOpacity: 0.9,\n        handleIconLineWidth: 2,\n        handleIconLineDash: [4, 8],\n        handleIconOpacity: 1,\n        handleIconShadowColor: '#d3d3d3',\n        handleIconShadowBlur: 10,\n        handleIconShadowOffsetX: 10,\n        handleIconShadowOffsetY: 10,\n        handleIconCursor: 'pointer',\n      },\n    },\n  },\n});\n",paraId:33,tocIndex:8},{value:"Configure slider sparkline styles.",paraId:34,tocIndex:9},{value:"Property",paraId:35,tocIndex:9},{value:"Description",paraId:35,tocIndex:9},{value:"Type",paraId:35,tocIndex:9},{value:"Default",paraId:35,tocIndex:9},{value:"Required",paraId:35,tocIndex:9},{value:"sparklineType",paraId:35,tocIndex:9},{value:"Sparkline type: line chart, column chart",paraId:35,tocIndex:9},{value:"line",paraId:35,tocIndex:9},{value:" | ",paraId:35,tocIndex:9},{value:"column",paraId:35,tocIndex:9},{value:"line",paraId:35,tocIndex:9},{value:"sparklineIsStack",paraId:35,tocIndex:9},{value:"Whether to stack data",paraId:35,tocIndex:9},{value:"boolean",paraId:35,tocIndex:9},{value:"false",paraId:35,tocIndex:9},{value:"sparklineRange",paraId:35,tocIndex:9},{value:"Specify value range. If not specified, will use data's min and max values",paraId:35,tocIndex:9},{value:"[number, number]",paraId:35,tocIndex:9},{value:"-",paraId:35,tocIndex:9},{value:"sparklineColor",paraId:35,tocIndex:9},{value:"Specify color",paraId:35,tocIndex:9},{value:"string | string[] | (index: number)=>string",paraId:35,tocIndex:9},{value:"-",paraId:35,tocIndex:9},{value:"sparklineSmooth",paraId:35,tocIndex:9},{value:"For line charts, smooth curves",paraId:35,tocIndex:9},{value:"boolean",paraId:35,tocIndex:9},{value:"false",paraId:35,tocIndex:9},{value:"sparklineLineStroke",paraId:35,tocIndex:9},{value:"For line charts, line color",paraId:35,tocIndex:9},{value:"string",paraId:35,tocIndex:9},{value:"-",paraId:35,tocIndex:9},{value:"sparklineLineStrokeOpacity",paraId:35,tocIndex:9},{value:"For line charts, line opacity",paraId:35,tocIndex:9},{value:"number",paraId:35,tocIndex:9},{value:"-",paraId:35,tocIndex:9},{value:"sparklineLineLineDash",paraId:35,tocIndex:9},{value:"For line charts, line dash configuration. First value is dash segment length, second is gap distance. Setting [0, 0] removes stroke.",paraId:35,tocIndex:9},{value:"[number,number]",paraId:35,tocIndex:9},{value:"-",paraId:35,tocIndex:9},{value:"sparklineAreaFill",paraId:35,tocIndex:9},{value:"For line charts, fill area color",paraId:35,tocIndex:9},{value:"string",paraId:35,tocIndex:9},{value:"-",paraId:35,tocIndex:9},{value:"sparklineAreaFillOpacity",paraId:35,tocIndex:9},{value:"For line charts, fill area opacity",paraId:35,tocIndex:9},{value:"number",paraId:35,tocIndex:9},{value:"-",paraId:35,tocIndex:9},{value:"sparklineColumnFill",paraId:35,tocIndex:9},{value:"For column charts, column color",paraId:35,tocIndex:9},{value:"string",paraId:35,tocIndex:9},{value:"-",paraId:35,tocIndex:9},{value:"sparklineColumnFillOpacity",paraId:35,tocIndex:9},{value:"For column charts, column opacity",paraId:35,tocIndex:9},{value:"number",paraId:35,tocIndex:9},{value:"-",paraId:35,tocIndex:9},{value:"sparklineIsGroup",paraId:35,tocIndex:9},{value:"For column charts, whether to display in groups",paraId:35,tocIndex:9},{value:"boolean",paraId:35,tocIndex:9},{value:"false",paraId:35,tocIndex:9},{value:"sparklineSpacing",paraId:35,tocIndex:9},{value:"For column charts, spacing between grouped columns",paraId:35,tocIndex:9},{value:"number",paraId:35,tocIndex:9},{value:"0",paraId:35,tocIndex:9},{value:"When configuring sparkline properties in the Slider component, use the ",paraId:36,tocIndex:9},{value:"sparkline",paraId:36,tocIndex:9},{value:" prefix with properties instead of object configuration.",paraId:36,tocIndex:9},{value:"({\n  slider: {\n    x: {\n      // Can be configured outside style as well, G2 internally handles compatibility\n      style: {\n        sparklineType: 'line',\n        sparklineColor: 'red',\n      },\n    },\n  },\n});\n",paraId:37,tocIndex:9},{value:"Property",paraId:38,tocIndex:10},{value:"Description",paraId:38,tocIndex:10},{value:"Type",paraId:38,tocIndex:10},{value:"valuechange",paraId:38,tocIndex:10},{value:"Triggered when selection changes, listen via events",paraId:38,tocIndex:10},{value:"({detail: { value: any; }}) => void",paraId:38,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .line()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  })\n  .encode('x', 'date')\n  .encode('y', 'close')\n  // Enable X-axis slider\n  .slider('x', {});\n\nchart.on('afterrender', () => {\n  const { canvas } = chart.getContext();\n  const { document } = canvas;\n  document.querySelector('.slider').addEventListener('valuechange', (evt) => {\n    console.info(evt.detail);\n  });\n});\n\nchart.render();\n",paraId:39,tocIndex:10},{value:"If you don't want to use G2's default slider, you can customize a drag axis following these steps:",paraId:40,tocIndex:12},{value:"Render the slider after rendering is complete.",paraId:41,tocIndex:12},{value:"Listen to slider events.",paraId:41,tocIndex:12},{value:"The key to the first step is determining the slider's position and length through the coordinate object obtained via ",paraId:42,tocIndex:12},{value:"chart.getCoordinate",paraId:42,tocIndex:12},{value:". The key to the second step is using the scale obtained through ",paraId:42,tocIndex:12},{value:"chart.getScale",paraId:42,tocIndex:12},{value:" to invert the selected range, finally obtaining the selected data range, then updating the scale's domain.",paraId:42,tocIndex:12},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\n\nfunction sliderX(chart) {\n  // Create and mount range\n  const container = chart.getContainer();\n  const range = document.createElement('input');\n  container.append(range);\n\n  // Set range width and other properties based on coordinate\n  const coordinate = chart.getCoordinate();\n  const { paddingLeft, width } = coordinate.getOptions();\n  range.type = 'range';\n  range.min = 0;\n  range.max = width;\n  range.value = width;\n  range.style.display = 'block';\n  range.style.width = width + 'px';\n  range.style.marginLeft = paddingLeft + 'px';\n\n  // Listen to change event, get filtered domain through scale\n  // Update domain and render\n  const scale = chart.getScaleByChannel('x');\n  const options = chart.options();\n  range.onchange = (event) => {\n    const value = event.target.value;\n    const range = [0, value / width];\n    const domain = range.map((d) => scale.invert(d));\n    chart.options({\n      ...options,\n      scale: { x: { domain } },\n    });\n    chart.render();\n  };\n}\n\nchart.options({\n  type: 'line',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  },\n  encode: { x: 'date', y: 'close' },\n});\n\nchart.render().then(sliderX);\n",paraId:43,tocIndex:12}]},33069:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(47128);const t=[{value:"In G2, ",paraId:0,tocIndex:0},{value:"Title",paraId:0,tocIndex:0},{value:" is used to specify the title content of the chart, which can be used to display summary information about the chart in one sentence. Chart titles are commonly used components, consisting of a main title and a subtitle, both displayed as text. The style of the chart title can be customized by adjusting the text styles.",paraId:0,tocIndex:0},{value:"First, pass a ",paraId:1,tocIndex:1},{value:"boolean",paraId:1,tocIndex:1},{value:" to set whether to display the chart title. Chart titles are hidden by default.",paraId:1,tocIndex:1},{value:"({\n  type: 'interval',\n  title: false; // Hide chart title\n})\n",paraId:2,tocIndex:1},{value:"Second, pass ",paraId:3,tocIndex:1},{value:"titleOption",paraId:3,tocIndex:1},{value:" to configure the chart title as a whole.",paraId:3,tocIndex:1},{value:"({\n  type: 'interval',\n  title: {\n    title: 'hello', // Main title text content\n    subtitle: 'world', // Subtitle text content\n  },\n});\n",paraId:4,tocIndex:1},{value:"Titles can also be configured at the View level:",paraId:5,tocIndex:1},{value:"({\n  type: 'view',\n  title: {\n    title: 'hello',\n    subtitle: 'world',\n  },\n});\n",paraId:6,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  marginTop: 40,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: {\n    x: 'letter',\n    y: 'frequency',\n  },\n  title: {\n    align: 'center', // Chart title alignment\n    size: 28, // Chart title height, default is 36\n    spacing: 4, // Spacing between main title and subtitle\n\n    // Title\n    title: 'I am a title', // Chart title text\n    titleFontSize: 28, // Chart main title font size\n    titleFontFamily: 'sans-serif', // Chart main title font family\n    titleFontWeight: 600, // Chart main title font weight\n    titleFill: '#fff', // Chart main title text color\n    titleFillOpacity: 1, // Chart main title text opacity\n    titleStroke: '#000', // Chart main title text stroke color\n    titleLineWidth: 2, // Chart main title text stroke width\n    titleStrokeOpacity: 1, // Chart main title text stroke opacity\n\n    // Subtitle\n    subtitle: 'I am a subtitle', // Chart subtitle text\n    subtitleFontSize: 16, // Chart subtitle font size\n    subtitleFontFamily: 'Arial', // Chart subtitle font family\n    subtitleFontWeight: 300, // Chart subtitle font weight\n    subtitleFill: '#2989FF', // Chart subtitle text color\n    subtitleFillOpacity: 1, // Chart subtitle text opacity\n    subtitleStroke: '#000', // Chart subtitle text stroke color\n    subtitleLineWidth: 1, // Chart subtitle text stroke width\n    subtitleStrokeOpacity: 0.5, // Chart subtitle text stroke opacity\n  },\n});\n\nchart.render();\n",paraId:7,tocIndex:2},{value:"The simplest way to set the title is to directly specify a string as the title, which uses default styles and positioning. You can also use complete configuration options for flexible customization.",paraId:8,tocIndex:2},{value:"More options about title, see the API document of ",paraId:9,tocIndex:2},{value:"title",paraId:10,tocIndex:2},{value:".",paraId:9,tocIndex:2},{value:"// API\nchart.interval().title({\n  title: 'hello',\n  subtitle: 'world',\n});\n",paraId:11,tocIndex:2},{value:"// API\nchart.title({ title: 'hello', subtitle: 'world' });\n",paraId:12,tocIndex:2},{value:"Property",paraId:13,tocIndex:3},{value:"Description",paraId:13,tocIndex:3},{value:"Type",paraId:13,tocIndex:3},{value:"Default Value",paraId:13,tocIndex:3},{value:"size",paraId:13,tocIndex:3},{value:"Height of the chart title",paraId:13,tocIndex:3},{value:"number",paraId:13,tocIndex:3},{value:"36",paraId:13,tocIndex:3},{value:"align",paraId:13,tocIndex:3},{value:"Chart title alignment",paraId:13,tocIndex:3},{value:"left",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"center",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"right",paraId:13,tocIndex:3},{value:"left",paraId:13,tocIndex:3},{value:"spacing",paraId:13,tocIndex:3},{value:"Vertical spacing between main title and subtitle",paraId:13,tocIndex:3},{value:"number",paraId:13,tocIndex:3},{value:"2",paraId:13,tocIndex:3},{value:"title",paraId:13,tocIndex:3},{value:"Chart title configuration options",paraId:13,tocIndex:3},{value:"title",paraId:14,tocIndex:3},{value:"See ",paraId:13,tocIndex:3},{value:"title",paraId:15,tocIndex:3},{value:"subtitle",paraId:13,tocIndex:3},{value:"Chart subtitle configuration options",paraId:13,tocIndex:3},{value:"subtitle",paraId:16,tocIndex:3},{value:"See ",paraId:13,tocIndex:3},{value:"subtitle",paraId:17,tocIndex:3},{value:" ",paraId:18,tocIndex:4},{value:"number",paraId:18,tocIndex:4},{value:" ",paraId:18,tocIndex:4},{value:"optional",paraId:18,tocIndex:4},{value:" ",paraId:18,tocIndex:4},{value:"Used to configure the space height of the chart title. Default is ",paraId:19,tocIndex:4},{value:"36px",paraId:19,tocIndex:4},{value:". If configured too small, it may cause overlap between the title and chart graphics.",paraId:19,tocIndex:4},{value:" ",paraId:20,tocIndex:5},{value:"string",paraId:20,tocIndex:5},{value:" ",paraId:20,tocIndex:5},{value:"optional",paraId:20,tocIndex:5},{value:" ",paraId:20,tocIndex:5},{value:"Used to configure the horizontal alignment of the chart title. Default is ",paraId:21,tocIndex:5},{value:"left",paraId:21,tocIndex:5},{value:". You can choose ",paraId:21,tocIndex:5},{value:"left",paraId:21,tocIndex:5},{value:", ",paraId:21,tocIndex:5},{value:"center",paraId:21,tocIndex:5},{value:", or ",paraId:21,tocIndex:5},{value:"right",paraId:21,tocIndex:5},{value:", representing left-aligned, center-aligned, and right-aligned respectively.",paraId:21,tocIndex:5},{value:"Try it out:",paraId:22,tocIndex:5},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n  width: 480,\n  height: 160,\n});\nconst container = chart.getContainer();\n\nconst alignList = ['center', 'right', 'left'];\nconst alignMap = alignList.map((p) => {\n  return {\n    label: p,\n    value: p,\n  };\n});\n\nconst data = [\n  264, 417, 438, 887, 309, 397, 550, 575, 563, 430, 525, 592, 492, 467, 513,\n  546, 983, 340, 539, 243, 226, 192,\n];\n\nchart.options({\n  data,\n  type: 'interval',\n  encode: {\n    x: (_, idx) => idx,\n    y: (d) => d,\n  },\n  title: {\n    align: 'center',\n    title: 'This is a chart title.',\n    subtitle: 'Displayed are sampled values.',\n  },\n  axis: false,\n});\nconst handleSetAlign = (align) => {\n  chart.title({ align });\n  chart.render(); // Re-render the chart\n};\n\nconst selectorContainer = document.createElement('div');\nselectorContainer.textContent = 'Select title alignment ';\nconst selector = document.createElement('select');\nselector.innerHTML = alignMap.map(\n  (align, index) =>\n    `<option value=\"${align.value}\" ${index === 0 ? 'selected' : ''}>${\n      align.label\n    }</option>`,\n);\nselector.onchange = (e) => {\n  handleSetAlign(e.target.value);\n};\nselectorContainer.appendChild(selector);\ncontainer.insertBefore(selectorContainer, container.childNodes[0]);\nchart.render();\n",paraId:23,tocIndex:5},{value:" ",paraId:24,tocIndex:6},{value:"number",paraId:24,tocIndex:6},{value:" ",paraId:24,tocIndex:6},{value:"optional",paraId:24,tocIndex:6},{value:" ",paraId:24,tocIndex:6},{value:"Used to configure the spacing between the chart main title and subtitle. Default is ",paraId:25,tocIndex:6},{value:"2px",paraId:25,tocIndex:6},{value:". Appropriate spacing can make the chart look more harmonious overall.",paraId:25,tocIndex:6},{value:"The chart title, specifically the main title, can be customized with the following configurations for various title styles.",paraId:26,tocIndex:7},{value:"Property",paraId:27,tocIndex:7},{value:"Description",paraId:27,tocIndex:7},{value:"Type",paraId:27,tocIndex:7},{value:"Default Value",paraId:27,tocIndex:7},{value:"title",paraId:27,tocIndex:7},{value:"Chart title text content",paraId:27,tocIndex:7},{value:"string",paraId:27,tocIndex:7},{value:" | ",paraId:27,tocIndex:7},{value:"(datum, index, data) => string",paraId:27,tocIndex:7},{value:"-",paraId:27,tocIndex:7},{value:"titleFontSize",paraId:27,tocIndex:7},{value:"Chart title font size",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:" | ",paraId:27,tocIndex:7},{value:"(datum, index, data) => number",paraId:27,tocIndex:7},{value:"14",paraId:27,tocIndex:7},{value:"titleFontFamily",paraId:27,tocIndex:7},{value:"Chart title font family",paraId:27,tocIndex:7},{value:"string",paraId:27,tocIndex:7},{value:" | ",paraId:27,tocIndex:7},{value:"(datum, index, data) => string",paraId:27,tocIndex:7},{value:"sans-serif",paraId:27,tocIndex:7},{value:"titleFontWeight",paraId:27,tocIndex:7},{value:"Chart title font weight",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:" | ",paraId:27,tocIndex:7},{value:"(datum, index, data) => number",paraId:27,tocIndex:7},{value:"normal",paraId:27,tocIndex:7},{value:"titleLineHeight",paraId:27,tocIndex:7},{value:"Chart title line height",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:" | ",paraId:27,tocIndex:7},{value:"(datum, index, data) => number",paraId:27,tocIndex:7},{value:"14",paraId:27,tocIndex:7},{value:"titleTextAlign",paraId:27,tocIndex:7},{value:"Chart title horizontal content alignment",paraId:27,tocIndex:7},{value:"string",paraId:27,tocIndex:7},{value:" | ",paraId:27,tocIndex:7},{value:"(datum, index, data) => string",paraId:27,tocIndex:7},{value:"center",paraId:27,tocIndex:7},{value:"titleTextBaseline",paraId:27,tocIndex:7},{value:"Chart title vertical baseline",paraId:27,tocIndex:7},{value:"string",paraId:27,tocIndex:7},{value:" | ",paraId:27,tocIndex:7},{value:"(datum, index, data) => string",paraId:27,tocIndex:7},{value:"middle",paraId:27,tocIndex:7},{value:"titleFill",paraId:27,tocIndex:7},{value:"Chart title fill color",paraId:27,tocIndex:7},{value:"string",paraId:27,tocIndex:7},{value:" | ",paraId:27,tocIndex:7},{value:"(datum, index, data) => string",paraId:27,tocIndex:7},{value:"#000",paraId:27,tocIndex:7},{value:"titleFillOpacity",paraId:27,tocIndex:7},{value:"Chart title fill opacity",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:" | ",paraId:27,tocIndex:7},{value:"(datum, index, data) => number",paraId:27,tocIndex:7},{value:"1",paraId:27,tocIndex:7},{value:"titleStroke",paraId:27,tocIndex:7},{value:"Chart title stroke color",paraId:27,tocIndex:7},{value:"string",paraId:27,tocIndex:7},{value:" | ",paraId:27,tocIndex:7},{value:"(datum, index, data) => string",paraId:27,tocIndex:7},{value:"transparent",paraId:27,tocIndex:7},{value:"titleStrokeOpacity",paraId:27,tocIndex:7},{value:"Chart title stroke opacity",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:" | ",paraId:27,tocIndex:7},{value:"(datum, index, data) => number",paraId:27,tocIndex:7},{value:"1",paraId:27,tocIndex:7},{value:"titleLineWidth",paraId:27,tocIndex:7},{value:"Chart title stroke width",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:" | ",paraId:27,tocIndex:7},{value:"(datum, index, data) => number",paraId:27,tocIndex:7},{value:"0",paraId:27,tocIndex:7},{value:"titleLineDash",paraId:27,tocIndex:7},{value:"Chart title dash style",paraId:27,tocIndex:7},{value:"number[]",paraId:27,tocIndex:7},{value:" | ",paraId:27,tocIndex:7},{value:"(datum, index, data) => number[]",paraId:27,tocIndex:7},{value:"[]",paraId:27,tocIndex:7},{value:"titleOpacity",paraId:27,tocIndex:7},{value:"Chart title overall opacity",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:" | ",paraId:27,tocIndex:7},{value:"(datum, index, data) => number",paraId:27,tocIndex:7},{value:"1",paraId:27,tocIndex:7},{value:"titleShadowColor",paraId:27,tocIndex:7},{value:"Chart title shadow color",paraId:27,tocIndex:7},{value:"string",paraId:27,tocIndex:7},{value:" | ",paraId:27,tocIndex:7},{value:"(datum, index, data) => string",paraId:27,tocIndex:7},{value:"transparent",paraId:27,tocIndex:7},{value:"titleShadowBlur",paraId:27,tocIndex:7},{value:"Chart title shadow gaussian blur coefficient",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:" | ",paraId:27,tocIndex:7},{value:"(datum, index, data) => number",paraId:27,tocIndex:7},{value:"0",paraId:27,tocIndex:7},{value:"titleShadowOffsetX",paraId:27,tocIndex:7},{value:"Chart title shadow horizontal offset",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:" | ",paraId:27,tocIndex:7},{value:"(datum, index, data) => number",paraId:27,tocIndex:7},{value:"0",paraId:27,tocIndex:7},{value:"titleShadowOffsetY",paraId:27,tocIndex:7},{value:"Chart title shadow vertical offset",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:" | ",paraId:27,tocIndex:7},{value:"(datum, index, data) => number",paraId:27,tocIndex:7},{value:"0",paraId:27,tocIndex:7},{value:"titleCursor",paraId:27,tocIndex:7},{value:"Chart title mouse cursor style",paraId:27,tocIndex:7},{value:"string",paraId:27,tocIndex:7},{value:" | ",paraId:27,tocIndex:7},{value:"(datum, index, data) => string",paraId:27,tocIndex:7},{value:"default",paraId:27,tocIndex:7},{value:"titleDx",paraId:27,tocIndex:7},{value:"Chart title horizontal offset",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:" | ",paraId:27,tocIndex:7},{value:"(datum, index, data) => number",paraId:27,tocIndex:7},{value:"0",paraId:27,tocIndex:7},{value:"titleDy",paraId:27,tocIndex:7},{value:"Chart title vertical offset",paraId:27,tocIndex:7},{value:"number",paraId:27,tocIndex:7},{value:" | ",paraId:27,tocIndex:7},{value:"(datum, index, data) => number",paraId:27,tocIndex:7},{value:"0",paraId:27,tocIndex:7},{value:"The chart subtitle, which can be customized with the following configurations for various subtitle styles.",paraId:28,tocIndex:8},{value:"Property",paraId:29,tocIndex:8},{value:"Description",paraId:29,tocIndex:8},{value:"Type",paraId:29,tocIndex:8},{value:"Default Value",paraId:29,tocIndex:8},{value:"subtitle",paraId:29,tocIndex:8},{value:"Chart subtitle text content",paraId:29,tocIndex:8},{value:"string",paraId:29,tocIndex:8},{value:" | ",paraId:29,tocIndex:8},{value:"(datum, index, data) => string",paraId:29,tocIndex:8},{value:"-",paraId:29,tocIndex:8},{value:"subtitleFontSize",paraId:29,tocIndex:8},{value:"Chart subtitle font size",paraId:29,tocIndex:8},{value:"number",paraId:29,tocIndex:8},{value:" | ",paraId:29,tocIndex:8},{value:"(datum, index, data) => number",paraId:29,tocIndex:8},{value:"12",paraId:29,tocIndex:8},{value:"subtitleFontFamily",paraId:29,tocIndex:8},{value:"Chart subtitle font family",paraId:29,tocIndex:8},{value:"string",paraId:29,tocIndex:8},{value:" | ",paraId:29,tocIndex:8},{value:"(datum, index, data) => string",paraId:29,tocIndex:8},{value:"sans-serif",paraId:29,tocIndex:8},{value:"subtitleFontWeight",paraId:29,tocIndex:8},{value:"Chart subtitle font weight",paraId:29,tocIndex:8},{value:"number",paraId:29,tocIndex:8},{value:" | ",paraId:29,tocIndex:8},{value:"(datum, index, data) => number",paraId:29,tocIndex:8},{value:"normal",paraId:29,tocIndex:8},{value:"subtitleLineHeight",paraId:29,tocIndex:8},{value:"Chart subtitle line height",paraId:29,tocIndex:8},{value:"number",paraId:29,tocIndex:8},{value:" | ",paraId:29,tocIndex:8},{value:"(datum, index, data) => number",paraId:29,tocIndex:8},{value:"12",paraId:29,tocIndex:8},{value:"subtitleTextAlign",paraId:29,tocIndex:8},{value:"Chart subtitle horizontal content alignment",paraId:29,tocIndex:8},{value:"string",paraId:29,tocIndex:8},{value:" | ",paraId:29,tocIndex:8},{value:"(datum, index, data) => string",paraId:29,tocIndex:8},{value:"center",paraId:29,tocIndex:8},{value:"subtitleTextBaseline",paraId:29,tocIndex:8},{value:"Chart subtitle vertical baseline",paraId:29,tocIndex:8},{value:"string",paraId:29,tocIndex:8},{value:" | ",paraId:29,tocIndex:8},{value:"(datum, index, data) => string",paraId:29,tocIndex:8},{value:"middle",paraId:29,tocIndex:8},{value:"subtitleFill",paraId:29,tocIndex:8},{value:"Chart subtitle fill color",paraId:29,tocIndex:8},{value:"string",paraId:29,tocIndex:8},{value:" | ",paraId:29,tocIndex:8},{value:"(datum, index, data) => string",paraId:29,tocIndex:8},{value:"#666",paraId:29,tocIndex:8},{value:"subtitleFillOpacity",paraId:29,tocIndex:8},{value:"Chart subtitle fill opacity",paraId:29,tocIndex:8},{value:"number",paraId:29,tocIndex:8},{value:" | ",paraId:29,tocIndex:8},{value:"(datum, index, data) => number",paraId:29,tocIndex:8},{value:"1",paraId:29,tocIndex:8},{value:"subtitleStroke",paraId:29,tocIndex:8},{value:"Chart subtitle stroke color",paraId:29,tocIndex:8},{value:"string",paraId:29,tocIndex:8},{value:" | ",paraId:29,tocIndex:8},{value:"(datum, index, data) => string",paraId:29,tocIndex:8},{value:"transparent",paraId:29,tocIndex:8},{value:"subtitleStrokeOpacity",paraId:29,tocIndex:8},{value:"Chart subtitle stroke opacity",paraId:29,tocIndex:8},{value:"number",paraId:29,tocIndex:8},{value:" | ",paraId:29,tocIndex:8},{value:"(datum, index, data) => number",paraId:29,tocIndex:8},{value:"1",paraId:29,tocIndex:8},{value:"subtitleLineWidth",paraId:29,tocIndex:8},{value:"Chart subtitle stroke width",paraId:29,tocIndex:8},{value:"number",paraId:29,tocIndex:8},{value:" | ",paraId:29,tocIndex:8},{value:"(datum, index, data) => number",paraId:29,tocIndex:8},{value:"0",paraId:29,tocIndex:8},{value:"subtitleLineDash",paraId:29,tocIndex:8},{value:"Chart subtitle dash style",paraId:29,tocIndex:8},{value:"number[]",paraId:29,tocIndex:8},{value:" | ",paraId:29,tocIndex:8},{value:"(datum, index, data) => number[]",paraId:29,tocIndex:8},{value:"[]",paraId:29,tocIndex:8},{value:"subtitleOpacity",paraId:29,tocIndex:8},{value:"Chart subtitle overall opacity",paraId:29,tocIndex:8},{value:"number",paraId:29,tocIndex:8},{value:" | ",paraId:29,tocIndex:8},{value:"(datum, index, data) => number",paraId:29,tocIndex:8},{value:"1",paraId:29,tocIndex:8},{value:"subtitleShadowColor",paraId:29,tocIndex:8},{value:"Chart subtitle shadow color",paraId:29,tocIndex:8},{value:"string",paraId:29,tocIndex:8},{value:" | ",paraId:29,tocIndex:8},{value:"(datum, index, data) => string",paraId:29,tocIndex:8},{value:"transparent",paraId:29,tocIndex:8},{value:"subtitleShadowBlur",paraId:29,tocIndex:8},{value:"Chart subtitle shadow gaussian blur coefficient",paraId:29,tocIndex:8},{value:"number",paraId:29,tocIndex:8},{value:" | ",paraId:29,tocIndex:8},{value:"(datum, index, data) => number",paraId:29,tocIndex:8},{value:"0",paraId:29,tocIndex:8},{value:"subtitleShadowOffsetX",paraId:29,tocIndex:8},{value:"Chart subtitle shadow horizontal offset",paraId:29,tocIndex:8},{value:"number",paraId:29,tocIndex:8},{value:" | ",paraId:29,tocIndex:8},{value:"(datum, index, data) => number",paraId:29,tocIndex:8},{value:"0",paraId:29,tocIndex:8},{value:"subtitleShadowOffsetY",paraId:29,tocIndex:8},{value:"Chart subtitle shadow vertical offset",paraId:29,tocIndex:8},{value:"number",paraId:29,tocIndex:8},{value:" | ",paraId:29,tocIndex:8},{value:"(datum, index, data) => number",paraId:29,tocIndex:8},{value:"0",paraId:29,tocIndex:8},{value:"subtitleCursor",paraId:29,tocIndex:8},{value:"Chart subtitle mouse cursor style",paraId:29,tocIndex:8},{value:"string",paraId:29,tocIndex:8},{value:" | ",paraId:29,tocIndex:8},{value:"(datum, index, data) => string",paraId:29,tocIndex:8},{value:"default",paraId:29,tocIndex:8},{value:"subtitleDx",paraId:29,tocIndex:8},{value:"Chart subtitle horizontal offset",paraId:29,tocIndex:8},{value:"number",paraId:29,tocIndex:8},{value:" | ",paraId:29,tocIndex:8},{value:"(datum, index, data) => number",paraId:29,tocIndex:8},{value:"0",paraId:29,tocIndex:8},{value:"subtitleDy",paraId:29,tocIndex:8},{value:"Chart subtitle vertical offset",paraId:29,tocIndex:8},{value:"number",paraId:29,tocIndex:8},{value:" | ",paraId:29,tocIndex:8},{value:"(datum, index, data) => number",paraId:29,tocIndex:8},{value:"0",paraId:29,tocIndex:8},{value:"Try it out:",paraId:30,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.title({\n  align: 'right',\n  title: 'Sold by genre, sorted by sold',\n  titleFontSize: 15,\n  subtitle: 'It shows the sales volume of genre, sored by sold.',\n  subtitleFill: 'red',\n  subtitleFontSize: 12,\n  subtitleShadowColor: 'yellow',\n  subtitleShadowBlur: 5,\n  subtitleFontStyle: 'italic',\n});\n\nchart\n  .interval()\n  .data([\n    { genre: 'Sports', sold: 0 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  .encode('color', 'genre')\n  .style('minHeight', 50);\n\nchart.render();\n",paraId:31,tocIndex:8}]},32826:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(61072);const t=[{value:"Tooltip",paraId:0,tocIndex:0},{value:" is one of the core components of chart interaction, used to dynamically display detailed information about data points, helping users quickly understand the values, categories, or other dimensional information in specific areas of the chart. It can dynamically show related data information when the mouse hovers, clicks, or moves to a chart element (such as bars in a bar chart or data points in a line chart).",paraId:0,tocIndex:0},{value:"Display detailed information",paraId:1,tocIndex:0},{value:": Tooltip can show detailed information about data points, such as specific values, percentages, or other related attributes. This helps users understand the data more deeply.",paraId:1,tocIndex:0},{value:"Improve readability",paraId:1,tocIndex:0},{value:": In complex visualizations, Tooltip can help users more easily identify and understand data points. For example, in scatter plots where data points are dense, Tooltip can display detailed information about specific points without having to hover over each point.",paraId:1,tocIndex:0},{value:"Enhance interactivity",paraId:1,tocIndex:0},{value:": Tooltip can enhance the interactivity of visualizations. Users can view more information by hovering or clicking on data points, making the visualization more dynamic and engaging.",paraId:1,tocIndex:0},{value:"Highlight key information",paraId:1,tocIndex:0},{value:": Tooltip can be used to highlight key information. For example, in time series charts, you can use Tooltip to display important events or mutations at specific time points.",paraId:1,tocIndex:0},{value:"Support multiple trigger methods",paraId:1,tocIndex:0},{value:": Can be triggered through mouse hover, click, touch and other events.",paraId:1,tocIndex:0},{value:"chart.options({\n  type: 'interval',\n  tooltip: {\n    title: 'name', // Title\n    items: ['genre'], // Data items\n  },\n});\n",paraId:2,tocIndex:2},{value:"And combined with ",paraId:3,tocIndex:2},{value:"view.interaction.tooltip",paraId:3,tocIndex:2},{value:" to configure tooltip rendering and additional settings.",paraId:3,tocIndex:2},{value:"chart.options({\n  type: 'view',\n  interaction: {\n    tooltip: { series: true },\n  },\n});\n",paraId:4,tocIndex:2},{value:"When there is only one mark in the view, configuring tooltip rendering and additional settings through ",paraId:5,tocIndex:2},{value:"mark.interaction.tooltip",paraId:5,tocIndex:2},{value:" is also possible.",paraId:5,tocIndex:2},{value:"chart.options({\n  type: 'line',\n  interaction: {\n    tooltip: { series: true },\n  },\n});\n",paraId:6,tocIndex:2},{value:"If you want to disable tooltip display, you can turn it off with the following configuration.",paraId:7,tocIndex:2},{value:"chart.options({\n  type: 'interval',\n  tooltip: false,\n});\n",paraId:8,tocIndex:2},{value:"If you want the chart to have no tooltip interaction, you can achieve this through ",paraId:9,tocIndex:2},{value:"chart.interaction",paraId:9,tocIndex:2},{value:".",paraId:9,tocIndex:2},{value:"chart.options({\n  type: 'view',\n  interaction: { tooltip: false },\n});\n",paraId:10,tocIndex:2},{value:"Try it out",paraId:11,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .line()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/indices.json',\n  })\n  .transform({ type: 'normalizeY', basis: 'first', groupBy: 'color' })\n  .encode('x', (d) => new Date(d.Date))\n  .encode('y', 'Close')\n  .encode('color', 'Symbol')\n  .axis('y', { title: '↑ Change in price (%)' })\n  .tooltip({\n    title: (d) => new Date(d.Date).toUTCString(),\n    items: [\n      (d, i, data, column) => ({\n        name: 'Close',\n        value: column.y.value[i].toFixed(1),\n      }),\n    ],\n  })\n  .label({\n    text: 'Symbol',\n    selector: 'last',\n    fontSize: 10,\n  });\n\nchart.render();\n",paraId:12,tocIndex:2},{value:"Configuration options are divided into two parts",paraId:13,tocIndex:3},{value:"tooltip",paraId:14,tocIndex:3},{value:" is a UI component in G2 used to display detailed information about data points. When users hover over a data point in the chart, tooltip displays related information about that data point, such as coordinate values, measure values, etc.",paraId:14,tocIndex:3},{value:"interaction.tooltip",paraId:15,tocIndex:3},{value:" is part of G2's interaction mechanism, belonging to the interaction module. It's a built-in interactive behavior used to enhance tooltip functionality, especially in certain specific interactive scenarios (such as dynamically showing or hiding tooltips).",paraId:15,tocIndex:3},{value:"tooltip",paraId:16,tocIndex:3},{value:" and ",paraId:16,tocIndex:3},{value:"interaction.tooltip",paraId:16,tocIndex:3},{value:" are configurations in two different dimensions, but they can be confusing. Here are their core differences:",paraId:16,tocIndex:3},{value:"Feature",paraId:17,tocIndex:3},{value:"tooltip",paraId:17,tocIndex:3},{value:"interaction.tooltip",paraId:17,tocIndex:3},{value:"Responsibility",paraId:17,tocIndex:3},{value:"Define tooltip content, style and basic behavior",paraId:17,tocIndex:3},{value:"Define tooltip behavior in interactive scenarios",paraId:17,tocIndex:3},{value:"Configuration",paraId:17,tocIndex:3},{value:"Configured through chart.tooltip()",paraId:17,tocIndex:3},{value:"Enabled or customized through chart.interaction()",paraId:17,tocIndex:3},{value:"Scope",paraId:17,tocIndex:3},{value:"Global effect, affects the entire chart",paraId:17,tocIndex:3},{value:"Bound to specific interactive behaviors",paraId:17,tocIndex:3},{value:"Typical Use",paraId:17,tocIndex:3},{value:"Set tooltip fields, styles, content, etc.",paraId:17,tocIndex:3},{value:"Control dynamic display/hide or other interactive logic",paraId:17,tocIndex:3},{value:"Property",paraId:18,tocIndex:4},{value:"Description",paraId:18,tocIndex:4},{value:"Type",paraId:18,tocIndex:4},{value:"Default",paraId:18,tocIndex:4},{value:"Applicable to",paraId:18,tocIndex:4},{value:"title",paraId:18,tocIndex:4},{value:"Set tooltip title content: If value is a data field name, it will display the value of that field in the data. If the field doesn't exist in the data, use the value as title. See ",paraId:18,tocIndex:4},{value:"title configuration",paraId:19,tocIndex:4},{value:"title",paraId:20,tocIndex:4},{value:"nodeTitle",paraId:18,tocIndex:4},{value:"Set node title attribute for composite chart tooltip titles",paraId:18,tocIndex:4},{value:"title",paraId:21,tocIndex:4},{value:"Composite charts like Sankey",paraId:18,tocIndex:4},{value:"linkTitle",paraId:18,tocIndex:4},{value:"Set link title attribute for composite chart tooltip titles",paraId:18,tocIndex:4},{value:"title",paraId:22,tocIndex:4},{value:"Composite charts like Sankey",paraId:18,tocIndex:4},{value:"items",paraId:18,tocIndex:4},{value:"Specify fields displayed in tooltip. Different charts have different default field lists. Works better when used with channel configuration. See ",paraId:18,tocIndex:4},{value:"items configuration",paraId:23,tocIndex:4},{value:"items",paraId:24,tocIndex:4},{value:"nodeItems",paraId:18,tocIndex:4},{value:"Set node items attribute for composite chart tooltip",paraId:18,tocIndex:4},{value:"items",paraId:25,tocIndex:4},{value:"Composite charts like Sankey",paraId:18,tocIndex:4},{value:"linkItems",paraId:18,tocIndex:4},{value:"Set link items attribute for composite chart tooltip",paraId:18,tocIndex:4},{value:"items",paraId:26,tocIndex:4},{value:"Composite charts like Sankey",paraId:18,tocIndex:4},{value:"title",paraId:27,tocIndex:5},{value:" is a field used to display the main title of the currently hovered data point, typically used to represent the category or contextual information that the data point belongs to.",paraId:27,tocIndex:5},{value:"title",paraId:28,tocIndex:5},{value:" can be directly written as a fixed string to display, or a method to dynamically get the title from ",paraId:28,tocIndex:5},{value:"data",paraId:28,tocIndex:5},{value:"chart.options({\n  type: 'interval',\n  tooltip: {\n    title: (d) => (d.sold > 150 ? 'high' : 'low'), // Set title\n  },\n});\n",paraId:29,tocIndex:5},{value:"When you don't need to customize the title, you can directly declare tooltip as an array, in which case the title will use default configuration:",paraId:30,tocIndex:5},{value:"chart.options({\n  type: 'interval',\n  tooltip: ['genre', 'sold'],\n});\n",paraId:31,tocIndex:5},{value:"The complete title structure is as follows:",paraId:32,tocIndex:5},{value:"Sub-configuration Name",paraId:33,tocIndex:5},{value:"Type",paraId:33,tocIndex:5},{value:"Function Description",paraId:33,tocIndex:5},{value:"channel",paraId:33,tocIndex:5},{value:"string",paraId:33,tocIndex:5},{value:"Define the channel for generating title",paraId:33,tocIndex:5},{value:"field",paraId:33,tocIndex:5},{value:"string",paraId:33,tocIndex:5},{value:"Define the field for generating title",paraId:33,tocIndex:5},{value:"value",paraId:33,tocIndex:5},{value:"string",paraId:33,tocIndex:5},{value:"Title value",paraId:33,tocIndex:5},{value:"valueFormatter",paraId:33,tocIndex:5},{value:"string",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"Function",paraId:33,tocIndex:5},{value:"Format title",paraId:33,tocIndex:5},{value:"Field",paraId:34,tocIndex:5},{value:"Their values can come from original data, specified by string or ",paraId:35,tocIndex:5},{value:"title.field",paraId:35,tocIndex:5},{value:".",paraId:35,tocIndex:5},{value:"chart.options({\n  tooltip: {\n    title: 'sold',\n    items: ['genre'],\n  },\n});\n",paraId:36,tocIndex:5},{value:"// Equivalent to\nchart.options({\n  tooltip: {\n    title: { field: 'sold' },\n    items: [{ field: 'genre' }],\n  },\n});\n",paraId:37,tocIndex:5},{value:"Channel",paraId:38,tocIndex:5},{value:"Their values can come from channel values, specified through ",paraId:39,tocIndex:5},{value:"title.channel",paraId:39,tocIndex:5},{value:", often used for charts that generate new channels using ",paraId:39,tocIndex:5},{value:"mark.transform",paraId:39,tocIndex:5},{value:".",paraId:39,tocIndex:5},{value:"chart.options({\n  tooltip: {\n    title: { channel: 'x' },\n    items: [{ channel: 'y' }],\n  },\n});\n",paraId:40,tocIndex:5},{value:"Formatting",paraId:41,tocIndex:5},{value:"You can specify the display of title value through ",paraId:42,tocIndex:5},{value:"title.valueFormatter",paraId:42,tocIndex:5},{value:". ",paraId:42,tocIndex:5},{value:"title.valueFormatter",paraId:42,tocIndex:5},{value:" can be a function or a string supported by d3-format.",paraId:42,tocIndex:5},{value:"chart.options({\n  tooltip: {\n    title: { field: 'sold', valueFormatter: (sold) => sold.toUpperCase() },\n    items: [{ channel: 'y', valueFormatter: '.0%' }],\n  },\n});\n",paraId:43,tocIndex:5},{value:"Personalized Configuration",paraId:44,tocIndex:5},{value:"Of course, callbacks are also provided for title to achieve maximum personalized configuration capability.",paraId:45,tocIndex:5},{value:"chart.options({\n  tooltip: {\n    title: (datum, index, data, column) => ({\n      value: `<span style=\"color: #00ff00; font-style: italic;\">${datum.letter}</span>`,\n      custom: '...',\n    }),\n    items: [\n      (datum, index, data, column) => ({\n        color: datum.sold > 150 ? 'red' : 'blue', // Specify item color\n        name: index === 0 ? datum.genre : `${datum.genre} ${data[index].genre}`, // Specify item name\n        value: column.y.value[index], // Use y channel value\n        custom: '...',\n      }),\n    ],\n  },\n});\n",paraId:46,tocIndex:5},{value:"The items return value can be used as parameters for ",paraId:47,tocIndex:5},{value:"interaction.tooltip.render",paraId:47,tocIndex:5},{value:", where you can set custom parameters. See ",paraId:47,tocIndex:5},{value:"Custom Render Content",paraId:48,tocIndex:5},{value:"Composite Chart Configuration",paraId:49,tocIndex:5},{value:"When configuring ",paraId:50,tocIndex:5},{value:"tooltip.title",paraId:50,tocIndex:5},{value:" for composite charts, you need to configure nodes and links separately",paraId:50,tocIndex:5},{value:"({\n  tooltip: {\n    nodeTitle: (d) => d.key,\n    linkTitle: (d) => 'link',\n  },\n});\n",paraId:51,tocIndex:5},{value:"items",paraId:52,tocIndex:6},{value:" is a key attribute in tooltip configuration. ",paraId:52,tocIndex:6},{value:"items",paraId:52,tocIndex:6},{value:" is an array representing the content of each item in the tooltip. Each item typically corresponds to a data field or a graphical element (such as a bar in a bar chart, a point in a line chart, etc.). By customizing ",paraId:52,tocIndex:6},{value:"items",paraId:52,tocIndex:6},{value:", you can flexibly control the display content of tooltips, including name, value, color and other information.",paraId:52,tocIndex:6},{value:"The complete item structure is as follows:",paraId:53,tocIndex:6},{value:"Sub-configuration Name",paraId:54,tocIndex:6},{value:"Type",paraId:54,tocIndex:6},{value:"Function Description",paraId:54,tocIndex:6},{value:"color",paraId:54,tocIndex:6},{value:"string",paraId:54,tocIndex:6},{value:"Marker color",paraId:54,tocIndex:6},{value:"field",paraId:54,tocIndex:6},{value:"string",paraId:54,tocIndex:6},{value:"Define the field for generating item",paraId:54,tocIndex:6},{value:"name",paraId:54,tocIndex:6},{value:"string",paraId:54,tocIndex:6},{value:"Item name",paraId:54,tocIndex:6},{value:"value",paraId:54,tocIndex:6},{value:"string",paraId:54,tocIndex:6},{value:"Item value",paraId:54,tocIndex:6},{value:"channel",paraId:54,tocIndex:6},{value:"string",paraId:54,tocIndex:6},{value:"Define the channel for generating item value",paraId:54,tocIndex:6},{value:"valueFormatter",paraId:54,tocIndex:6},{value:"string",paraId:54,tocIndex:6},{value:" | ",paraId:54,tocIndex:6},{value:"Function",paraId:54,tocIndex:6},{value:"Format item",paraId:54,tocIndex:6},{value:"The ",paraId:55,tocIndex:6},{value:"value",paraId:55,tocIndex:6},{value:", ",paraId:55,tocIndex:6},{value:"channel",paraId:55,tocIndex:6},{value:", and ",paraId:55,tocIndex:6},{value:"valueFormatter",paraId:55,tocIndex:6},{value:" properties of ",paraId:55,tocIndex:6},{value:"items",paraId:55,tocIndex:6},{value:" are configured the same way as ",paraId:55,tocIndex:6},{value:"title",paraId:55,tocIndex:6},{value:". For detailed configuration, please refer to ",paraId:55,tocIndex:6},{value:"title",paraId:56,tocIndex:6},{value:"Name",paraId:57,tocIndex:6},{value:"You can conveniently modify the name of ",paraId:58,tocIndex:6},{value:"item",paraId:58,tocIndex:6},{value:" in ",paraId:58,tocIndex:6},{value:"tooltip",paraId:58,tocIndex:6},{value:" through ",paraId:58,tocIndex:6},{value:"name",paraId:58,tocIndex:6},{value:", and use ",paraId:58,tocIndex:6},{value:"channel",paraId:58,tocIndex:6},{value:" to match the corresponding entry in the chart.",paraId:58,tocIndex:6},{value:"chart.options({\n  tooltip: {\n    items: [\n      { name: 'Zhang San', channel: 'y1' },\n      { name: 'Li Si', channel: 'y2' },\n    ],\n  },\n});\n",paraId:59,tocIndex:6},{value:"Color",paraId:60,tocIndex:6},{value:"tooltip",paraId:61,tocIndex:6},{value:" will automatically assign colors to ",paraId:61,tocIndex:6},{value:"tooltip",paraId:61,tocIndex:6},{value:" ",paraId:61,tocIndex:6},{value:"item",paraId:61,tocIndex:6},{value:" based on chart content, but in practical applications, you may need to specify certain colors according to some rules. In this case, you can configure through the ",paraId:61,tocIndex:6},{value:"color",paraId:61,tocIndex:6},{value:" property. Use ",paraId:61,tocIndex:6},{value:"channel",paraId:61,tocIndex:6},{value:" to match the corresponding entry in the chart.",paraId:61,tocIndex:6},{value:"chart.options({\n  tooltip: {\n    items: [\n      { color: 'pink', channel: 'y1' },\n      { color: '#f00', channel: 'y2' },\n    ],\n  },\n});\n",paraId:62,tocIndex:6},{value:"Composite Chart Configuration",paraId:63,tocIndex:6},{value:"When configuring ",paraId:64,tocIndex:6},{value:"tooltip.items",paraId:64,tocIndex:6},{value:" for composite charts, you need to configure nodes and links separately",paraId:64,tocIndex:6},{value:"({\n  tooltip: {\n    nodeItems: [\n      (datum, index, data, column) => {\n        return {\n          color: 'red', // Specify item color\n          name: 'Node', // Specify item name\n          value: d.key, // Use y channel value\n          content: 'Node custom attribute',\n        };\n      },\n    ],\n    linkItems: [\n      (datum, index, data, column) => {\n        return {\n          color: 'red', // Specify item color\n          name: 'Link', // Specify item name\n          value: `${d.source.key}-${d.target.key}`, // Use y channel value\n          content: 'Link custom attribute',\n        };\n      },\n    ],\n  },\n});\n",paraId:65,tocIndex:6},{value:"Property",paraId:66,tocIndex:7},{value:"Description",paraId:66,tocIndex:7},{value:"Type",paraId:66,tocIndex:7},{value:"Default",paraId:66,tocIndex:7},{value:"Applicable to",paraId:66,tocIndex:7},{value:"body",paraId:66,tocIndex:7},{value:"Whether to show tooltip",paraId:66,tocIndex:7},{value:"boolean",paraId:66,tocIndex:7},{value:"true",paraId:66,tocIndex:7},{value:"bounding",paraId:66,tocIndex:7},{value:"Control tooltip display boundary, position will be automatically adjusted when exceeded",paraId:66,tocIndex:7},{value:"{ x: number, y: number, width: number, height: number }",paraId:66,tocIndex:7},{value:"Chart area size",paraId:66,tocIndex:7},{value:"css",paraId:66,tocIndex:7},{value:"Set tooltip CSS styles",paraId:66,tocIndex:7},{value:"css",paraId:67,tocIndex:7},{value:"-",paraId:66,tocIndex:7},{value:"crosshairs",paraId:66,tocIndex:7},{value:"Configure crosshair style",paraId:66,tocIndex:7},{value:"crosshairs",paraId:68,tocIndex:7},{value:"See ",paraId:66,tocIndex:7},{value:"crosshairs",paraId:69,tocIndex:7},{value:"disableNative",paraId:66,tocIndex:7},{value:"Disable native pointerover and pointerout events, needs to be set to true when customizing tooltip interaction",paraId:66,tocIndex:7},{value:"boolean",paraId:66,tocIndex:7},{value:"false",paraId:66,tocIndex:7},{value:"enterable",paraId:66,tocIndex:7},{value:"Whether tooltip allows mouse entry",paraId:66,tocIndex:7},{value:"boolean",paraId:66,tocIndex:7},{value:"false",paraId:66,tocIndex:7},{value:"facet",paraId:66,tocIndex:7},{value:"Whether it's a facet chart tooltip",paraId:66,tocIndex:7},{value:"boolean",paraId:66,tocIndex:7},{value:"false",paraId:66,tocIndex:7},{value:"Facet composite charts",paraId:66,tocIndex:7},{value:"filter",paraId:66,tocIndex:7},{value:"Item filter",paraId:66,tocIndex:7},{value:"(d: TooltipItemValue) => any",paraId:66,tocIndex:7},{value:"-",paraId:66,tocIndex:7},{value:"groupName",paraId:66,tocIndex:7},{value:"Whether to use groupName",paraId:66,tocIndex:7},{value:"boolean",paraId:66,tocIndex:7},{value:"true",paraId:66,tocIndex:7},{value:"leading",paraId:66,tocIndex:7},{value:"Whether to update tooltip at the beginning of time interval",paraId:66,tocIndex:7},{value:"boolean",paraId:66,tocIndex:7},{value:"true",paraId:66,tocIndex:7},{value:"marker",paraId:66,tocIndex:7},{value:"Configure marker style",paraId:66,tocIndex:7},{value:"marker",paraId:70,tocIndex:7},{value:"See ",paraId:66,tocIndex:7},{value:"marker",paraId:71,tocIndex:7},{value:"markerType",paraId:66,tocIndex:7},{value:"Controls marker style when showing tooltip, whether it's hollow or solid. Default is solid, set to ",paraId:66,tocIndex:7},{value:"'hollow'",paraId:66,tocIndex:7},{value:" for hollow",paraId:66,tocIndex:7},{value:"'hollow' | undefined",paraId:66,tocIndex:7},{value:"undefined",paraId:66,tocIndex:7},{value:"mount",paraId:66,tocIndex:7},{value:"Specify tooltip mount node",paraId:66,tocIndex:7},{value:"string",paraId:66,tocIndex:7},{value:" | ",paraId:66,tocIndex:7},{value:"HTMLElement",paraId:66,tocIndex:7},{value:"Chart container",paraId:66,tocIndex:7},{value:"position",paraId:66,tocIndex:7},{value:"Set fixed display position of tooltip relative to data point",paraId:66,tocIndex:7},{value:"'top'",paraId:66,tocIndex:7},{value:" | ",paraId:66,tocIndex:7},{value:"'bottom'",paraId:66,tocIndex:7},{value:" | ",paraId:66,tocIndex:7},{value:"'left'",paraId:66,tocIndex:7},{value:" | ",paraId:66,tocIndex:7},{value:"'right'",paraId:66,tocIndex:7},{value:" | ",paraId:66,tocIndex:7},{value:"'top-left'",paraId:66,tocIndex:7},{value:" | ",paraId:66,tocIndex:7},{value:"'top-right'",paraId:66,tocIndex:7},{value:" | ",paraId:66,tocIndex:7},{value:"'bottom-left'",paraId:66,tocIndex:7},{value:" | ",paraId:66,tocIndex:7},{value:"'bottom-right'",paraId:66,tocIndex:7},{value:"'right-bottom'",paraId:66,tocIndex:7},{value:"offset",paraId:66,tocIndex:7},{value:"Offset in position direction",paraId:66,tocIndex:7},{value:"[number, number]",paraId:66,tocIndex:7},{value:"[10, 10]",paraId:66,tocIndex:7},{value:"render",paraId:66,tocIndex:7},{value:"Custom render tooltip content",paraId:72,tocIndex:7},{value:"(event, options) => HTMLElement | string",paraId:66,tocIndex:7},{value:"-",paraId:66,tocIndex:7},{value:"series",paraId:66,tocIndex:7},{value:"Whether it's a series element tooltip",paraId:66,tocIndex:7},{value:"boolean",paraId:66,tocIndex:7},{value:"false",paraId:66,tocIndex:7},{value:"Multi-line, multi-bar charts",paraId:66,tocIndex:7},{value:"shared",paraId:66,tocIndex:7},{value:"Whether elements with same x share tooltip",paraId:66,tocIndex:7},{value:"boolean",paraId:66,tocIndex:7},{value:"false",paraId:66,tocIndex:7},{value:"sort",paraId:66,tocIndex:7},{value:"Item sorter",paraId:66,tocIndex:7},{value:"(d: TooltipItemValue) => any",paraId:66,tocIndex:7},{value:"-",paraId:66,tocIndex:7},{value:"trailing",paraId:66,tocIndex:7},{value:"Whether to update tooltip at the end of time interval",paraId:66,tocIndex:7},{value:"boolean",paraId:66,tocIndex:7},{value:"false",paraId:66,tocIndex:7},{value:"wait",paraId:66,tocIndex:7},{value:"Time interval for tooltip update in milliseconds",paraId:66,tocIndex:7},{value:"number",paraId:66,tocIndex:7},{value:"50",paraId:66,tocIndex:7},{value:"crosshairs",paraId:73,tocIndex:8},{value:" is an auxiliary line feature for tooltips, used to mark the precise position of current data points in charts. It's mainly used for continuous graphs like line charts and area charts. Usually presented as horizontal or vertical reference lines to help users visually locate data more intuitively.",paraId:73,tocIndex:8},{value:"Additionally, styles set through prefixes ",paraId:74,tocIndex:8},{value:"crosshairsX",paraId:74,tocIndex:8},{value:" and ",paraId:74,tocIndex:8},{value:"crosshairsY",paraId:74,tocIndex:8},{value:" have higher priority than ",paraId:74,tocIndex:8},{value:"crosshairs",paraId:74,tocIndex:8},{value:" and will override the latter.",paraId:74,tocIndex:8},{value:"Property",paraId:75,tocIndex:8},{value:"Description",paraId:75,tocIndex:8},{value:"Type",paraId:75,tocIndex:8},{value:"Default",paraId:75,tocIndex:8},{value:"Required",paraId:75,tocIndex:8},{value:"crosshairs",paraId:75,tocIndex:8},{value:"Whether to show crosshairs",paraId:75,tocIndex:8},{value:"boolean",paraId:75,tocIndex:8},{value:"true",paraId:75,tocIndex:8},{value:"crosshairsStroke",paraId:75,tocIndex:8},{value:"Crosshair color",paraId:75,tocIndex:8},{value:"string",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsStrokeOpacity",paraId:75,tocIndex:8},{value:"Crosshair transparency",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsLineWidth",paraId:75,tocIndex:8},{value:"Crosshair stroke width",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsLineDash",paraId:75,tocIndex:8},{value:"Crosshair dash configuration, first value is dash segment length, second is interval",paraId:75,tocIndex:8},{value:"[number,number]",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsOpacity",paraId:75,tocIndex:8},{value:"Overall crosshair transparency",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsShadowColor",paraId:75,tocIndex:8},{value:"Crosshair shadow color",paraId:75,tocIndex:8},{value:"string",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsShadowBlur",paraId:75,tocIndex:8},{value:"Crosshair shadow blur coefficient",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsShadowOffsetX",paraId:75,tocIndex:8},{value:"Crosshair shadow horizontal offset",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsShadowOffsetY",paraId:75,tocIndex:8},{value:"Crosshair shadow vertical offset",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsCursor",paraId:75,tocIndex:8},{value:"Crosshair cursor style",paraId:75,tocIndex:8},{value:"string",paraId:75,tocIndex:8},{value:"default",paraId:75,tocIndex:8},{value:"crosshairsX",paraId:75,tocIndex:8},{value:"Whether to show horizontal crosshair",paraId:75,tocIndex:8},{value:"boolean",paraId:75,tocIndex:8},{value:"false",paraId:75,tocIndex:8},{value:"crosshairsXStroke",paraId:75,tocIndex:8},{value:"Horizontal crosshair color",paraId:75,tocIndex:8},{value:"string",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsXStrokeOpacity",paraId:75,tocIndex:8},{value:"Horizontal crosshair transparency",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsXLineWidth",paraId:75,tocIndex:8},{value:"Horizontal crosshair stroke width",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsXLineDash",paraId:75,tocIndex:8},{value:"Horizontal crosshair dash configuration",paraId:75,tocIndex:8},{value:"[number,number]",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsXOpacity",paraId:75,tocIndex:8},{value:"Overall horizontal crosshair transparency",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsXShadowColor",paraId:75,tocIndex:8},{value:"Horizontal crosshair shadow color",paraId:75,tocIndex:8},{value:"string",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsXShadowBlur",paraId:75,tocIndex:8},{value:"Horizontal crosshair shadow blur coefficient",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsXShadowOffsetX",paraId:75,tocIndex:8},{value:"Horizontal crosshair shadow horizontal offset",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsXShadowOffsetY",paraId:75,tocIndex:8},{value:"Horizontal crosshair shadow vertical offset",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsXCursor",paraId:75,tocIndex:8},{value:"Horizontal crosshair cursor style",paraId:75,tocIndex:8},{value:"string",paraId:75,tocIndex:8},{value:"default",paraId:75,tocIndex:8},{value:"crosshairsY",paraId:75,tocIndex:8},{value:"Whether to show vertical crosshair",paraId:75,tocIndex:8},{value:"boolean",paraId:75,tocIndex:8},{value:"true",paraId:75,tocIndex:8},{value:"crosshairsYStroke",paraId:75,tocIndex:8},{value:"Vertical crosshair color",paraId:75,tocIndex:8},{value:"string",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsYStrokeOpacity",paraId:75,tocIndex:8},{value:"Vertical crosshair transparency",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsYLineWidth",paraId:75,tocIndex:8},{value:"Vertical crosshair stroke width",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsYLineDash",paraId:75,tocIndex:8},{value:"Vertical crosshair dash configuration",paraId:75,tocIndex:8},{value:"[number,number]",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsYOpacity",paraId:75,tocIndex:8},{value:"Overall vertical crosshair transparency",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsYShadowColor",paraId:75,tocIndex:8},{value:"Vertical crosshair shadow color",paraId:75,tocIndex:8},{value:"string",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsYShadowBlur",paraId:75,tocIndex:8},{value:"Vertical crosshair shadow blur coefficient",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsYShadowOffsetX",paraId:75,tocIndex:8},{value:"Vertical crosshair shadow horizontal offset",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsYShadowOffsetY",paraId:75,tocIndex:8},{value:"Vertical crosshair shadow vertical offset",paraId:75,tocIndex:8},{value:"number",paraId:75,tocIndex:8},{value:"-",paraId:75,tocIndex:8},{value:"crosshairsYCursor",paraId:75,tocIndex:8},{value:"Vertical crosshair cursor style",paraId:75,tocIndex:8},{value:"string",paraId:75,tocIndex:8},{value:"default",paraId:75,tocIndex:8},{value:"chart.options({\n  interaction: {\n    legendFilter: false,\n    elementPointMove: true,\n    tooltip: {\n      crosshairs: true, // Enable crosshairs\n      crosshairsStroke: 'red', // Crosshair color is red\n      crosshairsYStroke: 'yellow', // Vertical crosshair color set separately to yellow\n      crosshairsLineDash: [4, 4], // Crosshair dashed style\n      markerType: 'hollow', // Tooltip marker is hollow\n    },\n  },\n});\n",paraId:76,tocIndex:8},{value:"Property",paraId:77,tocIndex:9},{value:"Description",paraId:77,tocIndex:9},{value:"Type",paraId:77,tocIndex:9},{value:"Default",paraId:77,tocIndex:9},{value:"Required",paraId:77,tocIndex:9},{value:"marker",paraId:77,tocIndex:9},{value:"Whether to show marker",paraId:77,tocIndex:9},{value:"boolean",paraId:77,tocIndex:9},{value:"true",paraId:77,tocIndex:9},{value:"markerFill",paraId:77,tocIndex:9},{value:"Marker fill color",paraId:77,tocIndex:9},{value:"string",paraId:77,tocIndex:9},{value:"-",paraId:77,tocIndex:9},{value:"markerFillOpacity",paraId:77,tocIndex:9},{value:"Marker fill transparency",paraId:77,tocIndex:9},{value:"number",paraId:77,tocIndex:9},{value:"-",paraId:77,tocIndex:9},{value:"markerStroke",paraId:77,tocIndex:9},{value:"Marker stroke color",paraId:77,tocIndex:9},{value:"string",paraId:77,tocIndex:9},{value:"-",paraId:77,tocIndex:9},{value:"markerStrokeOpacity",paraId:77,tocIndex:9},{value:"Marker stroke transparency",paraId:77,tocIndex:9},{value:"number",paraId:77,tocIndex:9},{value:"-",paraId:77,tocIndex:9},{value:"markerLineWidth",paraId:77,tocIndex:9},{value:"Marker stroke width",paraId:77,tocIndex:9},{value:"number",paraId:77,tocIndex:9},{value:"-",paraId:77,tocIndex:9},{value:"markerLineDash",paraId:77,tocIndex:9},{value:"Marker stroke dash configuration, first value is dash segment length, second is interval",paraId:77,tocIndex:9},{value:"[number,number]",paraId:77,tocIndex:9},{value:"-",paraId:77,tocIndex:9},{value:"markerOpacity",paraId:77,tocIndex:9},{value:"Overall marker transparency",paraId:77,tocIndex:9},{value:"number",paraId:77,tocIndex:9},{value:"-",paraId:77,tocIndex:9},{value:"markerShadowColor",paraId:77,tocIndex:9},{value:"Marker shadow color",paraId:77,tocIndex:9},{value:"string",paraId:77,tocIndex:9},{value:"-",paraId:77,tocIndex:9},{value:"markerShadowBlur",paraId:77,tocIndex:9},{value:"Marker shadow blur coefficient",paraId:77,tocIndex:9},{value:"number",paraId:77,tocIndex:9},{value:"-",paraId:77,tocIndex:9},{value:"markerShadowOffsetX",paraId:77,tocIndex:9},{value:"Marker shadow horizontal offset",paraId:77,tocIndex:9},{value:"number",paraId:77,tocIndex:9},{value:"-",paraId:77,tocIndex:9},{value:"markerShadowOffsetY",paraId:77,tocIndex:9},{value:"Marker shadow vertical offset",paraId:77,tocIndex:9},{value:"number",paraId:77,tocIndex:9},{value:"-",paraId:77,tocIndex:9},{value:"markerCursor",paraId:77,tocIndex:9},{value:"Marker cursor style",paraId:77,tocIndex:9},{value:"string",paraId:77,tocIndex:9},{value:"default",paraId:77,tocIndex:9},{value:"chart.options({\n  interaction: {\n    tooltip: {\n      marker: true,\n      markerType: 'hollow', // Tooltip marker is hollow\n      markerStroke: 'yellow',\n      markerLineWidth: 2,\n      markerLineDash: [4, 4],\n    },\n  },\n});\n",paraId:78,tocIndex:9},{value:"The ",paraId:79,tocIndex:10},{value:"tooltip",paraId:79,tocIndex:10},{value:" cssStyle configuration option allows direct customization of tooltip appearance through CSS styles, enabling quick visual customization of tooltips to adapt to different themes or interaction scenarios.",paraId:79,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: {\n    x: 'state',\n    y: 'population',\n    color: 'age',\n  },\n  transform: [\n    { type: 'sortX', by: 'y', reverse: true, reducer: 'sum', slice: 6 },\n    { type: 'dodgeX' },\n  ],\n  legend: false,\n  interaction: {\n    tooltip: {\n      shared: true,\n      mount: 'body',\n      css: {\n        '.g2-tooltip': {\n          background: '#eee',\n          'border-radius': ' 0.25em !important',\n        },\n        '.g2-tooltip-title': {\n          'font-size': '20px',\n          'font-weight': 'bold',\n          'padding-bottom': '0.25em',\n        },\n        '.g2-tooltip-list-item': {\n          background: '#ccc',\n          padding: '0.25em',\n          margin: '0.25em',\n          'border-radius': '0.25em',\n        },\n        '.g2-tooltip-list-item-name-label': {\n          'font-weight': 'bold',\n          'font-size': '16px',\n        },\n        'g2-tooltip-list-item-marker': {\n          'border-radius': '0.25em',\n          width: '15px',\n          height: '15px',\n        },\n        '.g2-tooltip-list-item-value': {\n          'font-weight': 'bold',\n          'font-size': '16px',\n        },\n      },\n    },\n  },\n});\n\nchart.render();\n",paraId:80,tocIndex:10},{value:"Try it out",paraId:81,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  })\n  .transform({ type: 'sortX', by: 'y', reverse: true, slice: 6 })\n  .transform({ type: 'dodgeX' })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .encode('color', 'age')\n  .scale('y', { nice: true })\n  .axis('y', { labelFormatter: '~s' })\n  .interaction('tooltip', {\n    shared: true,\n    css: {\n      '.g2-tooltip': {\n        background: '#eee',\n        'border-radius': ' 0.25em !important',\n      },\n      '.g2-tooltip-title': {\n        'font-size': '20px',\n        'font-weight': 'bold',\n        'padding-bottom': '0.25em',\n      },\n      '.g2-tooltip-list-item': {\n        background: '#ccc',\n        padding: '0.25em',\n        margin: '0.25em',\n        'border-radius': '0.25em',\n      },\n      '.g2-tooltip-list-item-name-label': {\n        'font-weight': 'bold',\n        'font-size': '16px',\n      },\n      'g2-tooltip-list-item-marker': {\n        'border-radius': '0.25em',\n        width: '15px',\n        height: '15px',\n      },\n      '.g2-tooltip-list-item-value': {\n        'font-weight': 'bold',\n        'font-size': '16px',\n      },\n    },\n  });\n\nchart.render();\n",paraId:82,tocIndex:10},{value:"Sometimes the built-in Tooltip cannot meet requirements. In this case, you can render custom tooltips through the ",paraId:83,tocIndex:11},{value:"render",paraId:83,tocIndex:11},{value:" function in ",paraId:83,tocIndex:11},{value:"mark.interaction.tooltip.render",paraId:83,tocIndex:11},{value:" or ",paraId:83,tocIndex:11},{value:"view.interaction.tooltip.render",paraId:83,tocIndex:11},{value:".",paraId:83,tocIndex:11},{value:"The ",paraId:84,tocIndex:11},{value:"render",paraId:84,tocIndex:11},{value:" function accepts an event object ",paraId:84,tocIndex:11},{value:"event",paraId:84,tocIndex:11},{value:" and tooltip data ",paraId:84,tocIndex:11},{value:"tooltipData",paraId:84,tocIndex:11},{value:", returning a string or DOM object. Where ",paraId:84,tocIndex:11},{value:"event",paraId:84,tocIndex:11},{value:" is a mouse object thrown by ",paraId:84,tocIndex:11},{value:"@antv/g",paraId:84,tocIndex:11},{value:", and ",paraId:84,tocIndex:11},{value:"tooltipData",paraId:84,tocIndex:11},{value:" is title and items data declared through ",paraId:84,tocIndex:11},{value:"mark.tooltip",paraId:84,tocIndex:11},{value:". If the return value is a string, it will be used as innerHTML of the tooltip container, otherwise the return value will be mounted. A tooltip render function definition looks like this:",paraId:84,tocIndex:11},{value:"function render(event, tooltipData) {\n  const { title, items } = tooltipData;\n  return `<div></div>`;\n}\n",paraId:85,tocIndex:11},{value:"Here's a simple example:",paraId:86,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  })\n  .transform([{ type: 'sortX', by: 'y', reverse: true }])\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .interaction('tooltip', {\n    // render callback method returns innerHTML or DOM\n    render: (event, { title, items }) => `<div>\n      <h3 style=\"padding:0;margin:0\">${title}</h3>\n      <ul>${items.map(\n        (d) =>\n          `<li><span style=\"color: ${d.color}\">${d.name}</span> ${d.value}</li>`,\n      )}</ul>\n      </div>`,\n  });\n\nchart.render();\n",paraId:87,tocIndex:11},{value:"The chart.on() method registers the specified listener to the chart. When the object triggers the specified event, the specified callback function will be executed.",paraId:88,tocIndex:12},{value:"Here's how to configure tooltip show/hide events:",paraId:89,tocIndex:12},{value:"chart.on('tooltip:show', (event) => {\n  console.log(event.data.data);\n});\n\nchart.on('tooltip:hide', () => {\n  console.log('hide');\n});\n",paraId:90,tocIndex:12},{value:"Try it out",paraId:91,tocIndex:12},{value:"/**\n * A recreation of this demo: https://vega.github.io/vega-lite/examples/layer_histogram_global_mean.html\n */\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/movies.json',\n  transform: [\n    {\n      type: 'filter',\n      callback: (d) => d['IMDB Rating'] > 0,\n    },\n  ],\n});\n\nchart\n  .rect()\n  .transform({ type: 'binX', y: 'count', thresholds: 9 })\n  .encode('x', 'IMDB Rating')\n  .scale('y', { domainMax: 1000 })\n  .style('inset', 1);\n\nchart\n  .lineX()\n  .transform({ type: 'groupColor', x: 'mean' }) // groupColor 为分组并对指定的通道进行聚合，可以理解为把数据通过 x 通道的数据 取平均值(mean) 变更为一条数据。\n  .encode('x', 'IMDB Rating')\n  .style('stroke', '#F4664A')\n  .style('strokeOpacity', 1)\n  .style('lineWidth', 2)\n  .style('lineDash', [4, 4]);\n\nchart.render();\n",paraId:92,tocIndex:12},{value:"mark.tooltip({\n  title: 'name', // Field\n});\n\nmark.tooltip({\n  title: (d) => (d.value > 100 ? d.name : d.age), // Transform\n});\n",paraId:93,tocIndex:14},{value:"// Single field\nmark.tooltip('a');\nmark.tooltip({ field: 'a' });\n\n// Single channel\nmark.tooltip({ channel: 'y' });\n\n// Transform\nmark.tooltip((d) => (d.value > 100 ? d.name : d.age));\n\n// Formatting\nmark.tooltip({ channel: 'y', valueFormatter: (d) => d.toFixed(1) });\n\n// d3-format supported strings\n// https://github.com/d3/d3-format\nmark.tooltip({ channel: 'y', valueFormatter: '~s' });\n\n// Complete information\nmark.tooltip({ name: 'name', color: 'red', value: 'color' });\n\n// Callback\nmark.tooltip(\n  (\n    d, // Each data item\n    index, // Index\n    data, // Complete data\n    column, // Channel\n  ) => ({\n    value: `${column.y.value[index]} - ${column.y1.value[index]}`,\n  }),\n);\n\n// Multiple items\nmark.tooltip({ channel: 'y' }).tooltip({ channel: 'x' });\n",paraId:94,tocIndex:15},{value:"mark.tooltip({\n  title: 'a',\n  items: [{ channel: 'x' }, { channel: 'y' }],\n});\n",paraId:95,tocIndex:16},{value:"When data contains null or undefined values, you can use ",paraId:96,tocIndex:17},{value:"interaction.tooltip.filter",paraId:96,tocIndex:17},{value:" to filter out these invalid data points to avoid displaying them in the tooltip.",paraId:96,tocIndex:17},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  data: [\n    { month: 'Jan', city: 'Tokyo', temperature: null },\n    { month: 'Jan', city: 'London', temperature: 3.9 },\n    { month: 'Feb', city: 'Tokyo', temperature: 8 },\n    { month: 'Feb', city: 'London', temperature: 4.2 },\n    { month: 'Mar', city: 'Tokyo', temperature: 9.5 },\n    { month: 'Mar', city: 'London', temperature: 5.7 },\n  ],\n  encode: { x: 'month', y: 'temperature', color: 'city' },\n  // Add interaction configuration to filter null values\n  interaction: {\n    tooltip: {\n      filter: (d) => d.value !== null && d.value !== undefined,\n    },\n  },\n  children: [\n    {\n      type: 'line',\n      encode: { shape: 'smooth' },\n      tooltip: {\n        items: [{ channel: 'y' }],\n      },\n    },\n    { type: 'point', encode: { shape: 'point' }, tooltip: false },\n  ],\n});\nchart.render();\n",paraId:97,tocIndex:17},{value:"More filtering options:",paraId:98,tocIndex:17},{value:"// Filter only null values\nfilter: (d) => d.value !== null;\n\n// Filter null, undefined and empty strings\nfilter: (d) => d.value !== null && d.value !== undefined && d.value !== '';\n\n// Filter all \"falsy\" values (null, undefined, 0, false, '', etc.)\nfilter: (d) => Boolean(d.value);\n\n// Filter by name for specific fields (e.g., filter null values only for temperature field)\nfilter: (d) =>\n  d.name !== 'temperature' || (d.value !== null && d.value !== undefined);\n",paraId:99,tocIndex:17},{value:"The render function provides powerful personalized configuration capabilities. By configuring the return parameters of the ",paraId:100,tocIndex:18},{value:"tooltip.render",paraId:100,tocIndex:18},{value:" function, you can customize the input parameters for ",paraId:100,tocIndex:18},{value:"interaction.tooltip.render",paraId:100,tocIndex:18},{value:"chart.options({\n  tooltip: {\n    items: [\n      (datum, index, data, column) => ({\n        color: datum.sold > 150 ? 'red' : 'blue', // Specify item color\n        name: index === 0 ? datum.genre : `${datum.genre} ${data[index].genre}`, // Specify item name\n        value: column.y.value[index], // Use y channel value\n        custom1: 'Custom parameter 1',\n        custom2: 'Custom parameter 2',\n      }),\n    ],\n  },\n  interaction: {\n    tooltip: {\n      // render callback method returns innerHTML or DOM\n      render: (event, { title, items }) => {\n        return `<div>\n          <h3 style=\"padding:0;margin:0\">${title}</h3>\n          <ul>${items.map(\n            ({ color, name, value, custom1, custom2 }) => '...',\n          )}</ul>\n        </div>`;\n      },\n    },\n  },\n});\n",paraId:101,tocIndex:18},{value:"For non-series marks like Interval, Point, the control method is as follows:",paraId:102,tocIndex:19},{value:"// Bar charts, point charts, etc.\nchart\n  .interval()\n  .data([\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  .encode('color', 'genre');\n\nchart.render().then((chart) =>\n  chart.emit('tooltip:show', {\n    offsetX: 10, // Position relative to plot area\n    offsetY: 20, // Position relative to plot area\n    data: {\n      data: { genre: 'Sports' }, // Will find matching data from original data\n    },\n  }),\n);\n",paraId:103,tocIndex:19},{value:"For series marks like Line, Area, the control method is as follows:",paraId:104,tocIndex:19},{value:"chart\n  .line()\n  .data({ type: 'fetch', value: 'data/aapl.csv' })\n  .encode('x', 'date')\n  .encode('y', 'close');\n\n// Pick based on data\nchart.render((chart) =>\n  chart.emit('tooltip:show', {\n    data: {\n      data: { x: new Date('2010-11-16') },\n    },\n  }),\n);\n\n// Pick based on pixels\nchart.render((chart) =>\n  chart.emit('tooltip:show', {\n    offsetX: 200,\n    offsetY: 200,\n  }),\n);\n",paraId:105,tocIndex:19},{value:"Hide method:",paraId:106,tocIndex:19},{value:"chart.emit('tooltip:hide');\n",paraId:107,tocIndex:19},{value:"chart.emit('tooltip:disable'); // Disable tooltip\nchart.emit('tooltip:enable'); // Enable interaction\n",paraId:108,tocIndex:20},{value:"By default, ",paraId:109,tocIndex:21},{value:"crosshairsY",paraId:109,tocIndex:21},{value:" is enabled and ",paraId:109,tocIndex:21},{value:"crosshairsX",paraId:109,tocIndex:21},{value:" is disabled. So to enable crosshairs, there are two ways:",paraId:109,tocIndex:21},{value:"Set ",paraId:110,tocIndex:21},{value:"crosshairs",paraId:110,tocIndex:21},{value:" to ",paraId:110,tocIndex:21},{value:"true",paraId:110,tocIndex:21},{value:".",paraId:110,tocIndex:21},{value:"chart.interaction('tooltip', {\n  crosshairs: true, // Enable crosshairs\n  crosshairsXStroke: 'red', // Set X-axis crosshair color to 'red'\n  crosshairsYStroke: 'blue', // Set Y-axis crosshair color to 'blue'\n});\n",paraId:111,tocIndex:21},{value:"Set ",paraId:112,tocIndex:21},{value:"crosshairsX",paraId:112,tocIndex:21},{value:" to ",paraId:112,tocIndex:21},{value:"true",paraId:112,tocIndex:21},{value:".",paraId:112,tocIndex:21},{value:"chart.interaction('tooltip', {\n  crosshairsX: true, // Enable crosshairsX\n  crosshairsXStroke: 'red', // Set X-axis crosshair color to 'red'\n  crosshairsYStroke: 'blue', // Set Y-axis crosshair color to 'blue'\n});\n",paraId:113,tocIndex:21},{value:"crosshairsX",paraId:114,tocIndex:21},{value:" has higher priority than ",paraId:114,tocIndex:21},{value:"crosshairs",paraId:114,tocIndex:21},{value:".",paraId:114,tocIndex:21},{value:"chart.interaction('tooltip', {\n  markerType: 'hollow', // Set tooltip point style to hollow circle\n});\n",paraId:115,tocIndex:22},{value:"Similar to the method for customizing ",paraId:116,tocIndex:23},{value:"tooltip",paraId:116,tocIndex:23},{value:" interaction for general ",paraId:116,tocIndex:23},{value:"Mark",paraId:116,tocIndex:23},{value:", first return custom attributes in the chart's ",paraId:116,tocIndex:23},{value:"tooltip.render",paraId:116,tocIndex:23},{value:", then use them in ",paraId:116,tocIndex:23},{value:"interaction.render",paraId:116,tocIndex:23},{value:".",paraId:116,tocIndex:23},{value:"({\n  type: 'sankey',\n  data: {\n    value: {\n      nodes: [\n        { id: 'a', key: 'Home', des: 'Node custom attribute' },\n        { id: 'b', key: 'Page1', des: 'Node custom attribute' },\n        { id: 'b_1', key: 'Page1', des: 'Node custom attribute' },\n        { id: 'c', key: 'Page2', des: 'Node custom attribute' },\n        { id: 'c_1', key: 'Page2', des: 'Node custom attribute' },\n        { id: 'd', key: 'Page3', des: 'Node custom attribute' },\n        { id: 'd_1', key: 'Page3', des: 'Node custom attribute' },\n      ],\n      links: [\n        { source: 'a', target: 'b', value: 100 },\n        { source: 'b', target: 'c', value: 80 },\n        { source: 'b', target: 'd', value: 20 },\n        { source: 'c', target: 'b_1', value: 80 },\n        { source: 'b_1', target: 'c_1', value: 40 },\n        { source: 'b_1', target: 'd_1', value: 40 },\n      ],\n    },\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => ({\n          nodes: data.nodes,\n          links: data.links,\n        }),\n      },\n    ],\n  },\n  tooltip: {\n    nodeItems: [\n      (datum, index, data, column) => {\n        return {\n          content: d.des,\n        };\n      },\n    ],\n    linkItems: [\n      (datum, index, data, column) => {\n        return {\n          color: 'red', // Specify item color\n          name: 'Link', // Specify item name\n          value: `${d.source.key}-${d.target.key}`, // Use y channel value\n          content: 'Link custom attribute',\n        };\n      },\n    ],\n  },\n  layout: {\n    nodeId: (d) => d.id,\n    nodeAlign: 'center',\n    nodePadding: 0.03,\n    iterations: 25,\n  },\n  style: {\n    labelSpacing: 3,\n    labelFontWeight: 'bold',\n    linkFillOpacity: 0.2,\n    linkFill: '#3F96FF',\n  },\n  interaction: {\n    tooltip: {\n      render: (e, { items, title }) => {\n        return `<div>${items[0].content}</div>`;\n      },\n    },\n  },\n});\n",paraId:117,tocIndex:23}]},69702:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(8994);const t=[{value:"fadeIn",paraId:0},{value:" is a fade-in animation that affects the ",paraId:0},{value:"opacity",paraId:0},{value:" transparency property.",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'fadeIn' });\n",paraId:1,tocIndex:0}]},28406:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(57355);const t=[{value:"fadeOut",paraId:0},{value:" is a fade-out animation that affects the ",paraId:0},{value:"opacity",paraId:0},{value:" transparency property.",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('exit', { type: 'fadeOut' });\n",paraId:1,tocIndex:0}]},53658:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(58129);const t=[{value:"growInX",paraId:0},{value:" is a matrix animation where containers scale along the x-direction, commonly used for G.Group container animations. It affects the graphic's ",paraId:0},{value:"transform.scale",paraId:0},{value:" property.",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'growInX' });\n",paraId:1,tocIndex:0}]},11493:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(824);const t=[{value:"growInY",paraId:0},{value:" is a matrix animation where containers scale along the y-direction, commonly used for G.Group container animations. It affects the graphic's ",paraId:0},{value:"transform.scale",paraId:0},{value:" property.",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'growInY' });\n",paraId:1,tocIndex:0}]},72447:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(95013);const t=[{value:"morphing",paraId:0},{value:" is a shape transformation animation between graphics, created through transitions between SVG paths.",paraId:0},{value:"chart\n  .area()\n  /* ... */\n  .animate('enter', { type: 'morphing' });\n",paraId:1,tocIndex:0}]},21394:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(51026);const t=[{value:"Animation is an important component of visualization that can significantly enhance the expressiveness of data visualization. G2 provides a comprehensive animation system that supports setting animation effects for graphics in three stages: enter, update, and exit. It can also perform animation encoding based on data characteristics to achieve rich interactions and transition effects.",paraId:0},{value:"Core features of G2's animation system:",paraId:1},{value:"State-driven",paraId:2},{value:": Set different animation effects based on three graphic states (enter, update, exit)",paraId:2},{value:"Data-driven",paraId:2},{value:": Map data values to animation properties such as duration, delay, etc.",paraId:2},{value:"Transition effects",paraId:2},{value:": Support various transition effects including morphing, fading, scaling, etc.",paraId:2},{value:"Timing control",paraId:2},{value:": Support setting animation sequence, easing functions, delay, duration, and other parameters",paraId:2},{value:"Animation properties can be set through the ",paraId:3},{value:"animate",paraId:3},{value:" configuration option, either defined in the overall chart configuration or set for specific marks.",paraId:3},{value:"Animation can be set in chart configuration through the ",paraId:4,tocIndex:0},{value:"animate",paraId:4,tocIndex:0},{value:" property:",paraId:4,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  },\n  encode: { x: 'date', y: 'close' },\n  animate: { enter: { type: 'pathIn', duration: 1000 } },\n});\nchart.render();\n",paraId:5,tocIndex:0},{value:"You can set ",paraId:6,tocIndex:0},{value:"type",paraId:6,tocIndex:0},{value:" to ",paraId:6,tocIndex:0},{value:"null",paraId:6,tocIndex:0},{value:", ",paraId:6,tocIndex:0},{value:"undefined",paraId:6,tocIndex:0},{value:", or ",paraId:6,tocIndex:0},{value:"false",paraId:6,tocIndex:0},{value:" to disable animation:",paraId:6,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  },\n  encode: { x: 'date', y: 'close' },\n  animate: { enter: { type: 'false' } },\n});\nchart.render();\n",paraId:7,tocIndex:0},{value:"You can disable all animations with ",paraId:8,tocIndex:0},{value:"animate: false",paraId:8,tocIndex:0},{value:":",paraId:8,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  },\n  encode: { x: 'date', y: 'close' },\n  animate: false,\n});\nchart.render();\n",paraId:9,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  animate: {\n    enter: { type: 'fadeIn', duration: 1000 },\n  },\n});\n\nchart.render();\n",paraId:10,tocIndex:1},{value:"Marks specify animation properties through ",paraId:11,tocIndex:2},{value:"mark.animate",paraId:11,tocIndex:2},{value:", with three parts of animation that can be specified:",paraId:11,tocIndex:2},{value:"enter",paraId:12,tocIndex:2},{value:" - New graphics",paraId:12,tocIndex:2},{value:"update",paraId:13,tocIndex:2},{value:" - Updated graphics",paraId:13,tocIndex:2},{value:"exit",paraId:14,tocIndex:2},{value:" - Deleted graphics",paraId:14,tocIndex:2},{value:"Property",paraId:15,tocIndex:4},{value:"Description",paraId:15,tocIndex:4},{value:"Type",paraId:15,tocIndex:4},{value:"Default",paraId:15,tocIndex:4},{value:"Required",paraId:15,tocIndex:4},{value:"enter",paraId:15,tocIndex:4},{value:"Enter animation configuration",paraId:15,tocIndex:4},{value:"EnterAnimateOptions",paraId:15,tocIndex:4},{value:"-",paraId:15,tocIndex:4},{value:"update",paraId:15,tocIndex:4},{value:"Update animation configuration",paraId:15,tocIndex:4},{value:"UpdateAnimateOptions",paraId:15,tocIndex:4},{value:"-",paraId:15,tocIndex:4},{value:"exit",paraId:15,tocIndex:4},{value:"Exit animation configuration",paraId:15,tocIndex:4},{value:"ExitAnimateOptions",paraId:15,tocIndex:4},{value:"-",paraId:15,tocIndex:4},{value:"enterType",paraId:15,tocIndex:4},{value:"Enter animation type",paraId:15,tocIndex:4},{value:"string",paraId:15,tocIndex:4},{value:"fadeIn",paraId:15,tocIndex:4},{value:"enterDuration",paraId:15,tocIndex:4},{value:"Enter animation duration (milliseconds)",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:"300",paraId:15,tocIndex:4},{value:"enterDelay",paraId:15,tocIndex:4},{value:"Enter animation delay (milliseconds)",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:"0",paraId:15,tocIndex:4},{value:"enterEasing",paraId:15,tocIndex:4},{value:"Enter animation easing function",paraId:15,tocIndex:4},{value:"string",paraId:15,tocIndex:4},{value:"ease",paraId:15,tocIndex:4},{value:"enterFill",paraId:15,tocIndex:4},{value:"Enter animation display effect in non-running state",paraId:15,tocIndex:4},{value:"Fill",paraId:15,tocIndex:4},{value:"both",paraId:15,tocIndex:4},{value:"updateType",paraId:15,tocIndex:4},{value:"Update animation type",paraId:15,tocIndex:4},{value:"string",paraId:15,tocIndex:4},{value:"morphing",paraId:15,tocIndex:4},{value:"updateDuration",paraId:15,tocIndex:4},{value:"Update animation duration (milliseconds)",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:"300",paraId:15,tocIndex:4},{value:"updateDelay",paraId:15,tocIndex:4},{value:"Update animation delay (milliseconds)",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:"0",paraId:15,tocIndex:4},{value:"updateEasing",paraId:15,tocIndex:4},{value:"Update animation easing function",paraId:15,tocIndex:4},{value:"string",paraId:15,tocIndex:4},{value:"ease",paraId:15,tocIndex:4},{value:"updateFill",paraId:15,tocIndex:4},{value:"Update animation display effect in non-running state",paraId:15,tocIndex:4},{value:"Fill",paraId:15,tocIndex:4},{value:"both",paraId:15,tocIndex:4},{value:"exitType",paraId:15,tocIndex:4},{value:"Exit animation type",paraId:15,tocIndex:4},{value:"string",paraId:15,tocIndex:4},{value:"fadeOut",paraId:15,tocIndex:4},{value:"exitDuration",paraId:15,tocIndex:4},{value:"Exit animation duration (milliseconds)",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:"300",paraId:15,tocIndex:4},{value:"exitDelay",paraId:15,tocIndex:4},{value:"Exit animation delay (milliseconds)",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:"0",paraId:15,tocIndex:4},{value:"exitEasing",paraId:15,tocIndex:4},{value:"Exit animation easing function",paraId:15,tocIndex:4},{value:"string",paraId:15,tocIndex:4},{value:"ease",paraId:15,tocIndex:4},{value:"exitFill",paraId:15,tocIndex:4},{value:"Exit animation display effect in non-running state",paraId:15,tocIndex:4},{value:"Fill",paraId:15,tocIndex:4},{value:"both",paraId:15,tocIndex:4},{value:"Complex type descriptions:",paraId:16,tocIndex:4},{value:"EnterAnimateOptions",paraId:17,tocIndex:4},{value:": Enter animation configuration object, containing type, duration, delay, easing, fill properties",paraId:17,tocIndex:4},{value:"UpdateAnimateOptions",paraId:17,tocIndex:4},{value:": Update animation configuration object, containing type, duration, delay, easing, fill properties",paraId:17,tocIndex:4},{value:"ExitAnimateOptions",paraId:17,tocIndex:4},{value:": Exit animation configuration object, containing type, duration, delay, easing, fill properties",paraId:17,tocIndex:4},{value:"Fill",paraId:17,tocIndex:4},{value:": Animation fill mode, options are ",paraId:17,tocIndex:4},{value:"'auto'",paraId:17,tocIndex:4},{value:", ",paraId:17,tocIndex:4},{value:"'none'",paraId:17,tocIndex:4},{value:", ",paraId:17,tocIndex:4},{value:"'forwards'",paraId:17,tocIndex:4},{value:", ",paraId:17,tocIndex:4},{value:"'backwards'",paraId:17,tocIndex:4},{value:", ",paraId:17,tocIndex:4},{value:"'both'",paraId:17,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/deaths.json',\n  },\n  encode: { x: 'Month', y: 'Death', color: 'Type' },\n  transform: [\n    { type: 'stackY' },\n    { type: 'stackEnter', groupBy: ['color', 'x'], duration: 2000 },\n  ],\n  scale: { y: { type: 'sqrt' } },\n  coordinate: { type: 'polar' },\n  animate: { enter: { type: 'waveIn' } },\n  axis: { y: false },\n});\n\nchart.render();\n",paraId:18,tocIndex:4},{value:"Animation ",paraId:19,tocIndex:5},{value:"Type",paraId:19,tocIndex:5},{value:" determines the visual effect of the animation. G2 provides various built-in animation types, and can also be set to ",paraId:19,tocIndex:5},{value:"null",paraId:19,tocIndex:5},{value:", ",paraId:19,tocIndex:5},{value:"undefined",paraId:19,tocIndex:5},{value:", or ",paraId:19,tocIndex:5},{value:"false",paraId:19,tocIndex:5},{value:" to disable animation. Common animation types include:",paraId:19,tocIndex:5},{value:"Animation Type",paraId:20,tocIndex:5},{value:"Function",paraId:20,tocIndex:5},{value:"fadeIn",paraId:20,tocIndex:5},{value:"Fade-in effect, graphics from transparent to visible",paraId:20,tocIndex:5},{value:"growInX",paraId:20,tocIndex:5},{value:"Growth effect along X-axis direction",paraId:20,tocIndex:5},{value:"growInY",paraId:20,tocIndex:5},{value:"Growth effect along Y-axis direction",paraId:20,tocIndex:5},{value:"scaleInX",paraId:20,tocIndex:5},{value:"Scale enter effect along X-axis",paraId:20,tocIndex:5},{value:"scaleInY",paraId:20,tocIndex:5},{value:"Scale enter effect along Y-axis",paraId:20,tocIndex:5},{value:"zoomIn",paraId:20,tocIndex:5},{value:"Overall scale enter effect",paraId:20,tocIndex:5},{value:"pathIn",paraId:20,tocIndex:5},{value:"Path enter effect",paraId:20,tocIndex:5},{value:"waveIn",paraId:20,tocIndex:5},{value:"Wave enter effect",paraId:20,tocIndex:5},{value:"morphing",paraId:20,tocIndex:5},{value:"Morphing effect, smooth transition of graphic changes",paraId:20,tocIndex:5},{value:"fadeOut",paraId:20,tocIndex:5},{value:"Fade-out effect, graphics from visible to transparent",paraId:20,tocIndex:5},{value:"scaleOutX",paraId:20,tocIndex:5},{value:"Scale exit effect along X-axis",paraId:20,tocIndex:5},{value:"scaleOutY",paraId:20,tocIndex:5},{value:"Scale exit effect along Y-axis",paraId:20,tocIndex:5},{value:"zoomOut",paraId:20,tocIndex:5},{value:"Overall scale exit effect",paraId:20,tocIndex:5},{value:"Easing functions control the interpolation of visual property changes during animation. G2 supports the following built-in easing functions (from ",paraId:21,tocIndex:6},{value:"easings.net",paraId:21,tocIndex:6},{value:"):",paraId:21,tocIndex:6},{value:"constant",paraId:22,tocIndex:6},{value:"accelerate",paraId:22,tocIndex:6},{value:"decelerate",paraId:22,tocIndex:6},{value:"accelerate-decelerate",paraId:22,tocIndex:6},{value:"decelerate-accelerate",paraId:22,tocIndex:6},{value:"linear",paraId:22,tocIndex:6},{value:"ease-in / in",paraId:22,tocIndex:6},{value:"ease-out / out",paraId:22,tocIndex:6},{value:"ease-in-out / in-out",paraId:22,tocIndex:6},{value:"ease-out-in / out-in",paraId:22,tocIndex:6},{value:"ease",paraId:22,tocIndex:6},{value:"in-sine",paraId:22,tocIndex:6},{value:"out-sine",paraId:22,tocIndex:6},{value:"in-out-sine",paraId:22,tocIndex:6},{value:"out-in-sine",paraId:22,tocIndex:6},{value:"steps",paraId:22,tocIndex:6},{value:"in-quad",paraId:22,tocIndex:6},{value:"out-quad",paraId:22,tocIndex:6},{value:"in-out-quad",paraId:22,tocIndex:6},{value:"out-in-quad",paraId:22,tocIndex:6},{value:"step-start",paraId:22,tocIndex:6},{value:"in-cubic",paraId:22,tocIndex:6},{value:"out-cubic",paraId:22,tocIndex:6},{value:"in-out-cubic",paraId:22,tocIndex:6},{value:"out-in-cubic",paraId:22,tocIndex:6},{value:"step-end",paraId:22,tocIndex:6},{value:"in-quart",paraId:22,tocIndex:6},{value:"out-quart",paraId:22,tocIndex:6},{value:"in-out-quart",paraId:22,tocIndex:6},{value:"out-in-quart",paraId:22,tocIndex:6},{value:"in-quint",paraId:22,tocIndex:6},{value:"out-quint",paraId:22,tocIndex:6},{value:"in-out-quint",paraId:22,tocIndex:6},{value:"out-in-quint",paraId:22,tocIndex:6},{value:"in-expo",paraId:22,tocIndex:6},{value:"out-expo",paraId:22,tocIndex:6},{value:"in-out-expo",paraId:22,tocIndex:6},{value:"out-in-expo",paraId:22,tocIndex:6},{value:"in-circ",paraId:22,tocIndex:6},{value:"out-circ",paraId:22,tocIndex:6},{value:"in-out-circ",paraId:22,tocIndex:6},{value:"out-in-circ",paraId:22,tocIndex:6},{value:"in-back",paraId:22,tocIndex:6},{value:"out-back",paraId:22,tocIndex:6},{value:"in-out-back",paraId:22,tocIndex:6},{value:"out-in-back",paraId:22,tocIndex:6},{value:"in-bounce",paraId:22,tocIndex:6},{value:"out-bounce",paraId:22,tocIndex:6},{value:"in-out-bounce",paraId:22,tocIndex:6},{value:"out-in-bounce",paraId:22,tocIndex:6},{value:"in-elastic",paraId:22,tocIndex:6},{value:"out-elastic",paraId:22,tocIndex:6},{value:"in-out-elastic",paraId:22,tocIndex:6},{value:"out-in-elastic",paraId:22,tocIndex:6},{value:"spring / spring-in",paraId:22,tocIndex:6},{value:"spring-out",paraId:22,tocIndex:6},{value:"spring-in-out",paraId:22,tocIndex:6},{value:"spring-out-in",paraId:22,tocIndex:6},{value:"Animation fill property specifies the display effect of graphics in non-running animation states (such as before start, after end):",paraId:23,tocIndex:7},{value:"auto",paraId:24,tocIndex:7},{value:"/",paraId:24,tocIndex:7},{value:"none",paraId:24,tocIndex:7},{value:" - Default value, animation does not affect graphic display before the first frame starts and after the last frame ends",paraId:24,tocIndex:7},{value:"forwards",paraId:24,tocIndex:7},{value:" - Animation stays at the end state after completion, does not revert to initial state",paraId:24,tocIndex:7},{value:"backwards",paraId:24,tocIndex:7},{value:" - Apply first frame effect before animation starts",paraId:24,tocIndex:7},{value:"both",paraId:24,tocIndex:7},{value:" - Apply both ",paraId:24,tocIndex:7},{value:"forwards",paraId:24,tocIndex:7},{value:" and ",paraId:24,tocIndex:7},{value:"backwards",paraId:24,tocIndex:7},{value:" effects",paraId:24,tocIndex:7},{value:"G2 supports mapping data values to animation properties, making animation also have data visualization significance. Through ",paraId:25,tocIndex:8},{value:"encode",paraId:25,tocIndex:8},{value:", data fields can be mapped to animation properties such as ",paraId:25,tocIndex:8},{value:"enterDuration",paraId:25,tocIndex:8},{value:", ",paraId:25,tocIndex:8},{value:"enterDelay",paraId:25,tocIndex:8},{value:", etc.",paraId:25,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { name: 'event planning', startTime: 1, endTime: 4 },\n    { name: 'layout logistics', startTime: 3, endTime: 13 },\n    { name: 'select vendors', startTime: 5, endTime: 8 },\n    { name: 'hire venue', startTime: 9, endTime: 13 },\n    { name: 'hire caterer', startTime: 10, endTime: 14 },\n    { name: 'hire event decorators', startTime: 12, endTime: 17 },\n    { name: 'rehearsal', startTime: 14, endTime: 16 },\n    { name: 'event celebration', startTime: 17, endTime: 18 },\n  ],\n  encode: {\n    x: 'name',\n    y: ['endTime', 'startTime'],\n    color: 'name',\n    enterDuration: (d) => (d.endTime - d.startTime) * 300,\n    enterDelay: (d) => d.startTime * 100,\n  },\n  coordinate: { transform: [{ type: 'transpose' }] },\n});\n\nchart.render();\n",paraId:26,tocIndex:8},{value:"G2 provides the ",paraId:27,tocIndex:9},{value:"stackEnter",paraId:27,tocIndex:9},{value:" mark transform to implement group animations, making graphics appear sequentially according to specific rules. This transform first groups graphics and then stacks their appearance time and duration spatially.",paraId:27,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/doughnut-purchases.json',\n  },\n  children: [\n    {\n      type: 'line',\n      encode: { x: 'year', y: 'count', color: 'year', shape: 'smooth' },\n      scale: { y: { zero: true, nice: true } },\n      style: { gradient: 'x', gradientColor: 'start' },\n      animate: { enter: { type: 'pathIn', duration: 3000 } },\n      axis: { y: { labelFormatter: '~s' } },\n    },\n    {\n      type: 'point',\n      encode: { x: 'year', y: 'count', color: 'year', shape: 'point' },\n      transform: [{ type: 'stackEnter' }],\n      animate: { enter: { duration: 300 } },\n    },\n    {\n      type: 'text',\n      encode: { x: 'year', y: 'count', text: 'year' },\n      transform: [{ type: 'stackEnter' }],\n      style: { lineWidth: 5, stroke: '#fff', textAlign: 'center', dy: -8 },\n      animate: { enter: { duration: 300 } },\n    },\n  ],\n});\n\nchart.render();\n",paraId:28,tocIndex:9},{value:"G2 provides the capability to create keyframe animations that can smoothly transition between different views to show data changes. Create timing containers through ",paraId:29,tocIndex:10},{value:"timingKeyframe",paraId:29,tocIndex:10},{value:", and use ",paraId:29,tocIndex:10},{value:"key",paraId:29,tocIndex:10},{value:" and ",paraId:29,tocIndex:10},{value:"groupKey",paraId:29,tocIndex:10},{value:" channels to specify correspondences between elements.",paraId:29,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'timingKeyframe',\n  autoFit: true,\n  direction: 'alternate',\n  iterationCount: 2,\n  children: [\n    {\n      type: 'interval',\n      data: [\n        { gender: 'female', height: 161.2, weight: 51.6 },\n        { gender: 'female', height: 167.5, weight: 59 },\n        { gender: 'female', height: 159.5, weight: 49.2 },\n        { gender: 'female', height: 157, weight: 63 },\n        { gender: 'female', height: 155.8, weight: 53.6 },\n        { gender: 'female', height: 170, weight: 59 },\n        { gender: 'man', height: 159.1, weight: 47.6 },\n        { gender: 'man', height: 166, weight: 69.8 },\n        { gender: 'man', height: 176.2, weight: 66.8 },\n        { gender: 'man', height: 160.2, weight: 75.2 },\n        { gender: 'man', height: 172.5, weight: 55.2 },\n      ],\n      encode: { x: 'gender', y: 'weight', color: 'gender', key: 'gender' },\n      transform: [{ type: 'groupX', y: 'mean' }],\n    },\n    {\n      type: 'point',\n      data: [\n        { gender: 'female', height: 161.2, weight: 51.6 },\n        { gender: 'female', height: 167.5, weight: 59 },\n        { gender: 'female', height: 159.5, weight: 49.2 },\n        { gender: 'female', height: 157, weight: 63 },\n        { gender: 'female', height: 155.8, weight: 53.6 },\n        { gender: 'female', height: 170, weight: 59 },\n        { gender: 'man', height: 159.1, weight: 47.6 },\n        { gender: 'man', height: 166, weight: 69.8 },\n        { gender: 'man', height: 176.2, weight: 66.8 },\n        { gender: 'man', height: 160.2, weight: 75.2 },\n        { gender: 'man', height: 172.5, weight: 55.2 },\n      ],\n      encode: {\n        x: 'height',\n        y: 'weight',\n        color: 'gender',\n        shape: 'point',\n        groupKey: 'gender',\n      },\n    },\n  ],\n  duration: 1000,\n});\n\nchart.render();\n",paraId:30,tocIndex:10},{value:"Lottie",paraId:31,tocIndex:11},{value:" can greatly enrich animation description capabilities.",paraId:31,tocIndex:11},{value:"For specific implementation, please refer to: ",paraId:32,tocIndex:11},{value:"lottie",paraId:33,tocIndex:11},{value:".",paraId:32,tocIndex:11},{value:"Timing animation (timingSequence) is still under development, stay tuned.",paraId:34,tocIndex:12}]},66945:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(92433);const t=[{value:"pathIn",paraId:0},{value:" is an SVG path entrance animation. It is implemented by affecting the ",paraId:0},{value:"lineDash",paraId:0},{value:" property.",paraId:0},{value:"chart\n  .line()\n  /* ... */\n  .animate('enter', { type: 'pathIn' });\n",paraId:1,tocIndex:0}]},56506:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(29339);const t=[{value:"scaleInX",paraId:0},{value:" is a growth animation for individual graphics along the x-direction. It affects the ",paraId:0},{value:"transform.scale",paraId:0},{value:" property.",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'scaleInX' });\n",paraId:1,tocIndex:0}]},14234:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(50417);const t=[{value:"scaleInY",paraId:0},{value:" is a growth animation for individual graphics along the y-direction. It affects the ",paraId:0},{value:"transform.scale",paraId:0},{value:" property.",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'scaleInY' });\n",paraId:1,tocIndex:0}]},31560:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(7365);const t=[{value:"scaleOutX",paraId:0},{value:" is a disappearing animation for individual graphics along the x-direction. It affects the ",paraId:0},{value:"transform.scale",paraId:0},{value:" property.",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('exit', { type: 'scaleOutX' });\n",paraId:1,tocIndex:0}]},87e3:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(60736);const t=[{value:"scaleOutY",paraId:0},{value:" is a disappearing animation for individual graphics along the y-direction. It affects the ",paraId:0},{value:"transform.scale",paraId:0},{value:" property.",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('exit', { type: 'scaleOutY' });\n",paraId:1,tocIndex:0}]},12053:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(44968);const t=[{value:"waveIn",paraId:0},{value:" is a wave entrance animation effect that behaves differently in different coordinate systems. In Cartesian coordinate systems, it affects the ",paraId:0},{value:"transform.scale",paraId:0},{value:" property, while in polar coordinate systems, it affects the Path property of arcs.",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'waveIn' });\n",paraId:1,tocIndex:0}]},97484:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(35530);const t=[{value:"zoomIn",paraId:0},{value:" is a zoom-in animation that scales up from the center point of graphics. It affects the ",paraId:0},{value:"transform.scale",paraId:0},{value:" property.",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'zoomIn' });\n",paraId:1,tocIndex:0}]},61469:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(59635);const t=[{value:"zoomOut",paraId:0},{value:" is a zoom-out animation that scales down from the center point of graphics. It affects the ",paraId:0},{value:"transform.scale",paraId:0},{value:" property.",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('exit', { type: 'zoomOut' });\n",paraId:1,tocIndex:0}]},95259:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(88727);const t=[{value:"To effectively use G2 for data visualization, it's important to understand the components of G2 charts and related concepts.",paraId:0},{value:"Below is a basic G2 chart, composed of ",paraId:1,tocIndex:0},{value:"Components",paraId:1,tocIndex:0},{value:" and ",paraId:1,tocIndex:0},{value:"Marks",paraId:1,tocIndex:0},{value:".",paraId:1,tocIndex:0},{value:"It's important to note that in G2 5.0, annotations no longer need to be configured separately. Annotations are also a type of mark, or certain marks can be used as annotations, such as Text, Image, Line marks, etc.",paraId:2,tocIndex:0},{value:"The title provides a brief summary of the data displayed in the chart. It is a commonly used component and supports both main titles and subtitles, along with their style and positioning options.",paraId:3,tocIndex:1},{value:"Refer to the ",paraId:4,tocIndex:1},{value:"Title",paraId:5,tocIndex:1},{value:" tutorial for more information.",paraId:4,tocIndex:1},{value:"Draws the coordinate axis, currently supporting both Cartesian and polar coordinate axis.",paraId:6,tocIndex:2},{value:"Each axis is composed of the axis line, ticks, tick labels, title, and grid lines.",paraId:7,tocIndex:2},{value:"Refer to the ",paraId:8,tocIndex:2},{value:"Axis",paraId:9,tocIndex:2},{value:" tutorial for more information.",paraId:8,tocIndex:2},{value:"Draws the legend, with G2 offering two types: Category Legend and Continuous Legend, used for displaying categorical and continuous data, respectively.",paraId:10,tocIndex:3},{value:"Refer to the ",paraId:11,tocIndex:3},{value:"Legend",paraId:12,tocIndex:3},{value:" tutorial for more information.",paraId:11,tocIndex:3},{value:"The scrollbar is an interactive component that hides any overflow when the display area is not large enough to show all information. Users can reveal hidden parts by scrolling vertically or horizontally.",paraId:13,tocIndex:4},{value:"Whether content exceeds the display area depends on the amount of content and the size of the display area. When vertical content exceeds the display area, a vertical scrollbar should be used to control what is shown; the same logic applies to horizontal scrollbars.",paraId:14,tocIndex:4},{value:"Refer to the ",paraId:15,tocIndex:4},{value:"Scrollbar",paraId:16,tocIndex:4},{value:" tutorial for more information.",paraId:15,tocIndex:4},{value:"The slider is an auxiliary component for viewing data, compressing large volumes of data onto one axis. It allows users to both view an overall data landscape and zoom into specific data segments, enabling drag-and-drop for observing data evolution within a certain range.",paraId:17,tocIndex:5},{value:"The slider compresses value-range data and is closely tied to the type of scale corresponding to the position channels x and y. Generally, it is used more frequently for time-based scales, less for continuous axis, and rarely for categorical axis.",paraId:18,tocIndex:5},{value:"Refer to the ",paraId:19,tocIndex:5},{value:"Slider",paraId:20,tocIndex:5},{value:" tutorial for more information.",paraId:19,tocIndex:5},{value:"When the mouse hovers over a point, a tooltip appears showing information related to that point, such as its value and data units. The tooltip's content can also be dynamically specified using a formatting function.",paraId:21,tocIndex:6},{value:"Refer to the ",paraId:22,tocIndex:6},{value:"Tooltip",paraId:23,tocIndex:6},{value:" tutorial for more information.",paraId:22,tocIndex:6},{value:"In G2, data labels (Label) are one of the ways to add annotations to charts.",paraId:24,tocIndex:7},{value:"Refer to the ",paraId:25,tocIndex:7},{value:"Label",paraId:26,tocIndex:7},{value:" tutorial for more information.",paraId:25,tocIndex:7},{value:"Whether for single-view charts or multi-view charts, layout information (chart width, height, etc.) can be specified at the top level of options.",paraId:27,tocIndex:9},{value:"// Mark level\nconst markLevel = {\n  type: 'interval',\n  width: 640,\n  height: 180,\n  margin: 10,\n};\n// View level\nconst viewLevel = {\n  type: 'view',\n  width: 640,\n  height: 180,\n  margin: 10,\n  // ...\n};\n// Multi-view chart\nconst compositionLevel = {\n  type: 'spaceFlex',\n  width: 640,\n  height: 180,\n  margin: 10,\n};\n",paraId:28,tocIndex:9},{value:"You can also specify it when initializing the ",paraId:29,tocIndex:9},{value:"Chart",paraId:29,tocIndex:9},{value:" object:",paraId:29,tocIndex:9},{value:"const chart = new Chart({\n  type: 'view',\n  width: 640,\n  height: 180,\n  margin: 10,\n  // ...\n});\n",paraId:30,tocIndex:9},{value:"You can also specify through ",paraId:31,tocIndex:9},{value:"node.attr",paraId:31,tocIndex:9},{value:":",paraId:31,tocIndex:9},{value:"chart.interval().attr('padding', 10).attr('margin', 20);\n\nchart.view().attr('padding', 10).attr('margin', 20);\n\nchart.spaceFlex().attr('padding', 10).attr('margin', 20);\n",paraId:32,tocIndex:9},{value:"In G2, the ",paraId:33,tocIndex:10},{value:"view model",paraId:33,tocIndex:10},{value:" is used to define how chart views are divided. Different regions generated by this division can draw different content and be configured through corresponding options. A view can be simply understood as an independent chart. G2's view model structure is as follows:",paraId:33,tocIndex:10},{value:"View Area",paraId:34,tocIndex:10},{value:": Represents the overall view area of the chart. When setting the chart's width and height, the effective range is the width and height of the view area. The area between the view area and the plot area is called the ",paraId:34,tocIndex:10},{value:"margin range",paraId:34,tocIndex:10},{value:", whose size can be adjusted by configuring the margin property, typically used to set the distance between fixed components (such as axis, legends, etc.) and the boundaries.",paraId:34,tocIndex:10},{value:"Plot Area",paraId:35,tocIndex:10},{value:": Represents the drawing area of the chart. The area between the plot area and the main area is called the ",paraId:35,tocIndex:10},{value:"padding range",paraId:35,tocIndex:10},{value:", whose size can be adjusted by configuring the padding property, typically used to draw chart components such as ",paraId:35,tocIndex:10},{value:"title",paraId:35,tocIndex:10},{value:", ",paraId:35,tocIndex:10},{value:"legend",paraId:35,tocIndex:10},{value:", ",paraId:35,tocIndex:10},{value:"axis",paraId:35,tocIndex:10},{value:", etc.",paraId:35,tocIndex:10},{value:"Main Area",paraId:36,tocIndex:10},{value:": Represents the main area for drawing chart content. The area between the main area and the content area is called the ",paraId:36,tocIndex:10},{value:"breathing range",paraId:36,tocIndex:10},{value:", whose size can be adjusted by configuring the inset property, used to create spacing between components and marks (graphic elements) to prevent overlap, especially useful for scatter plots.",paraId:36,tocIndex:10},{value:"Content Area",paraId:37,tocIndex:10},{value:": Represents the content area for drawing marks. Primarily used for drawing marks (graphic elements).",paraId:37,tocIndex:10},{value:"The size of the content area is calculated by the following formula:",paraId:38,tocIndex:10},{value:"const contentWidth =\n  width -\n  paddingLeft -\n  paddingRight -\n  marginLeft -\n  marginRight -\n  insetLeft -\n  insetRight;\n\nconst contentHeight =\n  height -\n  paddingTop -\n  paddingBottom -\n  marginTop -\n  marginBottom -\n  insetTop -\n  insetBottom;\n",paraId:39,tocIndex:10},{value:"G2 internally implements its own layout algorithm, responsible for coordinating the calculation of layout parameters such as margin, padding, and inset width, ensuring that components like axis and legends are reasonably laid out within the chart container.",paraId:40,tocIndex:11},{value:"You might have wondered why manually declaring ",paraId:41,tocIndex:12},{value:"padding",paraId:41,tocIndex:12},{value:" as ",paraId:41,tocIndex:12},{value:"0",paraId:41,tocIndex:12},{value:" in the configuration causes the x-axis of the chart to display incompletely. To answer this question, we need to explore the dynamic calculation part of G2's layout algorithm.",paraId:41,tocIndex:12},{value:"In G2's layout algorithm, all passed ",paraId:42,tocIndex:12},{value:"padding",paraId:42,tocIndex:12},{value:", ",paraId:42,tocIndex:12},{value:"margin",paraId:42,tocIndex:12},{value:", and ",paraId:42,tocIndex:12},{value:"inset",paraId:42,tocIndex:12},{value:" properties are first obtained. If not set, ",paraId:42,tocIndex:12},{value:"padding",paraId:42,tocIndex:12},{value:" (including ",paraId:42,tocIndex:12},{value:"paddingTop",paraId:42,tocIndex:12},{value:", ",paraId:42,tocIndex:12},{value:"paddingLeft",paraId:42,tocIndex:12},{value:", etc.) is assigned a default value of ",paraId:42,tocIndex:12},{value:"auto",paraId:42,tocIndex:12},{value:", ",paraId:42,tocIndex:12},{value:"margin",paraId:42,tocIndex:12},{value:" is assigned a default value of ",paraId:42,tocIndex:12},{value:"16",paraId:42,tocIndex:12},{value:", and ",paraId:42,tocIndex:12},{value:"inset",paraId:42,tocIndex:12},{value:" is assigned a default value of ",paraId:42,tocIndex:12},{value:"0",paraId:42,tocIndex:12},{value:". Next, chart components are grouped by position to facilitate subsequent layout calculations.",paraId:42,tocIndex:12},{value:"Taking ",paraId:43,tocIndex:12},{value:"position = 'top'",paraId:43,tocIndex:12},{value:" as an example, if an explicit ",paraId:43,tocIndex:12},{value:"paddingTop",paraId:43,tocIndex:12},{value:" is configured, the logic for dynamically calculating ",paraId:43,tocIndex:12},{value:"paddingTop",paraId:43,tocIndex:12},{value:" is not triggered. At this time, for components with undefined ",paraId:43,tocIndex:12},{value:"size",paraId:43,tocIndex:12},{value:", the internally defined default size ",paraId:43,tocIndex:12},{value:"defaultSize",paraId:43,tocIndex:12},{value:" is used; for group components, the above operations are executed recursively, and then the maximum child component size is taken as the parent component size; if the component includes an axis component and ",paraId:43,tocIndex:12},{value:"labelAutoHide",paraId:43,tocIndex:12},{value:" is not explicitly set, ",paraId:43,tocIndex:12},{value:"labelAutoHide",paraId:43,tocIndex:12},{value:" is set to true to automatically hide axis labels to avoid overflow.",paraId:43,tocIndex:12},{value:"If ",paraId:44,tocIndex:12},{value:"paddingTop",paraId:44,tocIndex:12},{value:" is not configured, the dynamic calculation logic is triggered, and the final actual ",paraId:44,tocIndex:12},{value:"paddingTop",paraId:44,tocIndex:12},{value:" size is calculated by accumulating margins based on the actual size of components (",paraId:44,tocIndex:12},{value:"crossPadding",paraId:44,tocIndex:12},{value:" defaults to ",paraId:44,tocIndex:12},{value:"12",paraId:44,tocIndex:12},{value:").",paraId:44,tocIndex:12},{value:"To answer the original question: In G2, the padding range is used to reserve display space for chart components. If you manually set ",paraId:45,tocIndex:12},{value:"padding",paraId:45,tocIndex:12},{value:" to ",paraId:45,tocIndex:12},{value:"0",paraId:45,tocIndex:12},{value:", it will disable the internal adaptive calculation logic, which may cause chart components to display incompletely. Therefore, when personalized configuration is needed, ensure sufficient space is reserved for components; otherwise, it's recommended to use the default adaptive logic to avoid display issues.",paraId:45,tocIndex:12},{value:"G2 internally sets a fallback mechanism for the chart display area. When there are mark elements (such as ",paraId:46,tocIndex:13},{value:"line",paraId:46,tocIndex:13},{value:", ",paraId:46,tocIndex:13},{value:"interval",paraId:46,tocIndex:13},{value:", etc.) in the view, the anti-compression mechanism is triggered to ensure that the main area of the chart has a minimum proportion of ",paraId:46,tocIndex:13},{value:"1/4",paraId:46,tocIndex:13},{value:". Taking the horizontal direction as an example, assuming the plot area size is ",paraId:46,tocIndex:13},{value:"plotWidth",paraId:46,tocIndex:13},{value:", if ",paraId:46,tocIndex:13},{value:"plotWidth",paraId:46,tocIndex:13},{value:" minus the dynamically calculated left padding ",paraId:46,tocIndex:13},{value:"pl0",paraId:46,tocIndex:13},{value:" and right padding ",paraId:46,tocIndex:13},{value:"pr0",paraId:46,tocIndex:13},{value:" is less than ",paraId:46,tocIndex:13},{value:"plotWidth * 1/4",paraId:46,tocIndex:13},{value:", the main area size will be prioritized to be ",paraId:46,tocIndex:13},{value:"plotWidth * 1/4",paraId:46,tocIndex:13},{value:", and the padding will be proportionally reduced. When the user specifies ",paraId:46,tocIndex:13},{value:"paddingLeft",paraId:46,tocIndex:13},{value:", the size of ",paraId:46,tocIndex:13},{value:"paddingRight",paraId:46,tocIndex:13},{value:" will be dynamically calculated, and the remaining space will be allocated proportionally. It's best to avoid setting both left and right margins to fixed values simultaneously, as this may cause the adaptive algorithm to fail. The calculation rules for the vertical direction are similar.",paraId:46,tocIndex:13},{value:"Property",paraId:47,tocIndex:14},{value:"Description",paraId:47,tocIndex:14},{value:"Type",paraId:47,tocIndex:14},{value:"Default",paraId:47,tocIndex:14},{value:"Required",paraId:47,tocIndex:14},{value:"autoFit",paraId:47,tocIndex:14},{value:"When enabled, chart width and height stay consistent with container",paraId:47,tocIndex:14},{value:"boolean",paraId:47,tocIndex:14},{value:"false",paraId:47,tocIndex:14},{value:"width",paraId:47,tocIndex:14},{value:"Set chart width",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"640",paraId:47,tocIndex:14},{value:"height",paraId:47,tocIndex:14},{value:"Set chart height",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"480",paraId:47,tocIndex:14},{value:"viewStyle",paraId:47,tocIndex:14},{value:"Set chart view style",paraId:47,tocIndex:14},{value:"viewStyle",paraId:48,tocIndex:14},{value:"See ",paraId:47,tocIndex:14},{value:"viewStyle",paraId:49,tocIndex:14},{value:"margin",paraId:47,tocIndex:14},{value:"Set margin values for all four directions, lower priority than individual settings",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"16",paraId:47,tocIndex:14},{value:"marginLeft",paraId:47,tocIndex:14},{value:"Set left margin value",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"16",paraId:47,tocIndex:14},{value:"marginTop",paraId:47,tocIndex:14},{value:"Set top margin value",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"16",paraId:47,tocIndex:14},{value:"marginRight",paraId:47,tocIndex:14},{value:"Set right margin value",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"16",paraId:47,tocIndex:14},{value:"marginBottom",paraId:47,tocIndex:14},{value:"Set bottom margin value",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"16",paraId:47,tocIndex:14},{value:"padding",paraId:47,tocIndex:14},{value:"Set padding values for all four directions, lower priority than individual settings",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"auto",paraId:47,tocIndex:14},{value:"paddingLeft",paraId:47,tocIndex:14},{value:"Set left padding value",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"auto",paraId:47,tocIndex:14},{value:"paddingTop",paraId:47,tocIndex:14},{value:"Set top padding value",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"auto",paraId:47,tocIndex:14},{value:"paddingRight",paraId:47,tocIndex:14},{value:"Set right padding value",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"auto",paraId:47,tocIndex:14},{value:"paddingBottom",paraId:47,tocIndex:14},{value:"Set bottom padding value",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"auto",paraId:47,tocIndex:14},{value:"inset",paraId:47,tocIndex:14},{value:"Set inset values for all four directions, lower priority than individual settings",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"0",paraId:47,tocIndex:14},{value:"insetLeft",paraId:47,tocIndex:14},{value:"Set left inset width",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"0",paraId:47,tocIndex:14},{value:"insetTop",paraId:47,tocIndex:14},{value:"Set top inset width",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"0",paraId:47,tocIndex:14},{value:"insetRight",paraId:47,tocIndex:14},{value:"Set right inset width",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"0",paraId:47,tocIndex:14},{value:"insetBottom",paraId:47,tocIndex:14},{value:"Set bottom inset width",paraId:47,tocIndex:14},{value:"number",paraId:47,tocIndex:14},{value:"0",paraId:47,tocIndex:14},{value:"Try it out:",paraId:50,tocIndex:14},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'point',\n  height: 600,\n  width: 700,\n  margin: 100,\n  padding: 60,\n  paddingLeft: 100, // 单独设置paddingLeft的优先级比padding高\n  insetLeft: 30,\n  insetRight: 30,\n\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/commits.json',\n  },\n  encode: {\n    x: (d) => new Date(d.time).getUTCHours(),\n    y: (d) => new Date(d.time).getUTCDay(),\n    size: 'count',\n    shape: 'point',\n  },\n  transform: [{ type: 'group', size: 'sum' }, { type: 'sortY' }],\n  scale: { y: { type: 'point' } },\n  style: { shape: 'point', fill: '#76b7b2' },\n  axis: {\n    x: { title: 'time (hours)', tickCount: 24 },\n    y: { title: 'time (day)', grid: true },\n  },\n  legend: false,\n  viewStyle: {\n    viewFill: '#DCEEFE',\n    plotFill: '#A2D4F6',\n    mainFill: '#FFC6A1',\n    contentFill: '#FF8E72',\n  },\n});\n\nchart.render();\n",paraId:51,tocIndex:14},{value:"If you want the chart's width and height to stay consistent with the container, you can set ",paraId:52,tocIndex:15},{value:"options.autoFit",paraId:52,tocIndex:15},{value:" to ",paraId:52,tocIndex:15},{value:"true",paraId:52,tocIndex:15},{value:", which has lower priority than specifying width and height.",paraId:52,tocIndex:15},{value:"({ type: 'view', autoFit: true });\n",paraId:53,tocIndex:15},{value:"Configure the chart's view style.",paraId:54,tocIndex:16},{value:"Property",paraId:55,tocIndex:16},{value:"Description",paraId:55,tocIndex:16},{value:"Type",paraId:55,tocIndex:16},{value:"Default",paraId:55,tocIndex:16},{value:"Required",paraId:55,tocIndex:16},{value:"view",paraId:55,tocIndex:16},{value:"Configure view area style",paraId:55,tocIndex:16},{value:"view",paraId:56,tocIndex:16},{value:"See ",paraId:55,tocIndex:16},{value:"view",paraId:57,tocIndex:16},{value:"plot",paraId:55,tocIndex:16},{value:"Configure plot area style",paraId:55,tocIndex:16},{value:"plot",paraId:58,tocIndex:16},{value:"See ",paraId:55,tocIndex:16},{value:"plot",paraId:59,tocIndex:16},{value:"main",paraId:55,tocIndex:16},{value:"Configure main area style",paraId:55,tocIndex:16},{value:"main",paraId:60,tocIndex:16},{value:"See ",paraId:55,tocIndex:16},{value:"main",paraId:61,tocIndex:16},{value:"content",paraId:55,tocIndex:16},{value:"Configure content area style",paraId:55,tocIndex:16},{value:"content",paraId:62,tocIndex:16},{value:"See ",paraId:55,tocIndex:16},{value:"content",paraId:63,tocIndex:16},{value:"Configure the chart's view area style.",paraId:64,tocIndex:17},{value:"Property",paraId:65,tocIndex:17},{value:"Description",paraId:65,tocIndex:17},{value:"Type",paraId:65,tocIndex:17},{value:"Default",paraId:65,tocIndex:17},{value:"Required",paraId:65,tocIndex:17},{value:"viewRadius",paraId:65,tocIndex:17},{value:"Border radius size for chart view area",paraId:65,tocIndex:17},{value:"number",paraId:65,tocIndex:17},{value:"0",paraId:65,tocIndex:17},{value:"viewFill",paraId:65,tocIndex:17},{value:"Fill color for chart view area",paraId:65,tocIndex:17},{value:"string",paraId:65,tocIndex:17},{value:"-",paraId:65,tocIndex:17},{value:"viewFillOpacity",paraId:65,tocIndex:17},{value:"Fill opacity for chart view area",paraId:65,tocIndex:17},{value:"number",paraId:65,tocIndex:17},{value:"-",paraId:65,tocIndex:17},{value:"viewStroke",paraId:65,tocIndex:17},{value:"Stroke color for chart view area",paraId:65,tocIndex:17},{value:"string",paraId:65,tocIndex:17},{value:"-",paraId:65,tocIndex:17},{value:"viewStrokeOpacity",paraId:65,tocIndex:17},{value:"Stroke opacity for chart view area",paraId:65,tocIndex:17},{value:"number",paraId:65,tocIndex:17},{value:"-",paraId:65,tocIndex:17},{value:"viewLineWidth",paraId:65,tocIndex:17},{value:"Stroke width for chart view area",paraId:65,tocIndex:17},{value:"number",paraId:65,tocIndex:17},{value:"-",paraId:65,tocIndex:17},{value:"viewLineDash",paraId:65,tocIndex:17},{value:"Stroke dash configuration for chart view area",paraId:65,tocIndex:17},{value:"[number,number]",paraId:65,tocIndex:17},{value:"-",paraId:65,tocIndex:17},{value:"viewOpacity",paraId:65,tocIndex:17},{value:"Overall opacity for chart view area",paraId:65,tocIndex:17},{value:"number",paraId:65,tocIndex:17},{value:"-",paraId:65,tocIndex:17},{value:"viewShadowColor",paraId:65,tocIndex:17},{value:"Shadow color for chart view area",paraId:65,tocIndex:17},{value:"string",paraId:65,tocIndex:17},{value:"-",paraId:65,tocIndex:17},{value:"viewShadowBlur",paraId:65,tocIndex:17},{value:"Shadow blur factor for chart view area",paraId:65,tocIndex:17},{value:"number",paraId:65,tocIndex:17},{value:"-",paraId:65,tocIndex:17},{value:"viewShadowOffsetX",paraId:65,tocIndex:17},{value:"Shadow horizontal offset for chart view area",paraId:65,tocIndex:17},{value:"number",paraId:65,tocIndex:17},{value:"-",paraId:65,tocIndex:17},{value:"viewShadowOffsetY",paraId:65,tocIndex:17},{value:"Shadow vertical offset for chart view area",paraId:65,tocIndex:17},{value:"number",paraId:65,tocIndex:17},{value:"-",paraId:65,tocIndex:17},{value:"viewCursor",paraId:65,tocIndex:17},{value:"Cursor style for chart view area",paraId:65,tocIndex:17},{value:"string",paraId:65,tocIndex:17},{value:"default",paraId:65,tocIndex:17},{value:"Configure the chart's plot area style.",paraId:66,tocIndex:18},{value:"Property",paraId:67,tocIndex:18},{value:"Description",paraId:67,tocIndex:18},{value:"Type",paraId:67,tocIndex:18},{value:"Default",paraId:67,tocIndex:18},{value:"Required",paraId:67,tocIndex:18},{value:"plotRadius",paraId:67,tocIndex:18},{value:"Border radius size for chart plot area",paraId:67,tocIndex:18},{value:"number",paraId:67,tocIndex:18},{value:"0",paraId:67,tocIndex:18},{value:"plotFill",paraId:67,tocIndex:18},{value:"Fill color for chart plot area",paraId:67,tocIndex:18},{value:"string",paraId:67,tocIndex:18},{value:"-",paraId:67,tocIndex:18},{value:"plotFillOpacity",paraId:67,tocIndex:18},{value:"Fill opacity for chart plot area",paraId:67,tocIndex:18},{value:"number",paraId:67,tocIndex:18},{value:"-",paraId:67,tocIndex:18},{value:"plotStroke",paraId:67,tocIndex:18},{value:"Stroke color for chart plot area",paraId:67,tocIndex:18},{value:"string",paraId:67,tocIndex:18},{value:"-",paraId:67,tocIndex:18},{value:"plotStrokeOpacity",paraId:67,tocIndex:18},{value:"Stroke opacity for chart plot area",paraId:67,tocIndex:18},{value:"number",paraId:67,tocIndex:18},{value:"-",paraId:67,tocIndex:18},{value:"plotLineWidth",paraId:67,tocIndex:18},{value:"Stroke width for chart plot area",paraId:67,tocIndex:18},{value:"number",paraId:67,tocIndex:18},{value:"-",paraId:67,tocIndex:18},{value:"plotLineDash",paraId:67,tocIndex:18},{value:"Stroke dash configuration for chart plot area",paraId:67,tocIndex:18},{value:"[number,number]",paraId:67,tocIndex:18},{value:"-",paraId:67,tocIndex:18},{value:"plotOpacity",paraId:67,tocIndex:18},{value:"Overall opacity for chart plot area",paraId:67,tocIndex:18},{value:"number",paraId:67,tocIndex:18},{value:"-",paraId:67,tocIndex:18},{value:"plotShadowColor",paraId:67,tocIndex:18},{value:"Shadow color for chart plot area",paraId:67,tocIndex:18},{value:"string",paraId:67,tocIndex:18},{value:"-",paraId:67,tocIndex:18},{value:"plotShadowBlur",paraId:67,tocIndex:18},{value:"Shadow blur factor for chart plot area",paraId:67,tocIndex:18},{value:"number",paraId:67,tocIndex:18},{value:"-",paraId:67,tocIndex:18},{value:"plotShadowOffsetX",paraId:67,tocIndex:18},{value:"Shadow horizontal offset for chart plot area",paraId:67,tocIndex:18},{value:"number",paraId:67,tocIndex:18},{value:"-",paraId:67,tocIndex:18},{value:"plotShadowOffsetY",paraId:67,tocIndex:18},{value:"Shadow vertical offset for chart plot area",paraId:67,tocIndex:18},{value:"number",paraId:67,tocIndex:18},{value:"-",paraId:67,tocIndex:18},{value:"plotCursor",paraId:67,tocIndex:18},{value:"Cursor style for chart plot area",paraId:67,tocIndex:18},{value:"string",paraId:67,tocIndex:18},{value:"default",paraId:67,tocIndex:18},{value:"Configure the chart's main area style.",paraId:68,tocIndex:19},{value:"Property",paraId:69,tocIndex:19},{value:"Description",paraId:69,tocIndex:19},{value:"Type",paraId:69,tocIndex:19},{value:"Default",paraId:69,tocIndex:19},{value:"Required",paraId:69,tocIndex:19},{value:"mainRadius",paraId:69,tocIndex:19},{value:"Border radius size for chart main area",paraId:69,tocIndex:19},{value:"number",paraId:69,tocIndex:19},{value:"0",paraId:69,tocIndex:19},{value:"mainFill",paraId:69,tocIndex:19},{value:"Fill color for chart main area",paraId:69,tocIndex:19},{value:"string",paraId:69,tocIndex:19},{value:"-",paraId:69,tocIndex:19},{value:"mainFillOpacity",paraId:69,tocIndex:19},{value:"Fill opacity for chart main area",paraId:69,tocIndex:19},{value:"number",paraId:69,tocIndex:19},{value:"-",paraId:69,tocIndex:19},{value:"mainStroke",paraId:69,tocIndex:19},{value:"Stroke color for chart main area",paraId:69,tocIndex:19},{value:"string",paraId:69,tocIndex:19},{value:"-",paraId:69,tocIndex:19},{value:"mainStrokeOpacity",paraId:69,tocIndex:19},{value:"Stroke opacity for chart main area",paraId:69,tocIndex:19},{value:"number",paraId:69,tocIndex:19},{value:"-",paraId:69,tocIndex:19},{value:"mainLineWidth",paraId:69,tocIndex:19},{value:"Stroke width for chart main area",paraId:69,tocIndex:19},{value:"number",paraId:69,tocIndex:19},{value:"-",paraId:69,tocIndex:19},{value:"mainLineDash",paraId:69,tocIndex:19},{value:"Stroke dash configuration for chart main area",paraId:69,tocIndex:19},{value:"[number,number]",paraId:69,tocIndex:19},{value:"-",paraId:69,tocIndex:19},{value:"mainOpacity",paraId:69,tocIndex:19},{value:"Overall opacity for chart main area",paraId:69,tocIndex:19},{value:"number",paraId:69,tocIndex:19},{value:"-",paraId:69,tocIndex:19},{value:"mainShadowColor",paraId:69,tocIndex:19},{value:"Shadow color for chart main area",paraId:69,tocIndex:19},{value:"string",paraId:69,tocIndex:19},{value:"-",paraId:69,tocIndex:19},{value:"mainShadowBlur",paraId:69,tocIndex:19},{value:"Shadow blur factor for chart main area",paraId:69,tocIndex:19},{value:"number",paraId:69,tocIndex:19},{value:"-",paraId:69,tocIndex:19},{value:"mainShadowOffsetX",paraId:69,tocIndex:19},{value:"Shadow horizontal offset for chart main area",paraId:69,tocIndex:19},{value:"number",paraId:69,tocIndex:19},{value:"-",paraId:69,tocIndex:19},{value:"mainShadowOffsetY",paraId:69,tocIndex:19},{value:"Shadow vertical offset for chart main area",paraId:69,tocIndex:19},{value:"number",paraId:69,tocIndex:19},{value:"-",paraId:69,tocIndex:19},{value:"mainCursor",paraId:69,tocIndex:19},{value:"Cursor style for chart main area",paraId:69,tocIndex:19},{value:"string",paraId:69,tocIndex:19},{value:"default",paraId:69,tocIndex:19},{value:"Configure the chart's content area style.",paraId:70,tocIndex:20},{value:"Property",paraId:71,tocIndex:20},{value:"Description",paraId:71,tocIndex:20},{value:"Type",paraId:71,tocIndex:20},{value:"Default",paraId:71,tocIndex:20},{value:"Required",paraId:71,tocIndex:20},{value:"contentRadius",paraId:71,tocIndex:20},{value:"Border radius size for chart content area",paraId:71,tocIndex:20},{value:"number",paraId:71,tocIndex:20},{value:"0",paraId:71,tocIndex:20},{value:"contentFill",paraId:71,tocIndex:20},{value:"Fill color for chart content area",paraId:71,tocIndex:20},{value:"string",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"contentFillOpacity",paraId:71,tocIndex:20},{value:"Fill opacity for chart content area",paraId:71,tocIndex:20},{value:"number",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"contentStroke",paraId:71,tocIndex:20},{value:"Stroke color for chart content area",paraId:71,tocIndex:20},{value:"string",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"contentStrokeOpacity",paraId:71,tocIndex:20},{value:"Stroke opacity for chart content area",paraId:71,tocIndex:20},{value:"number",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"contentLineWidth",paraId:71,tocIndex:20},{value:"Stroke width for chart content area",paraId:71,tocIndex:20},{value:"number",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"contentLineDash",paraId:71,tocIndex:20},{value:"Stroke dash configuration for chart content area",paraId:71,tocIndex:20},{value:"[number,number]",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"contentOpacity",paraId:71,tocIndex:20},{value:"Overall opacity for chart content area",paraId:71,tocIndex:20},{value:"number",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"contentShadowColor",paraId:71,tocIndex:20},{value:"Shadow color for chart content area",paraId:71,tocIndex:20},{value:"string",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"contentShadowBlur",paraId:71,tocIndex:20},{value:"Shadow blur factor for chart content area",paraId:71,tocIndex:20},{value:"number",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"contentShadowOffsetX",paraId:71,tocIndex:20},{value:"Shadow horizontal offset for chart content area",paraId:71,tocIndex:20},{value:"number",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"contentShadowOffsetY",paraId:71,tocIndex:20},{value:"Shadow vertical offset for chart content area",paraId:71,tocIndex:20},{value:"number",paraId:71,tocIndex:20},{value:"-",paraId:71,tocIndex:20},{value:"contentCursor",paraId:71,tocIndex:20},{value:"Cursor style for chart content area",paraId:71,tocIndex:20},{value:"string",paraId:71,tocIndex:20},{value:"default",paraId:71,tocIndex:20},{value:"When configuring view styles, instead of configuring as an object, you configure using the ",paraId:72,tocIndex:20},{value:"view",paraId:72,tocIndex:20},{value:", ",paraId:72,tocIndex:20},{value:"plot",paraId:72,tocIndex:20},{value:", ",paraId:72,tocIndex:20},{value:"main",paraId:72,tocIndex:20},{value:", ",paraId:72,tocIndex:20},{value:"content",paraId:72,tocIndex:20},{value:" prefixes with properties.",paraId:72,tocIndex:20},{value:"({\n  viewStyle: {\n    // Configure chart view area style\n    viewFill: '#DCEEFE',\n    viewRadius: 50,\n\n    // Configure chart plot area style\n    plotFill: '#fff',\n    plotFillOpacity: 0.45,\n    plotStroke: 'yellow',\n    plotLineWidth: 4,\n\n    // Configure chart main area style\n    mainFill: 'l(270) 0:#ffffff 0.5:#7ec2f3 1:#1890ff',\n    mainFillOpacity: 0.75,\n\n    // Configure chart content area style\n    contentFill: 'l(90) 0:#ffadad 0.5:#ffd6a5 1:#fdffb6',\n    contentShadowColor: '#5d5d5d',\n    contentShadowBlur: 40,\n    contentShadowOffsetX: 5,\n    contentShadowOffsetY: 5,\n  },\n});\n",paraId:73,tocIndex:20},{value:"Try it out:",paraId:74,tocIndex:20},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  viewStyle: {\n    // 配置图表的视图区域的样式\n    viewFill: '#DCEEFE',\n    viewRadius: 20,\n\n    // 配置图表的绘制区域的样式\n    plotFill: '#fff',\n    plotFillOpacity: 0.45,\n    plotStroke: 'yellow',\n    plotLineWidth: 4,\n\n    // 配置图表的主区域的样式\n    mainFill: 'l(270) 0:#ffffff 0.5:#7ec2f3 1:#1890ff',\n    mainFillOpacity: 0.75,\n\n    // 配置图表的内容区域的样式\n    contentFill: 'l(90) 0:#ffadad 0.5:#ffd6a5 1:#fdffb6',\n    contentShadowColor: '#5d5d5d',\n    contentShadowBlur: 40,\n    contentShadowOffsetX: 5,\n    contentShadowOffsetY: 5,\n  },\n  type: 'area',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/aapl.json',\n  },\n  encode: {\n    x: (d) => new Date(d.date),\n    y: 'close',\n  },\n  axis: false,\n  style: {\n    fill: 'l(270) 0:#ffffff 0.5:#7ec2f3 1:#1890ff',\n    fillOpacity: 0.9,\n  },\n  height: 350,\n  width: 700,\n  margin: 30,\n  padding: 20,\n  inset: 15,\n  legend: false,\n});\n\nchart.render();\n",paraId:75,tocIndex:20}]},97167:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(22634);const t=[{value:"Most of G2's capabilities are exposed to users through the ",paraId:0},{value:"Chart",paraId:0},{value:" object. Here's an example of creating a simple bar chart:",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data([\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold');\n\nchart.render();\n",paraId:1},{value:"Let's explore the core usage of the ",paraId:2},{value:"Chart",paraId:2},{value:".",paraId:2},{value:"Every visualization in G2 is created by instantiating a new ",paraId:3,tocIndex:1},{value:"chart instance",paraId:3,tocIndex:1},{value:" using the ",paraId:3,tocIndex:1},{value:"Chart",paraId:3,tocIndex:1},{value:" object:",paraId:3,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  /* chart options */\n});\n",paraId:4,tocIndex:1},{value:"You can specify some global options via ",paraId:5,tocIndex:2},{value:"new Chart(options)",paraId:5,tocIndex:2},{value:", such as the mounting container, width, height, etc. All options are ",paraId:5,tocIndex:2},{value:"optional",paraId:5,tocIndex:2},{value:".",paraId:5,tocIndex:2},{value:"// Specify options as needed\nconst chart = new Chart({\n  width: 800, // Chart width\n  height: 400, // Chart height\n  container: 'chart', // ID of the mounting container\n});\n",paraId:6,tocIndex:2},{value:"A chart instance must be mounted before it can be rendered on the screen. There are two ways to mount it.",paraId:7,tocIndex:3},{value:'<div id="chart"></div>\n',paraId:8,tocIndex:3},{value:"First method, automatic mounting.",paraId:9,tocIndex:3},{value:"const chart = new Chart({\n  container: 'chart', // Specify the mounting container ID\n});\n\n// Or\nconst chart = new Chart({\n  container: document.getElementById('chart'), // Specify the mounting container\n});\n",paraId:10,tocIndex:3},{value:"Second method, manual mounting.",paraId:11,tocIndex:3},{value:"const chart = new Chart();\n\n// Declare visualization\n// ...\n\nconst container = chart.getContainer(); // Get the mounted container\ndocument.getElementById('chart').appendChild(container);\n",paraId:12,tocIndex:3},{value:"Of course, you need to call ",paraId:13,tocIndex:4},{value:"chart.render",paraId:13,tocIndex:4},{value:" before the chart becomes visible.",paraId:13,tocIndex:4},{value:"// Create a chart instance\nconst chart = new Chart({\n  container: 'chart',\n});\n\n// Declare visualization\n// ...\n\n// Render\nchart\n  .render()\n  .then(() => {\n    // Render successful\n  })\n  .catch((error) => {\n    // Render failed\n  });\n",paraId:14,tocIndex:4},{value:"When modifications are made to the declared visualization through the chart instance API, simply calling ",paraId:15,tocIndex:5},{value:"chart.render",paraId:15,tocIndex:5},{value:" again will update the chart.",paraId:15,tocIndex:5},{value:"// Initial render\nchart.render();\n\n// Update declaration\n// ...\n\n// Update chart\nchart.render();\n",paraId:16,tocIndex:5},{value:"Clears the canvas and cancels event listeners. This also clears chart configurations and is often used when drawing a new chart.",paraId:17,tocIndex:6},{value:"chart.clear();\n",paraId:18,tocIndex:6},{value:"Destroys the canvas and cancels event listeners. This is often used when destroying components and pages.",paraId:19,tocIndex:7},{value:"chart.destroy();\n",paraId:20,tocIndex:7}]},90623:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(42131);const t=[{value:"Color plays a crucial role in visualization. It helps us better understand data, highlight key information, enhance visual appeal, and improve readability. In visualization, color typically serves the following purposes:",paraId:0},{value:"Distinguishing Data Categories",paraId:1},{value:": Differentiating various data categories. For example, in bar charts, we can use different colors to represent different product categories for easier identification and comparison.",paraId:1},{value:"Representing Data Quantities",paraId:1},{value:": Expressing data magnitudes. For example, in heatmaps, we can use color intensity to represent data size, with darker colors indicating larger values and lighter colors indicating smaller values.",paraId:1},{value:"Highlighting Key Information",paraId:1},{value:": Emphasizing important information. For example, in line charts, we can use bright colors to represent data points of interest for easier identification.",paraId:1},{value:"Enhancing Visual Appeal",paraId:1},{value:": Making visualizations more attractive. Using vibrant colors and interesting color schemes can make visualizations more vivid and engaging.",paraId:1},{value:"Improving Readability",paraId:1},{value:": Enhancing the readability of visualizations. For example, on maps, we can use different colors to represent different geographical regions for easier identification and understanding.",paraId:1},{value:"To set data-independent colors, use ",paraId:2},{value:"mark.style(fill, color)",paraId:2},{value:" or ",paraId:2},{value:"mark.style(stroke, color)",paraId:2},{value:". For data-driven colors, you can use the following methods:",paraId:2},{value:"Encoding: ",paraId:3},{value:"mark.encode",paraId:3},{value:"Style: ",paraId:3},{value:"mark.style",paraId:3},{value:"Using ",paraId:4,tocIndex:0},{value:"mark.encode",paraId:4,tocIndex:0},{value:" to set data-driven colors is the most common approach, configuring the final visual display through color scales.",paraId:4,tocIndex:0},{value:"scale.identity",paraId:5,tocIndex:0},{value:": Identity mapping",paraId:5,tocIndex:0},{value:"scale.range",paraId:5,tocIndex:0},{value:": Custom color palette",paraId:5,tocIndex:0},{value:"scale.palette",paraId:5,tocIndex:0},{value:": Built-in color palettes",paraId:5,tocIndex:0},{value:"scale.relations",paraId:5,tocIndex:0},{value:": Custom mapping relationships",paraId:5,tocIndex:0},{value:"When the color scale is set to identity scale, the data from the color channel will be used as visual data and rendered in the final visualization without generating a scale.",paraId:6,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data([\n    { genre: 'Sports', sold: 275, color: 'red' },\n    { genre: 'Strategy', sold: 115, color: 'blue' },\n    { genre: 'Action', sold: 120, color: 'green' },\n    { genre: 'Shooter', sold: 350, color: 'red' },\n    { genre: 'Other', sold: 150, color: 'black' },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  .encode('color', 'color')\n  .scale('color', { type: 'identity' }); // Set this scale to identity mapping\n\nchart.render();\n",paraId:7,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('color', 'letter')\n  .axis('y', { labelFormatter: '.0%' })\n  .scale('color', {\n    type: 'ordinal',\n    range: ['#7593ed', '#95e3b0', '#6c7893', '#e7c450', '#7460eb'],\n  });\n\nchart.render();\n",paraId:8,tocIndex:2},{value:"In G2, you can specify a color palette by setting ",paraId:9,tocIndex:3},{value:"scale.palette",paraId:9,tocIndex:3},{value:". This palette can be discrete:",paraId:9,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('color', 'letter')\n  .axis('y', { labelFormatter: '.0%' })\n  .scale('color', { palette: 'tableau10' });\n\nchart.render();\n",paraId:10,tocIndex:3},{value:"It can also be continuous:",paraId:11,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 320,\n});\n\nchart\n  .cell()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n  })\n  .transform({ type: 'group', color: 'max' })\n  .encode('x', (d) => new Date(d.date).getUTCDate())\n  .encode('y', (d) => new Date(d.date).getUTCMonth())\n  .encode('color', 'temp_max')\n  .scale('color', { palette: 'rainbow' });\n\nchart.render();\n",paraId:12,tocIndex:3},{value:"G2 provides several built-in palettes that can be used directly, and supports palettes from ",paraId:13,tocIndex:4},{value:"d3-scale-chromatic",paraId:13,tocIndex:4},{value:".",paraId:13,tocIndex:4},{value:"Discrete Palettes",paraId:14,tocIndex:4},{value:"Continuous Palettes",paraId:15,tocIndex:41},{value:"[Continuing with all other continuous palettes as shown in the original...]",paraId:16,tocIndex:42},{value:"If the built-in palettes don't meet your requirements, you can also try custom palettes. Here's a simple example showing how to register and use a custom palette.",paraId:17,tocIndex:43},{value:"import { register, Chart } from '@antv/g2';\n\nregister('palette.custom', customPalette);\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nfunction customPalette() {\n  return ['#FFB3BA', '#98FF98', '#89CFF0', '#FFF9B1', '#D1A3FF'];\n}\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('color', 'letter')\n  .axis('y', { labelFormatter: '.0%' })\n  .scale('color', { palette: 'custom' }); // Specify custom palette\n\nchart.render();\n",paraId:18,tocIndex:43},{value:"You can specify a series of mapping rules through ",paraId:19,tocIndex:44},{value:"scale.relations",paraId:19,tocIndex:44},{value:", which has higher priority than the default mapping from domain to range. For the color channel, this configuration is useful when you want specific values to map to specific colors or handle outliers.",paraId:19,tocIndex:44},{value:"chart.interval().scale('color', {\n  relations: [\n    ['dog', 'red'], // dog maps to red\n    [(d) => d === undefined, 'grey'], // if value is undefined, then grey\n  ],\n});\n",paraId:20,tocIndex:44},{value:"Colors can be set through ",paraId:21,tocIndex:45},{value:"mark.style",paraId:21,tocIndex:45},{value:". Colors set here have higher priority than ",paraId:21,tocIndex:45},{value:"encode.color",paraId:21,tocIndex:45},{value:" and will not generate legends.",paraId:21,tocIndex:45},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .style('fill', (datum, index, data) => {\n    const { frequency } = datum;\n    if (frequency > 0.1) return '#3376cd';\n    if (frequency > 0.05) return '#f4bb51';\n    return '#b43a29';\n  });\n\nchart.render();\n",paraId:22,tocIndex:45}]},80335:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(79342);const t=[{value:"Partition data by fields, use circular space division, then visualize data for each facet.",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst M = [\n  'Jan.',\n  'Feb.',\n  'Mar.',\n  'Apr.',\n  'May',\n  'Jun.',\n  'Jul.',\n  'Aug.',\n  'Sept.',\n  'Oct.',\n  'Nov.',\n  'Dec.',\n];\nconst N = ['A', 'B', 'C', 'D'];\nconst data = M.flatMap((month) =>\n  N.map((name) => ({\n    month,\n    name,\n    value: Math.random(),\n  })),\n);\n\nconst chart = new Chart({\n  container: 'container',\n  width: 480,\n  height: 480,\n});\n\nconst facetCircle = chart.facetCircle().data(data).encode('position', 'month');\n\nfacetCircle\n  .interval()\n  .encode('x', 'name')\n  .encode('y', 'value')\n  .encode('color', 'name');\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"For more examples, visit the ",paraId:2,tocIndex:0},{value:"Chart Examples",paraId:3,tocIndex:0},{value:" page.",paraId:2,tocIndex:0},{value:"The underlying implementation of facetCircle is consistent with mark, so many configuration options are the same.",paraId:4,tocIndex:1},{value:"Property",paraId:5,tocIndex:1},{value:"Description",paraId:5,tocIndex:1},{value:"Type",paraId:5,tocIndex:1},{value:"Default",paraId:5,tocIndex:1},{value:"data",paraId:5,tocIndex:1},{value:"Refer to ",paraId:5,tocIndex:1},{value:"data",paraId:6,tocIndex:1},{value:" for related information",paraId:5,tocIndex:1},{value:"Data",paraId:5,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"Channel settings, see table below",paraId:5,tocIndex:1},{value:"padding",paraId:5,tocIndex:1},{value:"Padding size",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingLeft",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingRight",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingTop",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingBottom",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"margin",paraId:5,tocIndex:1},{value:"Margin",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginLeft",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginRight",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginTop",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginBottom",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"title",paraId:5,tocIndex:1},{value:"Refer to ",paraId:5,tocIndex:1},{value:"title",paraId:7,tocIndex:1},{value:" for related information",paraId:5,tocIndex:1},{value:"scale",paraId:5,tocIndex:1},{value:"Refer to ",paraId:5,tocIndex:1},{value:"scale",paraId:8,tocIndex:1},{value:" for related information",paraId:5,tocIndex:1},{value:"All configurations corresponding to ",paraId:9,tocIndex:1},{value:"facetCircle",paraId:9,tocIndex:1},{value:" can be set using the API, for example:",paraId:9,tocIndex:1},{value:"chart.facetCircle().data([1, 2, 3]).encode('position', 'month');\n",paraId:10,tocIndex:1},{value:"For facetCircle, there are unique encode channels.",paraId:11,tocIndex:2},{value:"Channel",paraId:12,tocIndex:2},{value:"Description",paraId:12,tocIndex:2},{value:"Type",paraId:12,tocIndex:2},{value:"Default",paraId:12,tocIndex:2},{value:"position",paraId:12,tocIndex:2},{value:"Divide the angular space in the circle based on position data",paraId:12,tocIndex:2},{value:"string",paraId:12,tocIndex:2},{value:" | ",paraId:12,tocIndex:2},{value:"(d, idx, arr) => any",paraId:12,tocIndex:2}]},12447:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(15461);const t=[{value:"Use row and column field values to divide space and data, visualizing data segments in each subspace.",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 928,\n  height: 270,\n  paddingBottom: 50,\n});\n\nconst facetRect = chart\n  .facetRect()\n  .attr('paddingBottom', 50)\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/anscombe.json',\n  })\n  .encode('x', 'series');\n\nfacetRect\n  .point()\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .style('stroke', '#000')\n  .attr('inset', 10);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"For more examples, visit the ",paraId:2,tocIndex:0},{value:"Chart Examples",paraId:3,tocIndex:0},{value:" page.",paraId:2,tocIndex:0},{value:"The underlying implementation of facetRect is consistent with mark, so many configuration options are the same.",paraId:4,tocIndex:1},{value:"Property",paraId:5,tocIndex:1},{value:"Description",paraId:5,tocIndex:1},{value:"Type",paraId:5,tocIndex:1},{value:"Default",paraId:5,tocIndex:1},{value:"data",paraId:5,tocIndex:1},{value:"Refer to ",paraId:5,tocIndex:1},{value:"data",paraId:6,tocIndex:1},{value:" for related information",paraId:5,tocIndex:1},{value:"Data",paraId:5,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"Channel settings, see table below",paraId:5,tocIndex:1},{value:"padding",paraId:5,tocIndex:1},{value:"Padding size",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingLeft",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingRight",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingTop",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingBottom",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"margin",paraId:5,tocIndex:1},{value:"Margin",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginLeft",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginRight",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginTop",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginBottom",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"title",paraId:5,tocIndex:1},{value:"Refer to ",paraId:5,tocIndex:1},{value:"title",paraId:7,tocIndex:1},{value:" for related information",paraId:5,tocIndex:1},{value:"scale",paraId:5,tocIndex:1},{value:"Refer to ",paraId:5,tocIndex:1},{value:"scale",paraId:8,tocIndex:1},{value:" for related information",paraId:5,tocIndex:1},{value:"All configurations corresponding to ",paraId:9,tocIndex:1},{value:"facetRect",paraId:9,tocIndex:1},{value:" can be set using the API, for example:",paraId:9,tocIndex:1},{value:"chart.facetRect().data([1, 2, 3]).encode('x', 'type');\n",paraId:10,tocIndex:1},{value:"For facetRect, there are unique encode channels.",paraId:11,tocIndex:2},{value:"Channel",paraId:12,tocIndex:2},{value:"Description",paraId:12,tocIndex:2},{value:"Type",paraId:12,tocIndex:2},{value:"Default",paraId:12,tocIndex:2},{value:"x",paraId:12,tocIndex:2},{value:"Specify the field for x-direction faceting, can be constant, field name, or callback function",paraId:12,tocIndex:2},{value:"string",paraId:12,tocIndex:2},{value:" | ",paraId:12,tocIndex:2},{value:"(d, idx, arr) => any",paraId:12,tocIndex:2},{value:"y",paraId:12,tocIndex:2},{value:"Specify the field for y-direction faceting, can be constant, field name, or callback function",paraId:12,tocIndex:2},{value:"string",paraId:12,tocIndex:2},{value:" | ",paraId:12,tocIndex:2},{value:"(d, idx, arr) => any",paraId:12,tocIndex:2},{value:"Is facetRect functionally redundant with repeatMatrix?",paraId:13,tocIndex:3},{value:"facetRect divides space through x, y encode fields. For example, specifying ",paraId:14,tocIndex:3},{value:"encode('x', 'sex')",paraId:14,tocIndex:3},{value:" will divide the x direction into 2 facets based on the enumerated values of gender. While repeatMatrix divides space based on the number of fields.",paraId:14,tocIndex:3}]},38261:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(16358);const t=[{value:"View Composition",paraId:0},{value:" in G2 provides the ability to draw multiple charts in a single visualization. G2 defines a ",paraId:0},{value:"View Graph",paraId:0},{value:" to describe ",paraId:0},{value:"Multi-View Plots",paraId:0},{value:".",paraId:0},{value:"({\n  type: 'spaceLayer',\n  children: [{ type: 'view' }, { type: 'view' }],\n});\n",paraId:1},{value:"// API\nconst layer = chart.spaceLayer();\n\nlayer.view();\n\nlayer.view();\n",paraId:2},{value:"The most basic view composition method is ",paraId:3,tocIndex:0},{value:"Space Composition",paraId:3,tocIndex:0},{value:", which only divides the space.",paraId:3,tocIndex:0},{value:"A common composition method is ",paraId:4,tocIndex:0},{value:"composition.spaceLayer",paraId:4,tocIndex:0},{value:": overlaying multiple charts. This is used when the views have different coordinate systems, such as the bar chart and pie chart below.",paraId:4,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst layer = chart.spaceLayer();\n\n// Bar chart\nlayer\n  .interval()\n  .data([\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Other', sold: 150 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Strategy', sold: 115 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold');\n\n// Pie chart\nlayer\n  .interval() // Create an interval\n  .attr('paddingLeft', 300) // Set position\n  .attr('paddingBottom', 250)\n  .coordinate({ type: 'theta' }) // Specify coordinate system\n  .transform({ type: 'stackY' })\n  .data([\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Other', sold: 150 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Strategy', sold: 115 },\n  ])\n  .encode('y', 'sold')\n  .encode('color', 'genre')\n  .legend('color', false);\n\nchart.render();\n",paraId:5,tocIndex:0},{value:"You can also use ",paraId:6,tocIndex:0},{value:"composition.spaceFlex",paraId:6,tocIndex:0},{value:" to arrange views horizontally or vertically.",paraId:6,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nconst flex = chart.spaceFlex();\n\n// Bar chart\nflex\n  .interval()\n  .data([\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Other', sold: 150 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Strategy', sold: 115 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold');\n\n// Pie chart\nflex\n  .interval() // Create an interval\n  .coordinate({ type: 'theta' }) // Specify coordinate system\n  .transform({ type: 'stackY' })\n  .data([\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Other', sold: 150 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Strategy', sold: 115 },\n  ])\n  .encode('y', 'sold')\n  .encode('color', 'genre')\n  .legend('color', false);\n\nchart.render();\n",paraId:7,tocIndex:0},{value:"These composition methods can be nested, making it easy to implement a dashboard with a single declaration.",paraId:8,tocIndex:0},{value:"Facet Composition",paraId:9,tocIndex:1},{value:" differs from space composition in that it also divides the data, with each view displaying a subset of the original data.",paraId:9,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 260,\n  width: 800,\n  paddingLeft: 40,\n  paddingBottom: 50,\n});\n\nconst facetRect = chart\n  .facetRect()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/anscombe.json',\n  })\n  // Divide the data into subsets by the series field,\n  // and arrange them in the x direction\n  .encode('x', 'series');\n\nfacetRect\n  .point()\n  .attr('padding', 'auto')\n  .attr('inset', 10)\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .style('stroke', '#000');\n\nchart.render();\n",paraId:10,tocIndex:1},{value:"Repeat Composition",paraId:11,tocIndex:2},{value:" differs from facet in that each view displays the full data, but the encoding is repeated to draw multiple views.",paraId:11,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 900,\n  height: 900,\n  padding: 'auto',\n  paddingLeft: 55,\n  paddingBottom: 45,\n});\n\nconst repeatMatrix = chart\n  .repeatMatrix()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n    // Data processing\n  })\n  // Specify the encoding to repeat\n  // A total of 4 * 4 = 16 views will be generated\n  // The x and y encoding of each view is the cross product of the following fields\n  .encode('position', [\n    'culmen_length_mm',\n    'culmen_depth_mm',\n    'flipper_length_mm',\n    'body_mass_g',\n  ]);\n\nrepeatMatrix.point().attr('padding', 'auto').encode('color', 'species');\n\nchart.render();\n",paraId:12,tocIndex:2},{value:"Timing Composition",paraId:13,tocIndex:3},{value:" manages views in space for animation.",paraId:13,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/fbe4a8c1-ce04-4ba3-912a-0b26d6965333.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const chart = new Chart({\n      container: 'container',\n      paddingTop: 60,\n      paddingLeft: 100,\n    });\n\n    // Refer to CSS animation description\n    const keyframe = chart\n      .timingKeyframe() // Create container\n      .attr('iterationCount', 2) // Number of iterations\n      .attr('direction', 'alternate') // Direction\n      .attr('duration', 1000); // Duration\n\n    keyframe\n      .interval()\n      .transform({ type: 'groupX', y: 'mean' })\n      .data(data)\n      .encode('x', 'gender')\n      .encode('y', 'weight')\n      .encode('color', 'gender')\n      .encode('key', 'gender'); // Specify key\n\n    keyframe\n      .point()\n      .data(data)\n      .encode('x', 'height')\n      .encode('y', 'weight')\n      .encode('color', 'gender')\n      .encode('shape', 'point')\n      .encode('groupKey', 'gender'); // Specify groupKey\n\n    chart.render();\n  });\n",paraId:14,tocIndex:3}]},90281:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(95213);const t=[{value:"Divide space according to the number of fields, then use data to visualize in these subspaces.",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 300,\n  height: 720,\n  paddingLeft: 50,\n  paddingBottom: 60,\n});\n\nconst repeatMatrix = chart\n  .repeatMatrix()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/weather.json',\n    transform: [\n      {\n        type: 'map',\n        callback: ({ date, ...d }) => ({\n          ...d,\n          date: new Date(date).getMonth() + '',\n        }),\n      },\n    ],\n  })\n  .encode('y', ['temp_max', 'precipitation', 'wind'])\n  .encode('x', 'date');\n\nrepeatMatrix\n  .line()\n  .transform({ type: 'groupX', y: 'mean' })\n  .encode('color', 'location')\n  .scale('y', { zero: true });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"For more examples, visit the ",paraId:2,tocIndex:0},{value:"Chart Examples",paraId:3,tocIndex:0},{value:" page.",paraId:2,tocIndex:0},{value:"The underlying implementation of repeatMatrix is consistent with mark, so many configuration options are the same.",paraId:4,tocIndex:1},{value:"Property",paraId:5,tocIndex:1},{value:"Description",paraId:5,tocIndex:1},{value:"Type",paraId:5,tocIndex:1},{value:"Default",paraId:5,tocIndex:1},{value:"data",paraId:5,tocIndex:1},{value:"Refer to ",paraId:5,tocIndex:1},{value:"data",paraId:6,tocIndex:1},{value:" for related information",paraId:5,tocIndex:1},{value:"Data",paraId:5,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"Channel settings, see table below",paraId:5,tocIndex:1},{value:"padding",paraId:5,tocIndex:1},{value:"Padding size",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingLeft",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingRight",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingTop",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingBottom",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"margin",paraId:5,tocIndex:1},{value:"Margin",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginLeft",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginRight",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginTop",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginBottom",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"title",paraId:5,tocIndex:1},{value:"Refer to ",paraId:5,tocIndex:1},{value:"title",paraId:7,tocIndex:1},{value:" for related information",paraId:5,tocIndex:1},{value:"scale",paraId:5,tocIndex:1},{value:"Refer to ",paraId:5,tocIndex:1},{value:"scale",paraId:8,tocIndex:1},{value:" for related information",paraId:5,tocIndex:1},{value:"All configurations corresponding to ",paraId:9,tocIndex:1},{value:"repeatMatrix",paraId:9,tocIndex:1},{value:" can be set using the API, for example:",paraId:9,tocIndex:1},{value:"chart.repeatMatrix().data([1, 2, 3]).encode('x', ['f1', 'f2', 'f3']);\n",paraId:10,tocIndex:1},{value:"For repeatMatrix, there are unique encode channels.",paraId:11,tocIndex:2},{value:"Channel",paraId:12,tocIndex:2},{value:"Description",paraId:12,tocIndex:2},{value:"Type",paraId:12,tocIndex:2},{value:"Default",paraId:12,tocIndex:2},{value:"x",paraId:12,tocIndex:2},{value:"Specify the field list in the x direction for x-axis splitting",paraId:12,tocIndex:2},{value:"string[]",paraId:12,tocIndex:2},{value:"y",paraId:12,tocIndex:2},{value:"Specify the field list in the y direction for y-axis splitting",paraId:12,tocIndex:2},{value:"string[]",paraId:12,tocIndex:2}]},62920:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(19936);const t=[{value:"Use a layout similar to CSS flex to divide spatial areas, commonly used for multi-chart comparison views.",paraId:0},{value:"Provides a canvas with two-level flex container layout.",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 900,\n});\n\nconst flex = chart\n  .spaceFlex()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n  })\n  .attr('direction', 'col')\n  .attr('ratio', [1, 2]);\n\nflex\n  .interval()\n  .attr('paddingBottom', 0)\n  .attr('paddingRight', 300)\n  .transform({ type: 'groupX', y: 'max' })\n  .axis('x', false)\n  .encode('x', (d) => new Date(d.date).getUTCDate())\n  .encode('y', 'temp_max')\n  .encode('color', 'steelblue');\n\nflex\n  .spaceFlex()\n  .attr('ratio', [2, 1])\n  .call((node) =>\n    node\n      .cell()\n      .attr('paddingRight', 0)\n      .attr('paddingBottom', 50)\n      .transform({ type: 'group', color: 'max' })\n      .encode('x', (d) => new Date(d.date).getUTCDate())\n      .encode('y', (d) => new Date(d.date).getUTCMonth())\n      .encode('color', 'temp_max')\n      .style('inset', 0.5)\n      .axis('x', { title: 'Date' })\n      .axis('y', { title: 'Month' })\n      .legend({ color: false })\n      .scale('color', {\n        type: 'sequential',\n        palette: 'gnBu',\n      }),\n  )\n  .call((node) =>\n    node\n      .interval()\n      .attr('paddingBottom', 50)\n      .transform({ type: 'groupX', y: 'max' })\n      .coordinate({ transform: [{ type: 'transpose' }] })\n      .axis('x', false)\n      .encode('x', (d) => new Date(d.date).getUTCMonth())\n      .encode('y', 'temp_max')\n      .encode('color', 'steelblue'),\n  );\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"For more examples, visit the ",paraId:3,tocIndex:0},{value:"Chart Examples",paraId:4,tocIndex:0},{value:" page.",paraId:3,tocIndex:0},{value:"Currently flex mainly provides the two most core configurations for convenient space partitioning.",paraId:5,tocIndex:1},{value:"Property",paraId:6,tocIndex:1},{value:"Description",paraId:6,tocIndex:1},{value:"Type",paraId:6,tocIndex:1},{value:"Default",paraId:6,tocIndex:1},{value:"ratio",paraId:6,tocIndex:1},{value:"Set the proportion of space occupied by child elements in the flex container",paraId:6,tocIndex:1},{value:"number[]",paraId:6,tocIndex:1},{value:"Equal division",paraId:6,tocIndex:1},{value:"direction",paraId:6,tocIndex:1},{value:"Set the direction for flex space division",paraId:6,tocIndex:1},{value:"col",paraId:6,tocIndex:1},{value:" | ",paraId:6,tocIndex:1},{value:"row",paraId:6,tocIndex:1},{value:"row",paraId:6,tocIndex:1},{value:"data",paraId:6,tocIndex:1},{value:"Data for the flex container",paraId:6,tocIndex:1},{value:"Data",paraId:6,tocIndex:1},{value:"All configurations corresponding to ",paraId:7,tocIndex:1},{value:"spaceFlex",paraId:7,tocIndex:1},{value:" can be set using the API, for example:",paraId:7,tocIndex:1},{value:"chart.spaceFlex().attr('ratio', [1, 2, 3]).attr('direction', 'col');\n",paraId:8,tocIndex:1},{value:"How to use spaceFlex to define complex chart layouts?",paraId:9,tocIndex:2},{value:"spaceFlex provides proportional horizontal and vertical space division. For complex layouts, theoretically they can all be achieved by continuously splitting container hierarchy structures.",paraId:10,tocIndex:2}]},38409:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(717);const t=[{value:"Does not divide space in any way, multiple views use the same spatial area, commonly used for view layering.",paraId:0},{value:"Draw a common combined bar and pie chart.",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst layer = chart.spaceLayer().data({\n  type: 'fetch',\n  value:\n    'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  format: 'csv',\n});\n\n// Bar chart\nlayer\n  .interval()\n  .attr('paddingLeft', 50)\n  .transform({ type: 'sortX', reverse: true, by: 'y' })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('color', 'letter');\n\n// Pie chart\nlayer\n  .interval()\n  .attr('paddingLeft', 400)\n  .attr('paddingBottom', 200)\n  .coordinate({ type: 'theta' })\n  .transform({ type: 'stackY' })\n  .legend(false)\n  .encode('y', 'frequency')\n  .encode('color', 'letter');\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"For more examples, visit the ",paraId:3,tocIndex:0},{value:"Chart Examples",paraId:4,tocIndex:0},{value:" page.",paraId:3,tocIndex:0},{value:"No additional configuration options.",paraId:5,tocIndex:1}]},89825:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(92800);const t=[{value:"Execute continuous transition animations between different views. Use ",paraId:0},{value:"mark.key",paraId:0},{value:" and ",paraId:0},{value:"mark.groupKey",paraId:0},{value:" to associate graphics.",paraId:0},{value:"fetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/fbe4a8c1-ce04-4ba3-912a-0b26d6965333.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const chart = new Chart({\n      container: 'container',\n      paddingTop: 60,\n      paddingLeft: 100,\n    });\n\n    const keyframe = chart\n      .timingKeyframe()\n      .attr('direction', 'alternate')\n      .attr('iterationCount', 4);\n\n    // Bar chart\n    keyframe\n      .interval()\n      .data(data)\n      .transform({ type: 'groupX', y: 'mean' })\n      .encode('x', 'gender')\n      .encode('y', 'weight')\n      .encode('color', 'gender')\n      .encode('key', 'gender'); // Specify key\n\n    // Scatter plot\n    keyframe\n      .point()\n      .data(data)\n      .encode('x', 'height')\n      .encode('y', 'weight')\n      .encode('color', 'gender')\n      .encode('groupKey', 'gender') // Specify the key for the merged bars\n      .encode('shape', 'point');\n\n    chart.render();\n  });\n",paraId:1,tocIndex:0},{value:"Property",paraId:2,tocIndex:1},{value:"Description",paraId:2,tocIndex:1},{value:"Type",paraId:2,tocIndex:1},{value:"Default",paraId:2,tocIndex:1},{value:"duration",paraId:2,tocIndex:1},{value:"Animation transition time for each view",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"1000",paraId:2,tocIndex:1},{value:"iterationCount",paraId:2,tocIndex:1},{value:"'infinite' | number",paraId:2,tocIndex:1},{value:"1",paraId:2,tocIndex:1},{value:"direction",paraId:2,tocIndex:1},{value:"'normal' | 'reverse' | 'alternate' | 'reverse-alternate'",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"'normal'",paraId:2,tocIndex:1},{value:"children",paraId:2,tocIndex:1},{value:"View nodes that execute animations",paraId:2,tocIndex:1},{value:"Node[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1}]},49322:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(10225);const t=[{value:"This document provides a comprehensive overview of G2's complete configuration system, covering all available configuration options and their hierarchical relationships.",paraId:0},{value:"When creating a chart instance, you can pass the following configuration options through ",paraId:1,tocIndex:0},{value:"new Chart(params)",paraId:1,tocIndex:0},{value:":",paraId:1,tocIndex:0},{value:"Option",paraId:2,tocIndex:0},{value:"Type",paraId:2,tocIndex:0},{value:"Default",paraId:2,tocIndex:0},{value:"Description",paraId:2,tocIndex:0},{value:"container",paraId:2,tocIndex:0},{value:"string | HTMLElement",paraId:2,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"Specify the DOM for chart rendering, can pass DOM id or DOM instance",paraId:2,tocIndex:0},{value:"autoFit",paraId:2,tocIndex:0},{value:"boolean",paraId:2,tocIndex:0},{value:"false",paraId:2,tocIndex:0},{value:"Whether the chart auto-fits the container size",paraId:2,tocIndex:0},{value:"clip",paraId:2,tocIndex:0},{value:"boolean",paraId:2,tocIndex:0},{value:"false",paraId:2,tocIndex:0},{value:"Whether to hide graphics outside the drawing area",paraId:2,tocIndex:0},{value:"width",paraId:2,tocIndex:0},{value:"number",paraId:2,tocIndex:0},{value:"640",paraId:2,tocIndex:0},{value:"Chart width",paraId:2,tocIndex:0},{value:"height",paraId:2,tocIndex:0},{value:"number",paraId:2,tocIndex:0},{value:"480",paraId:2,tocIndex:0},{value:"Chart height",paraId:2,tocIndex:0},{value:"depth",paraId:2,tocIndex:0},{value:"number",paraId:2,tocIndex:0},{value:"0",paraId:2,tocIndex:0},{value:"Chart depth, used in 3D charts",paraId:2,tocIndex:0},{value:"padding",paraId:2,tocIndex:0},{value:"'auto' | number",paraId:2,tocIndex:0},{value:"'auto'",paraId:2,tocIndex:0},{value:"Chart padding, usage similar to CSS box model",paraId:2,tocIndex:0},{value:"margin",paraId:2,tocIndex:0},{value:"number",paraId:2,tocIndex:0},{value:"16",paraId:2,tocIndex:0},{value:"Chart margin, usage similar to CSS box model",paraId:2,tocIndex:0},{value:"inset",paraId:2,tocIndex:0},{value:"number",paraId:2,tocIndex:0},{value:"0",paraId:2,tocIndex:0},{value:"Chart breathing space width",paraId:2,tocIndex:0},{value:"renderer",paraId:2,tocIndex:0},{value:"Canvas | SVG | WebGL",paraId:2,tocIndex:0},{value:"Canvas",paraId:2,tocIndex:0},{value:"Specify rendering engine",paraId:2,tocIndex:0},{value:"theme",paraId:2,tocIndex:0},{value:"'classic' | 'classicDark' | 'academy' | customTheme",paraId:2,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"Configure chart theme",paraId:2,tocIndex:0},{value:"plugins",paraId:2,tocIndex:0},{value:"any[]",paraId:2,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"Specify plugins used during rendering",paraId:2,tocIndex:0},{value:"Example:",paraId:3,tocIndex:0},{value:"const chart = new Chart({\n  container: 'container', // DOM container\n  autoFit: true, // Auto-fit container size\n  clip: true, // Clip overflow area\n  padding: 20, // Inner padding\n  margin: 16, // Outer margin\n  theme: 'classicDark', // Dark theme\n  plugins: [new Plugin()], // Plugins\n});\n",paraId:4,tocIndex:0},{value:"After creating a chart instance, you can configure it in two ways:",paraId:5,tocIndex:1},{value:"chart\n  .data(data)\n  .encode('x', 'field1')\n  .encode('y', 'field2')\n  .scale('x', { type: 'band' })\n  .axis('x', { title: 'X Axis Title' });\n",paraId:6,tocIndex:2},{value:"chart.options({\n  type: 'interval',\n  data: data,\n  encode: { x: 'field1', y: 'field2' },\n  scale: { x: { type: 'band' } },\n  axis: { x: { title: 'X Axis Title' } },\n});\n",paraId:7,tocIndex:3},{value:"The following is the complete chart configuration hierarchy:",paraId:8,tocIndex:3}]},99035:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(43962);const t=[{value:"Extended from the 2D Cartesian coordinate system by adding a Z-axis. ",paraId:0},{value:"Example",paraId:1},{value:"import { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\n\nconst Chart = extend(Runtime, { ...corelib(), ...threedlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  depth: 400,\n});\n\nchart.coordinate({\n  type: 'cartesian3D',\n});\n\nchart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('size', 'Origin')\n  .encode('color', 'Cylinders')\n  .encode('shape', 'cube')\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render();\n",paraId:2,tocIndex:0}]},32326:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(54804);const t=[{value:"Fisheye coordinate system (Fisheye) is a special coordinate system transform that applies Cartesian fisheye effects to input dimensions, magnifying focus areas while compressing regions far from the focus. This transform is similar to the visual effect of a fisheye lens, capable of highlighting local details while maintaining a global view.",paraId:0,tocIndex:0},{value:"Fisheye coordinate system transforms are mainly used in the following scenarios:",paraId:1,tocIndex:0},{value:"Data exploration",paraId:2,tocIndex:0},{value:": When you need to focus on both overall data distribution and local details simultaneously",paraId:2,tocIndex:0},{value:"Dense data visualization",paraId:2,tocIndex:0},{value:": When data points are too dense to distinguish individuals",paraId:2,tocIndex:0},{value:"Interactive data analysis",paraId:2,tocIndex:0},{value:": Combined with mouse interaction, dynamically adjusting focus position to achieve dynamic magnification and reduction of data",paraId:2,tocIndex:0},{value:"In G2, fisheye coordinate systems can be implemented through coordinate system transforms or applied dynamically through interaction components.",paraId:3,tocIndex:0},{value:"The basic principles of fisheye coordinate systems are:",paraId:4,tocIndex:1},{value:"Define a focus position (focusX, focusY)",paraId:5,tocIndex:1},{value:"Set distortion levels (distortionX, distortionY)",paraId:5,tocIndex:1},{value:"Apply non-linear transforms based on distance from points to focus",paraId:5,tocIndex:1},{value:"Points closer to the focus have larger spacing after transformation (magnification effect)",paraId:5,tocIndex:1},{value:"Points farther from the focus have smaller spacing after transformation (compression effect)",paraId:5,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  coordinate: {\n    transform: [{ type: 'fisheye', focusX: 0.5, focusY: 0.5 }],\n  },\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n  },\n  encode: {\n    x: 'GDP',\n    y: 'LifeExpectancy',\n    size: 'Population',\n    color: 'continent',\n    shape: 'point',\n  },\n  scale: {\n    size: {\n      type: 'log',\n      range: [4, 20],\n    },\n  },\n  style: {\n    fillOpacity: 0.3,\n    lineWidth: 1,\n  },\n});\n\nchart.render();\n",paraId:6,tocIndex:2},{value:"Fisheye coordinate systems are particularly suitable for the following scenarios:",paraId:7,tocIndex:3},{value:"Dense data visualization",paraId:8,tocIndex:3},{value:": When data points are too dense, fisheye effects can help users focus on specific areas while maintaining perception of overall data",paraId:8,tocIndex:3},{value:"Network graph analysis",paraId:8,tocIndex:3},{value:": In large network graphs, fisheye effects can magnify nodes and connections of interest while maintaining the overall network structure",paraId:8,tocIndex:3},{value:"Map navigation",paraId:8,tocIndex:3},{value:": In map visualizations, fisheye effects can magnify specific areas while maintaining awareness of the surrounding environment",paraId:8,tocIndex:3},{value:"Interactive data exploration",paraId:8,tocIndex:3},{value:": Combined with mouse interaction, users can dynamically adjust focus positions to achieve dynamic magnification and reduction of data",paraId:8,tocIndex:3},{value:"Distortion level",paraId:9,tocIndex:4},{value:": Setting distortion levels (distortionX/distortionY) too high will cause severe visual distortion. It's recommended to adjust based on actual data distribution",paraId:9,tocIndex:4},{value:"Focus position",paraId:9,tocIndex:4},{value:": Focus position (focusX/focusY) should be set according to data distribution and user focus points",paraId:9,tocIndex:4},{value:"Interactive experience",paraId:9,tocIndex:4},{value:": In interactive applications, changes in fisheye effects should be smooth, avoiding sudden changes that cause visual discomfort",paraId:9,tocIndex:4},{value:"The configuration options for fisheye coordinate systems are as follows:",paraId:10,tocIndex:5},{value:"Property",paraId:11,tocIndex:5},{value:"Description",paraId:11,tocIndex:5},{value:"Type",paraId:11,tocIndex:5},{value:"Default",paraId:11,tocIndex:5},{value:"Required",paraId:11,tocIndex:5},{value:"focusX",paraId:11,tocIndex:5},{value:"X-direction position of fisheye transform center",paraId:11,tocIndex:5},{value:"number",paraId:11,tocIndex:5},{value:"0",paraId:11,tocIndex:5},{value:"focusY",paraId:11,tocIndex:5},{value:"Y-direction position of fisheye transform center",paraId:11,tocIndex:5},{value:"number",paraId:11,tocIndex:5},{value:"0",paraId:11,tocIndex:5},{value:"distortionX",paraId:11,tocIndex:5},{value:"X-direction distortion magnitude of fisheye transform",paraId:11,tocIndex:5},{value:"number",paraId:11,tocIndex:5},{value:"2",paraId:11,tocIndex:5},{value:"distortionY",paraId:11,tocIndex:5},{value:"Y-direction distortion magnitude of fisheye transform",paraId:11,tocIndex:5},{value:"number",paraId:11,tocIndex:5},{value:"2",paraId:11,tocIndex:5},{value:"visual",paraId:11,tocIndex:5},{value:"Whether focusX and focusY values are visual coordinate points",paraId:11,tocIndex:5},{value:"boolean",paraId:11,tocIndex:5},{value:"false",paraId:11,tocIndex:5},{value:"focusX/focusY",paraId:12,tocIndex:6},{value:": Define the focus position of fisheye effects. When ",paraId:12,tocIndex:6},{value:"visual=false",paraId:12,tocIndex:6},{value:", the value range is [0, 1], representing normalized coordinates; when ",paraId:12,tocIndex:6},{value:"visual=true",paraId:12,tocIndex:6},{value:", it represents actual visual coordinate points.",paraId:12,tocIndex:6},{value:"distortionX/distortionY",paraId:12,tocIndex:6},{value:": Control the distortion level of fisheye effects. The larger the value, the more obvious the distortion effect.",paraId:12,tocIndex:6},{value:"visual",paraId:12,tocIndex:6},{value:": Determines the coordinate system for focusX and focusY. When set to true, use visual coordinate system; when set to false, use normalized coordinate system.",paraId:12,tocIndex:6},{value:"The simplest usage is to set a fixed fisheye focus, suitable for scenarios that need to highlight specific areas.",paraId:13,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  coordinate: {\n    transform: [\n      {\n        type: 'fisheye',\n        focusX: 0.7,\n        focusY: 0.3,\n        distortionX: 3,\n        distortionY: 3,\n      },\n    ],\n  },\n  type: 'point',\n  data: [\n    { x: 1, y: 1, category: 'A' },\n    { x: 2, y: 2, category: 'B' },\n    { x: 3, y: 3, category: 'C' },\n    { x: 4, y: 4, category: 'D' },\n    { x: 5, y: 5, category: 'E' },\n    { x: 6, y: 6, category: 'F' },\n    { x: 7, y: 7, category: 'G' },\n    { x: 8, y: 8, category: 'H' },\n    { x: 9, y: 9, category: 'I' },\n  ],\n  encode: {\n    x: 'x',\n    y: 'y',\n    color: 'category',\n    shape: 'point',\n  },\n  style: {\n    r: 6,\n    lineWidth: 1,\n  },\n});\n\nchart.render();\n",paraId:14,tocIndex:8},{value:"By adding interaction components, you can implement dynamic fisheye effects where the focus changes with mouse movement.",paraId:15,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n  },\n  encode: {\n    x: 'GDP',\n    y: 'LifeExpectancy',\n    size: 'Population',\n    color: 'continent',\n    shape: 'point',\n  },\n  scale: {\n    size: {\n      type: 'log',\n      range: [4, 20],\n    },\n  },\n  style: {\n    fillOpacity: 0.3,\n    lineWidth: 1,\n  },\n  interaction: {\n    fisheye: true, // Enable fisheye interaction\n  },\n});\n\nchart.render();\n",paraId:16,tocIndex:9},{value:"Here's a complete example that combines fisheye coordinate systems with scatter plots, showing how to use fisheye effects to analyze multi-dimensional data:",paraId:17,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  coordinate: {\n    transform: [\n      {\n        type: 'fisheye',\n        focusX: 0.4,\n        focusY: 0.6,\n        distortionX: 2.5,\n        distortionY: 2.5,\n      },\n    ],\n  },\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n  },\n  encode: {\n    x: 'GDP',\n    y: 'LifeExpectancy',\n    size: 'Population',\n    color: 'continent',\n    shape: 'point',\n  },\n  scale: {\n    size: {\n      type: 'log',\n      range: [6, 30],\n    },\n    color: {\n      palette: 'category10',\n    },\n  },\n  style: {\n    fillOpacity: 0.6,\n    stroke: 'white',\n    lineWidth: 1,\n  },\n  axis: {\n    x: {\n      title: { text: 'GDP per Capita' },\n      labelFormatter: '~s',\n    },\n    y: {\n      title: { text: 'Life Expectancy' },\n    },\n  },\n  legend: {\n    color: {\n      position: 'right',\n      title: { text: 'Continent' },\n    },\n    size: {\n      position: 'bottom',\n      title: { text: 'Population' },\n    },\n  },\n  tooltip: {\n    items: [\n      { channel: 'x', name: 'GDP', valueFormatter: '~s' },\n      { channel: 'y', name: 'Life Expectancy' },\n      { channel: 'size', name: 'Population', valueFormatter: '~s' },\n      { channel: 'color', name: 'Continent' },\n    ],\n  },\n});\n\nchart.render();\n",paraId:18,tocIndex:10},{value:"This example demonstrates how to use fisheye coordinate systems to analyze multi-dimensional bubble chart data, highlighting specific areas through fisheye effects while maintaining overall data perception. The fisheye effect magnifies data points around the focus (GDP: ~$20,000, Life Expectancy: ~75 years), making it easier to observe detailed patterns in this region.",paraId:19,tocIndex:10},{value:"Fisheye coordinate system transformations can be combined with other coordinate system transformations, such as combining with transpose transformation:",paraId:20,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  coordinate: {\n    transform: [\n      { type: 'transpose' },\n      {\n        type: 'fisheye',\n        focusX: 0.5,\n        focusY: 0.5,\n        distortionX: 2,\n        distortionY: 2,\n      },\n    ],\n  },\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    color: 'genre',\n  },\n});\n\nchart.render();\n",paraId:21,tocIndex:11},{value:"The fisheye coordinate system is a powerful visualization tool, particularly suitable for handling dense data and scenarios that require attention to local details. By properly setting focus position and distortion levels, you can highlight key areas while maintaining a global view. Combined with interactive features, fisheye effects can provide more flexible and intuitive data exploration experiences.",paraId:22,tocIndex:12},{value:"In practical applications, it's recommended to adjust fisheye parameters based on data distribution and user needs, avoiding excessive distortion that leads to visual distortion. Additionally, consider combining with other coordinate system transformations and interactive components to create richer and more effective visualization effects.",paraId:23,tocIndex:12}]},59483:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(773);const t=[{value:"The ",paraId:0},{value:"helix",paraId:0},{value:" coordinate system is a coordinate system that expands two-dimensional data along a spiral line. It is commonly used for visualizing time series data or gene expression data, showing the cyclical nature or trends of data through spiral extension.",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  height: 500,\n});\n\n// Mock data\nconst data = [];\nfor (let i = 0; i < 372; i++) {\n  const time = new Date(Date.now() + i * 1000 * 3600 * 24)\n    .toISOString()\n    .split('T')[0];\n  data.push({ time, value: Math.random() * 100 });\n}\n\nchart.data(data);\n\nchart.coordinate({\n  type: 'helix',\n  startAngle: 0.5 * Math.PI, // Starting angle\n  endAngle: 12.5 * Math.PI, // Ending angle\n});\n\nchart\n  .interval()\n  .encode('x', 'time')\n  .encode('y', 'value')\n  .encode('color', 'value')\n  .scale('color', { range: ['#ffffff', '#1890FF'] });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"Parameter",paraId:2,tocIndex:1},{value:"Description",paraId:2,tocIndex:1},{value:"Type",paraId:2,tocIndex:1},{value:"Default",paraId:2,tocIndex:1},{value:"startAngle",paraId:2,tocIndex:1},{value:"Starting angle of the spiral (radians)",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"endAngle",paraId:2,tocIndex:1},{value:"Ending angle of the spiral (radians)",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"Math.PI * 6",paraId:2,tocIndex:1},{value:"innerRadius",paraId:2,tocIndex:1},{value:"Inner radius of the spiral (0 to 1)",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"outerRadius",paraId:2,tocIndex:1},{value:"Outer radius of the spiral (0 to 1)",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"1",paraId:2,tocIndex:1}]},21479:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(33944);const t=[{value:"In the visual channels of visualization, position is the visual encoding method with the most perceptual advantage. It not only has the highest recognition accuracy but can also effectively express both qualitative data (categories) and quantitative data simultaneously. To systematically organize this spatial position mapping, we introduce the concept of ",paraId:0},{value:"Coordinate System",paraId:0},{value:". In G2's implementation, the coordinate system is responsible for managing a series of spatial transformations. Specifically, the position attributes (x and y) of marks are first mapped to a normalized ",paraId:0},{value:"[0, 1]",paraId:0},{value:" interval through scales, and then the coordinate system converts these normalized position information into final canvas coordinates, thus achieving visualization representations in different spatial layout forms.",paraId:0},{value:"Coordinate configuration mainly focuses on coordinate transformation, start and end angles, inner and outer radii, etc. For coordinate axis scales, tick values configuration, etc., please go to ",paraId:1},{value:"Chart Components - Axis",paraId:2},{value:".",paraId:1},{value:"Coordinates can be set at the View level:",paraId:3,tocIndex:0},{value:"({\n  type: 'view',\n  coordinate: { type: 'polar' },\n});\n",paraId:4,tocIndex:0},{value:"// API\nchart.coordinate({ type: 'polar' });\n",paraId:5,tocIndex:0},{value:"Each view can only have one coordinate system. In addition to its own attributes, the coordinate system also includes a series of ",paraId:6,tocIndex:0},{value:"Coordinate Transforms",paraId:6,tocIndex:0},{value:".",paraId:6,tocIndex:0},{value:"({\n  type: 'polar', // Type\n  innerRadius: 0.6, // Own attributes\n  outerRadius: 0.8,\n  transform: [{ type: 'transpose' }], // Coordinate transforms\n});\n",paraId:7,tocIndex:0},{value:"It can also be set at the Mark level:",paraId:8,tocIndex:0},{value:"({\n  type: 'interval',\n  coordinate: { type: 'polar' },\n});\n",paraId:9,tocIndex:0},{value:"// API\nchart.interval().coordinate({ type: 'polar' });\n",paraId:10,tocIndex:0},{value:"Mark-level coordinates have ",paraId:11,tocIndex:0},{value:"bubbling behavior",paraId:11,tocIndex:0},{value:". Mark-level coordinates will be merged with the view's coordinates, and the first mark's coordinate has the highest priority.",paraId:11,tocIndex:0},{value:"chart.coordinate({ type: 'theta' });\nchart.line().coordinate({ type: 'polar' });\nchart.area().coordinate({ type: 'radial' });\n",paraId:12,tocIndex:0},{value:"This is equivalent to:",paraId:13,tocIndex:0},{value:"chart.coordinate({ type: 'polar' });\nchart.line();\nchart.area():\n",paraId:14,tocIndex:0},{value:"This feature is beneficial for encapsulating composite marks related to coordinate systems, such as pie charts:",paraId:15,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nfunction Pie({ encode = {}, ...rest } = {}) {\n  const { value, ...restEncode } = encode;\n  return {\n    ...rest,\n    type: 'interval',\n    coordinate: { type: 'theta' }, // Encapsulate coordinate system\n    transform: [{ type: 'stackY' }],\n    encode: {\n      ...restEncode,\n      y: value,\n    },\n  };\n}\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: Pie, // Use this composite Mark\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { value: 'sold', color: 'genre' },\n  labels: [\n    {\n      text: 'sold',\n    },\n  ],\n});\n\nchart.render();\n",paraId:16,tocIndex:0},{value:'The default coordinate system is Cartesian coordinate system. In addition, there is another class of coordinate systems that transform charts to polar coordinate systems, used for drawing a series of "circular" charts. This class of coordinate systems is called ',paraId:17,tocIndex:1},{value:"Radial Coordinate Systems",paraId:17,tocIndex:1},{value:".",paraId:17,tocIndex:1},{value:"Coordinate Name",paraId:18,tocIndex:1},{value:"Description",paraId:18,tocIndex:1},{value:"Example",paraId:18,tocIndex:1},{value:"cartesian",paraId:18,tocIndex:1},{value:"Cartesian coordinate system, G2's default.",paraId:18,tocIndex:1},{value:"helix",paraId:18,tocIndex:1},{value:"Helix coordinate system, based on Archimedean spiral.",paraId:18,tocIndex:1},{value:"parallel",paraId:18,tocIndex:1},{value:"Parallel coordinate system, mapping multiple data dimensions to parallel axis.",paraId:18,tocIndex:1},{value:"polar",paraId:18,tocIndex:1},{value:"Polar coordinate system, a 2D coordinate system built with angle and radius.",paraId:18,tocIndex:1},{value:"radar",paraId:18,tocIndex:1},{value:"Radar coordinate system, combining features of parallel and polar coordinates for radar charts.",paraId:18,tocIndex:1},{value:"radial",paraId:18,tocIndex:1},{value:"A special polar coordinate system obtained by transposing polar coordinates, commonly used for radial bar charts.",paraId:18,tocIndex:1},{value:"theta",paraId:18,tocIndex:1},{value:"A special polar coordinate system with fixed radius length, mapping data only to angle, commonly used for pie charts.",paraId:18,tocIndex:1},{value:"Cartesian coordinate system, the default coordinate system in G2.",paraId:19,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 0 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  style: { minHeight: 50 },\n});\n\nchart.render();\n",paraId:20,tocIndex:2},{value:"The helix coordinate system is a polar coordinate variant based on the Archimedean spiral, mapping data to a plane through spiral parameterization. It inherits the angle-radius dimensional characteristics of polar coordinates but adds the dynamic expansion features of spiral lines, making it particularly suitable for displaying data with periodicity, accumulation, or multi-level relationships.",paraId:21,tocIndex:3},{value:"Coordinate Transformation",paraId:22,tocIndex:3},{value:":",paraId:22,tocIndex:3},{value:"Radius expansion: r = r0 + kθ (r0 is the starting radius, k is the spiral spacing coefficient, θ is the rotation angle)",paraId:23,tocIndex:3},{value:"Angle mapping: θ is linearly converted from data values, with range defined by startAngle and endAngle",paraId:23,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\n// mock data\nconst data = [];\nconst n = 31;\nfor (let i = 0; i < 372; i++) {\n  const now = new Date();\n  const currentTime = new Date(now.getTime() + i * 1000 * 3600 * 24);\n  const formattedTime = `${currentTime.getFullYear()}.${String(\n    currentTime.getMonth() + 1,\n  ).padStart(2, '0')}.${String(currentTime.getDate()).padStart(2, '0')}`;\n\n  data[i] = {};\n  data[i].time = formattedTime;\n\n  const random = Math.floor(Math.random() * 10);\n  if ((i % n > 2 && i % n < 4) || (i % n >= 6 && i % n < 7)) {\n    data[i].value = 30 + random * 7;\n  } else if (i % n >= 4 && i % n < 6) {\n    data[i].value = 60 + random * 8;\n  } else {\n    data[i].value = 10 + random * 5;\n  }\n}\n\nchart.options({\n  type: 'interval',\n  height: 500,\n  data: {\n    value: data,\n  },\n  encode: { x: 'time', y: 'value', color: 'value' },\n  scale: { color: { type: 'linear', range: ['#ffffff', '#1890FF'] } },\n  coordinate: {\n    type: 'helix',\n    startAngle: 0.5 * Math.PI,\n    endAngle: 12.5 * Math.PI,\n  },\n  animate: { enter: { type: 'fadeIn' } },\n  tooltip: { title: 'time' },\n});\n\nchart.render();\n",paraId:24,tocIndex:3},{value:"Parallel coordinate system is a coordinate system used for visualizing multi-dimensional data. It maps multiple variables to parallel coordinate axis, with each data record represented as a polyline connecting corresponding values on each coordinate axis.",paraId:25,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst baseAxis = {\n  zIndex: 1,\n  titlePosition: 'right',\n  line: true,\n  labelStroke: '#fff',\n  labelLineWidth: 5,\n  labelFontSize: 10,\n  labelStrokeLineJoin: 'round',\n  titleStroke: '#fff',\n  titleFontSize: 10,\n  titleLineWidth: 5,\n  titleStrokeLineJoin: 'round',\n  titleTransform: 'translate(-50%, 0) rotate(-90)',\n  lineStroke: 'black',\n  tickStroke: 'black',\n  lineLineWidth: 1,\n};\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'line',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/cars3.json',\n  },\n  encode: {\n    position: [\n      'economy (mpg)',\n      'cylinders',\n      'displacement (cc)',\n      'power (hp)',\n      'weight (lb)',\n      '0-60 mph (s)',\n      'year',\n    ],\n    color: 'weight (lb)',\n  },\n  scale: { color: { palette: 'brBG', offset: (t) => 1 - t } },\n  coordinate: { type: 'parallel' },\n  style: { lineWidth: 1.5, strokeOpacity: 0.4 },\n  legend: { color: { length: 400, layout: { justifyContent: 'center' } } },\n  interaction: { tooltip: { series: false } },\n  axis: {\n    position: baseAxis,\n    position1: baseAxis,\n    position2: baseAxis,\n    position3: baseAxis,\n    position4: baseAxis,\n    position5: baseAxis,\n    position6: baseAxis,\n    position7: baseAxis,\n  },\n});\n\nchart.render();\n",paraId:26,tocIndex:4},{value:"Polar coordinate system is a non-Cartesian coordinate system that converts points (x, y) in Cartesian coordinates to points (r, θ) in polar coordinates, where r is the radius and θ is the angle. Polar coordinate systems are commonly used in visualization for displaying periodic data, relative relationships, or distribution differences.",paraId:27,tocIndex:5},{value:"Coordinate Transformation",paraId:28,tocIndex:5},{value:":",paraId:28,tocIndex:5},{value:"Polar coordinate system converts points (x, y) in Cartesian coordinates to points (r, θ) in polar coordinates.",paraId:29,tocIndex:5},{value:"Where r represents the distance to the origin (radius), and θ represents the angle with the x-axis (radians).",paraId:29,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  coordinate: { type: 'polar' },\n  axis: { y: false },\n});\nchart.render();\n",paraId:30,tocIndex:5},{value:"Radar coordinate system is a specialized form of polar coordinate system, combining parallel coordinate system features, constructing a star-shaped grid through N equally spaced independent dimensional axis, specifically designed for multi-dimensional data comparative analysis. Each axis represents an independent measurement dimension, and data points are presented through closed polygons showing multi-dimensional characteristics.",paraId:31,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nconst position = ['Points', 'Rebounds', 'Assists', 'Steals', 'Blocks'];\nconst data = [\n  {\n    name: 'Jordan',\n    Points: 30.1,\n    Rebounds: 6.2,\n    Assists: 5.3,\n    Steals: 2.3,\n    Blocks: 0.8,\n  },\n  {\n    name: 'LeBron James',\n    Points: 27.0,\n    Rebounds: 7.4,\n    Assists: 7.4,\n    Steals: 1.6,\n    Blocks: 0.8,\n  },\n];\n\nchart.options({\n  type: 'line',\n  title: 'Jordan vs LeBron James NBA Stats Comparison',\n  data,\n  coordinate: { type: 'radar' },\n  encode: {\n    position: ['Points', 'Rebounds', 'Assists', 'Steals', 'Blocks'],\n    color: 'name',\n  },\n  style: {\n    lineWidth: 1.5,\n    strokeOpacity: 0.4,\n  },\n  scale: Object.fromEntries(\n    Array.from({ length: position.length }, (_, i) => [\n      `position${i === 0 ? '' : i}`,\n      {\n        domainMin: 0,\n        nice: true,\n      },\n    ]),\n  ),\n  interaction: { tooltip: { series: false } },\n  axis: Object.fromEntries(\n    Array.from({ length: position.length }, (_, i) => [\n      `position${i === 0 ? '' : i}`,\n      {\n        zIndex: 1,\n        titleFontSize: 10,\n        titleSpacing: 8,\n        label: true,\n        labelFill: '#000',\n        labelOpacity: 0.45,\n        labelFontSize: 10,\n        line: true,\n        lineFill: '#000',\n        lineOpacity: 0.25,\n      },\n    ]),\n  ),\n});\nchart.render();\n",paraId:32,tocIndex:6},{value:"Radial coordinate system is an extended implementation of polar coordinate system, enhancing data hierarchical expressiveness through circular spatial layout.",paraId:33,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  coordinate: { type: 'radial', innerRadius: 0.1, endAngle: Math.PI },\n  axis: {\n    y: false,\n    x: {\n      title: null,\n    },\n  },\n  legend: false,\n  transform: [{ type: 'sortX', by: 'y' }],\n});\nchart.render();\n",paraId:34,tocIndex:7},{value:"Theta coordinate system is a specialized form of polar coordinate system, designed specifically for circular data visualization by fixing the radius dimension and enhancing angle dimension analysis capabilities. In G2, it's mainly used for angle-dominant charts like pie charts.",paraId:35,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { y: 'sold', color: 'genre' },\n  coordinate: { type: 'theta' },\n  transform: [{ type: 'stackY' }],\n});\nchart.render();\n",paraId:36,tocIndex:8},{value:"All the above coordinate systems can be combined with coordinate system transforms.",paraId:37,tocIndex:9},{value:"Coordinate system transforms are configured as follows, and multiple transforms can be configured simultaneously:",paraId:38,tocIndex:9},{value:"({\n  coordinate: {\n    transform: [\n      { type: 'transpose' },\n      {\n        type: 'fisheye',\n        focusX: 0.1,\n        focusY: 0.1,\n        distortionX: 4,\n        distortionY: 4,\n      },\n    ],\n  },\n});\n",paraId:39,tocIndex:9},{value:"A commonly used transformation is the transpose transformation, mainly used to change the orientation of charts. For example, drawing horizontal bar charts.",paraId:40,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold' },\n  coordinate: { transform: [{ type: 'transpose' }] },\n});\nchart.render();\n",paraId:41,tocIndex:10},{value:"Fisheye coordinate system is a special coordinate transformation that applies a Cartesian fisheye effect to input dimensions, magnifying the focus area while compressing areas away from the focus. This transformation is similar to the visual effect of a fisheye lens, allowing you to highlight local details while maintaining a global view.",paraId:42,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  width: 800,\n  height: 500,\n  padding: [40, 60, 60, 80],\n  coordinate: {\n    transform: [\n      {\n        type: 'fisheye',\n        focusX: 0.1,\n        focusY: 0.1,\n        distortionX: 4,\n        distortionY: 4,\n      },\n    ],\n  },\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n  },\n  encode: {\n    x: 'GDP',\n    y: 'LifeExpectancy',\n    size: 'Population',\n    color: 'continent',\n    shape: 'point',\n  },\n  scale: {\n    size: {\n      type: 'log',\n      range: [4, 20],\n    },\n    x: {\n      nice: true,\n    },\n    y: {\n      nice: true,\n    },\n  },\n  style: {\n    fillOpacity: 0.6,\n    lineWidth: 1,\n    stroke: '#fff',\n  },\n  legend: {\n    color: {\n      position: 'bottom',\n      layout: 'horizontal',\n    },\n    size: false,\n  },\n  axis: {\n    x: {\n      title: 'GDP',\n      titleFill: '#333',\n      labelFontSize: 12,\n    },\n    y: {\n      title: 'Life Expectancy',\n      titleFill: '#333',\n      labelFontSize: 12,\n    },\n  },\n  tooltip: {\n    title: (d) => d.country,\n    items: [\n      (d) => ({ name: 'GDP', value: d.GDP }),\n      (d) => ({ name: 'Life Expectancy', value: d.LifeExpectancy }),\n      (d) => ({ name: 'Population', value: d.Population }),\n    ],\n  },\n});\n\nchart.render();\n",paraId:43,tocIndex:11},{value:"Currently, we only support the ",paraId:44,tocIndex:12},{value:"cartesian3D",paraId:44,tocIndex:12},{value:" coordinate system. cartesian3D is extended from the 2D Cartesian coordinate system by adding a Z-axis.",paraId:44,tocIndex:12},{value:"import { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\nimport { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\n\n// Create a WebGL renderer.\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ThreeDPlugin());\nrenderer.registerPlugin(new ControlPlugin());\n\n// Customize our own Chart with threedlib.\nconst Chart = extend(Runtime, { ...corelib(), ...threedlib() });\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  depth: 400, // Define the depth of chart.\n});\n\nchart.options({\n  type: 'point3D',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  },\n  encode: {\n    x: 'Horsepower',\n    y: 'Miles_per_Gallon',\n    z: 'Weight_in_lbs',\n    color: 'Origin',\n    shape: 'cube',\n  },\n  coordinate: { type: 'cartesian3D' },\n  scale: {\n    x: {\n      nice: true,\n    },\n    y: {\n      nice: true,\n    },\n    z: {\n      nice: true,\n    },\n  },\n  legend: false,\n  axis: {\n    x: {\n      gridLineWidth: 2,\n    },\n    y: {\n      gridLineWidth: 2,\n      titleBillboardRotation: -Math.PI / 2,\n    },\n    z: {\n      gridLineWidth: 2,\n    },\n  },\n});\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setType(CameraType.ORBITING);\n\n  // Add a directional light into scene.\n  const light = new DirectionalLight({\n    style: {\n      intensity: 3,\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n});\n",paraId:45,tocIndex:12}]},26254:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(65735);const t=[{value:"Parallel coordinate system (Parallel) is a coordinate system used for visualizing multi-dimensional data. It maps multiple variables to parallel coordinate axis, with each data record represented as a polyline connecting corresponding values on each coordinate axis. Parallel coordinate systems are particularly suitable for analyzing relationships and patterns among multiple variables, as well as identifying outliers and clusters in datasets.",paraId:0,tocIndex:0},{value:"In G2, the parallel coordinate system is implemented by transforming the Cartesian coordinate system into a parallel coordinate system, where each data dimension corresponds to a vertical coordinate axis.",paraId:1,tocIndex:0},{value:"The basic principles of parallel coordinate systems are:",paraId:2,tocIndex:1},{value:"Map multiple data dimensions to parallel arranged coordinate axis",paraId:3,tocIndex:1},{value:"Each data record is represented as a polyline passing through all coordinate axis",paraId:3,tocIndex:1},{value:"The position of the line on each coordinate axis corresponds to the data value of that dimension",paraId:3,tocIndex:1},{value:"Parallel coordinate systems have two common layout methods:",paraId:4,tocIndex:1},{value:"Vertical layout: Coordinate axis are arranged vertically (default)",paraId:5,tocIndex:1},{value:"Horizontal layout: Coordinate axis are arranged horizontally through transpose transform",paraId:5,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// Define dimensions array\nconst dimensions = [\n  'Cylinders',\n  'Displacement',\n  'Weight_in_lbs',\n  'Horsepower',\n  'Acceleration',\n  'Miles_per_Gallon',\n  'Year',\n];\n\nchart.options({\n  type: 'line',\n  width: 720,\n  paddingLeft: 60,\n  coordinate: { type: 'parallel' },\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/96cd81b5-54a4-4fe8-b778-502b2114df58.json',\n    callback: (d) => Object.assign(d, { year: new Date(d.year) }),\n    transform: [\n      {\n        type: 'filter',\n        callback: (d) => d.Horsepower != null && d.Miles_per_Gallon != null,\n      },\n    ],\n  },\n  encode: {\n    position: dimensions,\n    color: 'Origin',\n    size: 1.01,\n  },\n  style: {\n    strokeOpacity: 0.3,\n  },\n  scale: {\n    position: { nice: true },\n    position1: { nice: true },\n    position2: { nice: true },\n    position3: { nice: true },\n    position4: { nice: true },\n    position5: { nice: true },\n  },\n  axis: {\n    position: { zIndex: 1 },\n    position1: { zIndex: 1 },\n    position2: { zIndex: 1 },\n    position3: { zIndex: 1 },\n    position4: { zIndex: 1 },\n    position5: { zIndex: 1 },\n  },\n});\n\nchart.render();\n",paraId:6,tocIndex:2},{value:"Parallel coordinate systems are particularly suitable for the following scenarios:",paraId:7,tocIndex:3},{value:"Multi-dimensional data analysis",paraId:8,tocIndex:3},{value:": When you need to analyze relationships between multiple variables simultaneously, parallel coordinate systems can display all dimensions in one view",paraId:8,tocIndex:3},{value:"Pattern recognition",paraId:8,tocIndex:3},{value:": By observing the direction of lines, you can identify patterns and trends in the data",paraId:8,tocIndex:3},{value:"Outlier detection",paraId:8,tocIndex:3},{value:": Abnormal data usually appears as lines with paths significantly different from most other lines",paraId:8,tocIndex:3},{value:"Cluster analysis",paraId:8,tocIndex:3},{value:": Similar data records will form similar line paths, making it easy to identify data clusters",paraId:8,tocIndex:3},{value:"Data volume",paraId:9,tocIndex:4},{value:": When there are too many data records, lines will overlap causing visual clutter. It's recommended to use transparency or interactive filtering",paraId:9,tocIndex:4},{value:"Axis order",paraId:9,tocIndex:4},{value:": The arrangement order of coordinate axis will affect the visualization effect. Variables with strong correlations placed in adjacent positions are usually more conducive to analysis",paraId:9,tocIndex:4},{value:"Axis scaling",paraId:9,tocIndex:4},{value:": Different dimensions may have vastly different data ranges, requiring appropriate scale settings for better comparison",paraId:9,tocIndex:4},{value:"The configuration options for parallel coordinate systems are relatively simple, mainly set through the ",paraId:10,tocIndex:5},{value:"coordinate",paraId:10,tocIndex:5},{value:" property:",paraId:10,tocIndex:5},{value:"Property",paraId:11,tocIndex:5},{value:"Description",paraId:11,tocIndex:5},{value:"Type",paraId:11,tocIndex:5},{value:"Default",paraId:11,tocIndex:5},{value:"Required",paraId:11,tocIndex:5},{value:"transform",paraId:11,tocIndex:5},{value:"Coordinate system transforms, can be used to implement horizontal layout",paraId:11,tocIndex:5},{value:"Transform[]",paraId:11,tocIndex:5},{value:"[]",paraId:11,tocIndex:5},{value:"Parallel coordinate systems support the following coordinate system transforms:",paraId:12,tocIndex:6},{value:"Transform Type",paraId:13,tocIndex:6},{value:"Description",paraId:13,tocIndex:6},{value:"Example",paraId:13,tocIndex:6},{value:"transpose",paraId:13,tocIndex:6},{value:"Convert vertical layout to horizontal layout",paraId:13,tocIndex:6},{value:"{ transform: [{ type: 'transpose' }] }",paraId:13,tocIndex:6},{value:"Vertical parallel coordinate system is the most common parallel coordinate system layout, with coordinate axis arranged vertically.",paraId:14,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  coordinate: { type: 'parallel' },\n  data: [\n    { dim1: 10, dim2: 30, dim3: 20, dim4: 60, category: 'A' },\n    { dim1: 20, dim2: 20, dim3: 30, dim4: 40, category: 'B' },\n    { dim1: 30, dim2: 10, dim3: 40, dim4: 20, category: 'C' },\n  ],\n  encode: {\n    position: ['dim1', 'dim2', 'dim3', 'dim4'],\n    color: 'category',\n  },\n  style: {\n    lineWidth: 2,\n    strokeOpacity: 0.7,\n  },\n  scale: {\n    color: {\n      palette: 'spectral',\n    },\n  },\n  axis: {\n    position: { zIndex: 1 },\n    position1: { zIndex: 1 },\n    position2: { zIndex: 1 },\n    position3: { zIndex: 1 },\n  },\n});\n\nchart.render();\n",paraId:15,tocIndex:8},{value:"By adding transpose transform, you can arrange coordinate axis horizontally to create horizontal parallel coordinate systems.",paraId:16,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  coordinate: {\n    type: 'parallel',\n    transform: [{ type: 'transpose' }],\n  },\n  data: [\n    { dim1: 10, dim2: 30, dim3: 20, dim4: 60, category: 'A' },\n    { dim1: 20, dim2: 20, dim3: 30, dim4: 40, category: 'B' },\n    { dim1: 30, dim2: 10, dim3: 40, dim4: 20, category: 'C' },\n  ],\n  encode: {\n    position: ['dim1', 'dim2', 'dim3', 'dim4'],\n    color: 'category',\n  },\n  style: {\n    lineWidth: 2,\n    strokeOpacity: 0.7,\n  },\n  scale: {\n    color: {\n      palette: 'spectral',\n    },\n  },\n  axis: {\n    position: { zIndex: 1 },\n    position1: { zIndex: 1 },\n    position2: { zIndex: 1 },\n    position3: { zIndex: 1 },\n  },\n});\n\nchart.render();\n",paraId:17,tocIndex:9},{value:"Parallel coordinate systems can be combined with interaction components to implement interactive data analysis functionality.",paraId:18,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  coordinate: { type: 'parallel' },\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/iris.json',\n  },\n  encode: {\n    position: ['sepalLength', 'sepalWidth', 'petalLength', 'petalWidth'],\n    color: 'species',\n  },\n  style: {\n    strokeOpacity: 0.6,\n    lineWidth: 1.5,\n  },\n  scale: {\n    color: {\n      palette: 'category10',\n    },\n  },\n  axis: {\n    position: { zIndex: 1 },\n    position1: { zIndex: 1 },\n    position2: { zIndex: 1 },\n    position3: { zIndex: 1 },\n  },\n  interaction: {\n    brushHighlight: true,\n  },\n});\n\nchart.render();\n",paraId:19,tocIndex:10},{value:"Here's a complete example showing how to use parallel coordinate systems for automobile data analysis:",paraId:20,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  paddingLeft: 80,\n});\n\nconst dimensions = [\n  'Cylinders',\n  'Displacement',\n  'Horsepower',\n  'Weight_in_lbs',\n  'Acceleration',\n  'Miles_per_Gallon',\n];\n\nchart.options({\n  type: 'line',\n  coordinate: { type: 'parallel' },\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/96cd81b5-54a4-4fe8-b778-502b2114df58.json',\n    transform: [\n      {\n        type: 'filter',\n        callback: (d) => d.Horsepower != null && d.Miles_per_Gallon != null,\n      },\n    ],\n  },\n  encode: {\n    position: dimensions,\n    color: 'Origin',\n    size: 1.2,\n  },\n  style: {\n    strokeOpacity: 0.4,\n  },\n  scale: {\n    position: { nice: true },\n    position1: { nice: true },\n    position2: { nice: true },\n    position3: { nice: true },\n    position4: { nice: true },\n    position5: { nice: true },\n    color: {\n      palette: 'set2',\n    },\n  },\n  axis: {\n    position: {\n      zIndex: 1,\n      title: { text: 'Cylinders' },\n    },\n    position1: {\n      zIndex: 1,\n      title: { text: 'Displacement' },\n    },\n    position2: {\n      zIndex: 1,\n      title: { text: 'Horsepower' },\n    },\n    position3: {\n      zIndex: 1,\n      title: { text: 'Weight (lbs)' },\n    },\n    position4: {\n      zIndex: 1,\n      title: { text: 'Acceleration' },\n    },\n    position5: {\n      zIndex: 1,\n      title: { text: 'MPG' },\n    },\n  },\n  legend: {\n    color: {\n      position: 'top',\n      layout: { justifyContent: 'center' },\n    },\n  },\n  interaction: {\n    tooltip: {\n      shared: true,\n      crosshairsLineDash: [4, 4],\n    },\n    brushHighlight: {\n      series: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:21,tocIndex:11}]},17021:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(26281);const t=[{value:"polar",paraId:0,tocIndex:0},{value:" (Polar coordinate system) is a non-Cartesian coordinate system that transforms points (x, y) from the Cartesian coordinate system to points (r, θ) in the polar coordinate system, where r is the radius and θ is the angle. Polar coordinate systems are commonly used in visualization to display cyclical data, relative relationships, or distribution differences.",paraId:0,tocIndex:0},{value:"The center serves as the pole (origin), with straight lines radiating outward from the center as polar axis",paraId:1,tocIndex:1},{value:"Data point positions are determined jointly by the distance to the center (radius r) and the angle with the polar axis (angle θ)",paraId:2,tocIndex:1},{value:"Suitable for displaying cyclical, periodic, and distribution-type data",paraId:3,tocIndex:1},{value:"Rose charts: Display numerical differences in categorical data",paraId:4,tocIndex:2},{value:"Radar charts: Multi-dimensional data comparison",paraId:5,tocIndex:2},{value:"Polar scatter plots: Display correlation between angle and radius",paraId:6,tocIndex:2},{value:"Various visualizations requiring radial layout",paraId:7,tocIndex:2},{value:"Property",paraId:8,tocIndex:3},{value:"Description",paraId:8,tocIndex:3},{value:"Type",paraId:8,tocIndex:3},{value:"Default",paraId:8,tocIndex:3},{value:"Required",paraId:8,tocIndex:3},{value:"type",paraId:8,tocIndex:3},{value:"Coordinate system type, set to 'polar'",paraId:8,tocIndex:3},{value:"string",paraId:8,tocIndex:3},{value:"None",paraId:8,tocIndex:3},{value:"✓",paraId:8,tocIndex:3},{value:"startAngle",paraId:8,tocIndex:3},{value:"Starting angle of polar coordinate system",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"-Math.PI / 2",paraId:8,tocIndex:3},{value:"endAngle",paraId:8,tocIndex:3},{value:"Ending angle of polar coordinate system",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"(Math.PI * 3) / 2",paraId:8,tocIndex:3},{value:"innerRadius",paraId:8,tocIndex:3},{value:"Inner radius of polar coordinate, as percentage of canvas height (0-1)",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"0",paraId:8,tocIndex:3},{value:"outerRadius",paraId:8,tocIndex:3},{value:"Outer radius of polar coordinate, as percentage of canvas height (0-1)",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"1",paraId:8,tocIndex:3},{value:"transform",paraId:8,tocIndex:3},{value:"Coordinate system transform configuration",paraId:8,tocIndex:3},{value:"CoordinateTransform[]",paraId:8,tocIndex:3},{value:"undefined",paraId:8,tocIndex:3},{value:"Complex type descriptions:",paraId:9,tocIndex:3},{value:"startAngle",paraId:10,tocIndex:3},{value:" and ",paraId:10,tocIndex:3},{value:"endAngle",paraId:10,tocIndex:3},{value:" are in radians, with default values of -π/2 and 3π/2 respectively, forming a complete circle (2π).",paraId:10,tocIndex:3},{value:"innerRadius",paraId:10,tocIndex:3},{value:" and ",paraId:10,tocIndex:3},{value:"outerRadius",paraId:10,tocIndex:3},{value:" have a value range of [0-1], representing the inner and outer radius of the polar coordinate relative to the canvas height.",paraId:10,tocIndex:3},{value:"transform",paraId:10,tocIndex:3},{value:" is used to configure additional coordinate system transforms.",paraId:10,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  width: 720,\n  height: 720,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/87b2ff47-2a33-4509-869c-dae4cdd81163.csv',\n  },\n  encode: { x: 'year', y: 'people' },\n  transform: [{ type: 'groupX', y: 'sum' }],\n  scale: { y: { type: 'sqrt' } },\n  coordinate: { type: 'polar' },\n  animate: { enter: { type: 'waveIn' } },\n  axis: {\n    y: {\n      titleSpacing: 28,\n      labelFormatter: '~s',\n      tickCount: 5,\n      tickFilter: (d, i) => i !== 0,\n      direction: 'right',\n    },\n  },\n  tooltip: { items: [{ channel: 'y', valueFormatter: '~s' }] },\n});\n\nchart.render();\n",paraId:11,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { item: 'Design', type: 'a', score: 70 },\n    { item: 'Design', type: 'b', score: 30 },\n    { item: 'Development', type: 'a', score: 60 },\n    { item: 'Development', type: 'b', score: 70 },\n    { item: 'Marketing', type: 'a', score: 50 },\n    { item: 'Marketing', type: 'b', score: 60 },\n    { item: 'Users', type: 'a', score: 40 },\n    { item: 'Users', type: 'b', score: 50 },\n    { item: 'Test', type: 'a', score: 60 },\n    { item: 'Test', type: 'b', score: 70 },\n    { item: 'Language', type: 'a', score: 70 },\n    { item: 'Language', type: 'b', score: 50 },\n    { item: 'Technology', type: 'a', score: 50 },\n    { item: 'Technology', type: 'b', score: 40 },\n    { item: 'Support', type: 'a', score: 30 },\n    { item: 'Support', type: 'b', score: 40 },\n    { item: 'Sales', type: 'a', score: 60 },\n    { item: 'Sales', type: 'b', score: 40 },\n    { item: 'UX', type: 'a', score: 50 },\n    { item: 'UX', type: 'b', score: 60 },\n  ],\n  scale: { x: { padding: 0.5, align: 0 }, y: { tickCount: 5 } },\n  coordinate: { type: 'polar' },\n  axis: { x: { grid: true }, y: { zIndex: 1, title: false } },\n  interaction: { tooltip: { crosshairsLineDash: [4, 4] } },\n  children: [\n    {\n      type: 'area',\n      encode: { x: 'item', y: 'score', color: 'type', shape: 'smooth' },\n      scale: { y: { domainMax: 80 } },\n      style: { fillOpacity: 0.5 },\n    },\n    {\n      type: 'line',\n      encode: { x: 'item', y: 'score', color: 'type', shape: 'smooth' },\n      style: { lineWidth: 2 },\n    },\n  ],\n});\n\nchart.render();\n",paraId:12,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'vector',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antfincdn/F5VcgnqRku/wind.json',\n  },\n  encode: {\n    x: 'longitude',\n    y: 'latitude',\n    rotate: ({ u, v }) => (Math.atan2(v, u) * 180) / Math.PI,\n    size: ({ u, v }) => Math.hypot(v, u),\n    color: ({ u, v }) => Math.hypot(v, u),\n  },\n  scale: { size: { range: [6, 20] }, color: { palette: 'viridis' } },\n  coordinate: { type: 'polar' },\n  axis: { x: { grid: false }, y: { grid: false } },\n  legend: false,\n  tooltip: { title: { channel: 'color', valueFormatter: '.1f' } },\n});\n\nchart.render();\n",paraId:13,tocIndex:7}]},80346:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(57290);const t=[{value:"The Radial coordinate system is a special type of polar coordinate system obtained by applying a transpose operation to the polar coordinate system. In the radial coordinate system, angles are mapped to the Y-axis, and radius is mapped to the X-axis, which is the reverse of the traditional polar coordinate system mapping.",paraId:0,tocIndex:0},{value:"Radial coordinate systems are commonly used for drawing the following types of charts:",paraId:1,tocIndex:0},{value:"Coxcomb charts",paraId:2,tocIndex:0},{value:"Radial bar charts",paraId:2,tocIndex:0},{value:"Radial stacked bar charts",paraId:2,tocIndex:0},{value:"Apple Activity charts and other special visualizations",paraId:2,tocIndex:0},{value:"These charts typically use ",paraId:3,tocIndex:0},{value:"interval",paraId:3,tocIndex:0},{value:" marks to display data, effectively showing data distribution and comparisons.",paraId:3,tocIndex:0},{value:"The radial coordinate system is obtained by applying the following transforms to a polar coordinate system:",paraId:4,tocIndex:1},{value:"Transpose: Exchange the mapping of X-axis and Y-axis",paraId:5,tocIndex:1},{value:"Translate and reflect: Adjust the position and direction of the coordinate system",paraId:5,tocIndex:1},{value:"This transformation gives data a radial effect that differs from traditional bar charts, particularly suitable for displaying periodic data or scenarios that require emphasizing central radiation effects.",paraId:6,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  coordinate: {\n    type: 'radial',\n    innerRadius: 0.1,\n    endAngle: Math.PI,\n  },\n  data: [\n    { question: 'Question 1', percent: 0.21 },\n    { question: 'Question 2', percent: 0.4 },\n    { question: 'Question 3', percent: 0.49 },\n    { question: 'Question 4', percent: 0.52 },\n    { question: 'Question 5', percent: 0.53 },\n    { question: 'Question 6', percent: 0.84 },\n    { question: 'Question 7', percent: 1.0 },\n    { question: 'Question 8', percent: 1.2 },\n  ],\n  encode: {\n    x: 'question',\n    y: 'percent',\n    color: 'percent',\n  },\n  style: {\n    stroke: 'white',\n  },\n  scale: {\n    color: {\n      range: '#BAE7FF-#1890FF-#0050B3',\n    },\n  },\n  legend: {\n    color: {\n      length: 400,\n      position: 'bottom',\n      layout: { justifyContent: 'center' },\n    },\n  },\n  axis: {\n    y: {\n      tickFilter: (d, i) => i !== 0,\n    },\n  },\n});\n\nchart.render();\n",paraId:7,tocIndex:2},{value:"Radial coordinate systems are suitable for the following scenarios:",paraId:8,tocIndex:3},{value:"Emphasizing central radiation effects",paraId:9,tocIndex:3},{value:": When data has a concept of radiating from the center outward, such as resource allocation, influence, etc.",paraId:9,tocIndex:3},{value:"Displaying periodic data",paraId:9,tocIndex:3},{value:": When data has cyclical characteristics but is not suitable for traditional polar coordinate systems",paraId:9,tocIndex:3},{value:"Space-saving needs",paraId:9,tocIndex:3},{value:": Compared to traditional bar charts, radial bar charts can display data more compactly while maintaining data readability",paraId:9,tocIndex:3},{value:"Aesthetic requirements",paraId:9,tocIndex:3},{value:": When creating visually more attractive visualizations is needed",paraId:9,tocIndex:3},{value:"Data volume",paraId:10,tocIndex:4},{value:": Radial coordinate systems are suitable for displaying a moderate number of categories (approximately 5-15), too many or too few categories may not be suitable",paraId:10,tocIndex:4},{value:"Label placement",paraId:10,tocIndex:4},{value:": In radial coordinate systems, label placement requires special attention. You can use the ",paraId:10,tocIndex:4},{value:"autoRotate",paraId:10,tocIndex:4},{value:" and ",paraId:10,tocIndex:4},{value:"rotateToAlignArc",paraId:10,tocIndex:4},{value:" properties in the ",paraId:10,tocIndex:4},{value:"label",paraId:10,tocIndex:4},{value:" configuration",paraId:10,tocIndex:4},{value:"Radius settings",paraId:10,tocIndex:4},{value:": Properly setting ",paraId:10,tocIndex:4},{value:"innerRadius",paraId:10,tocIndex:4},{value:" can improve readability, especially when data value differences are small",paraId:10,tocIndex:4},{value:"The radial coordinate system is primarily responsible for mapping positional data from data space to canvas space. Other visual attributes, such as color and size, are still mapped through corresponding scales. For detailed information about scales, please refer to the ",paraId:11,tocIndex:5},{value:"Scale",paraId:12,tocIndex:5},{value:" documentation.",paraId:11,tocIndex:5},{value:"Parameter",paraId:13,tocIndex:5},{value:"Description",paraId:13,tocIndex:5},{value:"Type",paraId:13,tocIndex:5},{value:"Default",paraId:13,tocIndex:5},{value:"Required",paraId:13,tocIndex:5},{value:"startAngle",paraId:13,tocIndex:5},{value:"Starting angle of polar coordinate system",paraId:13,tocIndex:5},{value:"number",paraId:13,tocIndex:5},{value:"-Math.PI / 2",paraId:13,tocIndex:5},{value:"endAngle",paraId:13,tocIndex:5},{value:"Ending angle of polar coordinate system",paraId:13,tocIndex:5},{value:"number",paraId:13,tocIndex:5},{value:"(Math.PI * 3) / 2",paraId:13,tocIndex:5},{value:"innerRadius",paraId:13,tocIndex:5},{value:"Inner radius of polar coordinate, range 0-1",paraId:13,tocIndex:5},{value:"number",paraId:13,tocIndex:5},{value:"0",paraId:13,tocIndex:5},{value:"outerRadius",paraId:13,tocIndex:5},{value:"Outer radius of polar coordinate, range 0-1",paraId:13,tocIndex:5},{value:"number",paraId:13,tocIndex:5},{value:"1",paraId:13,tocIndex:5},{value:"In the radial coordinate system, angles use radians as the unit, not degrees. Here's a comparison of common angles in radians:",paraId:14,tocIndex:6},{value:"Degrees",paraId:15,tocIndex:6},{value:"Radians",paraId:15,tocIndex:6},{value:"Position",paraId:15,tocIndex:6},{value:"0°",paraId:15,tocIndex:6},{value:"0",paraId:15,tocIndex:6},{value:"3 o'clock direction",paraId:15,tocIndex:6},{value:"90°",paraId:15,tocIndex:6},{value:"π/2",paraId:15,tocIndex:6},{value:"12 o'clock direction",paraId:15,tocIndex:6},{value:"180°",paraId:15,tocIndex:6},{value:"π",paraId:15,tocIndex:6},{value:"9 o'clock direction",paraId:15,tocIndex:6},{value:"270°",paraId:15,tocIndex:6},{value:"3π/2",paraId:15,tocIndex:6},{value:"6 o'clock direction",paraId:15,tocIndex:6},{value:"360°",paraId:15,tocIndex:6},{value:"2π",paraId:15,tocIndex:6},{value:"3 o'clock direction (full circle)",paraId:15,tocIndex:6},{value:"You can use ",paraId:16,tocIndex:6},{value:"Math.PI",paraId:16,tocIndex:6},{value:" to represent π, for example ",paraId:16,tocIndex:6},{value:"Math.PI / 2",paraId:16,tocIndex:6},{value:" represents 90°.",paraId:16,tocIndex:6},{value:"Coxcomb charts are one of the most common applications of radial coordinate systems, displaying traditional bar charts in a radial coordinate system to create a radial visual effect.",paraId:17,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.coordinate({ type: 'radial', innerRadius: 0.1, endAngle: Math.PI });\n\nchart\n  .interval()\n  .data([\n    { category: 'Category A', value: 40 },\n    { category: 'Category B', value: 60 },\n    { category: 'Category C', value: 80 },\n  ])\n  .encode('x', 'category')\n  .encode('y', 'value')\n  .encode('color', 'value');\n\nchart.render();\n",paraId:18,tocIndex:8},{value:"By applying stacking transforms in the radial coordinate system, you can create radial stacked bar charts suitable for displaying hierarchical data.",paraId:19,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.coordinate({ type: 'radial' });\n\nchart\n  .interval()\n  .data([\n    { category: 'Category A', type: 'Type1', value: 40 },\n    { category: 'Category A', type: 'Type2', value: 20 },\n    { category: 'Category B', type: 'Type1', value: 30 },\n    { category: 'Category B', type: 'Type2', value: 50 },\n    { category: 'Category C', type: 'Type1', value: 25 },\n    { category: 'Category C', type: 'Type2', value: 35 },\n  ])\n  .encode('x', 'category')\n  .encode('y', 'value')\n  .encode('color', 'type')\n  .transform({ type: 'stackY' });\n\nchart.render();\n",paraId:20,tocIndex:9},{value:"By setting appropriate inner radius and styles, you can create visualization effects similar to Apple Watch activity rings.",paraId:21,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  { name: 'activity1', percent: 0.6, color: '#1ad5de' },\n  { name: 'activity2', percent: 0.2, color: '#a0ff03' },\n  { name: 'activity3', percent: 0.3, color: '#e90b3a' },\n];\n\nchart.coordinate({ type: 'radial', innerRadius: 0.2, outerRadius: 0.9 });\n\nchart\n  .interval()\n  .data(data)\n  .encode('y', 'percent')\n  .encode('color', 'color')\n  .scale('color', { type: 'identity' })\n  .style({\n    stroke: '#fff',\n    lineWidth: 10,\n    lineCap: 'round',\n  })\n  .animate('enter', { type: 'waveIn', duration: 1000 });\n\nchart.render();\n",paraId:22,tocIndex:10},{value:"Here's a complete example that combines radial coordinate system with animations to create an engaging visualization:",paraId:23,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nconst data = [\n  { category: 'Design', score: 85, maxScore: 100 },\n  { category: 'Development', score: 72, maxScore: 100 },\n  { category: 'Marketing', score: 91, maxScore: 100 },\n  { category: 'Sales', score: 67, maxScore: 100 },\n  { category: 'Support', score: 78, maxScore: 100 },\n  { category: 'Research', score: 83, maxScore: 100 },\n];\n\nchart.coordinate({\n  type: 'radial',\n  innerRadius: 0.3,\n  outerRadius: 0.8,\n});\n\nchart\n  .interval()\n  .data(data)\n  .encode('x', 'category')\n  .encode('y', 'score')\n  .encode('color', 'score')\n  .scale('color', {\n    range: ['#FF6B6B', '#4ECDC4', '#45B7D1'],\n  })\n  .style({\n    stroke: 'white',\n    lineWidth: 2,\n  })\n  .animate('enter', {\n    type: 'waveIn',\n    duration: 1500,\n    delay: (d, i) => i * 100,\n  })\n  .label({\n    text: 'score',\n    position: 'outside',\n    style: {\n      fontSize: 12,\n      fontWeight: 'bold',\n    },\n  });\n\nchart.render();\n",paraId:24,tocIndex:11}]},73834:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(37827);const t=[{value:"Theta is a special polar coordinate system that combines the characteristics of Transpose and Polar coordinate systems. It maps data to angles on a fixed radius, commonly used for transforming column charts to pie charts/donut charts/sector charts.",paraId:0,tocIndex:0},{value:"Theta coordinate system is essentially a combination of Transpose and Polar coordinate systems:",paraId:1,tocIndex:0},{value:"First, exchange x/y axis through Transpose",paraId:2,tocIndex:0},{value:"Then, convert Cartesian coordinates to polar coordinates through Polar",paraId:2,tocIndex:0},{value:"Finally, achieve angle encoding of data on a fixed radius",paraId:2,tocIndex:0},{value:"Property",paraId:3,tocIndex:1},{value:"Description",paraId:3,tocIndex:1},{value:"Type",paraId:3,tocIndex:1},{value:"Default",paraId:3,tocIndex:1},{value:"Required",paraId:3,tocIndex:1},{value:"startAngle",paraId:3,tocIndex:1},{value:"Starting angle (in radians), controls the starting angle position of pie/donut charts",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"-Math.PI / 2",paraId:3,tocIndex:1},{value:"endAngle",paraId:3,tocIndex:1},{value:"Ending angle (in radians), controls the ending angle position of pie/donut charts",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"(Math.PI * 3) / 2",paraId:3,tocIndex:1},{value:"innerRadius",paraId:3,tocIndex:1},{value:"Inner radius (ratio 0-1), controls the inner circle radius size of donut charts. 0 represents solid pie chart, greater than 0 represents donut chart. Generally we keep this value smaller than outerRadius. If it exceeds, it can still be displayed but may affect label display",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"0",paraId:3,tocIndex:1},{value:"outerRadius",paraId:3,tocIndex:1},{value:"Outer radius (ratio 0-1), controls the outer circle radius size of pie/donut charts. 1 represents filling the entire drawing area. Values greater than 1 will exceed the container (excess parts will be clipped)",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"1",paraId:3,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { category: 'A', value: 40 },\n    { category: 'B', value: 25 },\n    { category: 'C', value: 20 },\n    { category: 'D', value: 15 },\n  ],\n  encode: { y: 'value', color: 'category' },\n  transform: [{ type: 'stackY' }],\n  coordinate: { type: 'theta' },\n  style: { stroke: 'white' },\n  labels: [{ text: 'category', radius: 0.8 }],\n});\n\nchart.render();\n",paraId:4,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { category: 'A', value: 40 },\n    { category: 'B', value: 25 },\n    { category: 'C', value: 20 },\n    { category: 'D', value: 15 },\n  ],\n  encode: { y: 'value', color: 'category' },\n  transform: [{ type: 'stackY' }],\n  coordinate: {\n    type: 'theta',\n    innerRadius: 0.5, // Set inner radius to create donut chart\n  },\n  style: { stroke: 'white' },\n  labels: [\n    { text: 'category', radius: 0.5 },\n    { text: 'value', radius: 0.5, style: { dy: 12 } },\n  ],\n});\n\nchart.render();\n",paraId:5,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { category: 'A', value: 40 },\n    { category: 'B', value: 25 },\n    { category: 'C', value: 20 },\n    { category: 'D', value: 15 },\n  ],\n  encode: { y: 'value', color: 'category' },\n  transform: [{ type: 'stackY' }],\n  coordinate: {\n    type: 'theta',\n    startAngle: -Math.PI / 2, // Start from π radians\n    endAngle: Math.PI * 3, // End at 3π radians\n  },\n  style: { stroke: 'white' },\n  labels: [{ text: 'category', radius: 0.8 }],\n});\n\nchart.render();\n",paraId:6,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { item: 'Case One', count: 40, percent: 0.4 },\n  { item: 'Case Two', count: 21, percent: 0.21 },\n  { item: 'Case Three', count: 17, percent: 0.17 },\n  { item: 'Case Four', count: 13, percent: 0.13 },\n  { item: 'Case Five', count: 9, percent: 0.09 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.coordinate({ type: 'theta' });\n\nchart\n  .interval()\n  .data(data)\n  .transform({ type: 'stackY' })\n  .encode('y', 'percent')\n  .encode('color', 'item')\n  .legend('color', { position: 'bottom', layout: { justifyContent: 'center' } })\n  .label({\n    position: 'outside',\n    text: (data) => `${data.item}: ${data.percent * 100}%`,\n  })\n  .tooltip((data) => ({\n    name: data.item,\n    value: `${data.percent * 100}%`,\n  }));\n\nchart.render();\n",paraId:7,tocIndex:6}]},53391:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(40447);const t=[{value:"Transpose is a coordinate system transformation that transforms (x, y) to (y, x), commonly used for converting between bar charts and column charts.",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({});\n\nchart.coordinate({ transform: [{ type: 'transpose' }] });\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n    format: 'csv',\n  })\n  .transform({\n    type: 'sortX',\n    reverse: true,\n  })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('color', 'steelblue')\n  .axis('y', { labelFormatter: '.0%' })\n  .label({\n    text: 'frequency',\n    formatter: '.1%',\n    style: {\n      textAnchor: (d) => (+d.frequency > 0.008 ? 'right' : 'start'),\n      fill: (d) => (+d.frequency > 0.008 ? '#fff' : '#000'),\n      dx: (d) => (+d.frequency > 0.008 ? -5 : 5),\n    },\n  });\n\nchart.render();\n",paraId:1,tocIndex:0}]},72932:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(21037);const t=[{value:"Custom data processing logic that allows users to define their own operation methods.",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart.data({\n  type: 'inline',\n  value: data,\n  transform: [\n    {\n      type: 'custom',\n      callback: (data) => data.map((d) => ({ ...d, sum: d.a + d.b + d.c })),\n    },\n  ],\n});\n",paraId:1,tocIndex:0},{value:"Property",paraId:2,tocIndex:1},{value:"Description",paraId:2,tocIndex:1},{value:"Type",paraId:2,tocIndex:1},{value:"Default",paraId:2,tocIndex:1},{value:"callback",paraId:2,tocIndex:1},{value:"Custom processing function",paraId:2,tocIndex:1},{value:"(data: any[]) => any[]",paraId:2,tocIndex:1}]},91387:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(13760);const t=[{value:"EMA (Exponential Moving Average) is a commonly used data smoothing algorithm that reduces data volatility by assigning higher weights to recent data points, making it clearer to observe trend changes in data.",paraId:0,tocIndex:0},{value:"In G2's implementation, EMA is calculated as follows:",paraId:1,tocIndex:0},{value:"Where:",paraId:2,tocIndex:0},{value:"P",paraId:3,tocIndex:0},{value:"t",paraId:3,tocIndex:0},{value:": The raw data value at the current time;",paraId:3,tocIndex:0},{value:"EMA",paraId:3,tocIndex:0},{value:"t-1",paraId:3,tocIndex:0},{value:": The EMA value at the previous time;",paraId:3,tocIndex:0},{value:"α: The smoothing factor, ranging between (0, 1).",paraId:3,tocIndex:0},{value:"⚠️ Note: G2's EMA implementation has the α weight position reversed from the traditional definition, therefore:",paraId:4,tocIndex:0},{value:"The closer ",paraId:5,tocIndex:0},{value:"α",paraId:5,tocIndex:0},{value:" is to 1, the more pronounced the smoothing effect;",paraId:5,tocIndex:0},{value:"The closer ",paraId:5,tocIndex:0},{value:"α",paraId:5,tocIndex:0},{value:" is to 0, the closer EMA is to the original data.",paraId:5,tocIndex:0},{value:"When data in time series has dramatic fluctuations and you want to highlight trends;",paraId:6,tocIndex:1},{value:"Technical analysis of financial data such as stock prices;",paraId:6,tocIndex:1},{value:"Smoothing and dynamic tracking of metrics during model training.",paraId:6,tocIndex:1},{value:"Property",paraId:7,tocIndex:2},{value:"Description",paraId:7,tocIndex:2},{value:"Type",paraId:7,tocIndex:2},{value:"Default",paraId:7,tocIndex:2},{value:"Required",paraId:7,tocIndex:2},{value:"field",paraId:7,tocIndex:2},{value:"Name of the field to be smoothed",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:"'y'",paraId:7,tocIndex:2},{value:"✓",paraId:7,tocIndex:2},{value:"alpha",paraId:7,tocIndex:2},{value:"Smoothing factor, controls smoothing degree (larger values mean more smoothing)",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:"0.6",paraId:7,tocIndex:2},{value:"as",paraId:7,tocIndex:2},{value:"Name of the new field to generate, if not specified will overwrite the original field",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:"Same as ",paraId:7,tocIndex:2},{value:"field",paraId:7,tocIndex:2},{value:"If you need to retain the original field, it's recommended to set the ",paraId:8,tocIndex:2},{value:"as",paraId:8,tocIndex:2},{value:" property to output to a new field.\nThis default value is defined internally by the component, not from the theme.\n⚠️ Note: The ",paraId:8,tocIndex:2},{value:"field",paraId:8,tocIndex:2},{value:" must be numeric, otherwise it will cause calculation errors.",paraId:8,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  children: [\n    {\n      type: 'line',\n      data: {\n        type: 'fetch',\n        value:\n          'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n        transform: [\n          {\n            type: 'ema',\n            field: 'close',\n            alpha: 0.8,\n            as: 'emaClose',\n          },\n        ],\n      },\n      encode: {\n        x: 'date',\n        y: 'emaClose',\n      },\n    },\n    {\n      type: 'line',\n      style: {\n        opacity: 0.3,\n      },\n      data: {\n        type: 'fetch',\n        value:\n          'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n      },\n      encode: {\n        x: 'date',\n        y: 'close',\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:9,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'view',\n  children: [\n    {\n      type: 'line',\n      data: {\n        type: 'inline',\n        value: [\n          { t: 0, y: 100 },\n          { t: 1, y: 180 },\n          { t: 2, y: 120 },\n          { t: 3, y: 200 },\n          { t: 4, y: 150 },\n          { t: 5, y: 250 },\n        ],\n        transform: [\n          {\n            type: 'ema',\n            field: 'y',\n            alpha: 0.6,\n            as: 'emaY',\n          },\n        ],\n      },\n      encode: { x: 't', y: 'emaY' },\n      style: { stroke: '#f90' },\n    },\n    {\n      type: 'line',\n      data: {\n        type: 'inline',\n        value: [\n          { t: 0, y: 100 },\n          { t: 1, y: 180 },\n          { t: 2, y: 120 },\n          { t: 3, y: 200 },\n          { t: 4, y: 150 },\n          { t: 5, y: 250 },\n        ],\n      },\n      encode: { x: 't', y: 'y' },\n      style: { stroke: '#ccc', lineDash: [4, 2] },\n    },\n  ],\n});\nchart.render();\n",paraId:10,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = Array.from({ length: 30 }, (_, i) => ({\n  date: `2024-01-${String(i + 1).padStart(2, '0')}`,\n  close:\n    100 + Math.sin(i / 3) * 20 + (i % 5 === 0 ? 20 : 0) + Math.random() * 10,\n}));\n\nchart.options({\n  type: 'view',\n  children: [\n    {\n      type: 'line',\n      data: {\n        type: 'inline',\n        value: data,\n        transform: [\n          {\n            type: 'ema',\n            field: 'close',\n            alpha: 0.7,\n            as: 'emaClose',\n          },\n        ],\n      },\n      encode: {\n        x: 'date',\n        y: 'emaClose',\n      },\n      style: {\n        stroke: '#007aff',\n        lineWidth: 2,\n      },\n    },\n    {\n      type: 'line',\n      data: {\n        type: 'inline',\n        value: data,\n      },\n      encode: {\n        x: 'date',\n        y: 'close',\n      },\n      style: {\n        stroke: '#bbb',\n        lineDash: [4, 2],\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:11,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'view',\n  children: [\n    {\n      type: 'line',\n      data: {\n        type: 'inline',\n        value: Array.from({ length: 50 }, (_, i) => ({\n          epoch: i,\n          loss: Math.sin(i / 5) * 20 + 60 + Math.random() * 5,\n        })),\n        transform: [\n          {\n            type: 'ema',\n            field: 'loss',\n            alpha: 0.4,\n            as: 'emaLoss',\n          },\n        ],\n      },\n      encode: {\n        x: 'epoch',\n        y: 'emaLoss',\n      },\n      style: { stroke: '#52c41a' },\n    },\n    {\n      type: 'line',\n      data: {\n        type: 'inline',\n        value: Array.from({ length: 50 }, (_, i) => ({\n          epoch: i,\n          loss: Math.sin(i / 5) * 20 + 60 + Math.random() * 5,\n        })),\n      },\n      encode: {\n        x: 'epoch',\n        y: 'loss',\n      },\n      style: { stroke: '#ddd', lineDash: [4, 2] },\n    },\n  ],\n});\nchart.render();\n",paraId:12,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  height: 300,\n});\n\nchart.options({\n  type: 'view',\n  children: [\n    {\n      type: 'line',\n      data: {\n        type: 'inline',\n        value: [\n          { x: 0, y: 30 },\n          { x: 1, y: 80 },\n          { x: 2, y: 45 },\n          { x: 3, y: 90 },\n          { x: 4, y: 20 },\n          { x: 5, y: 60 },\n          { x: 6, y: 30 },\n          { x: 7, y: 85 },\n          { x: 8, y: 40 },\n          { x: 9, y: 70 },\n        ],\n        transform: [\n          {\n            type: 'ema',\n            field: 'y',\n            alpha: 0.6,\n            as: 'emaY',\n          },\n        ],\n      },\n      encode: {\n        x: 'x',\n        y: 'emaY',\n      },\n      style: {\n        stroke: '#f90',\n        lineWidth: 2,\n      },\n    },\n    {\n      type: 'line',\n      data: {\n        type: 'inline',\n        value: [\n          { x: 0, y: 30 },\n          { x: 1, y: 80 },\n          { x: 2, y: 45 },\n          { x: 3, y: 90 },\n          { x: 4, y: 20 },\n          { x: 5, y: 60 },\n          { x: 6, y: 30 },\n          { x: 7, y: 85 },\n          { x: 8, y: 40 },\n          { x: 9, y: 70 },\n        ],\n      },\n      encode: {\n        x: 'x',\n        y: 'y',\n      },\n      style: {\n        stroke: '#ccc',\n        lineDash: [4, 2],\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:13,tocIndex:8}]},24532:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(4718);const t=[{value:"G2 has two types of data sources: one is ",paraId:0,tocIndex:0},{value:"inline",paraId:0,tocIndex:0},{value:", which directly passes in specific data and is the default data source type in G2; the other data source type is ",paraId:0,tocIndex:0},{value:"fetch",paraId:0,tocIndex:0},{value:", which fetches data from remote interfaces.",paraId:0,tocIndex:0},{value:"G2's ",paraId:1,tocIndex:0},{value:"fetch",paraId:1,tocIndex:0},{value:" supports obtaining data from remote interfaces, making data sources dynamic. It supports parsing JSON, CSV and other formats, adapts to multi-scenario data integration, and improves development efficiency and interactive experience for applications like dashboards and monitoring systems. In terms of configuration, remote data is obtained based on the ",paraId:1,tocIndex:0},{value:"url",paraId:1,tocIndex:0},{value:" specified by ",paraId:1,tocIndex:0},{value:"value",paraId:1,tocIndex:0},{value:". You can specify the data type through ",paraId:1,tocIndex:0},{value:"format",paraId:1,tocIndex:0},{value:". G2 will infer the data type based on the file extension specified by ",paraId:1,tocIndex:0},{value:"value",paraId:1,tocIndex:0},{value:" by default. Make sure the remote address is not authentication-protected.",paraId:1,tocIndex:0},{value:"When setting data, directly pass in an object and set the type to ",paraId:2,tocIndex:1},{value:"fetch",paraId:2,tocIndex:1},{value:".",paraId:2,tocIndex:1},{value:"// Spec\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch', // Specify fetch type\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json', // Remote address\n  },\n});\n",paraId:3,tocIndex:1},{value:"Here is an example:",paraId:4,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  },\n  encode: {\n    x: 'weight',\n    y: 'height',\n    color: 'gender',\n  },\n});\n\nchart.render();\n",paraId:5,tocIndex:2},{value:"Property",paraId:6,tocIndex:3},{value:"Description",paraId:6,tocIndex:3},{value:"Type",paraId:6,tocIndex:3},{value:"Default",paraId:6,tocIndex:3},{value:"value",paraId:6,tocIndex:3},{value:"Network address for fetch request",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:"[]",paraId:6,tocIndex:3},{value:"format",paraId:6,tocIndex:3},{value:"Data format type of remote file, determines parsing method",paraId:6,tocIndex:3},{value:"'json' | 'csv'",paraId:6,tocIndex:3},{value:"Default takes the suffix after the last ",paraId:6,tocIndex:3},{value:".",paraId:6,tocIndex:3},{value:" in value",paraId:6,tocIndex:3},{value:"delimiter",paraId:6,tocIndex:3},{value:"Delimiter for parsing CSV files",paraId:6,tocIndex:3},{value:"string",paraId:6,tocIndex:3},{value:",",paraId:6,tocIndex:3},{value:"autoType",paraId:6,tocIndex:3},{value:"Whether to automatically determine column data types when parsing CSV files",paraId:6,tocIndex:3},{value:"boolean",paraId:6,tocIndex:3},{value:"true",paraId:6,tocIndex:3},{value:"transform",paraId:6,tocIndex:3},{value:"Transform operations on loaded data",paraId:6,tocIndex:3},{value:"DataTransform",paraId:7,tocIndex:3},{value:"[]",paraId:6,tocIndex:3},{value:"In the ",paraId:8,tocIndex:3},{value:"fetch",paraId:8,tocIndex:3},{value:" implementation, if format is ",paraId:8,tocIndex:3},{value:"json",paraId:8,tocIndex:3},{value:", it uses JavaScript's ",paraId:8,tocIndex:3},{value:"fetch",paraId:8,tocIndex:3},{value:" API and converts the return value to a JSON Object; if format is ",paraId:8,tocIndex:3},{value:"csv",paraId:8,tocIndex:3},{value:", it calls ",paraId:8,tocIndex:3},{value:"d3-dsv",paraId:8,tocIndex:3},{value:" to parse the interface return value.",paraId:8,tocIndex:3},{value:"// API\nchart.data({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  },\n});\n",paraId:9,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  },\n  encode: {\n    x: 'weight',\n    y: 'height',\n    color: 'gender',\n  },\n});\n\nchart.render();\n",paraId:10,tocIndex:4},{value:"属性",paraId:11,tocIndex:5},{value:"描述",paraId:11,tocIndex:5},{value:"类型",paraId:11,tocIndex:5},{value:"默认值",paraId:11,tocIndex:5},{value:"value",paraId:11,tocIndex:5},{value:"requested url",paraId:11,tocIndex:5},{value:"string",paraId:11,tocIndex:5},{value:"[]",paraId:11,tocIndex:5},{value:"format",paraId:11,tocIndex:5},{value:"data format",paraId:11,tocIndex:5},{value:"'json' | 'csv'",paraId:11,tocIndex:5},{value:"json",paraId:11,tocIndex:5},{value:"delimiter",paraId:11,tocIndex:5},{value:"delimiter for parsing for csv data",paraId:11,tocIndex:5},{value:"string",paraId:11,tocIndex:5},{value:",",paraId:11,tocIndex:5},{value:"autoType",paraId:11,tocIndex:5},{value:"wether infers the types of values for csv data or not",paraId:11,tocIndex:5},{value:"boolean",paraId:11,tocIndex:5},{value:"true",paraId:11,tocIndex:5},{value:"transform",paraId:11,tocIndex:5},{value:"data transform for loaded data",paraId:11,tocIndex:5},{value:"DataTransform",paraId:11,tocIndex:5},{value:"[]",paraId:11,tocIndex:5}]},17913:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(96161);const t=[{value:"Filter data with specified conditions. Similar to ",paraId:0},{value:"Array.prototype.filter",paraId:0},{value:".",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart.data({\n  type: 'inline',\n  value: data,\n  transform: [\n    {\n      type: 'filter',\n      callback: (d) => d.a < 3,\n    },\n  ],\n});\n",paraId:1,tocIndex:0},{value:"After the above example is processed, the data becomes:",paraId:2,tocIndex:0},{value:"[{ a: 1, b: 2, c: 3 }];\n",paraId:3,tocIndex:0},{value:"Property",paraId:4,tocIndex:1},{value:"Description",paraId:4,tocIndex:1},{value:"Type",paraId:4,tocIndex:1},{value:"Default",paraId:4,tocIndex:1},{value:"callback",paraId:4,tocIndex:1},{value:"Function that takes current data and returns processed data",paraId:4,tocIndex:1},{value:"(d: any, idx: number, arr: any[]) => boolean",paraId:4,tocIndex:1},{value:"(d) => d !== undefined && d !== null && !Number.isNaN(d)",paraId:4,tocIndex:1}]},81658:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(82371);const t=[{value:"Unfold multiple fields into a specified key-value organization format.",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart.data({\n  type: 'inline',\n  value: data,\n  transform: [\n    {\n      type: 'fold',\n      fields: ['a', 'b'],\n      key: 'key',\n      value: 'value',\n    },\n  ],\n});\n",paraId:1,tocIndex:0},{value:"After the above example is processed, the data becomes:",paraId:2,tocIndex:0},{value:"[\n  { a: 1, b: 2, c: 3, key: 'a', value: 1 },\n  { a: 1, b: 2, c: 3, key: 'b', value: 2 },\n  { a: 4, b: 5, c: 6, key: 'a', value: 4 },\n  { a: 4, b: 5, c: 6, key: 'b', value: 5 },\n];\n",paraId:3,tocIndex:0},{value:"Property",paraId:4,tocIndex:1},{value:"Description",paraId:4,tocIndex:1},{value:"Type",paraId:4,tocIndex:1},{value:"Default",paraId:4,tocIndex:1},{value:"fields",paraId:4,tocIndex:1},{value:"List of fields to be unfolded",paraId:4,tocIndex:1},{value:"string[]",paraId:4,tocIndex:1},{value:"key",paraId:4,tocIndex:1},{value:"Field name for the enumeration values after unfolding",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"key",paraId:4,tocIndex:1},{value:"value",paraId:4,tocIndex:1},{value:"Field name for the data values after unfolding",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"value",paraId:4,tocIndex:1}]},77898:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(92326);const t=[{value:"G2 has two types of data sources: one is ",paraId:0,tocIndex:0},{value:"inline",paraId:0,tocIndex:0},{value:", which directly passes in specific data and is the default data source type in G2; the other data source type is ",paraId:0,tocIndex:0},{value:"fetch",paraId:0,tocIndex:0},{value:", which fetches data from remote interfaces.",paraId:0,tocIndex:0},{value:"Explicitly specify ",paraId:1,tocIndex:1},{value:"type",paraId:1,tocIndex:1},{value:" as ",paraId:1,tocIndex:1},{value:"inline",paraId:1,tocIndex:1},{value:", the complete syntax is as follows:",paraId:1,tocIndex:1},{value:"chart.data({\n  type: 'inline',\n  value: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n});\n",paraId:2,tocIndex:1},{value:"Since the default data type in G2 is ",paraId:3,tocIndex:1},{value:"inline",paraId:3,tocIndex:1},{value:", it can also be abbreviated as follows:",paraId:3,tocIndex:1},{value:"chart.data([\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n]);\n",paraId:4,tocIndex:1},{value:"Here is an example:",paraId:5,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre',\n    y: 'sold',\n  },\n});\n\nchart.render();\n",paraId:6,tocIndex:2},{value:"Property",paraId:7,tocIndex:3},{value:"Description",paraId:7,tocIndex:3},{value:"Type",paraId:7,tocIndex:3},{value:"Default",paraId:7,tocIndex:3},{value:"value",paraId:7,tocIndex:3},{value:"Specific object array data",paraId:7,tocIndex:3},{value:"object[]",paraId:7,tocIndex:3},{value:"[]",paraId:7,tocIndex:3},{value:"transform",paraId:7,tocIndex:3},{value:"Transform for inline data",paraId:7,tocIndex:3},{value:"DataTransform",paraId:8,tocIndex:3},{value:"[]",paraId:7,tocIndex:3},{value:"This data source is relatively simple, equivalent to the passed-in data being directly used as the data source for transform processing, and then going through the rendering logic.",paraId:9,tocIndex:3},{value:"⚠️ G2 supports some graph data structures, which are JavaScript Object types. When using abbreviated syntax, it may cause G2 to misidentify them. Therefore, if the chart data is an Object, it is recommended to use the complete syntax to pass in the data.",paraId:10,tocIndex:3},{value:"const graphData = {\n  nodes: [\n    /** */\n  ],\n  edges: [\n    /** */\n  ],\n};\n\nchart.data(graphData); // ❌ Not recommended, G2 may misidentify during processing\n\nchart.data({\n  // ✅ Recommended complete syntax, clearer semantics, avoids identification errors due to ambiguity\n  type: 'inline',\n  value: graphData,\n});\n",paraId:11,tocIndex:3}]},72947:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(92511);const t=[{value:"The function of ",paraId:0,tocIndex:0},{value:"join",paraId:0,tocIndex:0},{value:" is to connect two datasets together, similar to the ",paraId:0,tocIndex:0},{value:"JOIN",paraId:0,tocIndex:0},{value:" operation in SQL. This functionality is usually used to merge data from two data sources based on common fields, allowing records from two data sources to be combined according to specified conditions to form a new dataset. This functionality is very useful for displaying relational information between multiple data sources in visualizations. This operation is completed during the data preprocessing stage, and the newly generated fields can be directly used for graphic drawing, field mapping, annotations, and other operations.",paraId:0,tocIndex:0},{value:"Property",paraId:1,tocIndex:1},{value:"Description",paraId:1,tocIndex:1},{value:"Type",paraId:1,tocIndex:1},{value:"Default",paraId:1,tocIndex:1},{value:"Required",paraId:1,tocIndex:1},{value:"join",paraId:1,tocIndex:1},{value:"The data source to be joined",paraId:1,tocIndex:1},{value:"object[]",paraId:1,tocIndex:1},{value:"-",paraId:1,tocIndex:1},{value:"Yes",paraId:1,tocIndex:1},{value:"on",paraId:1,tocIndex:1},{value:"Fields for connecting the two data sources",paraId:1,tocIndex:1},{value:"[string | ((d: any) => string), string | ((d: any) => string)]",paraId:1,tocIndex:1},{value:"-",paraId:1,tocIndex:1},{value:"Yes",paraId:1,tocIndex:1},{value:"select",paraId:1,tocIndex:1},{value:"Fields to select from the joined data source",paraId:1,tocIndex:1},{value:"string[]",paraId:1,tocIndex:1},{value:"[]",paraId:1,tocIndex:1},{value:"No",paraId:1,tocIndex:1},{value:"as",paraId:1,tocIndex:1},{value:"Rename the fields selected by ",paraId:1,tocIndex:1},{value:"select",paraId:1,tocIndex:1},{value:"string[]",paraId:1,tocIndex:1},{value:"No renaming",paraId:1,tocIndex:1},{value:"No",paraId:1,tocIndex:1},{value:"unknown",paraId:1,tocIndex:1},{value:"Default value if no matching join data is found",paraId:1,tocIndex:1},{value:"any",paraId:1,tocIndex:1},{value:"NaN",paraId:1,tocIndex:1},{value:"No",paraId:1,tocIndex:1},{value:"join",paraId:2,tocIndex:2},{value:": Specifies the second data source to be joined, which can be an object array representing all join data.",paraId:2,tocIndex:2},{value:"on",paraId:2,tocIndex:2},{value:": Defines join conditions, passing in an array containing two fields or function arrays that can return field names. Used to match based on these fields in the two data sources.",paraId:2,tocIndex:2},{value:"select",paraId:2,tocIndex:2},{value:": Specifies which fields to select from the joined data source. Defaults to an empty array, meaning the joined data source contains all fields.",paraId:2,tocIndex:2},{value:"as",paraId:2,tocIndex:2},{value:": Specifies aliases for fields selected by ",paraId:2,tocIndex:2},{value:"select",paraId:2,tocIndex:2},{value:". If not specified, defaults to the original field names.",paraId:2,tocIndex:2},{value:"unknown",paraId:2,tocIndex:2},{value:": When there is no matching data between the two data sources, use this value as the default value.",paraId:2,tocIndex:2},{value:"📌 join can significantly enhance data organization capabilities in complex scenarios and is an indispensable tool for combining and cleaning data.",paraId:3,tocIndex:2},{value:"Data Merging",paraId:4,tocIndex:3},{value:": Merge multi-source data to complete missing fields. Combine two data sources with related fields into one data source for further analysis or visualization.",paraId:4,tocIndex:3},{value:"Data Alignment",paraId:4,tocIndex:3},{value:": Align two datasets based on common fields to generate the structure needed for visualization.",paraId:4,tocIndex:3},{value:"Conditional Selection",paraId:4,tocIndex:3},{value:": Map codes (such as user IDs, product IDs) to descriptive information. Select specified fields from the joined data source for display while avoiding redundant data.",paraId:4,tocIndex:3},{value:"on: ['id', 'code']\n// Or use function approach\non: [(d) => d.id, (d) => d.code]",paraId:5,tocIndex:6},{value:"Connect two data sources by fields and extract fields from external data for merging:",paraId:6,tocIndex:6},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nconst joinData = [\n  { c: 1, d: 2, e: 3 },\n  { c: 4, d: 5, e: 6 },\n];\n\nchart.options({\n  data: {\n    type: 'inline',\n    value: data,\n    transform: [\n      {\n        type: 'join',\n        join: joinData,\n        on: ['a', 'c'],\n        select: ['d', 'e'],\n      },\n    ],\n  },\n});\n",paraId:7,tocIndex:6},{value:"The transformation result is:",paraId:8,tocIndex:6},{value:"[\n  { a: 1, b: 2, c: 3, d: 2, e: 3 },\n  { a: 4, b: 5, c: 6, d: 5, e: 6 },\n];\n",paraId:9,tocIndex:6},{value:"Use as to rename fields selected by select:",paraId:10,tocIndex:7},{value:"chart.options({\n  data: {\n    type: 'inline',\n    value: data,\n    transform: [\n      {\n        type: 'join',\n        join: joinData,\n        on: ['a', 'c'],\n        select: ['d', 'e'],\n        as: ['dd', 'ee'],\n      },\n    ],\n  },\n});\n",paraId:11,tocIndex:7},{value:"The transformation result is:",paraId:12,tocIndex:7},{value:"[\n  { a: 1, b: 2, c: 3, dd: 2, ee: 3 },\n  { a: 4, b: 5, c: 6, dd: 5, ee: 6 },\n];\n",paraId:13,tocIndex:7},{value:"When there is no matching data between the two data sources, use unknown to specify a default value:",paraId:14,tocIndex:8},{value:"const data = [{ id: 1 }, { id: 2 }];\nconst joinData = [{ code: 1, label: 'A' }];\n\nchart.options({\n  data: {\n    type: 'inline',\n    value: data,\n    transform: [\n      {\n        type: 'join',\n        join: joinData,\n        on: ['id', 'code'],\n        select: ['label'],\n        unknown: 'Unknown',\n      },\n    ],\n  },\n});\n",paraId:15,tocIndex:8},{value:"The transformation result is:",paraId:16,tocIndex:8},{value:"[\n  { id: 1, label: 'A' },\n  { id: 2, label: 'Unknown' },\n];\n",paraId:17,tocIndex:8},{value:"join is a left join, meaning the main data is always retained.",paraId:18,tocIndex:9},{value:"When select is not specified, no fields are extracted by default, only used to determine join relationships.",paraId:19,tocIndex:9},{value:"It's recommended to deduplicate join data in advance to avoid ambiguity in many-to-one joins.",paraId:20,tocIndex:9},{value:"Supports dynamic functions to extract join fields, adapting to complex structures.",paraId:21,tocIndex:9}]},91757:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(34459);const t=[{value:"Kernel Density Estimation (KDE) is a non-parametric statistical method used to estimate the probability density function of random variables. In G2, the KDE data transform can perform kernel density algorithm processing on specified data to generate probability density function (PDF) data. It uses the open-source library ",paraId:0,tocIndex:0},{value:"pdfast",paraId:0,tocIndex:0},{value:" under the hood, which employs triangular kernel functions and is optimized to O(N + K) time complexity.",paraId:0,tocIndex:0},{value:"After data processing, two fields (default ",paraId:1,tocIndex:0},{value:"y",paraId:1,tocIndex:0},{value:" and ",paraId:1,tocIndex:0},{value:"size",paraId:1,tocIndex:0},{value:") are added to the data, both of which are array types used to represent density distribution points and their corresponding density values.",paraId:1,tocIndex:0},{value:"Density Plot",paraId:2,tocIndex:1},{value:": Display continuous estimation of data distribution, showing data distribution more smoothly than histograms.",paraId:2,tocIndex:1},{value:"Violin Plot",paraId:3,tocIndex:1},{value:": Combine the characteristics of box plots and density plots, which can display both the distribution shape of data and key statistical information.",paraId:3,tocIndex:1},{value:"Multi-group data distribution comparison",paraId:4,tocIndex:1},{value:": Through the ",paraId:4,tocIndex:1},{value:"groupBy",paraId:4,tocIndex:1},{value:" parameter, you can simultaneously display and compare data distribution of multiple groups.",paraId:4,tocIndex:1},{value:"Smooth data visualization",paraId:5,tocIndex:1},{value:": When you need to smooth discrete data points and show their overall trends and distribution.",paraId:5,tocIndex:1},{value:"Density analysis in different coordinate systems",paraId:6,tocIndex:1},{value:": Can be applied in Cartesian or polar coordinate systems to create data distribution visualizations from different perspectives.",paraId:6,tocIndex:1},{value:"Property",paraId:7,tocIndex:2},{value:"Description",paraId:7,tocIndex:2},{value:"Type",paraId:7,tocIndex:2},{value:"Default",paraId:7,tocIndex:2},{value:"Required",paraId:7,tocIndex:2},{value:"field",paraId:7,tocIndex:2},{value:"Data field for kernel density algorithm",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"Yes",paraId:7,tocIndex:2},{value:"groupBy",paraId:7,tocIndex:2},{value:"Grouping fields for data grouping, multiple fields can be specified",paraId:7,tocIndex:2},{value:"string[]",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"Yes",paraId:7,tocIndex:2},{value:"as",paraId:7,tocIndex:2},{value:"Fields to store after KDE processing",paraId:7,tocIndex:2},{value:"[string, string]",paraId:7,tocIndex:2},{value:"['y', 'size']",paraId:7,tocIndex:2},{value:"No",paraId:7,tocIndex:2},{value:"min",paraId:7,tocIndex:2},{value:"Minimum value of the processing range",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:"Data minimum",paraId:7,tocIndex:2},{value:"No",paraId:7,tocIndex:2},{value:"max",paraId:7,tocIndex:2},{value:"Maximum value of the processing range",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:"Data maximum",paraId:7,tocIndex:2},{value:"No",paraId:7,tocIndex:2},{value:"size",paraId:7,tocIndex:2},{value:"Number of data items generated by the algorithm, larger values result in finer density curves",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:"10",paraId:7,tocIndex:2},{value:"No",paraId:7,tocIndex:2},{value:"width",paraId:7,tocIndex:2},{value:"Determines how many points an element affects on the left and right, similar to bandWidth, larger values result in smoother curves",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:"2",paraId:7,tocIndex:2},{value:"No",paraId:7,tocIndex:2},{value:"as",paraId:8,tocIndex:3},{value:": Specifies the names of the two fields generated after KDE processing. The first field stores x values (i.e., positions of data points), and the second field stores y values (i.e., corresponding density values). Both fields are of array type, with length determined by the ",paraId:8,tocIndex:3},{value:"size",paraId:8,tocIndex:3},{value:" parameter.",paraId:8,tocIndex:3},{value:"size",paraId:9,tocIndex:4},{value:": This parameter determines the fineness of the generated density curve. Larger values generate more points, resulting in finer density curves. In examples, you can see the effect of increasing from the default 10 to 20 or 30.",paraId:9,tocIndex:4},{value:"width",paraId:10,tocIndex:4},{value:": This parameter controls the smoothness of the density curve, similar to the bandwidth parameter in kernel density estimation. Larger values result in smoother curves but may lose some details.",paraId:10,tocIndex:4},{value:"The following example shows how to create a basic density plot displaying data distribution of different species:",paraId:11,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'density', // Set chart type to density plot\n  data: {\n    type: 'fetch', // Specify data type as network fetch\n    value: 'https://assets.antv.antgroup.com/g2/species.json', // Set data URL\n    transform: [\n      {\n        type: 'kde', // Use kernel density estimation (KDE) for data transformation\n        field: 'y', // Specify KDE calculation field as 'y'\n        groupBy: ['x', 'species'], // Group data by 'x' and 'species' fields\n        size: 20, // Generate 20 data points to represent probability density function\n      },\n    ],\n  },\n  encode: {\n    x: 'x', // Map 'x' field to x-axis\n    y: 'y', // Map 'y' field to y-axis\n    color: 'species', // Map 'species' field to color\n    size: 'size', // Map 'size' field to graphic size\n  },\n  tooltip: false, // Disable chart tooltip\n});\nchart.render();\n",paraId:12,tocIndex:6},{value:"In this example, we set the ",paraId:13,tocIndex:6},{value:"size",paraId:13,tocIndex:6},{value:" parameter to 20, which is larger than the default value of 10, to obtain finer density curves.",paraId:13,tocIndex:6},{value:"Using KDE in polar coordinates can create circular violin plots, providing new perspectives for data distribution visualization:",paraId:14,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/species.json',\n  },\n  coordinate: { type: 'polar' }, // Set to polar coordinate system\n  children: [\n    {\n      type: 'density', // Density plot component\n      data: {\n        transform: [{ type: 'kde', field: 'y', groupBy: ['x', 'species'] }],\n      },\n      encode: {\n        x: 'x',\n        y: 'y',\n        series: 'species',\n        color: 'species',\n        size: 'size',\n      },\n      tooltip: false,\n    },\n    {\n      type: 'boxplot', // Box plot component for displaying violin plot\n      encode: {\n        x: 'x',\n        y: 'y',\n        series: 'species',\n        color: 'species',\n        shape: 'violin', // Set shape to violin\n      },\n      style: { opacity: 0.5, strokeOpacity: 0.5, point: false },\n    },\n  ],\n});\nchart.render();\n",paraId:15,tocIndex:7},{value:"This example shows how to combine KDE with box plots to create violin plots. In polar coordinates, violin plots are distributed in a circular pattern, providing different perspectives to observe data distribution.",paraId:16,tocIndex:7},{value:"By adjusting KDE parameters, you can control the smoothness and accuracy of density estimation:",paraId:17,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'density',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/species.json',\n    transform: [\n      {\n        type: 'kde',\n        field: 'y',\n        groupBy: ['x'],\n        size: 30, // Increase sampling points for finer density curves\n        width: 3, // Increase bandwidth for smoother curves\n        min: 0, // Set minimum value of processing range\n        max: 8, // Set maximum value of processing range\n        as: ['density_x', 'density_y'], // Custom output field names\n      },\n    ],\n  },\n  encode: {\n    x: 'x',\n    y: 'density_x', // Use custom output field\n    color: 'x',\n    size: 'density_y', // Use custom output field\n  },\n  tooltip: false,\n});\nchart.render();\n",paraId:18,tocIndex:8},{value:"This example shows how to customize various KDE parameters:",paraId:19,tocIndex:8},{value:"size: 30",paraId:20,tocIndex:8},{value:" - Increase sampling points for finer density curves",paraId:20,tocIndex:8},{value:"width: 3",paraId:20,tocIndex:8},{value:" - Increase bandwidth for smoother curves",paraId:20,tocIndex:8},{value:"min: 0",paraId:20,tocIndex:8},{value:" and ",paraId:20,tocIndex:8},{value:"max: 8",paraId:20,tocIndex:8},{value:" - Set minimum and maximum values of processing range",paraId:20,tocIndex:8},{value:"as: ['density_x', 'density_y']",paraId:20,tocIndex:8},{value:" - Custom output field names",paraId:20,tocIndex:8},{value:"These parameter adjustments can help you obtain finer or smoother density curves, adjusting according to actual needs.",paraId:21,tocIndex:8},{value:"KDE data transform is a powerful tool in G2 that can help you create various density-related visualizations, such as density plots and violin plots. By adjusting its parameters, you can control the fineness and smoothness of density curves to meet different visualization needs.",paraId:22,tocIndex:9},{value:"Using KDE in different coordinate systems can provide different perspectives for data distribution. Combined with other chart types such as box plots, you can create richer data visualizations.",paraId:23,tocIndex:9},{value:"For more examples, you can check the ",paraId:24,tocIndex:9},{value:"Chart Examples - Violin Plot",paraId:25,tocIndex:9},{value:" page.",paraId:24,tocIndex:9}]},43504:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(19702);const t=[{value:"Print the current data in the Data Transform flow to the console for developers to debug the data processing process.",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart.data({\n  type: 'inline',\n  value: data,\n  transform: [\n    { type: 'slice', start: 1 },\n    { type: 'log' },\n    { type: 'filter', callback: (d) => d.a < 3 },\n  ],\n});\n",paraId:1,tocIndex:0},{value:"After adding the ",paraId:2,tocIndex:0},{value:"log",paraId:2,tocIndex:0},{value:" above, it will print the data processed by ",paraId:2,tocIndex:0},{value:"slice",paraId:2,tocIndex:0},{value:", and this data will be used as the input for the next transform ",paraId:2,tocIndex:0},{value:"filter",paraId:2,tocIndex:0},{value:".",paraId:2,tocIndex:0}]},6368:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(11982);const t=[{value:"Process data with mapping operations. Similar to ",paraId:0},{value:"Array.prototype.map",paraId:0},{value:".",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart\n  .data({\n    type: 'inline',\n    value: data,\n    transform: [\n      {\n        type: 'map',\n        callback: (datum, idx) => { ...datum, idx },\n      },\n    ],\n  });\n",paraId:1,tocIndex:0},{value:"After the above example is processed, the data becomes:",paraId:2,tocIndex:0},{value:"[\n  { a: 1, b: 2, c: 3, idx: 0 },\n  { a: 4, b: 5, c: 6, idx: 1 },\n];\n",paraId:3,tocIndex:0},{value:"Property",paraId:4,tocIndex:1},{value:"Description",paraId:4,tocIndex:1},{value:"Type",paraId:4,tocIndex:1},{value:"Default",paraId:4,tocIndex:1},{value:"callback",paraId:4,tocIndex:1},{value:"Function that takes current data and returns processed data",paraId:4,tocIndex:1},{value:"(datum: any) => any",paraId:4,tocIndex:1},{value:"(d) => d",paraId:4,tocIndex:1}]},56861:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(22509);const t=[{value:"In G2, ",paraId:0},{value:"Data",paraId:0},{value:" is primarily used to specify the data to be visualized and data transformation (pre-processing).",paraId:0},{value:"There are three main ways to configure data.",paraId:1,tocIndex:0},{value:"First method: Set ",paraId:2,tocIndex:0},{value:"type: inline",paraId:2,tocIndex:0},{value:", which defines an inline connector that directly passes in specific data. This is the default data source type in G2.",paraId:2,tocIndex:0},{value:"({\n  data: {\n    type: 'inline', // Specify inline type\n    value: [\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ],\n  },\n});\n",paraId:3,tocIndex:0},{value:"Second method: Set ",paraId:4,tocIndex:0},{value:"type: fetch",paraId:4,tocIndex:0},{value:", which defines a remote connector that obtains data from remote interfaces, making data sources dynamic. It supports parsing JSON, CSV and other formats, adapts to multi-scenario data integration, and improves development efficiency and interactive experience for applications like dashboards and monitoring systems.",paraId:4,tocIndex:0},{value:"({\n  data: {\n    type: 'fetch', // Specify fetch type\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json', // Remote address\n  },\n});\n",paraId:5,tocIndex:0},{value:"Third method: This is syntactic sugar for the first method. If the data meets the following three conditions, you can directly specify the data value:",paraId:6,tocIndex:0},{value:"Inline data",paraId:7,tocIndex:0},{value:"Is an array",paraId:7,tocIndex:0},{value:"No data transformation",paraId:7,tocIndex:0},{value:"({\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n});\n",paraId:8,tocIndex:0},{value:"Data can be specified at the View level:",paraId:9,tocIndex:1},{value:"({\n  type: 'view',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n});\n",paraId:10,tocIndex:1},{value:"Data bound to a view is transitive: it will be passed to marks in ",paraId:11,tocIndex:1},{value:"view.children",paraId:11,tocIndex:1},{value:". If the mark does not have data, its data will be set; otherwise, there is no effect. This means that for marks that share data, you can bind the data to the view.",paraId:11,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  children: [\n    { type: 'line', encode: { x: 'year', y: 'value' } },\n    { type: 'point', encode: { x: 'year', y: 'value' } },\n  ],\n});\nchart.render();\n",paraId:12,tocIndex:1},{value:"Data can also be specified at the Mark level:",paraId:13,tocIndex:1},{value:"({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n});\n",paraId:14,tocIndex:1},{value:"Each mark has its own data, which means we can visualize multiple datasets in one view, such as the following interval annotation chart:",paraId:15,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  children: [\n    {\n      type: 'rangeX',\n      data: [\n        { year: [new Date('1933'), new Date('1945')], event: 'Nazi Rule' },\n        {\n          year: [new Date('1948'), new Date('1989')],\n          event: 'GDR (East Germany)',\n        },\n      ],\n      encode: { x: 'year', color: 'event' },\n      scale: { color: { independent: true, range: ['#FAAD14', '#30BF78'] } },\n      style: { fillOpacity: 0.75 },\n      tooltip: false,\n    },\n    {\n      type: 'line',\n      data: {\n        type: 'fetch',\n        value: 'https://assets.antv.antgroup.com/g2/year-population.json',\n      },\n      encode: { x: (d) => new Date(d.year), y: 'population', color: '#333' },\n    },\n  ],\n});\n\nchart.render();\n",paraId:16,tocIndex:1},{value:"A complete data declaration consists of two parts: ",paraId:17,tocIndex:2},{value:"Connector",paraId:17,tocIndex:2},{value:" and ",paraId:17,tocIndex:2},{value:"DataTransform",paraId:17,tocIndex:2},{value:". Connector is the way to get data, specified by ",paraId:17,tocIndex:2},{value:"data.type",paraId:17,tocIndex:2},{value:", and data transform is the pre-processing function, specified by ",paraId:17,tocIndex:2},{value:"data.transform",paraId:17,tocIndex:2},{value:".",paraId:17,tocIndex:2},{value:"({\n  data: {\n    type: 'fetch', // Specify connector type\n    // Specify connector value\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n    transform: [\n      // Specify transforms, multiple can be specified\n      { type: 'filter', callback: (d) => d.sex === 'gender' },\n      {\n        type: 'sort',\n        callback: (a, b) => b.a - a.a,\n      },\n    ],\n  },\n});\n",paraId:18,tocIndex:2},{value:"Currently, G2 has the following built-in data transforms:",paraId:19,tocIndex:2},{value:"type",paraId:20,tocIndex:2},{value:"Description",paraId:20,tocIndex:2},{value:"Properties",paraId:20,tocIndex:2},{value:"custom",paraId:20,tocIndex:2},{value:"Custom data processing logic that allows users to define their own operation methods",paraId:20,tocIndex:2},{value:"custom",paraId:21,tocIndex:2},{value:"ema",paraId:20,tocIndex:2},{value:"Calculate exponential moving average for data smoothing",paraId:20,tocIndex:2},{value:"ema",paraId:22,tocIndex:2},{value:"filter",paraId:20,tocIndex:2},{value:"Filter data based on specified conditions",paraId:20,tocIndex:2},{value:"filter",paraId:23,tocIndex:2},{value:"fold",paraId:20,tocIndex:2},{value:"Unfold multiple fields into specified key-value organization format for easier processing and analysis",paraId:20,tocIndex:2},{value:"fold",paraId:24,tocIndex:2},{value:"join",paraId:20,tocIndex:2},{value:"Merge two data tables based on certain conditions to associate corresponding data rows",paraId:20,tocIndex:2},{value:"join",paraId:25,tocIndex:2},{value:"kde",paraId:20,tocIndex:2},{value:"Estimate data distribution density, commonly used for probability density analysis",paraId:20,tocIndex:2},{value:"kde",paraId:26,tocIndex:2},{value:"log",paraId:20,tocIndex:2},{value:"Print current data in the data transform flow to console for developers to debug data processing",paraId:20,tocIndex:2},{value:"log",paraId:27,tocIndex:2},{value:"map",paraId:20,tocIndex:2},{value:"Perform mapping operations on data, converting one type of value to another",paraId:20,tocIndex:2},{value:"map",paraId:28,tocIndex:2},{value:"pick",paraId:20,tocIndex:2},{value:"Select specified fields from data for extracting specific information",paraId:20,tocIndex:2},{value:"pick",paraId:29,tocIndex:2},{value:"rename",paraId:20,tocIndex:2},{value:"Rename data fields for easier subsequent processing and reading",paraId:20,tocIndex:2},{value:"rename",paraId:30,tocIndex:2},{value:"slice",paraId:20,tocIndex:2},{value:"Extract a subset of data, equivalent to data pagination or cropping",paraId:20,tocIndex:2},{value:"slice",paraId:31,tocIndex:2},{value:"sort",paraId:20,tocIndex:2},{value:"Sort data with support for custom sorting rules",paraId:20,tocIndex:2},{value:"sort",paraId:32,tocIndex:2},{value:"sortBy",paraId:20,tocIndex:2},{value:"Sort data by a specified field",paraId:20,tocIndex:2},{value:"sortBy",paraId:33,tocIndex:2},{value:"Since data is bound to marks, data updating can be a bit complex. Using the following example:",paraId:34,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst interval = chart\n  .interval()\n  .data([\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold');\n\nchart.render();\n",paraId:35,tocIndex:3},{value:"There are several ways to update the interval data in the above example:",paraId:36,tocIndex:3},{value:"First method: The most basic approach.",paraId:37,tocIndex:3},{value:"// Update the data bound to interval\ninterval.data(newData);\n\n// Update chart rendering through chart\nchart.render();\n",paraId:38,tocIndex:3},{value:"Second method: Syntactic sugar for the above approach.",paraId:39,tocIndex:3},{value:"// Update interval data and render the chart\ninterval.changeData(newData);\n",paraId:40,tocIndex:3},{value:"Third method: Get the interval object through query API, then update data.",paraId:41,tocIndex:3},{value:"chart.getNodesByType('rect')[0].changeData(data);\n",paraId:42,tocIndex:3},{value:"Here's an example of a line chart that updates data in real-time:",paraId:43,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// Format function: Convert timestamp to hh:mm:ss format\nfunction formatTime(timestamp) {\n  const date = new Date(timestamp);\n  const hours = String(date.getHours()).padStart(2, '0'); // Pad to two digits\n  const minutes = String(date.getMinutes()).padStart(2, '0');\n  const seconds = String(date.getSeconds()).padStart(2, '0');\n  return `${hours}:${minutes}:${seconds}`;\n}\n\nconst data = [];\n\nchart.options({\n  type: 'line',\n  data: [],\n  encode: {\n    x: (d) => formatTime(d.time),\n    y: 'temperature',\n    color: 'type',\n    shape: 'smooth',\n    size: 2,\n  },\n  scale: {\n    x: {\n      nice: true,\n    },\n  },\n});\n\nchart.render();\n\nsetInterval(function () {\n  const now = new Date();\n  const time = now.getTime();\n\n  const temperature1 = ~~(Math.random() * 5) + 22;\n  const temperature2 = ~~(Math.random() * 7) + 17;\n\n  if (data.length >= 200) {\n    data.shift();\n    data.shift();\n  }\n\n  data.push({\n    time, // Use formatted time\n    temperature: temperature1,\n    type: 'Record 1',\n  });\n  data.push({\n    time, // Use formatted time\n    temperature: temperature2,\n    type: 'Record 2',\n  });\n\n  chart.changeData(data);\n}, 1000);\n",paraId:44,tocIndex:3},{value:"How to use third-party libraries to draw statistical regression lines?",paraId:45,tocIndex:4},{value:"With the custom data transform capability, we can configure:",paraId:46,tocIndex:4},{value:"({\n  data: {\n    transform: [\n      {\n        type: 'custom',\n        callback: customFn(), // Custom data processing function\n      },\n    ],\n  },\n});\n",paraId:47,tocIndex:4},{value:"The ",paraId:48,tocIndex:4},{value:"customFn",paraId:48,tocIndex:4},{value:" here can use external data processing libraries, greatly expanding G2's data processing capabilities. In the following example, we use the third-party library ",paraId:48,tocIndex:4},{value:"d3-regression",paraId:48,tocIndex:4},{value:" to generate linear statistical regression lines:",paraId:48,tocIndex:4},{value:"import { regressionLinear } from 'd3-regression';\n\nnode.data({\n  // Use D3's regressionLinear to perform linear regression on data\n  transform: [\n    {\n      type: 'custom',\n      callback: regressionLinear(),\n    },\n  ],\n});\n",paraId:49,tocIndex:4},{value:"For more statistical regression line examples, see ",paraId:50,tocIndex:4},{value:"Data Analysis - Regression Lines",paraId:51,tocIndex:4},{value:".",paraId:50,tocIndex:4}]},33778:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(44124);const t=[{value:"Extract a data subset from the data by field.",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart.data({\n  type: 'inline',\n  value: data,\n  transform: [\n    {\n      type: 'pick',\n      fields: ['a', 'b'],\n    },\n  ],\n});\n",paraId:1,tocIndex:0},{value:"After the above example is processed, the data becomes:",paraId:2,tocIndex:0},{value:"[\n  { a: 1, b: 2 },\n  { a: 4, b: 5 },\n];\n",paraId:3,tocIndex:0},{value:"Property",paraId:4,tocIndex:1},{value:"Description",paraId:4,tocIndex:1},{value:"Type",paraId:4,tocIndex:1},{value:"Default",paraId:4,tocIndex:1},{value:"fields",paraId:4,tocIndex:1},{value:"Data fields to extract",paraId:4,tocIndex:1},{value:"string[]",paraId:4,tocIndex:1}]},88794:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(83602);const t=[{value:"Rename some fields in the data.",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart.data({\n  type: 'inline',\n  value: data,\n  transform: [\n    {\n      type: 'rename',\n      a: 'x',\n      b: 'y',\n    },\n  ],\n});\n",paraId:1,tocIndex:0},{value:"After the above example is processed, the data becomes:",paraId:2,tocIndex:0},{value:"[\n  { x: 1, y: 2, c: 3 },\n  { x: 4, y: 5, c: 6 },\n];\n",paraId:3,tocIndex:0},{value:"Property",paraId:4,tocIndex:1},{value:"Description",paraId:4,tocIndex:1},{value:"Type",paraId:4,tocIndex:1},{value:"Default",paraId:4,tocIndex:1},{value:"[key]",paraId:4,tocIndex:1},{value:"Rename the field [key] in the data to the specified name",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1}]},39894:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(55985);const t=[{value:"Slice data to get a subset. Similar to ",paraId:0},{value:"Array.prototype.slice",paraId:0},{value:".",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart.data({\n  type: 'inline',\n  value: data,\n  transform: [\n    {\n      type: 'slice',\n      start: 1,\n    },\n  ],\n});\n",paraId:1,tocIndex:0},{value:"After the above example is processed, the data becomes:",paraId:2,tocIndex:0},{value:"[{ a: 4, b: 5, c: 6 }];\n",paraId:3,tocIndex:0},{value:"Property",paraId:4,tocIndex:1},{value:"Description",paraId:4,tocIndex:1},{value:"Type",paraId:4,tocIndex:1},{value:"Default",paraId:4,tocIndex:1},{value:"start",paraId:4,tocIndex:1},{value:"Start index for slicing",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:"0",paraId:4,tocIndex:1},{value:"end",paraId:4,tocIndex:1},{value:"End index for slicing",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:"arr.length - 1",paraId:4,tocIndex:1}]},77493:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(41625);const t=[{value:"Sort data according to the specified callback. Similar to ",paraId:0,tocIndex:0},{value:"Array.prototype.sort",paraId:0,tocIndex:0},{value:", G2's implementation of ",paraId:0,tocIndex:0},{value:"sort",paraId:0,tocIndex:0},{value:" makes two changes:",paraId:0,tocIndex:0},{value:"JavaScript's sort function modifies the original array. In G2, we changed it to an immutable approach to prevent modifying the original array.",paraId:1,tocIndex:0},{value:"If the passed data is not an array, no processing will be performed on the data. For example, when drawing some relationship graphs, ",paraId:1,tocIndex:0},{value:"data",paraId:1,tocIndex:0},{value:" is generally of ",paraId:1,tocIndex:0},{value:"object",paraId:1,tocIndex:0},{value:" type, in which case the sort function becomes ineffective and returns the original data.",paraId:1,tocIndex:0},{value:"sort",paraId:2,tocIndex:1},{value:" is used for sorting data, for example in pie charts and ranking bar charts, where data needs to be arranged from large to small to better see the TOP N data items.",paraId:2,tocIndex:1},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart.options({\n  data: {\n    type: 'inline',\n    value: data,\n    transform: [\n      {\n        type: 'sort',\n        callback: (a, b) => b.a - a.a,\n      },\n    ],\n  },\n});\n",paraId:3,tocIndex:1},{value:"After the above example is processed, the data becomes:",paraId:4,tocIndex:1},{value:"[\n  { a: 4, b: 5, c: 6 },\n  { a: 1, b: 2, c: 3 },\n];\n",paraId:5,tocIndex:1},{value:"Note: The ",paraId:6,tocIndex:1},{value:"sort",paraId:6,tocIndex:1},{value:" data transform is in ",paraId:6,tocIndex:1},{value:"data.transform",paraId:6,tocIndex:1},{value:". When data configuration is simplified, transform cannot be configured.",paraId:6,tocIndex:1},{value:"Property",paraId:7,tocIndex:2},{value:"Description",paraId:7,tocIndex:2},{value:"Type",paraId:7,tocIndex:2},{value:"Default",paraId:7,tocIndex:2},{value:"callback",paraId:7,tocIndex:2},{value:"Array.sort comparator, returns 1, 0, -1 representing >, =, <",paraId:7,tocIndex:2},{value:"(a: any, b: any) => number",paraId:7,tocIndex:2},{value:"(a, b) => 0",paraId:7,tocIndex:2}]},13283:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(3610);const t=[{value:"Sort data by specified fields. The default sorting method is ascending order.",paraId:0},{value:"const data = [\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\nchart.data({\n  type: 'inline',\n  value: data,\n  transform: [\n    {\n      type: 'sortBy',\n      fields: ['sold'], // Sort by the sold field\n    },\n  ],\n});\n",paraId:1,tocIndex:0},{value:"When sorting fields exist, you can provide a boolean value for each field to change the sorting method. The default value is true.",paraId:2,tocIndex:0},{value:"chart.data({\n  type: 'inline',\n  value: data,\n  transform: [\n    {\n      type: 'sortBy',\n      fields: [['sold', false]], // Change sorting to descending order\n    },\n  ],\n});\n",paraId:3,tocIndex:0},{value:"When there are multiple sorting fields, if the previous field is the same, continue comparing the next field.",paraId:4,tocIndex:0},{value:"const options = {\n  fields: [\n    ['name', true],\n    ['age', false],\n  ],\n};\n\nconst data = [\n  { name: 'Alice', age: 25 },\n  { name: 'Bob', age: 23 },\n  { name: 'Alice', age: 22 },\n];\n",paraId:5,tocIndex:0},{value:"This result is sorted by name in ascending order, and when names are the same, sorted by age in descending order.",paraId:6,tocIndex:0},{value:"Property",paraId:7,tocIndex:1},{value:"Description",paraId:7,tocIndex:1},{value:"Type",paraId:7,tocIndex:1},{value:"Default",paraId:7,tocIndex:1},{value:"fields",paraId:7,tocIndex:1},{value:"Fields to sort by",paraId:7,tocIndex:1},{value:"(string | [string, boolean])[]",paraId:7,tocIndex:1},{value:"[]",paraId:7,tocIndex:1}]},46583:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(60965);const t=[{value:"The core content of data visualization is visual encoding, which is the technology of mapping data information into visual elements. Just like data contains attributes and values, visual encoding also consists of two parts: ",paraId:0,tocIndex:0},{value:"Marks",paraId:0,tocIndex:0},{value:" and ",paraId:0,tocIndex:0},{value:"Visual Channels",paraId:0,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:"Data Attributes",paraId:1,tocIndex:0},{value:" -> Marks: Intuitive representation of data nature classification, usually geometric graphic elements, such as: points, lines, areas, and volumes.",paraId:1,tocIndex:0},{value:"Data Values",paraId:1,tocIndex:0},{value:" -> Visual Channels: Used to express quantitative information of data attributes, including mark position, size, shape, direction, hue, saturation, brightness, etc.",paraId:1,tocIndex:0},{value:"Visual channels can also be called chart attributes. The mapping relationship between raw data and visual channels enables us to quickly obtain information. So we can think of charts as a combination of graphic marks that carry some information, which we call ",paraId:2,tocIndex:0},{value:"encoded",paraId:2,tocIndex:0},{value:" information. When people read information from these symbols, we call it ",paraId:2,tocIndex:0},{value:"decoding",paraId:2,tocIndex:0},{value:" information.",paraId:2,tocIndex:0},{value:"Human recognition of visual channels has two basic perception modes. The first perception mode obtains information about the characteristics and positions of objects themselves, corresponding to the qualitative and categorical properties of visual channels; the second perception mode obtains information about the numerical magnitude of a certain attribute of objects, corresponding to the quantitative or ordinal properties of visual channels. Therefore, we divide visual channels into two major categories:",paraId:3,tocIndex:1},{value:"Qualitative (categorical)",paraId:4,tocIndex:1},{value:" visual channels, such as shape, color hue, and control position.",paraId:4,tocIndex:1},{value:"Quantitative (continuous, ordered)",paraId:4,tocIndex:1},{value:" visual channels, such as line length, area size, spatial volume, slope, angle, color saturation and brightness, etc.",paraId:4,tocIndex:1},{value:"However, the two categories are not absolute. For example, position information can both distinguish different categories and differentiate continuous data.",paraId:5,tocIndex:1},{value:"When performing visual encoding, we need to consider the expressiveness and effectiveness of different visual channels, mainly reflected in the following aspects:",paraId:6,tocIndex:2},{value:"Accuracy: Whether it can accurately express changes between visual data",paraId:7,tocIndex:2},{value:"Discriminability: The number of categories that can be encoded by the same visual channel, i.e., the upper limit of distinguishable categories",paraId:7,tocIndex:2},{value:"Separability: When encoded objects of different visual channels are placed together, whether they are easy to distinguish",paraId:7,tocIndex:2},{value:"Visual prominence: Whether important information uses more prominent visual channels for encoding",paraId:7,tocIndex:2},{value:"The following is a diagram showing the expressiveness of visual channels from best to worst:",paraId:8,tocIndex:2},{value:"Corresponding to visual channels in visual encoding, visual channels in G2 can be divided into the following five ",paraId:9,tocIndex:3},{value:"graphic attributes",paraId:9,tocIndex:3},{value:":",paraId:9,tocIndex:3},{value:"Visual Channel",paraId:10,tocIndex:4},{value:"Description",paraId:10,tocIndex:4},{value:"x",paraId:10,tocIndex:4},{value:"Defines the position of elements in the horizontal direction",paraId:10,tocIndex:4},{value:"y",paraId:10,tocIndex:4},{value:"Defines the position of elements in the vertical direction",paraId:10,tocIndex:4},{value:"z",paraId:10,tocIndex:4},{value:"Defines the depth position of elements in three-dimensional space",paraId:10,tocIndex:4},{value:"x1",paraId:10,tocIndex:4},{value:"Defines the end position of elements in the horizontal direction",paraId:10,tocIndex:4},{value:"y1",paraId:10,tocIndex:4},{value:"Defines the end position of elements in the vertical direction; stacked bar charts internally calculate ",paraId:10,tocIndex:4},{value:"y1",paraId:10,tocIndex:4},{value:" channel values",paraId:10,tocIndex:4},{value:"series",paraId:10,tocIndex:4},{value:"Distinguishes different data series through spatial position",paraId:10,tocIndex:4},{value:"position",paraId:10,tocIndex:4},{value:"Custom composite chart display position, used for parallel coordinates and circular facet charts, etc.",paraId:10,tocIndex:4},{value:"position${number}",paraId:10,tocIndex:4},{value:"Custom composite chart display position, used for parallel coordinates and circular facet charts, etc.",paraId:10,tocIndex:4},{value:"Visual Channel",paraId:11,tocIndex:5},{value:"Description",paraId:11,tocIndex:5},{value:"color",paraId:11,tocIndex:5},{value:"Maps data categorical attributes through hue",paraId:11,tocIndex:5},{value:"opacity",paraId:11,tocIndex:5},{value:"Controls element transparency, commonly used to highlight focus or express numerical intensity (such as gradient transparency in heatmaps)",paraId:11,tocIndex:5},{value:"Visual Channel",paraId:12,tocIndex:6},{value:"Description",paraId:12,tocIndex:6},{value:"shape",paraId:12,tocIndex:6},{value:"Distinguishes data categories through geometric forms, suitable for categorical data encoding",paraId:12,tocIndex:6},{value:"Visual Channel",paraId:13,tocIndex:7},{value:"Description",paraId:13,tocIndex:7},{value:"size",paraId:13,tocIndex:7},{value:"Controls element physical dimensions (point radius/line width/bar width), suitable for encoding quantitative data",paraId:13,tocIndex:7},{value:"Visual Channel",paraId:14,tocIndex:8},{value:"Description",paraId:14,tocIndex:8},{value:"key",paraId:14,tocIndex:8},{value:"Unique identifier for animation elements, used for data updates",paraId:14,tocIndex:8},{value:"groupKey",paraId:14,tocIndex:8},{value:"Animation group identifier, used for data updates",paraId:14,tocIndex:8},{value:"enterType",paraId:14,tocIndex:8},{value:"Animation type for element entry into scene (such as scale/fade in)",paraId:14,tocIndex:8},{value:"enterEasing",paraId:14,tocIndex:8},{value:"Easing function for enter animation",paraId:14,tocIndex:8},{value:"enterDuration",paraId:14,tocIndex:8},{value:"Duration of enter animation",paraId:14,tocIndex:8},{value:"enterDelay",paraId:14,tocIndex:8},{value:"Delay time for enter animation",paraId:14,tocIndex:8},{value:"updateType",paraId:14,tocIndex:8},{value:"Transition animation type for data updates",paraId:14,tocIndex:8},{value:"updateEasing",paraId:14,tocIndex:8},{value:"Easing function for update animation",paraId:14,tocIndex:8},{value:"updateDuration",paraId:14,tocIndex:8},{value:"Duration of update animation",paraId:14,tocIndex:8},{value:"updateDelay",paraId:14,tocIndex:8},{value:"Delay time for update animation",paraId:14,tocIndex:8},{value:"exitType",paraId:14,tocIndex:8},{value:"Animation type for element exit from scene (such as slide out)",paraId:14,tocIndex:8},{value:"exitEasing",paraId:14,tocIndex:8},{value:"Easing function for exit animation",paraId:14,tocIndex:8},{value:"exitDuration",paraId:14,tocIndex:8},{value:"Duration of exit animation",paraId:14,tocIndex:8},{value:"exitDelay",paraId:14,tocIndex:8},{value:"Delay time for exit animation",paraId:14,tocIndex:8},{value:"To control the style of marks, we often bind a column of data to one of its visual channels.",paraId:15,tocIndex:9},{value:"Here is a set of event planning timeline data:",paraId:16,tocIndex:9},{value:"table([\n  { name: 'Event Planning', startTime: 1, endTime: 4 },\n  { name: 'Venue Logistics Planning', startTime: 3, endTime: 13 },\n  { name: 'Select Suppliers', startTime: 5, endTime: 8 },\n  { name: 'Rent Venue', startTime: 9, endTime: 13 },\n  { name: 'Book Catering Services', startTime: 10, endTime: 14 },\n  { name: 'Rent Event Decoration Team', startTime: 12, endTime: 17 },\n  { name: 'Rehearsal', startTime: 14, endTime: 16 },\n  { name: 'Event Celebration', startTime: 17, endTime: 18 },\n]);\n",paraId:17,tocIndex:9},{value:"In the following example, we bind the ",paraId:18,tocIndex:9},{value:"name",paraId:18,tocIndex:9},{value:" column in the data to the ",paraId:18,tocIndex:9},{value:"x",paraId:18,tocIndex:9},{value:" channel, and bind the value of ",paraId:18,tocIndex:9},{value:"endTime",paraId:18,tocIndex:9},{value:" column minus ",paraId:18,tocIndex:9},{value:"startTime",paraId:18,tocIndex:9},{value:" column to the ",paraId:18,tocIndex:9},{value:"y",paraId:18,tocIndex:9},{value:" channel. This binding process is called ",paraId:18,tocIndex:9},{value:"Encode",paraId:18,tocIndex:9},{value:". We often say that a certain visual attribute of a graphic encodes a column of data, and this data-driven attribute is called a ",paraId:18,tocIndex:9},{value:"Channel",paraId:18,tocIndex:9},{value:". For example, the ",paraId:18,tocIndex:9},{value:"x",paraId:18,tocIndex:9},{value:" and ",paraId:18,tocIndex:9},{value:"y",paraId:18,tocIndex:9},{value:" channels of the interval mark below encode the corresponding column data respectively, clearly showing the relationship between different tasks and time consumption.",paraId:18,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { name: 'Event Planning', startTime: 1, endTime: 4 },\n    { name: 'Venue Logistics Planning', startTime: 3, endTime: 13 },\n    { name: 'Select Suppliers', startTime: 5, endTime: 8 },\n    { name: 'Rent Venue', startTime: 9, endTime: 13 },\n    { name: 'Book Catering Services', startTime: 10, endTime: 14 },\n    { name: 'Rent Event Decoration Team', startTime: 12, endTime: 17 },\n    { name: 'Rehearsal', startTime: 14, endTime: 16 },\n    { name: 'Event Celebration', startTime: 17, endTime: 18 },\n  ],\n  encode: {\n    x: 'name', // Map task name field to X-axis position\n    y: (datum) => datum.endTime - datum.startTime, // Map end time minus start time to Y-axis position\n  },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  axis: {\n    x: {\n      title: 'Task',\n    },\n    y: {\n      title: 'Time Consumed',\n    },\n  },\n});\n\nchart.render();\n",paraId:19,tocIndex:9},{value:"When we want to further analyze the temporal relationships of tasks, we need to leverage other visual channels.",paraId:20,tocIndex:9},{value:"In the following example, we bind the ",paraId:21,tocIndex:9},{value:"startTime",paraId:21,tocIndex:9},{value:" column in the data to the ",paraId:21,tocIndex:9},{value:"y",paraId:21,tocIndex:9},{value:" channel, and bind the ",paraId:21,tocIndex:9},{value:"endTime",paraId:21,tocIndex:9},{value:" column to the ",paraId:21,tocIndex:9},{value:"y1",paraId:21,tocIndex:9},{value:" channel (of course, you can also bind ",paraId:21,tocIndex:9},{value:"[startTime, endTime]",paraId:21,tocIndex:9},{value:" to the ",paraId:21,tocIndex:9},{value:"y",paraId:21,tocIndex:9},{value:" channel, see ",paraId:21,tocIndex:9},{value:"Array Channels",paraId:22,tocIndex:9},{value:" for details). Through this data encoding method, we achieve a Gantt chart effect. To better distinguish different tasks, in addition to encoding the ",paraId:21,tocIndex:9},{value:"name",paraId:21,tocIndex:9},{value:" column data to the ",paraId:21,tocIndex:9},{value:"x",paraId:21,tocIndex:9},{value:" channel, we also bind the ",paraId:21,tocIndex:9},{value:"name",paraId:21,tocIndex:9},{value:" column data to the ",paraId:21,tocIndex:9},{value:"color",paraId:21,tocIndex:9},{value:" channel. This way, through different colors and different x-axis positions, we can better distinguish different tasks.",paraId:21,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { name: 'Event Planning', startTime: 1, endTime: 4 },\n    { name: 'Venue Logistics Planning', startTime: 3, endTime: 13 },\n    { name: 'Select Suppliers', startTime: 5, endTime: 8 },\n    { name: 'Rent Venue', startTime: 9, endTime: 13 },\n    { name: 'Book Catering Services', startTime: 10, endTime: 14 },\n    { name: 'Rent Event Decoration Team', startTime: 12, endTime: 17 },\n    { name: 'Rehearsal', startTime: 14, endTime: 16 },\n    { name: 'Event Celebration', startTime: 17, endTime: 18 },\n  ],\n  encode: {\n    x: 'name', // Map task name field to X-axis position\n    y: 'startTime', // Map task start time field to y position\n    y1: 'endTime', // Map task end time field to y1 axis position\n    color: 'name', // Map task name field to color\n  },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  axis: {\n    x: {\n      title: 'Task',\n    },\n    y: {\n      title: 'Time',\n    },\n  },\n});\n\nchart.render();\n",paraId:23,tocIndex:9},{value:"This is already a relatively complete Gantt chart. If you want to emphasize the time sequence, you can use animation-related visual channels in G2 to achieve temporal animation effects. The following example encodes the ",paraId:24,tocIndex:9},{value:"enterDuration",paraId:24,tocIndex:9},{value:" and ",paraId:24,tocIndex:9},{value:"enterDelay",paraId:24,tocIndex:9},{value:" channels, making the enter animation delay time and duration of marks corresponding to different tasks correlate with the start time and end time in the data.",paraId:24,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { name: 'Event Planning', startTime: 1, endTime: 4 },\n    { name: 'Venue Logistics Planning', startTime: 3, endTime: 13 },\n    { name: 'Select Suppliers', startTime: 5, endTime: 8 },\n    { name: 'Rent Venue', startTime: 9, endTime: 13 },\n    { name: 'Book Catering Services', startTime: 10, endTime: 14 },\n    { name: 'Rent Event Decoration Team', startTime: 12, endTime: 17 },\n    { name: 'Rehearsal', startTime: 14, endTime: 16 },\n    { name: 'Event Celebration', startTime: 17, endTime: 18 },\n  ],\n  encode: {\n    x: 'name', // Map task name field to X-axis position\n    y: 'startTime', // Map task start time field to y position\n    y1: 'endTime', // Map task end time field to y1 axis position\n    color: 'name', // Map task name field to color\n    enterDuration: (datum) => datum.endTime - datum.startTime, // Map task end time minus start time to enter animation duration\n    enterDelay: 'startTime', // Map task start time to enter animation delay time\n  },\n  scale: { enterDuration: { zero: true, range: [0, 3000] } },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  axis: {\n    x: {\n      title: 'Task',\n    },\n    y: {\n      title: 'Time',\n    },\n  },\n});\n\nchart.render();\n",paraId:25,tocIndex:9},{value:"Encode",paraId:26,tocIndex:10},{value:" in G2 is mainly used to specify the relationship between visual element attributes and data. You can specify encoding at the Mark level:",paraId:26,tocIndex:10},{value:"({\n  type: 'interval',\n  encode: {\n    x: 'name',\n    y: 'value',\n  },\n});\n",paraId:27,tocIndex:10},{value:"// API\n// First method\nchart.interval().encode('x', 'name').encode('y', 'value');\n\n// Second method\nchart.interval().encode({ x: 'name', y: 'value' });\n",paraId:28,tocIndex:10},{value:"You can also specify encoding at the View level:",paraId:29,tocIndex:10},{value:"({\n  type: 'view',\n  encode: {\n    x: 'name',\n    y: 'value',\n  },\n});\n",paraId:30,tocIndex:10},{value:"// API\n// First method\nchart.encode('x', 'name').encode('y', 'value');\n\n// Second method\nchart.encode({ x: 'name', y: 'value' });\n",paraId:31,tocIndex:10},{value:"Channel encoding has transitivity. View encoding will be passed to marks specified by ",paraId:32,tocIndex:10},{value:"children",paraId:32,tocIndex:10},{value:". If the mark doesn't have encoding for the corresponding channel, it will be set; otherwise, nothing will be done. For example, drawing a point-line chart:",paraId:32,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .data([\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ])\n  .encode('x', 'year') // View-level encoding\n  .encode('y', 'value');\n\nchart.line();\n\nchart.point();\n\nchart.render();\n",paraId:33,tocIndex:10},{value:"A complete encoding consists of ",paraId:34,tocIndex:11},{value:"encode.type",paraId:34,tocIndex:11},{value:" and ",paraId:34,tocIndex:11},{value:"encode.value",paraId:34,tocIndex:11},{value:".",paraId:34,tocIndex:11},{value:"After encoding, an array will be generated under the specified channel according to the encoding method.",paraId:35,tocIndex:11},{value:"Encoding Method",paraId:36,tocIndex:11},{value:"type",paraId:36,tocIndex:11},{value:"value",paraId:36,tocIndex:11},{value:"Description",paraId:36,tocIndex:11},{value:"Field Encoding",paraId:36,tocIndex:11},{value:"field",paraId:36,tocIndex:11},{value:"string",paraId:36,tocIndex:11},{value:"Field name of a data column",paraId:36,tocIndex:11},{value:"Function Encoding",paraId:36,tocIndex:11},{value:"transform",paraId:36,tocIndex:11},{value:"(value, index, array) => number | string | boolean | Date",paraId:36,tocIndex:11},{value:"Specify channel binding through callback function",paraId:36,tocIndex:11},{value:"Constant Encoding",paraId:36,tocIndex:11},{value:"constant",paraId:36,tocIndex:11},{value:"any",paraId:36,tocIndex:11},{value:"Specify channel value as constant",paraId:36,tocIndex:11},{value:"Data Encoding",paraId:36,tocIndex:11},{value:"column",paraId:36,tocIndex:11},{value:"number[] | string[] | boolean[] | Date[]",paraId:36,tocIndex:11},{value:"Specify channel value as an array",paraId:36,tocIndex:11},{value:"G2 provides syntactic sugar, and in most cases ",paraId:37,tocIndex:11},{value:"encode.type",paraId:37,tocIndex:11},{value:" can be omitted.",paraId:37,tocIndex:11},{value:"({\n  type: 'point',\n  encode: {\n    x: { type: 'field', value: 'weight' },\n    y: { type: 'field', value: 'height' },\n    color: { type: 'field', value: 'gender' },\n  },\n});\n",paraId:38,tocIndex:11},{value:"You can also use syntactic sugar to simplify the writing:",paraId:39,tocIndex:11},{value:"// Syntactic sugar\n({\n  type: 'point',\n  encode: {\n    x: 'weight',\n    y: 'height',\n    color: 'gender',\n  },\n});\n",paraId:40,tocIndex:11},{value:"Specify channel binding to a certain column of data:",paraId:41,tocIndex:12},{value:"(data) => data.map((d) => d[value]);\n",paraId:42,tocIndex:12},{value:"({\n  type: 'interval',\n  encode: { x: { type: 'field', value: 'name' } },\n});\n",paraId:43,tocIndex:12},{value:"// Syntactic sugar\n({\n  type: 'interval',\n  encode: { x: 'name' },\n});\n",paraId:44,tocIndex:12},{value:"Specify channel binding to newly generated data:",paraId:45,tocIndex:13},{value:"(data) => data.map(value);\n",paraId:46,tocIndex:13},{value:"({\n  type: 'interval',\n  encode: {\n    color: {\n      type: 'transform',\n      value: (d) => (d.value > 100 ? 'high' : 'low'),\n    },\n  },\n});\n",paraId:47,tocIndex:13},{value:"// Syntactic sugar\n({\n  type: 'interval',\n  encode: {\n    color: (d) => (d.value > 100 ? 'high' : 'low'),\n  },\n});\n",paraId:48,tocIndex:13},{value:"You can also generate corresponding channel legends in multi-axis charts through function encoding.",paraId:49,tocIndex:13},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { time: '10:10', call: 4, waiting: 2, people: 2 },\n    { time: '10:15', call: 2, waiting: 6, people: 3 },\n    { time: '10:20', call: 13, waiting: 2, people: 5 },\n    { time: '10:25', call: 9, waiting: 9, people: 1 },\n    { time: '10:30', call: 5, waiting: 2, people: 3 },\n    { time: '10:35', call: 8, waiting: 2, people: 1 },\n    { time: '10:40', call: 13, waiting: 1, people: 2 },\n  ],\n  children: [\n    {\n      type: 'interval',\n      encode: {\n        x: 'time',\n        y: 'waiting',\n        color: () => 'waiting',\n        series: () => 'waiting',\n      },\n      scale: { y: { nice: true } },\n      axis: { y: { title: 'Waiting' } },\n    },\n    {\n      type: 'interval',\n      encode: {\n        x: 'time',\n        y: 'people',\n        color: () => 'people',\n        series: () => 'people',\n      },\n      scale: { y: { independent: true } },\n      axis: { y: { position: 'right', grid: null, title: 'People' } },\n    },\n    {\n      type: 'line',\n      encode: { x: 'time', y: 'call', color: () => 'call' },\n      scale: { series: { independent: true } },\n    },\n  ],\n});\n\nchart.render();\n",paraId:50,tocIndex:13},{value:"Function encoding can also disable certain channels in some cases. In G2, when the ",paraId:51,tocIndex:13},{value:"series",paraId:51,tocIndex:13},{value:" channel is not defined and the ",paraId:51,tocIndex:13},{value:"color",paraId:51,tocIndex:13},{value:" channel is already defined, a copy of values will be made to the ",paraId:51,tocIndex:13},{value:"series",paraId:51,tocIndex:13},{value:" channel to achieve categorization effects. In the following example, the ",paraId:51,tocIndex:13},{value:"color",paraId:51,tocIndex:13},{value:" channel is mapped to a continuous field. If the ",paraId:51,tocIndex:13},{value:"series",paraId:51,tocIndex:13},{value:" is also mapped to a continuous field, it will affect the display of gradient lines, so you need to disable it with ",paraId:51,tocIndex:13},{value:"series: () => undefined",paraId:51,tocIndex:13},{value:".",paraId:51,tocIndex:13},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/temperatures3.json',\n  },\n  encode: {\n    x: (d) => new Date(d.date),\n    y: ['low', 'high'],\n    color: (d) => d.high - d.low,\n    series: () => undefined,\n  },\n  scale: { color: { palette: 'reds' } },\n  style: { gradient: 'x' },\n  axis: { x: { title: 'date' } },\n});\n\nchart.render();\n",paraId:52,tocIndex:13},{value:"Specify channel value as a constant, often used to specify color channels or size channels, setting marks to a certain color or size. This encoding method will not generate legends for the corresponding channels.",paraId:53,tocIndex:14},{value:"(data) => data.map(() => value);\n",paraId:54,tocIndex:14},{value:"({\n  type: 'point',\n  encode: {\n    color: { type: 'constant', value: 'steelblue' },\n    size: { type: 'constant', value: 10 },\n  },\n});\n",paraId:55,tocIndex:14},{value:"// Syntactic sugar\n({\n  type: 'interval',\n  encode: {\n    color: 'steelblue',\n    size: 10,\n  },\n});\n",paraId:56,tocIndex:14},{value:"Specify the value of a certain channel as an array.",paraId:57,tocIndex:15},{value:"() => value;\n",paraId:58,tocIndex:15},{value:"({\n  type: 'line',\n  encode: {\n    x: { type: 'column', value: [0, 1, , 2, 3] },\n  },\n});\n",paraId:59,tocIndex:15},{value:"For some big data scenarios, using array columns would be more suitable. Here's a simple example.",paraId:60,tocIndex:15},{value:"import { Chart } from '@antv/g2';\n\nconst I = [0, 1, 2, 3, 4];\nconst X = I.map((i) => ((i - 2) * Math.PI) / 2);\nconst Y = X.map((x) => Math.sin(x));\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  data: I,\n  encode: {\n    x: {\n      type: 'column',\n      value: X,\n    },\n    y: {\n      type: 'column',\n      value: Y,\n    },\n    shape: 'smooth',\n  },\n});\n\nchart.render();\n",paraId:61,tocIndex:15},{value:"Of course, for position-related visual channels: such as x and y channels, often more than one column of data is needed. For example, in a waterfall chart, you can specify multiple columns for one channel through an array.",paraId:62,tocIndex:16},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { month: 'Jan.', profit: 387264, start: 0, end: 387264 },\n    { month: 'Feb.', profit: 772096, start: 387264, end: 1159360 },\n    { month: 'Mar.', profit: 638075, start: 1159360, end: 1797435 },\n    { month: 'Apr.', profit: -211386, start: 1797435, end: 1586049 },\n    { month: 'May', profit: -138135, start: 1586049, end: 1447914 },\n    { month: 'Jun', profit: -267238, start: 1447914, end: 1180676 },\n    { month: 'Jul.', profit: 431406, start: 1180676, end: 1612082 },\n    { month: 'Aug.', profit: 363018, start: 1612082, end: 1975100 },\n    { month: 'Sep.', profit: -224638, start: 1975100, end: 1750462 },\n    { month: 'Oct.', profit: -299867, start: 1750462, end: 1450595 },\n    { month: 'Nov.', profit: 607365, start: 1450595, end: 2057960 },\n    { month: 'Dec.', profit: 1106986, start: 2057960, end: 3164946 },\n    { month: 'Total', start: 0, end: 3164946 },\n  ],\n  encode: {\n    x: 'month',\n    y: ['end', 'start'], // Equivalent to y:'end', y1:'start'\n    color: (d) =>\n      d.month === 'Total' ? 'Total' : d.profit > 0 ? 'Increase' : 'Decrease',\n  },\n  axis: { y: { labelFormatter: '~s' } },\n});\n\nchart.render();\n",paraId:63,tocIndex:16},{value:"You can also specify them separately using the ",paraId:64,tocIndex:16},{value:"${channel}${index}",paraId:64,tocIndex:16},{value:" format:",paraId:64,tocIndex:16},{value:"// Equivalent to the above form\nchart.encode('y', 'end').encode('y1', 'start');\n",paraId:65,tocIndex:16}]},30633:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(96600);const t=[{value:"G2 exposes various events to capture chart lifecycle and interaction information. G2 exports a ",paraId:0},{value:"ChartEvent",paraId:0},{value:" type that defines the event types.",paraId:0},{value:"import { Chart, ChartEvent } from '@antv/g2';\n\nconst chart = new Chart({\n  container,\n  canvas,\n});\n\nchart.data([\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n]);\n\nchart\n  .interval()\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  .encode('color', 'genre')\n  .axis({ x: { animate: false }, y: { animate: false } });\n\nchart.on('interval:click', (e) => {\n  console.log(e.data.data); // Display clicked data\n});\n\nchart.on('element:click', (e) => {\n  console.log(e.data.data); // Display clicked data\n});\n\nchart.render();\n",paraId:1},{value:"To capture chart lifecycle information, you can use the following approach:",paraId:2,tocIndex:0},{value:"chart.on(ChartEvent.AFTER_RENDER, (ev) => {\n  console.log(ev);\n});\n",paraId:3,tocIndex:0},{value:"G2 currently provides the following lifecycle events:",paraId:4,tocIndex:0},{value:"Event Name",paraId:5,tocIndex:0},{value:"Description",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"BEFORE_RENDER",paraId:5,tocIndex:0},{value:"Before rendering",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"BEFORE_PAINT",paraId:5,tocIndex:0},{value:"Before painting",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"AFTER_PAINT",paraId:5,tocIndex:0},{value:"After painting",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"AFTER_RENDER",paraId:5,tocIndex:0},{value:"After rendering",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"BEFORE_CHANGE_DATA",paraId:5,tocIndex:0},{value:"Before data change",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"AFTER_CHANGE_DATA",paraId:5,tocIndex:0},{value:"After data change",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"BEFORE_CLEAR",paraId:5,tocIndex:0},{value:"Before clearing canvas",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"AFTER_CLEAR",paraId:5,tocIndex:0},{value:"After clearing canvas",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"BEFORE_DESTROY",paraId:5,tocIndex:0},{value:"Before destroying canvas",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"AFTER_DESTROY",paraId:5,tocIndex:0},{value:"After destroying canvas",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"BEFORE_CHANGE_SIZE",paraId:5,tocIndex:0},{value:"Before changing canvas size",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"AFTER_CHANGE_SIZE",paraId:5,tocIndex:0},{value:"After changing canvas size",paraId:5,tocIndex:0},{value:"Before rendering",paraId:6,tocIndex:0},{value:": When G2 starts processing data, performing layout, and drawing graphics.",paraId:6,tocIndex:0},{value:"Before painting",paraId:6,tocIndex:0},{value:": When data processing, layout, and graphics operations are complete but painting hasn't started.",paraId:6,tocIndex:0},{value:"After painting",paraId:6,tocIndex:0},{value:": When G2 completes all painting operations, but animations may still be running. The chart is fully rendered when animations finish.",paraId:6,tocIndex:0},{value:"After rendering",paraId:6,tocIndex:0},{value:": When G2 completes all painting operations, including animations.",paraId:6,tocIndex:0},{value:"After clearing canvas",paraId:6,tocIndex:0},{value:": The chart in the container has been cleared, but the G2 instance still exists and can be reused.",paraId:6,tocIndex:0},{value:"After destroying canvas",paraId:6,tocIndex:0},{value:": The G2 instance has been destroyed and cannot be used anymore.",paraId:6,tocIndex:0},{value:"To capture chart interaction information, you can use the following approaches:",paraId:7,tocIndex:1},{value:"Listen to global ",paraId:8,tocIndex:1},{value:"element",paraId:8,tocIndex:1},{value:" events",paraId:8,tocIndex:1},{value:"chart.on(`element:${ChartEvent.EventType}`, (ev) => {\n  console.log(ev);\n});\n",paraId:9,tocIndex:1},{value:"Listen to specific ",paraId:10,tocIndex:1},{value:"element",paraId:10,tocIndex:1},{value:" events",paraId:10,tocIndex:1},{value:"chart.on(`${markType}:${ChartEvent.EventType}`, (ev) => {\n  console.log(ev);\n});\n\n// For example, listen to click events on bars in a bar chart\nchart.on(`interval:${ChartEvent.CLICK}`, (ev) => {\n  console.log(ev);\n});\n",paraId:11,tocIndex:1},{value:"Listen to plot area events",paraId:12,tocIndex:1},{value:"chart.on('plot:click', (event) => console.log(event));\n",paraId:13,tocIndex:1},{value:"Listen to global component events",paraId:14,tocIndex:1},{value:"chart.on('component:click', (event) => console.log(event));\n",paraId:15,tocIndex:1},{value:"Listen to global label events",paraId:16,tocIndex:1},{value:"chart.on('label:click', (event) => console.log(event));\n",paraId:17,tocIndex:1},{value:"Event Name",paraId:18,tocIndex:2},{value:"Description",paraId:18,tocIndex:2},{value:"Callback Parameters",paraId:18,tocIndex:2},{value:"ChartEvent.",paraId:18,tocIndex:2},{value:"CLICK",paraId:18,tocIndex:2},{value:"Click",paraId:18,tocIndex:2},{value:"Event",paraId:18,tocIndex:2},{value:"ChartEvent.",paraId:18,tocIndex:2},{value:"DBLCLICK",paraId:18,tocIndex:2},{value:"Double click",paraId:18,tocIndex:2},{value:"Event",paraId:18,tocIndex:2},{value:"Event Name",paraId:19,tocIndex:3},{value:"Description",paraId:19,tocIndex:3},{value:"Callback Parameters",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_TAP",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_DOWN",paraId:19,tocIndex:3},{value:"When pointer is pressed down",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_UP",paraId:19,tocIndex:3},{value:"When pointer is released",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_OVER",paraId:19,tocIndex:3},{value:"When pointer enters the target element",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_OUT",paraId:19,tocIndex:3},{value:"When pointer leaves the target element",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_MOVE",paraId:19,tocIndex:3},{value:"When pointer coordinates change",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_ENTER",paraId:19,tocIndex:3},{value:"When pointer enters the target element or its descendants",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_LEAVE",paraId:19,tocIndex:3},{value:"When pointer leaves the target element or its descendants",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_UPOUTSIDE",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"To listen to drag events, you need to set the draggable and droppable properties:",paraId:20,tocIndex:4},{value:"chart.interval().style('draggable', true).style('droppable', true);\n",paraId:21,tocIndex:4},{value:"Event Name",paraId:22,tocIndex:4},{value:"Description",paraId:22,tocIndex:4},{value:"Callback Parameters",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DRAG_START",paraId:22,tocIndex:4},{value:"When dragging starts",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DRAG",paraId:22,tocIndex:4},{value:"During dragging",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DRAG_END",paraId:22,tocIndex:4},{value:"When dragging ends",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DRAG_ENTER",paraId:22,tocIndex:4},{value:"When element is dragged into the target element",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DRAG_LEAVE",paraId:22,tocIndex:4},{value:"When element is dragged away from the target element",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DRAG_OVER",paraId:22,tocIndex:4},{value:"When element is dragged and hovering over target element",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DROP",paraId:22,tocIndex:4},{value:"When element is dropped into the target element",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4},{value:"For detailed examples, see Interaction - Events ",paraId:23,tocIndex:5},{value:"Examples",paraId:24,tocIndex:5}]},48694:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(26963);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"brushAxisHighlight",paraId:0,tocIndex:0},{value:" interaction targets the coordinate axis, allowing users to brush select areas on axis to highlight corresponding chart elements. This interaction is particularly suitable for parallel coordinate charts, helping users quickly filter and analyze multi-dimensional data.",paraId:0,tocIndex:0},{value:"Trigger",paraId:1,tocIndex:0},{value:": Brush selection on the coordinate axis.",paraId:1,tocIndex:0},{value:"End",paraId:1,tocIndex:0},{value:": Click on non-brush areas of the axis or double-click on an existing brush area.",paraId:1,tocIndex:0},{value:"Affected States",paraId:1,tocIndex:0},{value:":\n",paraId:1,tocIndex:0},{value:"Elements within the brush range become ",paraId:2,tocIndex:0},{value:"active",paraId:2,tocIndex:0},{value:".",paraId:2,tocIndex:0},{value:"Elements outside the brush range become ",paraId:2,tocIndex:0},{value:"inactive",paraId:2,tocIndex:0},{value:".",paraId:2,tocIndex:0},{value:"Built-in interaction states:",paraId:3,tocIndex:0},{value:"({\n  // Define inactive state element opacity as 0.5\n  state: { inactive: { opacity: 0.5 } },\n});\n",paraId:4,tocIndex:0},{value:"There are two ways to configure the ",paraId:5,tocIndex:1},{value:"brushAxisHighlight",paraId:5,tocIndex:1},{value:" interaction:",paraId:5,tocIndex:1},{value:"First, pass a ",paraId:6,tocIndex:1},{value:"boolean",paraId:6,tocIndex:1},{value:" to enable or disable the interaction.",paraId:6,tocIndex:1},{value:"({\n  type: 'line',\n  interaction: { brushAxisHighlight: true }, // Use default configuration\n});\n",paraId:7,tocIndex:1},{value:"Second, pass ",paraId:8,tocIndex:1},{value:"configuration options",paraId:9,tocIndex:1},{value:" to customize the interaction.",paraId:8,tocIndex:1},{value:"({\n  type: 'line',\n  interaction: {\n    brushAxisHighlight: {\n      maskFill: 'red',\n      maskOpacity: 0.8,\n    },\n  },\n});\n",paraId:10,tocIndex:1},{value:"The interaction can be configured at the Mark level:",paraId:11,tocIndex:2},{value:"({\n  type: 'line',\n  interaction: { brushAxisHighlight: true },\n});\n",paraId:12,tocIndex:2},{value:"It can also be configured at the View level, where interactions declared on the view are passed to marks declared in ",paraId:13,tocIndex:2},{value:"children",paraId:13,tocIndex:2},{value:":",paraId:13,tocIndex:2},{value:"({\n  type: 'view',\n  interaction: { brushAxisHighlight: true },\n  children: [\n    {\n      type: 'line',\n      // Inherits parent interaction configuration\n    },\n  ],\n});\n",paraId:14,tocIndex:2},{value:"Property",paraId:15,tocIndex:3},{value:"Description",paraId:15,tocIndex:3},{value:"Type",paraId:15,tocIndex:3},{value:"Default Value",paraId:15,tocIndex:3},{value:"Required",paraId:15,tocIndex:3},{value:"reverse",paraId:15,tocIndex:3},{value:"Whether to reverse the brush; when reversed, elements outside the selection area will be highlighted",paraId:15,tocIndex:3},{value:"boolean",paraId:15,tocIndex:3},{value:"false",paraId:15,tocIndex:3},{value:"facet",paraId:15,tocIndex:3},{value:"Whether brush spans across facets, controlling interaction behavior",paraId:15,tocIndex:3},{value:"boolean",paraId:15,tocIndex:3},{value:"false",paraId:15,tocIndex:3},{value:"selectedHandles",paraId:15,tocIndex:3},{value:"Resizable handle directions",paraId:15,tocIndex:3},{value:"string[]",paraId:15,tocIndex:3},{value:"['handle-n','handle-e','handle-s','handle-w','handle-nw','handle-ne','handle-se','handle-sw']",paraId:15,tocIndex:3},{value:"brushRegion",paraId:15,tocIndex:3},{value:"Custom brush region, generally not configured, used internally by G2 for brushXHighlight and brushYHighlight",paraId:15,tocIndex:3},{value:"(x, y, x1, y1, extent) => any",paraId:15,tocIndex:3},{value:"(x, y, x1, y1) => [x, y, x1, y1]",paraId:15,tocIndex:3},{value:"mask",paraId:15,tocIndex:3},{value:"Style of the brush area mask",paraId:15,tocIndex:3},{value:"Object",paraId:15,tocIndex:3},{value:"See mask section below",paraId:15,tocIndex:3},{value:"maskHandle",paraId:15,tocIndex:3},{value:"Style of the brush area handles",paraId:15,tocIndex:3},{value:"Object",paraId:15,tocIndex:3},{value:"See maskHandle section below",paraId:15,tocIndex:3},{value:"Configure the style of the brush area mask.",paraId:16,tocIndex:4},{value:"Property",paraId:17,tocIndex:4},{value:"Description",paraId:17,tocIndex:4},{value:"Type",paraId:17,tocIndex:4},{value:"Default Value",paraId:17,tocIndex:4},{value:"Required",paraId:17,tocIndex:4},{value:"maskFill",paraId:17,tocIndex:4},{value:"Fill color of the mask",paraId:17,tocIndex:4},{value:"string",paraId:17,tocIndex:4},{value:"#777",paraId:17,tocIndex:4},{value:"maskFillOpacity",paraId:17,tocIndex:4},{value:"Fill opacity of the mask",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"0.3",paraId:17,tocIndex:4},{value:"maskStroke",paraId:17,tocIndex:4},{value:"Stroke of the mask",paraId:17,tocIndex:4},{value:"string",paraId:17,tocIndex:4},{value:"#fff",paraId:17,tocIndex:4},{value:"maskStrokeOpacity",paraId:17,tocIndex:4},{value:"Stroke opacity",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"maskLineWidth",paraId:17,tocIndex:4},{value:"Width of the mask stroke",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"maskLineDash",paraId:17,tocIndex:4},{value:"Dash configuration for stroke, first value is dash length, second is gap distance",paraId:17,tocIndex:4},{value:"[number,number]",paraId:17,tocIndex:4},{value:"maskOpacity",paraId:17,tocIndex:4},{value:"Overall opacity of the mask",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"maskShadowColor",paraId:17,tocIndex:4},{value:"Shadow color of the mask",paraId:17,tocIndex:4},{value:"string",paraId:17,tocIndex:4},{value:"maskShadowBlur",paraId:17,tocIndex:4},{value:"Gaussian blur coefficient for mask shadow",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"maskShadowOffsetX",paraId:17,tocIndex:4},{value:"Horizontal distance of shadow from mask",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"maskShadowOffsetY",paraId:17,tocIndex:4},{value:"Vertical distance of shadow from mask",paraId:17,tocIndex:4},{value:"number",paraId:17,tocIndex:4},{value:"maskCursor",paraId:17,tocIndex:4},{value:"Mouse cursor style. Same as CSS cursor styles",paraId:17,tocIndex:4},{value:"string",paraId:17,tocIndex:4},{value:"default",paraId:17,tocIndex:4},{value:"When configuring the brush area mask style, instead of using an object format, configure with ",paraId:18,tocIndex:4},{value:"mask",paraId:18,tocIndex:4},{value:" prefix plus property:",paraId:18,tocIndex:4},{value:"({\n  interaction: {\n    brushAxisHighlight: {\n      maskFill: '#000',\n      maskFillOpacity: 0.2,\n      maskStroke: 'red',\n      maskStrokeOpacity: 0.9,\n      maskLineWidth: 2,\n      maskLineDash: [4, 8],\n      maskOpacity: 0.2,\n      maskShadowColor: '#d3d3d3',\n      maskShadowBlur: 10,\n      maskShadowOffsetX: 10,\n      maskShadowOffsetY: 10,\n      maskCursor: 'pointer',\n    },\n  },\n});\n",paraId:19,tocIndex:4},{value:"The eight directional handles are named as follows (using compass directions). Set corresponding properties using the format ",paraId:20,tocIndex:5},{value:"mask[handleName][styleAttribute]",paraId:20,tocIndex:5},{value:", or set width with ",paraId:20,tocIndex:5},{value:"maskHandleSize",paraId:20,tocIndex:5},{value:".",paraId:20,tocIndex:5},{value:"Property",paraId:21,tocIndex:5},{value:"Description",paraId:21,tocIndex:5},{value:"Type",paraId:21,tocIndex:5},{value:"Default Value",paraId:21,tocIndex:5},{value:"Required",paraId:21,tocIndex:5},{value:"mask[handleName]Render",paraId:21,tocIndex:5},{value:"Custom render function for mask handles",paraId:21,tocIndex:5},{value:"(g, options, document) => DisplayObject",paraId:21,tocIndex:5},{value:"mask[handleName]Size",paraId:21,tocIndex:5},{value:"Width of mask handles",paraId:21,tocIndex:5},{value:"string",paraId:21,tocIndex:5},{value:"mask[handleName]Fill",paraId:21,tocIndex:5},{value:"Fill color of mask handles",paraId:21,tocIndex:5},{value:"string",paraId:21,tocIndex:5},{value:"mask[handleName]FillOpacity",paraId:21,tocIndex:5},{value:"Fill opacity of mask handles",paraId:21,tocIndex:5},{value:"number",paraId:21,tocIndex:5},{value:"mask[handleName]Stroke",paraId:21,tocIndex:5},{value:"Stroke of mask handles",paraId:21,tocIndex:5},{value:"string",paraId:21,tocIndex:5},{value:"mask[handleName]StrokeOpacity",paraId:21,tocIndex:5},{value:"Stroke opacity",paraId:21,tocIndex:5},{value:"number",paraId:21,tocIndex:5},{value:"mask[handleName]LineWidth",paraId:21,tocIndex:5},{value:"Width of mask handle stroke",paraId:21,tocIndex:5},{value:"number",paraId:21,tocIndex:5},{value:"mask[handleName]LineDash",paraId:21,tocIndex:5},{value:"Dash configuration for stroke, first value is dash length, second is gap distance",paraId:21,tocIndex:5},{value:"[number,number]",paraId:21,tocIndex:5},{value:"mask[handleName]Opacity",paraId:21,tocIndex:5},{value:"Overall opacity of mask handles",paraId:21,tocIndex:5},{value:"number",paraId:21,tocIndex:5},{value:"mask[handleName]ShadowColor",paraId:21,tocIndex:5},{value:"Shadow color of mask handles",paraId:21,tocIndex:5},{value:"string",paraId:21,tocIndex:5},{value:"mask[handleName]ShadowBlur",paraId:21,tocIndex:5},{value:"Gaussian blur coefficient for mask handle shadow",paraId:21,tocIndex:5},{value:"number",paraId:21,tocIndex:5},{value:"mask[handleName]ShadowOffsetX",paraId:21,tocIndex:5},{value:"Horizontal distance of shadow from mask handle",paraId:21,tocIndex:5},{value:"number",paraId:21,tocIndex:5},{value:"mask[handleName]ShadowOffsetY",paraId:21,tocIndex:5},{value:"Vertical distance of shadow from mask handle",paraId:21,tocIndex:5},{value:"number",paraId:21,tocIndex:5},{value:"mask[handleName]Cursor",paraId:21,tocIndex:5},{value:"Mouse cursor style. Same as CSS cursor styles",paraId:21,tocIndex:5},{value:"string",paraId:21,tocIndex:5},{value:"default",paraId:21,tocIndex:5},{value:"The following events are supported:",paraId:22,tocIndex:7},{value:"brushAxis:start",paraId:23,tocIndex:7},{value:" - Triggered when starting to create a brush",paraId:23,tocIndex:7},{value:"brushAxis:end",paraId:23,tocIndex:7},{value:" - Triggered when brush size and position update is completed",paraId:23,tocIndex:7},{value:"brushAxis:remove",paraId:23,tocIndex:7},{value:" - Triggered when brush is removed",paraId:23,tocIndex:7},{value:"brushAxis:highlight",paraId:23,tocIndex:7},{value:" - Triggered when brush changes size and position",paraId:23,tocIndex:7},{value:"chart.on('brushAxis:highlight', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('brushAxis:highlight', data);\n});\n\nchart.on('brushAxis:remove', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('brushAxis:remove', data);\n});\n",paraId:24,tocIndex:7},{value:"The following events are supported:",paraId:25,tocIndex:8},{value:"brushAxis:highlight",paraId:26,tocIndex:8},{value:" - Highlight data",paraId:26,tocIndex:8},{value:"brushAxis:remove",paraId:26,tocIndex:8},{value:" - Remove brush",paraId:26,tocIndex:8},{value:"chart.emit('brushAxis:highlight', {\n  data: { selection: [[20, 30], undefined, [100, 300]] },\n});\n\nchart.emit('brushAxis:remove', {});\n",paraId:27,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst axis = {\n  zIndex: 1,\n  titlePosition: 'right',\n  line: true,\n  style: {\n    labelStroke: '#fff',\n    labelStrokeWidth: 5,\n    labelFontSize: 10,\n    labelStrokeLineJoin: 'round',\n    titleStroke: '#fff',\n    titleFontSize: 10,\n    titleStrokeWidth: 5,\n    titleStrokeLineJoin: 'round',\n    titleTransform: 'translate(-50%, 0) rotate(-90)',\n    lineStroke: 'black',\n    tickStroke: 'black',\n    lineStrokeWidth: 1,\n  },\n};\n\nchart.options({\n  type: 'line',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/cars3.json',\n  },\n  coordinate: { type: 'parallel' },\n  encode: {\n    position: [\n      'economy (mpg)',\n      'cylinders',\n      'displacement (cc)',\n      'power (hp)',\n      'weight (lb)',\n      '0-60 mph (s)',\n      'year',\n    ],\n    color: 'weight (lb)',\n  },\n  style: {\n    lineWidth: 1.5,\n    strokeOpacity: 0.4,\n  },\n  scale: {\n    color: {\n      type: 'sequential',\n      palette: 'brBG',\n      offset: (t) => 1 - t,\n    },\n  },\n  legend: {\n    color: {\n      length: 400,\n      layout: { justifyContent: 'center' },\n    },\n  },\n  state: {\n    active: { lineWidth: 5 },\n    inactive: { stroke: '#eee', opacity: 0.5 },\n  },\n  axis: Object.fromEntries(\n    Array.from({ length: 7 }, (_, i) => [\n      `position${i === 0 ? '' : i}`,\n      {\n        ...axis,\n        title: true,\n      },\n    ]),\n  ),\n  interaction: {\n    brushAxisHighlight: {\n      maskFill: '#000',\n      maskFillOpacity: 0.2,\n      maskStroke: '#1890ff',\n      maskLineWidth: 1,\n    },\n    tooltip: false,\n  },\n});\n\nchart.render();\n",paraId:28,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  data: [\n    { x: 10, y: 5, category: 'A' },\n    { x: 15, y: 8, category: 'A' },\n    { x: 20, y: 12, category: 'A' },\n    { x: 25, y: 15, category: 'A' },\n    { x: 30, y: 10, category: 'B' },\n    { x: 35, y: 7, category: 'B' },\n    { x: 40, y: 13, category: 'B' },\n    { x: 45, y: 18, category: 'B' },\n    { x: 50, y: 20, category: 'C' },\n    { x: 55, y: 16, category: 'C' },\n    { x: 60, y: 9, category: 'C' },\n    { x: 65, y: 6, category: 'C' },\n  ],\n  encode: {\n    color: 'category',\n    x: 'x',\n    y: 'y',\n  },\n  state: {\n    inactive: { stroke: 'gray', opacity: 0.5 },\n  },\n  interaction: {\n    brushAxisHighlight: {\n      maskHandleSize: 20,\n      maskHandleNFill: 'blue',\n      maskHandleEFill: 'red',\n      maskHandleSFill: 'green',\n      maskHandleWFill: 'yellow',\n      maskHandleNWFill: 'black',\n      maskHandleNEFill: 'steelblue',\n      maskHandleSEFill: 'pink',\n      maskHandleSWFill: 'orange',\n    },\n  },\n});\n\nchart.render();\n",paraId:29,tocIndex:11}]},44425:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(52633);const t=[{value:"brushFilter",paraId:0,tocIndex:0},{value:" interaction is primarily used to implement dynamic range filtering functionality for chart elements. Through mouse brush selection operations, users can define specific areas on the chart (based on x/y coordinate systems), and G2 will re-render chart elements within that area that meet the filtering conditions.",paraId:0,tocIndex:0},{value:"Typical application scenarios:",paraId:1,tocIndex:0},{value:"Data exploration: Quickly focus on specific data intervals for in-depth analysis",paraId:2,tocIndex:0},{value:"Anomaly detection: Locate anomalous scattered data points",paraId:3,tocIndex:0},{value:"Comparative analysis: Horizontal/vertical comparison of data characteristics across different intervals",paraId:4,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  },\n  encode: { x: 'height', y: 'weight', color: 'gender' },\n  state: { inactive: { stroke: 'gray' } },\n  interaction: { brushFilter: true },\n});\n\nchart.render();\n",paraId:5,tocIndex:0},{value:"There are two ways to configure ",paraId:6,tocIndex:1},{value:"brushFilter",paraId:6,tocIndex:1},{value:" interaction:",paraId:6,tocIndex:1},{value:"Enable interaction with a boolean value using default configuration:",paraId:7,tocIndex:2},{value:"({\n  type: 'interval',\n  interaction: { brushFilter: true }, // Enable brush filter with default configuration\n});\n",paraId:8,tocIndex:2},{value:"Fine-tune interaction behavior through ",paraId:9,tocIndex:3},{value:"configuration options",paraId:10,tocIndex:3},{value:":",paraId:9,tocIndex:3},{value:"({\n  type: 'interval',\n  interaction: {\n    brushFilter: {\n      reverse: false, // Disable reverse selection\n      maskFill: '#rgba(0,0,0,0.3)', // Custom mask color\n    },\n  },\n});\n",paraId:11,tocIndex:3},{value:"Interaction can be configured at the Mark level:",paraId:12,tocIndex:4},{value:"({\n  type: 'interval',\n  interaction: { brushFilter: true },\n});\n",paraId:13,tocIndex:4},{value:"It can also be configured at the View level. Interactions declared on the view will be passed to marks declared in ",paraId:14,tocIndex:4},{value:"children",paraId:14,tocIndex:4},{value:". If the mark has declared the corresponding interaction, they will be merged; otherwise, it won't be affected.",paraId:14,tocIndex:4},{value:"({\n  type: 'view',\n  interaction: { brushFilter: true },\n});\n",paraId:15,tocIndex:4},{value:"Property",paraId:16,tocIndex:5},{value:"Description",paraId:16,tocIndex:5},{value:"Type",paraId:16,tocIndex:5},{value:"Default",paraId:16,tocIndex:5},{value:"Required",paraId:16,tocIndex:5},{value:"reverse",paraId:16,tocIndex:5},{value:"Whether to reverse brush",paraId:16,tocIndex:5},{value:"boolean",paraId:16,tocIndex:5},{value:"false",paraId:16,tocIndex:5},{value:"mask",paraId:16,tocIndex:5},{value:"Style of brush area mask",paraId:16,tocIndex:5},{value:"mask",paraId:17,tocIndex:5},{value:"See ",paraId:16,tocIndex:5},{value:"mask",paraId:18,tocIndex:5},{value:"Configure the style of the brush area mask.",paraId:19,tocIndex:6},{value:"Property",paraId:20,tocIndex:6},{value:"Description",paraId:20,tocIndex:6},{value:"Type",paraId:20,tocIndex:6},{value:"Default",paraId:20,tocIndex:6},{value:"Required",paraId:20,tocIndex:6},{value:"maskFill",paraId:20,tocIndex:6},{value:"Mask fill color",paraId:20,tocIndex:6},{value:"string",paraId:20,tocIndex:6},{value:"#777",paraId:20,tocIndex:6},{value:"maskFillOpacity",paraId:20,tocIndex:6},{value:"Mask fill opacity",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"0.3",paraId:20,tocIndex:6},{value:"maskStroke",paraId:20,tocIndex:6},{value:"Mask stroke",paraId:20,tocIndex:6},{value:"string",paraId:20,tocIndex:6},{value:"#fff",paraId:20,tocIndex:6},{value:"maskStrokeOpacity",paraId:20,tocIndex:6},{value:"Stroke opacity",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskLineWidth",paraId:20,tocIndex:6},{value:"Mask stroke width",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskLineDash",paraId:20,tocIndex:6},{value:"Stroke dash configuration. First value is dash length, second is gap length. Setting lineDash to [0,0] means no stroke.",paraId:20,tocIndex:6},{value:"[number,number]",paraId:20,tocIndex:6},{value:"maskOpacity",paraId:20,tocIndex:6},{value:"Mask overall opacity",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskShadowColor",paraId:20,tocIndex:6},{value:"Mask shadow color",paraId:20,tocIndex:6},{value:"string",paraId:20,tocIndex:6},{value:"maskShadowBlur",paraId:20,tocIndex:6},{value:"Mask shadow Gaussian blur coefficient",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskShadowOffsetX",paraId:20,tocIndex:6},{value:"Set horizontal distance of shadow from mask",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskShadowOffsetY",paraId:20,tocIndex:6},{value:"Set vertical distance of shadow from mask",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskCursor",paraId:20,tocIndex:6},{value:"Mouse cursor style. Same as CSS cursor style",paraId:20,tocIndex:6},{value:"string",paraId:20,tocIndex:6},{value:"default",paraId:20,tocIndex:6},{value:"When configuring the mask style of the brush area, it's not configured as an object, but using the ",paraId:21,tocIndex:6},{value:"mask",paraId:21,tocIndex:6},{value:" prefix with property names.",paraId:21,tocIndex:6},{value:"Style configuration example:",paraId:22,tocIndex:6},{value:"({\n  interaction: {\n    brushFilter: {\n      maskFill: '#000',\n      maskFillOpacity: 0.2,\n      maskStroke: 'red',\n      maskStrokeOpacity: 0.9,\n      maskLineWidth: 2,\n      maskLineDash: [4, 8],\n      maskOpacity: 0.2,\n      maskShadowColor: '#d3d3d3',\n      maskShadowBlur: 10,\n      maskShadowOffsetX: 10,\n      maskShadowOffsetY: 10,\n      maskCursor: 'pointer',\n    },\n  },\n});\n",paraId:23,tocIndex:6},{value:"Listen to brush filter actions:",paraId:24,tocIndex:8},{value:"chart.on('brush:filter', (event) => {\n  const {\n    data, // Filtered data collection\n    nativeEvent, // Original DOM event\n  } = event;\n  console.log('Current selected range:', data.selection);\n});\n",paraId:25,tocIndex:8},{value:"Trigger filtering programmatically:",paraId:26,tocIndex:9},{value:"// Set x-axis range [50,100], y-axis range [20,80]\nchart.emit('brush:filter', {\n  data: {\n    selection: [\n      [50, 100],\n      [20, 80],\n    ],\n  },\n});\n",paraId:27,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { letter: 'A', frequency: 0.08167 },\n  { letter: 'B', frequency: 0.01492 },\n  { letter: 'C', frequency: 0.02782 },\n  { letter: 'D', frequency: 0.04253 },\n  { letter: 'E', frequency: 0.12702 },\n  { letter: 'F', frequency: 0.02288 },\n  { letter: 'G', frequency: 0.02015 },\n  { letter: 'H', frequency: 0.06094 },\n  { letter: 'I', frequency: 0.06966 },\n  { letter: 'J', frequency: 0.00153 },\n  { letter: 'K', frequency: 0.00772 },\n  { letter: 'L', frequency: 0.04025 },\n  { letter: 'M', frequency: 0.02406 },\n  { letter: 'N', frequency: 0.06749 },\n  { letter: 'O', frequency: 0.07507 },\n  { letter: 'P', frequency: 0.01929 },\n  { letter: 'Q', frequency: 0.00095 },\n  { letter: 'R', frequency: 0.05987 },\n  { letter: 'S', frequency: 0.06327 },\n  { letter: 'T', frequency: 0.09056 },\n  { letter: 'U', frequency: 0.02758 },\n  { letter: 'V', frequency: 0.00978 },\n  { letter: 'W', frequency: 0.0236 },\n  { letter: 'X', frequency: 0.0015 },\n  { letter: 'Y', frequency: 0.01974 },\n  { letter: 'Z', frequency: 0.00074 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  autoFit: true,\n  interaction: {\n    brushFilter: {\n      maskFill: '#000',\n      maskFillOpacity: 0.2,\n      maskStroke: 'red',\n      maskStrokeOpacity: 0.9,\n      maskLineWidth: 2,\n      maskLineDash: [4, 8],\n      maskOpacity: 0.2,\n      maskShadowColor: '#d3d3d3',\n      maskShadowBlur: 10,\n      maskShadowOffsetX: 10,\n      maskShadowOffsetY: 10,\n      maskCursor: 'pointer',\n    },\n  },\n});\n\nchart.interval().data(data).encode('x', 'letter').encode('y', 'frequency');\n\nchart.render();\n",paraId:28,tocIndex:10}]},40069:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(31990);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"brushHighlight",paraId:0,tocIndex:0},{value:" interaction targets chart elements. It highlights elements within the selected brush area and supports dragging and resizing the brush selection.",paraId:0,tocIndex:0},{value:"Trigger: Brush selection of elements.",paraId:1,tocIndex:0},{value:"End: Click on chart area.",paraId:2,tocIndex:0},{value:"Affected states:",paraId:3,tocIndex:0},{value:"Elements within the brush range change to ",paraId:4,tocIndex:0},{value:"active",paraId:4,tocIndex:0},{value:" state.",paraId:4,tocIndex:0},{value:"Elements outside the brush range change to ",paraId:5,tocIndex:0},{value:"inactive",paraId:5,tocIndex:0},{value:" state.",paraId:5,tocIndex:0},{value:"Built-in interaction states:",paraId:6,tocIndex:0},{value:"({\n  // Define inactive state element opacity as 0.5\n  state: { inactive: { opacity: 0.5 } },\n});\n",paraId:7,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  },\n  encode: { x: 'height', y: 'weight', color: 'gender' },\n  state: { inactive: { stroke: 'gray' } },\n  interaction: { brushHighlight: true },\n});\n\nchart.render();\n",paraId:8,tocIndex:0},{value:"There are two ways to configure the ",paraId:9,tocIndex:1},{value:"brushHighlight",paraId:9,tocIndex:1},{value:" interaction:",paraId:9,tocIndex:1},{value:"First, pass a ",paraId:10,tocIndex:1},{value:"boolean",paraId:10,tocIndex:1},{value:" to set whether to enable the interaction.",paraId:10,tocIndex:1},{value:"({\n  type: 'interval',\n  interaction: { brushHighlight: true }, // Use default configuration\n});\n",paraId:11,tocIndex:1},{value:"Second, pass ",paraId:12,tocIndex:1},{value:"configuration options",paraId:13,tocIndex:1},{value:" to configure the interaction.",paraId:12,tocIndex:1},{value:"({\n  type: 'line',\n  interaction: {\n    brushHighlight: {\n      series: true,\n    },\n  },\n});\n",paraId:14,tocIndex:1},{value:"Interaction can be configured at the Mark level:",paraId:15,tocIndex:2},{value:"({\n  type: 'interval',\n  interaction: { brushHighlight: true },\n});\n",paraId:16,tocIndex:2},{value:"It can also be configured at the View level. Interactions declared on the view will be passed to marks declared in ",paraId:17,tocIndex:2},{value:"children",paraId:17,tocIndex:2},{value:". If the mark has declared the corresponding interaction, they will be merged; otherwise, it won't be affected.",paraId:17,tocIndex:2},{value:"({\n  type: 'view',\n  interaction: { brushHighlight: true },\n});\n",paraId:18,tocIndex:2},{value:"Property",paraId:19,tocIndex:3},{value:"Description",paraId:19,tocIndex:3},{value:"Type",paraId:19,tocIndex:3},{value:"Default",paraId:19,tocIndex:3},{value:"Required",paraId:19,tocIndex:3},{value:"reverse",paraId:19,tocIndex:3},{value:"Whether to reverse the brush",paraId:19,tocIndex:3},{value:"boolean",paraId:19,tocIndex:3},{value:"false",paraId:19,tocIndex:3},{value:"series",paraId:19,tocIndex:3},{value:"Whether brush affects series elements, controls the highlighting mode of selected elements",paraId:19,tocIndex:3},{value:"boolean",paraId:19,tocIndex:3},{value:"false",paraId:19,tocIndex:3},{value:"facet",paraId:19,tocIndex:3},{value:"Whether brush spans across facets, controls interaction behavior",paraId:19,tocIndex:3},{value:"boolean",paraId:19,tocIndex:3},{value:"false",paraId:19,tocIndex:3},{value:"selectedHandles",paraId:19,tocIndex:3},{value:"Directions of handles that can be resized",paraId:19,tocIndex:3},{value:"string[]",paraId:19,tocIndex:3},{value:"['handle-n','handle-e','handle-s','handle-w','handle-nw','handle-ne','handle-se','handle-sw']",paraId:19,tocIndex:3},{value:"brushRegion",paraId:19,tocIndex:3},{value:"Custom brush region, usually not configured, used internally by G2 for brushXHighlight and brushYHighlight",paraId:19,tocIndex:3},{value:"(x, y, x1, y1, extent) => any",paraId:19,tocIndex:3},{value:"(x, y, x1, y1) => [x, y, x1, y1]",paraId:19,tocIndex:3},{value:"mask",paraId:19,tocIndex:3},{value:"Mask style for brush area",paraId:19,tocIndex:3},{value:"mask",paraId:20,tocIndex:3},{value:"See ",paraId:19,tocIndex:3},{value:"mask",paraId:21,tocIndex:3},{value:"maskHandle",paraId:19,tocIndex:3},{value:"Handle style for brush area",paraId:19,tocIndex:3},{value:"maskHandle",paraId:22,tocIndex:3},{value:"See ",paraId:19,tocIndex:3},{value:"maskHandle",paraId:23,tocIndex:3},{value:"The ",paraId:24,tocIndex:4},{value:"series",paraId:24,tocIndex:4},{value:" parameter is a key switch that controls the brush highlight mode, determining how to provide visual feedback for graphic elements. When configured as ",paraId:24,tocIndex:4},{value:"series: false",paraId:24,tocIndex:4},{value:", it's more suitable for scatter plots, bar charts and other discrete elements, directly modifying element states (for continuous graphics like line charts, it changes the state of the entire line); when configured as ",paraId:24,tocIndex:4},{value:"series: true",paraId:24,tocIndex:4},{value:", continuous graphics like line charts and area charts will highlight local paths. Please enable or disable as needed.",paraId:24,tocIndex:4},{value:"series: false",paraId:25,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nconst config = {\n  type: 'line',\n  interaction: { brushHighlight: { series: false } },\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: { x: { range: [0, 1] }, y: { domainMin: 0, nice: true } },\n  state: { active: { stroke: 'red' } },\n  labels: [{ text: 'value', style: { dx: -10, dy: -12 } }],\n};\nchart.options(config);\n\nchart.render();\n",paraId:26,tocIndex:4},{value:"series: true",paraId:27,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nconst config = {\n  type: 'line',\n  interaction: { brushHighlight: { series: true } },\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: { x: { range: [0, 1] }, y: { domainMin: 0, nice: true } },\n  state: { active: { stroke: 'red' } },\n  labels: [{ text: 'value', style: { dx: -10, dy: -12 } }],\n};\nchart.options(config);\n\nchart.render();\n",paraId:28,tocIndex:4},{value:"Configure the style of the brush area mask.",paraId:29,tocIndex:5},{value:"Property",paraId:30,tocIndex:5},{value:"Description",paraId:30,tocIndex:5},{value:"Type",paraId:30,tocIndex:5},{value:"Default",paraId:30,tocIndex:5},{value:"Required",paraId:30,tocIndex:5},{value:"maskFill",paraId:30,tocIndex:5},{value:"Mask fill color",paraId:30,tocIndex:5},{value:"string",paraId:30,tocIndex:5},{value:"#777",paraId:30,tocIndex:5},{value:"maskFillOpacity",paraId:30,tocIndex:5},{value:"Mask fill opacity",paraId:30,tocIndex:5},{value:"number",paraId:30,tocIndex:5},{value:"0.3",paraId:30,tocIndex:5},{value:"maskStroke",paraId:30,tocIndex:5},{value:"Mask stroke",paraId:30,tocIndex:5},{value:"string",paraId:30,tocIndex:5},{value:"#fff",paraId:30,tocIndex:5},{value:"maskStrokeOpacity",paraId:30,tocIndex:5},{value:"Stroke opacity",paraId:30,tocIndex:5},{value:"number",paraId:30,tocIndex:5},{value:"maskLineWidth",paraId:30,tocIndex:5},{value:"Mask stroke width",paraId:30,tocIndex:5},{value:"number",paraId:30,tocIndex:5},{value:"maskLineDash",paraId:30,tocIndex:5},{value:"Stroke dash configuration. First value is dash length, second is gap length. Setting to [0,0] means no stroke.",paraId:30,tocIndex:5},{value:"[number,number]",paraId:30,tocIndex:5},{value:"maskOpacity",paraId:30,tocIndex:5},{value:"Mask overall opacity",paraId:30,tocIndex:5},{value:"number",paraId:30,tocIndex:5},{value:"maskShadowColor",paraId:30,tocIndex:5},{value:"Mask shadow color",paraId:30,tocIndex:5},{value:"string",paraId:30,tocIndex:5},{value:"maskShadowBlur",paraId:30,tocIndex:5},{value:"Mask shadow Gaussian blur coefficient",paraId:30,tocIndex:5},{value:"number",paraId:30,tocIndex:5},{value:"maskShadowOffsetX",paraId:30,tocIndex:5},{value:"Set horizontal distance of shadow from mask",paraId:30,tocIndex:5},{value:"number",paraId:30,tocIndex:5},{value:"maskShadowOffsetY",paraId:30,tocIndex:5},{value:"Set vertical distance of shadow from mask",paraId:30,tocIndex:5},{value:"number",paraId:30,tocIndex:5},{value:"maskCursor",paraId:30,tocIndex:5},{value:"Mouse cursor style. Same as CSS cursor style",paraId:30,tocIndex:5},{value:"string",paraId:30,tocIndex:5},{value:"default",paraId:30,tocIndex:5},{value:"When configuring brush area mask style, it's not configured as an object, but using the ",paraId:31,tocIndex:5},{value:"mask",paraId:31,tocIndex:5},{value:" prefix with property names.",paraId:31,tocIndex:5},{value:"({\n  interaction: {\n    brushHighlight: {\n      maskFill: '#000',\n      maskFillOpacity: 0.2,\n      maskStroke: 'red',\n      maskStrokeOpacity: 0.9,\n      maskLineWidth: 2,\n      maskLineDash: [4, 8],\n      maskOpacity: 0.2,\n      maskShadowColor: '#d3d3d3',\n      maskShadowBlur: 10,\n      maskShadowOffsetX: 10,\n      maskShadowOffsetY: 10,\n      maskCursor: 'pointer',\n    },\n  },\n});\n",paraId:32,tocIndex:5},{value:"The names of handles in eight directions are as follows (named according to north, south, east, west). Set corresponding properties in the format ",paraId:33,tocIndex:6},{value:"mask[handleName][styleAttribute]",paraId:33,tocIndex:6},{value:", or set width through ",paraId:33,tocIndex:6},{value:"maskHandleSize",paraId:33,tocIndex:6},{value:".",paraId:33,tocIndex:6},{value:"Property",paraId:34,tocIndex:6},{value:"Description",paraId:34,tocIndex:6},{value:"Type",paraId:34,tocIndex:6},{value:"Default",paraId:34,tocIndex:6},{value:"Required",paraId:34,tocIndex:6},{value:"mask[handleName]Render",paraId:34,tocIndex:6},{value:"Custom mask handle rendering function",paraId:34,tocIndex:6},{value:"(g, options, document) => DisplayObject",paraId:34,tocIndex:6},{value:"mask[handleName]Size",paraId:34,tocIndex:6},{value:"Mask handle width",paraId:34,tocIndex:6},{value:"string",paraId:34,tocIndex:6},{value:"mask[handleName]Fill",paraId:34,tocIndex:6},{value:"Mask handle fill color",paraId:34,tocIndex:6},{value:"string",paraId:34,tocIndex:6},{value:"mask[handleName]FillOpacity",paraId:34,tocIndex:6},{value:"Mask handle fill opacity",paraId:34,tocIndex:6},{value:"number",paraId:34,tocIndex:6},{value:"mask[handleName]Stroke",paraId:34,tocIndex:6},{value:"Mask handle stroke",paraId:34,tocIndex:6},{value:"string",paraId:34,tocIndex:6},{value:"mask[handleName]StrokeOpacity",paraId:34,tocIndex:6},{value:"Stroke opacity",paraId:34,tocIndex:6},{value:"number",paraId:34,tocIndex:6},{value:"mask[handleName]LineWidth",paraId:34,tocIndex:6},{value:"Mask handle stroke width",paraId:34,tocIndex:6},{value:"number",paraId:34,tocIndex:6},{value:"mask[handleName]LineDash",paraId:34,tocIndex:6},{value:"Stroke dash configuration. First value is dash length, second is gap length. Setting to [0,0] means no stroke.",paraId:34,tocIndex:6},{value:"[number,number]",paraId:34,tocIndex:6},{value:"mask[handleName]Opacity",paraId:34,tocIndex:6},{value:"Mask handle overall opacity",paraId:34,tocIndex:6},{value:"number",paraId:34,tocIndex:6},{value:"mask[handleName]ShadowColor",paraId:34,tocIndex:6},{value:"Mask handle shadow color",paraId:34,tocIndex:6},{value:"string",paraId:34,tocIndex:6},{value:"mask[handleName]ShadowBlur",paraId:34,tocIndex:6},{value:"Mask handle shadow Gaussian blur coefficient",paraId:34,tocIndex:6},{value:"number",paraId:34,tocIndex:6},{value:"mask[handleName]ShadowOffsetX",paraId:34,tocIndex:6},{value:"Set horizontal distance of shadow from mask handle",paraId:34,tocIndex:6},{value:"number",paraId:34,tocIndex:6},{value:"mask[handleName]ShadowOffsetY",paraId:34,tocIndex:6},{value:"Set vertical distance of shadow from mask handle",paraId:34,tocIndex:6},{value:"number",paraId:34,tocIndex:6},{value:"mask[handleName]Cursor",paraId:34,tocIndex:6},{value:"Mouse cursor style. Same as CSS cursor style",paraId:34,tocIndex:6},{value:"string",paraId:34,tocIndex:6},{value:"default",paraId:34,tocIndex:6},{value:"chart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'data/penguins.csv',\n  },\n  encode: {\n    color: 'species',\n    x: 'culmen_length_mm',\n    y: 'culmen_depth_mm',\n  },\n  state: {\n    inactive: { stroke: 'gray', opacity: 0.5 },\n  },\n  interaction: {\n    brushHighlight: {\n      maskHandleNFill: 'blue',\n      maskHandleEFill: 'red',\n      maskHandleSFill: 'green',\n      maskHandleWFill: 'yellow',\n      maskHandleNWFill: 'black',\n      maskHandleNEFill: 'steelblue',\n      maskHandleSEFill: 'pink',\n      maskHandleSWFill: 'orange',\n    },\n  },\n});\n",paraId:35,tocIndex:6},{value:"The following events are supported:",paraId:36,tocIndex:8},{value:"brush:start",paraId:37,tocIndex:8},{value:" - Triggered when starting to create brush",paraId:37,tocIndex:8},{value:"brush:end",paraId:37,tocIndex:8},{value:" - Triggered when brush size and position update is complete",paraId:37,tocIndex:8},{value:"brush:remove",paraId:37,tocIndex:8},{value:" - Triggered when brush is removed",paraId:37,tocIndex:8},{value:"brush:highlight",paraId:37,tocIndex:8},{value:" - Triggered when brush changes size and position",paraId:37,tocIndex:8},{value:"chart.on('brush:highlight', (e) => {\n  console.log(e.data.selection);\n  console.log(e.nativeEvent);\n});\n",paraId:38,tocIndex:8},{value:"The following events are supported:",paraId:39,tocIndex:9},{value:"brush:highlight",paraId:40,tocIndex:9},{value:" - Highlight data",paraId:40,tocIndex:9},{value:"brush:remove",paraId:40,tocIndex:9},{value:" - Remove brush",paraId:40,tocIndex:9},{value:"chart.emit('brush:remove');\nchart.emit('brush:highlight', { data: { selection } });\n",paraId:41,tocIndex:9},{value:"You can specify the handle rendering function through ",paraId:42,tocIndex:11},{value:"mask[handleName]Render",paraId:42,tocIndex:11},{value:" to render custom handles. The function signature is as follows:",paraId:42,tocIndex:11},{value:"function render(\n  g, // Mount container\n  options, // Style properties, set through mask[handleName][styleAttribute]\n  document, // Canvas document, used to create sub-graphics\n) {\n  // Need to return the created graphic\n}\n",paraId:43,tocIndex:11},{value:"Here's an example of creating a path handle:",paraId:44,tocIndex:11},{value:"function renderPath(group, options, document) {\n  // Creation logic\n  // If it's the first render, create and mount the graphic\n  if (!group.handle) {\n    // Create graphics through document.createElement\n    const path = document.createElement('path');\n    group.handle = path;\n    group.appendChild(group.handle);\n  }\n\n  // Update logic\n  const { handle } = group;\n  const { width, height, ...rest } = options;\n  if (width === undefined || height === undefined) return handle;\n  handle.attr(rest);\n\n  // Return corresponding value\n  return handle;\n}\n",paraId:45,tocIndex:11},{value:"function createPathRender(path) {\n  return (group, options, document) => {\n    if (!group.handle) {\n      const path = document.createElement('path');\n      group.handle = path;\n      group.appendChild(group.handle);\n    }\n    const { handle } = group;\n    const { x, y, width, height, ...rest } = options;\n    if (width === undefined || height === undefined) return handle;\n    handle.style.d = path(x, y, width, height);\n    handle.attr(rest);\n    return handle;\n  };\n}\n\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'data/penguins.csv',\n  },\n  encode: {\n    color: 'species',\n    x: 'culmen_length_mm',\n    y: 'culmen_depth_mm',\n  },\n  state: {\n    inactive: { stroke: 'gray', opacity: 0.5 },\n  },\n  interaction: {\n    brushHighlight: {\n      maskHandleSize: 30,\n      maskHandleNRender: createPathRender((x, y, width, height) => {\n        return `M${x},${y + height / 2}L${x + width / 2},${y - height / 2}L${\n          x + width\n        },${y + height / 2},Z`;\n      }),\n      maskHandleERender: createPathRender(\n        (x, y, width, height) =>\n          `M${x + width / 2},${y}L${x + (width * 3) / 2},${y + height / 2}L${\n            x + width / 2\n          },${y + height},Z`,\n      ),\n      maskHandleSRender: createPathRender(\n        (x, y, width, height) =>\n          `M${x},${y + height / 2}L${x + width / 2},${y + (height / 2) * 3}L${\n            x + width\n          },${y + height / 2},Z`,\n      ),\n      maskHandleWRender: createPathRender(\n        (x, y, width, height) =>\n          `M${x + width / 2},${y}L${x - width},${y + height / 2}L${\n            x + width / 2\n          },${y + height},Z`,\n      ),\n      maskHandleNWRender: createPathRender(\n        (x, y, width, height) =>\n          `M${x},${y}L${x + width},${y + height / 2}L${x + width / 2},${\n            y + height\n          },Z`,\n      ),\n      maskHandleNERender: createPathRender(\n        (x, y, width, height) =>\n          `M${x},${y + height / 2}L${x + width},${y}L${x + width / 2},${\n            y + height\n          },Z`,\n      ),\n      maskHandleSERender: createPathRender(\n        (x, y, width, height) =>\n          `M${x + width / 2},${y}L${x + width},${y + height}L${x},${\n            y + height / 2\n          },Z`,\n      ),\n      maskHandleSWRender: createPathRender(\n        (x, y, width, height) =>\n          `M${x + width / 2},${y}L${x + width},${y + height / 2}L${x},${\n            y + height\n          },Z`,\n      ),\n      maskHandleNFill: 'blue',\n      maskHandleEFill: 'red',\n      maskHandleSFill: 'green',\n      maskHandleWFill: 'yellow',\n      maskHandleNWFill: 'black',\n      maskHandleNEFill: 'steelblue',\n      maskHandleSEFill: 'pink',\n      maskHandleSWFill: 'orange',\n    },\n  },\n});\n",paraId:46,tocIndex:11},{value:"Some interactions change element states. We can change the interaction effect by configuring the appearance of element states.",paraId:47,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  },\n  encode: { x: 'height', y: 'weight', color: 'gender' },\n  state: {\n    inactive: { stroke: 'gray', opacity: 0.5 },\n    active: { lineWidth: 5 },\n  },\n  interaction: { brushHighlight: true },\n});\n\nchart.render();\n",paraId:48,tocIndex:12}]},76629:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(9055);const t=[{value:"brushXFilter",paraId:0,tocIndex:0},{value:" interaction is a horizontal-constrained version of brushFilter, specifically designed for data filtering based on X-axis dimensions. This interaction restricts users to horizontal brush selection operations (along the X-axis direction only) to filter chart elements by range, particularly suitable for time series analysis, horizontal comparison, and other scenarios.",paraId:0,tocIndex:0},{value:"Key characteristics:",paraId:1,tocIndex:0},{value:"Unidirectional operation: Only allows horizontal direction brush selection, Y-axis range is automatically fully selected",paraId:2,tocIndex:0},{value:"Dimensional focus: Precise control of X-axis data range (such as time ranges, numerical intervals)",paraId:3,tocIndex:0},{value:"Responsive updates: Dynamically triggers view updates after filtering",paraId:4,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/antvdemo/assets/data/blockchain.json',\n  },\n  encode: {\n    x: (d) => new Date(d.date), // X-axis bound to time data\n    y: 'total',\n  },\n  interaction: {\n    brushXFilter: true, // Enable horizontal filtering\n  },\n});\n\nchart.render();\n",paraId:5,tocIndex:0},{value:"There are two ways to configure ",paraId:6,tocIndex:1},{value:"brushXFilter",paraId:6,tocIndex:1},{value:" interaction:",paraId:6,tocIndex:1},{value:"Enable interaction with a boolean value using default configuration:",paraId:7,tocIndex:2},{value:"({\n  type: 'interval',\n  interaction: { brushXFilter: true }, // Enable X-axis brush filter with default configuration\n});\n",paraId:8,tocIndex:2},{value:"Fine-tune interaction behavior through ",paraId:9,tocIndex:3},{value:"configuration options",paraId:10,tocIndex:3},{value:":",paraId:9,tocIndex:3},{value:"({\n  type: 'interval',\n  interaction: {\n    brushXFilter: {\n      reverse: false, // Disable reverse selection\n      maskFill: '#rgba(0,0,0,0.3)', // Custom mask color\n    },\n  },\n});\n",paraId:11,tocIndex:3},{value:"Interaction can be configured at the Mark level:",paraId:12,tocIndex:4},{value:"({\n  type: 'interval',\n  interaction: { brushXFilter: true },\n});\n",paraId:13,tocIndex:4},{value:"It can also be configured at the View level. Interactions declared on the view will be passed to marks declared in ",paraId:14,tocIndex:4},{value:"children",paraId:14,tocIndex:4},{value:". If the mark has declared the corresponding interaction, they will be merged; otherwise, it won't be affected.",paraId:14,tocIndex:4},{value:"({\n  type: 'view',\n  interaction: { brushXFilter: true },\n});\n",paraId:15,tocIndex:4},{value:"Property",paraId:16,tocIndex:5},{value:"Description",paraId:16,tocIndex:5},{value:"Type",paraId:16,tocIndex:5},{value:"Default",paraId:16,tocIndex:5},{value:"Required",paraId:16,tocIndex:5},{value:"reverse",paraId:16,tocIndex:5},{value:"Whether to reverse brush",paraId:16,tocIndex:5},{value:"boolean",paraId:16,tocIndex:5},{value:"false",paraId:16,tocIndex:5},{value:"mask",paraId:16,tocIndex:5},{value:"Style of brush area mask",paraId:16,tocIndex:5},{value:"mask",paraId:17,tocIndex:5},{value:"See ",paraId:16,tocIndex:5},{value:"mask",paraId:18,tocIndex:5},{value:"Configure the style of the brush area mask.",paraId:19,tocIndex:6},{value:"Property",paraId:20,tocIndex:6},{value:"Description",paraId:20,tocIndex:6},{value:"Type",paraId:20,tocIndex:6},{value:"Default",paraId:20,tocIndex:6},{value:"Required",paraId:20,tocIndex:6},{value:"maskFill",paraId:20,tocIndex:6},{value:"Mask fill color",paraId:20,tocIndex:6},{value:"string",paraId:20,tocIndex:6},{value:"#777",paraId:20,tocIndex:6},{value:"maskFillOpacity",paraId:20,tocIndex:6},{value:"Mask fill opacity",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"0.3",paraId:20,tocIndex:6},{value:"maskStroke",paraId:20,tocIndex:6},{value:"Mask stroke",paraId:20,tocIndex:6},{value:"string",paraId:20,tocIndex:6},{value:"#fff",paraId:20,tocIndex:6},{value:"maskStrokeOpacity",paraId:20,tocIndex:6},{value:"Stroke opacity",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskLineWidth",paraId:20,tocIndex:6},{value:"Mask stroke width",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskLineDash",paraId:20,tocIndex:6},{value:"Stroke dash configuration. First value is dash length, second is gap length. Setting lineDash to [0,0] means no stroke.",paraId:20,tocIndex:6},{value:"[number,number]",paraId:20,tocIndex:6},{value:"maskOpacity",paraId:20,tocIndex:6},{value:"Mask overall opacity",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskShadowColor",paraId:20,tocIndex:6},{value:"Mask shadow color",paraId:20,tocIndex:6},{value:"string",paraId:20,tocIndex:6},{value:"maskShadowBlur",paraId:20,tocIndex:6},{value:"Mask shadow Gaussian blur coefficient",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskShadowOffsetX",paraId:20,tocIndex:6},{value:"Set horizontal distance of shadow from mask",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskShadowOffsetY",paraId:20,tocIndex:6},{value:"Set vertical distance of shadow from mask",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskCursor",paraId:20,tocIndex:6},{value:"Mouse cursor style. Same as CSS cursor style",paraId:20,tocIndex:6},{value:"string",paraId:20,tocIndex:6},{value:"default",paraId:20,tocIndex:6},{value:"When configuring the mask style of the brush area, it's not configured as an object, but using the ",paraId:21,tocIndex:6},{value:"mask",paraId:21,tocIndex:6},{value:" prefix with property names.",paraId:21,tocIndex:6},{value:"Style configuration example:",paraId:22,tocIndex:6},{value:"({\n  interaction: {\n    brushXFilter: {\n      maskFill: '#000',\n      maskFillOpacity: 0.2,\n      maskStroke: 'red',\n      maskStrokeOpacity: 0.9,\n      maskLineWidth: 2,\n      maskLineDash: [4, 8],\n      maskOpacity: 0.2,\n      maskShadowColor: '#d3d3d3',\n      maskShadowBlur: 10,\n      maskShadowOffsetX: 10,\n      maskShadowOffsetY: 10,\n      maskCursor: 'pointer',\n    },\n  },\n});\n",paraId:23,tocIndex:6},{value:"Listen to brush filter actions:",paraId:24,tocIndex:8},{value:"chart.on('brush:filter', (event) => {\n  const {\n    data, // Filtered data collection\n    nativeEvent, // Original DOM event\n  } = event;\n  const [xStart, xEnd] = data.selection[0];\n  console.log(`Filter range: ${xStart} ~ ${xEnd}`);\n});\n",paraId:25,tocIndex:8},{value:"Trigger filtering programmatically:",paraId:26,tocIndex:9},{value:"// Set X-axis filter range (timestamp example)\nchart.emit('brush:filter', {\n  data: {\n    selection: [\n      [new Date('2023-01-01').getTime(), new Date('2023-06-30').getTime()],\n    ],\n  },\n});\n",paraId:27,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { letter: 'A', frequency: 0.08167 },\n  { letter: 'B', frequency: 0.01492 },\n  { letter: 'C', frequency: 0.02782 },\n  { letter: 'D', frequency: 0.04253 },\n  { letter: 'E', frequency: 0.12702 },\n  { letter: 'F', frequency: 0.02288 },\n  { letter: 'G', frequency: 0.02015 },\n  { letter: 'H', frequency: 0.06094 },\n  { letter: 'I', frequency: 0.06966 },\n  { letter: 'J', frequency: 0.00153 },\n  { letter: 'K', frequency: 0.00772 },\n  { letter: 'L', frequency: 0.04025 },\n  { letter: 'M', frequency: 0.02406 },\n  { letter: 'N', frequency: 0.06749 },\n  { letter: 'O', frequency: 0.07507 },\n  { letter: 'P', frequency: 0.01929 },\n  { letter: 'Q', frequency: 0.00095 },\n  { letter: 'R', frequency: 0.05987 },\n  { letter: 'S', frequency: 0.06327 },\n  { letter: 'T', frequency: 0.09056 },\n  { letter: 'U', frequency: 0.02758 },\n  { letter: 'V', frequency: 0.00978 },\n  { letter: 'W', frequency: 0.0236 },\n  { letter: 'X', frequency: 0.0015 },\n  { letter: 'Y', frequency: 0.01974 },\n  { letter: 'Z', frequency: 0.00074 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  autoFit: true,\n  interaction: {\n    brushXFilter: {\n      maskFill: '#000',\n      maskFillOpacity: 0.2,\n      maskStroke: 'red',\n      maskStrokeOpacity: 0.9,\n      maskLineWidth: 2,\n      maskLineDash: [4, 8],\n      maskOpacity: 0.2,\n      maskShadowColor: '#d3d3d3',\n      maskShadowBlur: 10,\n      maskShadowOffsetX: 10,\n      maskShadowOffsetY: 10,\n      maskCursor: 'pointer',\n    },\n  },\n});\n\nchart.interval().data(data).encode('x', 'letter').encode('y', 'frequency');\n\nchart.render();\n",paraId:28,tocIndex:10}]},8054:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(78775);const t=[{value:"brushXHighlight",paraId:0,tocIndex:0},{value:" is a specialized ",paraId:0,tocIndex:0},{value:"brushHighlight",paraId:0,tocIndex:0},{value:" interaction. While retaining the basic highlight functionality, it fixes the y-axis brush range to the full domain (from minimum to maximum values), focusing specifically on data selection operations in the x-axis direction. This is suitable for scenarios requiring horizontal data comparison (such as time series analysis), improving operation precision by eliminating vertical direction interference.",paraId:0,tocIndex:0},{value:"Trigger: Brush selection of elements.",paraId:1,tocIndex:0},{value:"End: Click on chart area.",paraId:2,tocIndex:0},{value:"Affected states:",paraId:3,tocIndex:0},{value:"Elements within the brush range change to ",paraId:4,tocIndex:0},{value:"active",paraId:4,tocIndex:0},{value:" state.",paraId:4,tocIndex:0},{value:"Elements outside the brush range change to ",paraId:5,tocIndex:0},{value:"inactive",paraId:5,tocIndex:0},{value:" state.",paraId:5,tocIndex:0},{value:"Built-in interaction states:",paraId:6,tocIndex:0},{value:"({\n  inactive: { opacity: 0.5 },\n});\n",paraId:7,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  },\n  encode: { x: 'height', y: 'weight', color: 'gender' },\n  state: { inactive: { stroke: 'gray' } },\n  interaction: { brushXHighlight: true },\n});\n\nchart.render();\n",paraId:8,tocIndex:0},{value:"There are two ways to configure the ",paraId:9,tocIndex:1},{value:"brushXHighlight",paraId:9,tocIndex:1},{value:" interaction:",paraId:9,tocIndex:1},{value:"First, pass a ",paraId:10,tocIndex:1},{value:"boolean",paraId:10,tocIndex:1},{value:" to set whether to enable the interaction.",paraId:10,tocIndex:1},{value:"({\n  type: 'interval',\n  interaction: { brushXHighlight: true },\n});\n",paraId:11,tocIndex:1},{value:"Second, pass ",paraId:12,tocIndex:1},{value:"configuration options",paraId:13,tocIndex:1},{value:" to configure the interaction.",paraId:12,tocIndex:1},{value:"({\n  type: 'line',\n  interaction: {\n    brushXHighlight: {\n      series: true,\n    },\n  },\n});\n",paraId:14,tocIndex:1},{value:"Interaction can be configured at the Mark level:",paraId:15,tocIndex:2},{value:"({\n  type: 'interval',\n  interaction: { brushXHighlight: true },\n});\n",paraId:16,tocIndex:2},{value:"It can also be configured at the View level. Interactions declared on the view will be passed to marks declared in ",paraId:17,tocIndex:2},{value:"children",paraId:17,tocIndex:2},{value:". If the mark has declared the corresponding interaction, they will be merged; otherwise, it won't be affected.",paraId:17,tocIndex:2},{value:"({\n  type: 'view',\n  interaction: { brushXHighlight: true },\n});\n",paraId:18,tocIndex:2},{value:"Property",paraId:19,tocIndex:3},{value:"Description",paraId:19,tocIndex:3},{value:"Type",paraId:19,tocIndex:3},{value:"Default",paraId:19,tocIndex:3},{value:"Required",paraId:19,tocIndex:3},{value:"reverse",paraId:19,tocIndex:3},{value:"Whether to reverse the brush",paraId:19,tocIndex:3},{value:"boolean",paraId:19,tocIndex:3},{value:"false",paraId:19,tocIndex:3},{value:"series",paraId:19,tocIndex:3},{value:"Whether brush affects series elements",paraId:19,tocIndex:3},{value:"boolean",paraId:19,tocIndex:3},{value:"false",paraId:19,tocIndex:3},{value:"facet",paraId:19,tocIndex:3},{value:"Whether brush spans across facets",paraId:19,tocIndex:3},{value:"boolean",paraId:19,tocIndex:3},{value:"false",paraId:19,tocIndex:3},{value:"selectedHandles",paraId:19,tocIndex:3},{value:"Directions of handles that can be resized",paraId:19,tocIndex:3},{value:"string[]",paraId:19,tocIndex:3},{value:"['handle-e', 'handle-w']",paraId:19,tocIndex:3},{value:"brushRegion",paraId:19,tocIndex:3},{value:"Brush region",paraId:19,tocIndex:3},{value:"(x, y, x1, y1, extent) => any",paraId:19,tocIndex:3},{value:"(x, y, x1, y1,[minX, minY, maxX, maxY]) => [x, minY, x1, maxY]",paraId:19,tocIndex:3},{value:"mask",paraId:19,tocIndex:3},{value:"Mask style for brush area",paraId:19,tocIndex:3},{value:"mask",paraId:20,tocIndex:3},{value:"See ",paraId:19,tocIndex:3},{value:"mask",paraId:21,tocIndex:3},{value:"maskHandle",paraId:19,tocIndex:3},{value:"Handle style for brush area",paraId:19,tocIndex:3},{value:"maskHandle",paraId:22,tocIndex:3},{value:"See ",paraId:19,tocIndex:3},{value:"maskHandle",paraId:23,tocIndex:3},{value:"Configure the style of the brush area mask.",paraId:24,tocIndex:4},{value:"Property",paraId:25,tocIndex:4},{value:"Description",paraId:25,tocIndex:4},{value:"Type",paraId:25,tocIndex:4},{value:"Default",paraId:25,tocIndex:4},{value:"Required",paraId:25,tocIndex:4},{value:"maskFill",paraId:25,tocIndex:4},{value:"Mask fill color",paraId:25,tocIndex:4},{value:"string",paraId:25,tocIndex:4},{value:"#777",paraId:25,tocIndex:4},{value:"maskFillOpacity",paraId:25,tocIndex:4},{value:"Mask fill opacity",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"0.3",paraId:25,tocIndex:4},{value:"maskStroke",paraId:25,tocIndex:4},{value:"Mask stroke",paraId:25,tocIndex:4},{value:"string",paraId:25,tocIndex:4},{value:"#fff",paraId:25,tocIndex:4},{value:"maskStrokeOpacity",paraId:25,tocIndex:4},{value:"Stroke opacity",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"maskLineWidth",paraId:25,tocIndex:4},{value:"Mask stroke width",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"maskLineDash",paraId:25,tocIndex:4},{value:"Stroke dash configuration. First value is dash length, second is gap length. Setting to [0,0] means no stroke.",paraId:25,tocIndex:4},{value:"[number,number]",paraId:25,tocIndex:4},{value:"maskOpacity",paraId:25,tocIndex:4},{value:"Mask overall opacity",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"maskShadowColor",paraId:25,tocIndex:4},{value:"Mask shadow color",paraId:25,tocIndex:4},{value:"string",paraId:25,tocIndex:4},{value:"maskShadowBlur",paraId:25,tocIndex:4},{value:"Mask shadow Gaussian blur coefficient",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"maskShadowOffsetX",paraId:25,tocIndex:4},{value:"Set horizontal distance of shadow from mask",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"maskShadowOffsetY",paraId:25,tocIndex:4},{value:"Set vertical distance of shadow from mask",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"maskCursor",paraId:25,tocIndex:4},{value:"Mouse cursor style. Same as CSS cursor style",paraId:25,tocIndex:4},{value:"string",paraId:25,tocIndex:4},{value:"default",paraId:25,tocIndex:4},{value:"When configuring brush area mask style, it's not configured as an object, but using the ",paraId:26,tocIndex:4},{value:"mask",paraId:26,tocIndex:4},{value:" prefix with property names.",paraId:26,tocIndex:4},{value:"({\n  interaction: {\n    brushXHighlight: {\n      maskFill: '#000',\n      maskFillOpacity: 0.2,\n      maskStroke: 'red',\n      maskStrokeOpacity: 0.9,\n      maskLineWidth: 2,\n      maskLineDash: [4, 8],\n      maskOpacity: 0.2,\n      maskShadowColor: '#d3d3d3',\n      maskShadowBlur: 10,\n      maskShadowOffsetX: 10,\n      maskShadowOffsetY: 10,\n      maskCursor: 'pointer',\n    },\n  },\n});\n",paraId:27,tocIndex:4},{value:"The names of handles in eight directions are as follows (named according to north, south, east, west). Set corresponding properties in the format ",paraId:28,tocIndex:5},{value:"mask[handleName][styleAttribute]",paraId:28,tocIndex:5},{value:", or set width through ",paraId:28,tocIndex:5},{value:"maskHandleSize",paraId:28,tocIndex:5},{value:".",paraId:28,tocIndex:5},{value:"Property",paraId:29,tocIndex:5},{value:"Description",paraId:29,tocIndex:5},{value:"Type",paraId:29,tocIndex:5},{value:"Default",paraId:29,tocIndex:5},{value:"Required",paraId:29,tocIndex:5},{value:"mask[handleName]Render",paraId:29,tocIndex:5},{value:"Custom mask handle rendering function",paraId:29,tocIndex:5},{value:"(g, options, document) => DisplayObject",paraId:29,tocIndex:5},{value:"mask[handleName]Size",paraId:29,tocIndex:5},{value:"Mask handle width",paraId:29,tocIndex:5},{value:"string",paraId:29,tocIndex:5},{value:"mask[handleName]Fill",paraId:29,tocIndex:5},{value:"Mask handle fill color",paraId:29,tocIndex:5},{value:"string",paraId:29,tocIndex:5},{value:"mask[handleName]FillOpacity",paraId:29,tocIndex:5},{value:"Mask handle fill opacity",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]Stroke",paraId:29,tocIndex:5},{value:"Mask handle stroke",paraId:29,tocIndex:5},{value:"string",paraId:29,tocIndex:5},{value:"mask[handleName]StrokeOpacity",paraId:29,tocIndex:5},{value:"Stroke opacity",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]LineWidth",paraId:29,tocIndex:5},{value:"Mask handle stroke width",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]LineDash",paraId:29,tocIndex:5},{value:"Stroke dash configuration. First value is dash length, second is gap length. Setting to [0,0] means no stroke.",paraId:29,tocIndex:5},{value:"[number,number]",paraId:29,tocIndex:5},{value:"mask[handleName]Opacity",paraId:29,tocIndex:5},{value:"Mask handle overall opacity",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]ShadowColor",paraId:29,tocIndex:5},{value:"Mask handle shadow color",paraId:29,tocIndex:5},{value:"string",paraId:29,tocIndex:5},{value:"mask[handleName]ShadowBlur",paraId:29,tocIndex:5},{value:"Mask handle shadow Gaussian blur coefficient",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]ShadowOffsetX",paraId:29,tocIndex:5},{value:"Set horizontal distance of shadow from mask handle",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]ShadowOffsetY",paraId:29,tocIndex:5},{value:"Set vertical distance of shadow from mask handle",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]Cursor",paraId:29,tocIndex:5},{value:"Mouse cursor style. Same as CSS cursor style",paraId:29,tocIndex:5},{value:"string",paraId:29,tocIndex:5},{value:"default",paraId:29,tocIndex:5},{value:"The following events are supported:",paraId:30,tocIndex:7},{value:"brush:start",paraId:31,tocIndex:7},{value:" - Triggered when starting to create brush",paraId:31,tocIndex:7},{value:"brush:end",paraId:31,tocIndex:7},{value:" - Triggered when brush size and position update is complete",paraId:31,tocIndex:7},{value:"brush:remove",paraId:31,tocIndex:7},{value:" - Triggered when brush is removed",paraId:31,tocIndex:7},{value:"brush:highlight",paraId:31,tocIndex:7},{value:" - Triggered when brush changes size and position",paraId:31,tocIndex:7},{value:"chart.on('brush:highlight', (e) => {\n  console.log(e.data.selection);\n  console.log(e.nativeEvent);\n});\n",paraId:32,tocIndex:7},{value:"The following events are supported:",paraId:33,tocIndex:8},{value:"brush:highlight",paraId:34,tocIndex:8},{value:" - Highlight data",paraId:34,tocIndex:8},{value:"brush:remove",paraId:34,tocIndex:8},{value:" - Remove brush",paraId:34,tocIndex:8},{value:"chart.emit('brush:remove');\nchart.emit('brush:highlight', { data: { selection } });\n",paraId:35,tocIndex:8},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\nconst focusContainer = document.createElement('div');\nconst contextContainer = document.createElement('div');\ncontainer.append(focusContainer);\ncontainer.append(contextContainer);\n\nfunction createPathRender(compute) {\n  return (group, options, document) => {\n    if (!group.handle) {\n      const path = document.createElement('path');\n      group.handle = path;\n      group.appendChild(group.handle);\n    }\n    const { handle } = group;\n    const { x, y, width, height, ...rest } = options;\n    if (width === undefined || height === undefined) return handle;\n    handle.attr({ ...compute(x, y, width, height), ...rest });\n    return handle;\n  };\n}\n\n// Render focus view\n\nconst focus = new G2.Chart({\n  container: focusContainer,\n  height: 360,\n  paddingLeft: 50,\n});\n\nfocus\n  .area()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  })\n  .encode('x', 'date')\n  .encode('y', 'close')\n  .animate(false)\n  .interaction('brushXHighlight', {\n    series: true,\n    maskHandleWRender: createPathRender((x, y, w, h) => ({\n      d: `M${x + w / 2},${y}L${x - w / 2},${y + h / 2}L${x + w / 2},${y + h}Z`,\n      fill: '#1890FF',\n    })),\n    maskHandleERender: createPathRender((x, y, w, h) => ({\n      d: `M${x + w / 2},${y}L${x + (w * 3) / 2},${y + h / 2}L${x + w / 2},${\n        y + h\n      }Z`,\n      fill: '#1890FF',\n    })),\n  });\n\n// Render context view\n\nconst context = new G2.Chart({\n  container: contextContainer,\n  height: 80,\n  paddingLeft: 50,\n});\n\ncontext\n  .area()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  })\n  .encode('x', 'date')\n  .encode('y', 'close')\n  .animate(false)\n  .axis('x', { title: false })\n  .axis('y', false)\n  .interaction('brushXHighlight', {\n    series: true,\n    maskHandleWRender: createPathRender((x, y, w, h) => ({\n      d: `M${x + w / 2},${y}L${x - w / 2},${y + h / 2}L${x + w / 2},${y + h}Z`,\n      fill: '#1890FF',\n    })),\n    maskHandleERender: createPathRender((x, y, w, h) => ({\n      d: `M${x + w / 2},${y}L${x + (w * 3) / 2},${y + h / 2}L${x + w / 2},${\n        y + h\n      }Z`,\n      fill: '#1890FF',\n    })),\n  });\n\nPromise.all([focus.render(), context.render()]).then(() => {\n  // Add cross-chart linkage\n  context.on('brush:highlight', (e) => {\n    const { selection } = e.data;\n    focus.emit('brush:highlight', { data: { selection } });\n  });\n\n  focus.on('brush:highlight', (e) => {\n    const { selection } = e.data;\n    context.emit('brush:highlight', { data: { selection } });\n  });\n});\n",paraId:36,tocIndex:10}]},2069:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(81589);const t=[{value:"brushYFilter",paraId:0,tocIndex:0},{value:" interaction is a vertical-constrained version of brushFilter, specifically designed for data filtering based on Y-axis dimensions. This interaction restricts users to vertical brush selection operations (along the Y-axis direction only) to filter chart elements by range, particularly suitable for numerical interval analysis, vertical comparison, and other scenarios.",paraId:0,tocIndex:0},{value:"Key characteristics:",paraId:1,tocIndex:0},{value:"Vertical operation: Only allows vertical direction brush selection, X-axis range is automatically fully selected",paraId:2,tocIndex:0},{value:"Numerical focus: Precise control of Y-axis numerical range (such as price intervals, temperature ranges)",paraId:3,tocIndex:0},{value:"Dynamic response: Filter results are mapped to associated views in real-time",paraId:4,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  },\n  encode: {\n    x: 'height',\n    y: 'weight', // Y-axis bound to numerical data\n  },\n  interaction: {\n    brushYFilter: { maskStroke: '#52c41a' }, // Enable vertical filtering with green border\n  },\n});\n\nchart.render();\n",paraId:5,tocIndex:0},{value:"There are two ways to configure ",paraId:6,tocIndex:1},{value:"brushYFilter",paraId:6,tocIndex:1},{value:" interaction:",paraId:6,tocIndex:1},{value:"Enable interaction with a boolean value using default configuration:",paraId:7,tocIndex:2},{value:"({\n  type: 'interval',\n  interaction: { brushYFilter: true }, // Enable Y-axis brush filter with default configuration\n});\n",paraId:8,tocIndex:2},{value:"Fine-tune interaction behavior through ",paraId:9,tocIndex:3},{value:"configuration options",paraId:10,tocIndex:3},{value:":",paraId:9,tocIndex:3},{value:"({\n  type: 'interval',\n  interaction: {\n    brushYFilter: {\n      reverse: false, // Disable reverse selection\n      maskFill: '#rgba(0,0,0,0.3)', // Custom mask color\n    },\n  },\n});\n",paraId:11,tocIndex:3},{value:"Interaction can be configured at the Mark level:",paraId:12,tocIndex:4},{value:"({\n  type: 'interval',\n  interaction: { brushYFilter: true },\n});\n",paraId:13,tocIndex:4},{value:"It can also be configured at the View level. Interactions declared on the view will be passed to marks declared in ",paraId:14,tocIndex:4},{value:"children",paraId:14,tocIndex:4},{value:". If the mark has declared the corresponding interaction, they will be merged; otherwise, it won't be affected.",paraId:14,tocIndex:4},{value:"({\n  type: 'view',\n  interaction: { brushYFilter: true },\n});\n",paraId:15,tocIndex:4},{value:"Property",paraId:16,tocIndex:5},{value:"Description",paraId:16,tocIndex:5},{value:"Type",paraId:16,tocIndex:5},{value:"Default",paraId:16,tocIndex:5},{value:"Required",paraId:16,tocIndex:5},{value:"reverse",paraId:16,tocIndex:5},{value:"Whether to reverse brush",paraId:16,tocIndex:5},{value:"boolean",paraId:16,tocIndex:5},{value:"false",paraId:16,tocIndex:5},{value:"mask",paraId:16,tocIndex:5},{value:"Style of brush area mask",paraId:16,tocIndex:5},{value:"mask",paraId:17,tocIndex:5},{value:"See ",paraId:16,tocIndex:5},{value:"mask",paraId:18,tocIndex:5},{value:"Configure the style of the brush area mask.",paraId:19,tocIndex:6},{value:"Property",paraId:20,tocIndex:6},{value:"Description",paraId:20,tocIndex:6},{value:"Type",paraId:20,tocIndex:6},{value:"Default",paraId:20,tocIndex:6},{value:"Required",paraId:20,tocIndex:6},{value:"maskFill",paraId:20,tocIndex:6},{value:"Mask fill color",paraId:20,tocIndex:6},{value:"string",paraId:20,tocIndex:6},{value:"#777",paraId:20,tocIndex:6},{value:"maskFillOpacity",paraId:20,tocIndex:6},{value:"Mask fill opacity",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"0.3",paraId:20,tocIndex:6},{value:"maskStroke",paraId:20,tocIndex:6},{value:"Mask stroke",paraId:20,tocIndex:6},{value:"string",paraId:20,tocIndex:6},{value:"#fff",paraId:20,tocIndex:6},{value:"maskStrokeOpacity",paraId:20,tocIndex:6},{value:"Stroke opacity",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskLineWidth",paraId:20,tocIndex:6},{value:"Mask stroke width",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskLineDash",paraId:20,tocIndex:6},{value:"Stroke dash configuration. First value is dash length, second is gap length. Setting lineDash to [0,0] means no stroke.",paraId:20,tocIndex:6},{value:"[number,number]",paraId:20,tocIndex:6},{value:"maskOpacity",paraId:20,tocIndex:6},{value:"Mask overall opacity",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskShadowColor",paraId:20,tocIndex:6},{value:"Mask shadow color",paraId:20,tocIndex:6},{value:"string",paraId:20,tocIndex:6},{value:"maskShadowBlur",paraId:20,tocIndex:6},{value:"Mask shadow Gaussian blur coefficient",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskShadowOffsetX",paraId:20,tocIndex:6},{value:"Set horizontal distance of shadow from mask",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskShadowOffsetY",paraId:20,tocIndex:6},{value:"Set vertical distance of shadow from mask",paraId:20,tocIndex:6},{value:"number",paraId:20,tocIndex:6},{value:"maskCursor",paraId:20,tocIndex:6},{value:"Mouse cursor style. Same as CSS cursor style",paraId:20,tocIndex:6},{value:"string",paraId:20,tocIndex:6},{value:"default",paraId:20,tocIndex:6},{value:"When configuring the mask style of the brush area, it's not configured as an object, but using the ",paraId:21,tocIndex:6},{value:"mask",paraId:21,tocIndex:6},{value:" prefix with property names.",paraId:21,tocIndex:6},{value:"Style configuration example:",paraId:22,tocIndex:6},{value:"({\n  interaction: {\n    brushYFilter: {\n      maskFill: '#000',\n      maskFillOpacity: 0.2,\n      maskStroke: 'red',\n      maskStrokeOpacity: 0.9,\n      maskLineWidth: 2,\n      maskLineDash: [4, 8],\n      maskOpacity: 0.2,\n      maskShadowColor: '#d3d3d3',\n      maskShadowBlur: 10,\n      maskShadowOffsetX: 10,\n      maskShadowOffsetY: 10,\n      maskCursor: 'pointer',\n    },\n  },\n});\n",paraId:23,tocIndex:6},{value:"Listen to brush filter actions:",paraId:24,tocIndex:8},{value:"chart.on('brush:filter', (event) => {\n  const {\n    data, // Filtered data collection\n    nativeEvent, // Original DOM event\n  } = event;\n  const [yMin, yMax] = data.selection[1]; // Note the data structure difference\n  console.log(`Value range: ${yMin.toFixed(2)} - ${yMax.toFixed(2)}`);\n});\n",paraId:25,tocIndex:8},{value:"Trigger filtering programmatically:",paraId:26,tocIndex:9},{value:"// Set Y-axis filter range (numerical example)\nchart.emit('brush:filter', {\n  data: {\n    selection: [\n      null, // X-axis remains fully selected\n      [20, 60], // Y-axis range 20-60\n    ],\n  },\n});\n",paraId:27,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { letter: 'A', frequency: 0.08167 },\n  { letter: 'B', frequency: 0.01492 },\n  { letter: 'C', frequency: 0.02782 },\n  { letter: 'D', frequency: 0.04253 },\n  { letter: 'E', frequency: 0.12702 },\n  { letter: 'F', frequency: 0.02288 },\n  { letter: 'G', frequency: 0.02015 },\n  { letter: 'H', frequency: 0.06094 },\n  { letter: 'I', frequency: 0.06966 },\n  { letter: 'J', frequency: 0.00153 },\n  { letter: 'K', frequency: 0.00772 },\n  { letter: 'L', frequency: 0.04025 },\n  { letter: 'M', frequency: 0.02406 },\n  { letter: 'N', frequency: 0.06749 },\n  { letter: 'O', frequency: 0.07507 },\n  { letter: 'P', frequency: 0.01929 },\n  { letter: 'Q', frequency: 0.00095 },\n  { letter: 'R', frequency: 0.05987 },\n  { letter: 'S', frequency: 0.06327 },\n  { letter: 'T', frequency: 0.09056 },\n  { letter: 'U', frequency: 0.02758 },\n  { letter: 'V', frequency: 0.00978 },\n  { letter: 'W', frequency: 0.0236 },\n  { letter: 'X', frequency: 0.0015 },\n  { letter: 'Y', frequency: 0.01974 },\n  { letter: 'Z', frequency: 0.00074 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  autoFit: true,\n  interaction: {\n    brushYFilter: {\n      maskFill: '#000',\n      maskFillOpacity: 0.2,\n      maskStroke: 'red',\n      maskStrokeOpacity: 0.9,\n      maskLineWidth: 2,\n      maskLineDash: [4, 8],\n      maskOpacity: 0.2,\n      maskShadowColor: '#d3d3d3',\n      maskShadowBlur: 10,\n      maskShadowOffsetX: 10,\n      maskShadowOffsetY: 10,\n      maskCursor: 'pointer',\n    },\n  },\n});\n\nchart.interval().data(data).encode('x', 'letter').encode('y', 'frequency');\n\nchart.render();\n",paraId:28,tocIndex:10}]},73821:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(15251);const t=[{value:"brushYHighlight",paraId:0,tocIndex:0},{value:" is a specialized ",paraId:0,tocIndex:0},{value:"brushHighlight",paraId:0,tocIndex:0},{value:" interaction. While retaining the basic highlight functionality, it fixes the x-axis brush range to the full domain (from minimum to maximum values), focusing specifically on data selection operations in the y-axis direction. This is suitable for vertical comparison analysis (such as comparing yields of financial products, studying vertical distribution of experimental data), improving operation precision by eliminating horizontal direction interference.",paraId:0,tocIndex:0},{value:"Trigger: Brush selection of elements.",paraId:1,tocIndex:0},{value:"End: Click on chart area.",paraId:2,tocIndex:0},{value:"Affected states:",paraId:3,tocIndex:0},{value:"Elements within the brush range change to ",paraId:4,tocIndex:0},{value:"active",paraId:4,tocIndex:0},{value:" state.",paraId:4,tocIndex:0},{value:"Elements outside the brush range change to ",paraId:5,tocIndex:0},{value:"inactive",paraId:5,tocIndex:0},{value:" state.",paraId:5,tocIndex:0},{value:"Built-in interaction states:",paraId:6,tocIndex:0},{value:"({\n  inactive: { opacity: 0.5 },\n});\n",paraId:7,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  },\n  encode: { x: 'height', y: 'weight', color: 'gender' },\n  state: { inactive: { stroke: 'gray' } },\n  interaction: { brushYHighlight: true },\n});\n\nchart.render();\n",paraId:8,tocIndex:0},{value:"There are two ways to configure the ",paraId:9,tocIndex:1},{value:"brushYHighlight",paraId:9,tocIndex:1},{value:" interaction:",paraId:9,tocIndex:1},{value:"First, pass a ",paraId:10,tocIndex:1},{value:"boolean",paraId:10,tocIndex:1},{value:" to set whether to enable the interaction.",paraId:10,tocIndex:1},{value:"({\n  type: 'interval',\n  interaction: { brushYHighlight: true },\n});\n",paraId:11,tocIndex:1},{value:"Second, pass ",paraId:12,tocIndex:1},{value:"configuration options",paraId:13,tocIndex:1},{value:" to configure the interaction.",paraId:12,tocIndex:1},{value:"({\n  type: 'line',\n  interaction: {\n    brushYHighlight: {\n      series: true,\n    },\n  },\n});\n",paraId:14,tocIndex:1},{value:"Interaction can be configured at the Mark level:",paraId:15,tocIndex:2},{value:"({\n  type: 'interval',\n  interaction: { brushYHighlight: true },\n});\n",paraId:16,tocIndex:2},{value:"It can also be configured at the View level. Interactions declared on the view will be passed to marks declared in ",paraId:17,tocIndex:2},{value:"children",paraId:17,tocIndex:2},{value:". If the mark has declared the corresponding interaction, they will be merged; otherwise, it won't be affected.",paraId:17,tocIndex:2},{value:"({\n  type: 'view',\n  interaction: { brushYHighlight: true },\n});\n",paraId:18,tocIndex:2},{value:"Property",paraId:19,tocIndex:3},{value:"Description",paraId:19,tocIndex:3},{value:"Type",paraId:19,tocIndex:3},{value:"Default",paraId:19,tocIndex:3},{value:"Required",paraId:19,tocIndex:3},{value:"reverse",paraId:19,tocIndex:3},{value:"Whether to reverse brush",paraId:19,tocIndex:3},{value:"boolean",paraId:19,tocIndex:3},{value:"false",paraId:19,tocIndex:3},{value:"series",paraId:19,tocIndex:3},{value:"Whether for series elements",paraId:19,tocIndex:3},{value:"boolean",paraId:19,tocIndex:3},{value:"false",paraId:19,tocIndex:3},{value:"facet",paraId:19,tocIndex:3},{value:"Whether across facets",paraId:19,tocIndex:3},{value:"boolean",paraId:19,tocIndex:3},{value:"false",paraId:19,tocIndex:3},{value:"selectedHandles",paraId:19,tocIndex:3},{value:"Resizable handle directions",paraId:19,tocIndex:3},{value:"string[]",paraId:19,tocIndex:3},{value:"['handle-n', 'handle-s']",paraId:19,tocIndex:3},{value:"brushRegion",paraId:19,tocIndex:3},{value:"Brush area",paraId:19,tocIndex:3},{value:"(x, y, x1, y1, extent) => any",paraId:19,tocIndex:3},{value:"(x, y, x1, y1,[minX, minY, maxX, maxY]) => [minX, y, maxX, y1]",paraId:19,tocIndex:3},{value:"mask",paraId:19,tocIndex:3},{value:"Style of brush area mask",paraId:19,tocIndex:3},{value:"mask",paraId:20,tocIndex:3},{value:"See ",paraId:19,tocIndex:3},{value:"mask",paraId:21,tocIndex:3},{value:"maskHandle",paraId:19,tocIndex:3},{value:"Style of brush area handles",paraId:19,tocIndex:3},{value:"maskHandle",paraId:22,tocIndex:3},{value:"See ",paraId:19,tocIndex:3},{value:"maskHandle",paraId:23,tocIndex:3},{value:"Configure the style of the brush area mask.",paraId:24,tocIndex:4},{value:"Property",paraId:25,tocIndex:4},{value:"Description",paraId:25,tocIndex:4},{value:"Type",paraId:25,tocIndex:4},{value:"Default",paraId:25,tocIndex:4},{value:"Required",paraId:25,tocIndex:4},{value:"maskFill",paraId:25,tocIndex:4},{value:"Mask fill color",paraId:25,tocIndex:4},{value:"string",paraId:25,tocIndex:4},{value:"#777",paraId:25,tocIndex:4},{value:"maskFillOpacity",paraId:25,tocIndex:4},{value:"Mask fill opacity",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"0.3",paraId:25,tocIndex:4},{value:"maskStroke",paraId:25,tocIndex:4},{value:"Mask stroke",paraId:25,tocIndex:4},{value:"string",paraId:25,tocIndex:4},{value:"#fff",paraId:25,tocIndex:4},{value:"maskStrokeOpacity",paraId:25,tocIndex:4},{value:"Stroke opacity",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"maskLineWidth",paraId:25,tocIndex:4},{value:"Mask stroke width",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"maskLineDash",paraId:25,tocIndex:4},{value:"Stroke dash configuration. First value is dash length, second is gap length. Setting lineDash to [0,0] means no stroke.",paraId:25,tocIndex:4},{value:"[number,number]",paraId:25,tocIndex:4},{value:"maskOpacity",paraId:25,tocIndex:4},{value:"Mask overall opacity",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"maskShadowColor",paraId:25,tocIndex:4},{value:"Mask shadow color",paraId:25,tocIndex:4},{value:"string",paraId:25,tocIndex:4},{value:"maskShadowBlur",paraId:25,tocIndex:4},{value:"Mask shadow Gaussian blur coefficient",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"maskShadowOffsetX",paraId:25,tocIndex:4},{value:"Set horizontal distance of shadow from mask",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"maskShadowOffsetY",paraId:25,tocIndex:4},{value:"Set vertical distance of shadow from mask",paraId:25,tocIndex:4},{value:"number",paraId:25,tocIndex:4},{value:"maskCursor",paraId:25,tocIndex:4},{value:"Mouse cursor style. Same as CSS cursor style",paraId:25,tocIndex:4},{value:"string",paraId:25,tocIndex:4},{value:"default",paraId:25,tocIndex:4},{value:"When configuring the mask style of the brush area, it's not configured as an object, but using the ",paraId:26,tocIndex:4},{value:"mask",paraId:26,tocIndex:4},{value:" prefix with property names.",paraId:26,tocIndex:4},{value:"({\n  interaction: {\n    brushYHighlight: {\n      maskFill: '#000',\n      maskFillOpacity: 0.2,\n      maskStroke: 'red',\n      maskStrokeOpacity: 0.9,\n      maskLineWidth: 2,\n      maskLineDash: [4, 8],\n      maskOpacity: 0.2,\n      maskShadowColor: '#d3d3d3',\n      maskShadowBlur: 10,\n      maskShadowOffsetX: 10,\n      maskShadowOffsetY: 10,\n      maskCursor: 'pointer',\n    },\n  },\n});\n",paraId:27,tocIndex:4},{value:"The eight directional handles are named as follows (based on cardinal directions). Set corresponding properties using the format ",paraId:28,tocIndex:5},{value:"mask[handleName][styleAttribute]",paraId:28,tocIndex:5},{value:", or use ",paraId:28,tocIndex:5},{value:"maskHandleSize",paraId:28,tocIndex:5},{value:" to set width.",paraId:28,tocIndex:5},{value:"Property",paraId:29,tocIndex:5},{value:"Description",paraId:29,tocIndex:5},{value:"Type",paraId:29,tocIndex:5},{value:"Default",paraId:29,tocIndex:5},{value:"Required",paraId:29,tocIndex:5},{value:"mask[handleName]Render",paraId:29,tocIndex:5},{value:"Custom render function for mask handle",paraId:29,tocIndex:5},{value:"(g, options, document) => DisplayObject",paraId:29,tocIndex:5},{value:"mask[handleName]Size",paraId:29,tocIndex:5},{value:"Mask handle width",paraId:29,tocIndex:5},{value:"string",paraId:29,tocIndex:5},{value:"mask[handleName]Fill",paraId:29,tocIndex:5},{value:"Mask handle fill color",paraId:29,tocIndex:5},{value:"string",paraId:29,tocIndex:5},{value:"mask[handleName]FillOpacity",paraId:29,tocIndex:5},{value:"Mask handle fill opacity",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]Stroke",paraId:29,tocIndex:5},{value:"Mask handle stroke",paraId:29,tocIndex:5},{value:"string",paraId:29,tocIndex:5},{value:"mask[handleName]StrokeOpacity",paraId:29,tocIndex:5},{value:"Stroke opacity",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]LineWidth",paraId:29,tocIndex:5},{value:"Mask handle stroke width",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]LineDash",paraId:29,tocIndex:5},{value:"Stroke dash configuration. First value is dash length, second is gap length. Setting lineDash to [0,0] means no stroke.",paraId:29,tocIndex:5},{value:"[number,number]",paraId:29,tocIndex:5},{value:"mask[handleName]Opacity",paraId:29,tocIndex:5},{value:"Mask handle overall opacity",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]ShadowColor",paraId:29,tocIndex:5},{value:"Mask handle shadow color",paraId:29,tocIndex:5},{value:"string",paraId:29,tocIndex:5},{value:"mask[handleName]ShadowBlur",paraId:29,tocIndex:5},{value:"Mask handle shadow Gaussian blur coefficient",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]ShadowOffsetX",paraId:29,tocIndex:5},{value:"Set horizontal distance of shadow from mask handle",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]ShadowOffsetY",paraId:29,tocIndex:5},{value:"Set vertical distance of shadow from mask handle",paraId:29,tocIndex:5},{value:"number",paraId:29,tocIndex:5},{value:"mask[handleName]Cursor",paraId:29,tocIndex:5},{value:"Mouse cursor style. Same as CSS cursor style",paraId:29,tocIndex:5},{value:"string",paraId:29,tocIndex:5},{value:"default",paraId:29,tocIndex:5},{value:"The following events are supported:",paraId:30,tocIndex:7},{value:"brush:start",paraId:31,tocIndex:7},{value:" - Triggered when starting to create brush",paraId:31,tocIndex:7},{value:"brush:end",paraId:31,tocIndex:7},{value:" - Triggered when brush update size and position is completed",paraId:31,tocIndex:7},{value:"brush:remove",paraId:31,tocIndex:7},{value:" - Triggered when brush is removed",paraId:31,tocIndex:7},{value:"brush:highlight",paraId:31,tocIndex:7},{value:" - Triggered when brush changes size and position",paraId:31,tocIndex:7},{value:"chart.on('brush:highlight', (e) => {\n  console.log(e.data.selection);\n  console.log(e.nativeEvent);\n});\n",paraId:32,tocIndex:7},{value:"The following events are supported:",paraId:33,tocIndex:8},{value:"brush:highlight",paraId:34,tocIndex:8},{value:" - Highlight data",paraId:34,tocIndex:8},{value:"brush:remove",paraId:34,tocIndex:8},{value:" - Remove brush",paraId:34,tocIndex:8},{value:"chart.emit('brush:remove');\nchart.emit('brush:highlight', { data: { selection } });\n",paraId:35,tocIndex:8}]},61188:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(9465);const t=[{value:"chartIndex",paraId:0,tocIndex:0},{value:" is an interactive component used to view the relative trends of line charts compared to a specific time point.",paraId:0,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 50,\n});\n\nchart.options({\n  type: 'line',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/indices.json',\n  },\n  encode: {\n    x: (d) => new Date(d.Date),\n    y: 'Close',\n    color: 'Symbol',\n    key: 'Symbol',\n    title: (d) => d.Date.toLocaleString(),\n  },\n  axis: {\n    y: {\n      title: '↑ Change in price (%)',\n      labelAutoRotate: false,\n    },\n  },\n  scale: {\n    y: {\n      type: 'log',\n    },\n  },\n  label: {\n    text: 'Symbol',\n    selector: 'last',\n    style: {\n      fontSize: 10,\n    },\n  },\n  interaction: {\n    chartIndex: {\n      ruleStroke: '#aaa',\n      labelDx: 5,\n      labelTextAlign: 'center',\n      labelStroke: '#fff',\n      labelLineWidth: 5,\n      labelFormatter: (d) => `${d.toLocaleDateString()}`,\n    },\n  },\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"chartIndex",paraId:2,tocIndex:1},{value:" is configured through ",paraId:2,tocIndex:1},{value:"configuration options",paraId:3,tocIndex:1},{value:":",paraId:2,tocIndex:1},{value:"({\n  type: 'line',\n  interaction: {\n    chartIndex: {},\n  },\n});\n",paraId:4,tocIndex:1},{value:"Interaction can be configured at the Mark level:",paraId:5,tocIndex:2},{value:"({\n  type: 'line',\n  interaction: { chartIndex: {} },\n});\n",paraId:6,tocIndex:2},{value:"It can also be configured at the View level. Interactions declared on the view will be passed to marks declared in ",paraId:7,tocIndex:2},{value:"children",paraId:7,tocIndex:2},{value:". If the mark has declared the corresponding interaction, they will be merged; otherwise, it won't be affected.",paraId:7,tocIndex:2},{value:"({\n  type: 'view',\n  children: [\n    {\n      type: 'line',\n      interaction: { chartIndex: {} },\n    },\n  ],\n});\n",paraId:8,tocIndex:2},{value:"Property",paraId:9,tocIndex:3},{value:"Description",paraId:9,tocIndex:3},{value:"Type",paraId:9,tocIndex:3},{value:"Default",paraId:9,tocIndex:3},{value:"Required",paraId:9,tocIndex:3},{value:"ruleStroke",paraId:9,tocIndex:3},{value:"Color of the indicator line",paraId:9,tocIndex:3},{value:"string",paraId:9,tocIndex:3},{value:"black",paraId:9,tocIndex:3},{value:"ruleLineWidth",paraId:9,tocIndex:3},{value:"Width of the indicator line",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"1",paraId:9,tocIndex:3},{value:"ruleLineDash",paraId:9,tocIndex:3},{value:"Dash configuration. First value is dash length, second is gap length. Setting ruleLineDash to [0,0] means no stroke.",paraId:9,tocIndex:3},{value:"[number,number]",paraId:9,tocIndex:3},{value:"ruleStrokeOpacity",paraId:9,tocIndex:3},{value:"Opacity of the indicator line",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"ruleOpacity",paraId:9,tocIndex:3},{value:"Overall opacity",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"ruleShadowColor",paraId:9,tocIndex:3},{value:"Indicator line shadow color",paraId:9,tocIndex:3},{value:"string",paraId:9,tocIndex:3},{value:"ruleShadowBlur",paraId:9,tocIndex:3},{value:"Indicator line Gaussian blur coefficient",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"ruleShadowOffsetX",paraId:9,tocIndex:3},{value:"Horizontal distance of shadow from indicator line",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"ruleShadowOffsetY",paraId:9,tocIndex:3},{value:"Vertical distance of shadow from indicator line",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"labelFontSize",paraId:9,tocIndex:3},{value:"Text size",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"labelFontFamily",paraId:9,tocIndex:3},{value:"Text font",paraId:9,tocIndex:3},{value:"string",paraId:9,tocIndex:3},{value:"labelFontWeight",paraId:9,tocIndex:3},{value:"Font weight",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"labelLineHeight",paraId:9,tocIndex:3},{value:"Text line height",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"labelTextAlign",paraId:9,tocIndex:3},{value:"Set the current alignment of text content",paraId:9,tocIndex:3},{value:"center",paraId:9,tocIndex:3},{value:" | ",paraId:9,tocIndex:3},{value:"end",paraId:9,tocIndex:3},{value:" | ",paraId:9,tocIndex:3},{value:"left",paraId:9,tocIndex:3},{value:" | ",paraId:9,tocIndex:3},{value:"right",paraId:9,tocIndex:3},{value:" | ",paraId:9,tocIndex:3},{value:"start",paraId:9,tocIndex:3},{value:"labelTextBaseline",paraId:9,tocIndex:3},{value:"Set the current text baseline used when drawing text",paraId:9,tocIndex:3},{value:"top",paraId:9,tocIndex:3},{value:" | ",paraId:9,tocIndex:3},{value:"middle",paraId:9,tocIndex:3},{value:" | ",paraId:9,tocIndex:3},{value:"bottom",paraId:9,tocIndex:3},{value:" | ",paraId:9,tocIndex:3},{value:"alphabetic",paraId:9,tocIndex:3},{value:" | ",paraId:9,tocIndex:3},{value:"hanging",paraId:9,tocIndex:3},{value:"labelFill",paraId:9,tocIndex:3},{value:"Text fill color",paraId:9,tocIndex:3},{value:"string",paraId:9,tocIndex:3},{value:"labelFillOpacity",paraId:9,tocIndex:3},{value:"Text fill opacity",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"labelStroke",paraId:9,tocIndex:3},{value:"Text stroke",paraId:9,tocIndex:3},{value:"string",paraId:9,tocIndex:3},{value:"labelLineWidth",paraId:9,tocIndex:3},{value:"Text stroke width",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"labelLineDash",paraId:9,tocIndex:3},{value:"Stroke dash configuration. First value is dash length, second is gap length. Setting labelLineDash to [0,0] means no stroke.",paraId:9,tocIndex:3},{value:"[number,number]",paraId:9,tocIndex:3},{value:"labelStrokeOpacity",paraId:9,tocIndex:3},{value:"Stroke opacity",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"labelOpacity",paraId:9,tocIndex:3},{value:"Text overall opacity",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"labelShadowColor",paraId:9,tocIndex:3},{value:"Text shadow color",paraId:9,tocIndex:3},{value:"string",paraId:9,tocIndex:3},{value:"labelShadowBlur",paraId:9,tocIndex:3},{value:"Text shadow Gaussian blur coefficient",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"labelShadowOffsetX",paraId:9,tocIndex:3},{value:"Set horizontal distance of shadow from text",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"labelShadowOffsetY",paraId:9,tocIndex:3},{value:"Set vertical distance of shadow from text",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"labelDx",paraId:9,tocIndex:3},{value:"Text offset in x direction",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"labelDy",paraId:9,tocIndex:3},{value:"Text offset in y direction",paraId:9,tocIndex:3},{value:"number",paraId:9,tocIndex:3},{value:"labelFormatter",paraId:9,tocIndex:3},{value:"Format date",paraId:9,tocIndex:3},{value:"FormatterFunction",paraId:9,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'line',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/indices.json',\n  },\n  encode: {\n    x: (d) => new Date(d.Date),\n    y: 'Close',\n    color: 'Symbol',\n    key: 'Symbol',\n    title: (d) => d.Date.toLocaleString(),\n  },\n  axis: {\n    y: {\n      title: '↑ Change in price (%)',\n      labelAutoRotate: false,\n    },\n  },\n  scale: {\n    y: {\n      type: 'log',\n    },\n  },\n  label: {\n    text: 'Symbol',\n    selector: 'last',\n    style: {\n      fontSize: 10,\n    },\n  },\n  interaction: {\n    tooltip: {\n      crosshairs: false, // Disable auxiliary lines\n    },\n    chartIndex: {\n      ruleStroke: 'pink',\n      ruleLineWidth: 8,\n      ruleLineDash: [4, 8],\n      ruleShadowColor: 'green',\n      ruleShadowBlur: 5,\n      ruleShadowOffsetX: 5,\n      ruleShadowOffsetY: 5,\n      ruleOpacity: 0.9,\n      labelDy: 30,\n      labelFontSize: 20,\n      labelTextAlign: 'center',\n      labelFill: 'red',\n      labelStroke: 'yellow',\n      labelLineWidth: 2,\n      labelFormatter: (d) => `${d.toLocaleDateString()}`,\n    },\n  },\n});\n\nchart.render();\n",paraId:10,tocIndex:5}]},73315:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(37257);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"elementHighlight",paraId:0,tocIndex:0},{value:" interaction targets chart elements. When the mouse hovers over an element, that element will be highlighted.",paraId:0,tocIndex:0},{value:"Trigger: Mouse hover over element.",paraId:1,tocIndex:0},{value:"End: Mouse leaves element.",paraId:2,tocIndex:0},{value:"Affected states:",paraId:3,tocIndex:0},{value:"Hovered elements change to ",paraId:4,tocIndex:0},{value:"active",paraId:4,tocIndex:0},{value:" state.",paraId:4,tocIndex:0},{value:"Other elements change to ",paraId:5,tocIndex:0},{value:"inactive",paraId:5,tocIndex:0},{value:" state.",paraId:5,tocIndex:0},{value:"Built-in interaction states:",paraId:6,tocIndex:0},{value:"({\n  // Active state elements have 1px black border\n  state: { active: { lineWidth: '1', stroke: '#000' } },\n});\n",paraId:7,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency' },\n  state: { active: { fill: 'orange' }, inactive: { opacity: 0.5 } },\n  axis: { y: { labelFormatter: '.0%' } },\n  interaction: { elementHighlight: true },\n});\n\nchart.render();\n",paraId:8,tocIndex:0},{value:"There are two ways to configure the ",paraId:9,tocIndex:1},{value:"elementHighlight",paraId:9,tocIndex:1},{value:" interaction:",paraId:9,tocIndex:1},{value:"First, pass a ",paraId:10,tocIndex:1},{value:"boolean",paraId:10,tocIndex:1},{value:" to set whether to enable the interaction.",paraId:10,tocIndex:1},{value:"({\n  type: 'interval',\n  interaction: { elementHighlight: true }, // Use default configuration\n});\n",paraId:11,tocIndex:1},{value:"Second, pass ",paraId:12,tocIndex:1},{value:"configuration options",paraId:13,tocIndex:1},{value:" to configure the interaction.",paraId:12,tocIndex:1},{value:"({\n  type: 'line',\n  interaction: {\n    elementHighlight: {\n      background: true,\n    },\n  },\n});\n",paraId:14,tocIndex:1},{value:"Interaction can be configured at the Mark level:",paraId:15,tocIndex:2},{value:"({\n  type: 'interval',\n  interaction: { elementHighlight: true },\n});\n",paraId:16,tocIndex:2},{value:"It can also be configured at the View level. Interactions declared on the view will be passed to marks declared in ",paraId:17,tocIndex:2},{value:"children",paraId:17,tocIndex:2},{value:". If the mark has declared the corresponding interaction, they will be merged; otherwise, it won't be affected.",paraId:17,tocIndex:2},{value:"({\n  type: 'view',\n  interaction: { elementHighlight: true },\n});\n",paraId:18,tocIndex:2},{value:"Element highlight interaction configuration has two parts:",paraId:19,tocIndex:3},{value:"Interaction configuration",paraId:20,tocIndex:3},{value:"Element highlight style",paraId:20,tocIndex:3},{value:"Property",paraId:21,tocIndex:4},{value:"Description",paraId:21,tocIndex:4},{value:"Type",paraId:21,tocIndex:4},{value:"Default",paraId:21,tocIndex:4},{value:"background",paraId:21,tocIndex:4},{value:"Whether to highlight background",paraId:21,tocIndex:4},{value:"boolean",paraId:21,tocIndex:4},{value:"false",paraId:21,tocIndex:4},{value:"region",paraId:21,tocIndex:4},{value:"Whether to trigger highlight when mouse moves to empty area of element (see below)",paraId:21,tocIndex:4},{value:"boolean",paraId:21,tocIndex:4},{value:"false",paraId:21,tocIndex:4},{value:"Element highlight style, see example ",paraId:22,tocIndex:5},{value:"Custom Highlight",paraId:23,tocIndex:5},{value:"Property",paraId:24,tocIndex:5},{value:"Description",paraId:24,tocIndex:5},{value:"Type",paraId:24,tocIndex:5},{value:"Default",paraId:24,tocIndex:5},{value:"Required",paraId:24,tocIndex:5},{value:"offset",paraId:24,tocIndex:5},{value:"Offset in the main direction",paraId:24,tocIndex:5},{value:"number",paraId:24,tocIndex:5},{value:"0",paraId:24,tocIndex:5},{value:"backgroundRadius",paraId:24,tocIndex:5},{value:"Background border radius",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"0",paraId:24,tocIndex:5},{value:"backgroundFill",paraId:24,tocIndex:5},{value:"Background fill color",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"transparent",paraId:24,tocIndex:5},{value:"backgroundFillOpacity",paraId:24,tocIndex:5},{value:"Background fill opacity",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundStroke",paraId:24,tocIndex:5},{value:"Background stroke",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundStrokeOpacity",paraId:24,tocIndex:5},{value:"Background stroke opacity",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundLineWidth",paraId:24,tocIndex:5},{value:"Background stroke width",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundLineDash",paraId:24,tocIndex:5},{value:"Background stroke dash configuration. First value is dash length, second is gap length. Setting lineDash to [0,0] means no stroke.",paraId:24,tocIndex:5},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundOpacity",paraId:24,tocIndex:5},{value:"Background overall opacity",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundShadowColor",paraId:24,tocIndex:5},{value:"Background shadow color",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundShadowBlur",paraId:24,tocIndex:5},{value:"Background shadow Gaussian blur coefficient",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundShadowOffsetX",paraId:24,tocIndex:5},{value:"Set horizontal distance of shadow from background",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundShadowOffsetY",paraId:24,tocIndex:5},{value:"Set vertical distance of shadow from background",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundCursor",paraId:24,tocIndex:5},{value:"Background mouse cursor style. Same as CSS cursor style.",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"default",paraId:24,tocIndex:5},{value:"When configuring background in active elements, it's not configured as an object, but using the ",paraId:25,tocIndex:5},{value:"background",paraId:25,tocIndex:5},{value:" prefix with property names.",paraId:25,tocIndex:5},{value:"({\n  state: {\n    active: {\n      backgroundRadius: 50,\n      backgroundFill: '#000',\n      backgroundFillOpacity: 0.9,\n      backgroundStroke: '#DAF5EC',\n      backgroundStrokeOpacity: 0.9,\n      backgroundLineWidth: 2,\n      backgroundLineDash: [4, 8],\n      backgroundOpacity: 1,\n      backgroundShadowColor: '#d3d3d3',\n      backgroundShadowBlur: 10,\n      backgroundShadowOffsetX: 10,\n      backgroundShadowOffsetY: 10,\n      backgroundCursor: 'pointer',\n    },\n  },\n});\n",paraId:26,tocIndex:5},{value:"The following events are supported:",paraId:27,tocIndex:7},{value:"element:highlight",paraId:28,tocIndex:7},{value:" - Triggered when element is highlighted",paraId:28,tocIndex:7},{value:"element:unhighlight",paraId:28,tocIndex:7},{value:" - Triggered when element highlight is removed",paraId:28,tocIndex:7},{value:"chart.on('element:highlight', (e) => {\n  console.log(e.data.data);\n  console.log(e.data.group);\n  console.log(e.nativeEvent);\n});\n\nchart.on('element:unhighlight', (e) => {\n  console.log(e.nativeEvent);\n});\n",paraId:29,tocIndex:7},{value:"The following events are supported:",paraId:30,tocIndex:8},{value:"element:highlight",paraId:31,tocIndex:8},{value:" - Highlight data",paraId:31,tocIndex:8},{value:"element:unhighlight",paraId:31,tocIndex:8},{value:" - Remove highlight",paraId:31,tocIndex:8},{value:"chart.emit('element:highlight', {\n  data: { data: { population: 5038433 } },\n});\n\nchart.emit('element:unhighlight', {});\n",paraId:32,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency' },\n  transform: [{ type: 'sortX', by: 'y', reverse: true, slice: 5 }],\n  axis: { y: { labelFormatter: '.0%' } },\n  interaction: { elementHighlight: { background: true, region: true } },\n});\n\nchart.render();\n",paraId:33,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency' },\n  transform: [{ type: 'sortX', by: 'y', reverse: true, slice: 5 }],\n  axis: { y: { labelFormatter: '.0%' } },\n  scale: {\n    y: {\n      nice: true,\n    },\n  },\n  state: {\n    active: {\n      offset: 1,\n      backgroundRadius: 8,\n      backgroundFill: (d) => (d.frequency > 0.1 ? '#EF4444' : '#3B82F6'),\n      backgroundFillOpacity: 0.15,\n      backgroundStroke: (d) => (d.frequency > 0.1 ? '#EF4444' : '#3B82F6'),\n      backgroundStrokeOpacity: 0.8,\n      backgroundLineWidth: 2,\n      backgroundShadowColor: (d) => (d.frequency > 0.1 ? '#EF4444' : '#3B82F6'),\n      backgroundShadowBlur: 8,\n      backgroundShadowOffsetX: 0,\n      backgroundShadowOffsetY: 2,\n      backgroundCursor: 'pointer',\n      fill: '#FFFFFF',\n      stroke: (d) => (d.frequency > 0.1 ? '#EF4444' : '#3B82F6'),\n      strokeWidth: 2,\n    },\n  },\n  interaction: {\n    elementHighlight: {\n      background: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:34,tocIndex:11},{value:"Line Mark Characteristics",paraId:35,tocIndex:12},{value:":",paraId:35,tocIndex:12},{value:"Each line corresponds to one graphic element (Path), containing multiple data points",paraId:36,tocIndex:12},{value:"The line's ",paraId:36,tocIndex:12},{value:"__data__",paraId:36,tocIndex:12},{value:" includes aggregated data from all points, where x/y values are typically the coordinates of the first data point",paraId:36,tocIndex:12},{value:"When rendering background highlight, the ",paraId:36,tocIndex:12},{value:"renderBackground",paraId:36,tocIndex:12},{value:" function calculates background rectangles based on the first data point's position",paraId:36,tocIndex:12},{value:"If the x-axis uses an ordinal scale (band scale), the background rectangle only covers the bandwidth range corresponding to the first data point",paraId:36,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'line',\n  state: {\n    active: {\n      backgroundFill: 'red',\n    },\n  },\n  interaction: {\n    elementHighlight: {\n      background: true,\n    },\n  },\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: { x: { range: [0, 1] }, y: { domainMin: 0, nice: true } },\n});\n\nchart.render();\n",paraId:37,tocIndex:12},{value:"From the example above, we can see that the background highlight only appears at the starting point of the line, making the effect look incomplete. For Line Mark, it's recommended to use style properties like ",paraId:38,tocIndex:12},{value:"stroke",paraId:38,tocIndex:12},{value:" and ",paraId:38,tocIndex:12},{value:"strokeWidth",paraId:38,tocIndex:12},{value:" for highlighting. However, if you want to achieve background highlighting, it's possible by combining other marks in G2, such as the ",paraId:38,tocIndex:12},{value:"point",paraId:38,tocIndex:12},{value:" mark.",paraId:38,tocIndex:12},{value:"Point Mark Characteristics",paraId:39,tocIndex:12},{value:":",paraId:39,tocIndex:12},{value:"Each data point corresponds to an independent graphic element (such as Circle)",paraId:40,tocIndex:12},{value:"Each point has its own independent ",paraId:40,tocIndex:12},{value:"__data__",paraId:40,tocIndex:12},{value:", containing the complete coordinate information for that point",paraId:40,tocIndex:12},{value:"Background highlighting calculates and renders background rectangles individually for each point",paraId:40,tocIndex:12},{value:"Each point's background rectangle completely covers its corresponding bandwidth range",paraId:40,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'view',\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: { x: { range: [0, 1] }, y: { domainMin: 0, nice: true } },\n  children: [\n    {\n      type: 'line',\n      interaction: {\n        elementHighlight: false, // Disable highlight interaction\n      },\n    },\n    {\n      type: 'point',\n      style: { fill: 'white', stroke: '#1890ff', strokeWidth: 2 },\n      // Point uses background highlight effect for better results\n      state: {\n        active: {\n          backgroundFill: 'red',\n          backgroundFillOpacity: 0.3,\n          fill: 'red',\n          r: 6,\n        },\n      },\n      interaction: {\n        elementHighlight: { background: true, region: true },\n      },\n      tooltip: false, // Disable point tooltip to avoid duplicate display\n    },\n  ],\n});\n\nchart.render();\n",paraId:41,tocIndex:12}]},36733:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(42129);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"elementHighlightByColor",paraId:0,tocIndex:0},{value:" interaction targets chart elements. When the mouse hovers over an element, it highlights all elements with the same color channel value as the hovered element.",paraId:0,tocIndex:0},{value:"Trigger: Mouse hover over element.",paraId:1,tocIndex:0},{value:"End: Mouse leaves element.",paraId:2,tocIndex:0},{value:"Affected states:",paraId:3,tocIndex:0},{value:"Hovered elements change to ",paraId:4,tocIndex:0},{value:"active",paraId:4,tocIndex:0},{value:" state.",paraId:4,tocIndex:0},{value:"Other elements change to ",paraId:5,tocIndex:0},{value:"inactive",paraId:5,tocIndex:0},{value:" state.",paraId:5,tocIndex:0},{value:"Built-in interaction states:",paraId:6,tocIndex:0},{value:"({\n  // Active state elements have 1px black border\n  state: { active: { lineWidth: '1', stroke: '#000' } },\n});\n",paraId:7,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'stackY' },\n    { type: 'sortX', by: 'y', reverse: true, slice: 5 },\n  ],\n  state: {\n    active: { fill: 'red', linkFillOpacity: 0.5 },\n    inactive: { opacity: 0.5 },\n  },\n  axis: { y: { labelFormatter: '~s' } },\n  interaction: { elementHighlightByColor: { link: true } },\n});\n\nchart.render();\n",paraId:8,tocIndex:0},{value:"There are two ways to configure the ",paraId:9,tocIndex:1},{value:"elementHighlightByColor",paraId:9,tocIndex:1},{value:" interaction:",paraId:9,tocIndex:1},{value:"First, pass a ",paraId:10,tocIndex:1},{value:"boolean",paraId:10,tocIndex:1},{value:" to set whether to enable the interaction.",paraId:10,tocIndex:1},{value:"({\n  type: 'interval',\n  interaction: { elementHighlightByColor: true }, // Use default configuration\n});\n",paraId:11,tocIndex:1},{value:"Second, pass ",paraId:12,tocIndex:1},{value:"configuration options",paraId:13,tocIndex:1},{value:" to configure the interaction.",paraId:12,tocIndex:1},{value:"({\n  type: 'line',\n  interaction: {\n    elementHighlightByColor: {\n      background: true,\n    },\n  },\n});\n",paraId:14,tocIndex:1},{value:"Interaction can be configured at the Mark level:",paraId:15,tocIndex:2},{value:"({\n  type: 'interval',\n  interaction: { elementHighlightByColor: true },\n});\n",paraId:16,tocIndex:2},{value:"It can also be configured at the View level. Interactions declared on the view will be passed to marks declared in ",paraId:17,tocIndex:2},{value:"children",paraId:17,tocIndex:2},{value:". If the mark has declared the corresponding interaction, they will be merged; otherwise, it won't be affected.",paraId:17,tocIndex:2},{value:"({\n  type: 'view',\n  interaction: { elementHighlightByColor: true },\n});\n",paraId:18,tocIndex:2},{value:"Element highlight interaction configuration has two parts:",paraId:19,tocIndex:3},{value:"Interaction configuration",paraId:20,tocIndex:3},{value:"Element highlight style",paraId:20,tocIndex:3},{value:"Interaction configuration",paraId:21,tocIndex:3},{value:"Property",paraId:22,tocIndex:3},{value:"Description",paraId:22,tocIndex:3},{value:"Type",paraId:22,tocIndex:3},{value:"Default",paraId:22,tocIndex:3},{value:"background",paraId:22,tocIndex:3},{value:"Whether to highlight background",paraId:22,tocIndex:3},{value:"boolean",paraId:22,tocIndex:3},{value:"false",paraId:22,tocIndex:3},{value:"region",paraId:22,tocIndex:3},{value:"Whether to trigger highlight when mouse moves to empty area of element (see below)",paraId:22,tocIndex:3},{value:"boolean",paraId:22,tocIndex:3},{value:"false",paraId:22,tocIndex:3},{value:"link",paraId:22,tocIndex:3},{value:"Whether to show connection lines",paraId:22,tocIndex:3},{value:"boolean",paraId:22,tocIndex:3},{value:"false",paraId:22,tocIndex:3},{value:"Element highlight style configuration",paraId:23,tocIndex:3},{value:"Property",paraId:24,tocIndex:3},{value:"Description",paraId:24,tocIndex:3},{value:"Type",paraId:24,tocIndex:3},{value:"Default",paraId:24,tocIndex:3},{value:"offset",paraId:24,tocIndex:3},{value:"Offset in the main direction",paraId:24,tocIndex:3},{value:"number",paraId:24,tocIndex:3},{value:"0",paraId:24,tocIndex:3},{value:"background",paraId:24,tocIndex:3},{value:"Whether to highlight background",paraId:24,tocIndex:3},{value:"backgroundStyle",paraId:25,tocIndex:3},{value:"See ",paraId:24,tocIndex:3},{value:"backgroundstyle",paraId:26,tocIndex:3},{value:"link",paraId:24,tocIndex:3},{value:"Whether to show connection lines",paraId:24,tocIndex:3},{value:"linkStyle",paraId:27,tocIndex:3},{value:"See ",paraId:24,tocIndex:3},{value:"linkStyle",paraId:28,tocIndex:3},{value:"Element highlight background style, see example ",paraId:29,tocIndex:4},{value:"Custom Highlight",paraId:30,tocIndex:4},{value:"Property",paraId:31,tocIndex:4},{value:"Description",paraId:31,tocIndex:4},{value:"Type",paraId:31,tocIndex:4},{value:"Default",paraId:31,tocIndex:4},{value:"Required",paraId:31,tocIndex:4},{value:"backgroundRadius",paraId:31,tocIndex:4},{value:"Background border radius",paraId:31,tocIndex:4},{value:"number | (datum, index, data) => number",paraId:31,tocIndex:4},{value:"0",paraId:31,tocIndex:4},{value:"backgroundFill",paraId:31,tocIndex:4},{value:"Background fill color",paraId:31,tocIndex:4},{value:"string | (datum, index, data) => string",paraId:31,tocIndex:4},{value:"transparent",paraId:31,tocIndex:4},{value:"backgroundFillOpacity",paraId:31,tocIndex:4},{value:"Background fill opacity",paraId:31,tocIndex:4},{value:"number | (datum, index, data) => number",paraId:31,tocIndex:4},{value:"-",paraId:31,tocIndex:4},{value:"backgroundStroke",paraId:31,tocIndex:4},{value:"Background stroke",paraId:31,tocIndex:4},{value:"string | (datum, index, data) => string",paraId:31,tocIndex:4},{value:"-",paraId:31,tocIndex:4},{value:"backgroundStrokeOpacity",paraId:31,tocIndex:4},{value:"Background stroke opacity",paraId:31,tocIndex:4},{value:"number | (datum, index, data) => number",paraId:31,tocIndex:4},{value:"-",paraId:31,tocIndex:4},{value:"backgroundLineWidth",paraId:31,tocIndex:4},{value:"Background stroke width",paraId:31,tocIndex:4},{value:"number | (datum, index, data) => number",paraId:31,tocIndex:4},{value:"-",paraId:31,tocIndex:4},{value:"backgroundLineDash",paraId:31,tocIndex:4},{value:"Background stroke dash configuration. First value is dash length, second is gap length. Setting lineDash to [0,0] means no stroke.",paraId:31,tocIndex:4},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:31,tocIndex:4},{value:"-",paraId:31,tocIndex:4},{value:"backgroundOpacity",paraId:31,tocIndex:4},{value:"Background overall opacity",paraId:31,tocIndex:4},{value:"number | (datum, index, data) => number",paraId:31,tocIndex:4},{value:"-",paraId:31,tocIndex:4},{value:"backgroundShadowColor",paraId:31,tocIndex:4},{value:"Background shadow color",paraId:31,tocIndex:4},{value:"string | (datum, index, data) => string",paraId:31,tocIndex:4},{value:"-",paraId:31,tocIndex:4},{value:"backgroundShadowBlur",paraId:31,tocIndex:4},{value:"Background shadow Gaussian blur coefficient",paraId:31,tocIndex:4},{value:"number | (datum, index, data) => number",paraId:31,tocIndex:4},{value:"-",paraId:31,tocIndex:4},{value:"backgroundShadowOffsetX",paraId:31,tocIndex:4},{value:"Set horizontal distance of shadow from background",paraId:31,tocIndex:4},{value:"number | (datum, index, data) => number",paraId:31,tocIndex:4},{value:"-",paraId:31,tocIndex:4},{value:"backgroundShadowOffsetY",paraId:31,tocIndex:4},{value:"Set vertical distance of shadow from background",paraId:31,tocIndex:4},{value:"number | (datum, index, data) => number",paraId:31,tocIndex:4},{value:"-",paraId:31,tocIndex:4},{value:"backgroundCursor",paraId:31,tocIndex:4},{value:"Background mouse cursor style. Same as CSS cursor style.",paraId:31,tocIndex:4},{value:"string | (datum, index, data) => string",paraId:31,tocIndex:4},{value:"default",paraId:31,tocIndex:4},{value:"({\n  state: {\n    active: {\n      backgroundRadius: 50,\n      backgroundFill: '#000',\n      backgroundFillOpacity: 0.9,\n      backgroundStroke: '#DAF5EC',\n      backgroundStrokeOpacity: 0.9,\n      backgroundLineWidth: 2,\n      backgroundLineDash: [4, 8],\n      backgroundOpacity: 1,\n      backgroundShadowColor: '#d3d3d3',\n      backgroundShadowBlur: 10,\n      backgroundShadowOffsetX: 10,\n      backgroundShadowOffsetY: 10,\n      backgroundCursor: 'pointer',\n    },\n  },\n});\n",paraId:32,tocIndex:4},{value:"Connection style, see example ",paraId:33,tocIndex:5},{value:"Connection Line Highlight",paraId:34,tocIndex:5},{value:"Property",paraId:35,tocIndex:5},{value:"Description",paraId:35,tocIndex:5},{value:"Type",paraId:35,tocIndex:5},{value:"Default",paraId:35,tocIndex:5},{value:"Required",paraId:35,tocIndex:5},{value:"linkRadius",paraId:35,tocIndex:5},{value:"Connection line border radius",paraId:35,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:35,tocIndex:5},{value:"0",paraId:35,tocIndex:5},{value:"linkFill",paraId:35,tocIndex:5},{value:"Connection line fill color",paraId:35,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:35,tocIndex:5},{value:"transparent",paraId:35,tocIndex:5},{value:"linkFillOpacity",paraId:35,tocIndex:5},{value:"Connection line fill opacity",paraId:35,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:35,tocIndex:5},{value:"-",paraId:35,tocIndex:5},{value:"linkStroke",paraId:35,tocIndex:5},{value:"Connection line stroke",paraId:35,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:35,tocIndex:5},{value:"-",paraId:35,tocIndex:5},{value:"linkStrokeOpacity",paraId:35,tocIndex:5},{value:"Connection line stroke opacity",paraId:35,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:35,tocIndex:5},{value:"-",paraId:35,tocIndex:5},{value:"linkLineWidth",paraId:35,tocIndex:5},{value:"Connection line stroke width",paraId:35,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:35,tocIndex:5},{value:"-",paraId:35,tocIndex:5},{value:"linkLineDash",paraId:35,tocIndex:5},{value:"Connection line stroke dash configuration. First value is dash length, second is gap length. Setting lineDash to [0,0] means no stroke.",paraId:35,tocIndex:5},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:35,tocIndex:5},{value:"-",paraId:35,tocIndex:5},{value:"linkOpacity",paraId:35,tocIndex:5},{value:"Connection line overall opacity",paraId:35,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:35,tocIndex:5},{value:"-",paraId:35,tocIndex:5},{value:"linkShadowColor",paraId:35,tocIndex:5},{value:"Connection line shadow color",paraId:35,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:35,tocIndex:5},{value:"-",paraId:35,tocIndex:5},{value:"linkShadowBlur",paraId:35,tocIndex:5},{value:"Connection line shadow Gaussian blur coefficient",paraId:35,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:35,tocIndex:5},{value:"-",paraId:35,tocIndex:5},{value:"linkShadowOffsetX",paraId:35,tocIndex:5},{value:"Set horizontal distance of shadow from connection line",paraId:35,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:35,tocIndex:5},{value:"-",paraId:35,tocIndex:5},{value:"linkShadowOffsetY",paraId:35,tocIndex:5},{value:"Set vertical distance of shadow from connection line",paraId:35,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:35,tocIndex:5},{value:"-",paraId:35,tocIndex:5},{value:"linkCursor",paraId:35,tocIndex:5},{value:"Connection line mouse cursor style. Same as CSS cursor style.",paraId:35,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:35,tocIndex:5},{value:"default",paraId:35,tocIndex:5},{value:"({\n  state: {\n    active: {\n      linkRadius: 50,\n      linkFill: '#000',\n      linkFillOpacity: 0.9,\n      linkStroke: '#DAF5EC',\n      linkStrokeOpacity: 0.9,\n      linkLineWidth: 2,\n      linkLineDash: [4, 8],\n      linkOpacity: 1,\n      linkShadowColor: '#d3d3d3',\n      linkShadowBlur: 10,\n      linkShadowOffsetX: 10,\n      linkShadowOffsetY: 10,\n      linkCursor: 'pointer',\n    },\n  },\n});\n",paraId:36,tocIndex:5},{value:"The following events are supported:",paraId:37,tocIndex:7},{value:"element:highlight",paraId:38,tocIndex:7},{value:" - Triggered when element is highlighted",paraId:38,tocIndex:7},{value:"element:unhighlight",paraId:38,tocIndex:7},{value:" - Triggered when element highlight is removed",paraId:38,tocIndex:7},{value:"chart.on('element:highlight', (e) => {\n  console.log(e.data.data);\n  console.log(e.data.group);\n  console.log(e.nativeEvent);\n});\n\nchart.on('element:unhighlight', (e) => {\n  console.log(e.nativeEvent);\n});\n",paraId:39,tocIndex:7},{value:"The following events are supported:",paraId:40,tocIndex:8},{value:"element:highlight",paraId:41,tocIndex:8},{value:" - Highlight data",paraId:41,tocIndex:8},{value:"element:unhighlight",paraId:41,tocIndex:8},{value:" - Remove highlight",paraId:41,tocIndex:8},{value:"chart.emit('element:highlight', {\n  data: { data: { population: 5038433 } },\n});\n\nchart.emit('element:unhighlight', {});\n",paraId:42,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'stackY' },\n    { type: 'sortX', by: 'y', reverse: true, slice: 5 },\n  ],\n  state: {\n    active: { fill: 'red', linkFillOpacity: 0.5 },\n    inactive: { opacity: 0.5 },\n  },\n  axis: { y: { labelFormatter: '~s' } },\n  interaction: { elementHighlightByColor: true },\n});\n\nchart.render();\n",paraId:43,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'stackY' },\n    { type: 'sortX', by: 'y', reverse: true, slice: 5 },\n  ],\n  state: {\n    active: {\n      fill: 'red',\n      linkRadius: 50,\n      linkFill: 'green',\n      linkFillOpacity: 0.9,\n      linkStroke: '#DAF5EC',\n      linkStrokeOpacity: 0.9,\n      linkLineWidth: 2,\n      linkOpacity: 1,\n      linkCursor: 'pointer',\n    },\n    inactive: { opacity: 0.5 },\n  },\n  axis: { y: { labelFormatter: '~s' } },\n  interaction: {\n    elementHighlightByColor: { link: true, background: true },\n  },\n});\n\nchart.render();\n",paraId:44,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  height: 600,\n  transform: [\n    { type: 'stackY' },\n    { type: 'sortX', by: 'y', reverse: true, slice: 5 },\n  ],\n  coordinate: { transform: [{ type: 'transpose' }] },\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  legend: false,\n  encode: {\n    x: 'state',\n    y: 'population',\n    color: 'age',\n  },\n  axis: {\n    y: { labelFormatter: '~s' },\n  },\n  scale: {\n    x: { paddingInner: 0.2 },\n  },\n  state: {\n    active: {\n      linkFill: (d) => (d.state === 'CA' ? 'red' : undefined),\n      stroke: '#000',\n      lineWidth: 1,\n      linkFillOpacity: 0.5,\n    },\n    inactive: {\n      opacity: 0.6,\n    },\n  },\n  interaction: {\n    elementHighlightByColor: {\n      link: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:45,tocIndex:12}]},25290:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(91982);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"elementHighlightByX",paraId:0,tocIndex:0},{value:" interaction targets chart elements. When the mouse hovers over an element, it highlights all elements with the same x channel value as the hovered element.",paraId:0,tocIndex:0},{value:"Trigger: Mouse hover over element.",paraId:1,tocIndex:0},{value:"End: Mouse leaves element.",paraId:2,tocIndex:0},{value:"Affected states:",paraId:3,tocIndex:0},{value:"Hovered elements change to ",paraId:4,tocIndex:0},{value:"active",paraId:4,tocIndex:0},{value:" state.",paraId:4,tocIndex:0},{value:"Other elements change to ",paraId:5,tocIndex:0},{value:"inactive",paraId:5,tocIndex:0},{value:" state.",paraId:5,tocIndex:0},{value:"Built-in interaction states:",paraId:6,tocIndex:0},{value:"({\n  // Active state elements have 1px black border\n  state: { active: { lineWidth: '1', stroke: '#000' } },\n});\n",paraId:7,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  paddingLeft: 50,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'sortX', by: 'y', reverse: true, slice: 6 },\n    { type: 'dodgeX' },\n  ],\n  state: { active: { fill: 'red' }, inactive: { opacity: 0.5 } },\n  axis: { y: { labelFormatter: '~s' } },\n  interaction: { elementHighlightByX: true },\n});\n\nchart.render();\n",paraId:8,tocIndex:1},{value:"There are two ways to configure the ",paraId:9,tocIndex:2},{value:"elementHighlightByX",paraId:9,tocIndex:2},{value:" interaction:",paraId:9,tocIndex:2},{value:"First, pass a ",paraId:10,tocIndex:2},{value:"boolean",paraId:10,tocIndex:2},{value:" to set whether to enable the interaction.",paraId:10,tocIndex:2},{value:"({\n  type: 'interval',\n  interaction: { elementHighlightByX: true }, // Use default configuration\n});\n",paraId:11,tocIndex:2},{value:"Second, pass ",paraId:12,tocIndex:2},{value:"configuration options",paraId:13,tocIndex:2},{value:" to configure the interaction.",paraId:12,tocIndex:2},{value:"({\n  type: 'line',\n  interaction: {\n    elementHighlightByX: {\n      background: true,\n    },\n  },\n});\n",paraId:14,tocIndex:2},{value:"Interaction can be configured at the Mark level:",paraId:15,tocIndex:3},{value:"({\n  type: 'interval',\n  interaction: { elementHighlightByX: true },\n});\n",paraId:16,tocIndex:3},{value:"It can also be configured at the View level. Interactions declared on the view will be passed to marks declared in ",paraId:17,tocIndex:3},{value:"children",paraId:17,tocIndex:3},{value:". If the mark has declared the corresponding interaction, they will be merged; otherwise, it won't be affected.",paraId:17,tocIndex:3},{value:"({\n  type: 'view',\n  interaction: { elementHighlightByX: true },\n});\n",paraId:18,tocIndex:3},{value:"Interaction configuration",paraId:19,tocIndex:4},{value:"Property",paraId:20,tocIndex:4},{value:"Description",paraId:20,tocIndex:4},{value:"Type",paraId:20,tocIndex:4},{value:"Default",paraId:20,tocIndex:4},{value:"background",paraId:20,tocIndex:4},{value:"Whether to highlight background",paraId:20,tocIndex:4},{value:"boolean",paraId:20,tocIndex:4},{value:"false",paraId:20,tocIndex:4},{value:"region",paraId:20,tocIndex:4},{value:"Whether to trigger highlight when mouse moves to empty area of element (see below)",paraId:20,tocIndex:4},{value:"boolean",paraId:20,tocIndex:4},{value:"false",paraId:20,tocIndex:4},{value:"Element highlight style configuration",paraId:21,tocIndex:4},{value:"Property",paraId:22,tocIndex:4},{value:"Description",paraId:22,tocIndex:4},{value:"Type",paraId:22,tocIndex:4},{value:"Default",paraId:22,tocIndex:4},{value:"offset",paraId:22,tocIndex:4},{value:"Offset in the main direction",paraId:22,tocIndex:4},{value:"number",paraId:22,tocIndex:4},{value:"0",paraId:22,tocIndex:4},{value:"background",paraId:22,tocIndex:4},{value:"Whether to highlight background",paraId:22,tocIndex:4},{value:"backgroundStyle",paraId:23,tocIndex:4},{value:"See ",paraId:22,tocIndex:4},{value:"backgroundStyle",paraId:24,tocIndex:4},{value:"The following events are supported:",paraId:25,tocIndex:6},{value:"element:highlight",paraId:26,tocIndex:6},{value:" - Triggered when element is highlighted",paraId:26,tocIndex:6},{value:"element:unhighlight",paraId:26,tocIndex:6},{value:" - Triggered when element highlight is removed",paraId:26,tocIndex:6},{value:"chart.on('element:highlight', (e) => {\n  console.log(e.data.data);\n  console.log(e.data.group);\n  console.log(e.nativeEvent);\n});\n\nchart.on('element:unhighlight', (e) => {\n  console.log(e.nativeEvent);\n});\n",paraId:27,tocIndex:6},{value:"The following events are supported:",paraId:28,tocIndex:7},{value:"element:highlight",paraId:29,tocIndex:7},{value:" - Highlight data",paraId:29,tocIndex:7},{value:"element:unhighlight",paraId:29,tocIndex:7},{value:" - Remove highlight",paraId:29,tocIndex:7},{value:"chart.emit('element:highlight', {\n  data: { data: { population: 5038433 } },\n});\n\nchart.emit('element:unhighlight', {});\n",paraId:30,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  paddingLeft: 50,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'sortX', by: 'y', reverse: true, slice: 6 },\n    { type: 'dodgeX' },\n  ],\n  axis: { y: { labelFormatter: '~s' } },\n  interaction: { elementHighlightByX: true },\n});\n\nchart.render();\n",paraId:31,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'stackY' },\n    { type: 'sortX', by: 'y', reverse: true, slice: 5 },\n  ],\n  state: {\n    active: { fill: 'red', linkFillOpacity: 0.5 },\n    inactive: { opacity: 0.5 },\n  },\n  axis: { y: { labelFormatter: '~s' } },\n  interaction: { elementHighlightByX: true },\n});\n\nchart.render();\n",paraId:32,tocIndex:10}]},19117:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(64016);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"elementSelect",paraId:0,tocIndex:0},{value:" interaction targets chart elements. When clicking an element, that element will be selected.",paraId:0,tocIndex:0},{value:"Trigger: Click element.",paraId:1,tocIndex:0},{value:"End: Click the selected element again.",paraId:2,tocIndex:0},{value:"Affected states:",paraId:3,tocIndex:0},{value:"Selected elements change to ",paraId:4,tocIndex:0},{value:"selected",paraId:4,tocIndex:0},{value:" state.",paraId:4,tocIndex:0},{value:"Other elements change to ",paraId:5,tocIndex:0},{value:"unselected",paraId:5,tocIndex:0},{value:" state.",paraId:5,tocIndex:0},{value:"Built-in interaction states:",paraId:6,tocIndex:0},{value:"({\n  // Selected state elements have 1px black border\n  state: { selected: { lineWidth: '1', stroke: '#000' } },\n});\n",paraId:7,tocIndex:0},{value:"The interaction supports two modes:",paraId:8,tocIndex:0},{value:"Multi-select mode (default): Multiple elements can be selected simultaneously",paraId:9,tocIndex:0},{value:"Single-select mode: Enabled by setting ",paraId:9,tocIndex:0},{value:"single: true",paraId:9,tocIndex:0},{value:", only one element can be selected at a time",paraId:9,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency' },\n  state: { selected: { fill: 'orange' }, unselected: { opacity: 0.5 } },\n  axis: { y: { labelFormatter: '.0%' } },\n  interaction: { elementSelect: true },\n});\n\nchart.render();\n",paraId:10,tocIndex:0},{value:"There are two ways to configure the ",paraId:11,tocIndex:1},{value:"elementSelect",paraId:11,tocIndex:1},{value:" interaction:",paraId:11,tocIndex:1},{value:"First, pass a ",paraId:12,tocIndex:1},{value:"boolean",paraId:12,tocIndex:1},{value:" to set whether to enable the interaction.",paraId:12,tocIndex:1},{value:"({\n  type: 'interval',\n  interaction: { elementSelect: true }, // Use default configuration\n});\n",paraId:13,tocIndex:1},{value:"Second, pass ",paraId:14,tocIndex:1},{value:"configuration options",paraId:15,tocIndex:1},{value:" to configure the interaction.",paraId:14,tocIndex:1},{value:"({\n  type: 'line',\n  interaction: {\n    elementSelect: {\n      background: true,\n      single: true, // Set to single-select mode\n    },\n  },\n});\n",paraId:16,tocIndex:1},{value:"Interaction can be configured at the Mark level:",paraId:17,tocIndex:2},{value:"({\n  type: 'interval',\n  interaction: { elementSelect: true },\n});\n",paraId:18,tocIndex:2},{value:"It can also be configured at the View level. Interactions declared on the view will be passed to marks declared in ",paraId:19,tocIndex:2},{value:"children",paraId:19,tocIndex:2},{value:". If the mark has declared the corresponding interaction, they will be merged; otherwise, it won't be affected.",paraId:19,tocIndex:2},{value:"({\n  type: 'view',\n  interaction: { elementSelect: true },\n});\n",paraId:20,tocIndex:2},{value:"Element select interaction configuration has two parts:",paraId:21,tocIndex:3},{value:"Interaction configuration",paraId:22,tocIndex:3},{value:"Element selection style",paraId:22,tocIndex:3},{value:"Property",paraId:23,tocIndex:4},{value:"Description",paraId:23,tocIndex:4},{value:"Type",paraId:23,tocIndex:4},{value:"Default",paraId:23,tocIndex:4},{value:"background",paraId:23,tocIndex:4},{value:"Whether to highlight background",paraId:23,tocIndex:4},{value:"boolean",paraId:23,tocIndex:4},{value:"false",paraId:23,tocIndex:4},{value:"region",paraId:23,tocIndex:4},{value:"Whether clicking empty area triggers selection",paraId:23,tocIndex:4},{value:"boolean",paraId:23,tocIndex:4},{value:"false",paraId:23,tocIndex:4},{value:"single",paraId:23,tocIndex:4},{value:"Whether single-select mode. When set to true, only one element can be selected at a time. Clicking a selected element deselects it",paraId:23,tocIndex:4},{value:"boolean",paraId:23,tocIndex:4},{value:"false",paraId:23,tocIndex:4},{value:"multipleSelectHotkey",paraId:23,tocIndex:4},{value:"Hotkey code for multi-select. Hold hotkey to enable multi-select. When set, ",paraId:23,tocIndex:4},{value:"single",paraId:23,tocIndex:4},{value:" becomes invalid. Default to multi-select mode",paraId:23,tocIndex:4},{value:"string",paraId:23,tocIndex:4},{value:" | ",paraId:23,tocIndex:4},{value:"string[]",paraId:23,tocIndex:4},{value:"-",paraId:23,tocIndex:4},{value:"Element selection style, see example ",paraId:24,tocIndex:5},{value:"Custom Selection",paraId:25,tocIndex:5},{value:"Property",paraId:26,tocIndex:5},{value:"Description",paraId:26,tocIndex:5},{value:"Type",paraId:26,tocIndex:5},{value:"Default",paraId:26,tocIndex:5},{value:"Required",paraId:26,tocIndex:5},{value:"offset",paraId:26,tocIndex:5},{value:"Offset in the main direction",paraId:26,tocIndex:5},{value:"number",paraId:26,tocIndex:5},{value:"0",paraId:26,tocIndex:5},{value:"radius",paraId:26,tocIndex:5},{value:"Element border radius",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"0",paraId:26,tocIndex:5},{value:"fill",paraId:26,tocIndex:5},{value:"Element fill color",paraId:26,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"fillOpacity",paraId:26,tocIndex:5},{value:"Element fill opacity",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"stroke",paraId:26,tocIndex:5},{value:"Element stroke",paraId:26,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"strokeOpacity",paraId:26,tocIndex:5},{value:"Element stroke opacity",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"lineWidth",paraId:26,tocIndex:5},{value:"Element stroke width",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"lineDash",paraId:26,tocIndex:5},{value:"Element stroke dash configuration. First value is dash length, second is gap length. Setting lineDash to [0,0] means no stroke.",paraId:26,tocIndex:5},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"opacity",paraId:26,tocIndex:5},{value:"Element overall opacity",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"shadowColor",paraId:26,tocIndex:5},{value:"Element shadow color",paraId:26,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"shadowBlur",paraId:26,tocIndex:5},{value:"Element shadow Gaussian blur coefficient",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"shadowOffsetX",paraId:26,tocIndex:5},{value:"Set horizontal distance of shadow from element",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"shadowOffsetY",paraId:26,tocIndex:5},{value:"Set vertical distance of shadow from element",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"cursor",paraId:26,tocIndex:5},{value:"Element mouse cursor style. Same as CSS cursor style.",paraId:26,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:26,tocIndex:5},{value:"default",paraId:26,tocIndex:5},{value:"backgroundRadius",paraId:26,tocIndex:5},{value:"Background border radius",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"0",paraId:26,tocIndex:5},{value:"backgroundFill",paraId:26,tocIndex:5},{value:"Background fill color",paraId:26,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:26,tocIndex:5},{value:"transparent",paraId:26,tocIndex:5},{value:"backgroundFillOpacity",paraId:26,tocIndex:5},{value:"Background fill opacity",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"backgroundStroke",paraId:26,tocIndex:5},{value:"Background stroke",paraId:26,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"backgroundStrokeOpacity",paraId:26,tocIndex:5},{value:"Background stroke opacity",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"backgroundLineWidth",paraId:26,tocIndex:5},{value:"Background stroke width",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"backgroundLineDash",paraId:26,tocIndex:5},{value:"Background stroke dash configuration. First value is dash length, second is gap length. Setting lineDash to [0,0] means no stroke.",paraId:26,tocIndex:5},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"backgroundOpacity",paraId:26,tocIndex:5},{value:"Background overall opacity",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"backgroundShadowColor",paraId:26,tocIndex:5},{value:"Background shadow color",paraId:26,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"backgroundShadowBlur",paraId:26,tocIndex:5},{value:"Background shadow Gaussian blur coefficient",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"backgroundShadowOffsetX",paraId:26,tocIndex:5},{value:"Set horizontal distance of shadow from background",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"backgroundShadowOffsetY",paraId:26,tocIndex:5},{value:"Set vertical distance of shadow from background",paraId:26,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"backgroundCursor",paraId:26,tocIndex:5},{value:"Background mouse cursor style. Same as CSS cursor style.",paraId:26,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:26,tocIndex:5},{value:"default",paraId:26,tocIndex:5},{value:"When configuring background in selected elements, it's not configured as an object, but using the ",paraId:27,tocIndex:5},{value:"background",paraId:27,tocIndex:5},{value:" prefix with property names.",paraId:27,tocIndex:5},{value:"({\n  state: {\n    selected: {\n      offset: 10,\n      radius: 50,\n      fill: '#1890FF',\n      fillOpacity: 0.9,\n      stroke: '#40A9FF',\n      strokeOpacity: 0.9,\n      lineWidth: 2,\n      lineDash: [4, 8],\n      opacity: 1,\n      shadowColor: '#1890FF',\n      shadowBlur: 10,\n      shadowOffsetX: 5,\n      shadowOffsetY: 5,\n      cursor: 'pointer',\n      backgroundRadius: 50,\n      backgroundFill: '#E6F7FF',\n      backgroundFillOpacity: 0.9,\n      backgroundStroke: '#91D5FF',\n      backgroundStrokeOpacity: 0.9,\n      backgroundLineWidth: 2,\n      backgroundLineDash: [4, 8],\n      backgroundOpacity: 1,\n      backgroundShadowColor: '#91D5FF',\n      backgroundShadowBlur: 10,\n      backgroundShadowOffsetX: 5,\n      backgroundShadowOffsetY: 5,\n      backgroundCursor: 'pointer',\n    },\n  },\n});\n",paraId:28,tocIndex:5},{value:"The following events are supported:",paraId:29,tocIndex:7},{value:"element:select",paraId:30,tocIndex:7},{value:" - Triggered when element is selected",paraId:30,tocIndex:7},{value:"element:unselect",paraId:30,tocIndex:7},{value:" - Triggered when element is deselected",paraId:30,tocIndex:7},{value:"chart.on('element:select', (e) => {\n  console.log(e.data.data);\n  console.log(e.nativeEvent);\n});\n\nchart.on('element:unselect', (e) => {\n  console.log(e.nativeEvent);\n});\n",paraId:31,tocIndex:7},{value:"The following events are supported:",paraId:32,tocIndex:8},{value:"element:select",paraId:33,tocIndex:8},{value:" - Select data",paraId:33,tocIndex:8},{value:"element:unselect",paraId:33,tocIndex:8},{value:" - Deselect",paraId:33,tocIndex:8},{value:"chart.emit('element:select', {\n  data: { data: [{ population: 5038433 }, { population: 3983091 }] },\n});\n\nchart.emit('element:unselect', {});\n",paraId:34,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency' },\n  transform: [{ type: 'sortX', by: 'y', reverse: true, slice: 5 }],\n  axis: { y: { labelFormatter: '.0%' } },\n  interaction: { elementSelect: { background: true } },\n});\n\nchart.render();\n",paraId:35,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency' },\n  transform: [{ type: 'sortX', by: 'y', reverse: true, slice: 5 }],\n  axis: { y: { labelFormatter: '.0%' } },\n  state: {\n    selected: {\n      offset: 10,\n      radius: 50,\n      fill: (d) => (d.frequency > 0.1 ? '#F5222D' : '#1890FF'),\n      fillOpacity: 0.9,\n      stroke: (d) => (d.frequency > 0.1 ? '#FF4D4F' : '#40A9FF'),\n      strokeOpacity: 0.9,\n      lineWidth: 2,\n      lineDash: [4, 8],\n      opacity: 1,\n      shadowColor: (d) => (d.frequency > 0.1 ? '#F5222D' : '#1890FF'),\n      shadowBlur: 10,\n      shadowOffsetX: 5,\n      shadowOffsetY: 5,\n      cursor: 'pointer',\n      backgroundRadius: 50,\n      backgroundFill: (d) => (d.frequency > 0.1 ? '#FFF1F0' : '#E6F7FF'),\n      backgroundFillOpacity: 0.9,\n      backgroundStroke: (d) => (d.frequency > 0.1 ? '#FFA39E' : '#91D5FF'),\n      backgroundStrokeOpacity: 0.9,\n      backgroundLineWidth: 2,\n      backgroundLineDash: [4, 8],\n      backgroundOpacity: 1,\n      backgroundShadowColor: (d) => (d.frequency > 0.1 ? '#FFA39E' : '#91D5FF'),\n      backgroundShadowBlur: 10,\n      backgroundShadowOffsetX: 5,\n      backgroundShadowOffsetY: 5,\n      backgroundCursor: 'pointer',\n    },\n  },\n  interaction: {\n    elementSelect: {\n      background: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:36,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency' },\n  transform: [{ type: 'sortX', by: 'y', reverse: true, slice: 5 }],\n  axis: { y: { labelFormatter: '.0%' } },\n  interaction: {\n    elementSelect: {\n      single: true, // Set to single-select mode\n      background: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:37,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency' },\n  transform: [{ type: 'sortX', by: 'y', reverse: true, slice: 5 }],\n  axis: { y: { labelFormatter: '.0%' } },\n  interaction: {\n    elementSelect: {\n      multipleSelectHotkey: 'ShiftLeft', // Hold left Shift key to enter multi-select mode\n      background: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:38,tocIndex:13}]},37374:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(42394);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"elementSelectByColor",paraId:0,tocIndex:0},{value:" interaction targets chart elements. When clicking an element, it selects all elements with the same color channel value.",paraId:0,tocIndex:0},{value:"Trigger: Click element.",paraId:1,tocIndex:0},{value:"End: Click the selected element again.",paraId:2,tocIndex:0},{value:"Affected states:",paraId:3,tocIndex:0},{value:"Selected elements change to ",paraId:4,tocIndex:0},{value:"selected",paraId:4,tocIndex:0},{value:" state.",paraId:4,tocIndex:0},{value:"Other elements change to ",paraId:5,tocIndex:0},{value:"unselected",paraId:5,tocIndex:0},{value:" state.",paraId:5,tocIndex:0},{value:"Built-in interaction states:",paraId:6,tocIndex:0},{value:"({\n  // Selected state elements have 1px black border\n  state: { selected: { lineWidth: '1', stroke: '#000' } },\n});\n",paraId:7,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  transform: [\n    { type: 'stackY' },\n    { type: 'sortX', by: 'y', reverse: true, slice: 5 },\n  ],\n  encode: {\n    x: 'state',\n    y: 'population',\n    color: 'age',\n  },\n  axis: { y: { labelFormatter: '~s' } },\n  state: {\n    selected: { fill: 'red', linkFillOpacity: 0.5 },\n    unselected: { opacity: 0.5 },\n  },\n  interaction: {\n    elementSelectByColor: {\n      link: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:8,tocIndex:0},{value:"There are two ways to configure the ",paraId:9,tocIndex:1},{value:"elementSelectByColor",paraId:9,tocIndex:1},{value:" interaction:",paraId:9,tocIndex:1},{value:"First, pass a ",paraId:10,tocIndex:1},{value:"boolean",paraId:10,tocIndex:1},{value:" to set whether to enable the interaction.",paraId:10,tocIndex:1},{value:"({\n  type: 'interval',\n  interaction: { elementSelectByColor: true }, // Use default configuration\n});\n",paraId:11,tocIndex:1},{value:"Second, pass ",paraId:12,tocIndex:1},{value:"configuration options",paraId:13,tocIndex:1},{value:" to configure the interaction.",paraId:12,tocIndex:1},{value:"({\n  type: 'interval',\n  interaction: {\n    elementSelectByColor: {\n      link: true,\n      background: true,\n    },\n  },\n});\n",paraId:14,tocIndex:1},{value:"Interaction can be configured at the Mark level:",paraId:15,tocIndex:2},{value:"({\n  type: 'interval',\n  interaction: { elementSelectByColor: true },\n});\n",paraId:16,tocIndex:2},{value:"It can also be configured at the View level. Interactions declared on the view will be passed to marks declared in ",paraId:17,tocIndex:2},{value:"children",paraId:17,tocIndex:2},{value:". If the mark has declared the corresponding interaction, they will be merged; otherwise, it won't be affected.",paraId:17,tocIndex:2},{value:"({\n  type: 'view',\n  interaction: { elementSelectByColor: true },\n});\n",paraId:18,tocIndex:2},{value:"Element select by color interaction configuration has two parts:",paraId:19,tocIndex:3},{value:"Interaction configuration",paraId:20,tocIndex:3},{value:"Element selection style",paraId:20,tocIndex:3},{value:"Property",paraId:21,tocIndex:4},{value:"Description",paraId:21,tocIndex:4},{value:"Type",paraId:21,tocIndex:4},{value:"Default",paraId:21,tocIndex:4},{value:"background",paraId:21,tocIndex:4},{value:"Whether to highlight background",paraId:21,tocIndex:4},{value:"boolean",paraId:21,tocIndex:4},{value:"false",paraId:21,tocIndex:4},{value:"region",paraId:21,tocIndex:4},{value:"Whether clicking empty area triggers selection",paraId:21,tocIndex:4},{value:"boolean",paraId:21,tocIndex:4},{value:"false",paraId:21,tocIndex:4},{value:"single",paraId:21,tocIndex:4},{value:"Whether single-select mode. When set to true, only one color group can be selected at a time",paraId:21,tocIndex:4},{value:"boolean",paraId:21,tocIndex:4},{value:"false",paraId:21,tocIndex:4},{value:"multipleSelectHotkey",paraId:21,tocIndex:4},{value:"Hotkey code for multi-select. Hold hotkey to enable multi-select. When set, ",paraId:21,tocIndex:4},{value:"single",paraId:21,tocIndex:4},{value:" becomes invalid. Default to multi-select mode",paraId:21,tocIndex:4},{value:"string",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"string[]",paraId:21,tocIndex:4},{value:"-",paraId:21,tocIndex:4},{value:"link",paraId:21,tocIndex:4},{value:"Whether to show connection lines",paraId:21,tocIndex:4},{value:"boolean",paraId:21,tocIndex:4},{value:"false",paraId:21,tocIndex:4},{value:"Element selection style, see example ",paraId:22,tocIndex:5},{value:"Custom Selection",paraId:23,tocIndex:5},{value:"Property",paraId:24,tocIndex:5},{value:"Description",paraId:24,tocIndex:5},{value:"Type",paraId:24,tocIndex:5},{value:"Default",paraId:24,tocIndex:5},{value:"Required",paraId:24,tocIndex:5},{value:"offset",paraId:24,tocIndex:5},{value:"Offset in the main direction",paraId:24,tocIndex:5},{value:"number",paraId:24,tocIndex:5},{value:"0",paraId:24,tocIndex:5},{value:"radius",paraId:24,tocIndex:5},{value:"Element border radius",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"0",paraId:24,tocIndex:5},{value:"fill",paraId:24,tocIndex:5},{value:"Element fill color",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"fillOpacity",paraId:24,tocIndex:5},{value:"Element fill opacity",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"stroke",paraId:24,tocIndex:5},{value:"Element stroke",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"strokeOpacity",paraId:24,tocIndex:5},{value:"Element stroke opacity",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"lineWidth",paraId:24,tocIndex:5},{value:"Element stroke width",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"lineDash",paraId:24,tocIndex:5},{value:"Element stroke dash configuration. First value is dash length, second is gap length. Setting lineDash to [0,0] means no stroke.",paraId:24,tocIndex:5},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"opacity",paraId:24,tocIndex:5},{value:"Element overall opacity",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"shadowColor",paraId:24,tocIndex:5},{value:"Element shadow color",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"shadowBlur",paraId:24,tocIndex:5},{value:"Element shadow Gaussian blur coefficient",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"shadowOffsetX",paraId:24,tocIndex:5},{value:"Set horizontal distance of shadow from element",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"shadowOffsetY",paraId:24,tocIndex:5},{value:"Set vertical distance of shadow from element",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"cursor",paraId:24,tocIndex:5},{value:"Element mouse cursor style. Same as CSS cursor style.",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"default",paraId:24,tocIndex:5},{value:"backgroundRadius",paraId:24,tocIndex:5},{value:"Background border radius",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"0",paraId:24,tocIndex:5},{value:"backgroundFill",paraId:24,tocIndex:5},{value:"Background fill color",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"transparent",paraId:24,tocIndex:5},{value:"backgroundFillOpacity",paraId:24,tocIndex:5},{value:"Background fill opacity",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundStroke",paraId:24,tocIndex:5},{value:"Background stroke",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundStrokeOpacity",paraId:24,tocIndex:5},{value:"Background stroke opacity",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundLineWidth",paraId:24,tocIndex:5},{value:"Background stroke width",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundLineDash",paraId:24,tocIndex:5},{value:"Background stroke dash configuration. First value is dash length, second is gap length. Setting lineDash to [0,0] means no stroke.",paraId:24,tocIndex:5},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundOpacity",paraId:24,tocIndex:5},{value:"Background overall opacity",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundShadowColor",paraId:24,tocIndex:5},{value:"Background shadow color",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundShadowBlur",paraId:24,tocIndex:5},{value:"Background shadow Gaussian blur coefficient",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundShadowOffsetX",paraId:24,tocIndex:5},{value:"Set horizontal distance of shadow from background",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundShadowOffsetY",paraId:24,tocIndex:5},{value:"Set vertical distance of shadow from background",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundCursor",paraId:24,tocIndex:5},{value:"Background mouse cursor style. Same as CSS cursor style.",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"default",paraId:24,tocIndex:5},{value:"Connection style, see example ",paraId:25,tocIndex:6},{value:"Selection with Connection Lines",paraId:26,tocIndex:6},{value:"Property",paraId:27,tocIndex:6},{value:"Description",paraId:27,tocIndex:6},{value:"Type",paraId:27,tocIndex:6},{value:"Default",paraId:27,tocIndex:6},{value:"Required",paraId:27,tocIndex:6},{value:"linkRadius",paraId:27,tocIndex:6},{value:"Connection line border radius",paraId:27,tocIndex:6},{value:"number | (datum, index, data) => number",paraId:27,tocIndex:6},{value:"0",paraId:27,tocIndex:6},{value:"linkFill",paraId:27,tocIndex:6},{value:"Connection line fill color",paraId:27,tocIndex:6},{value:"string | (datum, index, data) => string",paraId:27,tocIndex:6},{value:"transparent",paraId:27,tocIndex:6},{value:"linkFillOpacity",paraId:27,tocIndex:6},{value:"Connection line fill opacity",paraId:27,tocIndex:6},{value:"number | (datum, index, data) => number",paraId:27,tocIndex:6},{value:"-",paraId:27,tocIndex:6},{value:"linkStroke",paraId:27,tocIndex:6},{value:"Connection line stroke",paraId:27,tocIndex:6},{value:"string | (datum, index, data) => string",paraId:27,tocIndex:6},{value:"-",paraId:27,tocIndex:6},{value:"linkStrokeOpacity",paraId:27,tocIndex:6},{value:"Connection line stroke opacity",paraId:27,tocIndex:6},{value:"number | (datum, index, data) => number",paraId:27,tocIndex:6},{value:"-",paraId:27,tocIndex:6},{value:"linkLineWidth",paraId:27,tocIndex:6},{value:"Connection line stroke width",paraId:27,tocIndex:6},{value:"number | (datum, index, data) => number",paraId:27,tocIndex:6},{value:"-",paraId:27,tocIndex:6},{value:"linkLineDash",paraId:27,tocIndex:6},{value:"Connection line stroke dash configuration. First value is dash length, second is gap length. Setting lineDash to [0,0] means no stroke.",paraId:27,tocIndex:6},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:27,tocIndex:6},{value:"-",paraId:27,tocIndex:6},{value:"linkOpacity",paraId:27,tocIndex:6},{value:"Connection line overall opacity",paraId:27,tocIndex:6},{value:"number | (datum, index, data) => number",paraId:27,tocIndex:6},{value:"-",paraId:27,tocIndex:6},{value:"linkShadowColor",paraId:27,tocIndex:6},{value:"Connection line shadow color",paraId:27,tocIndex:6},{value:"string | (datum, index, data) => string",paraId:27,tocIndex:6},{value:"-",paraId:27,tocIndex:6},{value:"linkShadowBlur",paraId:27,tocIndex:6},{value:"Connection line shadow Gaussian blur coefficient",paraId:27,tocIndex:6},{value:"number | (datum, index, data) => number",paraId:27,tocIndex:6},{value:"-",paraId:27,tocIndex:6},{value:"linkShadowOffsetX",paraId:27,tocIndex:6},{value:"Set horizontal distance of shadow from connection line",paraId:27,tocIndex:6},{value:"number | (datum, index, data) => number",paraId:27,tocIndex:6},{value:"-",paraId:27,tocIndex:6},{value:"linkShadowOffsetY",paraId:27,tocIndex:6},{value:"Set vertical distance of shadow from connection line",paraId:27,tocIndex:6},{value:"number | (datum, index, data) => number",paraId:27,tocIndex:6},{value:"-",paraId:27,tocIndex:6},{value:"linkCursor",paraId:27,tocIndex:6},{value:"Connection line mouse cursor style. Same as CSS cursor style.",paraId:27,tocIndex:6},{value:"string | (datum, index, data) => string",paraId:27,tocIndex:6},{value:"default",paraId:27,tocIndex:6},{value:"({\n  state: {\n    selected: {\n      linkRadius: 50,\n      linkFill: '#000',\n      linkFillOpacity: 0.9,\n      linkStroke: '#DAF5EC',\n      linkStrokeOpacity: 0.9,\n      linkLineWidth: 2,\n      linkLineDash: [4, 8],\n      linkOpacity: 1,\n      linkShadowColor: '#d3d3d3',\n      linkShadowBlur: 10,\n      linkShadowOffsetX: 10,\n      linkShadowOffsetY: 10,\n      linkCursor: 'pointer',\n    },\n  },\n});\n",paraId:28,tocIndex:6},{value:"The following events are supported:",paraId:29,tocIndex:8},{value:"element:select",paraId:30,tocIndex:8},{value:" - Triggered when element is selected",paraId:30,tocIndex:8},{value:"element:unselect",paraId:30,tocIndex:8},{value:" - Triggered when element is deselected",paraId:30,tocIndex:8},{value:"chart.on('element:select', (e) => {\n  console.log(e.data.data);\n  console.log(e.nativeEvent);\n});\n\nchart.on('element:unselect', (e) => {\n  console.log(e.nativeEvent);\n});\n",paraId:31,tocIndex:8},{value:"The following events are supported:",paraId:32,tocIndex:9},{value:"element:select",paraId:33,tocIndex:9},{value:" - Select data",paraId:33,tocIndex:9},{value:"element:unselect",paraId:33,tocIndex:9},{value:" - Deselect",paraId:33,tocIndex:9},{value:"chart.emit('element:select', {\n  data: { data: [{ population: 5038433 }, { population: 3983091 }] },\n});\n\nchart.emit('element:unselect', {});\n",paraId:34,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  transform: [\n    { type: 'stackY' },\n    { type: 'sortX', by: 'y', reverse: true, slice: 5 },\n  ],\n  encode: {\n    x: 'state',\n    y: 'population',\n    color: 'age',\n  },\n  axis: { y: { labelFormatter: '~s' } },\n  interaction: { elementSelectByColor: true },\n});\n\nchart.render();\n",paraId:35,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  transform: [\n    { type: 'stackY' },\n    { type: 'sortX', by: 'y', reverse: true, slice: 5 },\n  ],\n  encode: {\n    x: 'state',\n    y: 'population',\n    color: 'age',\n  },\n  axis: { y: { labelFormatter: '~s' } },\n  state: {\n    selected: {\n      offset: 10,\n      radius: 50,\n      fill: (d) => (d.population > 1000000 ? 'red' : '#000'),\n      fillOpacity: 0.9,\n      stroke: '#DAF5EC',\n      strokeOpacity: 0.9,\n      lineWidth: 2,\n      lineDash: [4, 8],\n      opacity: 1,\n      shadowColor: '#d3d3d3',\n      shadowBlur: 10,\n      shadowOffsetX: 10,\n      shadowOffsetY: 10,\n      cursor: 'pointer',\n      backgroundRadius: 50,\n      backgroundFill: (d) => (d.population > 1000000 ? 'red' : '#000'),\n      backgroundFillOpacity: 0.9,\n      backgroundStroke: '#DAF5EC',\n      backgroundStrokeOpacity: 0.9,\n      backgroundLineWidth: 2,\n      backgroundLineDash: [4, 8],\n      backgroundOpacity: 1,\n      backgroundShadowColor: '#d3d3d3',\n      backgroundShadowBlur: 10,\n      backgroundShadowOffsetX: 10,\n      backgroundShadowOffsetY: 10,\n      backgroundCursor: 'pointer',\n      linkFillOpacity: 0.5,\n    },\n  },\n  interaction: {\n    elementSelectByColor: {\n      background: true,\n      link: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:36,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  transform: [\n    { type: 'stackY' },\n    { type: 'sortX', by: 'y', reverse: true, slice: 5 },\n  ],\n  encode: {\n    x: 'state',\n    y: 'population',\n    color: 'age',\n  },\n  axis: { y: { labelFormatter: '~s' } },\n  interaction: {\n    elementSelectByColor: {\n      single: true, // Set to single-select mode\n      background: true,\n      link: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:37,tocIndex:13},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  transform: [\n    { type: 'stackY' },\n    { type: 'sortX', by: 'y', reverse: true, slice: 5 },\n  ],\n  encode: {\n    x: 'state',\n    y: 'population',\n    color: 'age',\n  },\n  axis: { y: { labelFormatter: '~s' } },\n  state: {\n    selected: { fill: 'red', linkFillOpacity: 0.5 },\n    unselected: { opacity: 0.5 },\n  },\n  interaction: {\n    elementSelectByColor: {\n      multipleSelectHotkey: 'ShiftLeft', // Hold left Shift key to enter multi-select mode\n      link: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:38,tocIndex:14}]},37386:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(57084);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"elementSelectByX",paraId:0,tocIndex:0},{value:" interaction targets chart elements. When clicking an element, it selects all elements with the same x channel value.",paraId:0,tocIndex:0},{value:"Trigger: Click element.",paraId:1,tocIndex:0},{value:"End: Click the selected element again.",paraId:2,tocIndex:0},{value:"Affected states:",paraId:3,tocIndex:0},{value:"Selected elements change to ",paraId:4,tocIndex:0},{value:"selected",paraId:4,tocIndex:0},{value:" state.",paraId:4,tocIndex:0},{value:"Other elements change to ",paraId:5,tocIndex:0},{value:"unselected",paraId:5,tocIndex:0},{value:" state.",paraId:5,tocIndex:0},{value:"Built-in interaction states:",paraId:6,tocIndex:0},{value:"({\n  // Selected state elements have 1px black border\n  state: { selected: { lineWidth: '1', stroke: '#000' } },\n});\n",paraId:7,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', paddingLeft: 50 });\n\nchart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  transform: [\n    { type: 'sortX', by: 'y', reverse: true, slice: 6 },\n    { type: 'dodgeX' },\n  ],\n  encode: { x: 'state', y: 'population', color: 'age' },\n  axis: { y: { labelFormatter: '~s' } },\n  state: { selected: { fill: 'red' }, unselected: { opacity: 0.5 } },\n  interaction: { elementSelectByX: true },\n});\n\nchart.render();\n",paraId:8,tocIndex:0},{value:"There are two ways to configure the ",paraId:9,tocIndex:1},{value:"elementSelectByX",paraId:9,tocIndex:1},{value:" interaction:",paraId:9,tocIndex:1},{value:"First, pass a ",paraId:10,tocIndex:1},{value:"boolean",paraId:10,tocIndex:1},{value:" to set whether to enable the interaction.",paraId:10,tocIndex:1},{value:"({\n  type: 'interval',\n  interaction: { elementSelectByX: true }, // Use default configuration\n});\n",paraId:11,tocIndex:1},{value:"Second, pass ",paraId:12,tocIndex:1},{value:"configuration options",paraId:13,tocIndex:1},{value:" to configure the interaction.",paraId:12,tocIndex:1},{value:"({\n  type: 'line',\n  interaction: {\n    elementSelectByX: {\n      background: true,\n    },\n  },\n});\n",paraId:14,tocIndex:1},{value:"Interaction can be configured at the Mark level:",paraId:15,tocIndex:2},{value:"({\n  type: 'interval',\n  interaction: { elementSelectByX: true },\n});\n",paraId:16,tocIndex:2},{value:"It can also be configured at the View level. Interactions declared on the view will be passed to marks declared in ",paraId:17,tocIndex:2},{value:"children",paraId:17,tocIndex:2},{value:". If the mark has declared the corresponding interaction, they will be merged; otherwise, it won't be affected.",paraId:17,tocIndex:2},{value:"({\n  type: 'view',\n  interaction: { elementSelectByX: true },\n});\n",paraId:18,tocIndex:2},{value:"Element select by X interaction configuration has two parts:",paraId:19,tocIndex:3},{value:"Interaction configuration",paraId:20,tocIndex:3},{value:"Element selection style",paraId:20,tocIndex:3},{value:"Property",paraId:21,tocIndex:4},{value:"Description",paraId:21,tocIndex:4},{value:"Type",paraId:21,tocIndex:4},{value:"Default",paraId:21,tocIndex:4},{value:"background",paraId:21,tocIndex:4},{value:"Whether to highlight background",paraId:21,tocIndex:4},{value:"boolean",paraId:21,tocIndex:4},{value:"false",paraId:21,tocIndex:4},{value:"region",paraId:21,tocIndex:4},{value:"Whether clicking empty area triggers selection",paraId:21,tocIndex:4},{value:"boolean",paraId:21,tocIndex:4},{value:"false",paraId:21,tocIndex:4},{value:"single",paraId:21,tocIndex:4},{value:"Whether single-select mode. When set to true, only one x value's corresponding element group can be selected at a time",paraId:21,tocIndex:4},{value:"boolean",paraId:21,tocIndex:4},{value:"false",paraId:21,tocIndex:4},{value:"multipleSelectHotkey",paraId:21,tocIndex:4},{value:"Hotkey code for multi-select. Hold hotkey to enable multi-select. When set, ",paraId:21,tocIndex:4},{value:"single",paraId:21,tocIndex:4},{value:" becomes invalid. Default to multi-select mode",paraId:21,tocIndex:4},{value:"string",paraId:21,tocIndex:4},{value:" | ",paraId:21,tocIndex:4},{value:"string[]",paraId:21,tocIndex:4},{value:"-",paraId:21,tocIndex:4},{value:"Element selection style, see example ",paraId:22,tocIndex:5},{value:"Custom Selection",paraId:23,tocIndex:5},{value:"Property",paraId:24,tocIndex:5},{value:"Description",paraId:24,tocIndex:5},{value:"Type",paraId:24,tocIndex:5},{value:"Default",paraId:24,tocIndex:5},{value:"Required",paraId:24,tocIndex:5},{value:"offset",paraId:24,tocIndex:5},{value:"Offset in the main direction",paraId:24,tocIndex:5},{value:"number",paraId:24,tocIndex:5},{value:"0",paraId:24,tocIndex:5},{value:"radius",paraId:24,tocIndex:5},{value:"Element border radius",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"0",paraId:24,tocIndex:5},{value:"fill",paraId:24,tocIndex:5},{value:"Element fill color",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"fillOpacity",paraId:24,tocIndex:5},{value:"Element fill opacity",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"stroke",paraId:24,tocIndex:5},{value:"Element stroke",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"strokeOpacity",paraId:24,tocIndex:5},{value:"Element stroke opacity",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"lineWidth",paraId:24,tocIndex:5},{value:"Element stroke width",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"lineDash",paraId:24,tocIndex:5},{value:"Element stroke dash configuration. First value is dash length, second is gap length. Setting lineDash to [0,0] means no stroke.",paraId:24,tocIndex:5},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"opacity",paraId:24,tocIndex:5},{value:"Element overall opacity",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"shadowColor",paraId:24,tocIndex:5},{value:"Element shadow color",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"shadowBlur",paraId:24,tocIndex:5},{value:"Element shadow Gaussian blur coefficient",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"shadowOffsetX",paraId:24,tocIndex:5},{value:"Set horizontal distance of shadow from element",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"shadowOffsetY",paraId:24,tocIndex:5},{value:"Set vertical distance of shadow from element",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"cursor",paraId:24,tocIndex:5},{value:"Element mouse cursor style. Same as CSS cursor style.",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"default",paraId:24,tocIndex:5},{value:"backgroundRadius",paraId:24,tocIndex:5},{value:"Background border radius",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"0",paraId:24,tocIndex:5},{value:"backgroundFill",paraId:24,tocIndex:5},{value:"Background fill color",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"transparent",paraId:24,tocIndex:5},{value:"backgroundFillOpacity",paraId:24,tocIndex:5},{value:"Background fill opacity",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundStroke",paraId:24,tocIndex:5},{value:"Background stroke",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundStrokeOpacity",paraId:24,tocIndex:5},{value:"Background stroke opacity",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundLineWidth",paraId:24,tocIndex:5},{value:"Background stroke width",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundLineDash",paraId:24,tocIndex:5},{value:"Background stroke dash configuration. First value is dash length, second is gap length. Setting lineDash to [0,0] means no stroke.",paraId:24,tocIndex:5},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundOpacity",paraId:24,tocIndex:5},{value:"Background overall opacity",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundShadowColor",paraId:24,tocIndex:5},{value:"Background shadow color",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundShadowBlur",paraId:24,tocIndex:5},{value:"Background shadow Gaussian blur coefficient",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundShadowOffsetX",paraId:24,tocIndex:5},{value:"Set horizontal distance of shadow from background",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundShadowOffsetY",paraId:24,tocIndex:5},{value:"Set vertical distance of shadow from background",paraId:24,tocIndex:5},{value:"number | (datum, index, data) => number",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"backgroundCursor",paraId:24,tocIndex:5},{value:"Background mouse cursor style. Same as CSS cursor style.",paraId:24,tocIndex:5},{value:"string | (datum, index, data) => string",paraId:24,tocIndex:5},{value:"default",paraId:24,tocIndex:5},{value:"When configuring background in selected elements, it's not configured as an object, but using the ",paraId:25,tocIndex:5},{value:"background",paraId:25,tocIndex:5},{value:" prefix with property names.",paraId:25,tocIndex:5},{value:"({\n  state: {\n    selected: {\n      offset: 10,\n      radius: 50,\n      fill: '#1890FF',\n      fillOpacity: 0.9,\n      stroke: '#40A9FF',\n      strokeOpacity: 0.9,\n      lineWidth: 2,\n      lineDash: [4, 8],\n      opacity: 1,\n      shadowColor: '#1890FF',\n      shadowBlur: 10,\n      shadowOffsetX: 5,\n      shadowOffsetY: 5,\n      cursor: 'pointer',\n      backgroundRadius: 50,\n      backgroundFill: '#E6F7FF',\n      backgroundFillOpacity: 0.9,\n      backgroundStroke: '#91D5FF',\n      backgroundStrokeOpacity: 0.9,\n      backgroundLineWidth: 2,\n      backgroundLineDash: [4, 8],\n      backgroundOpacity: 1,\n      backgroundShadowColor: '#91D5FF',\n      backgroundShadowBlur: 10,\n      backgroundShadowOffsetX: 5,\n      backgroundShadowOffsetY: 5,\n      backgroundCursor: 'pointer',\n    },\n  },\n});\n",paraId:26,tocIndex:5},{value:"The following events are supported:",paraId:27,tocIndex:7},{value:"element:select",paraId:28,tocIndex:7},{value:" - Triggered when element is selected",paraId:28,tocIndex:7},{value:"element:unselect",paraId:28,tocIndex:7},{value:" - Triggered when element is deselected",paraId:28,tocIndex:7},{value:"chart.on('element:select', (e) => {\n  console.log(e.data.data);\n  console.log(e.nativeEvent);\n});\n\nchart.on('element:unselect', (e) => {\n  console.log(e.nativeEvent);\n});\n",paraId:29,tocIndex:7},{value:"The following events are supported:",paraId:30,tocIndex:8},{value:"element:select",paraId:31,tocIndex:8},{value:" - Select data",paraId:31,tocIndex:8},{value:"element:unselect",paraId:31,tocIndex:8},{value:" - Deselect",paraId:31,tocIndex:8},{value:"chart.emit('element:select', {\n  data: { data: [{ population: 5038433 }, { population: 3983091 }] },\n});\n\nchart.emit('element:unselect', {});\n",paraId:32,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  paddingLeft: 50,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'sortX', by: 'y', reverse: true, slice: 6 },\n    { type: 'dodgeX' },\n  ],\n  axis: { y: { labelFormatter: '~s' } },\n  interaction: { elementSelectByX: { background: true } },\n});\n\nchart.render();\n",paraId:33,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  paddingLeft: 50,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'sortX', by: 'y', reverse: true, slice: 6 },\n    { type: 'dodgeX' },\n  ],\n  axis: { y: { labelFormatter: '~s' } },\n  state: {\n    selected: {\n      offset: 10,\n      radius: 50,\n      fill: (d) => (d.population > 1000000 ? '#F5222D' : '#1890FF'),\n      fillOpacity: 0.9,\n      stroke: (d) => (d.population > 1000000 ? '#FF4D4F' : '#40A9FF'),\n      strokeOpacity: 0.9,\n      lineWidth: 2,\n      lineDash: [4, 8],\n      opacity: 1,\n      shadowColor: (d) => (d.population > 1000000 ? '#F5222D' : '#1890FF'),\n      shadowBlur: 10,\n      shadowOffsetX: 5,\n      shadowOffsetY: 5,\n      cursor: 'pointer',\n      backgroundRadius: 50,\n      backgroundFill: (d) => (d.population > 1000000 ? '#FFF1F0' : '#E6F7FF'),\n      backgroundFillOpacity: 0.9,\n      backgroundStroke: (d) => (d.population > 1000000 ? '#FFA39E' : '#91D5FF'),\n      backgroundStrokeOpacity: 0.9,\n      backgroundLineWidth: 2,\n      backgroundLineDash: [4, 8],\n      backgroundOpacity: 1,\n      backgroundShadowColor: (d) =>\n        d.population > 1000000 ? '#FFA39E' : '#91D5FF',\n      backgroundShadowBlur: 10,\n      backgroundShadowOffsetX: 5,\n      backgroundShadowOffsetY: 5,\n      backgroundCursor: 'pointer',\n    },\n  },\n  interaction: {\n    elementSelectByX: {\n      background: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:34,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  paddingLeft: 50,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'sortX', by: 'y', reverse: true, slice: 6 },\n    { type: 'dodgeX' },\n  ],\n  axis: { y: { labelFormatter: '~s' } },\n  interaction: {\n    elementSelectByX: {\n      single: true, // Set to single-select mode\n      background: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:35,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  paddingLeft: 50,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'sortX', by: 'y', reverse: true, slice: 6 },\n    { type: 'dodgeX' },\n  ],\n  axis: { y: { labelFormatter: '~s' } },\n  interaction: {\n    elementSelectByX: {\n      multipleSelectHotkey: 'ShiftLeft', // Hold left Shift key to enter multi-select mode\n      background: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:36,tocIndex:13}]},95687:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(11751);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"fisheye",paraId:0,tocIndex:0},{value:' interaction is a distortion technique that magnifies the area around the mouse focus point while maintaining the overall view of the data. It provides a "fish-eye lens" effect that allows users to see both detailed information at the focus point and the overall context of the surrounding data simultaneously.',paraId:0,tocIndex:0},{value:"To enable fisheye interaction, add it to the chart configuration:",paraId:1,tocIndex:1},{value:"({\n  interaction: { fisheye: true },\n});\n",paraId:2,tocIndex:1},{value:"Property",paraId:3,tocIndex:2},{value:"Description",paraId:3,tocIndex:2},{value:"Type",paraId:3,tocIndex:2},{value:"Default",paraId:3,tocIndex:2},{value:"Required",paraId:3,tocIndex:2},{value:"radius",paraId:3,tocIndex:2},{value:"Fisheye lens radius",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"100",paraId:3,tocIndex:2},{value:"distortion",paraId:3,tocIndex:2},{value:"Distortion factor",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"2",paraId:3,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  },\n  encode: {\n    x: 'weight',\n    y: 'height',\n    color: 'gender',\n  },\n  interaction: { fisheye: true },\n});\n\nchart.render();\n",paraId:4,tocIndex:4}]},98958:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(31521);const t=[{value:"legendFilter",paraId:0,tocIndex:0},{value:" is an interaction feature that allows users to filter data displayed in the chart by clicking legend items. The filtering functionality supports two types of legends:",paraId:0,tocIndex:0},{value:"Categorical legend: for filtering discrete data",paraId:1,tocIndex:0},{value:"Continuous legend: for filtering continuous data",paraId:1,tocIndex:0},{value:"Through legend filtering, users can dynamically control the data items displayed in the chart, enhancing data exploration and analysis capabilities.",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .data(temperatures)\n  .encode('x', 'month')\n  .encode('y', 'temperature')\n  .encode('color', 'city')\n  .call((chart) => chart.line())\n  .call((chart) => chart.point());\n\nchart.interaction('legendFilter', true);\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"Legend filtering functionality is enabled by default when using legends.",paraId:4,tocIndex:1},{value:"({\n  type: 'interval',\n  legend: {\n    color: {},\n    size: {},\n  },\n});\n",paraId:5,tocIndex:1},{value:"You can also manually set whether to enable it in interaction:",paraId:6,tocIndex:1},{value:"({\n  type: 'interval',\n  legend: {\n    color: {},\n    size: {},\n  },\n  interaction: {\n    legendFilter: true, // Enable legend filter interaction\n  },\n});\n",paraId:7,tocIndex:1},{value:"Legend filter interaction can be configured at the View level:",paraId:8,tocIndex:2},{value:"chart.interaction('legendFilter', true);\n",paraId:9,tocIndex:2},{value:"The current version of the LegendFilter plugin has no configurable parameters. When calling, only the type needs to be specified:",paraId:10,tocIndex:3},{value:"Property",paraId:11,tocIndex:3},{value:"Description",paraId:11,tocIndex:3},{value:"Type",paraId:11,tocIndex:3},{value:"Default",paraId:11,tocIndex:3},{value:"Required",paraId:11,tocIndex:3},{value:"type",paraId:11,tocIndex:3},{value:"Interaction type identifier",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:"none",paraId:11,tocIndex:3},{value:"Yes",paraId:11,tocIndex:3},{value:"The LegendFilter plugin internally automatically determines whether it's a categorical legend or continuous legend based on the legend type, and handles them differently:",paraId:12,tocIndex:4},{value:"Categorical legend (className = legend-category): Click behavior is bound to filtering, supporting multi-select, cancel, and reset.",paraId:13,tocIndex:4},{value:"Continuous legend (className = legend-continuous): Binds valuechange event to listen for slider changes.",paraId:13,tocIndex:4},{value:"The plugin automatically identifies this information through data and structure information injected into legend elements, without requiring manual specification by users.",paraId:14,tocIndex:4},{value:"For detailed documentation see ",paraId:15,tocIndex:5},{value:"Legend component",paraId:16,tocIndex:5},{value:"legend:filter - Triggered when user filters through legend",paraId:17,tocIndex:7},{value:"legend:reset - Triggered when all legend items are selected (reset state)",paraId:17,tocIndex:7},{value:"chart.on('legend:filter', (e) => {\n  const { nativeEvent, data } = e;\n  if (!nativeEvent) return;\n  console.log(data);\n});\n\nchart.on('legend:reset', (e) => {\n  const { nativeEvent } = e;\n  if (!nativeEvent) return;\n  console.log('end');\n});\n",paraId:18,tocIndex:7},{value:"legend:filter - Trigger legend filtering",paraId:19,tocIndex:8},{value:"legend:focus - Trigger legend focus",paraId:19,tocIndex:8},{value:"legend:reset - Reset filter state",paraId:19,tocIndex:8},{value:"chart.emit('legend:filter', {\n  data: { channel: 'color', values: ['Sports', 'Strategy'] },\n});\n\nchart.emit('legend:focus', {\n  data: { channel: 'color', value: 'Sports' },\n});\n\nchart.emit('legend:reset', {});\n",paraId:20,tocIndex:8},{value:"Below shows a legendfilter interaction functionality for discrete data.",paraId:21,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  height: 300,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/temperatures1.json',\n  },\n  encode: {\n    x: (d) => new Date(d.date),\n    y: 'value',\n    color: 'condition',\n  },\n});\n\nchart.render();\n",paraId:22,tocIndex:9}]},82486:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(35560);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"legendHighlight",paraId:0,tocIndex:0},{value:" interaction targets the chart component legend.",paraId:0,tocIndex:0},{value:"Trigger",paraId:1,tocIndex:0},{value:": Mouse hover over legend items.",paraId:1,tocIndex:0},{value:"End",paraId:1,tocIndex:0},{value:": Mouse leaves legend items.",paraId:1,tocIndex:0},{value:"Affected States",paraId:1,tocIndex:0},{value:":",paraId:1,tocIndex:0},{value:"Elements within the selection range become ",paraId:2,tocIndex:0},{value:"active",paraId:2,tocIndex:0},{value:".",paraId:2,tocIndex:0},{value:"Elements outside the selection range become ",paraId:3,tocIndex:0},{value:"inactive",paraId:3,tocIndex:0},{value:".",paraId:3,tocIndex:0},{value:"Built-in interaction states:",paraId:4,tocIndex:0},{value:"({\n  // Define inactive state element opacity as 0.5\n  state: { inactive: { opacity: 0.5 } },\n});\n",paraId:5,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data(profit)\n  .axis('y', { labelFormatter: '~s' })\n  .encode('x', 'month')\n  .encode('y', ['end', 'start'])\n  .encode(\n    'color',\n    d.month === 'Total' ? 'Total' : d.profit > 0 ? 'Increase' : 'Decrease',\n  )\n  .state('inactive', { opacity: 0.5 })\n  .legend('color', {\n    state: { inactive: { labelOpacity: 0.5, markerOpacity: 0.5 } },\n  });\n\nchart.interaction('legendHighlight', true);\n\nchart.render();\n",paraId:6,tocIndex:0},{value:"Pass a ",paraId:7,tocIndex:1},{value:"boolean",paraId:7,tocIndex:1},{value:" to enable or disable the interaction.",paraId:7,tocIndex:1},{value:"({\n  type: 'interval',\n  interaction: { legendHighlight: true }, // Use default configuration\n});\n",paraId:8,tocIndex:1},{value:"Legend highlight interaction can be configured at the View level:",paraId:9,tocIndex:2},{value:"chart.interaction('legendHighlight', true);\n",paraId:10,tocIndex:2},{value:"The current version of LegendHighlight interaction has no configurable parameters.",paraId:11,tocIndex:3},{value:"To set the inactive state, refer to ",paraId:12,tocIndex:3},{value:"Element State",paraId:12,tocIndex:3},{value:"For detailed documentation, see ",paraId:13,tocIndex:4},{value:"Legend",paraId:14,tocIndex:4},{value:"legend:highlight",paraId:15,tocIndex:6},{value:" - Triggered when mouse hovers over legend items",paraId:15,tocIndex:6},{value:"legend:unhighlight",paraId:15,tocIndex:6},{value:" - Triggered when mouse leaves legend",paraId:15,tocIndex:6},{value:"chart.on('legend:highlight', (e) => {\n  const { nativeEvent, data } = e;\n  if (!nativeEvent) return;\n  console.log(data);\n});\n\nchart.on('legend:unhighlight', (e) => {\n  const { nativeEvent } = e;\n  if (!nativeEvent) return;\n  console.log('unhighlight');\n});\n",paraId:16,tocIndex:6},{value:"legend:highlight",paraId:17,tocIndex:7},{value:" - Highlight data corresponding to legend values",paraId:17,tocIndex:7},{value:"legend:unhighlight",paraId:17,tocIndex:7},{value:" - Cancel highlight state",paraId:17,tocIndex:7},{value:"chart.emit('legend:highlight', {\n  data: { channel: 'color', value: 'Increase' },\n});\n\nchart.emit('legend:unhighlight', {});\n",paraId:18,tocIndex:7},{value:"The following example demonstrates the basic interaction functionality of ",paraId:19,tocIndex:8},{value:"legendHighlight",paraId:19,tocIndex:8},{value:".",paraId:19,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  height: 300,\n  data: [\n    { name: 'London', month: 'Jan.', value: 18.9 },\n    { name: 'London', month: 'Feb.', value: 28.8 },\n    { name: 'London', month: 'Mar.', value: 39.3 },\n    { name: 'London', month: 'Apr.', value: 81.4 },\n    { name: 'London', month: 'May', value: 47 },\n    { name: 'London', month: 'Jun.', value: 20.3 },\n    { name: 'London', month: 'Jul.', value: 24 },\n    { name: 'London', month: 'Aug.', value: 35.6 },\n    { name: 'Berlin', month: 'Jan.', value: 12.4 },\n    { name: 'Berlin', month: 'Feb.', value: 23.2 },\n    { name: 'Berlin', month: 'Mar.', value: 34.5 },\n    { name: 'Berlin', month: 'Apr.', value: 99.7 },\n    { name: 'Berlin', month: 'May', value: 52.6 },\n    { name: 'Berlin', month: 'Jun.', value: 35.5 },\n    { name: 'Berlin', month: 'Jul.', value: 37.4 },\n    { name: 'Berlin', month: 'Aug.', value: 42.4 },\n  ],\n  encode: {\n    x: 'month',\n    y: 'value',\n    color: 'name',\n  },\n  transform: [\n    {\n      type: 'dodgeX',\n      groupBy: 'x',\n      orderBy: 'value',\n      padding: 0.1,\n    },\n  ],\n  interaction: {\n    legendHighlight: {\n      series: true,\n    },\n  },\n  state: { inactive: { opacity: 0.5 } },\n});\n\nchart.render();\n",paraId:20,tocIndex:8}]},70927:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(31946);const t=[{value:"In G2, ",paraId:0},{value:"Interaction",paraId:0},{value:" provides the ability to explore data as needed.",paraId:0},{value:"Interaction can be set at the view level:",paraId:1},{value:"({\n  type: 'view',\n  interaction: {\n    tooltip: {},\n    brushHighlight: {},\n  },\n});\n",paraId:2},{value:"// API\n// First method\nchart.interaction('tooltip', {}).interaction('brushHighlight', {});\n\n// Second method\nchart.interaction({\n  tooltip: {},\n  brushHighlight: {},\n});\n",paraId:3},{value:"Interaction can also be set at the mark level:",paraId:4},{value:"({\n  type: 'interval',\n  interaction: {\n    tooltip: {},\n    brushHighlight: {},\n  },\n});\n",paraId:5},{value:"// API\n// First method\nchart.interval().interaction('tooltip', {}).interaction('brushHighlight', {});\n\n// Second method\nchart.interval().interaction({\n  tooltip: {},\n  brushHighlight: {},\n});\n",paraId:6},{value:"G2's interactions are effective for each view. If you want to turn off the interaction, you can do as follows:",paraId:7,tocIndex:0},{value:"({\n  type: 'view',\n  interaction: {\n    tooltip: false,\n    brushHighlight: false,\n  },\n});\n",paraId:8,tocIndex:0},{value:"Interaction has a bubbling nature. The view interaction will be overridden by the interaction set by its mark, and the coordinate system corresponding to the last mark has the highest priority.",paraId:9,tocIndex:1},{value:"chart.interaction('elementHighlight', { link: true, background: true });\nchart.line().interaction('elementHighlight', { link: false });\nchart.area().interaction('elementHighlight', { background: false });\n",paraId:10,tocIndex:1},{value:"This is equivalent to the following situation:",paraId:11,tocIndex:1},{value:"chart.interaction('elementHighlight', { link: false, background: false });\nchart.line();\nchart.area();\n",paraId:12,tocIndex:1},{value:"In G2, you can set the interaction state of the mark through ",paraId:13,tocIndex:2},{value:"mark.state",paraId:13,tocIndex:2},{value:", such as setting the select and unselect states as follows. When using elementSelect, these two states will be consumed.",paraId:13,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  })\n  .transform({ type: 'sortX', by: 'y', reverse: true })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .axis('y', { labelFormatter: '.0%' })\n  .state({\n    selected: { fill: '#f4bb51' }, // set selected state\n    unselected: { opacity: 0.6 }, // set unselected state\n  })\n  .interaction('elementSelect', true);\n\nchart.render();\n",paraId:14,tocIndex:2},{value:"In addition to selected and unselected, there are the following built-in state types:",paraId:15,tocIndex:2},{value:"active",paraId:16,tocIndex:2},{value:"inactive",paraId:16,tocIndex:2},{value:"All interaction events can be listened to. The syntax is as follows:",paraId:17,tocIndex:4},{value:"chart.on('interaction name（eg: brushFilter）', (e) => {});\n",paraId:18,tocIndex:4},{value:"Take the mouse brushing selection ",paraId:19,tocIndex:4},{value:"brushFilter",paraId:20,tocIndex:4},{value:" as an example. When the user makes a mouse brushing selection, the corresponding brushing selection threshold is pushed into brushHistory. When the reset button is clicked, the values are popped up one by one and the brushFilter is actively triggered through ",paraId:19,tocIndex:4},{value:"chart.emit()",paraId:19,tocIndex:4},{value:" for brushing selection coverage.",paraId:19,tocIndex:4},{value:"const { Chart, ChartEvent } = G2;\n\nconst chart = new Chart({\n  container: 'container',\n  clip: true,\n});\n\nconst brushHistory = [];\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  })\n  .encode('x', 'weight')\n  .encode('y', 'height')\n  .encode('color', 'gender')\n  .encode('shape', 'point')\n  .interaction('brushFilter', true);\n\n// Listen to the brushing selection event\nchart.on('brush:filter', (e) => {\n  if (e.target) brushHistory.push(e.data.selection);\n});\n\nchart.render();\n\nchart.on(ChartEvent.AFTER_RENDER, () => {\n  const scale = chart.getScale();\n  const { x1, y1 } = scale;\n  const domainX = x1.options.domain;\n  const domainY = y1.options.domain;\n  brushHistory.push([domainX, domainY]);\n});\n\nconst container = chart.getContainer();\nconst button = document.createElement('button');\nbutton.innerText = 'reset';\nbutton.onclick = () => {\n  if (brushHistory.length < 2) return;\n  brushHistory.pop();\n  // Actively trigger the brushing selection event\n  chart.emit('brush:filter', {\n    data: {\n      selection: brushHistory[brushHistory.length - 1],\n    },\n  });\n};\n\ncontainer.appendChild(button);\n",paraId:21,tocIndex:4},{value:"Triggering and listening usually occur simultaneously. It is used to actively trigger a certain event. The data in the formal parameter will act on the corresponding interaction event, achieving the effect of resetting or overwriting. For example, to reset the filtering area, taking ",paraId:22,tocIndex:5},{value:"brushFilter",paraId:23,tocIndex:5},{value:" as an example, the syntax is as follows.",paraId:22,tocIndex:5},{value:"chart.emit('brush:filter', {\n  data: {\n    selection: brushHistory[brushHistory.length - 1],\n  },\n});\n",paraId:24,tocIndex:5},{value:"If the built-in interaction cannot meet your needs, you can also implement some interactions through custom interaction. Here is a custom highlight interaction.",paraId:25,tocIndex:6},{value:"const { Chart, PLOT_CLASS_NAME, ELEMENT_CLASS_NAME, register } = G2;\n\nregister('interaction.customElementHighlight', () => {\n  return (context, _, emitter) => {\n    const { container } = context;\n    const plotArea = container.querySelector(`.${PLOT_CLASS_NAME}`);\n    const elements = plotArea.querySelectorAll(`.${ELEMENT_CLASS_NAME}`);\n    const elementSet = new Set(elements);\n\n    const pointerover = (e) => {\n      const { target: element } = e;\n      if (!elementSet.has(element)) return;\n      element.style.stroke = 'red';\n      element.style.lineWidth = 2;\n    };\n\n    const pointerout = (e) => {\n      const { target: element } = e;\n      if (!elementSet.has(element)) return;\n      element.style.stroke = null;\n    };\n\n    plotArea.addEventListener('pointerover', pointerover);\n    plotArea.addEventListener('pointerout', pointerout);\n    return () => {\n      plotArea.removeEventListener('pointerover', pointerover);\n      plotArea.removeEventListener('pointerout', pointerout);\n    };\n  };\n});\n\nconst chart = new Chart({ container: 'container' });\n\nchart\n  .interval()\n  .data([\n    { name: 'London', 月份: 'Jan.', 月均降雨量: 18.9 },\n    { name: 'London', 月份: 'Feb.', 月均降雨量: 28.8 },\n    { name: 'London', 月份: 'Mar.', 月均降雨量: 39.3 },\n    { name: 'London', 月份: 'Apr.', 月均降雨量: 81.4 },\n    { name: 'London', 月份: 'May', 月均降雨量: 47 },\n    { name: 'London', 月份: 'Jun.', 月均降雨量: 20.3 },\n    { name: 'London', 月份: 'Jul.', 月均降雨量: 24 },\n    { name: 'London', 月份: 'Aug.', 月均降雨量: 35.6 },\n    { name: 'Berlin', 月份: 'Jan.', 月均降雨量: 12.4 },\n    { name: 'Berlin', 月份: 'Feb.', 月均降雨量: 23.2 },\n    { name: 'Berlin', 月份: 'Mar.', 月均降雨量: 34.5 },\n    { name: 'Berlin', 月份: 'Apr.', 月均降雨量: 99.7 },\n    { name: 'Berlin', 月份: 'May', 月均降雨量: 52.6 },\n    { name: 'Berlin', 月份: 'Jun.', 月均降雨量: 35.5 },\n    { name: 'Berlin', 月份: 'Jul.', 月均降雨量: 37.4 },\n    { name: 'Berlin', 月份: 'Aug.', 月均降雨量: 42.4 },\n  ])\n  .transform({ type: 'dodgeX' })\n  .encode('x', '月份')\n  .encode('y', '月均降雨量')\n  .encode('color', 'name')\n  .interaction('customElementHighlight', true);\n\nchart.render();\n",paraId:26,tocIndex:6}]},59695:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(49296);const t=[{value:"poptip is an interaction type in G2 that displays concise tooltip information when users interact with chart elements. It provides a lightweight way to show detailed information about data points without interfering with the user's overall chart browsing experience. Compared to full tooltip, poptip is more concise and typically only displays the most basic information.",paraId:0,tocIndex:0},{value:"To enable poptip interaction, simply add ",paraId:1,tocIndex:1},{value:"interaction: 'poptip'",paraId:1,tocIndex:1},{value:" in the chart configuration or use the ",paraId:1,tocIndex:1},{value:"chart.interaction('poptip', true)",paraId:1,tocIndex:1},{value:" method.",paraId:1,tocIndex:1},{value:"chart.options({\n  // Other configurations...\n  interaction: { poptip: true },\n});\n",paraId:2,tocIndex:1},{value:"Or use method call:",paraId:3,tocIndex:1},{value:"chart.interaction('poptip', true);\n",paraId:4,tocIndex:1},{value:"poptip interaction configuration can be set under the ",paraId:5,tocIndex:2},{value:"interaction",paraId:5,tocIndex:2},{value:" property in the chart's ",paraId:5,tocIndex:2},{value:"options",paraId:5,tocIndex:2},{value:" object:",paraId:5,tocIndex:2},{value:"chart.options({\n  // Other chart configurations...\n  interaction: {\n    poptip: {\n      // poptip configuration options\n      offsetX: 10,\n      offsetY: 10,\n      // tip style configuration\n      tipBackgroundColor: 'rgba(0, 0, 0, 0.75)',\n      tipColor: '#fff',\n    },\n  },\n});\n",paraId:6,tocIndex:2},{value:"poptip interaction supports the following configuration options:",paraId:7,tocIndex:3},{value:"Property",paraId:8,tocIndex:3},{value:"Description",paraId:8,tocIndex:3},{value:"Type",paraId:8,tocIndex:3},{value:"Default",paraId:8,tocIndex:3},{value:"Required",paraId:8,tocIndex:3},{value:"offsetX",paraId:8,tocIndex:3},{value:"X-direction offset of tooltip relative to trigger point",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"8",paraId:8,tocIndex:3},{value:"offsetY",paraId:8,tocIndex:3},{value:"Y-direction offset of tooltip relative to trigger point",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"8",paraId:8,tocIndex:3},{value:"poptip style configuration options need to be prefixed with ",paraId:9,tocIndex:4},{value:"tip",paraId:9,tocIndex:4},{value:":",paraId:9,tocIndex:4},{value:"Property",paraId:10,tocIndex:4},{value:"Description",paraId:10,tocIndex:4},{value:"Type",paraId:10,tocIndex:4},{value:"Default",paraId:10,tocIndex:4},{value:"Required",paraId:10,tocIndex:4},{value:"tipBackgroundColor",paraId:10,tocIndex:4},{value:"Tooltip background color",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"'rgba(0,0,0,0.75)'",paraId:10,tocIndex:4},{value:"tipColor",paraId:10,tocIndex:4},{value:"Text color",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"'#fff'",paraId:10,tocIndex:4},{value:"tipWidth",paraId:10,tocIndex:4},{value:"Tooltip width",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"'max-content'",paraId:10,tocIndex:4},{value:"tipPadding",paraId:10,tocIndex:4},{value:"Tooltip padding",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"'1px 4px'",paraId:10,tocIndex:4},{value:"tipFontSize",paraId:10,tocIndex:4},{value:"Text font size",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"'12px'",paraId:10,tocIndex:4},{value:"tipBorderRadius",paraId:10,tocIndex:4},{value:"Tooltip border radius",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"'2.5px'",paraId:10,tocIndex:4},{value:"tipBoxShadow",paraId:10,tocIndex:4},{value:"Tooltip shadow",paraId:10,tocIndex:4},{value:"string",paraId:10,tocIndex:4},{value:"'0 3px 6px -4px rgba(0,0,0,0.12), 0 6px 16px 0 rgba(0,0,0,0.08), 0 9px 28px 8px rgba(0,0,0,0.05)'",paraId:10,tocIndex:4},{value:"poptip interaction triggers the following events:",paraId:11,tocIndex:5},{value:"Event Name",paraId:12,tocIndex:5},{value:"Description",paraId:12,tocIndex:5},{value:"Callback Parameters",paraId:12,tocIndex:5},{value:"poptip:show",paraId:12,tocIndex:5},{value:"Triggered when poptip shows",paraId:12,tocIndex:5},{value:"{ data, target, x, y }",paraId:12,tocIndex:5},{value:"poptip:hide",paraId:12,tocIndex:5},{value:"Triggered when poptip hides",paraId:12,tocIndex:5},{value:"{ target }",paraId:12,tocIndex:5},{value:"You can listen to these events in the following way:",paraId:13,tocIndex:5},{value:"chart.on('poptip:show', (event) => {\n  console.log('Poptip shown:', event.data);\n});\n\nchart.on('poptip:hide', (event) => {\n  console.log('Poptip hidden');\n});\n",paraId:14,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// Generate mock data\nconst generateScatterData = () => {\n  const data = [];\n  const groups = ['Group A', 'Group B', 'Group C', 'Group D'];\n  const centers = [\n    [3, 3],\n    [7, 7],\n    [3, 7],\n    [7, 3],\n  ];\n\n  groups.forEach((group, i) => {\n    const [centerX, centerY] = centers[i];\n    for (let j = 0; j < 30; j++) {\n      // Generate random scatter points around center\n      const x = centerX + (Math.random() - 0.5) * 4;\n      const y = centerY + (Math.random() - 0.5) * 4;\n      const size = Math.random() * 20 + 5;\n      data.push({\n        x,\n        y,\n        size,\n        group,\n        id: `${group}-${j}`,\n        value: Math.round(x * y),\n      });\n    }\n  });\n  return data;\n};\n\nconst data = generateScatterData();\n\nchart.options({\n  type: 'point',\n  data,\n  encode: {\n    x: 'x',\n    y: 'y',\n    color: 'group',\n    size: 'size',\n    shape: 'circle',\n  },\n  scale: {\n    x: {\n      nice: true,\n      domain: [0, 10],\n    },\n    y: {\n      nice: true,\n      domain: [0, 10],\n    },\n    size: {\n      domain: [5, 25],\n    },\n    color: {\n      palette: 'category10',\n    },\n  },\n  style: {\n    fillOpacity: 0.65,\n    stroke: '#fff',\n    lineWidth: 1,\n  },\n  axis: {\n    x: {\n      title: 'X Axis',\n      grid: true,\n    },\n    y: {\n      title: 'Y Axis',\n      grid: true,\n    },\n  },\n  legend: {\n    color: {\n      position: 'top',\n      flipPage: false,\n      maxItemWidth: 80,\n      itemMarginBottom: 8,\n      layout: 'horizontal',\n    },\n  },\n  animate: {\n    enter: {\n      type: 'fadeIn',\n      duration: 800,\n      delay: (d, i) => i * 10,\n    },\n  },\n});\n\nchart.render();\n\nchart.interaction('poptip', {\n  offsetX: 15,\n  offsetY: 15,\n  tipBackgroundColor: 'rgba(0, 0, 0, 0.85)',\n  tipBorderRadius: '6px',\n  tipPadding: '10px 12px',\n  tipFontSize: '12px',\n  tipColor: '#fff',\n  tipBoxShadow: '0 3px 6px -4px rgba(0, 0, 0, 0.48)',\n});\n\nchart.on('element:mouseenter', (event) => {\n  const { element } = event;\n  element.style.fillOpacity = 1;\n  element.style.stroke = '#000';\n  element.style.lineWidth = 2;\n  chart.render();\n});\n\nchart.on('element:mouseleave', (event) => {\n  const { element } = event;\n  element.style.fillOpacity = 0.65;\n  element.style.stroke = '#fff';\n  element.style.lineWidth = 1;\n  chart.render();\n});\n",paraId:15,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// Simplified dataset\nconst data = [\n  { category: 'Category A', value: 27 },\n  { category: 'Category B', value: 25 },\n  { category: 'Category C', value: 23 },\n  { category: 'Category D', value: 21 },\n  { category: 'Category E', value: 19 },\n  { category: 'Category F', value: 17 },\n  { category: 'Category G', value: 12 },\n  { category: 'Category H', value: 10 },\n  { category: 'Category I', value: 6 },\n];\n\nchart.options({\n  type: 'interval',\n  data,\n  coordinate: {\n    type: 'polar',\n    innerRadius: 0.2,\n    endAngle: Math.PI * 2,\n  },\n  encode: {\n    x: 'category',\n    y: 'value',\n    color: 'category',\n  },\n  transform: [\n    {\n      type: 'stackY',\n    },\n  ],\n  scale: {\n    color: {\n      palette: 'spectral',\n    },\n  },\n  style: {\n    stroke: '#fff',\n    lineWidth: 1,\n  },\n  legend: {\n    color: {\n      position: 'right',\n    },\n  },\n  animate: {\n    enter: {\n      type: 'fadeIn',\n      duration: 800,\n    },\n  },\n});\n\nchart.render();\n\nchart.interaction('poptip', true);\n\nchart.on('element:mouseenter', (event) => {\n  const { element } = event;\n  element.style.fillOpacity = 1;\n  element.style.stroke = '#000';\n  element.style.lineWidth = 2;\n  chart.render();\n});\n\nchart.on('element:mouseleave', (event) => {\n  const { element } = event;\n  element.style.fillOpacity = 0.85;\n  element.style.stroke = '#fff';\n  element.style.lineWidth = 1;\n  chart.render();\n});\n",paraId:16,tocIndex:9}]},50652:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(8056);const t=[{value:"scrollbarFilter",paraId:0,tocIndex:0},{value:" is a default interaction that is automatically enabled when a scrollbar component is configured. It allows users to filter and browse data through scrollbars, particularly suitable for visualization scenarios with large amounts of data. Scrollbar filtering can be applied to both x-axis and y-axis, helping users focus on data regions of interest.",paraId:0,tocIndex:0},{value:"Trigger: Drag scrollbar.",paraId:1,tocIndex:0},{value:"End: Release scrollbar.",paraId:2,tocIndex:0},{value:"Effect: Update chart's displayed data range.",paraId:3,tocIndex:0},{value:"There are two ways to configure ",paraId:4,tocIndex:1},{value:"scrollbarFilter",paraId:4,tocIndex:1},{value:" interaction:",paraId:4,tocIndex:1},{value:"First, automatically enable scrollbar filtering interaction by configuring the scrollbar component:",paraId:5,tocIndex:1},{value:"({\n  scrollbar: {\n    x: { ratio: 0.5 }, // x-axis scrollbar, displaying 50% of data\n    y: { ratio: 0.3 }, // y-axis scrollbar, displaying 30% of data\n  },\n});\n",paraId:6,tocIndex:1},{value:"Second, configure directly in interaction:",paraId:7,tocIndex:1},{value:"({\n  scrollbar: {\n    x: { ratio: 0.5 },\n    y: { ratio: 0.3 },\n  },\n  interaction: {\n    scrollbarFilter: true, // Enable scrollbar filtering interaction\n  },\n});\n",paraId:8,tocIndex:1},{value:"Scrollbar filtering interaction can be configured at the View level:",paraId:9,tocIndex:2},{value:"({\n  type: 'view',\n  scrollbar: {\n    x: { ratio: 0.5 },\n    y: { ratio: 0.3 },\n  },\n  interaction: { scrollbarFilter: true },\n});\n",paraId:10,tocIndex:2},{value:"Scrollbar filtering interaction supports the following configuration options:",paraId:11,tocIndex:3},{value:"Property",paraId:12,tocIndex:3},{value:"Description",paraId:12,tocIndex:3},{value:"Type",paraId:12,tocIndex:3},{value:"Default",paraId:12,tocIndex:3},{value:"Required",paraId:12,tocIndex:3},{value:"initDomain",paraId:12,tocIndex:3},{value:"Initialize the data domain range, used to set initial filter range",paraId:12,tocIndex:3},{value:"{ x: [number, number], y: [number, number] }",paraId:12,tocIndex:3},{value:"Automatically calculated based on data",paraId:12,tocIndex:3},{value:"No",paraId:12,tocIndex:3},{value:"className",paraId:12,tocIndex:3},{value:"CSS class name for scrollbar, used for style customization and DOM selection",paraId:12,tocIndex:3},{value:"string",paraId:12,tocIndex:3},{value:"'g2-scrollbar'",paraId:12,tocIndex:3},{value:"No",paraId:12,tocIndex:3},{value:"prefix",paraId:12,tocIndex:3},{value:"Event prefix, used to define triggered event names",paraId:12,tocIndex:3},{value:"string",paraId:12,tocIndex:3},{value:"'scrollbar'",paraId:12,tocIndex:3},{value:"No",paraId:12,tocIndex:3},{value:"hasState",paraId:12,tocIndex:3},{value:"Whether to enable state management, controls state changes during scrollbar filtering",paraId:12,tocIndex:3},{value:"boolean",paraId:12,tocIndex:3},{value:"true",paraId:12,tocIndex:3},{value:"No",paraId:12,tocIndex:3},{value:"setValue",paraId:12,tocIndex:3},{value:"Custom function to set scrollbar value",paraId:12,tocIndex:3},{value:"(component, values) => void",paraId:12,tocIndex:3},{value:"(component, values) => component.setValue(values[0])",paraId:12,tocIndex:3},{value:"No",paraId:12,tocIndex:3},{value:"getInitValues",paraId:12,tocIndex:3},{value:"Custom function to get scrollbar initial values",paraId:12,tocIndex:3},{value:"(scrollbar) => [number, number]",paraId:12,tocIndex:3},{value:"Internal default implementation",paraId:12,tocIndex:3},{value:"No",paraId:12,tocIndex:3},{value:"initDomain",paraId:13,tocIndex:5},{value:" is an object containing x and y properties, representing the initial data domain ranges for x-axis and y-axis respectively. This configuration option allows you to precisely control the initial data range displayed by the scrollbar.",paraId:13,tocIndex:5},{value:"{\n  initDomain: {\n    x: [minX, maxX], // x-axis data domain range\n    y: [minY, maxY], // y-axis data domain range\n  }\n}\n",paraId:14,tocIndex:5},{value:"For example, if you want the x-axis to initially display a range from the second to fifth data points:",paraId:15,tocIndex:5},{value:"({\n  interaction: {\n    scrollbarFilter: {\n      initDomain: {\n        x: [1, 4], // Display data points with indices 1 to 4 (second to fifth)\n      },\n    },\n  },\n});\n",paraId:16,tocIndex:5},{value:"setValue",paraId:17,tocIndex:6},{value:" is a function used to customize how to set the scrollbar value. The default implementation is ",paraId:17,tocIndex:6},{value:"(component, values) => component.setValue(values[0])",paraId:17,tocIndex:6},{value:", which sets the first value as the current value of the scrollbar.",paraId:17,tocIndex:6},{value:"If you need to customize the scrollbar's value setting logic, you can provide your own implementation:",paraId:18,tocIndex:6},{value:"({\n  interaction: {\n    scrollbarFilter: {\n      setValue: (component, values) => {\n        // Custom value setting logic\n        component.setValue(values[0]);\n        // Additional operations can be added here\n      },\n    },\n  },\n});\n",paraId:19,tocIndex:6},{value:"getInitValues",paraId:20,tocIndex:7},{value:" is a function used to get the initial values of the scrollbar. The default implementation checks if the scrollbar value is 0, and returns that value if it's not 0.",paraId:20,tocIndex:7},{value:"You can customize this function to control the initial position of the scrollbar, the return values should be an array of number between 0 and 1, means the positon of start and end.",paraId:21,tocIndex:7},{value:"({\n  interaction: {\n    scrollbarFilter: {\n      getInitValues: (scrollbar) => {\n        // Custom logic to get initial values\n        const values = scrollbar.slider.attributes.values;\n        // For example, always start from the middle position\n        return [values.length / 2];\n      },\n    },\n  },\n});\n",paraId:22,tocIndex:7},{value:"In addition to the scrollbarFilter interaction configuration, the scrollbar component itself has some important configuration options that affect the behavior of scrollbar filtering:",paraId:23,tocIndex:8},{value:"Property",paraId:24,tocIndex:8},{value:"Description",paraId:24,tocIndex:8},{value:"Type",paraId:24,tocIndex:8},{value:"Default",paraId:24,tocIndex:8},{value:"Required",paraId:24,tocIndex:8},{value:"ratio",paraId:24,tocIndex:8},{value:"Ratio of displayed data, value range [0, 1]",paraId:24,tocIndex:8},{value:"number",paraId:24,tocIndex:8},{value:"1",paraId:24,tocIndex:8},{value:"No",paraId:24,tocIndex:8},{value:"style",paraId:24,tocIndex:8},{value:"Style configuration for scrollbar",paraId:24,tocIndex:8},{value:"ScrollbarStyle",paraId:24,tocIndex:8},{value:"-",paraId:24,tocIndex:8},{value:"No",paraId:24,tocIndex:8},{value:"animate",paraId:24,tocIndex:8},{value:"Whether to enable animation",paraId:24,tocIndex:8},{value:"boolean",paraId:24,tocIndex:8},{value:"true",paraId:24,tocIndex:8},{value:"No",paraId:24,tocIndex:8},{value:"For detailed documentation see ",paraId:25,tocIndex:8},{value:"Scrollbar Component",paraId:26,tocIndex:8},{value:"Scrollbar filtering interaction supports the following events:",paraId:27,tocIndex:10},{value:"scrollbarX:filter",paraId:28,tocIndex:10},{value:" - Triggered when x-axis scrollbar filters",paraId:28,tocIndex:10},{value:"scrollbarY:filter",paraId:28,tocIndex:10},{value:" - Triggered when y-axis scrollbar filters",paraId:28,tocIndex:10},{value:"chart.on('scrollbarX:filter', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('scrollbarX:filter', data.selection);\n});\n\nchart.on('scrollbarY:filter', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('scrollbarY:filter', data.selection);\n});\n",paraId:29,tocIndex:10},{value:"You can manually trigger scrollbar filtering interaction through the following methods:",paraId:30,tocIndex:11},{value:"scrollbarX:filter",paraId:31,tocIndex:11},{value:" - Trigger x-axis scrollbar filtering",paraId:31,tocIndex:11},{value:"scrollbarY:filter",paraId:31,tocIndex:11},{value:" - Trigger y-axis scrollbar filtering",paraId:31,tocIndex:11},{value:"chart.emit('scrollbarX:filter', {\n  data: { selection: [['2001-03'], undefined] },\n});\n\nchart.emit('scrollbarY:filter', {\n  data: { selection: [undefined, [50, 550]] },\n});\n",paraId:32,tocIndex:11},{value:"The following example shows how to add basic X-axis scrollbar filtering functionality to a column chart:",paraId:33,tocIndex:13},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  height: 300,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency', y1: 0.000001 },\n  scale: { y: { type: 'log' } },\n  scrollbar: { x: true }, // Enable X-axis scrollbar\n});\n\nchart.render();\n",paraId:34,tocIndex:13},{value:"This example shows how to listen to the scrollbar's valuechange event to get the values before and after scrollbar sliding:",paraId:35,tocIndex:14},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  height: 300,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency', y1: 0.000001 },\n  scale: { y: { type: 'log' } },\n  scrollbar: { x: true },\n});\n\n// After rendering the chart\nchart.on('afterrender', () => {\n  const { canvas } = chart.getContext();\n  const scrollbar = canvas.document.getElementsByClassName('g2-scrollbar')[0];\n\n  if (scrollbar) {\n    scrollbar.addEventListener('valuechange', (e) => {\n      console.log('Scrollbar value changed:', e.detail);\n    });\n  }\n});\n\nchart.render();\n",paraId:36,tocIndex:14},{value:"This example demonstrates how to use scrollbars on both X and Y axis simultaneously:",paraId:37,tocIndex:15},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  height: 400,\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  },\n  encode: {\n    x: 'weight',\n    y: 'height',\n    color: 'gender',\n    size: 4,\n  },\n  scrollbar: {\n    x: { ratio: 0.3 }, // Show 30% of X-axis data\n    y: { ratio: 0.4 }, // Show 40% of Y-axis data\n  },\n});\n\nchart.render();\n",paraId:38,tocIndex:15}]},86994:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(41601);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"sliderFilter",paraId:0,tocIndex:0},{value:" interaction targets the data domain, filtering the displayed data range through slider controls. It allows users to dynamically adjust the data range displayed in visualization charts by dragging sliders, thus achieving interactive data filtering.",paraId:0,tocIndex:0},{value:"Trigger: Drag slider component",paraId:1,tocIndex:0},{value:"End: Release slider",paraId:1,tocIndex:0},{value:"Effect: Update chart's displayed data range",paraId:1,tocIndex:0},{value:"There are two ways to configure ",paraId:2,tocIndex:1},{value:"sliderFilter",paraId:2,tocIndex:1},{value:" interaction:\nFirst, automatically enable slider axis filtering interaction by configuring the slider component:",paraId:2,tocIndex:1},{value:"({\n  slider: {\n    x: true,\n    y: true,\n  },\n});\n",paraId:3,tocIndex:1},{value:"Second, configure directly in interaction:",paraId:4,tocIndex:1},{value:"({\n  slider: {\n    x: true,\n  },\n  interaction: {\n    sliderFilter: true, // Use default configuration\n  },\n});\n",paraId:5,tocIndex:1},{value:"Interaction can be configured at the View level:",paraId:6,tocIndex:2},{value:"({\n  type: 'view',\n  slider: { x: true, y: true },\n  interaction: { sliderFilter: true },\n});\n",paraId:7,tocIndex:2},{value:"Property",paraId:8,tocIndex:3},{value:"Description",paraId:8,tocIndex:3},{value:"Type",paraId:8,tocIndex:3},{value:"Default",paraId:8,tocIndex:3},{value:"Required",paraId:8,tocIndex:3},{value:"initDomain",paraId:8,tocIndex:3},{value:"Initialize coordinate axis range",paraId:8,tocIndex:3},{value:"{ x: [number, number], y: [number, number] }",paraId:8,tocIndex:3},{value:"{}",paraId:8,tocIndex:3},{value:"className",paraId:8,tocIndex:3},{value:"CSS class name for slider component",paraId:8,tocIndex:3},{value:"string",paraId:8,tocIndex:3},{value:"'slider'",paraId:8,tocIndex:3},{value:"prefix",paraId:8,tocIndex:3},{value:"Slider component prefix, used for identification and event naming",paraId:8,tocIndex:3},{value:"string",paraId:8,tocIndex:3},{value:"'slider'",paraId:8,tocIndex:3},{value:"setValue",paraId:8,tocIndex:3},{value:"Custom function to set slider value",paraId:8,tocIndex:3},{value:"(component, values) => void",paraId:8,tocIndex:3},{value:"(component, values) => component.setValues(values)",paraId:8,tocIndex:3},{value:"hasState",paraId:8,tocIndex:3},{value:"Whether to save slider ratio state",paraId:8,tocIndex:3},{value:"boolean",paraId:8,tocIndex:3},{value:"false",paraId:8,tocIndex:3},{value:"wait",paraId:8,tocIndex:3},{value:"Throttle wait time (milliseconds)",paraId:8,tocIndex:3},{value:"number",paraId:8,tocIndex:3},{value:"50",paraId:8,tocIndex:3},{value:"leading",paraId:8,tocIndex:3},{value:"Whether to execute at the beginning during throttling",paraId:8,tocIndex:3},{value:"boolean",paraId:8,tocIndex:3},{value:"true",paraId:8,tocIndex:3},{value:"trailing",paraId:8,tocIndex:3},{value:"Whether to execute at the end during throttling",paraId:8,tocIndex:3},{value:"boolean",paraId:8,tocIndex:3},{value:"false",paraId:8,tocIndex:3},{value:"getInitValues",paraId:8,tocIndex:3},{value:"Function to get initial slider values",paraId:8,tocIndex:3},{value:"(slider) => [number, number]",paraId:8,tocIndex:3},{value:"undefined",paraId:8,tocIndex:3},{value:"In addition to the configuration for sliderFilter interaction, the slider component itself has some important configuration options that affect the behavior of slider axis filtering:",paraId:9,tocIndex:4},{value:"Property",paraId:10,tocIndex:4},{value:"Description",paraId:10,tocIndex:4},{value:"Type",paraId:10,tocIndex:4},{value:"Default",paraId:10,tocIndex:4},{value:"Required",paraId:10,tocIndex:4},{value:"padding",paraId:10,tocIndex:4},{value:"Slider axis inner padding",paraId:10,tocIndex:4},{value:"number | number[]",paraId:10,tocIndex:4},{value:"-",paraId:10,tocIndex:4},{value:"values",paraId:10,tocIndex:4},{value:"Initial selection range of slider axis, in 0 ～ 1 interval",paraId:10,tocIndex:4},{value:"[number, number]",paraId:10,tocIndex:4},{value:"-",paraId:10,tocIndex:4},{value:"slidable",paraId:10,tocIndex:4},{value:"Whether to allow dragging selection and handles",paraId:10,tocIndex:4},{value:"boolean",paraId:10,tocIndex:4},{value:"true",paraId:10,tocIndex:4},{value:"For detailed documentation see ",paraId:11,tocIndex:4},{value:"Slider Component",paraId:12,tocIndex:4},{value:"Slider axis filtering interaction supports the following events:",paraId:13,tocIndex:6},{value:"sliderX:filter",paraId:14,tocIndex:6},{value:" - Trigger X axis filtering",paraId:14,tocIndex:6},{value:"sliderY:filter",paraId:14,tocIndex:6},{value:" - Trigger Y axis filtering",paraId:14,tocIndex:6},{value:"chart.emit('sliderX:filter', {\n  data: { selection: [['2001-01', '2001-03'], undefined] },\n});\n\nchart.emit('sliderY:filter', {\n  data: { selection: [undefined, [50, 550]] },\n});\n",paraId:15,tocIndex:6},{value:"sliderX:filter",paraId:16,tocIndex:7},{value:" - X axis slider filter event",paraId:16,tocIndex:7},{value:"sliderY:filter",paraId:16,tocIndex:7},{value:" - Y axis slider filter event",paraId:16,tocIndex:7},{value:"chart.on('sliderX:filter', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('sliderX:filter', data.selection);\n});\n\nchart.on('sliderY:filter', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('sliderY:filter', data.selection);\n});\n",paraId:17,tocIndex:7},{value:"The following example shows how to add basic X-axis slider axis filtering functionality to a line chart:",paraId:18,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  autoFit: true,\n  height: 300,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  encode: { x: 'letter', y: 'frequency', y1: 0.000001 },\n  slider: { x: true },\n  interaction: {\n    sliderFilter: {\n      wait: 100,\n      leading: false,\n      tariling: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:19,tocIndex:9}]},78442:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(24789);const t=[{value:"The area (",paraId:0,tocIndex:0},{value:"area",paraId:0,tocIndex:0},{value:") graphic mark is mostly used to draw common area charts. It is a graphic that reflects numerical changes as ordered variables change, with principles similar to ",paraId:0,tocIndex:0},{value:"line",paraId:0,tocIndex:0},{value:". The characteristic of area charts is that the region between the polyline and the independent variable coordinate axis is filled with color or texture.",paraId:0,tocIndex:0},{value:"Additionally, in terms of data structure, the difference between ",paraId:1,tocIndex:0},{value:"area",paraId:1,tocIndex:0},{value:" and ",paraId:1,tocIndex:0},{value:"line",paraId:1,tocIndex:0},{value:" is that ",paraId:1,tocIndex:0},{value:"area",paraId:1,tocIndex:0},{value:" can set an array of length ",paraId:1,tocIndex:0},{value:"2",paraId:1,tocIndex:0},{value:" as the data for the ",paraId:1,tocIndex:0},{value:"y",paraId:1,tocIndex:0},{value:" channel. The first and second elements of the array represent the upper and lower boundaries of the area chart respectively. This method is used to draw interval area charts. If not set, the default lower boundary is ",paraId:1,tocIndex:0},{value:"0",paraId:1,tocIndex:0},{value:".",paraId:1,tocIndex:0},{value:"Area charts can also be used for comparing multiple series of data, expressing data totals and trends. Compared to line charts, area charts can not only clearly reflect data trend changes but also emphasize differences and comparisons between data of different categories.",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/aapl.json',\n  },\n  // Configure visual channels\n  encode: {\n    x: (d) => new Date(d.date), // Configure x channel\n    y: 'close', // Configure y channel\n    shape: 'area', // Configure shape channel, can be omitted when default is 'area'. Options: 'area', 'smooth', 'hvh', 'vh', 'hv'\n  },\n  // Configure styles\n  style: {\n    fill: 'l(270) 0:#ffffff 0.5:#7ec2f3 1:#1890ff', // Configure area chart fill color as gradient\n    fillOpacity: 0.9, // Configure area mark fill opacity as 0.9\n  },\n  // Configure coordinate system\n  coordinate: {},\n});\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"For more examples, check the ",paraId:4,tocIndex:0},{value:"Chart Examples - Area Charts",paraId:5,tocIndex:0},{value:" page.",paraId:4,tocIndex:0},{value:"Property",paraId:6,tocIndex:1},{value:"Description",paraId:6,tocIndex:1},{value:"Type",paraId:6,tocIndex:1},{value:"Default Value",paraId:6,tocIndex:1},{value:"Required",paraId:6,tocIndex:1},{value:"encode",paraId:6,tocIndex:1},{value:"Configure visual channels for ",paraId:6,tocIndex:1},{value:"area",paraId:6,tocIndex:1},{value:" marks, including ",paraId:6,tocIndex:1},{value:"x",paraId:6,tocIndex:1},{value:", ",paraId:6,tocIndex:1},{value:"y",paraId:6,tocIndex:1},{value:", ",paraId:6,tocIndex:1},{value:"color",paraId:6,tocIndex:1},{value:", ",paraId:6,tocIndex:1},{value:"shape",paraId:6,tocIndex:1},{value:", etc., to specify relationships between visual elements and data",paraId:6,tocIndex:1},{value:"encode",paraId:7,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"✓",paraId:6,tocIndex:1},{value:"coordinate",paraId:6,tocIndex:1},{value:"Configure coordinate system for ",paraId:6,tocIndex:1},{value:"area",paraId:6,tocIndex:1},{value:" marks. The coordinate system performs a series of point transformations to change the spatial display form",paraId:6,tocIndex:1},{value:"coordinate",paraId:8,tocIndex:1},{value:"{type: 'cartesian' }",paraId:6,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:"Configure graphic styles for ",paraId:6,tocIndex:1},{value:"area",paraId:6,tocIndex:1},{value:" marks",paraId:6,tocIndex:1},{value:"style",paraId:9,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"Configure visual channels for ",paraId:10,tocIndex:2},{value:"area",paraId:10,tocIndex:2},{value:" marks.",paraId:10,tocIndex:2},{value:"Property",paraId:11,tocIndex:2},{value:"Description",paraId:11,tocIndex:2},{value:"Type",paraId:11,tocIndex:2},{value:"Default Value",paraId:11,tocIndex:2},{value:"Required",paraId:11,tocIndex:2},{value:"x",paraId:11,tocIndex:2},{value:"Bind the ",paraId:11,tocIndex:2},{value:"x",paraId:11,tocIndex:2},{value:" property channel of ",paraId:11,tocIndex:2},{value:"area",paraId:11,tocIndex:2},{value:" marks, usually a time or ordered categorical field in ",paraId:11,tocIndex:2},{value:"data",paraId:11,tocIndex:2},{value:"encode",paraId:12,tocIndex:2},{value:"-",paraId:11,tocIndex:2},{value:"✓",paraId:11,tocIndex:2},{value:"y",paraId:11,tocIndex:2},{value:"Bind the ",paraId:11,tocIndex:2},{value:"y",paraId:11,tocIndex:2},{value:" property channel of ",paraId:11,tocIndex:2},{value:"area",paraId:11,tocIndex:2},{value:" marks, usually a numerical or array field in ",paraId:11,tocIndex:2},{value:"data",paraId:11,tocIndex:2},{value:"encode",paraId:13,tocIndex:2},{value:"-",paraId:11,tocIndex:2},{value:"✓",paraId:11,tocIndex:2},{value:"color",paraId:11,tocIndex:2},{value:"Bind the ",paraId:11,tocIndex:2},{value:"color",paraId:11,tocIndex:2},{value:" property channel of ",paraId:11,tocIndex:2},{value:"area",paraId:11,tocIndex:2},{value:" marks. If data fields are mapped to color channels, data will be grouped and split into multiple areas of different colors for stacked areas",paraId:11,tocIndex:2},{value:"encode",paraId:14,tocIndex:2},{value:"-",paraId:11,tocIndex:2},{value:"shape",paraId:11,tocIndex:2},{value:"Bind the ",paraId:11,tocIndex:2},{value:"shape",paraId:11,tocIndex:2},{value:" property channel of ",paraId:11,tocIndex:2},{value:"area",paraId:11,tocIndex:2},{value:" marks to change the drawing shape of the graphic mark",paraId:11,tocIndex:2},{value:"area",paraId:11,tocIndex:2},{value:" | ",paraId:11,tocIndex:2},{value:"smooth",paraId:11,tocIndex:2},{value:" | ",paraId:11,tocIndex:2},{value:"vh",paraId:11,tocIndex:2},{value:" | ",paraId:11,tocIndex:2},{value:"hv",paraId:11,tocIndex:2},{value:" | ",paraId:11,tocIndex:2},{value:"hvh",paraId:11,tocIndex:2},{value:"area",paraId:11,tocIndex:2},{value:"The position visual channels of ",paraId:15,tocIndex:3},{value:"area",paraId:15,tocIndex:3},{value:" marks require values from both ",paraId:15,tocIndex:3},{value:"x",paraId:15,tocIndex:3},{value:" and ",paraId:15,tocIndex:3},{value:"y",paraId:15,tocIndex:3},{value:" fields. The supported data formats are:",paraId:15,tocIndex:3},{value:"Both ",paraId:16,tocIndex:3},{value:"x",paraId:16,tocIndex:3},{value:" and ",paraId:16,tocIndex:3},{value:"y",paraId:16,tocIndex:3},{value:" are numerical values (categorical, continuous). Since area charts represent data trends, try to avoid having the field corresponding to the ",paraId:16,tocIndex:3},{value:"x",paraId:16,tocIndex:3},{value:" axis be an unordered categorical type.",paraId:16,tocIndex:3},{value:"x",paraId:16,tocIndex:3},{value:" is a numerical value (categorical, continuous), ",paraId:16,tocIndex:3},{value:"y",paraId:16,tocIndex:3},{value:" is an array representing an interval value",paraId:16,tocIndex:3},{value:"x Channel Binding",paraId:17,tocIndex:3},{value:"y Channel Binding",paraId:17,tocIndex:3},{value:"Explanation",paraId:17,tocIndex:3},{value:"Numerical",paraId:17,tocIndex:3},{value:"Numerical",paraId:17,tocIndex:3},{value:"Regular area chart",paraId:17,tocIndex:3},{value:"Numerical",paraId:17,tocIndex:3},{value:"Array",paraId:17,tocIndex:3},{value:"Stacked and interval area chart",paraId:17,tocIndex:3},{value:"The ",paraId:18,tocIndex:4},{value:"color",paraId:18,tocIndex:4},{value:" visual channel affects the fill color of the enclosed area in ",paraId:18,tocIndex:4},{value:"area",paraId:18,tocIndex:4},{value:" graphic marks. A single area in an ",paraId:18,tocIndex:4},{value:"area",paraId:18,tocIndex:4},{value:" mark can only use one color (or gradient), but if data fields are mapped to color channels, the data will be grouped and split into multiple areas:",paraId:18,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  data: [\n    { country: 'Asia', year: '1750', value: 502 },\n    { country: 'Asia', year: '1800', value: 635 },\n    { country: 'Asia', year: '1850', value: 809 },\n    { country: 'Asia', year: '1900', value: 947 },\n    { country: 'Asia', year: '1950', value: 1402 },\n    { country: 'Asia', year: '1999', value: 3634 },\n    { country: 'Asia', year: '2050', value: 5268 },\n    { country: 'Africa', year: '1750', value: 106 },\n    { country: 'Africa', year: '1800', value: 107 },\n    { country: 'Africa', year: '1850', value: 111 },\n    { country: 'Africa', year: '1900', value: 133 },\n    { country: 'Africa', year: '1950', value: 221 },\n    { country: 'Africa', year: '1999', value: 767 },\n    { country: 'Africa', year: '2050', value: 1766 },\n    { country: 'Europe', year: '1750', value: 163 },\n    { country: 'Europe', year: '1800', value: 203 },\n    { country: 'Europe', year: '1850', value: 276 },\n    { country: 'Europe', year: '1900', value: 408 },\n    { country: 'Europe', year: '1950', value: 547 },\n    { country: 'Europe', year: '1999', value: 729 },\n    { country: 'Europe', year: '2050', value: 628 },\n  ],\n  encode: {\n    x: 'year', // Configure x channel\n    y: 'value', // Configure y channel\n    color: 'country', // Configure color channel\n  },\n  style: { fillOpacity: 0.3 }, // Configure area mark fill opacity as 0.3\n});\n\nchart.render();\n",paraId:19,tocIndex:4},{value:"By configuring ",paraId:20,tocIndex:4},{value:"stackY",paraId:21,tocIndex:4},{value:" in the ",paraId:20,tocIndex:4},{value:"transform",paraId:20,tocIndex:4},{value:", grouped areas can be stacked to form stacked area charts, avoiding information blur caused by overlapping:",paraId:20,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  data: [\n    { country: 'Asia', year: '1750', value: 502 },\n    { country: 'Asia', year: '1800', value: 635 },\n    { country: 'Asia', year: '1850', value: 809 },\n    { country: 'Asia', year: '1900', value: 947 },\n    { country: 'Asia', year: '1950', value: 1402 },\n    { country: 'Asia', year: '1999', value: 3634 },\n    { country: 'Asia', year: '2050', value: 5268 },\n    { country: 'Africa', year: '1750', value: 106 },\n    { country: 'Africa', year: '1800', value: 107 },\n    { country: 'Africa', year: '1850', value: 111 },\n    { country: 'Africa', year: '1900', value: 133 },\n    { country: 'Africa', year: '1950', value: 221 },\n    { country: 'Africa', year: '1999', value: 767 },\n    { country: 'Africa', year: '2050', value: 1766 },\n    { country: 'Europe', year: '1750', value: 163 },\n    { country: 'Europe', year: '1800', value: 203 },\n    { country: 'Europe', year: '1850', value: 276 },\n    { country: 'Europe', year: '1900', value: 408 },\n    { country: 'Europe', year: '1950', value: 547 },\n    { country: 'Europe', year: '1999', value: 729 },\n    { country: 'Europe', year: '2050', value: 628 },\n  ],\n  encode: {\n    x: 'year', // Configure x channel\n    y: 'value', // Configure y channel\n    color: 'country', // Configure color channel\n  },\n  transform: [{ type: 'stackY' }], // Group by specified channels, stack y and y1 channels for each group to achieve stacking effect\n  style: { fillOpacity: 0.3 }, // Configure area mark fill opacity as 0.3\n});\n\nchart.render();\n",paraId:22,tocIndex:4},{value:"The supported shapes for ",paraId:23,tocIndex:5},{value:"area",paraId:23,tocIndex:5},{value:" marks are as follows:",paraId:23,tocIndex:5},{value:"Shape",paraId:24,tocIndex:5},{value:"Description",paraId:24,tocIndex:5},{value:"Example",paraId:24,tocIndex:5},{value:"area",paraId:24,tocIndex:5},{value:"Draw area chart with straight line connections",paraId:24,tocIndex:5},{value:"smooth",paraId:24,tocIndex:5},{value:"Draw area chart with smooth curves",paraId:24,tocIndex:5},{value:"vh",paraId:24,tocIndex:5},{value:"Draw step area chart, vertical then horizontal lines",paraId:24,tocIndex:5},{value:"hv",paraId:24,tocIndex:5},{value:"Draw step area chart, horizontal then vertical lines",paraId:24,tocIndex:5},{value:"hvh",paraId:24,tocIndex:5},{value:"Draw step area chart, vertical-horizontal-vertical, midpoint connection",paraId:24,tocIndex:5},{value:"The display of ",paraId:25,tocIndex:6},{value:"area",paraId:25,tocIndex:6},{value:" graphic marks differs under different coordinate systems. Depending on the coordinate system or coordinate system transformations, various charts such as area charts and radar charts can be drawn.",paraId:25,tocIndex:6},{value:"Coordinate System or Transformation",paraId:26,tocIndex:6},{value:"Coordinate Configuration",paraId:26,tocIndex:6},{value:"Chart Type",paraId:26,tocIndex:6},{value:"Cartesian coordinate system",paraId:26,tocIndex:6},{value:"{ type: 'cartesian' }",paraId:26,tocIndex:6},{value:"Area charts etc",paraId:26,tocIndex:6},{value:"Polar coordinate system",paraId:26,tocIndex:6},{value:"{ type: 'polar' }",paraId:26,tocIndex:6},{value:"Radar charts etc",paraId:26,tocIndex:6},{value:"In ",paraId:27,tocIndex:6},{value:"polar coordinate systems",paraId:27,tocIndex:6},{value:", area charts need to be closed. Commonly used to draw radar charts.",paraId:27,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  data: [\n    { item: 'Design', type: 'a', score: 70 },\n    { item: 'Design', type: 'b', score: 30 },\n    { item: 'Development', type: 'a', score: 60 },\n    { item: 'Development', type: 'b', score: 70 },\n    { item: 'Marketing', type: 'a', score: 50 },\n    { item: 'Marketing', type: 'b', score: 60 },\n    { item: 'Users', type: 'a', score: 40 },\n    { item: 'Users', type: 'b', score: 50 },\n    { item: 'Test', type: 'a', score: 60 },\n    { item: 'Test', type: 'b', score: 70 },\n    { item: 'Language', type: 'a', score: 70 },\n    { item: 'Language', type: 'b', score: 50 },\n    { item: 'Technology', type: 'a', score: 50 },\n    { item: 'Technology', type: 'b', score: 40 },\n    { item: 'Support', type: 'a', score: 30 },\n    { item: 'Support', type: 'b', score: 40 },\n    { item: 'Sales', type: 'a', score: 60 },\n    { item: 'Sales', type: 'b', score: 40 },\n    { item: 'UX', type: 'a', score: 50 },\n    { item: 'UX', type: 'b', score: 60 },\n  ],\n  encode: { x: 'item', y: 'score', color: 'type' },\n  coordinate: { type: 'polar' }, // Configure coordinate system as polar for drawing radar charts\n  style: { fillOpacity: 0.5 },\n  axis: { x: { grid: true }, y: { zIndex: 1, title: false } }, // Configure chart components - coordinate axis\n  scale: { x: { padding: 0.5, align: 0 }, y: { tickCount: 5 } }, // Configure scales for better chart display\n});\n\nchart.render();\n",paraId:28,tocIndex:6},{value:"Configure styles for ",paraId:29,tocIndex:7},{value:"area",paraId:29,tocIndex:7},{value:" marks.",paraId:29,tocIndex:7},{value:"Property",paraId:30,tocIndex:7},{value:"Description",paraId:30,tocIndex:7},{value:"Type",paraId:30,tocIndex:7},{value:"Default Value",paraId:30,tocIndex:7},{value:"Required",paraId:30,tocIndex:7},{value:"connect",paraId:30,tocIndex:7},{value:"Whether to connect null values with ",paraId:30,tocIndex:7},{value:"connector",paraId:30,tocIndex:7},{value:" graphics",paraId:30,tocIndex:7},{value:"boolean",paraId:30,tocIndex:7},{value:"false",paraId:30,tocIndex:7},{value:"defined",paraId:30,tocIndex:7},{value:"Determines if data is a null value",paraId:30,tocIndex:7},{value:"(d) => boolean",paraId:30,tocIndex:7},{value:"(d) => !Number.isNaN(d) && d !== undefined && d !== null",paraId:30,tocIndex:7},{value:"connectFill",paraId:30,tocIndex:7},{value:"connector",paraId:30,tocIndex:7},{value:" graphic fill color, will be overridden by the overall ",paraId:30,tocIndex:7},{value:"area",paraId:30,tocIndex:7},{value:" mark fill color ",paraId:30,tocIndex:7},{value:"fill",paraId:30,tocIndex:7},{value:"string | (d, index, data, column) => string",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"connectFillOpacity",paraId:30,tocIndex:7},{value:"connector",paraId:30,tocIndex:7},{value:" graphic fill opacity",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"connectStroke",paraId:30,tocIndex:7},{value:"connector",paraId:30,tocIndex:7},{value:" graphic stroke",paraId:30,tocIndex:7},{value:"string | (d, index, data, column) => string",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"connectStrokeOpacity",paraId:30,tocIndex:7},{value:"connector",paraId:30,tocIndex:7},{value:" graphic stroke opacity",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"connectLineWidth",paraId:30,tocIndex:7},{value:"connector",paraId:30,tocIndex:7},{value:" graphic stroke width",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"connectLineDash",paraId:30,tocIndex:7},{value:"connector",paraId:30,tocIndex:7},{value:" graphic stroke dash configuration. First value is dash segment length, second is gap distance. Setting lineDash to [0,0] results in no stroke",paraId:30,tocIndex:7},{value:"[number,number] | (d, index, data, column) => [number, number]",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"connectOpacity",paraId:30,tocIndex:7},{value:"connector",paraId:30,tocIndex:7},{value:" graphic overall opacity",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"connectShadowColor",paraId:30,tocIndex:7},{value:"connector",paraId:30,tocIndex:7},{value:" graphic shadow color",paraId:30,tocIndex:7},{value:"string | (d, index, data, column) => string",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"connectShadowBlur",paraId:30,tocIndex:7},{value:"connector",paraId:30,tocIndex:7},{value:" graphic shadow Gaussian blur coefficient",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"connectShadowOffsetX",paraId:30,tocIndex:7},{value:"Horizontal distance of shadow from ",paraId:30,tocIndex:7},{value:"connector",paraId:30,tocIndex:7},{value:" graphic",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"connectShadowOffsetY",paraId:30,tocIndex:7},{value:"Vertical distance of shadow from ",paraId:30,tocIndex:7},{value:"connector",paraId:30,tocIndex:7},{value:" graphic",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"connectCursor",paraId:30,tocIndex:7},{value:"connector",paraId:30,tocIndex:7},{value:" graphic mouse cursor style. Same as CSS cursor style",paraId:30,tocIndex:7},{value:"string | (d, index, data, column) => string",paraId:30,tocIndex:7},{value:"default",paraId:30,tocIndex:7},{value:"fill",paraId:30,tocIndex:7},{value:"area",paraId:30,tocIndex:7},{value:" graphic fill color",paraId:30,tocIndex:7},{value:"string | (d, index, data, column) => string",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"fillOpacity",paraId:30,tocIndex:7},{value:"area",paraId:30,tocIndex:7},{value:" graphic fill opacity",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"0.85",paraId:30,tocIndex:7},{value:"stroke",paraId:30,tocIndex:7},{value:"area",paraId:30,tocIndex:7},{value:" graphic stroke",paraId:30,tocIndex:7},{value:"string | (d, index, data, column) => string",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"strokeOpacity",paraId:30,tocIndex:7},{value:"area",paraId:30,tocIndex:7},{value:" graphic stroke opacity",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"lineWidth",paraId:30,tocIndex:7},{value:"area",paraId:30,tocIndex:7},{value:" graphic stroke width",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"0",paraId:30,tocIndex:7},{value:"lineDash",paraId:30,tocIndex:7},{value:"area",paraId:30,tocIndex:7},{value:" graphic stroke dash configuration. First value is dash segment length, second is gap distance. Setting lineDash to [0, 0] results in no stroke",paraId:30,tocIndex:7},{value:"[number,number] | (d, index, data, column) => [number, number]",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"opacity",paraId:30,tocIndex:7},{value:"area",paraId:30,tocIndex:7},{value:" graphic overall opacity",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"shadowColor",paraId:30,tocIndex:7},{value:"area",paraId:30,tocIndex:7},{value:" graphic shadow color",paraId:30,tocIndex:7},{value:"string | (d, index, data, column) => string",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"shadowBlur",paraId:30,tocIndex:7},{value:"area",paraId:30,tocIndex:7},{value:" graphic shadow Gaussian blur coefficient",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"shadowOffsetX",paraId:30,tocIndex:7},{value:"Horizontal distance of shadow from ",paraId:30,tocIndex:7},{value:"area",paraId:30,tocIndex:7},{value:" graphic",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"shadowOffsetY",paraId:30,tocIndex:7},{value:"Vertical distance of shadow from ",paraId:30,tocIndex:7},{value:"area",paraId:30,tocIndex:7},{value:" graphic",paraId:30,tocIndex:7},{value:"number | (d, index, data, column) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"cursor",paraId:30,tocIndex:7},{value:"area",paraId:30,tocIndex:7},{value:" graphic mouse cursor style. Same as CSS cursor style",paraId:30,tocIndex:7},{value:"string | (d, index, data, column) => string",paraId:30,tocIndex:7},{value:"default",paraId:30,tocIndex:7},{value:"Try it out:",paraId:31,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'area',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/aapl.json',\n  },\n  encode: {\n    x: (d) => new Date(d.date),\n    // Mock missing data. Set NaN from Jan. to Mar.\n    y: (d) => (new Date(d.date).getUTCMonth() <= 3 ? NaN : d.close),\n  },\n  style: {\n    connect: true,\n    // Configure connector styles\n    connectFill: 'grey', // Overridden by fill color\n    connectFillOpacity: 0.15,\n    // Configure area styles\n    fill: 'l(270) 0:#ffffff 0.5:#7ec2f3 1:#1890ff',\n    opacity: 0.9,\n    stroke: 'yellow',\n  },\n});\n\nchart.render();\n",paraId:32,tocIndex:7},{value:"When using the connect feature, how to determine what kind of data is a null value?",paraId:33,tocIndex:8},{value:"You can use the ",paraId:34,tocIndex:8},{value:"defined",paraId:34,tocIndex:8},{value:" configuration to determine whether it's a non-null value. By default, NaN, undefined, and null are null values. If you need data with value ",paraId:34,tocIndex:8},{value:"0",paraId:34,tocIndex:8},{value:" to be treated as null for connection:",paraId:34,tocIndex:8},{value:"chart\n  .area()\n  // ...\n  .style('defined', (v) => v === 0);\n",paraId:35,tocIndex:8}]},18336:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(57656);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"box",paraId:0,tocIndex:0},{value:" mark is used to draw boxplots (also known as box-and-whisker plots), which are statistical charts used to display the distribution of a dataset. Boxplots typically contain the following key statistical values:",paraId:0,tocIndex:0},{value:"Minimum",paraId:1,tocIndex:0},{value:": The smallest value in the dataset (excluding outliers)",paraId:1,tocIndex:0},{value:"Lower Quartile (Q1)",paraId:1,tocIndex:0},{value:": The value at the 25th percentile of the dataset",paraId:1,tocIndex:0},{value:"Median (Q2)",paraId:1,tocIndex:0},{value:": The value at the 50th percentile of the dataset",paraId:1,tocIndex:0},{value:"Upper Quartile (Q3)",paraId:1,tocIndex:0},{value:": The value at the 75th percentile of the dataset",paraId:1,tocIndex:0},{value:"Maximum",paraId:1,tocIndex:0},{value:": The largest value in the dataset (excluding outliers)",paraId:1,tocIndex:0},{value:"The special characteristic of the ",paraId:2,tocIndex:0},{value:"box",paraId:2,tocIndex:0},{value:" mark is that its ",paraId:2,tocIndex:0},{value:"y",paraId:2,tocIndex:0},{value:" channel corresponds to data that is an array containing these statistical values. G2 maps this data to a collection of 14 points needed for the boxplot, forming a complete boxplot graphic.",paraId:2,tocIndex:0},{value:"The difference between the ",paraId:3,tocIndex:0},{value:"box",paraId:3,tocIndex:0},{value:" mark and the ",paraId:3,tocIndex:0},{value:"boxplot",paraId:4,tocIndex:0},{value:" mark is:",paraId:3,tocIndex:0},{value:"box",paraId:5,tocIndex:0},{value:" is an atomic mark that requires developers to manually specify data for the 5 statistical points",paraId:5,tocIndex:0},{value:"boxplot",paraId:5,tocIndex:0},{value:" is a high-level mark with built-in data grouping and statistical aggregation functionality",paraId:5,tocIndex:0},{value:"Therefore, ",paraId:6,tocIndex:0},{value:"box",paraId:6,tocIndex:0},{value:" is more suitable for visualization after backend computation and statistics on large datasets, while ",paraId:6,tocIndex:0},{value:"boxplot",paraId:6,tocIndex:0},{value:" is more suitable for frontend data exploration and analysis.",paraId:6,tocIndex:0},{value:"The ",paraId:7,tocIndex:1},{value:"box",paraId:7,tocIndex:1},{value:" mark internally maps data to the following collection of 14 points, forming a complete boxplot:",paraId:7,tocIndex:1},{value:"p0           p2          p1\n   ──────────┬──────────\n             │\n             │\n             │\n             │ p3\np4 ┌─────────┴──────────┐ p5\n   │                    │\n   │                    │\np8 ├────────────────────┤ p9\n   │                    │\n   │        p10         │\np7 └─────────┬──────────┘ p6\n             │\n             │\n             │\n  ───────────┴───────────\np12         p11           p13\n",paraId:8,tocIndex:1},{value:"Property",paraId:9,tocIndex:2},{value:"Description",paraId:9,tocIndex:2},{value:"Type",paraId:9,tocIndex:2},{value:"Default Value",paraId:9,tocIndex:2},{value:"Required",paraId:9,tocIndex:2},{value:"encode",paraId:9,tocIndex:2},{value:"Configure visual channels for the ",paraId:9,tocIndex:2},{value:"box",paraId:9,tocIndex:2},{value:" mark, including ",paraId:9,tocIndex:2},{value:"x",paraId:9,tocIndex:2},{value:", ",paraId:9,tocIndex:2},{value:"y",paraId:9,tocIndex:2},{value:", ",paraId:9,tocIndex:2},{value:"color",paraId:9,tocIndex:2},{value:", ",paraId:9,tocIndex:2},{value:"shape",paraId:9,tocIndex:2},{value:", etc.",paraId:9,tocIndex:2},{value:"encode",paraId:10,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"✓",paraId:9,tocIndex:2},{value:"coordinate",paraId:9,tocIndex:2},{value:"Configure the coordinate system for the ",paraId:9,tocIndex:2},{value:"box",paraId:9,tocIndex:2},{value:" mark, which performs point transformations",paraId:9,tocIndex:2},{value:"coordinate",paraId:11,tocIndex:2},{value:"{type: 'cartesian' }",paraId:9,tocIndex:2},{value:"style",paraId:9,tocIndex:2},{value:"Configure the graphic style of the ",paraId:9,tocIndex:2},{value:"box",paraId:9,tocIndex:2},{value:" mark",paraId:9,tocIndex:2},{value:"style",paraId:12,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"Configure visual channels for the ",paraId:13,tocIndex:3},{value:"box",paraId:13,tocIndex:3},{value:" mark.",paraId:13,tocIndex:3},{value:"Property",paraId:14,tocIndex:3},{value:"Description",paraId:14,tocIndex:3},{value:"Type",paraId:14,tocIndex:3},{value:"Default Value",paraId:14,tocIndex:3},{value:"Required",paraId:14,tocIndex:3},{value:"x",paraId:14,tocIndex:3},{value:"Bind the ",paraId:14,tocIndex:3},{value:"x",paraId:14,tocIndex:3},{value:" property channel for the ",paraId:14,tocIndex:3},{value:"box",paraId:14,tocIndex:3},{value:" mark, usually a categorical field",paraId:14,tocIndex:3},{value:"encode",paraId:15,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"✓",paraId:14,tocIndex:3},{value:"y",paraId:14,tocIndex:3},{value:"Bind the ",paraId:14,tocIndex:3},{value:"y",paraId:14,tocIndex:3},{value:" property channel for the ",paraId:14,tocIndex:3},{value:"box",paraId:14,tocIndex:3},{value:" mark, usually an array containing 5 statistical values in order: minimum, Q1, median, Q3, maximum",paraId:14,tocIndex:3},{value:"encode",paraId:16,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"✓",paraId:14,tocIndex:3},{value:"color",paraId:14,tocIndex:3},{value:"Bind the ",paraId:14,tocIndex:3},{value:"color",paraId:14,tocIndex:3},{value:" property channel for the ",paraId:14,tocIndex:3},{value:"box",paraId:14,tocIndex:3},{value:" mark, used to distinguish boxplots of different categories",paraId:14,tocIndex:3},{value:"encode",paraId:17,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"shape",paraId:14,tocIndex:3},{value:"Bind the ",paraId:14,tocIndex:3},{value:"shape",paraId:14,tocIndex:3},{value:" property channel for the ",paraId:14,tocIndex:3},{value:"box",paraId:14,tocIndex:3},{value:" mark, available values are ",paraId:14,tocIndex:3},{value:"box",paraId:14,tocIndex:3},{value:", ",paraId:14,tocIndex:3},{value:"violin",paraId:14,tocIndex:3},{value:"'box'",paraId:14,tocIndex:3},{value:" | ",paraId:14,tocIndex:3},{value:"'violin'",paraId:14,tocIndex:3},{value:"'box'",paraId:14,tocIndex:3},{value:"series",paraId:14,tocIndex:3},{value:"Bind the ",paraId:14,tocIndex:3},{value:"series",paraId:14,tocIndex:3},{value:" property channel for the ",paraId:14,tocIndex:3},{value:"box",paraId:14,tocIndex:3},{value:" mark, used for grouped display of boxplots",paraId:14,tocIndex:3},{value:"encode",paraId:18,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"The display of ",paraId:19,tocIndex:4},{value:"box",paraId:19,tocIndex:4},{value:" marks varies under different coordinate systems. Different boxplot forms can be drawn based on coordinate systems or coordinate transformations.",paraId:19,tocIndex:4},{value:"Coordinate System or Transform",paraId:20,tocIndex:4},{value:"Coordinate Configuration",paraId:20,tocIndex:4},{value:"Chart",paraId:20,tocIndex:4},{value:"Cartesian Coordinate System",paraId:20,tocIndex:4},{value:"{ type: 'cartesian' }",paraId:20,tocIndex:4},{value:"Standard Boxplot",paraId:20,tocIndex:4},{value:"Polar Coordinate System",paraId:20,tocIndex:4},{value:"{ type: 'polar' }",paraId:20,tocIndex:4},{value:"Polar Boxplot",paraId:20,tocIndex:4},{value:"Configure the graphic style of the ",paraId:21,tocIndex:5},{value:"box",paraId:21,tocIndex:5},{value:" mark. The ",paraId:21,tocIndex:5},{value:"box",paraId:21,tocIndex:5},{value:" mark supports two shapes: ",paraId:21,tocIndex:5},{value:"box",paraId:21,tocIndex:5},{value:" (default) and ",paraId:21,tocIndex:5},{value:"violin",paraId:21,tocIndex:5},{value:".",paraId:21,tocIndex:5},{value:"Property",paraId:22,tocIndex:5},{value:"Description",paraId:22,tocIndex:5},{value:"Type",paraId:22,tocIndex:5},{value:"Default Value",paraId:22,tocIndex:5},{value:"Required",paraId:22,tocIndex:5},{value:"fill",paraId:22,tocIndex:5},{value:"Fill color of the graphic",paraId:22,tocIndex:5},{value:"string",paraId:22,tocIndex:5},{value:" | ",paraId:22,tocIndex:5},{value:"(datum, index, data, column) => string",paraId:22,tocIndex:5},{value:"-",paraId:22,tocIndex:5},{value:"fillOpacity",paraId:22,tocIndex:5},{value:"Fill opacity of the graphic",paraId:22,tocIndex:5},{value:"number",paraId:22,tocIndex:5},{value:" | ",paraId:22,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:22,tocIndex:5},{value:"0.95",paraId:22,tocIndex:5},{value:"stroke",paraId:22,tocIndex:5},{value:"Stroke color of the graphic",paraId:22,tocIndex:5},{value:"string",paraId:22,tocIndex:5},{value:" | ",paraId:22,tocIndex:5},{value:"(datum, index, data, column) => string",paraId:22,tocIndex:5},{value:"#000",paraId:22,tocIndex:5},{value:"strokeOpacity",paraId:22,tocIndex:5},{value:"Stroke opacity",paraId:22,tocIndex:5},{value:"number",paraId:22,tocIndex:5},{value:" | ",paraId:22,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:22,tocIndex:5},{value:"-",paraId:22,tocIndex:5},{value:"lineWidth",paraId:22,tocIndex:5},{value:"Width of the graphic stroke",paraId:22,tocIndex:5},{value:"number",paraId:22,tocIndex:5},{value:" | ",paraId:22,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:22,tocIndex:5},{value:"1",paraId:22,tocIndex:5},{value:"lineDash",paraId:22,tocIndex:5},{value:"Dash pattern for stroke, first value is length of each dash segment, second is gap between dashes",paraId:22,tocIndex:5},{value:"[number,number]",paraId:22,tocIndex:5},{value:" | ",paraId:22,tocIndex:5},{value:"(datum, index, data, column) => [number, number]",paraId:22,tocIndex:5},{value:"-",paraId:22,tocIndex:5},{value:"opacity",paraId:22,tocIndex:5},{value:"Overall opacity of the graphic",paraId:22,tocIndex:5},{value:"number",paraId:22,tocIndex:5},{value:" | ",paraId:22,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:22,tocIndex:5},{value:"-",paraId:22,tocIndex:5},{value:"shadowColor",paraId:22,tocIndex:5},{value:"Shadow color of the graphic",paraId:22,tocIndex:5},{value:"string",paraId:22,tocIndex:5},{value:" | ",paraId:22,tocIndex:5},{value:"(datum, index, data, column) => string",paraId:22,tocIndex:5},{value:"-",paraId:22,tocIndex:5},{value:"shadowBlur",paraId:22,tocIndex:5},{value:"Gaussian blur coefficient for the graphic shadow",paraId:22,tocIndex:5},{value:"number",paraId:22,tocIndex:5},{value:" | ",paraId:22,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:22,tocIndex:5},{value:"-",paraId:22,tocIndex:5},{value:"shadowOffsetX",paraId:22,tocIndex:5},{value:"Horizontal distance of shadow from graphic",paraId:22,tocIndex:5},{value:"number",paraId:22,tocIndex:5},{value:" | ",paraId:22,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:22,tocIndex:5},{value:"-",paraId:22,tocIndex:5},{value:"shadowOffsetY",paraId:22,tocIndex:5},{value:"Vertical distance of shadow from graphic",paraId:22,tocIndex:5},{value:"number",paraId:22,tocIndex:5},{value:" | ",paraId:22,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:22,tocIndex:5},{value:"-",paraId:22,tocIndex:5},{value:"cursor",paraId:22,tocIndex:5},{value:"Mouse cursor style. Same as CSS cursor style",paraId:22,tocIndex:5},{value:"string",paraId:22,tocIndex:5},{value:" | ",paraId:22,tocIndex:5},{value:"(datum, index, data, column) => string",paraId:22,tocIndex:5},{value:"'default'",paraId:22,tocIndex:5},{value:"Use the ",paraId:23,tocIndex:7},{value:"box",paraId:23,tocIndex:7},{value:" mark to create a basic boxplot with array data containing 5 statistical values.",paraId:23,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'box',\n  data: [\n    { x: 'Oceania', y: [1, 9, 16, 22, 24] },\n    { x: 'East Europe', y: [1, 5, 8, 12, 16] },\n    { x: 'Australia', y: [1, 8, 12, 19, 26] },\n    { x: 'South America', y: [2, 8, 12, 21, 28] },\n    { x: 'North Africa', y: [1, 8, 14, 18, 24] },\n    { x: 'North America', y: [3, 10, 17, 28, 30] },\n    { x: 'West Europe', y: [1, 7, 10, 17, 22] },\n    { x: 'West Africa', y: [1, 6, 8, 13, 16] },\n  ],\n  encode: {\n    x: 'x',\n    y: 'y',\n    color: 'x',\n  },\n  scale: {\n    x: { paddingInner: 0.6, paddingOuter: 0.3 },\n    y: { zero: true },\n  },\n  legend: false,\n  style: {\n    stroke: 'black',\n  },\n});\n\nchart.render();\n",paraId:24,tocIndex:7},{value:"Use the ",paraId:25,tocIndex:8},{value:"series",paraId:25,tocIndex:8},{value:" channel to create grouped boxplots for comparing different categories of data.",paraId:25,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'box',\n  data: [\n    { Species: 'I. setosa', type: 'SepalLength', bin: [4.3, 4.8, 5, 5.2, 5.8] },\n    {\n      Species: 'I. setosa',\n      type: 'SepalWidth',\n      bin: [2.3, 3.2, 3.4, 3.7, 4.4],\n    },\n    { Species: 'I. setosa', type: 'PetalLength', bin: [1, 1.4, 1.5, 1.6, 1.9] },\n    {\n      Species: 'I. setosa',\n      type: 'PetalWidth',\n      bin: [0.1, 0.2, 0.2, 0.3, 0.6],\n    },\n    {\n      Species: 'I. versicolor',\n      type: 'SepalLength',\n      bin: [4.9, 5.6, 5.9, 6.3, 7],\n    },\n    {\n      Species: 'I. versicolor',\n      type: 'SepalWidth',\n      bin: [2, 2.5, 2.8, 3, 3.4],\n    },\n    {\n      Species: 'I. versicolor',\n      type: 'PetalLength',\n      bin: [3, 4, 4.35, 4.6, 5.1],\n    },\n    {\n      Species: 'I. versicolor',\n      type: 'PetalWidth',\n      bin: [1, 1.2, 1.3, 1.5, 1.8],\n    },\n    {\n      Species: 'I. virginica',\n      type: 'SepalLength',\n      bin: [4.9, 6.2, 6.5, 6.9, 7.9],\n    },\n    {\n      Species: 'I. virginica',\n      type: 'SepalWidth',\n      bin: [2.2, 2.8, 3, 3.2, 3.8],\n    },\n    {\n      Species: 'I. virginica',\n      type: 'PetalLength',\n      bin: [4.5, 5.1, 5.55, 5.9, 6.9],\n    },\n    {\n      Species: 'I. virginica',\n      type: 'PetalWidth',\n      bin: [1.4, 1.8, 2, 2.3, 2.5],\n    },\n  ],\n  encode: {\n    x: 'type',\n    y: 'bin',\n    series: 'Species',\n    color: 'Species',\n  },\n  scale: {\n    x: { paddingInner: 0.2, paddingOuter: 0.1 },\n    y: { zero: true },\n    series: { paddingInner: 0.3, paddingOuter: 0.1 },\n  },\n  style: {\n    stroke: 'black',\n  },\n  tooltip: [\n    { name: 'min', channel: 'y' },\n    { name: 'q1', channel: 'y1' },\n    { name: 'q2', channel: 'y2' },\n    { name: 'q3', channel: 'y3' },\n    { name: 'max', channel: 'y4' },\n  ],\n});\n\nchart.render();\n",paraId:26,tocIndex:8},{value:"Create a polar boxplot by configuring a polar coordinate system.",paraId:27,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'box',\n  data: [\n    { x: 'Oceania', y: [1, 9, 16, 22, 24] },\n    { x: 'East Europe', y: [1, 5, 8, 12, 16] },\n    { x: 'Australia', y: [1, 8, 12, 19, 26] },\n    { x: 'South America', y: [2, 8, 12, 21, 28] },\n    { x: 'North Africa', y: [1, 8, 14, 18, 24] },\n    { x: 'North America', y: [3, 10, 17, 28, 30] },\n    { x: 'West Europe', y: [1, 7, 10, 17, 22] },\n    { x: 'West Africa', y: [1, 6, 8, 13, 16] },\n  ],\n  coordinate: {\n    type: 'polar',\n    innerRadius: 0.2,\n  },\n  encode: {\n    x: 'x',\n    y: 'y',\n    color: 'x',\n  },\n  scale: {\n    x: { paddingInner: 0.6, paddingOuter: 0.3 },\n    y: { zero: true },\n  },\n  style: {\n    stroke: 'black',\n  },\n  axis: {\n    y: { tickCount: 5 },\n  },\n  tooltip: [\n    { name: 'min', channel: 'y' },\n    { name: 'q1', channel: 'y1' },\n    { name: 'q2', channel: 'y2' },\n    { name: 'q3', channel: 'y3' },\n    { name: 'max', channel: 'y4' },\n  ],\n  legend: false,\n});\n\nchart.render();\n",paraId:28,tocIndex:9},{value:"G2 provides multiple ways to perform data distribution analysis:",paraId:29,tocIndex:11},{value:"Use ",paraId:30,tocIndex:11},{value:"transform",paraId:30,tocIndex:11},{value:" for data transformation to perform statistical analysis on data and calculate statistical values like minimum, Q1, median, Q3, and maximum:",paraId:30,tocIndex:11},{value:"chart.box().data({\n  type: 'connector',\n  value: [\n    /* your detail data */\n  ],\n  callback: (data) => {\n    // Perform statistical analysis on data here\n    // Can use custom algorithms or third-party libraries\n    return data;\n  },\n});\n",paraId:31,tocIndex:11},{value:"Use community-provided ",paraId:32,tocIndex:11},{value:"algorithm libraries",paraId:32,tocIndex:11},{value:" for data statistics.",paraId:32,tocIndex:11},{value:"Directly use the ",paraId:33,tocIndex:11},{value:"boxplot",paraId:34,tocIndex:11},{value:" mark, which is a high-level mark with built-in data grouping and statistical aggregation functionality, more suitable for frontend data exploration and analysis:",paraId:33,tocIndex:11},{value:"chart.boxplot().data(data).encode('x', 'category').encode('y', 'value');\n",paraId:35,tocIndex:11}]},68695:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(76163);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"boxplot",paraId:0,tocIndex:0},{value:" mark is used to draw boxplots (also known as box-and-whisker plots), which are statistical charts used to display the distribution of a dataset. Boxplots typically contain the following key statistical values:",paraId:0,tocIndex:0},{value:"Minimum",paraId:1,tocIndex:0},{value:": The smallest value in the dataset (excluding outliers)",paraId:1,tocIndex:0},{value:"Lower Quartile (Q1)",paraId:1,tocIndex:0},{value:": The value at the 25th percentile of the dataset",paraId:1,tocIndex:0},{value:"Median (Q2)",paraId:1,tocIndex:0},{value:": The value at the 50th percentile of the dataset",paraId:1,tocIndex:0},{value:"Upper Quartile (Q3)",paraId:1,tocIndex:0},{value:": The value at the 75th percentile of the dataset",paraId:1,tocIndex:0},{value:"Maximum",paraId:1,tocIndex:0},{value:": The largest value in the dataset (excluding outliers)",paraId:1,tocIndex:0},{value:"Outliers",paraId:1,tocIndex:0},{value:": Data points that fall outside the normal range",paraId:1,tocIndex:0},{value:"Both ",paraId:2,tocIndex:0},{value:"boxplot",paraId:2,tocIndex:0},{value:" and ",paraId:2,tocIndex:0},{value:"box",paraId:3,tocIndex:0},{value:" marks can be used to draw boxplots, but they have the following differences:",paraId:2,tocIndex:0},{value:"boxplot",paraId:4,tocIndex:0},{value:" is a high-level mark with built-in data grouping and statistical aggregation functionality",paraId:4,tocIndex:0},{value:"box",paraId:4,tocIndex:0},{value:" is an atomic mark that requires developers to manually specify data for the 5 points",paraId:4,tocIndex:0},{value:"Therefore, ",paraId:5,tocIndex:0},{value:"boxplot",paraId:5,tocIndex:0},{value:" is more suitable for frontend data exploration and analysis, while ",paraId:5,tocIndex:0},{value:"box",paraId:5,tocIndex:0},{value:" is more suitable for visualization after backend computation and statistics on large datasets.",paraId:5,tocIndex:0},{value:"Property",paraId:6,tocIndex:1},{value:"Description",paraId:6,tocIndex:1},{value:"Type",paraId:6,tocIndex:1},{value:"Default Value",paraId:6,tocIndex:1},{value:"Required",paraId:6,tocIndex:1},{value:"encode",paraId:6,tocIndex:1},{value:"Configure visual channels for the ",paraId:6,tocIndex:1},{value:"boxplot",paraId:6,tocIndex:1},{value:" mark, including ",paraId:6,tocIndex:1},{value:"x",paraId:6,tocIndex:1},{value:", ",paraId:6,tocIndex:1},{value:"y",paraId:6,tocIndex:1},{value:", ",paraId:6,tocIndex:1},{value:"color",paraId:6,tocIndex:1},{value:", ",paraId:6,tocIndex:1},{value:"shape",paraId:6,tocIndex:1},{value:", etc.",paraId:6,tocIndex:1},{value:"encode",paraId:7,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"✓",paraId:6,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:"Configure the graphic style of the ",paraId:6,tocIndex:1},{value:"boxplot",paraId:6,tocIndex:1},{value:" mark",paraId:6,tocIndex:1},{value:"style",paraId:8,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"point",paraId:6,tocIndex:1},{value:"Whether to show outliers",paraId:6,tocIndex:1},{value:"boolean",paraId:6,tocIndex:1},{value:"true",paraId:6,tocIndex:1},{value:"Configure visual channels for the ",paraId:9,tocIndex:2},{value:"boxplot",paraId:9,tocIndex:2},{value:" mark.",paraId:9,tocIndex:2},{value:"Property",paraId:10,tocIndex:2},{value:"Description",paraId:10,tocIndex:2},{value:"Type",paraId:10,tocIndex:2},{value:"Default Value",paraId:10,tocIndex:2},{value:"Required",paraId:10,tocIndex:2},{value:"x",paraId:10,tocIndex:2},{value:"Bind the ",paraId:10,tocIndex:2},{value:"x",paraId:10,tocIndex:2},{value:" property channel for the ",paraId:10,tocIndex:2},{value:"boxplot",paraId:10,tocIndex:2},{value:" mark, usually a categorical field",paraId:10,tocIndex:2},{value:"encode",paraId:11,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"✓",paraId:10,tocIndex:2},{value:"y",paraId:10,tocIndex:2},{value:"Bind the ",paraId:10,tocIndex:2},{value:"y",paraId:10,tocIndex:2},{value:" property channel for the ",paraId:10,tocIndex:2},{value:"boxplot",paraId:10,tocIndex:2},{value:" mark, usually a numeric field used to calculate boxplot statistical values",paraId:10,tocIndex:2},{value:"encode",paraId:12,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"✓",paraId:10,tocIndex:2},{value:"color",paraId:10,tocIndex:2},{value:"Bind the ",paraId:10,tocIndex:2},{value:"color",paraId:10,tocIndex:2},{value:" property channel for the ",paraId:10,tocIndex:2},{value:"boxplot",paraId:10,tocIndex:2},{value:" mark, used to distinguish boxplots of different categories",paraId:10,tocIndex:2},{value:"encode",paraId:13,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"shape",paraId:10,tocIndex:2},{value:"Bind the ",paraId:10,tocIndex:2},{value:"shape",paraId:10,tocIndex:2},{value:" property channel for the ",paraId:10,tocIndex:2},{value:"boxplot",paraId:10,tocIndex:2},{value:" mark, available values are ",paraId:10,tocIndex:2},{value:"box",paraId:10,tocIndex:2},{value:", ",paraId:10,tocIndex:2},{value:"violin",paraId:10,tocIndex:2},{value:"'box'",paraId:10,tocIndex:2},{value:" | ",paraId:10,tocIndex:2},{value:"'violin'",paraId:10,tocIndex:2},{value:"'box'",paraId:10,tocIndex:2},{value:"series",paraId:10,tocIndex:2},{value:"Bind the ",paraId:10,tocIndex:2},{value:"series",paraId:10,tocIndex:2},{value:" property channel for the ",paraId:10,tocIndex:2},{value:"boxplot",paraId:10,tocIndex:2},{value:" mark, used for grouped display of boxplots",paraId:10,tocIndex:2},{value:"encode",paraId:14,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"Configure the graphic style of the ",paraId:15,tocIndex:3},{value:"boxplot",paraId:15,tocIndex:3},{value:" mark. The ",paraId:15,tocIndex:3},{value:"boxplot",paraId:15,tocIndex:3},{value:" consists of two parts: the box and the outlier points. Therefore, style configuration is also divided into two parts, prefixed with ",paraId:15,tocIndex:3},{value:"box",paraId:15,tocIndex:3},{value:" and ",paraId:15,tocIndex:3},{value:"point",paraId:15,tocIndex:3},{value:" respectively.",paraId:15,tocIndex:3},{value:"Property",paraId:16,tocIndex:4},{value:"Description",paraId:16,tocIndex:4},{value:"Type",paraId:16,tocIndex:4},{value:"Default Value",paraId:16,tocIndex:4},{value:"Required",paraId:16,tocIndex:4},{value:"boxFill",paraId:16,tocIndex:4},{value:"Fill color of the box",paraId:16,tocIndex:4},{value:"string",paraId:16,tocIndex:4},{value:" | ",paraId:16,tocIndex:4},{value:"(datum, index, data, column) => string",paraId:16,tocIndex:4},{value:"-",paraId:16,tocIndex:4},{value:"boxFillOpacity",paraId:16,tocIndex:4},{value:"Fill opacity of the box",paraId:16,tocIndex:4},{value:"number",paraId:16,tocIndex:4},{value:" | ",paraId:16,tocIndex:4},{value:"(datum, index, data, column) => number",paraId:16,tocIndex:4},{value:"0.95",paraId:16,tocIndex:4},{value:"boxStroke",paraId:16,tocIndex:4},{value:"Stroke color of the box",paraId:16,tocIndex:4},{value:"string",paraId:16,tocIndex:4},{value:" | ",paraId:16,tocIndex:4},{value:"(datum, index, data, column) => string",paraId:16,tocIndex:4},{value:"#000",paraId:16,tocIndex:4},{value:"boxLineWidth",paraId:16,tocIndex:4},{value:"Width of the box stroke",paraId:16,tocIndex:4},{value:"number",paraId:16,tocIndex:4},{value:" | ",paraId:16,tocIndex:4},{value:"(datum, index, data, column) => number",paraId:16,tocIndex:4},{value:"1",paraId:16,tocIndex:4},{value:"boxLineDash",paraId:16,tocIndex:4},{value:"Dash pattern for box stroke, first value is length of each dash segment, second is gap between dashes",paraId:16,tocIndex:4},{value:"[number,number]",paraId:16,tocIndex:4},{value:" | ",paraId:16,tocIndex:4},{value:"(datum, index, data, column) => [number, number]",paraId:16,tocIndex:4},{value:"-",paraId:16,tocIndex:4},{value:"boxLineOpacity",paraId:16,tocIndex:4},{value:"Opacity of the box stroke",paraId:16,tocIndex:4},{value:"number",paraId:16,tocIndex:4},{value:" | ",paraId:16,tocIndex:4},{value:"(datum, index, data, column) => number",paraId:16,tocIndex:4},{value:"-",paraId:16,tocIndex:4},{value:"boxOpacity",paraId:16,tocIndex:4},{value:"Overall opacity of the box",paraId:16,tocIndex:4},{value:"number",paraId:16,tocIndex:4},{value:" | ",paraId:16,tocIndex:4},{value:"(datum, index, data, column) => number",paraId:16,tocIndex:4},{value:"-",paraId:16,tocIndex:4},{value:"boxShadowColor",paraId:16,tocIndex:4},{value:"Shadow color of the box",paraId:16,tocIndex:4},{value:"string",paraId:16,tocIndex:4},{value:" | ",paraId:16,tocIndex:4},{value:"(datum, index, data, column) => string",paraId:16,tocIndex:4},{value:"-",paraId:16,tocIndex:4},{value:"boxShadowBlur",paraId:16,tocIndex:4},{value:"Gaussian blur coefficient for the box shadow",paraId:16,tocIndex:4},{value:"number",paraId:16,tocIndex:4},{value:" | ",paraId:16,tocIndex:4},{value:"(datum, index, data, column) => number",paraId:16,tocIndex:4},{value:"-",paraId:16,tocIndex:4},{value:"boxShadowOffsetX",paraId:16,tocIndex:4},{value:"Horizontal distance of shadow from box",paraId:16,tocIndex:4},{value:"number",paraId:16,tocIndex:4},{value:" | ",paraId:16,tocIndex:4},{value:"(datum, index, data, column) => number",paraId:16,tocIndex:4},{value:"-",paraId:16,tocIndex:4},{value:"boxShadowOffsetY",paraId:16,tocIndex:4},{value:"Vertical distance of shadow from box",paraId:16,tocIndex:4},{value:"number",paraId:16,tocIndex:4},{value:" | ",paraId:16,tocIndex:4},{value:"(datum, index, data, column) => number",paraId:16,tocIndex:4},{value:"-",paraId:16,tocIndex:4},{value:"boxCursor",paraId:16,tocIndex:4},{value:"Mouse cursor style. Same as CSS cursor style",paraId:16,tocIndex:4},{value:"string",paraId:16,tocIndex:4},{value:" | ",paraId:16,tocIndex:4},{value:"(datum, index, data, column) => string",paraId:16,tocIndex:4},{value:"'default'",paraId:16,tocIndex:4},{value:"Property",paraId:17,tocIndex:5},{value:"Description",paraId:17,tocIndex:5},{value:"Type",paraId:17,tocIndex:5},{value:"Default Value",paraId:17,tocIndex:5},{value:"Required",paraId:17,tocIndex:5},{value:"pointFill",paraId:17,tocIndex:5},{value:"Fill color of outlier points",paraId:17,tocIndex:5},{value:"string",paraId:17,tocIndex:5},{value:" | ",paraId:17,tocIndex:5},{value:"(datum, index, data, column) => string",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"pointFillOpacity",paraId:17,tocIndex:5},{value:"Fill opacity of outlier points",paraId:17,tocIndex:5},{value:"number",paraId:17,tocIndex:5},{value:" | ",paraId:17,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"pointStroke",paraId:17,tocIndex:5},{value:"Stroke color of outlier points",paraId:17,tocIndex:5},{value:"string",paraId:17,tocIndex:5},{value:" | ",paraId:17,tocIndex:5},{value:"(datum, index, data, column) => string",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"pointLineWidth",paraId:17,tocIndex:5},{value:"Width of outlier point stroke",paraId:17,tocIndex:5},{value:"number",paraId:17,tocIndex:5},{value:" | ",paraId:17,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"pointLineDash",paraId:17,tocIndex:5},{value:"Dash pattern for outlier point stroke",paraId:17,tocIndex:5},{value:"[number,number]",paraId:17,tocIndex:5},{value:" | ",paraId:17,tocIndex:5},{value:"(datum, index, data, column) => [number, number]",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"pointStrokeOpacity",paraId:17,tocIndex:5},{value:"Stroke opacity of outlier points",paraId:17,tocIndex:5},{value:"number",paraId:17,tocIndex:5},{value:" | ",paraId:17,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"pointOpacity",paraId:17,tocIndex:5},{value:"Overall opacity of outlier points",paraId:17,tocIndex:5},{value:"number",paraId:17,tocIndex:5},{value:" | ",paraId:17,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"pointShadowColor",paraId:17,tocIndex:5},{value:"Shadow color of outlier points",paraId:17,tocIndex:5},{value:"string",paraId:17,tocIndex:5},{value:" | ",paraId:17,tocIndex:5},{value:"(datum, index, data, column) => string",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"pointShadowBlur",paraId:17,tocIndex:5},{value:"Gaussian blur coefficient for point shadow",paraId:17,tocIndex:5},{value:"number",paraId:17,tocIndex:5},{value:" | ",paraId:17,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"pointShadowOffsetX",paraId:17,tocIndex:5},{value:"Horizontal distance of shadow from point",paraId:17,tocIndex:5},{value:"number",paraId:17,tocIndex:5},{value:" | ",paraId:17,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"pointShadowOffsetY",paraId:17,tocIndex:5},{value:"Vertical distance of shadow from point",paraId:17,tocIndex:5},{value:"number",paraId:17,tocIndex:5},{value:" | ",paraId:17,tocIndex:5},{value:"(datum, index, data, column) => number",paraId:17,tocIndex:5},{value:"-",paraId:17,tocIndex:5},{value:"pointCursor",paraId:17,tocIndex:5},{value:"Mouse cursor style. Same as CSS cursor style",paraId:17,tocIndex:5},{value:"string",paraId:17,tocIndex:5},{value:" | ",paraId:17,tocIndex:5},{value:"(datum, index, data, column) => string",paraId:17,tocIndex:5},{value:"'default'",paraId:17,tocIndex:5},{value:"Use the ",paraId:18,tocIndex:7},{value:"boxplot",paraId:18,tocIndex:7},{value:" mark to quickly create a boxplot with automatic calculation of statistical values.",paraId:18,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'boxplot',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/morley.json',\n  },\n  encode: {\n    x: 'Expt',\n    y: 'Speed',\n  },\n  style: {\n    boxFill: '#aaa',\n    pointStroke: '#000',\n  },\n});\n\nchart.render();\n",paraId:19,tocIndex:7},{value:"Set ",paraId:20,tocIndex:8},{value:"point: false",paraId:20,tocIndex:8},{value:" to hide outliers and show only the box portion.",paraId:20,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'boxplot',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/morley.json',\n  },\n  encode: {\n    x: 'Expt',\n    y: 'Speed',\n  },\n  style: {\n    point: false,\n  },\n});\n\nchart.render();\n",paraId:21,tocIndex:8},{value:"Use the ",paraId:22,tocIndex:9},{value:"color",paraId:22,tocIndex:9},{value:" and ",paraId:22,tocIndex:9},{value:"series",paraId:22,tocIndex:9},{value:" channels to create grouped boxplots.",paraId:22,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'boxplot',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n  },\n  encode: {\n    x: 'species',\n    y: 'flipper_length_mm',\n    color: 'sex',\n    series: 'sex',\n  },\n});\n\nchart.render();\n",paraId:23,tocIndex:9},{value:"Create a horizontal boxplot by transposing the coordinate system.",paraId:24,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'boxplot',\n  coordinate: { transform: [{ type: 'transpose' }] },\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/morley.json',\n    transform: [{ type: 'filter', callback: (d) => d.Expt === 1 }],\n  },\n  encode: {\n    y: 'Speed',\n  },\n  style: {\n    boxFill: '#aaa',\n    pointStroke: '#000',\n  },\n});\n\nchart.render();\n",paraId:25,tocIndex:10},{value:"Create a violin-shaped boxplot by setting ",paraId:26,tocIndex:11},{value:"shape: 'violin'",paraId:26,tocIndex:11},{value:".",paraId:26,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'boxplot',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n  },\n  encode: {\n    x: 'species',\n    y: 'flipper_length_mm',\n    color: 'species',\n    shape: 'violin',\n  },\n  style: {\n    opacity: 0.5,\n    strokeOpacity: 0.5,\n    point: false,\n  },\n});\n\nchart.render();\n",paraId:27,tocIndex:11},{value:"You can adjust box width and spacing by setting the scale parameters for the x-axis.",paraId:28,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'boxplot',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/morley.json',\n  },\n  encode: {\n    x: 'Expt',\n    y: 'Speed',\n  },\n  scale: {\n    x: {\n      paddingInner: 0.1, // Smaller spacing, wider boxes\n      paddingOuter: 0.05,\n    },\n  },\n  style: {\n    boxFill: '#4e79a7',\n    boxStroke: '#2f4b7c',\n    pointFill: '#e15759',\n    pointStroke: '#c42e32',\n  },\n});\n\nchart.render();\n",paraId:29,tocIndex:12},{value:"The box width of the ",paraId:30,tocIndex:14},{value:"boxplot",paraId:30,tocIndex:14},{value:" mark is controlled by the band scale of the x-axis. You can adjust the box width by setting the ",paraId:30,tocIndex:14},{value:"paddingInner",paraId:30,tocIndex:14},{value:", ",paraId:30,tocIndex:14},{value:"paddingOuter",paraId:30,tocIndex:14},{value:", or ",paraId:30,tocIndex:14},{value:"padding",paraId:30,tocIndex:14},{value:" parameters of ",paraId:30,tocIndex:14},{value:"scale.x",paraId:30,tocIndex:14},{value:":",paraId:30,tocIndex:14},{value:"paddingInner",paraId:31,tocIndex:14},{value:": Controls the spacing between adjacent boxes; larger values make boxes narrower",paraId:31,tocIndex:14},{value:"paddingOuter",paraId:31,tocIndex:14},{value:": Controls the spacing at both ends; larger values make the overall layout more compact",paraId:31,tocIndex:14},{value:"padding",paraId:31,tocIndex:14},{value:": A shortcut to set both ",paraId:31,tocIndex:14},{value:"paddingInner",paraId:31,tocIndex:14},{value:" and ",paraId:31,tocIndex:14},{value:"paddingOuter",paraId:31,tocIndex:14},{value:" simultaneously",paraId:31,tocIndex:14},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n// Example of adjusting box width\nchart.options({\n  type: 'boxplot',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/morley.json',\n  },\n  encode: {\n    x: 'Expt',\n    y: 'Speed',\n  },\n  scale: {\n    x: {\n      paddingInner: 0.3, // Box spacing; larger values make boxes narrower\n      paddingOuter: 0.1, // End spacing\n    },\n    // Or use padding to set both at once\n    // x: { padding: 0.2 }\n  },\n});\n\nchart.render();\n",paraId:32,tocIndex:14},{value:"For grouped boxplots, you can also control the spacing between boxes within groups through the scale parameters of the ",paraId:33,tocIndex:14},{value:"series",paraId:33,tocIndex:14},{value:" channel:",paraId:33,tocIndex:14},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'boxplot',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n  },\n  encode: {\n    x: 'species',\n    y: 'flipper_length_mm',\n    color: 'sex',\n    series: 'sex',\n  },\n  scale: {\n    x: { paddingInner: 0.2, paddingOuter: 0.1 }, // Control inter-group spacing\n    series: { paddingInner: 0.1, paddingOuter: 0.05 }, // Control intra-group spacing\n  },\n});\n\nchart.render();\n",paraId:34,tocIndex:14},{value:"When dealing with large datasets, you can compute outliers and quartile points on the server side, then use the ",paraId:35,tocIndex:15},{value:"box",paraId:35,tocIndex:15},{value:" mark to draw boxplots. In this case, using the ",paraId:35,tocIndex:15},{value:"box",paraId:35,tocIndex:15},{value:" mark is more efficient than the ",paraId:35,tocIndex:15},{value:"boxplot",paraId:35,tocIndex:15},{value:" mark because the ",paraId:35,tocIndex:15},{value:"box",paraId:35,tocIndex:15},{value:" mark doesn't require statistical calculations on the frontend.",paraId:35,tocIndex:15},{value:"For detailed usage, please refer to the ",paraId:36,tocIndex:15},{value:"box",paraId:37,tocIndex:15},{value:" mark documentation.",paraId:36,tocIndex:15}]},71225:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(94193);const t=[{value:"cell",paraId:0,tocIndex:0},{value:" is an abstract representation of a rectangular mark (Rect Shape), primarily used to represent cells in facets or grids. It is the smallest unit for mapping data to visual elements in charts. Specifically, it is a type of area division that typically corresponds to an independent drawing area in different facets, commonly seen in matrix-type charts (such as calendar charts, aggregated heatmaps, etc.).",paraId:0,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'cell',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n  },\n  transform: [{ type: 'group', color: 'max' }], // Apply group transformation to data, grouping by maximum color values\n  encode: {\n    x: (d) => new Date(d.date).getUTCDate(), // Encode x-axis using the UTC date part of the date field\n    y: (d) => new Date(d.date).getUTCMonth(), // Encode y-axis using the UTC month part of the date field\n    color: 'temp_max', // Encode color using the temp_max field from data\n    shape: 'cell',\n  },\n  style: { inset: 0.5 }, // Set cell inset to 0.5\n  scale: {\n    color: {\n      type: 'sequential', // Set color scale as sequential scale\n      palette: 'gnBu', // Use 'gnBu' color palette\n    },\n  },\n});\n\nchart.render(); // Render the chart\n",paraId:1,tocIndex:0},{value:"For more examples, please check the ",paraId:2,tocIndex:0},{value:"Chart Examples",paraId:3,tocIndex:0},{value:" page.",paraId:2,tocIndex:0},{value:"Property",paraId:4,tocIndex:1},{value:"Description",paraId:4,tocIndex:1},{value:"Type",paraId:4,tocIndex:1},{value:"Default",paraId:4,tocIndex:1},{value:"Required",paraId:4,tocIndex:1},{value:"encode",paraId:4,tocIndex:1},{value:"Configure visual channels for ",paraId:4,tocIndex:1},{value:"cell",paraId:4,tocIndex:1},{value:" marks, including ",paraId:4,tocIndex:1},{value:"x",paraId:4,tocIndex:1},{value:", ",paraId:4,tocIndex:1},{value:"y",paraId:4,tocIndex:1},{value:", ",paraId:4,tocIndex:1},{value:"color",paraId:4,tocIndex:1},{value:", ",paraId:4,tocIndex:1},{value:"shape",paraId:4,tocIndex:1},{value:", etc., to specify the relationship between visual element properties and data",paraId:4,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"✓",paraId:4,tocIndex:1},{value:"scale",paraId:4,tocIndex:1},{value:"Configure graphic scaling for ",paraId:4,tocIndex:1},{value:"cell",paraId:4,tocIndex:1},{value:" marks, including ",paraId:4,tocIndex:1},{value:"x",paraId:4,tocIndex:1},{value:", ",paraId:4,tocIndex:1},{value:"y",paraId:4,tocIndex:1},{value:", ",paraId:4,tocIndex:1},{value:"color",paraId:4,tocIndex:1},{value:", ",paraId:4,tocIndex:1},{value:"shape",paraId:4,tocIndex:1},{value:", etc.",paraId:4,tocIndex:1},{value:"scale",paraId:6,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"style",paraId:4,tocIndex:1},{value:"Configure ",paraId:4,tocIndex:1},{value:"cell",paraId:4,tocIndex:1},{value:" graphic styles",paraId:4,tocIndex:1},{value:"style",paraId:7,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"transform",paraId:4,tocIndex:1},{value:"Configure ",paraId:4,tocIndex:1},{value:"cell",paraId:4,tocIndex:1},{value:" data transformation operations (such as binning, sorting, filtering, etc.).",paraId:4,tocIndex:1},{value:"transform",paraId:8,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"Configure visual channels for ",paraId:9,tocIndex:2},{value:"cell",paraId:9,tocIndex:2},{value:" marks.",paraId:9,tocIndex:2},{value:"Property",paraId:10,tocIndex:2},{value:"Description",paraId:10,tocIndex:2},{value:"Type",paraId:10,tocIndex:2},{value:"Default",paraId:10,tocIndex:2},{value:"Required",paraId:10,tocIndex:2},{value:"x",paraId:10,tocIndex:2},{value:"Bind the ",paraId:10,tocIndex:2},{value:"x",paraId:10,tocIndex:2},{value:" property channel for ",paraId:10,tocIndex:2},{value:"cell",paraId:10,tocIndex:2},{value:" marks, typically a time or ordered categorical field from ",paraId:10,tocIndex:2},{value:"data",paraId:10,tocIndex:2},{value:"encode",paraId:11,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"✓",paraId:10,tocIndex:2},{value:"y",paraId:10,tocIndex:2},{value:"Bind the ",paraId:10,tocIndex:2},{value:"y",paraId:10,tocIndex:2},{value:" property channel for ",paraId:10,tocIndex:2},{value:"cell",paraId:10,tocIndex:2},{value:" marks, typically a numerical or array field from ",paraId:10,tocIndex:2},{value:"data",paraId:10,tocIndex:2},{value:"encode",paraId:12,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"✓",paraId:10,tocIndex:2},{value:"color",paraId:10,tocIndex:2},{value:"Bind the ",paraId:10,tocIndex:2},{value:"color",paraId:10,tocIndex:2},{value:" property channel for ",paraId:10,tocIndex:2},{value:"cell",paraId:10,tocIndex:2},{value:" marks; mapping data fields to color channels will group data, splitting data into multiple areas with different colors",paraId:10,tocIndex:2},{value:"encode",paraId:13,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"shape",paraId:10,tocIndex:2},{value:"Bind the ",paraId:10,tocIndex:2},{value:"shape",paraId:10,tocIndex:2},{value:" property channel for ",paraId:10,tocIndex:2},{value:"cell",paraId:10,tocIndex:2},{value:" marks, changing the drawing shape of graphic marks, supported properties: ",paraId:10,tocIndex:2},{value:"cell",paraId:10,tocIndex:2},{value:" | ",paraId:10,tocIndex:2},{value:"hollow",paraId:10,tocIndex:2},{value:"string",paraId:10,tocIndex:2},{value:"cell",paraId:10,tocIndex:2},{value:"For more ",paraId:14,tocIndex:2},{value:"encode",paraId:14,tocIndex:2},{value:" configurations, please check the ",paraId:14,tocIndex:2},{value:"encode",paraId:15,tocIndex:2},{value:" introduction page.",paraId:14,tocIndex:2},{value:"Through the ",paraId:16,tocIndex:3},{value:"color",paraId:16,tocIndex:3},{value:" property in ",paraId:16,tocIndex:3},{value:"encode",paraId:16,tocIndex:3},{value:", you can map data fields to color values, automatically adjusting mark colors based on data changes. This is very useful for data visualization as it helps you quickly identify data patterns and trends.",paraId:16,tocIndex:3},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\n\nchart.options({\n  type: 'cell',\n  data: [\n    { x: 'x-a', y: 'y-a', data1: 1, data2: 5 },\n    { x: 'x-a', y: 'y-b', data1: 3, data2: 8 },\n    { x: 'x-a', y: 'y-c', data1: 2, data2: 6 },\n    { x: 'x-b', y: 'y-a', data1: 8, data2: 2 },\n    { x: 'x-b', y: 'y-b', data1: 5, data2: 4 },\n    { x: 'x-b', y: 'y-c', data1: 6, data2: 9 },\n    { x: 'x-c', y: 'y-a', data1: 7, data2: 1 },\n    { x: 'x-c', y: 'y-b', data1: 4, data2: 2 },\n    { x: 'x-c', y: 'y-c', data1: 9, data2: 3 },\n  ],\n  encode: {\n    x: 'x', // Encode x-axis\n    y: 'y', // Encode y-axis\n    color: 'data1', // Use data1 field from data\n  },\n  style: {\n    inset: 5,\n    lineWidth: 10,\n  },\n});\n\n// Insert Encode-Color selector\nconst selectorContainer = document.createElement('div');\nselectorContainer.textContent = 'Select field to map to color ';\nconst selector = document.createElement('select');\nselector.innerHTML = `\n    <option value=\"data1\" selected>data1</option>\n    <option value=\"data2\">data2</option>\n  `;\n\nselector.onchange = (e) => {\n  chart.options({\n    encode: {\n      color: e.target.value, // Map color using the selected field\n    },\n  });\n  chart.render(); // Re-render the chart\n};\nselectorContainer.appendChild(selector);\ncontainer.insertBefore(selectorContainer, container.childNodes[0]);\n\nchart.render();\n",paraId:17,tocIndex:3},{value:"Through the ",paraId:18,tocIndex:4},{value:"shape",paraId:18,tocIndex:4},{value:" property in ",paraId:18,tocIndex:4},{value:"encode",paraId:18,tocIndex:4},{value:", you can specify the geometric shape of cells. Shape determines how each cell is rendered on the canvas. The supported shapes for ",paraId:18,tocIndex:4},{value:"shape",paraId:18,tocIndex:4},{value:" marks are as follows:",paraId:18,tocIndex:4},{value:"Shape",paraId:19,tocIndex:4},{value:"Description",paraId:19,tocIndex:4},{value:"Example",paraId:19,tocIndex:4},{value:"cell",paraId:19,tocIndex:4},{value:"Fill the entire cell with color",paraId:19,tocIndex:4},{value:"hollow",paraId:19,tocIndex:4},{value:"Draw area chart with smooth curves",paraId:19,tocIndex:4},{value:"scale",paraId:20,tocIndex:5},{value:" is used to define how data maps to visual properties (such as color, size, shape, etc.). In ",paraId:20,tocIndex:5},{value:"cell",paraId:20,tocIndex:5},{value:" usage scenarios, the common role of scale is to provide mapping rules for each visual channel (such as color, size, position, etc.), enabling data points to be accurately presented.",paraId:20,tocIndex:5},{value:"Property",paraId:21,tocIndex:5},{value:"Description",paraId:21,tocIndex:5},{value:"Type",paraId:21,tocIndex:5},{value:"Default",paraId:21,tocIndex:5},{value:"[channel]",paraId:21,tocIndex:5},{value:"Channel mapped to visual property",paraId:21,tocIndex:5},{value:"Record<string, ",paraId:21,tocIndex:5},{value:"scale",paraId:22,tocIndex:5},{value:">",paraId:21,tocIndex:5},{value:"-",paraId:21,tocIndex:5},{value:"For more ",paraId:23,tocIndex:5},{value:"scale",paraId:23,tocIndex:5},{value:" configurations, please check the ",paraId:23,tocIndex:5},{value:"scale",paraId:24,tocIndex:5},{value:" introduction page.",paraId:23,tocIndex:5},{value:"style",paraId:25,tocIndex:6},{value:" is used to set the appearance styles of chart elements, including fill color, border styles, shadow effects, etc.",paraId:25,tocIndex:6},{value:"Property",paraId:26,tocIndex:6},{value:"Description",paraId:26,tocIndex:6},{value:"Type",paraId:26,tocIndex:6},{value:"Default",paraId:26,tocIndex:6},{value:"radius",paraId:26,tocIndex:6},{value:"Border radius size for all four corners of the rectangle",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"0",paraId:26,tocIndex:6},{value:"radiusTopLeft",paraId:26,tocIndex:6},{value:"Top-left corner radius",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"0",paraId:26,tocIndex:6},{value:"radiusTopRight",paraId:26,tocIndex:6},{value:"Top-right corner radius",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"0",paraId:26,tocIndex:6},{value:"radiusBottomRight",paraId:26,tocIndex:6},{value:"Bottom-right corner radius",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"0",paraId:26,tocIndex:6},{value:"radiusBottomLeft",paraId:26,tocIndex:6},{value:"Bottom-left corner radius",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"0",paraId:26,tocIndex:6},{value:"inset",paraId:26,tocIndex:6},{value:"Inset padding for all four directions of the rectangle",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"0",paraId:26,tocIndex:6},{value:"insetLeft",paraId:26,tocIndex:6},{value:"Left inset padding",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"0",paraId:26,tocIndex:6},{value:"insetRight",paraId:26,tocIndex:6},{value:"Right inset padding",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"0",paraId:26,tocIndex:6},{value:"insetBottom",paraId:26,tocIndex:6},{value:"Bottom inset padding",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"0",paraId:26,tocIndex:6},{value:"insetTop",paraId:26,tocIndex:6},{value:"Top inset padding",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"0",paraId:26,tocIndex:6},{value:"fill",paraId:26,tocIndex:6},{value:"Fill color of the graphic",paraId:26,tocIndex:6},{value:"string",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<string>",paraId:26,tocIndex:6},{value:"Default is '' when ",paraId:26,tocIndex:6},{value:"shape",paraId:26,tocIndex:6},{value:" is ",paraId:26,tocIndex:6},{value:"hollow",paraId:26,tocIndex:6},{value:"fillOpacity",paraId:26,tocIndex:6},{value:"Fill opacity of the graphic",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"Default is 0.95 when ",paraId:26,tocIndex:6},{value:"shape",paraId:26,tocIndex:6},{value:" is ",paraId:26,tocIndex:6},{value:"cell",paraId:26,tocIndex:6},{value:"stroke",paraId:26,tocIndex:6},{value:"Stroke of the graphic",paraId:26,tocIndex:6},{value:"string",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<string>",paraId:26,tocIndex:6},{value:"-",paraId:26,tocIndex:6},{value:"strokeOpacity",paraId:26,tocIndex:6},{value:"Stroke opacity",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"Default is 1 when ",paraId:26,tocIndex:6},{value:"shape",paraId:26,tocIndex:6},{value:" is ",paraId:26,tocIndex:6},{value:"hollow",paraId:26,tocIndex:6},{value:"lineWidth",paraId:26,tocIndex:6},{value:"Width of the graphic stroke",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"Default is 2 when ",paraId:26,tocIndex:6},{value:"shape",paraId:26,tocIndex:6},{value:" is ",paraId:26,tocIndex:6},{value:"hollow",paraId:26,tocIndex:6},{value:"lineDash",paraId:26,tocIndex:6},{value:"Dashed stroke configuration. First value is the length of each dash segment, second value is the distance between segments. Setting lineDash to [0, 0] results in no stroke.",paraId:26,tocIndex:6},{value:"[number,number]",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<[number, number]>",paraId:26,tocIndex:6},{value:"-",paraId:26,tocIndex:6},{value:"opacity",paraId:26,tocIndex:6},{value:"Overall opacity of the graphic",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"-",paraId:26,tocIndex:6},{value:"shadowColor",paraId:26,tocIndex:6},{value:"Shadow color of the graphic",paraId:26,tocIndex:6},{value:"string",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<string>",paraId:26,tocIndex:6},{value:"-",paraId:26,tocIndex:6},{value:"shadowBlur",paraId:26,tocIndex:6},{value:"Gaussian blur coefficient of the graphic shadow",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"-",paraId:26,tocIndex:6},{value:"shadowOffsetX",paraId:26,tocIndex:6},{value:"Horizontal distance of shadow from the graphic",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"-",paraId:26,tocIndex:6},{value:"shadowOffsetY",paraId:26,tocIndex:6},{value:"Vertical distance of shadow from the graphic",paraId:26,tocIndex:6},{value:"number",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<number>",paraId:26,tocIndex:6},{value:"-",paraId:26,tocIndex:6},{value:"cursor",paraId:26,tocIndex:6},{value:"Mouse cursor style. Same as CSS cursor style, default 'default'.",paraId:26,tocIndex:6},{value:"string",paraId:26,tocIndex:6},{value:" | ",paraId:26,tocIndex:6},{value:"Function<string>",paraId:26,tocIndex:6},{value:"'default'",paraId:26,tocIndex:6},{value:"For more ",paraId:27,tocIndex:6},{value:"style",paraId:27,tocIndex:6},{value:" configurations, please check the ",paraId:27,tocIndex:6},{value:"style",paraId:28,tocIndex:6},{value:" introduction page.",paraId:27,tocIndex:6},{value:"transform",paraId:29,tocIndex:7},{value:" is a core configuration item for data transformation, allowing preprocessing of raw data before binding it to graphic marks. By processing data, it generates more structured data suitable for visualization, thereby more clearly expressing data distribution, density, or statistical characteristics.",paraId:29,tocIndex:7},{value:"Property",paraId:30,tocIndex:7},{value:"Description",paraId:30,tocIndex:7},{value:"Type",paraId:30,tocIndex:7},{value:"Default",paraId:30,tocIndex:7},{value:"type",paraId:30,tocIndex:7},{value:"Which channels to perform data grouping and aggregation on",paraId:30,tocIndex:7},{value:"string | string[]",paraId:30,tocIndex:7},{value:"['x', 'y']",paraId:30,tocIndex:7},{value:"[channel]",paraId:30,tocIndex:7},{value:"Aggregation method for data output to specific mark channels",paraId:30,tocIndex:7},{value:"Reducer",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"type Primitive = number | string | boolean | Date;\n\ntype Reducer =\n  | 'mean'\n  | 'max'\n  | 'count'\n  | 'min'\n  | 'median'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:31,tocIndex:7},{value:"For more ",paraId:32,tocIndex:7},{value:"transform",paraId:32,tocIndex:7},{value:" configurations, please check the ",paraId:32,tocIndex:7},{value:"transform",paraId:33,tocIndex:7},{value:" introduction page.",paraId:32,tocIndex:7},{value:"Try it out:",paraId:34,tocIndex:7}]},4734:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(42265);const t=[{value:"chord",paraId:0},{value:" is a circular chart used to visualize matrix relationship data, intuitively displaying bidirectional flows or connection strengths between different categories through node arcs arranged around the circumference and interconnected ribbon curves. In ",paraId:0},{value:"chord",paraId:0},{value:", data points (nodes) are typically arranged along a circular ring, with chords (curves) connecting relationships or flows between nodes. Each chord not only represents the connection between two nodes but can also express the weight or strength of relationships through visual channels (such as color, width, transparency, etc.). Chord charts are widely used in scenarios such as social networks, system call relationships, traffic distribution, and transaction flow analysis. By clearly displaying complex connections between nodes, they help users quickly understand structures and patterns in data.",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'chord',\n  layout: { nodeWidthRatio: 0.05 },\n  data: {\n    value: {\n      links: [\n        { source: 'Beijing', target: 'Tianjin', value: 30 },\n        { source: 'Beijing', target: 'Shanghai', value: 80 },\n        { source: 'Beijing', target: 'Hebei', value: 46 },\n        { source: 'Beijing', target: 'Liaoning', value: 49 },\n        { source: 'Beijing', target: 'Heilongjiang', value: 69 },\n        { source: 'Beijing', target: 'Jilin', value: 19 },\n        { source: 'Tianjin', target: 'Hebei', value: 62 },\n        { source: 'Tianjin', target: 'Liaoning', value: 82 },\n        { source: 'Tianjin', target: 'Shanghai', value: 16 },\n        { source: 'Shanghai', target: 'Heilongjiang', value: 16 },\n        { source: 'Hebei', target: 'Heilongjiang', value: 76 },\n        { source: 'Hebei', target: 'Inner Mongolia', value: 24 },\n        { source: 'Inner Mongolia', target: 'Beijing', value: 32 },\n      ],\n    },\n  },\n  scale: {\n    color: {\n      range: [\n        '#4e79a7',\n        '#f28e2c',\n        '#e15759',\n        '#76b7b2',\n        '#59a14f',\n        '#edc949',\n        '#af7aa1',\n        '#ff9da7',\n        '#9c755f',\n        '#bab0ab',\n      ],\n    },\n  },\n  style: { labelFontSize: 15, linkFillOpacity: 0.6 },\n});\n\nchart.render();\n",paraId:1},{value:"Property",paraId:2,tocIndex:0},{value:"Description",paraId:2,tocIndex:0},{value:"Type",paraId:2,tocIndex:0},{value:"Default",paraId:2,tocIndex:0},{value:"Required",paraId:2,tocIndex:0},{value:"encode",paraId:2,tocIndex:0},{value:"Configure visual channels for ",paraId:2,tocIndex:0},{value:"chord",paraId:2,tocIndex:0},{value:" marks, including ",paraId:2,tocIndex:0},{value:"color",paraId:2,tocIndex:0},{value:", ",paraId:2,tocIndex:0},{value:"shape",paraId:2,tocIndex:0},{value:", etc., to specify relationships between visual attributes and data",paraId:2,tocIndex:0},{value:"encode",paraId:3,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"layout",paraId:2,tocIndex:0},{value:"Configure ",paraId:2,tocIndex:0},{value:"chord",paraId:2,tocIndex:0},{value:" layout method",paraId:2,tocIndex:0},{value:"layout",paraId:4,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"scale",paraId:2,tocIndex:0},{value:"Configure scale for ",paraId:2,tocIndex:0},{value:"chord",paraId:2,tocIndex:0},{value:" marks, including ",paraId:2,tocIndex:0},{value:"x",paraId:2,tocIndex:0},{value:", ",paraId:2,tocIndex:0},{value:"y",paraId:2,tocIndex:0},{value:", ",paraId:2,tocIndex:0},{value:"color",paraId:2,tocIndex:0},{value:", ",paraId:2,tocIndex:0},{value:"shape",paraId:2,tocIndex:0},{value:", etc.",paraId:2,tocIndex:0},{value:"scale",paraId:5,tocIndex:0},{value:"{x: { type: 'identity' },y: { type: 'identity' }}",paraId:2,tocIndex:0},{value:"style",paraId:2,tocIndex:0},{value:"Configure ",paraId:2,tocIndex:0},{value:"chord",paraId:2,tocIndex:0},{value:" graphic styles",paraId:2,tocIndex:0},{value:"style",paraId:6,tocIndex:0},{value:"-",paraId:2,tocIndex:0},{value:"Property",paraId:7,tocIndex:1},{value:"Description",paraId:7,tocIndex:1},{value:"Type",paraId:7,tocIndex:1},{value:"Default",paraId:7,tocIndex:1},{value:"color",paraId:7,tocIndex:1},{value:"Map colors of nodes or connecting chords, used to distinguish different categories or relationship strengths",paraId:7,tocIndex:1},{value:"encode",paraId:8,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"nodeShape",paraId:7,tocIndex:1},{value:"Shape of nodes in the chord diagram, defining the specific visual appearance of nodes",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:"| Function<",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:">",paraId:7,tocIndex:1},{value:"polygon",paraId:7,tocIndex:1},{value:"linkShape",paraId:7,tocIndex:1},{value:"Shape of connecting chords in the chord diagram, defining the specific visual appearance of chords",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:"| Function<",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:">",paraId:7,tocIndex:1},{value:"ribbon",paraId:7,tocIndex:1},{value:"source",paraId:7,tocIndex:1},{value:"Define the starting point of connecting chords, usually mapped to a node field",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:"| Function<",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:">",paraId:7,tocIndex:1},{value:"source",paraId:7,tocIndex:1},{value:"target",paraId:7,tocIndex:1},{value:"Define the ending point of connecting chords, usually mapped to another node field",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:"| Function<",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:">",paraId:7,tocIndex:1},{value:"target",paraId:7,tocIndex:1},{value:"The ",paraId:9,tocIndex:2},{value:"source",paraId:9,tocIndex:2},{value:" and ",paraId:9,tocIndex:2},{value:"target",paraId:9,tocIndex:2},{value:" visual channels are important properties that affect the starting and ending points of connecting chords in chord chart marks. ",paraId:9,tocIndex:2},{value:"source",paraId:9,tocIndex:2},{value:" maps to the field in data representing the starting node of connection relationships, while ",paraId:9,tocIndex:2},{value:"target",paraId:9,tocIndex:2},{value:" maps to the field representing the ending node of connection relationships. These two properties together build the relationship logic between nodes in the chord diagram, visually representing interactions or dependencies between nodes through intuitive connecting chords.",paraId:9,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'chord',\n  data: {\n    value: {\n      links: [\n        { begin: 'Beijing', end: 'Tianjin', value: 34 },\n        { begin: 'Beijing', end: 'Shanghai', value: 95 },\n        { begin: 'Beijing', end: 'Hebei', value: 61 },\n        { begin: 'Beijing', end: 'Liaoning', value: 32 },\n        { begin: 'Beijing', end: 'Heilongjiang', value: 84 },\n        { begin: 'Beijing', end: 'Jilin', value: 19 },\n        { begin: 'Tianjin', end: 'Hebei', value: 62 },\n        { begin: 'Tianjin', end: 'Liaoning', value: 34 },\n        { begin: 'Tianjin', end: 'Shanghai', value: 48 },\n        { begin: 'Shanghai', end: 'Heilongjiang', value: 67 },\n        { begin: 'Hebei', end: 'Heilongjiang', value: 37 },\n        { begin: 'Hebei', end: 'Inner Mongolia', value: 51 },\n        { begin: 'Inner Mongolia', end: 'Beijing', value: 56 },\n      ],\n    },\n  },\n  encode: {\n    source: 'begin',\n    target: 'end',\n  },\n});\n\nchart.render();\n",paraId:10,tocIndex:2},{value:"Encode properties like ",paraId:11,tocIndex:2},{value:"source",paraId:11,tocIndex:2},{value:" and ",paraId:11,tocIndex:2},{value:"target",paraId:11,tocIndex:2},{value:" also support dynamically retrieving values from data. You can pass a function, and the chart will call this function during execution to calculate the required results.",paraId:11,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'chord',\n  data: {\n    value: {\n      links: [\n        { begin: 'Beijing', end: 'Tianjin', value1: 34, value2: 46 },\n        { begin: 'Beijing', end: 'Shanghai', value1: 95, value2: 69 },\n        { begin: 'Beijing', end: 'Hebei', value1: 61, value2: 62 },\n        { begin: 'Beijing', end: 'Liaoning', value1: 32, value2: 82 },\n        { begin: 'Beijing', end: 'Heilongjiang', value1: 84, value2: 30 },\n        { begin: 'Beijing', end: 'Jilin', value1: 19, value2: 1 },\n        { begin: 'Tianjin', end: 'Hebei', value1: 62, value2: 24 },\n        { begin: 'Tianjin', end: 'Liaoning', value1: 34, value2: 16 },\n        { begin: 'Tianjin', end: 'Shanghai', value1: 48, value2: 49 },\n        { begin: 'Shanghai', end: 'Heilongjiang', value1: 67, value2: 80 },\n        { begin: 'Hebei', end: 'Heilongjiang', value1: 37, value2: 67 },\n        { begin: 'Hebei', end: 'Inner Mongolia', value1: 51, value2: 16 },\n        { begin: 'Inner Mongolia', end: 'Beijing', value1: 56, value2: 76 },\n      ],\n    },\n  },\n  encode: {\n    source: (d) => d.begin,\n    target: (d) => d.end,\n  },\n});\n\nchart.render();\n",paraId:12,tocIndex:2},{value:"For more ",paraId:13,tocIndex:2},{value:"encode",paraId:13,tocIndex:2},{value:" configurations, please refer to the ",paraId:13,tocIndex:2},{value:"encode",paraId:14,tocIndex:2},{value:" introduction page.",paraId:13,tocIndex:2},{value:"The layout property controls the layout method of chord diagrams, defining how nodes and connecting chords are presented on the canvas. Chord diagram layouts are typically based on circular (ring) arrangements, distributing all nodes evenly around the circumference and displaying relationships and weights between nodes through connecting chords. Through layout configuration, you can further adjust node positions, connection methods, and graphic structures.",paraId:15,tocIndex:3},{value:"Property",paraId:16,tocIndex:3},{value:"Description",paraId:16,tocIndex:3},{value:"Type",paraId:16,tocIndex:3},{value:"Default",paraId:16,tocIndex:3},{value:"y",paraId:16,tocIndex:3},{value:"Y-axis coordinate during layout",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:"0",paraId:16,tocIndex:3},{value:"id",paraId:16,tocIndex:3},{value:"Key of the node",paraId:16,tocIndex:3},{value:"Function<string | number>",paraId:16,tocIndex:3},{value:"(node) => node.key",paraId:16,tocIndex:3},{value:"source",paraId:16,tocIndex:3},{value:"Set the source node data field for the chord diagram",paraId:16,tocIndex:3},{value:"Function<string>",paraId:16,tocIndex:3},{value:"(edge) => edge.source",paraId:16,tocIndex:3},{value:"target",paraId:16,tocIndex:3},{value:"Set the target node data field for the chord diagram",paraId:16,tocIndex:3},{value:"Function<string>",paraId:16,tocIndex:3},{value:"(edge) => edge.target",paraId:16,tocIndex:3},{value:"sourceWeight",paraId:16,tocIndex:3},{value:"Weight of the source",paraId:16,tocIndex:3},{value:"Function<number>",paraId:16,tocIndex:3},{value:"(edge) => edge.value | 1",paraId:16,tocIndex:3},{value:"targetWeight",paraId:16,tocIndex:3},{value:"Weight of the target",paraId:16,tocIndex:3},{value:"Function<number>",paraId:16,tocIndex:3},{value:"(edge) => edge.value | 1",paraId:16,tocIndex:3},{value:"sortBy",paraId:16,tocIndex:3},{value:"Sorting method, can choose id, weight, frequency sorting or custom sorting method",paraId:16,tocIndex:3},{value:"string | Function<number>",paraId:16,tocIndex:3},{value:"null",paraId:16,tocIndex:3},{value:"nodeWidthRatio",paraId:16,tocIndex:3},{value:"Width configuration of chord diagram nodes, 0 ~ 1, relative to canvas width",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:"0.05",paraId:16,tocIndex:3},{value:"nodePaddingRatio",paraId:16,tocIndex:3},{value:"Spacing between chord diagram nodes, 0 ~ 1, relative to canvas height",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:"0.1",paraId:16,tocIndex:3},{value:"The scale property defines how data fields map to visual properties of graphics (such as node positions, chord lengths, colors, etc.), thus affecting the presentation of chord diagrams. By configuring scale, you can adjust node arrangement order, connection chord weight proportions, or color mappings to make charts better conform to data characteristics or user analysis needs.",paraId:17,tocIndex:4},{value:"Property",paraId:18,tocIndex:4},{value:"Description",paraId:18,tocIndex:4},{value:"Type",paraId:18,tocIndex:4},{value:"Default",paraId:18,tocIndex:4},{value:"x",paraId:18,tocIndex:4},{value:"Define the arrangement position of nodes on the circumference, can map to categorical or numerical fields",paraId:18,tocIndex:4},{value:"Record<string, ",paraId:18,tocIndex:4},{value:"scale",paraId:19,tocIndex:4},{value:">",paraId:18,tocIndex:4},{value:"{ type: 'identity' }",paraId:18,tocIndex:4},{value:"y",paraId:18,tocIndex:4},{value:"Control the projection position of nodes or chords, usually not explicitly set in chord diagrams",paraId:18,tocIndex:4},{value:"Record<string, ",paraId:18,tocIndex:4},{value:"scale",paraId:20,tocIndex:4},{value:">",paraId:18,tocIndex:4},{value:"{ type: 'identity' }",paraId:18,tocIndex:4},{value:"color",paraId:18,tocIndex:4},{value:"Define color mapping rules for nodes or connecting chords, used to distinguish different categories or relationship strengths",paraId:18,tocIndex:4},{value:"Record<string, ",paraId:18,tocIndex:4},{value:"scale",paraId:21,tocIndex:4},{value:">",paraId:18,tocIndex:4},{value:"-",paraId:18,tocIndex:4},{value:"size",paraId:18,tocIndex:4},{value:"Map the thickness of connecting chords or size of nodes to represent weight or strength",paraId:18,tocIndex:4},{value:"Record<string, ",paraId:18,tocIndex:4},{value:"scale",paraId:22,tocIndex:4},{value:">",paraId:18,tocIndex:4},{value:"-",paraId:18,tocIndex:4},{value:"For more ",paraId:23,tocIndex:4},{value:"scale",paraId:23,tocIndex:4},{value:" configurations, please refer to the ",paraId:23,tocIndex:4},{value:"scale",paraId:24,tocIndex:4},{value:" introduction page.",paraId:23,tocIndex:4},{value:"The ",paraId:25,tocIndex:5},{value:"style",paraId:25,tocIndex:5},{value:" property provides a series of configuration options for customizing the visual effects of chord diagrams, mainly affecting nodes, links (connecting chords), and labels.",paraId:25,tocIndex:5},{value:"Property",paraId:26,tocIndex:5},{value:"Description",paraId:26,tocIndex:5},{value:"Type",paraId:26,tocIndex:5},{value:"Default",paraId:26,tocIndex:5},{value:"linkFillOpacity",paraId:26,tocIndex:5},{value:"Fill opacity of connecting chords (relationship lines connecting different nodes) in ",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" graphics",paraId:26,tocIndex:5},{value:"number | Function<number>",paraId:26,tocIndex:5},{value:"1",paraId:26,tocIndex:5},{value:"linkFill",paraId:26,tocIndex:5},{value:"Fill color of connecting chords (relationship lines connecting different nodes) in ",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" graphics",paraId:26,tocIndex:5},{value:"string | Function<number>",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"linkStroke",paraId:26,tocIndex:5},{value:"Border color of connecting chords in ",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" graphics",paraId:26,tocIndex:5},{value:"string | Function<number>",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"linkOpacity",paraId:26,tocIndex:5},{value:"Overall opacity of connecting chords in ",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" graphics (including fill and border)",paraId:26,tocIndex:5},{value:"number | Function<number>",paraId:26,tocIndex:5},{value:"0.5",paraId:26,tocIndex:5},{value:"linkLineDash",paraId:26,tocIndex:5},{value:"Dashed line style for connecting chord borders in ",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" graphics",paraId:26,tocIndex:5},{value:"[number, number]",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"labelFill",paraId:26,tocIndex:5},{value:"Font color of node labels in ",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" graphics",paraId:26,tocIndex:5},{value:"string | Function<number>",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"labelFillOpacity",paraId:26,tocIndex:5},{value:"Transparency of node label font color in ",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" graphics",paraId:26,tocIndex:5},{value:"number | Function<number>",paraId:26,tocIndex:5},{value:"0.6",paraId:26,tocIndex:5},{value:"labelFontSize",paraId:26,tocIndex:5},{value:"Font size of node labels in ",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" graphics",paraId:26,tocIndex:5},{value:"number | Function<number>",paraId:26,tocIndex:5},{value:"10",paraId:26,tocIndex:5},{value:"labelFontWeight",paraId:26,tocIndex:5},{value:"Font weight of node labels in ",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" graphics (such as ",paraId:26,tocIndex:5},{value:'"normal"',paraId:26,tocIndex:5},{value:", ",paraId:26,tocIndex:5},{value:'"bold"',paraId:26,tocIndex:5},{value:")",paraId:26,tocIndex:5},{value:"string| number",paraId:26,tocIndex:5},{value:"normal",paraId:26,tocIndex:5},{value:"labelOpacity",paraId:26,tocIndex:5},{value:"Overall opacity of node labels in ",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" graphics",paraId:26,tocIndex:5},{value:"number | Function<number>",paraId:26,tocIndex:5},{value:"1",paraId:26,tocIndex:5},{value:"nodeFill",paraId:26,tocIndex:5},{value:"Fill color of nodes in ",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" graphics",paraId:26,tocIndex:5},{value:"string | Function<number>",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"nodeFillOpacity",paraId:26,tocIndex:5},{value:"Fill opacity of nodes in ",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" graphics",paraId:26,tocIndex:5},{value:"number | Function<number>",paraId:26,tocIndex:5},{value:"1",paraId:26,tocIndex:5},{value:"nodeStroke",paraId:26,tocIndex:5},{value:"Border color of nodes in ",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" graphics",paraId:26,tocIndex:5},{value:"string | Function<number>",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"nodeOpacity",paraId:26,tocIndex:5},{value:"Overall opacity of nodes in ",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" graphics",paraId:26,tocIndex:5},{value:"number | Function<number>",paraId:26,tocIndex:5},{value:"1",paraId:26,tocIndex:5},{value:"nodeLineDash",paraId:26,tocIndex:5},{value:"Dashed line style for node borders in ",paraId:26,tocIndex:5},{value:"chord",paraId:26,tocIndex:5},{value:" graphics",paraId:26,tocIndex:5},{value:"[number, number]",paraId:26,tocIndex:5},{value:"-",paraId:26,tocIndex:5},{value:"cursor",paraId:26,tocIndex:5},{value:"Mouse cursor style. Same as CSS cursor style, default 'default'.",paraId:26,tocIndex:5},{value:"string | Function<number>",paraId:26,tocIndex:5},{value:"'default'",paraId:26,tocIndex:5},{value:"For more ",paraId:27,tocIndex:5},{value:"style",paraId:27,tocIndex:5},{value:" configurations, please refer to the ",paraId:27,tocIndex:5},{value:"style",paraId:28,tocIndex:5},{value:" introduction page.",paraId:27,tocIndex:5},{value:"Try it out:",paraId:29,tocIndex:5},{value:"import { Chart } from '@antv/g2';\nimport { schemeTableau10 } from 'd3-scale-chromatic';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 900,\n  height: 600,\n});\n\nconst data = [\n  {\n    source: '北京',\n    target: '天津',\n    value: 30,\n  },\n  {\n    source: '北京',\n    target: '上海',\n    value: 80,\n  },\n  {\n    source: '北京',\n    target: '河北',\n    value: 46,\n  },\n  {\n    source: '北京',\n    target: '辽宁',\n    value: 49,\n  },\n  {\n    source: '北京',\n    target: '黑龙江',\n    value: 69,\n  },\n  {\n    source: '北京',\n    target: '吉林',\n    value: 19,\n  },\n  {\n    source: '天津',\n    target: '河北',\n    value: 62,\n  },\n  {\n    source: '天津',\n    target: '辽宁',\n    value: 82,\n  },\n  {\n    source: '天津',\n    target: '上海',\n    value: 16,\n  },\n  {\n    source: '上海',\n    target: '黑龙江',\n    value: 16,\n  },\n  {\n    source: '河北',\n    target: '黑龙江',\n    value: 76,\n  },\n  {\n    source: '河北',\n    target: '内蒙古',\n    value: 24,\n  },\n  {\n    source: '内蒙古',\n    target: '北京',\n    value: 32,\n  },\n];\n\nchart\n  .chord()\n  .data({\n    value: { links: data },\n  })\n  .layout({\n    nodeWidthRatio: 0.05,\n  })\n  .scale('color', { range: schemeTableau10 })\n  .style('labelFontSize', 15)\n  .style('linkFillOpacity', 0.6);\n\nchart.render();\n\n",paraId:30,tocIndex:5}]},71932:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(28428);const t=[{value:"Connector",paraId:0,tocIndex:0},{value:" 组件用于绘制连接线，可以在两个点之间创建带有路径的连接器。它主要用于流程图、关系图、桑基图等需要展示元素间连接关系的可视化场景。",paraId:0,tocIndex:0},{value:"连接器的路径通常包含以下几个关键点：",paraId:1,tocIndex:0},{value:"起点（Source）",paraId:2,tocIndex:0},{value:"：连接的起始位置",paraId:2,tocIndex:0},{value:"终点（Target）",paraId:2,tocIndex:0},{value:"：连接的结束位置",paraId:2,tocIndex:0},{value:"中间点",paraId:2,tocIndex:0},{value:"：根据偏移量和连接长度计算的路径转折点",paraId:2,tocIndex:0},{value:"端点标记",paraId:2,tocIndex:0},{value:"：可选的箭头或标记符号",paraId:2,tocIndex:0},{value:"在标准的直角坐标系中，连接器会创建一个 L 型路径：",paraId:3,tocIndex:2},{value:"  起点\n    ───┐\n       │\n       │(中间段)\n       │\n       └── 终点 →\n\n",paraId:4,tocIndex:2},{value:"在转置坐标系中，路径会相应调整：",paraId:5,tocIndex:3},{value:"起点\n │\n │ (中间段)\n │\n └─────── 终点 →\n",paraId:6,tocIndex:3},{value:"属性",paraId:7,tocIndex:4},{value:"描述",paraId:7,tocIndex:4},{value:"类型",paraId:7,tocIndex:4},{value:"默认值",paraId:7,tocIndex:4},{value:"必选",paraId:7,tocIndex:4},{value:"offsetX",paraId:7,tocIndex:4},{value:"统一的 X 轴偏移量，同时作用于起点和终点",paraId:7,tocIndex:4},{value:"number",paraId:7,tocIndex:4},{value:"0",paraId:7,tocIndex:4},{value:"offsetY",paraId:7,tocIndex:4},{value:"统一的 Y 轴偏移量，同时作用于起点和终点",paraId:7,tocIndex:4},{value:"number",paraId:7,tocIndex:4},{value:"0",paraId:7,tocIndex:4},{value:"sourceOffsetX",paraId:7,tocIndex:4},{value:"起点的 X 轴偏移量",paraId:7,tocIndex:4},{value:"number",paraId:7,tocIndex:4},{value:"offsetX",paraId:7,tocIndex:4},{value:"sourceOffsetY",paraId:7,tocIndex:4},{value:"起点的 Y 轴偏移量",paraId:7,tocIndex:4},{value:"number",paraId:7,tocIndex:4},{value:"offsetY",paraId:7,tocIndex:4},{value:"targetOffsetX",paraId:7,tocIndex:4},{value:"终点的 X 轴偏移量",paraId:7,tocIndex:4},{value:"number",paraId:7,tocIndex:4},{value:"offsetX",paraId:7,tocIndex:4},{value:"targetOffsetY",paraId:7,tocIndex:4},{value:"终点的 Y 轴偏移量",paraId:7,tocIndex:4},{value:"number",paraId:7,tocIndex:4},{value:"offsetY",paraId:7,tocIndex:4},{value:"connectLength1",paraId:7,tocIndex:4},{value:"连接器的中间段长度",paraId:7,tocIndex:4},{value:"number",paraId:7,tocIndex:4},{value:"-",paraId:7,tocIndex:4},{value:"endMarker",paraId:7,tocIndex:4},{value:"是否显示端点标记（箭头）",paraId:7,tocIndex:4},{value:"boolean",paraId:7,tocIndex:4},{value:"true",paraId:7,tocIndex:4},{value:"style",paraId:7,tocIndex:4},{value:"连接器的样式配置",paraId:7,tocIndex:4},{value:"ConnectorPathStyleProps",paraId:8,tocIndex:4},{value:"-",paraId:7,tocIndex:4},{value:"连接器支持所有 Path 元素的样式属性，以及端点标记的样式配置。",paraId:9,tocIndex:5},{value:"属性",paraId:10,tocIndex:5},{value:"描述",paraId:10,tocIndex:5},{value:"类型",paraId:10,tocIndex:5},{value:"默认值",paraId:10,tocIndex:5},{value:"stroke",paraId:10,tocIndex:5},{value:"连接线的颜色",paraId:10,tocIndex:5},{value:"string",paraId:10,tocIndex:5},{value:"-",paraId:10,tocIndex:5},{value:"strokeWidth",paraId:10,tocIndex:5},{value:"连接线的宽度",paraId:10,tocIndex:5},{value:"number",paraId:10,tocIndex:5},{value:"1",paraId:10,tocIndex:5},{value:"strokeOpacity",paraId:10,tocIndex:5},{value:"连接线的透明度",paraId:10,tocIndex:5},{value:"number",paraId:10,tocIndex:5},{value:"1",paraId:10,tocIndex:5},{value:"strokeDasharray",paraId:10,tocIndex:5},{value:"虚线样式",paraId:10,tocIndex:5},{value:"string",paraId:10,tocIndex:5},{value:" | ",paraId:10,tocIndex:5},{value:"number[]",paraId:10,tocIndex:5},{value:"-",paraId:10,tocIndex:5},{value:"fill",paraId:10,tocIndex:5},{value:"填充色（通常用于封闭路径）",paraId:10,tocIndex:5},{value:"string",paraId:10,tocIndex:5},{value:"'none'",paraId:10,tocIndex:5},{value:"endMarkerSize",paraId:10,tocIndex:5},{value:"端点标记的大小",paraId:10,tocIndex:5},{value:"number",paraId:10,tocIndex:5},{value:"-",paraId:10,tocIndex:5},{value:"endMarkerFill",paraId:10,tocIndex:5},{value:"端点标记的填充色",paraId:10,tocIndex:5},{value:"string",paraId:10,tocIndex:5},{value:"-",paraId:10,tocIndex:5},{value:"endMarkerStroke",paraId:10,tocIndex:5},{value:"端点标记的描边色",paraId:10,tocIndex:5},{value:"string",paraId:10,tocIndex:5},{value:"-",paraId:10,tocIndex:5},{value:"使用 connector 标记可以创建基础连接线，连接两个数据点。",paraId:11,tocIndex:7},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'connector',\n  data: [\n    { source: 'A', target: 'B', x1: 100, y1: 100, x2: 300, y2: 200 },\n    { source: 'B', target: 'C', x1: 300, y1: 200, x2: 500, y2: 150 },\n    { source: 'C', target: 'D', x1: 500, y1: 150, x2: 400, y2: 300 },\n  ],\n  encode: {\n    x: ['x1', 'x2'],\n    y: ['y1', 'y2'],\n    color: 'source',\n  },\n  style: {\n    stroke: '#1890ff',\n    strokeWidth: 2,\n    endMarker: true,\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:12,tocIndex:7},{value:"连接器通常和其他 mark 一起使用：",paraId:13,tocIndex:8},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\n\n// 原始数据\nconst data = [\n  { type: '分类一', value: 27 },\n  { type: '分类二', value: 25 },\n  { type: '分类三', value: 18 },\n  { type: '分类四', value: 15 },\n  { type: '分类五', value: 10 },\n  { type: 'Other', value: 5 },\n];\n\nchart.options({\n  type: 'view',\n  children: [\n    {\n      type: 'interval',\n      data: data,\n      encode: {\n        x: 'type',\n        y: 'value',\n        color: 'type',\n      },\n    },\n    {\n      type: 'connector',\n      data: [\n        {\n          source: '分类一',\n          target: '分类三',\n          x1: '分类一',\n          x2: '分类三',\n          y1: 27,\n          y2: 18,\n        },\n      ],\n      encode: {\n        x: ['x1', 'x2'],\n        y: ['y1', 'y2'],\n      },\n      style: {\n        stroke: 'orange',\n        strokeWidth: 2,\n        sourceOffsetX: 15,\n        targetOffsetX: -20,\n      },\n      legend: false,\n    },\n  ],\n});\n\nchart.render();\n",paraId:14,tocIndex:8},{value:"// 根据数据动态调整连接器样式\nconst connector = new Connector({\n  stroke: (d) => (d.type === 'important' ? '#ff4d4f' : '#1890ff'),\n  strokeWidth: (d) => d.weight || 1,\n  connectLength1: (d) => d.distance || 20,\n});\n",paraId:15,tocIndex:10},{value:"// 带动画效果的连接器\nconst connector = new Connector({\n  stroke: '#1890ff',\n  strokeWidth: 2,\n  defaultEnterAnimation: 'growIn',\n  defaultUpdateAnimation: 'morphing',\n  defaultExitAnimation: 'fadeOut',\n});\n",paraId:16,tocIndex:11},{value:"坐标系兼容性",paraId:17,tocIndex:12},{value:"：当前版本主要支持直角坐标系，极坐标系的支持正在开发中",paraId:17,tocIndex:12},{value:"性能优化",paraId:17,tocIndex:12},{value:"：对于大量连接器的场景，建议使用批量渲染或虚拟化技术",paraId:17,tocIndex:12},{value:"路径计算",paraId:17,tocIndex:12},{value:"：复杂的路径可能需要自定义 ",paraId:17,tocIndex:12},{value:"connectorPath",paraId:17,tocIndex:12},{value:" 属性",paraId:17,tocIndex:12},{value:"端点标记",paraId:17,tocIndex:12},{value:"：默认的端点标记是箭头形状，可通过样式配置修改",paraId:17,tocIndex:12}]},61715:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(65843);const t=[{value:"density",paraId:0,tocIndex:0},{value:" is a chart type used to visualize the probability density distribution of continuous variables. Through kernel density estimation ",paraId:0,tocIndex:0},{value:"(Kernel Density Estimation, KDE)",paraId:1,tocIndex:0},{value:", it transforms discrete data points into smooth continuous probability density curves, intuitively reflecting data concentration trends, distribution patterns, and outliers.",paraId:0,tocIndex:0},{value:"The core goal of ",paraId:2,tocIndex:0},{value:"density",paraId:2,tocIndex:0},{value:" is to extract overall distribution patterns from scatter or point cloud data and map density information to a continuous area chart or gradient effect. This chart type is commonly used to analyze aggregation areas of large amounts of data points, data concentration hotspots, or probability density of data distribution, such as representing population density in geographic visualization, or showing regional trading frequency in analysis.",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'density', // Set chart type as density plot\n  data: {\n    type: 'fetch', // Specify data type as network fetch\n    value: 'https://assets.antv.antgroup.com/g2/species.json', // Set data URL address\n    transform: [\n      {\n        type: 'kde', // Use Kernel Density Estimation (KDE) for data transformation\n        field: 'y', // Specify KDE calculation field as 'y'\n        groupBy: ['x', 'species'], // Group data by 'x' and 'species' fields\n      },\n    ],\n  },\n  encode: {\n    x: 'x', // Map 'x' field to x-axis\n    y: 'y', // Map 'y' field to y-axis\n    color: 'species', // Map 'species' field to color\n    size: 'size', // Map 'size' field to graphic size\n    series: 'species', // Map 'species' field to series\n  },\n\n  tooltip: false, // Disable chart tooltip functionality\n});\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"For more examples, please check the ",paraId:4,tocIndex:0},{value:"Chart Examples - Violin Plot",paraId:5,tocIndex:0},{value:" page.",paraId:4,tocIndex:0},{value:"Property",paraId:6,tocIndex:1},{value:"Description",paraId:6,tocIndex:1},{value:"Type",paraId:6,tocIndex:1},{value:"Default Value",paraId:6,tocIndex:1},{value:"Required",paraId:6,tocIndex:1},{value:"coordinate",paraId:6,tocIndex:1},{value:"Configure ",paraId:6,tocIndex:1},{value:"density",paraId:6,tocIndex:1},{value:" chart coordinate system, supports properties: ",paraId:6,tocIndex:1},{value:"cartesian",paraId:6,tocIndex:1},{value:" | ",paraId:6,tocIndex:1},{value:"polar",paraId:6,tocIndex:1},{value:"coordinate",paraId:7,tocIndex:1},{value:"'cartesian'",paraId:6,tocIndex:1},{value:"encode",paraId:6,tocIndex:1},{value:"Configure ",paraId:6,tocIndex:1},{value:"density",paraId:6,tocIndex:1},{value:" mark visual channels, including ",paraId:6,tocIndex:1},{value:"x",paraId:6,tocIndex:1},{value:", ",paraId:6,tocIndex:1},{value:"y",paraId:6,tocIndex:1},{value:", ",paraId:6,tocIndex:1},{value:"color",paraId:6,tocIndex:1},{value:", ",paraId:6,tocIndex:1},{value:"size",paraId:6,tocIndex:1},{value:", etc., used to specify relationships between visual element properties and data",paraId:6,tocIndex:1},{value:"encode",paraId:8,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"✓",paraId:6,tocIndex:1},{value:"scale",paraId:6,tocIndex:1},{value:"Configure ",paraId:6,tocIndex:1},{value:"density",paraId:6,tocIndex:1},{value:" mark graphic scaling, including ",paraId:6,tocIndex:1},{value:"x",paraId:6,tocIndex:1},{value:", ",paraId:6,tocIndex:1},{value:"y",paraId:6,tocIndex:1},{value:", ",paraId:6,tocIndex:1},{value:"series",paraId:6,tocIndex:1},{value:", ",paraId:6,tocIndex:1},{value:"size",paraId:6,tocIndex:1},{value:", etc.",paraId:6,tocIndex:1},{value:"scale",paraId:9,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:"Configure ",paraId:6,tocIndex:1},{value:"density",paraId:6,tocIndex:1},{value:" graphic style",paraId:6,tocIndex:1},{value:"style",paraId:10,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"coordinate",paraId:11,tocIndex:2},{value:' is the core system in data visualization that defines how data maps to graphic space. It determines how data transforms from "numerical domain" to "visual position". Coordinate systems reshape the visual expression of density distribution through different spatial transformation rules.',paraId:11,tocIndex:2},{value:"Coordinate System",paraId:12,tocIndex:2},{value:"Type",paraId:12,tocIndex:2},{value:"Chart",paraId:12,tocIndex:2},{value:"Cartesian",paraId:12,tocIndex:2},{value:"'cartesian'",paraId:12,tocIndex:2},{value:"Density plot, etc.",paraId:12,tocIndex:2},{value:"Polar",paraId:12,tocIndex:2},{value:"'polar'",paraId:12,tocIndex:2},{value:"Polar violin plot, etc.",paraId:12,tocIndex:2},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\nconst coordinateMap = [\n  {\n    coordinate: 'cartesian',\n    label: 'Cartesian Coordinate System',\n  },\n  {\n    coordinate: 'polar',\n    label: 'Polar Coordinate System',\n  },\n];\n\nchart.options({\n  type: 'density',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/species.json',\n    transform: [\n      {\n        type: 'kde',\n        field: 'y',\n        groupBy: ['x', 'species'],\n      },\n    ],\n  },\n  encode: {\n    x: 'x',\n    y: 'y',\n    color: 'species',\n    size: 'size',\n    series: 'species',\n  },\n  coordinate: { type: coordinateMap[0].coordinate },\n  tooltip: false,\n});\n\nconst handleSetCoordinate = (coordinate) => {\n  // Set selected coordinate system\n  chart.coordinate({\n    type: coordinate,\n  });\n  chart.render(); // Re-render chart\n};\n\n// Insert Encode-Color selector\nconst selectorContainer = document.createElement('div');\nselectorContainer.textContent = 'Select Coordinate System ';\nconst selector = document.createElement('select');\nselector.innerHTML = coordinateMap.map(\n  (coordinate, index) =>\n    `<option value=\"${coordinate.coordinate}\" ${\n      index === 0 ? 'selected' : ''\n    }>${coordinate.label}</option>`,\n);\nselector.onchange = (e) => {\n  handleSetCoordinate(e.target.value);\n};\nselectorContainer.appendChild(selector);\ncontainer.insertBefore(selectorContainer, container.childNodes[0]);\n\nchart.render();\n",paraId:13,tocIndex:2},{value:"For more ",paraId:14,tocIndex:2},{value:"coordinate",paraId:14,tocIndex:2},{value:" configuration, please check the ",paraId:14,tocIndex:2},{value:"coordinate",paraId:15,tocIndex:2},{value:" introduction page.",paraId:14,tocIndex:2},{value:"Configure ",paraId:16,tocIndex:3},{value:"density",paraId:16,tocIndex:3},{value:" mark visual channels, an important configuration that defines the mapping relationships between data fields and visual properties, determining how data transforms into visual representation.",paraId:16,tocIndex:3},{value:"Property",paraId:17,tocIndex:3},{value:"Description",paraId:17,tocIndex:3},{value:"Type",paraId:17,tocIndex:3},{value:"Default Value",paraId:17,tocIndex:3},{value:"Required",paraId:17,tocIndex:3},{value:"x",paraId:17,tocIndex:3},{value:"Bind the ",paraId:17,tocIndex:3},{value:"x",paraId:17,tocIndex:3},{value:" property channel of ",paraId:17,tocIndex:3},{value:"density",paraId:17,tocIndex:3},{value:" mark, usually a time or ordered categorical field in ",paraId:17,tocIndex:3},{value:"data",paraId:17,tocIndex:3},{value:"encode",paraId:18,tocIndex:3},{value:"-",paraId:17,tocIndex:3},{value:"✓",paraId:17,tocIndex:3},{value:"y",paraId:17,tocIndex:3},{value:"Bind the ",paraId:17,tocIndex:3},{value:"y",paraId:17,tocIndex:3},{value:" property channel of ",paraId:17,tocIndex:3},{value:"density",paraId:17,tocIndex:3},{value:" mark, usually a numerical or array field in ",paraId:17,tocIndex:3},{value:"data",paraId:17,tocIndex:3},{value:"encode",paraId:19,tocIndex:3},{value:"-",paraId:17,tocIndex:3},{value:"✓",paraId:17,tocIndex:3},{value:"color",paraId:17,tocIndex:3},{value:"Bind the ",paraId:17,tocIndex:3},{value:"color",paraId:17,tocIndex:3},{value:" property channel of ",paraId:17,tocIndex:3},{value:"density",paraId:17,tocIndex:3},{value:" mark. If a data field is mapped to the color channel, data will be grouped and split into multiple areas with different colors",paraId:17,tocIndex:3},{value:"encode",paraId:20,tocIndex:3},{value:"-",paraId:17,tocIndex:3},{value:"size",paraId:17,tocIndex:3},{value:"Bind the ",paraId:17,tocIndex:3},{value:"size",paraId:17,tocIndex:3},{value:" property channel of ",paraId:17,tocIndex:3},{value:"density",paraId:17,tocIndex:3},{value:" mark, used to map data fields to the size property of graphic elements, enhancing data distribution comparison dimensions and information density by adjusting density curve line thickness or filled area visual proportions",paraId:17,tocIndex:3},{value:"encode",paraId:21,tocIndex:3},{value:"-",paraId:17,tocIndex:3},{value:"✓",paraId:17,tocIndex:3},{value:"series",paraId:17,tocIndex:3},{value:"Bind the ",paraId:17,tocIndex:3},{value:"series",paraId:17,tocIndex:3},{value:" property channel of ",paraId:17,tocIndex:3},{value:"density",paraId:17,tocIndex:3},{value:" mark, used to map data grouping fields to chart series or categories, classifying data according to a field and generating independent graphic representations for each category",paraId:17,tocIndex:3},{value:"encode",paraId:22,tocIndex:3},{value:"-",paraId:17,tocIndex:3},{value:"✓",paraId:17,tocIndex:3},{value:"For more ",paraId:23,tocIndex:3},{value:"encode",paraId:23,tocIndex:3},{value:" configuration, please check the ",paraId:23,tocIndex:3},{value:"encode",paraId:24,tocIndex:3},{value:" introduction page.",paraId:23,tocIndex:3},{value:"scale",paraId:25,tocIndex:4},{value:" is used to define how data maps to visual properties (such as color, size, shape, etc.). In ",paraId:25,tocIndex:4},{value:"density",paraId:25,tocIndex:4},{value:" usage scenarios, the common role of scale is to provide mapping rules for each visual channel (such as color, size, position, etc.), enabling data points to be accurately presented.",paraId:25,tocIndex:4},{value:"Property",paraId:26,tocIndex:4},{value:"Description",paraId:26,tocIndex:4},{value:"Type",paraId:26,tocIndex:4},{value:"Default Value",paraId:26,tocIndex:4},{value:"Required",paraId:26,tocIndex:4},{value:"x",paraId:26,tocIndex:4},{value:"Define mapping rules from data fields to X-axis visual positions",paraId:26,tocIndex:4},{value:"scale",paraId:27,tocIndex:4},{value:"{type: 'band'}",paraId:26,tocIndex:4},{value:"series",paraId:26,tocIndex:4},{value:"Control mapping rules from categorical fields (series encoding) to visual properties (such as color, line type, symbols)",paraId:26,tocIndex:4},{value:"scale",paraId:28,tocIndex:4},{value:"{type: 'band'}",paraId:26,tocIndex:4},{value:"size",paraId:26,tocIndex:4},{value:"Map data fields to size properties of visual elements (such as density curve width, point area, or region height)",paraId:26,tocIndex:4},{value:"scale",paraId:29,tocIndex:4},{value:"{type: 'identity'}",paraId:26,tocIndex:4},{value:"For more ",paraId:30,tocIndex:4},{value:"scale",paraId:30,tocIndex:4},{value:" configuration, please check the ",paraId:30,tocIndex:4},{value:"scale",paraId:31,tocIndex:4},{value:" introduction page.",paraId:30,tocIndex:4},{value:"style",paraId:32,tocIndex:5},{value:" is used to set the appearance style of chart elements, including fill color, border style, shadow effects, etc.",paraId:32,tocIndex:5},{value:"Property",paraId:33,tocIndex:5},{value:"Description",paraId:33,tocIndex:5},{value:"Type",paraId:33,tocIndex:5},{value:"Default Value",paraId:33,tocIndex:5},{value:"Required",paraId:33,tocIndex:5},{value:"fill",paraId:33,tocIndex:5},{value:"Fill color of the graphic",paraId:33,tocIndex:5},{value:"string",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"Function<string>",paraId:33,tocIndex:5},{value:"-",paraId:33,tocIndex:5},{value:"fillOpacity",paraId:33,tocIndex:5},{value:"Fill opacity of the graphic",paraId:33,tocIndex:5},{value:"number",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"Function<number>",paraId:33,tocIndex:5},{value:"-",paraId:33,tocIndex:5},{value:"stroke",paraId:33,tocIndex:5},{value:"Stroke of the graphic",paraId:33,tocIndex:5},{value:"string",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"Function<string>",paraId:33,tocIndex:5},{value:"-",paraId:33,tocIndex:5},{value:"strokeOpacity",paraId:33,tocIndex:5},{value:"Stroke opacity",paraId:33,tocIndex:5},{value:"number",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"Function<number>",paraId:33,tocIndex:5},{value:"-",paraId:33,tocIndex:5},{value:"lineWidth",paraId:33,tocIndex:5},{value:"Width of graphic stroke",paraId:33,tocIndex:5},{value:"number",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"Function<number>",paraId:33,tocIndex:5},{value:"-",paraId:33,tocIndex:5},{value:"lineDash",paraId:33,tocIndex:5},{value:"Dashed line configuration for stroke. The first value is the length of each dash segment, the second value is the distance between segments. Setting lineDash to [0, 0] results in no stroke.",paraId:33,tocIndex:5},{value:"[number,number]",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"Function<[number, number]>",paraId:33,tocIndex:5},{value:"-",paraId:33,tocIndex:5},{value:"opacity",paraId:33,tocIndex:5},{value:"Overall opacity of the graphic",paraId:33,tocIndex:5},{value:"number",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"Function<number>",paraId:33,tocIndex:5},{value:"-",paraId:33,tocIndex:5},{value:"shadowColor",paraId:33,tocIndex:5},{value:"Shadow color of the graphic",paraId:33,tocIndex:5},{value:"string",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"Function<string>",paraId:33,tocIndex:5},{value:"-",paraId:33,tocIndex:5},{value:"shadowBlur",paraId:33,tocIndex:5},{value:"Gaussian blur coefficient of graphic shadow",paraId:33,tocIndex:5},{value:"number",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"Function<number>",paraId:33,tocIndex:5},{value:"-",paraId:33,tocIndex:5},{value:"shadowOffsetX",paraId:33,tocIndex:5},{value:"Set horizontal distance of shadow from graphic",paraId:33,tocIndex:5},{value:"number",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"Function<number>",paraId:33,tocIndex:5},{value:"-",paraId:33,tocIndex:5},{value:"shadowOffsetY",paraId:33,tocIndex:5},{value:"Set vertical distance of shadow from graphic",paraId:33,tocIndex:5},{value:"number",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"Function<number>",paraId:33,tocIndex:5},{value:"-",paraId:33,tocIndex:5},{value:"cursor",paraId:33,tocIndex:5},{value:"Mouse cursor style. Same as CSS cursor style, default 'default'.",paraId:33,tocIndex:5},{value:"string",paraId:33,tocIndex:5},{value:" | ",paraId:33,tocIndex:5},{value:"Function<string>",paraId:33,tocIndex:5},{value:"'default'",paraId:33,tocIndex:5},{value:"For more ",paraId:34,tocIndex:5},{value:"style",paraId:34,tocIndex:5},{value:" configuration, please check the ",paraId:34,tocIndex:5},{value:"style",paraId:35,tocIndex:5},{value:" introduction page.",paraId:34,tocIndex:5},{value:"Try it out:",paraId:36,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/species.json',\n  transform: [\n    {\n      type: 'kde',\n      field: 'y',\n      groupBy: ['x'],\n      size: 20,\n    },\n  ],\n});\n\nchart\n  .density()\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('color', 'x')\n  .encode('size', 'size')\n  .tooltip(false);\n\nchart.render();\n\n",paraId:37,tocIndex:5}]},45269:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(82416);const t=[{value:"gauge",paraId:0,tocIndex:0},{value:" is used to create gauge charts, which are common visualization charts used to display data progress, proportions, or comparisons.",paraId:0,tocIndex:0},{value:"Typical use cases:",paraId:1,tocIndex:0},{value:"Business metrics: sales achievement rate, user growth progress;",paraId:2,tocIndex:0},{value:"System monitoring: CPU/memory usage, disk capacity warnings;",paraId:2,tocIndex:0},{value:"Device gauges: vehicle speedometer, temperature gauge simulation.",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'gauge', // Set the chart type to gauge\n  data: {\n    value: {\n      target: 120, // Target value of the gauge\n      total: 400, // Total value of the gauge\n      name: 'score', // Name of the gauge data\n    },\n  },\n});\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"Property",paraId:4,tocIndex:1},{value:"Description",paraId:4,tocIndex:1},{value:"Type",paraId:4,tocIndex:1},{value:"Default",paraId:4,tocIndex:1},{value:"Required",paraId:4,tocIndex:1},{value:"data",paraId:4,tocIndex:1},{value:"Define the gauge values, target values and category information, driving pointer position, color mapping and multi-gauge facet display through data binding",paraId:4,tocIndex:1},{value:"data",paraId:5,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"✓",paraId:4,tocIndex:1},{value:"encode",paraId:4,tocIndex:1},{value:"Configure visual channels for ",paraId:4,tocIndex:1},{value:"gauge",paraId:4,tocIndex:1},{value:" marks, including ",paraId:4,tocIndex:1},{value:"x",paraId:4,tocIndex:1},{value:", ",paraId:4,tocIndex:1},{value:"y",paraId:4,tocIndex:1},{value:", ",paraId:4,tocIndex:1},{value:"color",paraId:4,tocIndex:1},{value:", etc., to specify the relationship between visual element properties and data",paraId:4,tocIndex:1},{value:"encode",paraId:6,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"scale",paraId:4,tocIndex:1},{value:"Configure scales for ",paraId:4,tocIndex:1},{value:"gauge",paraId:4,tocIndex:1},{value:" marks, including ",paraId:4,tocIndex:1},{value:"y",paraId:4,tocIndex:1},{value:", ",paraId:4,tocIndex:1},{value:"size",paraId:4,tocIndex:1},{value:", etc.",paraId:4,tocIndex:1},{value:"scale",paraId:7,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"style",paraId:4,tocIndex:1},{value:"Configure graphic styles and label styles",paraId:4,tocIndex:1},{value:"style",paraId:8,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"data",paraId:9,tocIndex:2},{value:" defines the gauge values, target values and category information, driving pointer position, color mapping and multi-gauge facet display through data binding.",paraId:9,tocIndex:2},{value:"Property",paraId:10,tocIndex:2},{value:"Description",paraId:10,tocIndex:2},{value:"Type",paraId:10,tocIndex:2},{value:"Default",paraId:10,tocIndex:2},{value:"Required",paraId:10,tocIndex:2},{value:"target",paraId:10,tocIndex:2},{value:"Set the target value of the gauge pointer",paraId:10,tocIndex:2},{value:"number",paraId:10,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"total",paraId:10,tocIndex:2},{value:"Set the maximum range value of the gauge scale",paraId:10,tocIndex:2},{value:"number",paraId:10,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"percent",paraId:10,tocIndex:2},{value:"Set the percentage pointed by the gauge pointer (when ",paraId:10,tocIndex:2},{value:"percent",paraId:10,tocIndex:2},{value:" is configured, ",paraId:10,tocIndex:2},{value:"target",paraId:10,tocIndex:2},{value:" and ",paraId:10,tocIndex:2},{value:"total",paraId:10,tocIndex:2},{value:" values will be invalid, please set ",paraId:10,tocIndex:2},{value:"thresholds",paraId:10,tocIndex:2},{value:" in a reasonable range, otherwise it will cause rendering errors)",paraId:10,tocIndex:2},{value:"number",paraId:10,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"thresholds",paraId:10,tocIndex:2},{value:"Set the gauge scale threshold intervals",paraId:10,tocIndex:2},{value:"number[]",paraId:10,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"For more ",paraId:11,tocIndex:2},{value:"data",paraId:11,tocIndex:2},{value:" configuration, you can check the ",paraId:11,tocIndex:2},{value:"data",paraId:12,tocIndex:2},{value:" introduction page.",paraId:11,tocIndex:2},{value:"Configure visual channels for ",paraId:13,tocIndex:3},{value:"gauge",paraId:13,tocIndex:3},{value:" marks, which define the mapping relationship between data fields and visual properties. This is an important configuration that determines how data is transformed into visual representation.",paraId:13,tocIndex:3},{value:"Property",paraId:14,tocIndex:3},{value:"Description",paraId:14,tocIndex:3},{value:"Type",paraId:14,tocIndex:3},{value:"Default",paraId:14,tocIndex:3},{value:"Required",paraId:14,tocIndex:3},{value:"x",paraId:14,tocIndex:3},{value:"Bind the ",paraId:14,tocIndex:3},{value:"x",paraId:14,tocIndex:3},{value:" property channel of ",paraId:14,tocIndex:3},{value:"gauge",paraId:14,tocIndex:3},{value:" marks, usually a time or ordinal name field in ",paraId:14,tocIndex:3},{value:"data",paraId:14,tocIndex:3},{value:"encode",paraId:15,tocIndex:3},{value:"'x'",paraId:14,tocIndex:3},{value:"y",paraId:14,tocIndex:3},{value:"Bind the ",paraId:14,tocIndex:3},{value:"y",paraId:14,tocIndex:3},{value:" property channel of ",paraId:14,tocIndex:3},{value:"gauge",paraId:14,tocIndex:3},{value:" marks, usually a numeric or array field in ",paraId:14,tocIndex:3},{value:"data",paraId:14,tocIndex:3},{value:"encode",paraId:16,tocIndex:3},{value:"'y'",paraId:14,tocIndex:3},{value:"color",paraId:14,tocIndex:3},{value:"Bind the ",paraId:14,tocIndex:3},{value:"color",paraId:14,tocIndex:3},{value:" property channel of ",paraId:14,tocIndex:3},{value:"gauge",paraId:14,tocIndex:3},{value:" marks. If data fields are mapped to color channels, data will be grouped and split into multiple regions with different colors",paraId:14,tocIndex:3},{value:"encode",paraId:17,tocIndex:3},{value:"'color'",paraId:14,tocIndex:3},{value:"For more ",paraId:18,tocIndex:3},{value:"encode",paraId:18,tocIndex:3},{value:" configuration, you can check the ",paraId:18,tocIndex:3},{value:"encode",paraId:19,tocIndex:3},{value:" introduction page.",paraId:18,tocIndex:3},{value:"scale",paraId:20,tocIndex:4},{value:" is used to define how data maps to visual properties (such as color, size, shape, etc.).",paraId:20,tocIndex:4},{value:"Property",paraId:21,tocIndex:4},{value:"Description",paraId:21,tocIndex:4},{value:"Type",paraId:21,tocIndex:4},{value:"Default",paraId:21,tocIndex:4},{value:"Required",paraId:21,tocIndex:4},{value:"y",paraId:21,tocIndex:4},{value:"Define the mapping rules from data fields to Y-axis visual positions",paraId:21,tocIndex:4},{value:"scale",paraId:22,tocIndex:4},{value:"{domain: [0, percent ? 1 : total]}",paraId:21,tocIndex:4},{value:"color",paraId:21,tocIndex:4},{value:"Define the color mapping rules for gauge scales",paraId:21,tocIndex:4},{value:"scale",paraId:23,tocIndex:4},{value:"{range: ['#30BF78', '#D0D0D0']}",paraId:21,tocIndex:4},{value:"The color distribution is related to the data in data. Colors here can be set as gradients for configuring gradient gauge charts.",paraId:24,tocIndex:5},{value:"With only ",paraId:25,tocIndex:5},{value:"target",paraId:25,tocIndex:5},{value:" or ",paraId:25,tocIndex:5},{value:"percent",paraId:25,tocIndex:5},{value:", the ",paraId:25,tocIndex:5},{value:"color",paraId:25,tocIndex:5},{value:" parameter ",paraId:25,tocIndex:5},{value:"range",paraId:25,tocIndex:5},{value:" can consist of two color parameters. On the gauge scale, these two colors will divide the gauge scale into two segments",paraId:25,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'gauge',\n  data: {\n    value: {\n      target: 120,\n      total: 400,\n      name: 'score',\n    },\n  },\n  scale: {\n    color: { range: ['#FAAD14', 'green'] },\n  },\n});\n\nchart.render();\n",paraId:26,tocIndex:5},{value:"When ",paraId:27,tocIndex:5},{value:"thresholds",paraId:27,tocIndex:5},{value:" is set, the colors in the ",paraId:27,tocIndex:5},{value:"color",paraId:27,tocIndex:5},{value:" parameter ",paraId:27,tocIndex:5},{value:"range",paraId:27,tocIndex:5},{value:" should match the length of ",paraId:27,tocIndex:5},{value:"thresholds",paraId:27,tocIndex:5},{value:". The gauge scale will be segmented by the values in ",paraId:27,tocIndex:5},{value:"thresholds",paraId:27,tocIndex:5},{value:" and filled with colors from the corresponding positions in the ",paraId:27,tocIndex:5},{value:"scale",paraId:27,tocIndex:5},{value:" parameter ",paraId:27,tocIndex:5},{value:"color",paraId:27,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'gauge',\n  data: {\n    value: {\n      target: 120,\n      total: 400,\n      name: 'score',\n      thresholds: [100, 200, 400],\n    },\n  },\n  scale: {\n    color: { range: ['#F4664A', '#FAAD14', 'green'] },\n  },\n});\n\nchart.render();\n",paraId:28,tocIndex:5},{value:"For more ",paraId:29,tocIndex:5},{value:"scale",paraId:29,tocIndex:5},{value:" configuration, you can check the ",paraId:29,tocIndex:5},{value:"scale",paraId:30,tocIndex:5},{value:" introduction page.",paraId:29,tocIndex:5},{value:"style",paraId:31,tocIndex:6},{value:" is used to set the appearance of chart elements, including fill colors, border styles, shadow effects, etc.",paraId:31,tocIndex:6},{value:"Property",paraId:32,tocIndex:6},{value:"Description",paraId:32,tocIndex:6},{value:"Type",paraId:32,tocIndex:6},{value:"Default",paraId:32,tocIndex:6},{value:"Required",paraId:32,tocIndex:6},{value:"arc",paraId:32,tocIndex:6},{value:"Configure the style of gauge arc",paraId:32,tocIndex:6},{value:"arc",paraId:33,tocIndex:6},{value:"See ",paraId:32,tocIndex:6},{value:"arc",paraId:34,tocIndex:6},{value:"pin",paraId:32,tocIndex:6},{value:"Configure the style of gauge pointer axis",paraId:32,tocIndex:6},{value:"pin",paraId:35,tocIndex:6},{value:"See ",paraId:32,tocIndex:6},{value:"pin",paraId:36,tocIndex:6},{value:"pointer",paraId:32,tocIndex:6},{value:"Configure the style of gauge pointer",paraId:32,tocIndex:6},{value:"pointer",paraId:37,tocIndex:6},{value:"See ",paraId:32,tocIndex:6},{value:"pointer",paraId:38,tocIndex:6},{value:"text",paraId:32,tocIndex:6},{value:"Configure the style of gauge center text",paraId:32,tocIndex:6},{value:"text",paraId:39,tocIndex:6},{value:"See ",paraId:32,tocIndex:6},{value:"text",paraId:40,tocIndex:6},{value:"Composite graphic marks need to be distinguished by different prefixes to configure graphics.",paraId:41,tocIndex:6},{value:"Configure gauge arc styles through the ",paraId:42,tocIndex:7},{value:"arc",paraId:42,tocIndex:7},{value:" prefix.",paraId:42,tocIndex:7},{value:"Property",paraId:43,tocIndex:7},{value:"Description",paraId:43,tocIndex:7},{value:"Type",paraId:43,tocIndex:7},{value:"Default",paraId:43,tocIndex:7},{value:"Required",paraId:43,tocIndex:7},{value:"arcShape",paraId:43,tocIndex:7},{value:"Gauge arc shape",paraId:43,tocIndex:7},{value:"'rect'",paraId:43,tocIndex:7},{value:" |",paraId:43,tocIndex:7},{value:"'hollow'",paraId:43,tocIndex:7},{value:"|",paraId:43,tocIndex:7},{value:"'round'",paraId:43,tocIndex:7},{value:"'rect'",paraId:43,tocIndex:7},{value:"arcFill",paraId:43,tocIndex:7},{value:"Gauge arc fill color",paraId:43,tocIndex:7},{value:"string | (datum, index, data) => string",paraId:43,tocIndex:7},{value:"-",paraId:43,tocIndex:7},{value:"arcFillOpacity",paraId:43,tocIndex:7},{value:"Gauge arc fill opacity",paraId:43,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:43,tocIndex:7},{value:"-",paraId:43,tocIndex:7},{value:"arcStroke",paraId:43,tocIndex:7},{value:"Gauge arc stroke color",paraId:43,tocIndex:7},{value:"string | (datum, index, data) => string",paraId:43,tocIndex:7},{value:"-",paraId:43,tocIndex:7},{value:"arcStrokeOpacity",paraId:43,tocIndex:7},{value:"Gauge arc stroke opacity",paraId:43,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:43,tocIndex:7},{value:"-",paraId:43,tocIndex:7},{value:"arcLineHeight",paraId:43,tocIndex:7},{value:"Gauge arc line height",paraId:43,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:43,tocIndex:7},{value:"-",paraId:43,tocIndex:7},{value:"arcLineWidth",paraId:43,tocIndex:7},{value:"Gauge arc stroke width",paraId:43,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:43,tocIndex:7},{value:"-",paraId:43,tocIndex:7},{value:"arcLineDash",paraId:43,tocIndex:7},{value:"Gauge arc dash configuration",paraId:43,tocIndex:7},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:43,tocIndex:7},{value:"-",paraId:43,tocIndex:7},{value:"arcOpacity",paraId:43,tocIndex:7},{value:"Gauge arc overall opacity",paraId:43,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:43,tocIndex:7},{value:"-",paraId:43,tocIndex:7},{value:"arcShadowColor",paraId:43,tocIndex:7},{value:"Gauge arc shadow color",paraId:43,tocIndex:7},{value:"string | (datum, index, data) => string",paraId:43,tocIndex:7},{value:"-",paraId:43,tocIndex:7},{value:"arcShadowBlur",paraId:43,tocIndex:7},{value:"Gauge arc shadow blur factor",paraId:43,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:43,tocIndex:7},{value:"-",paraId:43,tocIndex:7},{value:"arcShadowOffsetX",paraId:43,tocIndex:7},{value:"Gauge arc shadow horizontal offset",paraId:43,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:43,tocIndex:7},{value:"-",paraId:43,tocIndex:7},{value:"arcShadowOffsetY",paraId:43,tocIndex:7},{value:"Gauge arc shadow vertical offset",paraId:43,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:43,tocIndex:7},{value:"-",paraId:43,tocIndex:7},{value:"arcCursor",paraId:43,tocIndex:7},{value:"Gauge arc mouse cursor style",paraId:43,tocIndex:7},{value:"string | (datum, index, data) => string",paraId:43,tocIndex:7},{value:"default",paraId:43,tocIndex:7},{value:"Configure gauge pointer axis styles through the ",paraId:44,tocIndex:8},{value:"pin",paraId:44,tocIndex:8},{value:" prefix.",paraId:44,tocIndex:8},{value:"Property",paraId:45,tocIndex:8},{value:"Description",paraId:45,tocIndex:8},{value:"Type",paraId:45,tocIndex:8},{value:"Default",paraId:45,tocIndex:8},{value:"Required",paraId:45,tocIndex:8},{value:"pinR",paraId:45,tocIndex:8},{value:"Gauge pointer axis radius size",paraId:45,tocIndex:8},{value:"number | (datum, index, data) => number",paraId:45,tocIndex:8},{value:"10",paraId:45,tocIndex:8},{value:"pinFill",paraId:45,tocIndex:8},{value:"Gauge pointer axis fill color",paraId:45,tocIndex:8},{value:"string | (datum, index, data) => string",paraId:45,tocIndex:8},{value:"'#fff'",paraId:45,tocIndex:8},{value:"pinFillOpacity",paraId:45,tocIndex:8},{value:"Gauge pointer axis fill opacity",paraId:45,tocIndex:8},{value:"number | (datum, index, data) => number",paraId:45,tocIndex:8},{value:"-",paraId:45,tocIndex:8},{value:"pinStroke",paraId:45,tocIndex:8},{value:"Gauge pointer axis stroke color",paraId:45,tocIndex:8},{value:"string | (datum, index, data) => string",paraId:45,tocIndex:8},{value:"-",paraId:45,tocIndex:8},{value:"pinStrokeOpacity",paraId:45,tocIndex:8},{value:"Gauge pointer axis stroke opacity",paraId:45,tocIndex:8},{value:"number | (datum, index, data) => number",paraId:45,tocIndex:8},{value:"-",paraId:45,tocIndex:8},{value:"pinLineHeight",paraId:45,tocIndex:8},{value:"Gauge pointer axis line height",paraId:45,tocIndex:8},{value:"number | (datum, index, data) => number",paraId:45,tocIndex:8},{value:"-",paraId:45,tocIndex:8},{value:"pinLineWidth",paraId:45,tocIndex:8},{value:"Gauge pointer axis stroke width",paraId:45,tocIndex:8},{value:"number | (datum, index, data) => number",paraId:45,tocIndex:8},{value:"-",paraId:45,tocIndex:8},{value:"pinLineDash",paraId:45,tocIndex:8},{value:"Gauge pointer axis dash configuration",paraId:45,tocIndex:8},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:45,tocIndex:8},{value:"-",paraId:45,tocIndex:8},{value:"pinOpacity",paraId:45,tocIndex:8},{value:"Gauge pointer axis overall opacity",paraId:45,tocIndex:8},{value:"number | (datum, index, data) => number",paraId:45,tocIndex:8},{value:"-",paraId:45,tocIndex:8},{value:"pinShadowColor",paraId:45,tocIndex:8},{value:"Gauge pointer axis shadow color",paraId:45,tocIndex:8},{value:"string | (datum, index, data) => string",paraId:45,tocIndex:8},{value:"-",paraId:45,tocIndex:8},{value:"pinShadowBlur",paraId:45,tocIndex:8},{value:"Gauge pointer axis shadow blur factor",paraId:45,tocIndex:8},{value:"number | (datum, index, data) => number",paraId:45,tocIndex:8},{value:"-",paraId:45,tocIndex:8},{value:"pinShadowOffsetX",paraId:45,tocIndex:8},{value:"Gauge pointer axis shadow horizontal offset",paraId:45,tocIndex:8},{value:"number | (datum, index, data) => number",paraId:45,tocIndex:8},{value:"-",paraId:45,tocIndex:8},{value:"pinShadowOffsetY",paraId:45,tocIndex:8},{value:"Gauge pointer axis shadow vertical offset",paraId:45,tocIndex:8},{value:"number | (datum, index, data) => number",paraId:45,tocIndex:8},{value:"-",paraId:45,tocIndex:8},{value:"pinCursor",paraId:45,tocIndex:8},{value:"Gauge pointer axis mouse cursor style",paraId:45,tocIndex:8},{value:"string | (datum, index, data) => string",paraId:45,tocIndex:8},{value:"default",paraId:45,tocIndex:8},{value:"Configure gauge pointer styles through the ",paraId:46,tocIndex:9},{value:"pointer",paraId:46,tocIndex:9},{value:" prefix.",paraId:46,tocIndex:9},{value:"Property",paraId:47,tocIndex:9},{value:"Description",paraId:47,tocIndex:9},{value:"Type",paraId:47,tocIndex:9},{value:"Default",paraId:47,tocIndex:9},{value:"Required",paraId:47,tocIndex:9},{value:"pointerShape",paraId:47,tocIndex:9},{value:"Gauge pointer shape",paraId:47,tocIndex:9},{value:"'line'",paraId:47,tocIndex:9},{value:" |",paraId:47,tocIndex:9},{value:"(points, value, coordinate, theme) => DisplayObject",paraId:47,tocIndex:9},{value:"'line'",paraId:47,tocIndex:9},{value:"pointerStroke",paraId:47,tocIndex:9},{value:"Gauge pointer stroke color",paraId:47,tocIndex:9},{value:"string | (datum, index, data) => string",paraId:47,tocIndex:9},{value:"-",paraId:47,tocIndex:9},{value:"pointerStrokeOpacity",paraId:47,tocIndex:9},{value:"Gauge pointer stroke opacity",paraId:47,tocIndex:9},{value:"number | (datum, index, data) => number",paraId:47,tocIndex:9},{value:"-",paraId:47,tocIndex:9},{value:"pointerLineWidth",paraId:47,tocIndex:9},{value:"Gauge pointer line width",paraId:47,tocIndex:9},{value:"number | (datum, index, data) => number",paraId:47,tocIndex:9},{value:"-",paraId:47,tocIndex:9},{value:"pointerLineDash",paraId:47,tocIndex:9},{value:"Gauge pointer dash configuration",paraId:47,tocIndex:9},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:47,tocIndex:9},{value:"-",paraId:47,tocIndex:9},{value:"pointerOpacity",paraId:47,tocIndex:9},{value:"Gauge pointer overall opacity",paraId:47,tocIndex:9},{value:"number | (datum, index, data) => number",paraId:47,tocIndex:9},{value:"-",paraId:47,tocIndex:9},{value:"pointerShadowColor",paraId:47,tocIndex:9},{value:"Gauge pointer shadow color",paraId:47,tocIndex:9},{value:"string | (datum, index, data) => string",paraId:47,tocIndex:9},{value:"-",paraId:47,tocIndex:9},{value:"pointerShadowBlur",paraId:47,tocIndex:9},{value:"Gauge pointer shadow blur factor",paraId:47,tocIndex:9},{value:"number | (datum, index, data) => number",paraId:47,tocIndex:9},{value:"-",paraId:47,tocIndex:9},{value:"pointerShadowOffsetX",paraId:47,tocIndex:9},{value:"Gauge pointer shadow horizontal offset",paraId:47,tocIndex:9},{value:"number | (datum, index, data) => number",paraId:47,tocIndex:9},{value:"-",paraId:47,tocIndex:9},{value:"pointerShadowOffsetY",paraId:47,tocIndex:9},{value:"Gauge pointer shadow vertical offset",paraId:47,tocIndex:9},{value:"number | (datum, index, data) => number",paraId:47,tocIndex:9},{value:"-",paraId:47,tocIndex:9},{value:"pointerCursor",paraId:47,tocIndex:9},{value:"Gauge pointer mouse cursor style",paraId:47,tocIndex:9},{value:"string | (datum, index, data) => string",paraId:47,tocIndex:9},{value:"default",paraId:47,tocIndex:9},{value:"Configure gauge indicator text styles through the ",paraId:48,tocIndex:10},{value:"text",paraId:48,tocIndex:10},{value:" prefix.",paraId:48,tocIndex:10},{value:"Property",paraId:49,tocIndex:10},{value:"Description",paraId:49,tocIndex:10},{value:"Type",paraId:49,tocIndex:10},{value:"Default",paraId:49,tocIndex:10},{value:"Required",paraId:49,tocIndex:10},{value:"textContent",paraId:49,tocIndex:10},{value:"Set gauge center indicator text content",paraId:49,tocIndex:10},{value:"string",paraId:49,tocIndex:10},{value:"-",paraId:49,tocIndex:10},{value:"textX",paraId:49,tocIndex:10},{value:"Gauge center indicator text x-direction offset, can be set as specific value or percentage",paraId:49,tocIndex:10},{value:"number | string",paraId:49,tocIndex:10},{value:"50%",paraId:49,tocIndex:10},{value:"textY",paraId:49,tocIndex:10},{value:"Gauge center indicator text y-direction offset, can be set as specific value or percentage",paraId:49,tocIndex:10},{value:"number | string",paraId:49,tocIndex:10},{value:"60%",paraId:49,tocIndex:10},{value:"textFontSize",paraId:49,tocIndex:10},{value:"Gauge indicator text font size",paraId:49,tocIndex:10},{value:"number | (datum, index, data) => number",paraId:49,tocIndex:10},{value:"20",paraId:49,tocIndex:10},{value:"textFontFamily",paraId:49,tocIndex:10},{value:"Gauge indicator text font family",paraId:49,tocIndex:10},{value:"string | (datum, index, data) => string",paraId:49,tocIndex:10},{value:"-",paraId:49,tocIndex:10},{value:"textFontWeight",paraId:49,tocIndex:10},{value:"Gauge indicator text font weight",paraId:49,tocIndex:10},{value:"number | (datum, index, data) => number",paraId:49,tocIndex:10},{value:"800",paraId:49,tocIndex:10},{value:"textTextAlign",paraId:49,tocIndex:10},{value:"Gauge indicator text alignment",paraId:49,tocIndex:10},{value:"center",paraId:49,tocIndex:10},{value:" | ",paraId:49,tocIndex:10},{value:"end",paraId:49,tocIndex:10},{value:" | ",paraId:49,tocIndex:10},{value:"left",paraId:49,tocIndex:10},{value:" | ",paraId:49,tocIndex:10},{value:"right",paraId:49,tocIndex:10},{value:" | ",paraId:49,tocIndex:10},{value:"start",paraId:49,tocIndex:10},{value:"center",paraId:49,tocIndex:10},{value:"textTextBaseline",paraId:49,tocIndex:10},{value:"Gauge indicator text baseline alignment",paraId:49,tocIndex:10},{value:"top",paraId:49,tocIndex:10},{value:" | ",paraId:49,tocIndex:10},{value:"middle",paraId:49,tocIndex:10},{value:" | ",paraId:49,tocIndex:10},{value:"bottom",paraId:49,tocIndex:10},{value:" | ",paraId:49,tocIndex:10},{value:"alphabetic",paraId:49,tocIndex:10},{value:" | ",paraId:49,tocIndex:10},{value:"hanging",paraId:49,tocIndex:10},{value:"middle",paraId:49,tocIndex:10},{value:"textFill",paraId:49,tocIndex:10},{value:"Gauge indicator text color",paraId:49,tocIndex:10},{value:"string | (datum, index, data) => string",paraId:49,tocIndex:10},{value:"#888",paraId:49,tocIndex:10},{value:"textFillOpacity",paraId:49,tocIndex:10},{value:"Gauge indicator text opacity",paraId:49,tocIndex:10},{value:"number | (datum, index, data) => number",paraId:49,tocIndex:10},{value:"-",paraId:49,tocIndex:10},{value:"textStroke",paraId:49,tocIndex:10},{value:"Gauge indicator text stroke color",paraId:49,tocIndex:10},{value:"string | (datum, index, data) => string",paraId:49,tocIndex:10},{value:"-",paraId:49,tocIndex:10},{value:"textStrokeOpacity",paraId:49,tocIndex:10},{value:"Gauge indicator text stroke opacity",paraId:49,tocIndex:10},{value:"number | (datum, index, data) => number",paraId:49,tocIndex:10},{value:"-",paraId:49,tocIndex:10},{value:"textLineHeight",paraId:49,tocIndex:10},{value:"Gauge indicator text line height",paraId:49,tocIndex:10},{value:"number | (datum, index, data) => number",paraId:49,tocIndex:10},{value:"-",paraId:49,tocIndex:10},{value:"textLineWidth",paraId:49,tocIndex:10},{value:"Gauge indicator text stroke width",paraId:49,tocIndex:10},{value:"number | (datum, index, data) => number",paraId:49,tocIndex:10},{value:"-",paraId:49,tocIndex:10},{value:"textLineDash",paraId:49,tocIndex:10},{value:"Gauge indicator text dash configuration",paraId:49,tocIndex:10},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:49,tocIndex:10},{value:"-",paraId:49,tocIndex:10},{value:"textOpacity",paraId:49,tocIndex:10},{value:"Gauge indicator text overall opacity",paraId:49,tocIndex:10},{value:"number | (datum, index, data) => number",paraId:49,tocIndex:10},{value:"-",paraId:49,tocIndex:10},{value:"textShadowColor",paraId:49,tocIndex:10},{value:"Gauge indicator text shadow color",paraId:49,tocIndex:10},{value:"string | (datum, index, data) => string",paraId:49,tocIndex:10},{value:"-",paraId:49,tocIndex:10},{value:"textShadowBlur",paraId:49,tocIndex:10},{value:"Gauge indicator text shadow blur",paraId:49,tocIndex:10},{value:"number | (datum, index, data) => number",paraId:49,tocIndex:10},{value:"-",paraId:49,tocIndex:10},{value:"textShadowOffsetX",paraId:49,tocIndex:10},{value:"Gauge indicator text shadow horizontal offset",paraId:49,tocIndex:10},{value:"number | (datum, index, data) => number",paraId:49,tocIndex:10},{value:"-",paraId:49,tocIndex:10},{value:"textShadowOffsetY",paraId:49,tocIndex:10},{value:"Gauge indicator text shadow vertical offset",paraId:49,tocIndex:10},{value:"number | (datum, index, data) => number",paraId:49,tocIndex:10},{value:"-",paraId:49,tocIndex:10},{value:"textCursor",paraId:49,tocIndex:10},{value:"Gauge indicator text mouse cursor style",paraId:49,tocIndex:10},{value:"string | (datum, index, data) => string",paraId:49,tocIndex:10},{value:"default",paraId:49,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'gauge',\n  data: {\n    value: {\n      target: 159,\n      total: 400,\n      name: 'score',\n      // thresholds: [200, 400],\n    },\n  },\n  scale: {\n    color: {\n      range: ['l(0):0:#62CFF4 1:#2C67F2', 'l(0):0:#2C67F2 1:#00008B'],\n    },\n    y: {\n      range: [1, -0.5],\n    },\n  },\n  style: {\n    // Configure gauge indicator text style\n    textContent: (target, total) => `Ratio: ${(target / total) * 100}%`,\n    textFill: '#000',\n    textFontSize: 24,\n    textfontWeight: 300,\n    textX: '35%',\n    textY: '75%',\n    // Configure gauge pointer style\n    pointerStroke: '#c5c5c5',\n    pointershadowColor: '#333333',\n    pointershadowBlur: 10,\n    pointershadowOffsetX: 5,\n    pointershadowOffsetY: 5,\n    // Configure gauge pointer axis style\n    pinStroke: '#d5d5d5',\n    pinFill: '#d5d5d5',\n    pinlinewidth: 6,\n    pinshadowColor: '#333333',\n    pinshadowBlur: 30,\n    pinshadowOffsetX: 5,\n    pinshadowOffsetY: 5,\n    // Configure gauge arc style\n    arcLineWidth: 2,\n    arcStroke: '#fff',\n    arcshadowColor: '#333333',\n    arcshadowBlur: 30,\n    arcshadowOffsetX: 5,\n    arcshadowOffsetY: 5,\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:50,tocIndex:10},{value:"For more ",paraId:51,tocIndex:10},{value:"style",paraId:51,tocIndex:10},{value:" configuration, you can check the ",paraId:51,tocIndex:10},{value:"style",paraId:52,tocIndex:10},{value:" introduction page.",paraId:51,tocIndex:10},{value:"Try it out:",paraId:53,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 350,\n});\n\nchart.options({\n  type: 'gauge',\n  data: {\n    value: { target: 159, total: 400, name: 'score', thresholds: [200, 400] },\n  },\n  scale: {\n    color: { range: ['l(0):0:#37b38e 1:#D9C652', 'l(0):0:#D9C652 1:#f96e3e'] },\n  },\n  style: {\n    textContent: (target, total) => `得分：${target}\n占比：${(target / total) * 100}%`,\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:54,tocIndex:10},{value:"import { Chart } from '@antv/g2';\nimport { Path } from '@antv/g';\n\nconst chart = new Chart({ container: 'container' });\n\nfunction getOrigin(points) {\n  if (points.length === 1) return points[0];\n  const [[x0, y0, z0 = 0], [x2, y2, z2 = 0]] = points;\n  return [(x0 + x2) / 2, (y0 + y2) / 2, (z0 + z2) / 2];\n}\n// 自定义指针形状\nconst customShape = (style) => {\n  return (points, value, coordinate, theme) => {\n    // 获取几何点中心坐标\n    const [x, y] = getOrigin(points);\n    const [cx, cy] = coordinate.getCenter();\n    // 计算指针方向角度\n    const angle = Math.atan2(y - cy, x - cx);\n    const length = 100; // 指针长度\n    const width = 8; // 指针底部宽度\n    // 构造指针三角形路径\n    return new Path({\n      style: {\n        d: [\n          ['M', cx + Math.cos(angle) * length, cy + Math.sin(angle) * length], // 顶点\n          [\n            'L',\n            cx + Math.cos(angle + Math.PI / 2) * width,\n            cy + Math.sin(angle + Math.PI / 2) * width,\n          ], // 底部左点\n          [\n            'L',\n            cx + Math.cos(angle - Math.PI / 2) * width,\n            cy + Math.sin(angle - Math.PI / 2) * width,\n          ], // 底部右点\n          ['Z'], // 闭合路径\n        ],\n        fill: '#30BF78', // 填充色\n      },\n    });\n  };\n};\n\nchart.options({\n  type: 'gauge',\n  data: {\n    value: {\n      target: 159,\n      total: 424,\n      name: 'score',\n    },\n  },\n  style: {\n    pointerShape: customShape,\n    pinShape: false,\n    textContent: (target, total) => {\n      return `得分：${target}\\n占比：${(target / total) * 100}%`;\n    },\n  },\n});\n\nchart.render();\n",paraId:55,tocIndex:12}]},79798:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(33817);const t=[{value:"heatmap",paraId:0,tocIndex:0},{value:" is a visualization chart that maps the density or value magnitude of two-dimensional data through color intensity, excelling at revealing data distribution patterns, clustering characteristics, and outliers.\n",paraId:0,tocIndex:0},{value:"heatmap",paraId:0,tocIndex:0},{value:" maps two categorical/continuous fields (such as x, y) to coordinate axis, and a third numerical field (such as value) to a color gradient (such as color: 'value'), forming a grid of colored blocks in a matrix.\n",paraId:0,tocIndex:0},{value:"heatmap",paraId:0,tocIndex:0},{value:" can define color scales, with cool colors (such as blue) representing low values and warm colors (such as red) representing high values, intuitively showing the magnitude or frequency distribution of values.",paraId:0,tocIndex:0},{value:"Typical applications include:",paraId:1,tocIndex:0},{value:"Correlation analysis: For example, used to display correlation matrices between variables, quickly identifying strongly correlated or weakly correlated variables through color intensity.",paraId:2,tocIndex:0},{value:"Density analysis: Display the density distribution of two-dimensional data, commonly used to observe hotspot areas, such as analyzing population clustering distribution in geospatial data.",paraId:2,tocIndex:0},{value:"Time series and category analysis: Combine time (such as hours, days, weeks) with categorical data to analyze temporal patterns or classification distributions.",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'heatmap', // Mark type is heatmap\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/heatmap.json',\n  },\n  encode: { x: 'g', y: 'l', color: 'tmp' }, // Data encoding configuration, x-axis is 'g', y-axis is 'l', color is 'tmp'\n  style: { opacity: 0 }, // Heatmap opacity is 0\n  tooltip: false,\n});\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"For more examples, you can check the ",paraId:4,tocIndex:0},{value:"Chart Examples - Heatmap",paraId:5,tocIndex:0},{value:" page.",paraId:4,tocIndex:0},{value:"Property",paraId:6,tocIndex:1},{value:"Description",paraId:6,tocIndex:1},{value:"Type",paraId:6,tocIndex:1},{value:"Default",paraId:6,tocIndex:1},{value:"Required",paraId:6,tocIndex:1},{value:"encode",paraId:6,tocIndex:1},{value:"Configure the visual channels of the ",paraId:6,tocIndex:1},{value:"heatmap",paraId:6,tocIndex:1},{value:" mark, including ",paraId:6,tocIndex:1},{value:"x",paraId:6,tocIndex:1},{value:", ",paraId:6,tocIndex:1},{value:"y",paraId:6,tocIndex:1},{value:", ",paraId:6,tocIndex:1},{value:"color",paraId:6,tocIndex:1},{value:", etc., to specify the relationship between visual element properties and data",paraId:6,tocIndex:1},{value:"encode",paraId:7,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"✓",paraId:6,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:"Configure the ",paraId:6,tocIndex:1},{value:"heatmap",paraId:6,tocIndex:1},{value:" graphics style",paraId:6,tocIndex:1},{value:"style",paraId:8,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"Configure the visual channels of the ",paraId:9,tocIndex:2},{value:"heatmap",paraId:9,tocIndex:2},{value:" mark, defining the important configuration of the mapping relationship between data fields and visual properties, which determines how data is transformed into visual representation.",paraId:9,tocIndex:2},{value:"Property",paraId:10,tocIndex:2},{value:"Description",paraId:10,tocIndex:2},{value:"Type",paraId:10,tocIndex:2},{value:"Default",paraId:10,tocIndex:2},{value:"Required",paraId:10,tocIndex:2},{value:"x",paraId:10,tocIndex:2},{value:"Bind the ",paraId:10,tocIndex:2},{value:"x",paraId:10,tocIndex:2},{value:" property channel of the ",paraId:10,tocIndex:2},{value:"heatmap",paraId:10,tocIndex:2},{value:" mark, generally a time or ordinal nominal field in ",paraId:10,tocIndex:2},{value:"data",paraId:10,tocIndex:2},{value:"encode",paraId:11,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"✓",paraId:10,tocIndex:2},{value:"y",paraId:10,tocIndex:2},{value:"Bind the ",paraId:10,tocIndex:2},{value:"y",paraId:10,tocIndex:2},{value:" property channel of the ",paraId:10,tocIndex:2},{value:"heatmap",paraId:10,tocIndex:2},{value:" mark, generally a numerical or array field in ",paraId:10,tocIndex:2},{value:"data",paraId:10,tocIndex:2},{value:"encode",paraId:12,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"✓",paraId:10,tocIndex:2},{value:"color",paraId:10,tocIndex:2},{value:"Bind the ",paraId:10,tocIndex:2},{value:"color",paraId:10,tocIndex:2},{value:" property channel of the ",paraId:10,tocIndex:2},{value:"heatmap",paraId:10,tocIndex:2},{value:" mark. If a data field is mapped to the color channel, the data will be grouped and split into multiple areas of different colors",paraId:10,tocIndex:2},{value:"encode",paraId:13,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"For more ",paraId:14,tocIndex:2},{value:"encode",paraId:14,tocIndex:2},{value:" configuration, you can check the ",paraId:14,tocIndex:2},{value:"encode",paraId:15,tocIndex:2},{value:" introduction page.",paraId:14,tocIndex:2},{value:"Property",paraId:16,tocIndex:3},{value:"Description",paraId:16,tocIndex:3},{value:"Type",paraId:16,tocIndex:3},{value:"Default",paraId:16,tocIndex:3},{value:"Required",paraId:16,tocIndex:3},{value:"gradient",paraId:16,tocIndex:3},{value:"Gradient color configuration corresponding to the graphics",paraId:16,tocIndex:3},{value:"string",paraId:16,tocIndex:3},{value:" | ",paraId:16,tocIndex:3},{value:"Array<[number, string]>",paraId:16,tocIndex:3},{value:"-",paraId:16,tocIndex:3},{value:"opacity",paraId:16,tocIndex:3},{value:"Transparency of the heatmap. If set, it will override ",paraId:16,tocIndex:3},{value:"maxOpacity",paraId:16,tocIndex:3},{value:" and ",paraId:16,tocIndex:3},{value:"minOpacity",paraId:16,tocIndex:3},{value:" configuration, range 0 ~ 1",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:"0.6",paraId:16,tocIndex:3},{value:"maxOpacity",paraId:16,tocIndex:3},{value:"Maximum transparency value of heatmap pixels, effective when ",paraId:16,tocIndex:3},{value:"opacity = 0",paraId:16,tocIndex:3},{value:", range 0 ~ 1",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:"1",paraId:16,tocIndex:3},{value:"minOpacity",paraId:16,tocIndex:3},{value:"Minimum transparency value of heatmap pixels, effective when ",paraId:16,tocIndex:3},{value:"opacity = 0",paraId:16,tocIndex:3},{value:", range 0 ~ 1",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:"0",paraId:16,tocIndex:3},{value:"blur",paraId:16,tocIndex:3},{value:"Blur factor of the heatmap, range 0 ~ 1, the larger the value, the smoother the graphics",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:"0.85",paraId:16,tocIndex:3},{value:"useGradientOpacity",paraId:16,tocIndex:3},{value:"Fill color of the graphics",paraId:16,tocIndex:3},{value:"boolean",paraId:16,tocIndex:3},{value:"false",paraId:16,tocIndex:3},{value:"fill",paraId:16,tocIndex:3},{value:"Fill color of the graphics",paraId:16,tocIndex:3},{value:"string",paraId:16,tocIndex:3},{value:" | ",paraId:16,tocIndex:3},{value:"Function<string>",paraId:16,tocIndex:3},{value:"-",paraId:16,tocIndex:3},{value:"fillOpacity",paraId:16,tocIndex:3},{value:"Fill transparency of the graphics",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:" | ",paraId:16,tocIndex:3},{value:"Function<number>",paraId:16,tocIndex:3},{value:"-",paraId:16,tocIndex:3},{value:"stroke",paraId:16,tocIndex:3},{value:"Stroke of the graphics",paraId:16,tocIndex:3},{value:"string",paraId:16,tocIndex:3},{value:" | ",paraId:16,tocIndex:3},{value:"Function<string>",paraId:16,tocIndex:3},{value:"-",paraId:16,tocIndex:3},{value:"strokeOpacity",paraId:16,tocIndex:3},{value:"Stroke transparency",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:" | ",paraId:16,tocIndex:3},{value:"Function<number>",paraId:16,tocIndex:3},{value:"-",paraId:16,tocIndex:3},{value:"lineWidth",paraId:16,tocIndex:3},{value:"Width of the graphics stroke",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:" | ",paraId:16,tocIndex:3},{value:"Function<number>",paraId:16,tocIndex:3},{value:"-",paraId:16,tocIndex:3},{value:"lineDash",paraId:16,tocIndex:3},{value:"Dash configuration of the stroke. The first value is the length of each segment of the dash, and the second value is the distance between segments. Setting lineDash to [0, 0] results in no stroke.",paraId:16,tocIndex:3},{value:"[number,number]",paraId:16,tocIndex:3},{value:" | ",paraId:16,tocIndex:3},{value:"Function<[number, number]>",paraId:16,tocIndex:3},{value:"-",paraId:16,tocIndex:3},{value:"shadowColor",paraId:16,tocIndex:3},{value:"Shadow color of the graphics",paraId:16,tocIndex:3},{value:"string",paraId:16,tocIndex:3},{value:" | ",paraId:16,tocIndex:3},{value:"Function<string>",paraId:16,tocIndex:3},{value:"-",paraId:16,tocIndex:3},{value:"shadowBlur",paraId:16,tocIndex:3},{value:"Gaussian blur coefficient of the graphics shadow",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:" | ",paraId:16,tocIndex:3},{value:"Function<number>",paraId:16,tocIndex:3},{value:"-",paraId:16,tocIndex:3},{value:"shadowOffsetX",paraId:16,tocIndex:3},{value:"Set the horizontal distance of the shadow from the graphics",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:" | ",paraId:16,tocIndex:3},{value:"Function<number>",paraId:16,tocIndex:3},{value:"-",paraId:16,tocIndex:3},{value:"shadowOffsetY",paraId:16,tocIndex:3},{value:"Set the vertical distance of the shadow from the graphics",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:" | ",paraId:16,tocIndex:3},{value:"Function<number>",paraId:16,tocIndex:3},{value:"-",paraId:16,tocIndex:3},{value:"cursor",paraId:16,tocIndex:3},{value:"Mouse style. Same as CSS mouse style, default 'default'.",paraId:16,tocIndex:3},{value:"string",paraId:16,tocIndex:3},{value:" | ",paraId:16,tocIndex:3},{value:"Function<string>",paraId:16,tocIndex:3},{value:"'default'",paraId:16,tocIndex:3},{value:"Regarding the ",paraId:17,tocIndex:3},{value:"gradient",paraId:17,tocIndex:3},{value:" configuration, here's an example, which is also the default built-in gradient color in G2:",paraId:17,tocIndex:3},{value:"const gradient = [\n  [0.25, 'rgb(0,0,255)'],\n  [0.55, 'rgb(0,255,0)'],\n  [0.85, 'yellow'],\n  [1.0, 'rgb(255,0,0)'],\n];\n\nconst gradient =\n  '0.25:rgb(0,0,255) 0.55:rgb(0,255,0) 0.85:yellow 1.0:rgb(255,0,0)';\n",paraId:18,tocIndex:3},{value:"For more ",paraId:19,tocIndex:3},{value:"style",paraId:19,tocIndex:3},{value:" configuration, you can check the ",paraId:19,tocIndex:3},{value:"style",paraId:20,tocIndex:3},{value:" introduction page.",paraId:19,tocIndex:3},{value:"Give it a try:",paraId:21,tocIndex:3},{value:"import DataSet from '@antv/data-set';\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/diamond.json',\n});\n\nchart.scale('x', { nice: true, domainMin: -0.5 });\nchart.scale('y', { nice: true, domainMin: -2000 });\nchart.scale('color', { nice: true });\n\nchart\n  .heatmap()\n  .data({\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => {\n          const dv = new DataSet.View().source(data);\n          dv.transform({\n            type: 'kernel-smooth.density',\n            fields: ['carat', 'price'],\n            as: ['carat', 'price', 'density'],\n          });\n          return dv.rows;\n        },\n      },\n    ],\n  })\n  .encode('x', 'carat')\n  .encode('y', 'price')\n  .encode('color', 'density')\n  .style({\n    opacity: 0.3,\n    gradient: [\n      [0, 'white'],\n      [0.2, 'blue'],\n      [0.4, 'cyan'],\n      [0.6, 'lime'],\n      [0.8, 'yellow'],\n      [0.9, 'red'],\n    ],\n  });\n\nchart.point().encode('x', 'carat').encode('y', 'price');\n\nchart.render();\n\n",paraId:22,tocIndex:3},{value:"You can create a container view to render both heatmap and map simultaneously, intuitively presenting data differences in geographical locations",paraId:23,tocIndex:4},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  padding: 0,\n  axis: false,\n  children: [\n    {\n      type: 'image',\n      style: {\n        src: 'https://gw.alipayobjects.com/zos/rmsportal/NeUTMwKtPcPxIFNTWZOZ.png',\n        x: '50%',\n        y: '50%',\n        width: '100%',\n        height: '100%',\n      },\n      tooltip: false,\n    },\n    {\n      type: 'heatmap',\n      data: {\n        type: 'fetch',\n        value: 'https://assets.antv.antgroup.com/g2/heatmap.json',\n      },\n      encode: { x: 'g', y: 'l', color: 'tmp' },\n      style: { opacity: 0 },\n      tooltip: false,\n    },\n  ],\n});\n\nchart.render();\n",paraId:24,tocIndex:4}]},98127:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(97306);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"image",paraId:0,tocIndex:0},{value:" mark usually does not appear independently and is mainly used as an addition to other marks, which can enhance the visual effect of data and help convey information more intuitively. It is very similar to the ",paraId:0,tocIndex:0},{value:"point",paraId:1,tocIndex:0},{value:" mark, both using ",paraId:0,tocIndex:0},{value:"x",paraId:0,tocIndex:0},{value:" and ",paraId:0,tocIndex:0},{value:"y",paraId:0,tocIndex:0},{value:" data channels for centered positioning. The difference is that ",paraId:0,tocIndex:0},{value:"image",paraId:0,tocIndex:0},{value:" provides a special ",paraId:0,tocIndex:0},{value:"src",paraId:0,tocIndex:0},{value:" data channel to specify the remote address or base64 of the image.",paraId:0,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  width: 200,\n  height: 60,\n  type: 'image',\n  data: [\n    {\n      x: '1',\n      y: 1,\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*TRZHTaTeWfEAAAAAAAAAAAAAemJ7AQ/original',\n    },\n    {\n      x: '2',\n      y: 1,\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*TRZHTaTeWfEAAAAAAAAAAAAAemJ7AQ/original',\n    },\n    {\n      x: '3',\n      y: 1,\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*TRZHTaTeWfEAAAAAAAAAAAAAemJ7AQ/original',\n    },\n    {\n      x: '4',\n      y: 1,\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*qCegRabhuUIAAAAAAAAAAAAAemJ7AQ/original',\n    },\n    {\n      x: '5',\n      y: 1,\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*GNP1RLFfQV0AAAAAAAAAAAAAemJ7AQ/original',\n    },\n\n    {\n      x: '1',\n      y: 2,\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*TRZHTaTeWfEAAAAAAAAAAAAAemJ7AQ/original',\n    },\n    {\n      x: '2',\n      y: 2,\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*TRZHTaTeWfEAAAAAAAAAAAAAemJ7AQ/original',\n    },\n    {\n      x: '3',\n      y: 2,\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*qCegRabhuUIAAAAAAAAAAAAAemJ7AQ/original',\n    },\n    {\n      x: '4',\n      y: 2,\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*GNP1RLFfQV0AAAAAAAAAAAAAemJ7AQ/original',\n    },\n    {\n      x: '5',\n      y: 2,\n      url: 'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*GNP1RLFfQV0AAAAAAAAAAAAAemJ7AQ/original',\n    },\n  ],\n  // Configure visual channels\n  encode: {\n    x: 'x', // Configure x channel\n    y: 'y', // Configure y channel\n    src: 'url', // Configure image src channel\n  },\n  axis: { x: false, y: false },\n});\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"For more examples, you can visit the ",paraId:3,tocIndex:0},{value:"Chart Examples - Image",paraId:4,tocIndex:0},{value:" page.",paraId:3,tocIndex:0},{value:"Property",paraId:5,tocIndex:1},{value:"Description",paraId:5,tocIndex:1},{value:"Type",paraId:5,tocIndex:1},{value:"Default",paraId:5,tocIndex:1},{value:"Required",paraId:5,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"Configure the visual channels of the ",paraId:5,tocIndex:1},{value:"image",paraId:5,tocIndex:1},{value:" mark, including ",paraId:5,tocIndex:1},{value:"x",paraId:5,tocIndex:1},{value:", ",paraId:5,tocIndex:1},{value:"y",paraId:5,tocIndex:1},{value:", ",paraId:5,tocIndex:1},{value:"src",paraId:5,tocIndex:1},{value:", ",paraId:5,tocIndex:1},{value:"size",paraId:5,tocIndex:1},{value:", etc., to specify the relationship between visual element properties and data",paraId:5,tocIndex:1},{value:"encode",paraId:6,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"✓",paraId:5,tocIndex:1},{value:"style",paraId:5,tocIndex:1},{value:"Configure the graphic style of the ",paraId:5,tocIndex:1},{value:"image",paraId:5,tocIndex:1},{value:" mark",paraId:5,tocIndex:1},{value:"style",paraId:7,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"Configure the visual channels of the ",paraId:8,tocIndex:2},{value:"image",paraId:8,tocIndex:2},{value:" mark.",paraId:8,tocIndex:2},{value:"Property",paraId:9,tocIndex:2},{value:"Description",paraId:9,tocIndex:2},{value:"Type",paraId:9,tocIndex:2},{value:"Default",paraId:9,tocIndex:2},{value:"Required",paraId:9,tocIndex:2},{value:"x",paraId:9,tocIndex:2},{value:"Bind the ",paraId:9,tocIndex:2},{value:"x",paraId:9,tocIndex:2},{value:" property channel of the ",paraId:9,tocIndex:2},{value:"image",paraId:9,tocIndex:2},{value:" mark, usually a numeric or character value from ",paraId:9,tocIndex:2},{value:"data",paraId:9,tocIndex:2},{value:" to determine the ",paraId:9,tocIndex:2},{value:"x",paraId:9,tocIndex:2},{value:" position of the image",paraId:9,tocIndex:2},{value:"encode",paraId:10,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"✓",paraId:9,tocIndex:2},{value:"y",paraId:9,tocIndex:2},{value:"Bind the ",paraId:9,tocIndex:2},{value:"y",paraId:9,tocIndex:2},{value:" property channel of the ",paraId:9,tocIndex:2},{value:"image",paraId:9,tocIndex:2},{value:" mark, usually a numeric or character value from ",paraId:9,tocIndex:2},{value:"data",paraId:9,tocIndex:2},{value:" to determine the ",paraId:9,tocIndex:2},{value:"y",paraId:9,tocIndex:2},{value:" position of the image",paraId:9,tocIndex:2},{value:"encode",paraId:11,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"✓",paraId:9,tocIndex:2},{value:"size",paraId:9,tocIndex:2},{value:"Bind the ",paraId:9,tocIndex:2},{value:"size",paraId:9,tocIndex:2},{value:" channel of the ",paraId:9,tocIndex:2},{value:"image",paraId:9,tocIndex:2},{value:" mark to control the display size of the image. Generally, the more information stored in the image, the more it needs to be enlarged",paraId:9,tocIndex:2},{value:"encode",paraId:12,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"src",paraId:9,tocIndex:2},{value:"Bind the ",paraId:9,tocIndex:2},{value:"src",paraId:9,tocIndex:2},{value:" image channel of the ",paraId:9,tocIndex:2},{value:"image",paraId:9,tocIndex:2},{value:" mark, which will display images based on the corresponding data",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"✓",paraId:9,tocIndex:2},{value:"The final rendering is handled by G, so the supported data types are consistent with G's atomic Image graphic, supporting:",paraId:13,tocIndex:3},{value:"Remote URL",paraId:14,tocIndex:3},{value:": Network address",paraId:14,tocIndex:3},{value:"file",paraId:14,tocIndex:3},{value:": Local image path",paraId:14,tocIndex:3},{value:"base64",paraId:14,tocIndex:3},{value:": Chart base64 format string",paraId:14,tocIndex:3},{value:"blob",paraId:14,tocIndex:3},{value:": Blob object returned from image request",paraId:14,tocIndex:3},{value:"Property",paraId:15,tocIndex:4},{value:"Description",paraId:15,tocIndex:4},{value:"Type",paraId:15,tocIndex:4},{value:"Default",paraId:15,tocIndex:4},{value:"Required",paraId:15,tocIndex:4},{value:"width",paraId:15,tocIndex:4},{value:"Width of the graphic. If not configured, the image is displayed by default according to its natural width and ",paraId:15,tocIndex:4},{value:"size",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"Function<number>",paraId:15,tocIndex:4},{value:"-",paraId:15,tocIndex:4},{value:"height",paraId:15,tocIndex:4},{value:"Height of the graphic. If not configured, the image is displayed by default according to its natural height and ",paraId:15,tocIndex:4},{value:"size",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"Function<number>",paraId:15,tocIndex:4},{value:"-",paraId:15,tocIndex:4},{value:"opacity",paraId:15,tocIndex:4},{value:"Overall opacity of the graphic",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"Function<number>",paraId:15,tocIndex:4},{value:"-",paraId:15,tocIndex:4},{value:"shadowColor",paraId:15,tocIndex:4},{value:"Shadow color of the graphic",paraId:15,tocIndex:4},{value:"string",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"Function<string>",paraId:15,tocIndex:4},{value:"-",paraId:15,tocIndex:4},{value:"shadowBlur",paraId:15,tocIndex:4},{value:"Gaussian blur coefficient of the graphic shadow",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"Function<number>",paraId:15,tocIndex:4},{value:"-",paraId:15,tocIndex:4},{value:"shadowOffsetX",paraId:15,tocIndex:4},{value:"Horizontal distance of the shadow from the graphic",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"Function<number>",paraId:15,tocIndex:4},{value:"-",paraId:15,tocIndex:4},{value:"shadowOffsetY",paraId:15,tocIndex:4},{value:"Vertical distance of the shadow from the graphic",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"Function<number>",paraId:15,tocIndex:4},{value:"-",paraId:15,tocIndex:4},{value:"cursor",paraId:15,tocIndex:4},{value:"Mouse cursor style. Same as CSS cursor style, default 'default'",paraId:15,tocIndex:4},{value:"string",paraId:15,tocIndex:4},{value:" | ",paraId:15,tocIndex:4},{value:"Function<string>",paraId:15,tocIndex:4},{value:"default",paraId:15,tocIndex:4},{value:"Try it out:",paraId:16,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst Avatars = [\n  'https://gw.alipayobjects.com/zos/antfincdn/z8eXl6l9GM/aiyin.jpg',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*cu6GQ7yNpJIAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*IFYESbDDqI0AAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*z6bUQ7bvuAYAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*zIFOTbhtCoMAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*z9SnQpiMnIgAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*aGTWQKFIx2cAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/zos/antfincdn/n%26uTxqsNHe/IMG_3154.JPG',\n  'http://alipay-rmsdeploy-image.cn-hangzhou.alipay.aliyun-inc.com/antfincdn/sX13FkC4%26C/erling.jpg',\n  'https://gw.alipayobjects.com/zos/antfincdn/4VUXCQEiBd/c4f901c7-f591-4616-8dfc-83aecf839cd8.png',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*5kqTSZE-9KMAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*_OhHTo0gxAMAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/zos/antfincdn/aXQ3OTu6Er/IMG_3509.JPG',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*blSIQbwdOqsAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*rVgGS5sJwHQAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*gB63QppvTsgAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/zos/antfincdn/AefmmqKied/3ca2b3d8-e568-4bec-b10d-e4e432cb6f23.png',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*iBIzSZMCWRcAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*GHQQQYTL4g8AAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*VXoNRoRXPBwAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*WZcQRJtWWlIAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*-wAXRKlOrW4AAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*LSpRS6i_WOcAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*23r_SpWxPdEAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*R3QzTpZM7IUAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*vU-mRr0XrfcAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*LMcOQKUxbUEAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*8CiTTqjnzcEAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/zos/antfincdn/smBVaflWk5/my.jpg',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*V7E0RqRAlG4AAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*_E0SR4LCxaAAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*PmifSa53auQAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*mWkGRqxLexYAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*CPXKQ76YlfwAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/zos/antfincdn/c9K5r1m%26y9/d0b8a090-f034-43e6-aeeb-f59cb6c7c33c.png',\n  'https://gw.alipayobjects.com/zos/antfincdn/L%261dAufvjL/IMG_1477.JPG',\n  'https://gw.alipayobjects.com/zos/antfincdn/NkfCEL7RTL/7cdd44fc-8624-4b6c-8947-67f78e79142f.png',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*dl_gToTY6msAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*QFEMTaidg9QAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/zos/antfincdn/KGawdl9Ahq/touxiang.JPG',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*y1cFS4MDmPIAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_23b644/afts/img/A*qykaTLGttsgAAAAAAAAAAABkARQnAQ',\n  'https://gw.alipayobjects.com/zos/antfincdn/QL5d8rcf%24M/IMG_6534.JPG',\n  'https://gw.alipayobjects.com/mdn/rms_04a9e5/afts/img/A*ZmohRYwarWcAAAAAAAAAAAAAARQnAQ',\n  'https://gw.alipayobjects.com/mdn/rms_04a9e5/afts/img/A*1O_3R4Wcwy0AAAAAAAAAAAAAARQnAQ',\n];\n\n// Code from https://juejin.cn/post/6995818748191981604\nfunction getLovePoints() {\n  let angle = 0;\n  let x = 0;\n  let y = 0;\n  const a = 6;\n  const points = [];\n  for (let i = 0; i < 20; i += 0.2) {\n    angle = i / Math.PI;\n    x = a * (16 * Math.sin(angle) ** 3);\n    y =\n      a *\n      (13 * Math.cos(angle) -\n        5 * Math.cos(2 * angle) -\n        2 * Math.cos(3 * angle) -\n        Math.cos(4 * angle));\n    points.push({ x, y });\n  }\n  return points;\n}\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  padding: 40,\n});\n\nchart.data(getLovePoints());\n\nchart\n  .image()\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('src', (_, idx) => Avatars[idx % Avatars.length])\n  .encode('size', 48)\n  .style({\n    opacity: 0.7,\n    shadowColor: '#fad7e0',\n    shadowBlur: 40,\n    shadowOffsetY: 20,\n  })\n  .axis(false)\n  .tooltip(false);\n\nchart.render();\n\n",paraId:17,tocIndex:4}]},24700:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(44395);const t=[{value:"The interval mark (",paraId:0,tocIndex:0},{value:"interval",paraId:0,tocIndex:0},{value:") is a collection of chart marks used to represent upper and lower intervals of data. It is commonly used to draw bar charts, column charts, pie charts, etc. By changing the coordinate system, scales, and data ",paraId:0,tocIndex:0},{value:"Transform",paraId:0,tocIndex:0},{value:", a variety of visual styles can be produced. For example, grouping multiple parallel categories to form a group and then comparing between groups is called a grouped bar chart or clustered column chart. Splitting categories into multiple subcategories forms a stacked bar chart. Combining bar charts with line charts on the same chart is commonly known as a dual-axis chart, and so on. ",paraId:0,tocIndex:0},{value:"interval",paraId:0,tocIndex:0},{value:" is the most commonly used ",paraId:0,tocIndex:0},{value:"Mark",paraId:0,tocIndex:0},{value:" in the grammar of graphics.",paraId:0,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { letter: 'A', frequency: 0.08167 },\n    { letter: 'B', frequency: 0.01492 },\n    { letter: 'C', frequency: 0.02782 },\n    { letter: 'D', frequency: 0.04253 },\n    { letter: 'E', frequency: 0.12702 },\n    { letter: 'F', frequency: 0.02288 },\n    { letter: 'G', frequency: 0.02015 },\n    { letter: 'H', frequency: 0.06094 },\n    { letter: 'I', frequency: 0.06966 },\n    { letter: 'J', frequency: 0.00153 },\n    { letter: 'K', frequency: 0.00772 },\n    { letter: 'L', frequency: 0.04025 },\n    { letter: 'M', frequency: 0.02406 },\n    { letter: 'N', frequency: 0.06749 },\n    { letter: 'O', frequency: 0.07507 },\n    { letter: 'P', frequency: 0.01929 },\n    { letter: 'Q', frequency: 0.00095 },\n    { letter: 'R', frequency: 0.05987 },\n    { letter: 'S', frequency: 0.06327 },\n    { letter: 'T', frequency: 0.09056 },\n    { letter: 'U', frequency: 0.02758 },\n    { letter: 'V', frequency: 0.00978 },\n    { letter: 'W', frequency: 0.0236 },\n    { letter: 'X', frequency: 0.0015 },\n    { letter: 'Y', frequency: 0.01974 },\n    { letter: 'Z', frequency: 0.00074 },\n  ],\n  // Configure visual channels\n  encode: {\n    x: 'letter', // Configure x channel\n    y: 'frequency', // Configure y channel\n    shape: 'rect', // Configure shape channel, default is 'rect'. Options: 'rect', 'hollow', 'funnel', 'pyramid'\n  },\n  style: {\n    columnWidthRatio: 0.5, // Set bar width ratio to 0.5\n  },\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"For more examples, see ",paraId:2,tocIndex:0},{value:"Chart Examples - Bar",paraId:3,tocIndex:0},{value:", ",paraId:2,tocIndex:0},{value:"Chart Examples - Pie",paraId:4,tocIndex:0},{value:", and other pages.",paraId:2,tocIndex:0},{value:"Property",paraId:5,tocIndex:1},{value:"Description",paraId:5,tocIndex:1},{value:"Type",paraId:5,tocIndex:1},{value:"Default",paraId:5,tocIndex:1},{value:"Required",paraId:5,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"Configure the visual channels of the ",paraId:5,tocIndex:1},{value:"interval",paraId:5,tocIndex:1},{value:" mark, including ",paraId:5,tocIndex:1},{value:"x",paraId:5,tocIndex:1},{value:", ",paraId:5,tocIndex:1},{value:"y",paraId:5,tocIndex:1},{value:", ",paraId:5,tocIndex:1},{value:"color",paraId:5,tocIndex:1},{value:", ",paraId:5,tocIndex:1},{value:"shape",paraId:5,tocIndex:1},{value:", etc., to specify the relationship between visual element properties and data",paraId:5,tocIndex:1},{value:"encode",paraId:6,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"✓",paraId:5,tocIndex:1},{value:"coordinate",paraId:5,tocIndex:1},{value:"Configure the coordinate system for the ",paraId:5,tocIndex:1},{value:"interval",paraId:5,tocIndex:1},{value:" mark, which performs a series of point transformations to change the spatial display form of the mark",paraId:5,tocIndex:1},{value:"coordinate",paraId:7,tocIndex:1},{value:"{type: 'cartesian' }",paraId:5,tocIndex:1},{value:"style",paraId:5,tocIndex:1},{value:"Configure the graphic style of the ",paraId:5,tocIndex:1},{value:"interval",paraId:5,tocIndex:1},{value:" mark",paraId:5,tocIndex:1},{value:"style",paraId:8,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"Configure the visual channels of the ",paraId:9,tocIndex:2},{value:"interval",paraId:9,tocIndex:2},{value:" mark.",paraId:9,tocIndex:2},{value:"Property",paraId:10,tocIndex:2},{value:"Description",paraId:10,tocIndex:2},{value:"Type",paraId:10,tocIndex:2},{value:"Default",paraId:10,tocIndex:2},{value:"Required",paraId:10,tocIndex:2},{value:"x",paraId:10,tocIndex:2},{value:"Bind the ",paraId:10,tocIndex:2},{value:"x",paraId:10,tocIndex:2},{value:" property channel of the ",paraId:10,tocIndex:2},{value:"interval",paraId:10,tocIndex:2},{value:" mark, usually an ordered or unordered field from ",paraId:10,tocIndex:2},{value:"data",paraId:10,tocIndex:2},{value:". Can be empty when drawing pie charts",paraId:10,tocIndex:2},{value:"encode",paraId:11,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"✓",paraId:10,tocIndex:2},{value:"y",paraId:10,tocIndex:2},{value:"Bind the ",paraId:10,tocIndex:2},{value:"y",paraId:10,tocIndex:2},{value:" property channel of the ",paraId:10,tocIndex:2},{value:"interval",paraId:10,tocIndex:2},{value:" mark, usually a numeric or array field from ",paraId:10,tocIndex:2},{value:"data",paraId:10,tocIndex:2},{value:"encode",paraId:12,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"✓",paraId:10,tocIndex:2},{value:"color",paraId:10,tocIndex:2},{value:"Bind the ",paraId:10,tocIndex:2},{value:"color",paraId:10,tocIndex:2},{value:" property channel of the ",paraId:10,tocIndex:2},{value:"interval",paraId:10,tocIndex:2},{value:" mark. Mapping data fields to the color channel will group the data and split it into multiple shapes with different colors, commonly used for stacked bar charts, etc.",paraId:10,tocIndex:2},{value:"encode",paraId:13,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"series",paraId:10,tocIndex:2},{value:"Bind the ",paraId:10,tocIndex:2},{value:"series",paraId:10,tocIndex:2},{value:" property channel of the ",paraId:10,tocIndex:2},{value:"interval",paraId:10,tocIndex:2},{value:" mark to achieve grouping effects",paraId:10,tocIndex:2},{value:"encode",paraId:14,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"shape",paraId:10,tocIndex:2},{value:"Bind the ",paraId:10,tocIndex:2},{value:"shape",paraId:10,tocIndex:2},{value:" property channel of the ",paraId:10,tocIndex:2},{value:"interval",paraId:10,tocIndex:2},{value:" mark to change the drawing shape of the mark",paraId:10,tocIndex:2},{value:"rect",paraId:10,tocIndex:2},{value:" | ",paraId:10,tocIndex:2},{value:"hollow",paraId:10,tocIndex:2},{value:" | ",paraId:10,tocIndex:2},{value:"funnel",paraId:10,tocIndex:2},{value:" | ",paraId:10,tocIndex:2},{value:"pyramid",paraId:10,tocIndex:2},{value:"rect",paraId:10,tocIndex:2},{value:"The position visual channels of the ",paraId:15,tocIndex:3},{value:"interval",paraId:15,tocIndex:3},{value:" mark require values for both ",paraId:15,tocIndex:3},{value:"x",paraId:15,tocIndex:3},{value:" and ",paraId:15,tocIndex:3},{value:"y",paraId:15,tocIndex:3},{value:". Supported data formats are as follows:",paraId:15,tocIndex:3},{value:"Both ",paraId:16,tocIndex:3},{value:"x",paraId:16,tocIndex:3},{value:" and ",paraId:16,tocIndex:3},{value:"y",paraId:16,tocIndex:3},{value:" are numbers, for standard bar charts, rose charts, etc.",paraId:16,tocIndex:3},{value:'{\n  type: "interval",\n  data: [{ name: "Category 1", value: 100 }],\n  encode: { x: "name", y: "value" },\n}\n',paraId:17,tocIndex:3},{value:"x",paraId:18,tocIndex:3},{value:" is a number, ",paraId:18,tocIndex:3},{value:"y",paraId:18,tocIndex:3},{value:" is an array, for interval bar charts, interval rose charts, stacked bar charts, stacked rose charts, and symmetric bar charts (funnel charts).",paraId:18,tocIndex:3},{value:'{\n  type: "interval",\n  data: [{ name: \'Category 1\', value: [10, 100] },\n  { name: \'Category 2\', value: [20, 80] }],\n  encode: { x: "name", y: "value" },\n}\n',paraId:19,tocIndex:3},{value:"x",paraId:20,tocIndex:3},{value:" is empty, ",paraId:20,tocIndex:3},{value:"y",paraId:20,tocIndex:3},{value:" is a number. Generally used for pie chart data configuration, where the coordinate system is ",paraId:20,tocIndex:3},{value:"theta",paraId:20,tocIndex:3},{value:", and G2 internally fills in ",paraId:20,tocIndex:3},{value:"x",paraId:20,tocIndex:3},{value:" and ",paraId:20,tocIndex:3},{value:"y",paraId:20,tocIndex:3},{value:".",paraId:20,tocIndex:3},{value:'{\n  type: "interval",\n  data: [\n    { item: "Category 1", count: 40, },\n    { item: "Category 2", count: 21, },\n    { item: "Category 3", count: 17 },\n    { item: "Category 4", count: 13 },\n    { item: "Category 5", count: 9 },\n  ],\n  encode: { y: "count", color: "item" },\n  transform: [{ type: "stackY" }], // Configure stackY data transform so that the pie sector angle and value size correspond\n  coordinate: { type: "theta", }, // Configure theta coordinate system, a special polar coordinate system commonly used for pie charts\n}\n',paraId:21,tocIndex:3},{value:"x channel value",paraId:22,tocIndex:3},{value:"y channel value",paraId:22,tocIndex:3},{value:"Explanation",paraId:22,tocIndex:3},{value:"number",paraId:22,tocIndex:3},{value:"number",paraId:22,tocIndex:3},{value:"Standard bar chart, rose chart",paraId:22,tocIndex:3},{value:"number",paraId:22,tocIndex:3},{value:"array",paraId:22,tocIndex:3},{value:"Interval bar chart, interval rose chart, stacked bar chart, stacked rose chart, funnel chart",paraId:22,tocIndex:3},{value:"empty",paraId:22,tocIndex:3},{value:"number",paraId:22,tocIndex:3},{value:"Pie chart",paraId:22,tocIndex:3},{value:"The ",paraId:23,tocIndex:4},{value:"color",paraId:23,tocIndex:4},{value:" visual channel affects the fill color of the ",paraId:23,tocIndex:4},{value:"interval",paraId:23,tocIndex:4},{value:" mark. When applied to interval charts, it usually maps to a categorical field and groups the data.",paraId:23,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { name: 'London', month: 'Jan.', rainfall: 18.9 },\n    { name: 'London', month: 'Feb.', rainfall: 28.8 },\n    { name: 'London', month: 'Mar.', rainfall: 39.3 },\n    { name: 'London', month: 'Apr.', rainfall: 81.4 },\n    { name: 'London', month: 'May', rainfall: 47 },\n    { name: 'London', month: 'Jun.', rainfall: 20.3 },\n    { name: 'London', month: 'Jul.', rainfall: 24 },\n    { name: 'London', month: 'Aug.', rainfall: 35.6 },\n    { name: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n    { name: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n    { name: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n    { name: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n    { name: 'Berlin', month: 'May', rainfall: 52.6 },\n    { name: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n    { name: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n    { name: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n  ],\n  encode: {\n    x: 'month',\n    y: 'rainfall',\n    color: 'name', // Configure color channel to group data\n  },\n});\n\nchart.render();\n",paraId:24,tocIndex:4},{value:"In some special cases, it can also be mapped to a continuous field, using different colors for different value ranges:",paraId:25,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { name: 'a1', value: 50 },\n    { name: 'a2', value: 60 },\n    { name: 'a3', value: 40 },\n  ],\n  encode: {\n    x: 'name',\n    y: 'value',\n    // The color channel can also accept a callback function to return different values based on conditions\n    color: (d) => (d.value > 50 ? 'high' : 'low'),\n  },\n});\n\nchart.render();\n",paraId:26,tocIndex:4},{value:"Configuring the ",paraId:27,tocIndex:4},{value:"stackY",paraId:28,tocIndex:4},{value:" transform allows stacking of grouped areas, forming a stacked area chart and avoiding information loss due to overlap:",paraId:27,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { name: 'London', month: 'Jan.', rainfall: 18.9 },\n    { name: 'London', month: 'Feb.', rainfall: 28.8 },\n    { name: 'London', month: 'Mar.', rainfall: 39.3 },\n    { name: 'London', month: 'Apr.', rainfall: 81.4 },\n    { name: 'London', month: 'May', rainfall: 47 },\n    { name: 'London', month: 'Jun.', rainfall: 20.3 },\n    { name: 'London', month: 'Jul.', rainfall: 24 },\n    { name: 'London', month: 'Aug.', rainfall: 35.6 },\n    { name: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n    { name: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n    { name: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n    { name: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n    { name: 'Berlin', month: 'May', rainfall: 52.6 },\n    { name: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n    { name: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n    { name: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n  ],\n  // Configure visual channels\n  encode: { x: 'month', y: 'rainfall', color: 'name' },\n  transform: [{ type: 'stackY' }], // Stack y and y1 channels for each group to achieve stacking effect\n});\n\nchart.render();\n",paraId:29,tocIndex:4},{value:"The ",paraId:30,tocIndex:5},{value:"series",paraId:30,tocIndex:5},{value:" visual channel divides the data of the ",paraId:30,tocIndex:5},{value:"interval",paraId:30,tocIndex:5},{value:" mark into multiple series. It is usually configured together with the ",paraId:30,tocIndex:5},{value:"color",paraId:30,tocIndex:5},{value:" channel, or you can configure the ",paraId:30,tocIndex:5},{value:"dodgeX",paraId:31,tocIndex:5},{value:" transform to generate ",paraId:30,tocIndex:5},{value:"series",paraId:30,tocIndex:5},{value:" channel values from the ",paraId:30,tocIndex:5},{value:"color",paraId:30,tocIndex:5},{value:" channel, achieving grouping effects based on the ",paraId:30,tocIndex:5},{value:"series",paraId:30,tocIndex:5},{value:" channel:",paraId:30,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { name: 'London', month: 'Jan.', rainfall: 18.9 },\n    { name: 'London', month: 'Feb.', rainfall: 28.8 },\n    { name: 'London', month: 'Mar.', rainfall: 39.3 },\n    { name: 'London', month: 'Apr.', rainfall: 81.4 },\n    { name: 'London', month: 'May', rainfall: 47 },\n    { name: 'London', month: 'Jun.', rainfall: 20.3 },\n    { name: 'London', month: 'Jul.', rainfall: 24 },\n    { name: 'London', month: 'Aug.', rainfall: 35.6 },\n    { name: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n    { name: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n    { name: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n    { name: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n    { name: 'Berlin', month: 'May', rainfall: 52.6 },\n    { name: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n    { name: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n    { name: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n  ],\n  // Configure visual channels\n  encode: {\n    x: 'month',\n    y: 'rainfall',\n    color: 'name', // Configure color channel to group data\n    series: 'name', // Configure series channel to divide data into different series\n  },\n  // transform: [{ type: 'dodgeX' }], // Generate series channel values from color channel, achieving grouping effects based on the series channel\n});\n\nchart.render();\n",paraId:32,tocIndex:5},{value:"The supported shapes for the ",paraId:33,tocIndex:6},{value:"interval",paraId:33,tocIndex:6},{value:" mark are as follows:",paraId:33,tocIndex:6},{value:"Shape",paraId:34,tocIndex:6},{value:"Description",paraId:34,tocIndex:6},{value:"Example",paraId:34,tocIndex:6},{value:"rect",paraId:34,tocIndex:6},{value:"Draw filled rectangle",paraId:34,tocIndex:6},{value:"hollow",paraId:34,tocIndex:6},{value:"Draw hollow rectangle",paraId:34,tocIndex:6},{value:"funnel",paraId:34,tocIndex:6},{value:"Draw funnel shape",paraId:34,tocIndex:6},{value:"pyramid",paraId:34,tocIndex:6},{value:"Draw pyramid shape",paraId:34,tocIndex:6},{value:"The display of the ",paraId:35,tocIndex:7},{value:"interval",paraId:35,tocIndex:7},{value:" mark varies under different coordinate systems. By changing the coordinate system or applying coordinate transforms, you can draw bar charts, column charts, rose charts, pie charts, and more.",paraId:35,tocIndex:7},{value:"Coordinate System or Transform",paraId:36,tocIndex:7},{value:"Coordinate System Configuration",paraId:36,tocIndex:7},{value:"Chart Type",paraId:36,tocIndex:7},{value:"Cartesian",paraId:36,tocIndex:7},{value:"{ type: 'cartesian' }",paraId:36,tocIndex:7},{value:"Bar, histogram, etc.",paraId:36,tocIndex:7},{value:"transpose transform",paraId:36,tocIndex:7},{value:"{ transform: [{ type: 'transpose' }] }",paraId:36,tocIndex:7},{value:"Column, etc.",paraId:36,tocIndex:7},{value:"Polar",paraId:36,tocIndex:7},{value:"{ type: 'polar' }",paraId:36,tocIndex:7},{value:"Rose, etc.",paraId:36,tocIndex:7},{value:"Theta",paraId:36,tocIndex:7},{value:"{ type: 'theta' }",paraId:36,tocIndex:7},{value:"Pie, donut, etc.",paraId:36,tocIndex:7},{value:"Radial",paraId:36,tocIndex:7},{value:"{ type: 'radial' }",paraId:36,tocIndex:7},{value:"Radial, etc.",paraId:36,tocIndex:7},{value:"After applying the ",paraId:37,tocIndex:7},{value:"transpose transform",paraId:37,tocIndex:7},{value:", the interval chart appears as a column chart.",paraId:37,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { item: 'Category 1', count: 40 },\n    { item: 'Category 2', count: 21 },\n    { item: 'Category 3', count: 17 },\n    { item: 'Category 4', count: 13 },\n    { item: 'Category 5', count: 9 },\n  ],\n  encode: { x: 'item', y: 'count' },\n  coordinate: {\n    transform: [{ type: 'transpose' }], // Configure transpose transform\n  },\n});\n\nchart.render();\n",paraId:38,tocIndex:7},{value:"Under the ",paraId:39,tocIndex:7},{value:"polar coordinate system",paraId:39,tocIndex:7},{value:", the interval chart appears as a rose chart, using radius to compare data size.",paraId:39,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/87b2ff47-2a33-4509-869c-dae4cdd81163.csv',\n  },\n  encode: { x: 'year', color: 'year', y: 'people' },\n  transform: [{ type: 'groupX', y: 'sum' }], // Group discrete x channel and sum\n  coordinate: {\n    type: 'polar', // Set coordinate system to polar for rose chart\n  },\n  axis: false, // Hide axis\n});\n\nchart.render();\n",paraId:40,tocIndex:7},{value:"Under the ",paraId:41,tocIndex:7},{value:"theta coordinate system",paraId:41,tocIndex:7},{value:", the interval chart appears as a pie chart, using arc size to compare data size.",paraId:41,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { item: 'Category 1', count: 40 },\n    { item: 'Category 2', count: 21 },\n    { item: 'Category 3', count: 17 },\n    { item: 'Category 4', count: 13 },\n    { item: 'Category 5', count: 9 },\n  ],\n  encode: { y: 'count', color: 'item' },\n  transform: [{ type: 'stackY' }], // Configure stackY data transform so that the pie sector angle and value size correspond\n  coordinate: {\n    type: 'theta', // Set coordinate system to theta, a special polar coordinate system for pie charts\n    outerRadius: 0.8, // Polar coordinate radius, range 0-1\n  },\n});\n\nchart.render();\n",paraId:42,tocIndex:7},{value:"Under the ",paraId:43,tocIndex:7},{value:"radial coordinate system",paraId:43,tocIndex:7},{value:", the interval chart appears as a radial chart, also using arcs to compare data size.",paraId:43,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { question: 'Question 1', percent: 0.21 },\n    { question: 'Question 2', percent: 0.4 },\n    { question: 'Question 3', percent: 0.49 },\n    { question: 'Question 4', percent: 0.52 },\n    { question: 'Question 5', percent: 0.53 },\n    { question: 'Question 6', percent: 0.84 },\n    { question: 'Question 7', percent: 1 },\n    { question: 'Question 8', percent: 1.2 },\n  ],\n  encode: { x: 'question', y: 'percent', color: 'percent' },\n  scale: { color: { range: ['#BAE7FF', '#1890FF'] } }, // Configure color scale for smooth color transition in radial chart\n  coordinate: {\n    type: 'radial', // Set coordinate system to radial, a special polar coordinate system for radial charts\n    innerRadius: 0.1, // Inner radius, range 0-1\n    endAngle: 3.141592653589793, // End angle in radians\n  },\n  animate: { enter: { type: 'waveIn', duration: 800 } }, // Configure enter animation\n  axis: { y: { tickFilter: (d, i) => i !== 0 } }, // Filter y axis ticks, hide 0 tick\n});\n\nchart.render();\n",paraId:44,tocIndex:7},{value:"Configure the style of the ",paraId:45,tocIndex:8},{value:"interval",paraId:45,tocIndex:8},{value:" mark.",paraId:45,tocIndex:8},{value:"Property",paraId:46,tocIndex:8},{value:"Description",paraId:46,tocIndex:8},{value:"Type",paraId:46,tocIndex:8},{value:"Default",paraId:46,tocIndex:8},{value:"Required",paraId:46,tocIndex:8},{value:"columnWidthRatio",paraId:46,tocIndex:8},{value:"Set the bar width ratio, range ",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:" - ",paraId:46,tocIndex:8},{value:"1",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0.9",paraId:46,tocIndex:8},{value:"minWidth",paraId:46,tocIndex:8},{value:"Minimum width of the interval bar, in pixels",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"- Infinity",paraId:46,tocIndex:8},{value:"maxWidth",paraId:46,tocIndex:8},{value:"Maximum width of the interval bar, in pixels",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"Infinity",paraId:46,tocIndex:8},{value:"minHeight",paraId:46,tocIndex:8},{value:"Minimum height of the interval bar, in pixels",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"- Infinity",paraId:46,tocIndex:8},{value:"radius",paraId:46,tocIndex:8},{value:"Border radius for all four corners of the outer rectangle",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"radiusTopLeft",paraId:46,tocIndex:8},{value:"Top-left corner radius",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"radiusTopRight",paraId:46,tocIndex:8},{value:"Top-right corner radius",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"radiusBottomRight",paraId:46,tocIndex:8},{value:"Bottom-right corner radius",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"radiusBottomLeft",paraId:46,tocIndex:8},{value:"Bottom-left corner radius",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"innerRadius",paraId:46,tocIndex:8},{value:"Border radius for all four corners of the inner rectangle",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"innerRadiusTopLeft",paraId:46,tocIndex:8},{value:"Top-left corner radius of the inner rectangle",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"innerRadiusTopRight",paraId:46,tocIndex:8},{value:"Top-right corner radius of the inner rectangle",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"innerRadiusBottomRight",paraId:46,tocIndex:8},{value:"Bottom-right corner radius of the inner rectangle",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"innerRadiusBottomLeft",paraId:46,tocIndex:8},{value:"Bottom-left corner radius of the inner rectangle",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"inset",paraId:46,tocIndex:8},{value:"Inset padding for all four directions of the rectangle",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"insetLeft",paraId:46,tocIndex:8},{value:"Left inset padding",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"insetRight",paraId:46,tocIndex:8},{value:"Right inset padding",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"insetBottom",paraId:46,tocIndex:8},{value:"Bottom inset padding",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"insetTop",paraId:46,tocIndex:8},{value:"Top inset padding",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0",paraId:46,tocIndex:8},{value:"fill",paraId:46,tocIndex:8},{value:"Fill color of the graphic",paraId:46,tocIndex:8},{value:"string | (d, index, data, column) => string",paraId:46,tocIndex:8},{value:"'' (when ",paraId:46,tocIndex:8},{value:"hollow",paraId:46,tocIndex:8},{value:")",paraId:46,tocIndex:8},{value:"fillOpacity",paraId:46,tocIndex:8},{value:"Fill opacity of the graphic",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"0.95 (when ",paraId:46,tocIndex:8},{value:"rect",paraId:46,tocIndex:8},{value:")",paraId:46,tocIndex:8},{value:"stroke",paraId:46,tocIndex:8},{value:"Stroke of the graphic",paraId:46,tocIndex:8},{value:"string | (d, index, data, column) => string",paraId:46,tocIndex:8},{value:"-",paraId:46,tocIndex:8},{value:"strokeOpacity",paraId:46,tocIndex:8},{value:"Stroke opacity",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"1 (when ",paraId:46,tocIndex:8},{value:"hollow",paraId:46,tocIndex:8},{value:")",paraId:46,tocIndex:8},{value:"lineWidth",paraId:46,tocIndex:8},{value:"Width of the graphic stroke",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"2 (when ",paraId:46,tocIndex:8},{value:"hollow",paraId:46,tocIndex:8},{value:")",paraId:46,tocIndex:8},{value:"lineDash",paraId:46,tocIndex:8},{value:"Dashed stroke configuration. The first value is the length of each dash segment, the second value is the distance between segments. Setting lineDash to [0, 0] results in no stroke.",paraId:46,tocIndex:8},{value:"[number,number] | (d, index, data, column) => [number , number]",paraId:46,tocIndex:8},{value:"-",paraId:46,tocIndex:8},{value:"opacity",paraId:46,tocIndex:8},{value:"Overall opacity of the graphic",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"-",paraId:46,tocIndex:8},{value:"shadowColor",paraId:46,tocIndex:8},{value:"Shadow color of the graphic",paraId:46,tocIndex:8},{value:"string | (d, index, data, column) => string",paraId:46,tocIndex:8},{value:"-",paraId:46,tocIndex:8},{value:"shadowBlur",paraId:46,tocIndex:8},{value:"Gaussian blur coefficient of the graphic shadow",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"-",paraId:46,tocIndex:8},{value:"shadowOffsetX",paraId:46,tocIndex:8},{value:"Horizontal distance of the shadow from the graphic",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"-",paraId:46,tocIndex:8},{value:"shadowOffsetY",paraId:46,tocIndex:8},{value:"Vertical distance of the shadow from the graphic",paraId:46,tocIndex:8},{value:"number | (d, index, data, column) => number",paraId:46,tocIndex:8},{value:"-",paraId:46,tocIndex:8},{value:"cursor",paraId:46,tocIndex:8},{value:"Mouse cursor style. Same as CSS cursor style.",paraId:46,tocIndex:8},{value:"string | (d, index, data, column) => string",paraId:46,tocIndex:8},{value:"default",paraId:46,tocIndex:8},{value:"Try it out:",paraId:47,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', height: 350 });\n\nchart.options({\n  type: 'interval',\n  data: [\n    { name: 'London', 月份: 'Jan.', 月均降雨量: 18.9 },\n    { name: 'London', 月份: 'Feb.', 月均降雨量: 28.8 },\n    { name: 'London', 月份: 'Mar.', 月均降雨量: 39.3 },\n    { name: 'London', 月份: 'Apr.', 月均降雨量: 81.4 },\n    { name: 'London', 月份: 'May', 月均降雨量: 47 },\n    { name: 'London', 月份: 'Jun.', 月均降雨量: 20.3 },\n    { name: 'London', 月份: 'Jul.', 月均降雨量: 24 },\n    { name: 'London', 月份: 'Aug.', 月均降雨量: 35.6 },\n    { name: 'Berlin', 月份: 'Jan.', 月均降雨量: 12.4 },\n    { name: 'Berlin', 月份: 'Feb.', 月均降雨量: 23.2 },\n    { name: 'Berlin', 月份: 'Mar.', 月均降雨量: 34.5 },\n    { name: 'Berlin', 月份: 'Apr.', 月均降雨量: 99.7 },\n    { name: 'Berlin', 月份: 'May', 月均降雨量: 52.6 },\n    { name: 'Berlin', 月份: 'Jun.', 月均降雨量: 35.5 },\n    { name: 'Berlin', 月份: 'Jul.', 月均降雨量: 37.4 },\n    { name: 'Berlin', 月份: 'Aug.', 月均降雨量: 42.4 },\n  ],\n  encode: { x: '月份', y: '月均降雨量', color: 'name' },\n  transform: [{ type: 'stackY' }],\n  style: {\n    minHeight: 20,\n    columnWidthRatio: 0.5,\n    radiusTopLeft: 20,\n    radiusTopRight: 20,\n    insetBottom: 5,\n    // 绘图属性\n    fill: (d) => (d.name === 'London' ? '#688FD4' : '#55BECC'), // 绘图属性也可以是一个回调函数\n    fillOpacity: 0.9,\n    stroke: '#fff',\n    lineWidth: 1,\n    lineDash: [4, 5],\n    strokeOpacity: 0.5,\n    opacity: 1,\n    shadowColor: '#BABBBD',\n    shadowBlur: 10,\n    shadowOffsetX: 5,\n    shadowOffsetY: 5,\n    cursor: 'pointer',\n  },\n});\n\nchart.render();\n",paraId:48,tocIndex:8},{value:"How to draw a symmetric bar chart?",paraId:49,tocIndex:9},{value:"When configuring the ",paraId:50,tocIndex:9},{value:"y",paraId:50,tocIndex:9},{value:" channel, return a callback function to distinguish positive and negative values based on a categorical field.",paraId:50,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { age: 0, sex: 1, people: 9735380 },\n    { age: 0, sex: 2, people: 9310714 },\n    { age: 5, sex: 1, people: 10552146 },\n    { age: 5, sex: 2, people: 10069564 },\n    { age: 10, sex: 1, people: 10563233 },\n    { age: 10, sex: 2, people: 10022524 },\n    { age: 15, sex: 1, people: 10237419 },\n    { age: 15, sex: 2, people: 9692669 },\n    { age: 20, sex: 1, people: 9731315 },\n    { age: 20, sex: 2, people: 9324244 },\n    { age: 25, sex: 1, people: 9659493 },\n    { age: 25, sex: 2, people: 9518507 },\n    { age: 30, sex: 1, people: 10205879 },\n    { age: 30, sex: 2, people: 10119296 },\n    { age: 35, sex: 1, people: 11475182 },\n    { age: 35, sex: 2, people: 11635647 },\n    { age: 40, sex: 1, people: 11320252 },\n    { age: 40, sex: 2, people: 11488578 },\n    { age: 45, sex: 1, people: 9925006 },\n    { age: 45, sex: 2, people: 10261253 },\n    { age: 50, sex: 1, people: 8507934 },\n    { age: 50, sex: 2, people: 8911133 },\n    { age: 55, sex: 1, people: 6459082 },\n    { age: 55, sex: 2, people: 6921268 },\n    { age: 60, sex: 1, people: 5123399 },\n    { age: 60, sex: 2, people: 5668961 },\n    { age: 65, sex: 1, people: 4453623 },\n    { age: 65, sex: 2, people: 4804784 },\n    { age: 70, sex: 1, people: 3792145 },\n    { age: 70, sex: 2, people: 5184855 },\n    { age: 75, sex: 1, people: 2912655 },\n    { age: 75, sex: 2, people: 4355644 },\n    { age: 80, sex: 1, people: 1902638 },\n    { age: 80, sex: 2, people: 3221898 },\n    { age: 85, sex: 1, people: 970357 },\n    { age: 85, sex: 2, people: 1981156 },\n    { age: 90, sex: 1, people: 336303 },\n    { age: 90, sex: 2, people: 1064581 },\n  ],\n  encode: {\n    x: 'age',\n    y: (d) => (d.sex === 1 ? -d.people : d.people),\n    color: 'sex',\n  },\n  scale: {\n    color: { type: 'ordinal' }, // Map color channel to an ordered discrete range, usually for categorical data\n    x: { range: [1, 0] }, // Reverse the x channel scale range\n  },\n  coordinate: { transform: [{ type: 'transpose' }] }, // Configure coordinate transpose to draw a column chart\n  axis: { y: { labelFormatter: '~s' } }, // Configure y-axis tick label formatting\n  legend: { color: { labelFormatter: (d) => (d === 1 ? 'Male' : 'Female') } }, // Configure color channel legend label formatting\n  tooltip: {\n    items: [\n      (d) => ({\n        value: d.people,\n        name: d.sex === 1 ? 'Male' : 'Female',\n      }),\n    ],\n  }, // Configure tooltip items\n});\n\nchart.render();\n",paraId:51,tocIndex:9}]},65079:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(82760);const t=[{value:"The line chart (",paraId:0,tocIndex:0},{value:"line",paraId:0,tocIndex:0},{value:") mark draws lines connecting a series of points to display data changes across an ordered dimension. It's commonly used to create line charts and is one of the most frequently used ",paraId:0,tocIndex:0},{value:"Mark",paraId:0,tocIndex:0},{value:" types.",paraId:0,tocIndex:0},{value:"Line charts are used to analyze how things change over time or ordered categories. With multiple data groups, they analyze the interaction and influence of multiple data groups over time or ordered categories. The direction of the line indicates positive/negative changes, while the slope indicates the degree of change.",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  width: 900,\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  },\n  encode: { x: 'date', y: 'close' },\n});\n\nchart.render();\n",paraId:2,tocIndex:1},{value:"For more examples, check out the ",paraId:3,tocIndex:1},{value:"Chart Examples - Line Charts",paraId:4,tocIndex:1},{value:" page.",paraId:3,tocIndex:1},{value:"Property",paraId:5,tocIndex:2},{value:"Description",paraId:5,tocIndex:2},{value:"Type",paraId:5,tocIndex:2},{value:"Default Value",paraId:5,tocIndex:2},{value:"Required",paraId:5,tocIndex:2},{value:"encode",paraId:5,tocIndex:2},{value:"Configure visual channels for ",paraId:5,tocIndex:2},{value:"line",paraId:5,tocIndex:2},{value:" mark, including ",paraId:5,tocIndex:2},{value:"x",paraId:5,tocIndex:2},{value:", ",paraId:5,tocIndex:2},{value:"y",paraId:5,tocIndex:2},{value:", ",paraId:5,tocIndex:2},{value:"color",paraId:5,tocIndex:2},{value:", ",paraId:5,tocIndex:2},{value:"shape",paraId:5,tocIndex:2},{value:", ",paraId:5,tocIndex:2},{value:"size",paraId:5,tocIndex:2},{value:", etc., to specify relationships between visual elements and data",paraId:5,tocIndex:2},{value:"encode",paraId:6,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"✓",paraId:5,tocIndex:2},{value:"coordinate",paraId:5,tocIndex:2},{value:"Configure coordinate system for ",paraId:5,tocIndex:2},{value:"line",paraId:5,tocIndex:2},{value:" mark, which performs a series of point transformations to change the spatial display form of the mark",paraId:5,tocIndex:2},{value:"coordinate",paraId:7,tocIndex:2},{value:"{type: 'cartesian' }",paraId:5,tocIndex:2},{value:"style",paraId:5,tocIndex:2},{value:"Configure graphic styles for ",paraId:5,tocIndex:2},{value:"line",paraId:5,tocIndex:2},{value:" mark",paraId:5,tocIndex:2},{value:"style",paraId:8,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"Configure visual channels for the ",paraId:9,tocIndex:3},{value:"line",paraId:9,tocIndex:3},{value:" mark.",paraId:9,tocIndex:3},{value:"Property",paraId:10,tocIndex:3},{value:"Description",paraId:10,tocIndex:3},{value:"Type",paraId:10,tocIndex:3},{value:"Default Value",paraId:10,tocIndex:3},{value:"Required",paraId:10,tocIndex:3},{value:"x",paraId:10,tocIndex:3},{value:"Bind the ",paraId:10,tocIndex:3},{value:"x",paraId:10,tocIndex:3},{value:" property channel for ",paraId:10,tocIndex:3},{value:"line",paraId:10,tocIndex:3},{value:" mark, typically a time or ordered categorical field from ",paraId:10,tocIndex:3},{value:"data",paraId:10,tocIndex:3},{value:"encode",paraId:11,tocIndex:3},{value:"-",paraId:10,tocIndex:3},{value:"✓",paraId:10,tocIndex:3},{value:"y",paraId:10,tocIndex:3},{value:"Bind the ",paraId:10,tocIndex:3},{value:"y",paraId:10,tocIndex:3},{value:" property channel for ",paraId:10,tocIndex:3},{value:"line",paraId:10,tocIndex:3},{value:" mark, typically a numerical field from ",paraId:10,tocIndex:3},{value:"data",paraId:10,tocIndex:3},{value:"encode",paraId:12,tocIndex:3},{value:"-",paraId:10,tocIndex:3},{value:"✓",paraId:10,tocIndex:3},{value:"color",paraId:10,tocIndex:3},{value:"Bind the ",paraId:10,tocIndex:3},{value:"color",paraId:10,tocIndex:3},{value:" property channel for ",paraId:10,tocIndex:3},{value:"line",paraId:10,tocIndex:3},{value:" mark. When mapping data fields to color channel, data is grouped and split into multiple lines with different colors for multi-line charts, or split into multi-colored line segments",paraId:10,tocIndex:3},{value:"encode",paraId:13,tocIndex:3},{value:"-",paraId:10,tocIndex:3},{value:"series",paraId:10,tocIndex:3},{value:"Bind the ",paraId:10,tocIndex:3},{value:"series",paraId:10,tocIndex:3},{value:" property channel for ",paraId:10,tocIndex:3},{value:"line",paraId:10,tocIndex:3},{value:" mark, implementing series line charts based on the series channel",paraId:10,tocIndex:3},{value:"encode",paraId:14,tocIndex:3},{value:"-",paraId:10,tocIndex:3},{value:"shape",paraId:10,tocIndex:3},{value:"Bind the ",paraId:10,tocIndex:3},{value:"shape",paraId:10,tocIndex:3},{value:" property channel for ",paraId:10,tocIndex:3},{value:"line",paraId:10,tocIndex:3},{value:" mark, changing the drawing shape of the graphic mark",paraId:10,tocIndex:3},{value:"line",paraId:10,tocIndex:3},{value:" | ",paraId:10,tocIndex:3},{value:"smooth",paraId:10,tocIndex:3},{value:" | ",paraId:10,tocIndex:3},{value:"vh",paraId:10,tocIndex:3},{value:" | ",paraId:10,tocIndex:3},{value:"hv",paraId:10,tocIndex:3},{value:" | ",paraId:10,tocIndex:3},{value:"hvh",paraId:10,tocIndex:3},{value:" | ",paraId:10,tocIndex:3},{value:"trail",paraId:10,tocIndex:3},{value:"line",paraId:10,tocIndex:3},{value:"size",paraId:10,tocIndex:3},{value:"Bind the ",paraId:10,tocIndex:3},{value:"size",paraId:10,tocIndex:3},{value:" property channel for ",paraId:10,tocIndex:3},{value:"line",paraId:10,tocIndex:3},{value:" mark, changing the size of the graphic mark. For lines, the ",paraId:10,tocIndex:3},{value:"size",paraId:10,tocIndex:3},{value:" visual channel maps to line width",paraId:10,tocIndex:3},{value:"encode",paraId:15,tocIndex:3},{value:"-",paraId:10,tocIndex:3},{value:"The ",paraId:16,tocIndex:4},{value:"color",paraId:16,tocIndex:4},{value:" visual channel affects the fill color of the ",paraId:16,tocIndex:4},{value:"line",paraId:16,tocIndex:4},{value:" graphic mark. When applied to line charts, it generally maps categorical fields to group data.",paraId:16,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  data: [\n    { name: 'London', month: 'Jan.', rainfall: 18.9 },\n    { name: 'London', month: 'Feb.', rainfall: 28.8 },\n    { name: 'London', month: 'Mar.', rainfall: 39.3 },\n    { name: 'London', month: 'Apr.', rainfall: 81.4 },\n    { name: 'London', month: 'May', rainfall: 47 },\n    { name: 'London', month: 'Jun.', rainfall: 20.3 },\n    { name: 'London', month: 'Jul.', rainfall: 24 },\n    { name: 'London', month: 'Aug.', rainfall: 35.6 },\n    { name: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n    { name: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n    { name: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n    { name: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n    { name: 'Berlin', month: 'May', rainfall: 52.6 },\n    { name: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n    { name: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n    { name: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n  ],\n  encode: {\n    x: 'month',\n    y: 'rainfall',\n    color: 'name', // Configure color channel to group data\n  },\n});\n\nchart.render();\n",paraId:17,tocIndex:4},{value:"In some special cases, it can also map to continuous fields, using different colors for graphics corresponding to different value ranges:",paraId:18,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  data: [\n    { year: '2000', value: 50 },\n    { year: '2001', value: 52 },\n    { year: '2002', value: 40 },\n    { year: '2003', value: 70 },\n    { year: '2004', value: 60 },\n    { year: '2005', value: 80 },\n    { year: '2006', value: 88 },\n    { year: '2007', value: 86 },\n    { year: '2008', value: 90 },\n    { year: '2009', value: 78 },\n    { year: '2010', value: 110 },\n    { year: '2011', value: 115 },\n  ],\n  encode: {\n    x: 'year',\n    y: 'value',\n    color: 'value',\n  },\n  scale: {\n    y: { nice: true },\n    color: { palette: 'turbo' },\n  },\n  style: {\n    gradient: 'y', // Gradient direction\n    lineWidth: 2,\n    lineJoin: 'bevel', // Connection style\n  },\n});\n\nchart.render();\n",paraId:19,tocIndex:4},{value:"The ",paraId:20,tocIndex:5},{value:"series",paraId:20,tocIndex:5},{value:" visual channel groups data to draw series line charts.",paraId:20,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  data: [\n    { name: 'London', month: 'Jan.', rainfall: 18.9 },\n    { name: 'London', month: 'Feb.', rainfall: 28.8 },\n    { name: 'London', month: 'Mar.', rainfall: 39.3 },\n    { name: 'London', month: 'Apr.', rainfall: 81.4 },\n    { name: 'London', month: 'May', rainfall: 47 },\n    { name: 'London', month: 'Jun.', rainfall: 20.3 },\n    { name: 'London', month: 'Jul.', rainfall: 24 },\n    { name: 'London', month: 'Aug.', rainfall: 35.6 },\n    { name: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n    { name: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n    { name: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n    { name: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n    { name: 'Berlin', month: 'May', rainfall: 52.6 },\n    { name: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n    { name: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n    { name: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n    { name: 'Paris', month: 'Jan.', rainfall: 14.4 },\n    { name: 'Paris', month: 'Feb.', rainfall: 26.2 },\n    { name: 'Paris', month: 'Mar.', rainfall: 37.5 },\n    { name: 'Paris', month: 'Apr.', rainfall: 120.7 },\n    { name: 'Paris', month: 'May', rainfall: 56.6 },\n    { name: 'Paris', month: 'Jun.', rainfall: 45.5 },\n    { name: 'Paris', month: 'Jul.', rainfall: 47.4 },\n    { name: 'Paris', month: 'Aug.', rainfall: 62.4 },\n  ],\n  encode: { x: 'month', y: 'rainfall', series: 'name', shape: 'smooth' },\n});\n\nchart.render();\n",paraId:21,tocIndex:5},{value:"The supported shapes for ",paraId:22,tocIndex:6},{value:"line",paraId:22,tocIndex:6},{value:" mark are:",paraId:22,tocIndex:6},{value:"Shape",paraId:23,tocIndex:6},{value:"Description",paraId:23,tocIndex:6},{value:"line",paraId:23,tocIndex:6},{value:"Draw straight line connections",paraId:23,tocIndex:6},{value:"smooth",paraId:23,tocIndex:6},{value:"Draw smooth curve connections",paraId:23,tocIndex:6},{value:"vh",paraId:23,tocIndex:6},{value:"Draw step line chart, vertical line first then horizontal line connection",paraId:23,tocIndex:6},{value:"hv",paraId:23,tocIndex:6},{value:"Draw step line chart, horizontal line first then vertical line connection",paraId:23,tocIndex:6},{value:"hvh",paraId:23,tocIndex:6},{value:"Draw step line chart, vertical-horizontal-vertical, midpoint connection",paraId:23,tocIndex:6},{value:"trail",paraId:23,tocIndex:6},{value:"Draw trail, similar to a brush stroke, used to draw lines with varying thickness when ",paraId:23,tocIndex:6},{value:"size",paraId:23,tocIndex:6},{value:" channel is configured",paraId:23,tocIndex:6},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\nconst shapeList = ['line', 'smooth', 'trail', 'vh', 'hv', 'hvh'];\nconst shapeMap = shapeList.map((p) => {\n  return {\n    label: p,\n    value: p,\n  };\n});\n\nchart.options({\n  type: 'line',\n  data: [\n    { name: 'London', month: 'Jan.', rainfall: 18.9 },\n    { name: 'London', month: 'Feb.', rainfall: 28.8 },\n    { name: 'London', month: 'Mar.', rainfall: 39.3 },\n    { name: 'London', month: 'Apr.', rainfall: 81.4 },\n    { name: 'London', month: 'May', rainfall: 47 },\n    { name: 'London', month: 'Jun.', rainfall: 20.3 },\n    { name: 'London', month: 'Jul.', rainfall: 24 },\n    { name: 'London', month: 'Aug.', rainfall: 35.6 },\n    { name: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n    { name: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n    { name: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n    { name: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n    { name: 'Berlin', month: 'May', rainfall: 52.6 },\n    { name: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n    { name: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n    { name: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n  ],\n  encode: { x: 'month', y: 'rainfall', color: 'name', size: 'rainfall' },\n});\n\nconst handleSetShape = (shape) => {\n  chart.options({\n    encode: {\n      x: 'month',\n      y: 'rainfall',\n      color: 'name',\n      size: 'rainfall',\n      shape,\n    },\n  });\n  chart.render(); // Re-render chart\n};\n\n// Insert Shape selector\nconst selectorContainer = document.createElement('div');\nselectorContainer.textContent = 'Select line shape ';\nconst selector = document.createElement('select');\nselector.innerHTML = shapeMap.map(\n  (shape, index) =>\n    `<option value=\"${shape.value}\" ${index === 0 ? 'selected' : ''}>${\n      shape.label\n    }</option>`,\n);\nselector.onchange = (e) => {\n  handleSetShape(e.target.value);\n};\nselectorContainer.appendChild(selector);\ncontainer.insertBefore(selectorContainer, container.childNodes[0]);\n\nchart.render();\n",paraId:24,tocIndex:6},{value:"Bind the ",paraId:25,tocIndex:7},{value:"size",paraId:25,tocIndex:7},{value:" property channel for ",paraId:25,tocIndex:7},{value:"line",paraId:25,tocIndex:7},{value:" mark to change the size of the graphic mark. For lines, the ",paraId:25,tocIndex:7},{value:"size",paraId:25,tocIndex:7},{value:" visual channel maps to line width, typically used together with the ",paraId:25,tocIndex:7},{value:"trail",paraId:25,tocIndex:7},{value:" shape in the ",paraId:25,tocIndex:7},{value:"shape",paraId:25,tocIndex:7},{value:" channel.",paraId:25,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  data: [\n    { name: 'London', month: 'Jan.', rainfall: 18.9 },\n    { name: 'London', month: 'Feb.', rainfall: 28.8 },\n    { name: 'London', month: 'Mar.', rainfall: 39.3 },\n    { name: 'London', month: 'Apr.', rainfall: 81.4 },\n    { name: 'London', month: 'May', rainfall: 47 },\n    { name: 'London', month: 'Jun.', rainfall: 20.3 },\n    { name: 'London', month: 'Jul.', rainfall: 24 },\n    { name: 'London', month: 'Aug.', rainfall: 35.6 },\n  ],\n  encode: {\n    x: 'month',\n    y: 'rainfall',\n    size: 'rainfall',\n    shape: 'trail',\n  },\n});\n\nchart.render();\n",paraId:26,tocIndex:7},{value:"The ",paraId:27,tocIndex:8},{value:"line",paraId:27,tocIndex:8},{value:" graphic mark displays differently in different coordinate systems. Depending on the coordinate system or coordinate transformations, you can draw line charts, bar charts, radar charts, pie charts, and various other chart types.",paraId:27,tocIndex:8},{value:"Coordinate System or Transform",paraId:28,tocIndex:8},{value:"Coordinate Configuration",paraId:28,tocIndex:8},{value:"Chart Type",paraId:28,tocIndex:8},{value:"Cartesian coordinate system",paraId:28,tocIndex:8},{value:"{ type: 'cartesian' }",paraId:28,tocIndex:8},{value:"Line charts, etc.",paraId:28,tocIndex:8},{value:"Polar coordinate system",paraId:28,tocIndex:8},{value:"{ type: 'polar' }",paraId:28,tocIndex:8},{value:"Radar charts, etc.",paraId:28,tocIndex:8},{value:"parallel",paraId:28,tocIndex:8},{value:" coordinate system",paraId:28,tocIndex:8},{value:"{ type: 'parallel' }",paraId:28,tocIndex:8},{value:"Parallel coordinates, etc.",paraId:28,tocIndex:8},{value:"In ",paraId:29,tocIndex:8},{value:"polar coordinate system",paraId:29,tocIndex:8},{value:", line charts appear as radar charts. In polar coordinates, line area charts need to be closed. Commonly used to draw radar charts, etc.",paraId:29,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  data: [\n    { item: 'Design', type: 'a', score: 70 },\n    { item: 'Design', type: 'b', score: 30 },\n    { item: 'Development', type: 'a', score: 60 },\n    { item: 'Development', type: 'b', score: 70 },\n    { item: 'Marketing', type: 'a', score: 50 },\n    { item: 'Marketing', type: 'b', score: 60 },\n    { item: 'Users', type: 'a', score: 40 },\n    { item: 'Users', type: 'b', score: 50 },\n    { item: 'Test', type: 'a', score: 60 },\n    { item: 'Test', type: 'b', score: 70 },\n    { item: 'Language', type: 'a', score: 70 },\n    { item: 'Language', type: 'b', score: 50 },\n    { item: 'Technology', type: 'a', score: 50 },\n    { item: 'Technology', type: 'b', score: 40 },\n    { item: 'Support', type: 'a', score: 30 },\n    { item: 'Support', type: 'b', score: 40 },\n    { item: 'Sales', type: 'a', score: 60 },\n    { item: 'Sales', type: 'b', score: 40 },\n    { item: 'UX', type: 'a', score: 50 },\n    { item: 'UX', type: 'b', score: 60 },\n  ],\n  encode: { x: 'item', y: 'score', color: 'type' },\n  // Adjust scale to make polar coordinate display more friendly\n  scale: {\n    x: { padding: 0.5, align: 0 },\n    y: { tickCount: 5, domainMin: 0, domainMax: 80 },\n  },\n  coordinate: { type: 'polar' }, // Set polar coordinate system transformation\n  style: { lineWidth: 2 },\n  axis: {\n    x: { grid: true, gridLineWidth: 1, tick: false, gridLineDash: [0, 0] },\n    y: {\n      zIndex: 1,\n      title: false,\n      gridLineWidth: 1, // Grid line width\n      gridLineDash: [0, 0], // Grid line dash style\n      gridAreaFill: (dataum, index, data) => {\n        return index % 2 === 1 ? 'rgba(0, 0, 0, 0.04)' : '';\n      }, // Grid area fill\n    },\n  },\n});\n\nchart.render();\n",paraId:30,tocIndex:8},{value:"In ",paraId:31,tocIndex:8},{value:"parallel coordinate system",paraId:31,tocIndex:8},{value:', line charts are commonly used to draw parallel coordinate plots. Parallel coordinate plots are statistical charts containing multiple vertical parallel coordinate axis. Each vertical coordinate axis represents a field, and each field uses scales to indicate ranges. This way, multidimensional data can easily find "landing points" on each axis, connecting them to form a line. As data increases and lines stack up, analysts may discover characteristics and patterns, such as clustering relationships between data.',paraId:31,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nconst positionList = [\n  'position',\n  'position1',\n  'position2',\n  'position3',\n  'position4',\n  'position5',\n  'position6',\n  'position7',\n];\nconst axis = {\n  zIndex: 1,\n  titlePosition: 'right',\n  line: true,\n  labelStroke: '#fff',\n  labelLineWidth: 5,\n  labelFontSize: 10,\n  labelStrokeLineJoin: 'round',\n  titleStroke: '#fff',\n  titleFontSize: 10,\n  titleLineWidth: 5,\n  titleStrokeLineJoin: 'round',\n  titleTransform: 'translate(-50%, 0) rotate(-90)',\n  lineStroke: 'black',\n  tickStroke: 'black',\n  lineLineWidth: 1,\n};\n\nchart.options({\n  type: 'line',\n  paddingLeft: 20,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/cars3.json',\n  },\n  encode: {\n    position: [\n      'economy (mpg)',\n      'cylinders',\n      'displacement (cc)',\n      'power (hp)',\n      'weight (lb)',\n      '0-60 mph (s)',\n      'year',\n    ],\n    color: 'weight (lb)',\n  },\n  axis: Object.fromEntries(positionList.map((item) => [item, axis])),\n  scale: { color: { palette: 'brBG', offset: (t) => 1 - t } },\n  coordinate: { type: 'parallel' }, // Configure parallel coordinate system transformation\n  style: { lineWidth: 1.5, strokeOpacity: 0.4 },\n  legend: { color: { length: 400, layout: { justifyContent: 'center' } } },\n  interaction: { tooltip: { series: false } },\n});\n\nchart.render();\n",paraId:32,tocIndex:8},{value:"Configure styles for the ",paraId:33,tocIndex:9},{value:"line",paraId:33,tocIndex:9},{value:" mark.",paraId:33,tocIndex:9},{value:"Property",paraId:34,tocIndex:9},{value:"Description",paraId:34,tocIndex:9},{value:"Type",paraId:34,tocIndex:9},{value:"Default Value",paraId:34,tocIndex:9},{value:"Required",paraId:34,tocIndex:9},{value:"gradient",paraId:34,tocIndex:9},{value:"Configure gradient direction for gradient line charts, defaults to ",paraId:34,tocIndex:9},{value:"y",paraId:34,tocIndex:9},{value:" when true",paraId:34,tocIndex:9},{value:"x",paraId:34,tocIndex:9},{value:" | ",paraId:34,tocIndex:9},{value:"y",paraId:34,tocIndex:9},{value:" |true",paraId:34,tocIndex:9},{value:"false",paraId:34,tocIndex:9},{value:"gradientColor",paraId:34,tocIndex:9},{value:"Color corresponding to gradient part for each node",paraId:34,tocIndex:9},{value:"between",paraId:34,tocIndex:9},{value:" | ",paraId:34,tocIndex:9},{value:"start",paraId:34,tocIndex:9},{value:" |",paraId:34,tocIndex:9},{value:"end",paraId:34,tocIndex:9},{value:"between",paraId:34,tocIndex:9},{value:"lineJoin",paraId:34,tocIndex:9},{value:"Connection style, see ",paraId:34,tocIndex:9},{value:"lineJoin",paraId:34,tocIndex:9},{value:"miter",paraId:34,tocIndex:9},{value:" | ",paraId:34,tocIndex:9},{value:"round",paraId:34,tocIndex:9},{value:" | ",paraId:34,tocIndex:9},{value:"bevel",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"connect",paraId:34,tocIndex:9},{value:"Whether to connect null values with ",paraId:34,tocIndex:9},{value:"connector",paraId:34,tocIndex:9},{value:" graphics",paraId:34,tocIndex:9},{value:"boolean",paraId:34,tocIndex:9},{value:"false",paraId:34,tocIndex:9},{value:"defined",paraId:34,tocIndex:9},{value:"Determine if data is null",paraId:34,tocIndex:9},{value:"(d: any) => boolean",paraId:34,tocIndex:9},{value:"(d) => !Number.isNaN(d) && d !== undefined && d !== null",paraId:34,tocIndex:9},{value:"connectFill",paraId:34,tocIndex:9},{value:"connector",paraId:34,tocIndex:9},{value:" graphic fill color",paraId:34,tocIndex:9},{value:"string",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"connectFillOpacity",paraId:34,tocIndex:9},{value:"connector",paraId:34,tocIndex:9},{value:" graphic fill opacity",paraId:34,tocIndex:9},{value:"number",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"connectStroke",paraId:34,tocIndex:9},{value:"connector",paraId:34,tocIndex:9},{value:" graphic stroke",paraId:34,tocIndex:9},{value:"string",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"connectStrokeOpacity",paraId:34,tocIndex:9},{value:"connector",paraId:34,tocIndex:9},{value:" graphic stroke opacity",paraId:34,tocIndex:9},{value:"number",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"connectLineWidth",paraId:34,tocIndex:9},{value:"connector",paraId:34,tocIndex:9},{value:" graphic stroke width",paraId:34,tocIndex:9},{value:"number",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"connectLineDash",paraId:34,tocIndex:9},{value:"connector",paraId:34,tocIndex:9},{value:" graphic stroke dash configuration, first value is dash segment length, second value is segment gap distance. Setting lineDash to [0,0] removes stroke.",paraId:34,tocIndex:9},{value:"[number,number]",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"connectOpacity",paraId:34,tocIndex:9},{value:"connector",paraId:34,tocIndex:9},{value:" graphic overall opacity",paraId:34,tocIndex:9},{value:"number",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"connectShadowColor",paraId:34,tocIndex:9},{value:"connector",paraId:34,tocIndex:9},{value:" graphic shadow color",paraId:34,tocIndex:9},{value:"string",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"connectShadowBlur",paraId:34,tocIndex:9},{value:"connector",paraId:34,tocIndex:9},{value:" graphic shadow gaussian blur coefficient",paraId:34,tocIndex:9},{value:"number",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"connectShadowOffsetX",paraId:34,tocIndex:9},{value:"Set horizontal distance of shadow from ",paraId:34,tocIndex:9},{value:"connector",paraId:34,tocIndex:9},{value:" graphic",paraId:34,tocIndex:9},{value:"number",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"connectShadowOffsetY",paraId:34,tocIndex:9},{value:"Set vertical distance of shadow from ",paraId:34,tocIndex:9},{value:"connector",paraId:34,tocIndex:9},{value:" graphic",paraId:34,tocIndex:9},{value:"number",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"connectCursor",paraId:34,tocIndex:9},{value:"connector",paraId:34,tocIndex:9},{value:" graphic mouse style. Same as CSS mouse style.",paraId:34,tocIndex:9},{value:"string",paraId:34,tocIndex:9},{value:"default",paraId:34,tocIndex:9},{value:"stroke",paraId:34,tocIndex:9},{value:"line",paraId:34,tocIndex:9},{value:" graphic stroke",paraId:34,tocIndex:9},{value:"string",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"strokeOpacity",paraId:34,tocIndex:9},{value:"line",paraId:34,tocIndex:9},{value:" graphic stroke opacity",paraId:34,tocIndex:9},{value:"number",paraId:34,tocIndex:9},{value:"1",paraId:34,tocIndex:9},{value:"lineWidth",paraId:34,tocIndex:9},{value:"line",paraId:34,tocIndex:9},{value:" graphic stroke width",paraId:34,tocIndex:9},{value:"number",paraId:34,tocIndex:9},{value:"1",paraId:34,tocIndex:9},{value:"lineDash",paraId:34,tocIndex:9},{value:"line",paraId:34,tocIndex:9},{value:" graphic stroke dash configuration, first value is dash segment length, second value is segment gap distance. Setting lineDash to [0, 0] removes stroke.",paraId:34,tocIndex:9},{value:"[number,number]",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"opacity",paraId:34,tocIndex:9},{value:"line",paraId:34,tocIndex:9},{value:" graphic overall opacity",paraId:34,tocIndex:9},{value:"number",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"shadowColor",paraId:34,tocIndex:9},{value:"line",paraId:34,tocIndex:9},{value:" graphic shadow color",paraId:34,tocIndex:9},{value:"string",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"shadowBlur",paraId:34,tocIndex:9},{value:"line",paraId:34,tocIndex:9},{value:" graphic shadow gaussian blur coefficient",paraId:34,tocIndex:9},{value:"number",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"shadowOffsetX",paraId:34,tocIndex:9},{value:"Set horizontal distance of shadow from ",paraId:34,tocIndex:9},{value:"line",paraId:34,tocIndex:9},{value:" graphic",paraId:34,tocIndex:9},{value:"number",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"shadowOffsetY",paraId:34,tocIndex:9},{value:"Set vertical distance of shadow from ",paraId:34,tocIndex:9},{value:"line",paraId:34,tocIndex:9},{value:" graphic",paraId:34,tocIndex:9},{value:"number",paraId:34,tocIndex:9},{value:"-",paraId:34,tocIndex:9},{value:"cursor",paraId:34,tocIndex:9},{value:"line",paraId:34,tocIndex:9},{value:" graphic mouse style. Same as CSS mouse style.",paraId:34,tocIndex:9},{value:"string",paraId:34,tocIndex:9},{value:"default",paraId:34,tocIndex:9},{value:"Try it out:",paraId:35,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', height: 350 });\n\nchart.options({\n  type: 'line',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/doughnut-purchases.json',\n    transform: [\n      // Mock missing data.\n      {\n        type: 'map',\n        callback: (d) => ({\n          ...d,\n          count: ['2004'].includes(d.year) ? NaN : d.count,\n        }),\n      },\n    ],\n  },\n  style: {\n    gradient: 'x',\n    gradientColor: 'start',\n    lineJoin: 'round',\n    connect: true,\n    connectStroke: '#aaa',\n    connectLineWidth: 1,\n    connectLineDash: [2, 4],\n    lineWidth: 3,\n    opacity: 0.9,\n    shadowColor: '#d3d3d3',\n    shadowBlur: 10,\n    shadowOffsetX: 10,\n    shadowOffsetY: 10,\n  },\n  encode: { x: 'year', y: 'count', color: 'year', shape: 'smooth' },\n  scale: { y: { zero: true, nice: true } },\n  axis: { y: { labelFormatter: '~s' } },\n  labels: [\n    {\n      text: 'count',\n    },\n  ],\n});\n\nchart.render();\n\n",paraId:36,tocIndex:9},{value:"How to draw a zero-value line chart?",paraId:37,tocIndex:10},{value:"Configure the ",paraId:38,tocIndex:10},{value:"scale",paraId:38,tocIndex:10},{value:" for the ",paraId:38,tocIndex:10},{value:"y",paraId:38,tocIndex:10},{value:" channel to customize the y-axis domain.",paraId:38,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  data: [\n    { date: '06-10', count: 0, type: 'Test' },\n    { date: '06-11', count: 0, type: 'Test' },\n    { date: '06-12', count: 0, type: 'Test' },\n    { date: '06-13', count: 0, type: 'Test' },\n    { date: '06-14', count: 0, type: 'Test' },\n    { date: '06-15', count: 0, type: 'Test' },\n    { date: '06-16', count: 0, type: 'Test' },\n  ],\n  encode: { x: 'date', y: 'count' },\n  scale: { y: { domain: [0, 1] } },\n});\nchart.render();\n",paraId:39,tocIndex:10}]},51091:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(89716);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"lineX",paraId:0,tocIndex:0},{value:" and ",paraId:0,tocIndex:0},{value:"lineY",paraId:0,tocIndex:0},{value:" marks have similar configurations. The ",paraId:0,tocIndex:0},{value:"lineX",paraId:0,tocIndex:0},{value:" mark is used to draw auxiliary lines perpendicular to the x-axis, commonly used for drawing average values or other aggregated data auxiliary lines.",paraId:0,tocIndex:0},{value:"lineX",paraId:1,tocIndex:1},{value:" supports two methods for configuring data:",paraId:1,tocIndex:1},{value:"When you need to draw vertical lines at fixed positions, you can directly configure ",paraId:2,tocIndex:2},{value:"data",paraId:2,tocIndex:2},{value:" as a number array. G2 will automatically convert the array to ",paraId:2,tocIndex:2},{value:"x",paraId:2,tocIndex:2},{value:" channel encoding.",paraId:2,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  height: 200,\n  children: [\n    {\n      type: 'rect',\n      data: {\n        type: 'fetch',\n        value: 'https://assets.antv.antgroup.com/g2/unemployment2.json',\n      },\n      encode: { x: 'rate' },\n      transform: [{ type: 'binX', y: 'count' }],\n      style: { inset: 0.5 },\n    },\n    {\n      type: 'lineX',\n      data: [10.2], // Automatically converted to encode: { x: [10.2] }\n      style: { stroke: '#000', strokeOpacity: 0.45, lineDash: [3, 4] },\n      labels: [\n        {\n          text: 'lineX text',\n          position: 'top-left',\n          textBaseline: 'bottom',\n          fill: '#000',\n          fillOpacity: 0.45,\n          background: true,\n          backgroundFill: '#000',\n          backgroundOpacity: 0.15,\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:3,tocIndex:2},{value:"When you need to work with data fields or use data transforms, you should explicitly configure ",paraId:4,tocIndex:3},{value:"encode",paraId:4,tocIndex:3},{value:" channels. This approach is more flexible and supports data field mapping and various data transforms.",paraId:4,tocIndex:3},{value:"/**\n * A recreation of this demo: https://vega.github.io/vega-lite/examples/layer_histogram_global_mean.html\n */\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/movies.json',\n  transform: [\n    {\n      type: 'filter',\n      callback: (d) => d['IMDB Rating'] > 0,\n    },\n  ],\n});\n\nchart\n  .rect()\n  .transform({ type: 'binX', y: 'count', thresholds: 9 })\n  .encode('x', 'IMDB Rating')\n  .scale('y', { domainMax: 1000 })\n  .style('inset', 1);\n\nchart\n  .lineX()\n  .transform({ type: 'groupColor', x: 'mean' }) // Calculate mean value\n  .encode('x', 'IMDB Rating') // Explicitly configure x channel\n  .style('stroke', '#F4664A')\n  .style('strokeOpacity', 1)\n  .style('lineWidth', 2)\n  .style('lineDash', [4, 4]);\n\nchart.render();\n",paraId:5,tocIndex:3},{value:"Configuration Method",paraId:6,tocIndex:4},{value:"Use Case",paraId:6,tocIndex:4},{value:"Example",paraId:6,tocIndex:4},{value:"Auto Conversion",paraId:6,tocIndex:4},{value:"data: [value1, value2]",paraId:6,tocIndex:4},{value:"Fixed position auxiliary lines",paraId:6,tocIndex:4},{value:"data: [10, 20]",paraId:6,tocIndex:4},{value:"✅ Auto converted to ",paraId:6,tocIndex:4},{value:"encode.x",paraId:6,tocIndex:4},{value:"encode: { x: field }",paraId:6,tocIndex:4},{value:"Based on data fields or transforms",paraId:6,tocIndex:4},{value:"encode('x', 'fieldName')",paraId:6,tocIndex:4},{value:"❌ Explicit configuration",paraId:6,tocIndex:4},{value:"Important Notes:",paraId:7,tocIndex:4},{value:"When both ",paraId:8,tocIndex:4},{value:"data",paraId:8,tocIndex:4},{value:" array and ",paraId:8,tocIndex:4},{value:"encode.x",paraId:8,tocIndex:4},{value:" are configured, ",paraId:8,tocIndex:4},{value:"encode.x",paraId:8,tocIndex:4},{value:" takes higher priority",paraId:8,tocIndex:4},{value:"data",paraId:8,tocIndex:4},{value:" auto conversion only works when array elements are simple values (not objects)",paraId:8,tocIndex:4},{value:"When using ",paraId:8,tocIndex:4},{value:"transform",paraId:8,tocIndex:4},{value:" for data aggregation, the ",paraId:8,tocIndex:4},{value:"encode",paraId:8,tocIndex:4},{value:" method must be used",paraId:8,tocIndex:4},{value:"For more examples, you can visit the ",paraId:9,tocIndex:4},{value:"Chart Examples - Line Annotation",paraId:10,tocIndex:4},{value:" page.",paraId:9,tocIndex:4},{value:"Property",paraId:11,tocIndex:5},{value:"Description",paraId:11,tocIndex:5},{value:"Type",paraId:11,tocIndex:5},{value:"Default",paraId:11,tocIndex:5},{value:"Required",paraId:11,tocIndex:5},{value:"data",paraId:11,tocIndex:5},{value:"Configure data for the ",paraId:11,tocIndex:5},{value:"lineX",paraId:11,tocIndex:5},{value:" mark, supports number arrays (automatically converted to x channel) or object arrays",paraId:11,tocIndex:5},{value:"Array",paraId:11,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"encode",paraId:11,tocIndex:5},{value:"Configure visual channels of the ",paraId:11,tocIndex:5},{value:"lineX",paraId:11,tocIndex:5},{value:" mark, including ",paraId:11,tocIndex:5},{value:"x",paraId:11,tocIndex:5},{value:", ",paraId:11,tocIndex:5},{value:"color",paraId:11,tocIndex:5},{value:", etc., to specify the relationship between visual element properties and data",paraId:11,tocIndex:5},{value:"encode",paraId:12,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"✓",paraId:11,tocIndex:5},{value:"style",paraId:11,tocIndex:5},{value:"Configure the graphic style of the ",paraId:11,tocIndex:5},{value:"lineX",paraId:11,tocIndex:5},{value:" mark",paraId:11,tocIndex:5},{value:"style",paraId:13,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"labels",paraId:11,tocIndex:5},{value:"Configure the text configuration of the ",paraId:11,tocIndex:5},{value:"lineX",paraId:11,tocIndex:5},{value:" mark",paraId:11,tocIndex:5},{value:"labels",paraId:14,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"Configure the visual channels of the ",paraId:15,tocIndex:6},{value:"lineX",paraId:15,tocIndex:6},{value:" mark.",paraId:15,tocIndex:6},{value:"Property",paraId:16,tocIndex:6},{value:"Description",paraId:16,tocIndex:6},{value:"Type",paraId:16,tocIndex:6},{value:"Default",paraId:16,tocIndex:6},{value:"Required",paraId:16,tocIndex:6},{value:"x",paraId:16,tocIndex:6},{value:"Bind the ",paraId:16,tocIndex:6},{value:"x",paraId:16,tocIndex:6},{value:" property channel of the ",paraId:16,tocIndex:6},{value:"lineX",paraId:16,tocIndex:6},{value:" mark. Supports data field mapping or works with transforms to calculate aggregated values (such as mean, median). ",paraId:16,tocIndex:6},{value:"Note: When directly configuring ",paraId:16,tocIndex:6},{value:"data",paraId:16,tocIndex:6},{value:" as an array, it will be automatically converted to the ",paraId:16,tocIndex:6},{value:"x",paraId:16,tocIndex:6},{value:" channel, no need to configure repeatedly.",paraId:16,tocIndex:6},{value:"encode",paraId:17,tocIndex:6},{value:"-",paraId:16,tocIndex:6},{value:"✓",paraId:16,tocIndex:6},{value:"color",paraId:16,tocIndex:6},{value:"Bind the ",paraId:16,tocIndex:6},{value:"color",paraId:16,tocIndex:6},{value:" property channel of the ",paraId:16,tocIndex:6},{value:"lineX",paraId:16,tocIndex:6},{value:" mark. If a data field is mapped to the color channel, the data will be grouped and split into multiple regions with different colors",paraId:16,tocIndex:6},{value:"encode",paraId:18,tocIndex:6},{value:"-",paraId:16,tocIndex:6},{value:"Property",paraId:19,tocIndex:7},{value:"Description",paraId:19,tocIndex:7},{value:"Type",paraId:19,tocIndex:7},{value:"Default",paraId:19,tocIndex:7},{value:"Required",paraId:19,tocIndex:7},{value:"stroke",paraId:19,tocIndex:7},{value:"Stroke of the graphic",paraId:19,tocIndex:7},{value:"string",paraId:19,tocIndex:7},{value:" | ",paraId:19,tocIndex:7},{value:"Function<string>",paraId:19,tocIndex:7},{value:"-",paraId:19,tocIndex:7},{value:"strokeOpacity",paraId:19,tocIndex:7},{value:"Stroke opacity",paraId:19,tocIndex:7},{value:"number",paraId:19,tocIndex:7},{value:" | ",paraId:19,tocIndex:7},{value:"Function<number>",paraId:19,tocIndex:7},{value:"-",paraId:19,tocIndex:7},{value:"lineWidth",paraId:19,tocIndex:7},{value:"Width of the graphic stroke",paraId:19,tocIndex:7},{value:"number",paraId:19,tocIndex:7},{value:" | ",paraId:19,tocIndex:7},{value:"Function<number>",paraId:19,tocIndex:7},{value:"-",paraId:19,tocIndex:7},{value:"lineDash",paraId:19,tocIndex:7},{value:"Dashed stroke configuration. The first value is the length of each dash segment, the second value is the distance between segments. Setting lineDash to [0, 0] results in no stroke",paraId:19,tocIndex:7},{value:"[number,number]",paraId:19,tocIndex:7},{value:" | ",paraId:19,tocIndex:7},{value:"Function<[number, number]>",paraId:19,tocIndex:7},{value:"-",paraId:19,tocIndex:7},{value:"opacity",paraId:19,tocIndex:7},{value:"Overall opacity of the graphic",paraId:19,tocIndex:7},{value:"number",paraId:19,tocIndex:7},{value:" | ",paraId:19,tocIndex:7},{value:"Function<number>",paraId:19,tocIndex:7},{value:"-",paraId:19,tocIndex:7},{value:"shadowColor",paraId:19,tocIndex:7},{value:"Shadow color of the graphic",paraId:19,tocIndex:7},{value:"string",paraId:19,tocIndex:7},{value:" | ",paraId:19,tocIndex:7},{value:"Function<string>",paraId:19,tocIndex:7},{value:"-",paraId:19,tocIndex:7},{value:"shadowBlur",paraId:19,tocIndex:7},{value:"Gaussian blur coefficient of the graphic shadow",paraId:19,tocIndex:7},{value:"number",paraId:19,tocIndex:7},{value:" | ",paraId:19,tocIndex:7},{value:"Function<number>",paraId:19,tocIndex:7},{value:"-",paraId:19,tocIndex:7},{value:"shadowOffsetX",paraId:19,tocIndex:7},{value:"Horizontal distance of the shadow from the graphic",paraId:19,tocIndex:7},{value:"number",paraId:19,tocIndex:7},{value:" | ",paraId:19,tocIndex:7},{value:"Function<number>",paraId:19,tocIndex:7},{value:"-",paraId:19,tocIndex:7},{value:"shadowOffsetY",paraId:19,tocIndex:7},{value:"Vertical distance of the shadow from the graphic",paraId:19,tocIndex:7},{value:"number",paraId:19,tocIndex:7},{value:" | ",paraId:19,tocIndex:7},{value:"Function<number>",paraId:19,tocIndex:7},{value:"-",paraId:19,tocIndex:7},{value:"cursor",paraId:19,tocIndex:7},{value:"Mouse cursor style. Same as CSS cursor style, default 'default'",paraId:19,tocIndex:7},{value:"string",paraId:19,tocIndex:7},{value:" | ",paraId:19,tocIndex:7},{value:"Function<string>",paraId:19,tocIndex:7},{value:"default",paraId:19,tocIndex:7},{value:"Shows how to use different data sources to calculate statistical lines separately, suitable for data comparison analysis scenarios.",paraId:20,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\n// Simulate two different sets of data\nconst data2020 = Array.from({ length: 100 }, (_, i) => ({\n  score: 60 + Math.random() * 30,\n  year: 2020,\n  category: 'A',\n}));\n\nconst data2021 = Array.from({ length: 100 }, (_, i) => ({\n  score: 70 + Math.random() * 25,\n  year: 2021,\n  category: 'B',\n}));\n\nconst allData = [...data2020, ...data2021];\n\nchart.options({\n  type: 'view',\n  children: [\n    // 2020 data histogram\n    {\n      type: 'rect',\n      data: data2020,\n      transform: [{ type: 'binX', y: 'count', thresholds: 15 }],\n      encode: { x: 'score' },\n      style: {\n        fill: '#1890ff',\n        fillOpacity: 0.5,\n        stroke: '#1890ff',\n        inset: 0.5,\n      },\n    },\n    // 2021 data histogram\n    {\n      type: 'rect',\n      data: data2021,\n      transform: [{ type: 'binX', y: 'count', thresholds: 15 }],\n      encode: { x: 'score' },\n      style: {\n        fill: '#fa8c16',\n        fillOpacity: 0.5,\n        stroke: '#fa8c16',\n        inset: 0.5,\n      },\n    },\n    // 2020 average line\n    {\n      type: 'lineX',\n      data: data2020,\n      transform: [{ type: 'groupColor', x: 'mean' }],\n      encode: { x: 'score' },\n      style: {\n        stroke: '#1890ff',\n        strokeOpacity: 1,\n        lineWidth: 3,\n        lineDash: [6, 3],\n      },\n      labels: [\n        {\n          text: '2020 Average Score',\n          position: 'top-left',\n          fill: '#1890ff',\n          fontWeight: 'bold',\n          background: true,\n          backgroundFill: '#e6f7ff',\n          backgroundOpacity: 0.9,\n        },\n      ],\n    },\n    // 2021 average line\n    {\n      type: 'lineX',\n      data: data2021,\n      transform: [{ type: 'groupColor', x: 'mean' }],\n      encode: { x: 'score' },\n      style: {\n        stroke: '#fa8c16',\n        strokeOpacity: 1,\n        lineWidth: 3,\n        lineDash: [6, 3],\n      },\n      labels: [\n        {\n          text: '2021 Average Score',\n          position: 'top-right',\n          fill: '#fa8c16',\n          fontWeight: 'bold',\n          background: true,\n          backgroundFill: '#fff7e6',\n          backgroundOpacity: 0.9,\n        },\n      ],\n    },\n    // Overall average line\n    {\n      type: 'lineX',\n      data: allData,\n      transform: [{ type: 'groupColor', x: 'mean' }],\n      encode: { x: 'score' },\n      style: {\n        stroke: '#52c41a',\n        strokeOpacity: 1,\n        lineWidth: 2,\n        lineDash: [8, 4],\n      },\n      labels: [\n        {\n          text: 'Overall Average Score',\n          position: 'bottom',\n          fill: '#52c41a',\n          fontWeight: 'bold',\n          textAlign: 'center',\n          background: true,\n          backgroundFill: '#f6ffed',\n          backgroundOpacity: 0.9,\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:21,tocIndex:9}]},58233:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(92380);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"lineY",paraId:0,tocIndex:0},{value:" and ",paraId:0,tocIndex:0},{value:"lineX",paraId:0,tocIndex:0},{value:" marks have similar configurations. The ",paraId:0,tocIndex:0},{value:"lineY",paraId:0,tocIndex:0},{value:" mark is used to draw auxiliary lines perpendicular to the y-axis, commonly used for drawing average values or other aggregated data auxiliary lines.",paraId:0,tocIndex:0},{value:"lineY",paraId:1,tocIndex:1},{value:" supports two methods for configuring data:",paraId:1,tocIndex:1},{value:"When you need to draw horizontal lines at fixed positions, you can directly configure ",paraId:2,tocIndex:2},{value:"data",paraId:2,tocIndex:2},{value:" as a number array. G2 will automatically convert the array to ",paraId:2,tocIndex:2},{value:"y",paraId:2,tocIndex:2},{value:" channel encoding.",paraId:2,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  height: 200,\n  autoFit: true,\n  children: [\n    {\n      type: 'interval',\n      data: [\n        { year: '1951', sales: 38 },\n        { year: '1952', sales: 52 },\n        { year: '1956', sales: 61 },\n        { year: '1957', sales: 120 },\n        { year: '1958', sales: 48 },\n        { year: '1959', sales: 38 },\n      ],\n      encode: { x: 'year', y: 'sales' },\n    },\n    {\n      type: 'lineY',\n      data: [100, 59], // Automatically converted to encode: { y: [100, 59] }\n      style: {\n        stroke: (v) => {\n          if (v >= 60) {\n            return 'green';\n          } else {\n            return 'red';\n          }\n        },\n        lineWidth: 2,\n      },\n      labels: [\n        // Text configuration can refer to mark text\n        {\n          text: (v) => (v >= 60 ? 'lineY divider 1' : 'lineY divider 2'),\n          position: 'top-right',\n          textBaseline: 'bottom',\n          fill: '#000',\n          fillOpacity: 0.45,\n          background: true,\n          backgroundFill: '#000',\n          backgroundOpacity: 0.15,\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:3,tocIndex:2},{value:"When you need to work with data fields or combine with data transforms, you should explicitly configure the ",paraId:4,tocIndex:3},{value:"encode",paraId:4,tocIndex:3},{value:" channels. This method is more flexible and supports data field mapping and various data transforms.",paraId:4,tocIndex:3},{value:"/**\n * A recreation of this demo: https://vega.github.io/vega-lite/examples/layer_precipitation_mean.html\n */\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n});\n\nchart\n  .interval()\n  .transform({ type: 'groupX', y: 'mean' })\n  .encode('x', (d) => new Date(d.date).getUTCMonth())\n  .encode('y', 'precipitation')\n  .scale('y', { tickCount: 5, domainMax: 6 })\n  .tooltip({ channel: 'y', valueFormatter: '.2f' });\n\nchart\n  .lineY()\n  .transform({ type: 'groupX', y: 'mean' }) // Calculate mean value\n  .encode('y', 'precipitation') // Explicitly configure y channel\n  .style('stroke', '#F4664A')\n  .style('strokeOpacity', 1)\n  .style('lineWidth', 2)\n  .style('lineDash', [3, 3]);\n\nchart.render();\n",paraId:5,tocIndex:3},{value:"Configuration Method",paraId:6,tocIndex:4},{value:"Use Case",paraId:6,tocIndex:4},{value:"Example",paraId:6,tocIndex:4},{value:"Auto Conversion",paraId:6,tocIndex:4},{value:"data: [value1, value2]",paraId:6,tocIndex:4},{value:"Fixed position auxiliary lines",paraId:6,tocIndex:4},{value:"data: [50, 100]",paraId:6,tocIndex:4},{value:"✅ Auto convert to ",paraId:6,tocIndex:4},{value:"encode.y",paraId:6,tocIndex:4},{value:"encode: { y: field }",paraId:6,tocIndex:4},{value:"Based on data fields or transforms",paraId:6,tocIndex:4},{value:"encode('y', 'fieldName')",paraId:6,tocIndex:4},{value:"❌ Explicit configuration",paraId:6,tocIndex:4},{value:"Important Notes:",paraId:7,tocIndex:4},{value:"When both ",paraId:8,tocIndex:4},{value:"data",paraId:8,tocIndex:4},{value:" array and ",paraId:8,tocIndex:4},{value:"encode.y",paraId:8,tocIndex:4},{value:" are configured, ",paraId:8,tocIndex:4},{value:"encode.y",paraId:8,tocIndex:4},{value:" takes higher priority",paraId:8,tocIndex:4},{value:"data",paraId:8,tocIndex:4},{value:" auto conversion only works when array elements are simple values (not objects)",paraId:8,tocIndex:4},{value:"When using ",paraId:8,tocIndex:4},{value:"transform",paraId:8,tocIndex:4},{value:" for data aggregation, you must use the ",paraId:8,tocIndex:4},{value:"encode",paraId:8,tocIndex:4},{value:" method",paraId:8,tocIndex:4},{value:"For more examples, you can visit the ",paraId:9,tocIndex:4},{value:"Chart Examples - Line Annotation",paraId:10,tocIndex:4},{value:" page.",paraId:9,tocIndex:4},{value:"Property",paraId:11,tocIndex:5},{value:"Description",paraId:11,tocIndex:5},{value:"Type",paraId:11,tocIndex:5},{value:"Default",paraId:11,tocIndex:5},{value:"Required",paraId:11,tocIndex:5},{value:"data",paraId:11,tocIndex:5},{value:"Configure the data for the ",paraId:11,tocIndex:5},{value:"lineY",paraId:11,tocIndex:5},{value:" mark, supports number arrays (automatically converted to y channel) or object arrays",paraId:11,tocIndex:5},{value:"Array",paraId:11,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"encode",paraId:11,tocIndex:5},{value:"Configure the visual channels of the ",paraId:11,tocIndex:5},{value:"lineY",paraId:11,tocIndex:5},{value:" mark, including ",paraId:11,tocIndex:5},{value:"y",paraId:11,tocIndex:5},{value:", ",paraId:11,tocIndex:5},{value:"color",paraId:11,tocIndex:5},{value:", etc., to specify the relationship between visual element properties and data",paraId:11,tocIndex:5},{value:"encode",paraId:12,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"✓",paraId:11,tocIndex:5},{value:"style",paraId:11,tocIndex:5},{value:"Configure the graphic style of the ",paraId:11,tocIndex:5},{value:"lineY",paraId:11,tocIndex:5},{value:" mark",paraId:11,tocIndex:5},{value:"style",paraId:13,tocIndex:5},{value:"-",paraId:11,tocIndex:5},{value:"Configure the visual channels of the ",paraId:14,tocIndex:6},{value:"lineY",paraId:14,tocIndex:6},{value:" mark.",paraId:14,tocIndex:6},{value:"Property",paraId:15,tocIndex:6},{value:"Description",paraId:15,tocIndex:6},{value:"Type",paraId:15,tocIndex:6},{value:"Default",paraId:15,tocIndex:6},{value:"Required",paraId:15,tocIndex:6},{value:"y",paraId:15,tocIndex:6},{value:"Bind the ",paraId:15,tocIndex:6},{value:"y",paraId:15,tocIndex:6},{value:" property channel of the ",paraId:15,tocIndex:6},{value:"lineY",paraId:15,tocIndex:6},{value:" mark. Supports data field mapping or works with transforms to calculate aggregated values (such as mean or median). ",paraId:15,tocIndex:6},{value:"Note: When directly configuring ",paraId:15,tocIndex:6},{value:"data",paraId:15,tocIndex:6},{value:" as an array, it will be automatically converted to the ",paraId:15,tocIndex:6},{value:"y",paraId:15,tocIndex:6},{value:" channel, no need to configure again.",paraId:15,tocIndex:6},{value:"encode",paraId:16,tocIndex:6},{value:"-",paraId:15,tocIndex:6},{value:"✓",paraId:15,tocIndex:6},{value:"color",paraId:15,tocIndex:6},{value:"Bind the ",paraId:15,tocIndex:6},{value:"color",paraId:15,tocIndex:6},{value:" property channel of the ",paraId:15,tocIndex:6},{value:"lineY",paraId:15,tocIndex:6},{value:" mark. If a data field is mapped to the color channel, the data will be grouped and split into multiple regions with different colors",paraId:15,tocIndex:6},{value:"encode",paraId:17,tocIndex:6},{value:"-",paraId:15,tocIndex:6},{value:"Property",paraId:18,tocIndex:7},{value:"Description",paraId:18,tocIndex:7},{value:"Type",paraId:18,tocIndex:7},{value:"Default",paraId:18,tocIndex:7},{value:"Required",paraId:18,tocIndex:7},{value:"stroke",paraId:18,tocIndex:7},{value:"Stroke of the graphic",paraId:18,tocIndex:7},{value:"string",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"Function<string>",paraId:18,tocIndex:7},{value:"-",paraId:18,tocIndex:7},{value:"strokeOpacity",paraId:18,tocIndex:7},{value:"Stroke opacity",paraId:18,tocIndex:7},{value:"number",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"Function<number>",paraId:18,tocIndex:7},{value:"-",paraId:18,tocIndex:7},{value:"lineWidth",paraId:18,tocIndex:7},{value:"Width of the graphic stroke",paraId:18,tocIndex:7},{value:"number",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"Function<number>",paraId:18,tocIndex:7},{value:"-",paraId:18,tocIndex:7},{value:"lineDash",paraId:18,tocIndex:7},{value:"Dashed stroke configuration. The first value is the length of each dash segment, the second value is the distance between segments. Setting lineDash to [0, 0] results in no stroke",paraId:18,tocIndex:7},{value:"[number,number]",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"Function<[number, number]>",paraId:18,tocIndex:7},{value:"-",paraId:18,tocIndex:7},{value:"opacity",paraId:18,tocIndex:7},{value:"Overall opacity of the graphic",paraId:18,tocIndex:7},{value:"number",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"Function<number>",paraId:18,tocIndex:7},{value:"-",paraId:18,tocIndex:7},{value:"shadowColor",paraId:18,tocIndex:7},{value:"Shadow color of the graphic",paraId:18,tocIndex:7},{value:"string",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"Function<string>",paraId:18,tocIndex:7},{value:"-",paraId:18,tocIndex:7},{value:"shadowBlur",paraId:18,tocIndex:7},{value:"Gaussian blur coefficient of the graphic shadow",paraId:18,tocIndex:7},{value:"number",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"Function<number>",paraId:18,tocIndex:7},{value:"-",paraId:18,tocIndex:7},{value:"shadowOffsetX",paraId:18,tocIndex:7},{value:"Horizontal distance of the shadow from the graphic",paraId:18,tocIndex:7},{value:"number",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"Function<number>",paraId:18,tocIndex:7},{value:"-",paraId:18,tocIndex:7},{value:"shadowOffsetY",paraId:18,tocIndex:7},{value:"Vertical distance of the shadow from the graphic",paraId:18,tocIndex:7},{value:"number",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"Function<number>",paraId:18,tocIndex:7},{value:"-",paraId:18,tocIndex:7},{value:"cursor",paraId:18,tocIndex:7},{value:"Mouse cursor style. Same as CSS cursor style, default 'default'",paraId:18,tocIndex:7},{value:"string",paraId:18,tocIndex:7},{value:" | ",paraId:18,tocIndex:7},{value:"Function<string>",paraId:18,tocIndex:7},{value:"default",paraId:18,tocIndex:7},{value:"Shows how to draw multiple threshold lines with different styles in the same chart, commonly used for data monitoring and alert systems.",paraId:19,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\n// Simulate time series data\nconst data = Array.from({ length: 30 }, (_, i) => ({\n  day: i + 1,\n  value: 50 + Math.sin(i * 0.3) * 20 + Math.random() * 10,\n}));\n\nchart.options({\n  type: 'view',\n  data,\n  children: [\n    // Draw the main line chart\n    {\n      type: 'line',\n      encode: { x: 'day', y: 'value' },\n      style: { stroke: '#1890ff', lineWidth: 2 },\n    },\n    // Draw data points\n    {\n      type: 'point',\n      encode: { x: 'day', y: 'value' },\n      style: { fill: '#1890ff', r: 3 },\n    },\n    // Danger threshold line (red)\n    {\n      type: 'lineY',\n      data: [75],\n      style: {\n        stroke: '#ff4d4f',\n        strokeOpacity: 0.8,\n        lineWidth: 2,\n        lineDash: [8, 4],\n      },\n      labels: [\n        {\n          text: 'Danger Threshold',\n          position: 'top-right',\n          fill: '#ff4d4f',\n          fontWeight: 'bold',\n          background: true,\n          backgroundFill: '#fff',\n          backgroundOpacity: 0.9,\n        },\n      ],\n    },\n    // Warning threshold line (orange)\n    {\n      type: 'lineY',\n      data: [65],\n      style: {\n        stroke: '#fa8c16',\n        strokeOpacity: 0.8,\n        lineWidth: 2,\n        lineDash: [5, 5],\n      },\n      labels: [\n        {\n          text: 'Warning Threshold',\n          position: 'top-right',\n          fill: '#fa8c16',\n          fontWeight: 'bold',\n          background: true,\n          backgroundFill: '#fff',\n          backgroundOpacity: 0.9,\n        },\n      ],\n    },\n    // Normal threshold line (green)\n    {\n      type: 'lineY',\n      data: [35],\n      style: {\n        stroke: '#52c41a',\n        strokeOpacity: 0.8,\n        lineWidth: 2,\n        lineDash: [3, 3],\n      },\n      labels: [\n        {\n          text: 'Normal Lower Limit',\n          position: 'bottom-right',\n          fill: '#52c41a',\n          fontWeight: 'bold',\n          background: true,\n          backgroundFill: '#fff',\n          backgroundOpacity: 0.9,\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:20,tocIndex:9}]},20639:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(47127);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"link",paraId:0,tocIndex:0},{value:" mark is similar to a line chart but specifies ",paraId:0,tocIndex:0},{value:"x",paraId:0,tocIndex:0},{value:" and ",paraId:0,tocIndex:0},{value:"y",paraId:0,tocIndex:0},{value:" channels as field arrays of length 2. It obtains corresponding positioning points (x, y) by pairing them and connects the corresponding positioning points to draw directional line segments (with arrows).",paraId:0,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'link',\n  height: 260,\n  autoFit: true,\n  data: [\n    { x1: 10, y1: 10, x2: 20, y2: 20, type: '1' },\n    { x1: 21, y1: 12, x2: 11, y2: 22, type: '1' },\n    { x1: 20, y1: 21, x2: 10, y2: 11, type: '2' },\n    { x1: 11, y1: 23, x2: 21, y2: 13, type: '2' },\n  ],\n  encode: { x: ['x1', 'x2'], y: ['y1', 'y2'], color: 'type' }, // The link mark requires x, x1, y, y1 channels to define a line or vector between two points\n  style: { arrow: true, arrowSize: 6 }, // arrow is the arrow switch, arrows can usually represent direction, which is the difference between link and line marks.\n  legend: false,\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"For more examples, please check the ",paraId:2,tocIndex:0},{value:"Chart Examples - Link",paraId:3,tocIndex:0},{value:" page.",paraId:2,tocIndex:0},{value:"Property",paraId:4,tocIndex:1},{value:"Description",paraId:4,tocIndex:1},{value:"Type",paraId:4,tocIndex:1},{value:"Default",paraId:4,tocIndex:1},{value:"Required",paraId:4,tocIndex:1},{value:"encode",paraId:4,tocIndex:1},{value:"Configure the visual channels of the ",paraId:4,tocIndex:1},{value:"link",paraId:4,tocIndex:1},{value:" mark, including ",paraId:4,tocIndex:1},{value:"x",paraId:4,tocIndex:1},{value:", ",paraId:4,tocIndex:1},{value:"y",paraId:4,tocIndex:1},{value:", ",paraId:4,tocIndex:1},{value:"color",paraId:4,tocIndex:1},{value:", ",paraId:4,tocIndex:1},{value:"shape",paraId:4,tocIndex:1},{value:", etc., to specify the relationship between visual element properties and data",paraId:4,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"✓",paraId:4,tocIndex:1},{value:"style",paraId:4,tocIndex:1},{value:"Configure the graphic style of the ",paraId:4,tocIndex:1},{value:"link",paraId:4,tocIndex:1},{value:" mark",paraId:4,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"Configure the visual channels of the ",paraId:7,tocIndex:2},{value:"area",paraId:7,tocIndex:2},{value:" mark.",paraId:7,tocIndex:2},{value:"Property",paraId:8,tocIndex:2},{value:"Description",paraId:8,tocIndex:2},{value:"Type",paraId:8,tocIndex:2},{value:"Default",paraId:8,tocIndex:2},{value:"Required",paraId:8,tocIndex:2},{value:"x",paraId:8,tocIndex:2},{value:"Bind the ",paraId:8,tocIndex:2},{value:"x",paraId:8,tocIndex:2},{value:" property channel of the ",paraId:8,tocIndex:2},{value:"link",paraId:8,tocIndex:2},{value:" mark, can be a single string representing the ",paraId:8,tocIndex:2},{value:"x",paraId:8,tocIndex:2},{value:" channel, or directly through an array for both ",paraId:8,tocIndex:2},{value:"x",paraId:8,tocIndex:2},{value:" and ",paraId:8,tocIndex:2},{value:"x1",paraId:8,tocIndex:2},{value:" channels",paraId:8,tocIndex:2},{value:"encode",paraId:9,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"✓",paraId:8,tocIndex:2},{value:"x1",paraId:8,tocIndex:2},{value:"Bind the ",paraId:8,tocIndex:2},{value:"x1",paraId:8,tocIndex:2},{value:" property channel of the ",paraId:8,tocIndex:2},{value:"link",paraId:8,tocIndex:2},{value:" mark, representing the ",paraId:8,tocIndex:2},{value:"x",paraId:8,tocIndex:2},{value:" value of the ending direction point.",paraId:8,tocIndex:2},{value:"encode",paraId:10,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"✓",paraId:8,tocIndex:2},{value:"y",paraId:8,tocIndex:2},{value:"Bind the ",paraId:8,tocIndex:2},{value:"y",paraId:8,tocIndex:2},{value:" property channel of the ",paraId:8,tocIndex:2},{value:"link",paraId:8,tocIndex:2},{value:" mark, can be a single string representing the ",paraId:8,tocIndex:2},{value:"y",paraId:8,tocIndex:2},{value:" channel, or directly through an array for both ",paraId:8,tocIndex:2},{value:"y",paraId:8,tocIndex:2},{value:" and ",paraId:8,tocIndex:2},{value:"y1",paraId:8,tocIndex:2},{value:" channels",paraId:8,tocIndex:2},{value:"encode",paraId:11,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"✓",paraId:8,tocIndex:2},{value:"y1",paraId:8,tocIndex:2},{value:"Bind the ",paraId:8,tocIndex:2},{value:"y1",paraId:8,tocIndex:2},{value:" property channel of the ",paraId:8,tocIndex:2},{value:"link",paraId:8,tocIndex:2},{value:" mark, representing the ",paraId:8,tocIndex:2},{value:"y",paraId:8,tocIndex:2},{value:" value of the ending direction point.",paraId:8,tocIndex:2},{value:"encode",paraId:12,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"✓",paraId:8,tocIndex:2},{value:"color",paraId:8,tocIndex:2},{value:"Bind the ",paraId:8,tocIndex:2},{value:"color",paraId:8,tocIndex:2},{value:" property channel of the ",paraId:8,tocIndex:2},{value:"link",paraId:8,tocIndex:2},{value:" mark. If a data field is mapped to the color channel, the data will be grouped and split into multiple areas with different colors, which can be used to divide areas or present the values of the current area",paraId:8,tocIndex:2},{value:"encode",paraId:13,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"shape",paraId:8,tocIndex:2},{value:"Bind the ",paraId:8,tocIndex:2},{value:"shape",paraId:8,tocIndex:2},{value:" property channel of the ",paraId:8,tocIndex:2},{value:"link",paraId:8,tocIndex:2},{value:" mark",paraId:8,tocIndex:2},{value:"encode",paraId:14,tocIndex:2},{value:"link",paraId:8,tocIndex:2},{value:"The ",paraId:15,tocIndex:3},{value:"link",paraId:15,tocIndex:3},{value:" mark's visual channels require values for the four fields ",paraId:15,tocIndex:3},{value:"x",paraId:15,tocIndex:3},{value:", ",paraId:15,tocIndex:3},{value:"y",paraId:15,tocIndex:3},{value:", ",paraId:15,tocIndex:3},{value:"x1",paraId:15,tocIndex:3},{value:", ",paraId:15,tocIndex:3},{value:"y1",paraId:15,tocIndex:3},{value:". The supported data formats are as follows:",paraId:15,tocIndex:3},{value:"Direct configuration of ",paraId:16,tocIndex:3},{value:"x",paraId:16,tocIndex:3},{value:", ",paraId:16,tocIndex:3},{value:"y",paraId:16,tocIndex:3},{value:"{\n  type: 'link',\n  data: [\n    { x: 10, y: 10, x1: 20, y1: 20 },\n  ],\n  encode: { x: ['x','x1'], y: ['y','y1'] }\n}\n",paraId:17,tocIndex:3},{value:"Separate configuration of ",paraId:18,tocIndex:3},{value:"x",paraId:18,tocIndex:3},{value:", ",paraId:18,tocIndex:3},{value:"y",paraId:18,tocIndex:3},{value:", ",paraId:18,tocIndex:3},{value:"x1",paraId:18,tocIndex:3},{value:", ",paraId:18,tocIndex:3},{value:"y1",paraId:18,tocIndex:3},{value:"{\n  type: 'link',\n  data: [\n    { x: 10, y: 10, x1: 20, y1: 20 },\n  ],\n  encode: { x: 'x', y: 'y', x1:'x1',y1:'y1' }\n}\n",paraId:19,tocIndex:3},{value:"The ",paraId:20,tocIndex:4},{value:"color",paraId:20,tocIndex:4},{value:" visual channel affects the ",paraId:20,tocIndex:4},{value:"link",paraId:20,tocIndex:4},{value:" mark. A single area in the ",paraId:20,tocIndex:4},{value:"link",paraId:20,tocIndex:4},{value:" mark can only use one color (or gradient color), but if a data field is mapped to the color channel, the data will be grouped and split into multiple areas:",paraId:20,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'link',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antfincdn/SM13%24lHuYH/metros.json',\n  },\n  encode: {\n    x: ['POP_1980', 'POP_2015'],\n    y: ['R90_10_1980', 'R90_10_2015'],\n    color: (d) => d.R90_10_2015 - d.R90_10_1980, // color is a numerical mapping, changing color based on the mapped value. Currently represents length, different lengths will display colors in gradient\n  },\n  scale: { x: { type: 'log' } },\n  style: { arrow: true, arrowSize: 6 },\n  axis: { x: { labelFormatter: '~s', labelTransform: 'rotate(90)' } },\n  legend: false,\n  tooltip: { title: { channel: 'color', valueFormatter: '.1f' } },\n});\n\nchart.render();\n",paraId:21,tocIndex:4},{value:"The built-in shapes supported by the ",paraId:22,tocIndex:5},{value:"link",paraId:22,tocIndex:5},{value:" mark are as follows:",paraId:22,tocIndex:5},{value:"Shape",paraId:23,tocIndex:5},{value:"Description",paraId:23,tocIndex:5},{value:"Example",paraId:23,tocIndex:5},{value:"link",paraId:23,tocIndex:5},{value:"Connection line|vector",paraId:23,tocIndex:5},{value:"arc",paraId:23,tocIndex:5},{value:"Arc line",paraId:23,tocIndex:5},{value:"smooth",paraId:23,tocIndex:5},{value:"Bezier curve",paraId:23,tocIndex:5},{value:"vhv",paraId:23,tocIndex:5},{value:"Right-angle polyline",paraId:23,tocIndex:5},{value:"Property",paraId:24,tocIndex:6},{value:"Description",paraId:24,tocIndex:6},{value:"Type",paraId:24,tocIndex:6},{value:"Default",paraId:24,tocIndex:6},{value:"Required",paraId:24,tocIndex:6},{value:"arrow",paraId:24,tocIndex:6},{value:"Control whether to show arrows. Essentially a line segment, not a graphic, inherits all properties of straight lines.",paraId:24,tocIndex:6},{value:"boolean",paraId:24,tocIndex:6},{value:"false",paraId:24,tocIndex:6},{value:"arrowSize",paraId:24,tocIndex:6},{value:"The size of the arrow icon, can specify pixel values or relative values of arrow length. This property is for arrow length, width is configured by 'lineWidth'",paraId:24,tocIndex:6},{value:"string",paraId:24,tocIndex:6},{value:" | ",paraId:24,tocIndex:6},{value:"number",paraId:24,tocIndex:6},{value:"40%",paraId:24,tocIndex:6},{value:"stroke",paraId:24,tocIndex:6},{value:"The color of the graphic",paraId:24,tocIndex:6},{value:"string",paraId:24,tocIndex:6},{value:" | ",paraId:24,tocIndex:6},{value:"Function<string>",paraId:24,tocIndex:6},{value:"-",paraId:24,tocIndex:6},{value:"strokeOpacity",paraId:24,tocIndex:6},{value:"Graphic transparency",paraId:24,tocIndex:6},{value:"number",paraId:24,tocIndex:6},{value:" | ",paraId:24,tocIndex:6},{value:"Function<number>",paraId:24,tocIndex:6},{value:"-",paraId:24,tocIndex:6},{value:"lineWidth",paraId:24,tocIndex:6},{value:"The width of the graphic",paraId:24,tocIndex:6},{value:"number",paraId:24,tocIndex:6},{value:" | ",paraId:24,tocIndex:6},{value:"Function<number>",paraId:24,tocIndex:6},{value:"-",paraId:24,tocIndex:6},{value:"lineDash",paraId:24,tocIndex:6},{value:"Dashed line configuration for stroke, the first value is the length of each dash segment, the second value is the distance between segments. Setting lineDash to [0, 0] results in no stroke. Since arrows also inherit line style configuration, it's best not to configure this style when using arrows",paraId:24,tocIndex:6},{value:"[number,number]",paraId:24,tocIndex:6},{value:" | ",paraId:24,tocIndex:6},{value:"Function<[number, number]>",paraId:24,tocIndex:6},{value:"-",paraId:24,tocIndex:6},{value:"opacity",paraId:24,tocIndex:6},{value:"Overall transparency of the graphic",paraId:24,tocIndex:6},{value:"number",paraId:24,tocIndex:6},{value:" | ",paraId:24,tocIndex:6},{value:"Function<number>",paraId:24,tocIndex:6},{value:"-",paraId:24,tocIndex:6},{value:"shadowColor",paraId:24,tocIndex:6},{value:"Graphic shadow color",paraId:24,tocIndex:6},{value:"string",paraId:24,tocIndex:6},{value:" | ",paraId:24,tocIndex:6},{value:"Function<string>",paraId:24,tocIndex:6},{value:"-",paraId:24,tocIndex:6},{value:"shadowBlur",paraId:24,tocIndex:6},{value:"Gaussian blur coefficient of the graphic shadow",paraId:24,tocIndex:6},{value:"number",paraId:24,tocIndex:6},{value:" | ",paraId:24,tocIndex:6},{value:"Function<number>",paraId:24,tocIndex:6},{value:"-",paraId:24,tocIndex:6},{value:"shadowOffsetX",paraId:24,tocIndex:6},{value:"Set the horizontal distance of the shadow from the graphic",paraId:24,tocIndex:6},{value:"number",paraId:24,tocIndex:6},{value:" | ",paraId:24,tocIndex:6},{value:"Function<number>",paraId:24,tocIndex:6},{value:"-",paraId:24,tocIndex:6},{value:"shadowOffsetY",paraId:24,tocIndex:6},{value:"Set the vertical distance of the shadow from the graphic",paraId:24,tocIndex:6},{value:"number",paraId:24,tocIndex:6},{value:" | ",paraId:24,tocIndex:6},{value:"Function<number>",paraId:24,tocIndex:6},{value:"-",paraId:24,tocIndex:6},{value:"cursor",paraId:24,tocIndex:6},{value:"Mouse style. Same as CSS mouse style, default 'default'.",paraId:24,tocIndex:6},{value:"string",paraId:24,tocIndex:6},{value:" | ",paraId:24,tocIndex:6},{value:"Function<string>",paraId:24,tocIndex:6},{value:"default",paraId:24,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'link',\n  height: 260,\n  autoFit: true,\n  data: [{ x1: 10, y1: 10, x2: 20, y2: 20 }],\n  encode: { x: ['x1', 'x2'], y: ['y1', 'y2'] },\n  style: {\n    arrow: true,\n    arrowSize: 6, // arrow length\n    lineWidth: 8, // line width\n    stroke: '#1f1aa1', // color\n    opacity: 0.7,\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:25,tocIndex:6},{value:"How to specify the length of arrow icons?",paraId:26,tocIndex:7},{value:"There are two ways to specify the length of arrow icons: one is by entering pixel values, such as ",paraId:27,tocIndex:7},{value:"40",paraId:27,tocIndex:7},{value:", to specify a fixed length; the other is by specifying a percentage, such as ",paraId:27,tocIndex:7},{value:"30%",paraId:27,tocIndex:7},{value:", to specify a relative length based on the arrow length reference. The default value is ",paraId:27,tocIndex:7},{value:"40%",paraId:27,tocIndex:7},{value:". Example as follows:",paraId:27,tocIndex:7},{value:"chart\n  .link()\n  // ...\n  .style({\n    arrowSize: 40,\n    // arrowSize: '30%',\n  });\n",paraId:28,tocIndex:7}]},12998:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(57100);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"liquid",paraId:0,tocIndex:0},{value:" mark can be used to draw various types of liquid charts (ripple charts or wave charts), conveying information or enhancing user experience through the visual fluctuation that simulates the dynamic process of ripples spreading on water surfaces. It is commonly used in UI design, data visualization, or animation effects.",paraId:0,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  height: 300,\n  type: 'liquid',\n  data: 0.3, // [0, 1]\n  // Configure styles\n  style: {\n    outlineBorder: 4, // Outline border width\n    outlineDistance: 8, // Wave motion time\n    waveLength: 128, // Wave length\n  },\n  // Configure coordinate system\n  coordinate: {},\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"For more examples, you can visit the ",paraId:2,tocIndex:0},{value:"Chart Examples - Liquid",paraId:3,tocIndex:0},{value:" page.",paraId:2,tocIndex:0},{value:"Property",paraId:4,tocIndex:1},{value:"Description",paraId:4,tocIndex:1},{value:"Type",paraId:4,tocIndex:1},{value:"Default",paraId:4,tocIndex:1},{value:"Required",paraId:4,tocIndex:1},{value:"style",paraId:4,tocIndex:1},{value:"Configure the graphic style of ",paraId:4,tocIndex:1},{value:"liquid",paraId:4,tocIndex:1},{value:" mark",paraId:4,tocIndex:1},{value:"style",paraId:5,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"Configure the style of the ",paraId:6,tocIndex:2},{value:"liquid",paraId:6,tocIndex:2},{value:" mark.",paraId:6,tocIndex:2},{value:"Property",paraId:7,tocIndex:2},{value:"Description",paraId:7,tocIndex:2},{value:"Type",paraId:7,tocIndex:2},{value:"Default",paraId:7,tocIndex:2},{value:"Required",paraId:7,tocIndex:2},{value:"shape",paraId:7,tocIndex:2},{value:"Shape",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:"circle",paraId:7,tocIndex:2},{value:"stroke",paraId:7,tocIndex:2},{value:"Border color",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"fill",paraId:7,tocIndex:2},{value:"Wave color",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"outlineBorder",paraId:7,tocIndex:2},{value:"Border width",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:"2",paraId:7,tocIndex:2},{value:"outlineDistance",paraId:7,tocIndex:2},{value:"Inner spacing",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:"0",paraId:7,tocIndex:2},{value:"waveLength",paraId:7,tocIndex:2},{value:"Wave length",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:"192",paraId:7,tocIndex:2},{value:"waveCount",paraId:7,tocIndex:2},{value:"Wave count",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:"3",paraId:7,tocIndex:2},{value:"backgroundFill",paraId:7,tocIndex:2},{value:"Background color",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"contentText",paraId:7,tocIndex:2},{value:"Text content",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"contentFill",paraId:7,tocIndex:2},{value:"Text color",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"contentFontSize",paraId:7,tocIndex:2},{value:"Text size",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'liquid',\n  data: 0.75,\n  style: {\n    fill: 'pink', // Wave color\n    stroke: 'red', // Stroke color\n    backgroundFill: '#f5f5f5', // Background color\n    // outline for stroke style\n    outlineBorder: 10, // Outline border width\n    outlineDistance: 10, // Wave motion time\n    // wave configuration\n    waveLength: 188, // Wave length\n    waveCount: 6, // Wave count, automatically assigns opacity from 1 to 0.2\n    // content for center text configuration\n    contentText: 'center text',\n    contentFill: '#000',\n    contentStroke: '#fff',\n    contentFontSize: 32,\n    contentLineWidth: 3,\n  },\n  // Configure coordinate system\n  coordinate: {},\n});\n\nchart.render();\n",paraId:8,tocIndex:2},{value:"The built-in shapes supported by the ",paraId:9,tocIndex:3},{value:"liquid",paraId:9,tocIndex:3},{value:" mark are as follows:",paraId:9,tocIndex:3},{value:"Shape",paraId:10,tocIndex:3},{value:"Description",paraId:10,tocIndex:3},{value:"Example",paraId:10,tocIndex:3},{value:"rect",paraId:10,tocIndex:3},{value:"Rectangle",paraId:10,tocIndex:3},{value:"circle",paraId:10,tocIndex:3},{value:"Circle",paraId:10,tocIndex:3},{value:"pin",paraId:10,tocIndex:3},{value:"Water drop",paraId:10,tocIndex:3},{value:"triangle",paraId:10,tocIndex:3},{value:"Triangle",paraId:10,tocIndex:3},{value:"If you need to customize shapes, you can provide implementation through custom shape. The callback ",paraId:11,tocIndex:3},{value:"(x, y, r, w, h) => string",paraId:11,tocIndex:3},{value:" receives parameters x, y (center coordinates), r (maximum radius for drawing circles), w, h (chart drawable width and height), to draw the desired shape. This requires some understanding of SVG or Canvas.",paraId:11,tocIndex:3},{value:"Try drawing your own:",paraId:12,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart\n  .liquid()\n  .data(0.3)\n  .style({\n    shape: (x, y, r) => {\n      const path = [];\n      const w = r * 2;\n\n      for (let i = 0; i < 5; i++) {\n        path.push([\n          i === 0 ? 'M' : 'L',\n          (Math.cos(((18 + i * 72) * Math.PI) / 180) * w) / 2 + x,\n          (-Math.sin(((18 + i * 72) * Math.PI) / 180) * w) / 2 + y,\n        ]);\n        path.push([\n          'L',\n          (Math.cos(((54 + i * 72) * Math.PI) / 180) * w) / 4 + x,\n          (-Math.sin(((54 + i * 72) * Math.PI) / 180) * w) / 4 + y,\n        ]);\n      }\n      path.push(['Z']);\n      return path;\n    },\n    outlineBorder: 4,\n    outlineDistance: 8,\n    waveLength: 128,\n  });\n\nchart.render();\n\n",paraId:13,tocIndex:3}]},94572:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(60485);const t=[{value:"In G2, ",paraId:0},{value:"there is no concept of charts",paraId:0},{value:", instead ",paraId:0},{value:"marks",paraId:0},{value:" are used as the basic visual component units. Any chart can be composed of one or more marks.",paraId:0},{value:'Marks are the most fundamental graphic units in the G2 drawing framework and are one of the core components that constitute complex charts. They have diverse characteristics and powerful expressiveness, serving as "atomic" components for building charts that can be flexibly used. Through proper combination, arrangement, and customization of marks, users can not only meet conventional chart drawing needs but also create highly personalized and complex visualization works. This freedom gives marks a wide range of application space in data visualization, including but not limited to basic graphics such as scatter plots, bar charts, pie charts, and more structured or innovative hybrid charts. This characteristic enables G2 to demonstrate great advantages in drawing flexibility and customization capabilities.',paraId:1},{value:"As mentioned above, by adding Point marks for scatter plots and Link marks for connection graphs to a chart, we can obtain a point-line connection graph with annotations.",paraId:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 180,\n});\n\nchart.options({\n  type: 'view',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n    transform: [\n      {\n        type: 'map',\n        callback: (d) => ({\n          ...d,\n          body_mass_g: +d.body_mass_g,\n        }),\n      },\n    ],\n  },\n  children: [\n    // point mark\n    {\n      type: 'point',\n      encode: { x: 'body_mass_g', y: 'species' },\n      style: { stroke: '#000' },\n      tooltip: { items: [{ channel: 'x' }] },\n    },\n    // link mark\n    {\n      type: 'link',\n      encode: { x: 'body_mass_g', y: 'species' },\n      transform: [{ type: 'groupY', x: 'min', x1: 'max' }],\n      style: { stroke: '#000' },\n      tooltip: false,\n    },\n    // point mark for drawing median line\n    {\n      type: 'point',\n      encode: { y: 'species', x: 'body_mass_g', shape: 'line', size: 12 },\n      transform: [{ type: 'groupY', x: 'median' }],\n      style: { stroke: 'red' },\n      tooltip: { items: [{ channel: 'x' }] },\n    },\n  ],\n});\n\nchart.render();\n",paraId:3},{value:"Based on the data dimensions that marks can represent, they can be categorized as:",paraId:4},{value:"Zero-dimensional: Points are common zero-dimensional geometric marks, with only position information",paraId:5},{value:"One-dimensional: Common one-dimensional geometric marks include lines",paraId:5},{value:"Two-dimensional: Two-dimensional planes",paraId:5},{value:"Three-dimensional: Common three-dimensional geometric marks include cubes and cylinders",paraId:5},{value:"The freedom of marks is related to the visual channel ",paraId:6},{value:"size",paraId:6},{value:" that data can be mapped to the graphics. From this perspective:",paraId:6},{value:"Points can map two data fields to the point size (although in reality we only map one).",paraId:7},{value:"Lines can map one data field to the line width.",paraId:7},{value:"Rectangles in bar charts can map one data field to the width.",paraId:7},{value:"Closed polygons cannot use data mapping to size.",paraId:7},{value:"The representation form of marks is related to the visual channel ",paraId:8},{value:"color",paraId:8},{value:" that data can be mapped to the graphics. From this perspective:",paraId:8},{value:"Representation form as closed graphics with fill color. For example, the ",paraId:9},{value:"point",paraId:9},{value:" shape of point marks, the ",paraId:9},{value:"rect",paraId:9},{value:" shape of interval marks, etc. The color channel is generally represented in the mark's fill color ",paraId:9},{value:"fill",paraId:9},{value:".",paraId:9},{value:"Representation form as lines and hollow graphics. For example, all shapes of line marks, the ",paraId:9},{value:"hollow",paraId:9},{value:" shape of interval marks, etc. The color channel is generally represented in the mark's line color ",paraId:9},{value:"stroke",paraId:9},{value:".",paraId:9},{value:"Representation form as text. For example, text marks, wordCloud marks, etc. The color channel is generally represented in the mark's text color ",paraId:9},{value:"fill",paraId:9},{value:".",paraId:9},{value:"Currently, G2 supports the following built-in marks:",paraId:10},{value:"type",paraId:11},{value:"Description",paraId:11},{value:"Properties",paraId:11},{value:"Examples",paraId:11},{value:"area",paraId:11},{value:"Use area fill to show data trends, suitable for stacking",paraId:11},{value:"area",paraId:12},{value:" ",paraId:11},{value:" ",paraId:11},{value:"box",paraId:11},{value:"Basic box plot, showing data distribution and outliers",paraId:11},{value:"box",paraId:13},{value:"boxplot",paraId:11},{value:"Box plot with aggregation calculation, auto-calculates quartiles",paraId:11},{value:"boxplot",paraId:14},{value:"cell",paraId:11},{value:"Divides space into blocks for visualization, used for calendar and heatmaps",paraId:11},{value:"cell",paraId:15},{value:"chord",paraId:11},{value:"Chord diagram showing relationship strength between entities",paraId:11},{value:"chord",paraId:16},{value:"density",paraId:11},{value:"Kernel density estimation, commonly used for violin plots",paraId:11},{value:"density",paraId:17},{value:"gauge",paraId:11},{value:"Gauge chart showing progress indicators",paraId:11},{value:"gauge",paraId:18},{value:"heatmap",paraId:11},{value:"2D density distribution using color encoding for data density",paraId:11},{value:"heatmap",paraId:19},{value:"image",paraId:11},{value:"Renders images at specified positions",paraId:11},{value:"image",paraId:20},{value:"interval",paraId:11},{value:"Basic bar/column chart, can generate pie charts through coordinate transformation",paraId:11},{value:"interval",paraId:21},{value:" ",paraId:11},{value:" ",paraId:11},{value:" ",paraId:11},{value:"line",paraId:11},{value:"Line chart supporting smooth curves and step lines",paraId:11},{value:"line",paraId:22},{value:" ",paraId:11},{value:" ",paraId:11},{value:" ",paraId:11},{value:" ",paraId:11},{value:"lineX",paraId:11},{value:"Vertical auxiliary line, commonly used for marking specific values",paraId:11},{value:"lineX",paraId:23},{value:"lineY",paraId:11},{value:"Horizontal auxiliary line, commonly used for marking thresholds",paraId:11},{value:"lineY",paraId:24},{value:"link",paraId:11},{value:"Arrow mark showing relationships between nodes",paraId:11},{value:"link",paraId:25},{value:"liquid",paraId:11},{value:"Liquid chart showing percentage progress",paraId:11},{value:"liquid",paraId:26},{value:"point",paraId:11},{value:"Scatter plot encoding multi-dimensional data through size/color",paraId:11},{value:"point",paraId:27},{value:"polygon",paraId:11},{value:"Polygon mark, often used with layout algorithms",paraId:11},{value:"polygon",paraId:28},{value:"range",paraId:11},{value:"Rectangle area mark for highlighting specific intervals",paraId:11},{value:"range",paraId:29},{value:"rangeX",paraId:11},{value:"Vertical direction area mark",paraId:11},{value:"rangeX",paraId:30},{value:"rangeY",paraId:11},{value:"Horizontal direction area mark",paraId:11},{value:"rangeY",paraId:31},{value:"rect",paraId:11},{value:"Basic rectangle mark for histograms/treemaps",paraId:11},{value:"rect",paraId:32},{value:"shape",paraId:11},{value:"Fully customizable graphic mark",paraId:11},{value:"shape",paraId:33},{value:"text",paraId:11},{value:"Data label mark supporting rich text formatting",paraId:11},{value:"text",paraId:34},{value:"vector",paraId:11},{value:"Vector field mark showing direction/strength dual-dimensional data",paraId:11},{value:"vector",paraId:35},{value:"wordCloud",paraId:11},{value:"Word cloud encoding word frequency through text size",paraId:11},{value:"wordCloud",paraId:36},{value:"Each graphic mark is an independent entity, with the mark type specified through the ",paraId:37,tocIndex:0},{value:"type",paraId:37,tocIndex:0},{value:' property. Marks are the core atomic units of the G2 visualization system and are leaf nodes in the view tree. As "first-class citizens" of G2, their core components include the following concepts:',paraId:37,tocIndex:0},{value:"Data Related",paraId:38,tocIndex:0},{value:"data",paraId:39,tocIndex:0},{value:" Visualization raw data source, supporting multiple data formats and dynamic update mechanisms. Data is mapped to graphic property space through encoding",paraId:40,tocIndex:0},{value:"encode",paraId:41,tocIndex:0},{value:" Encoding channels from data to graphic properties. For example, mapping height to the x-axis, weight to the y-axis, and gender to the color channel",paraId:40,tocIndex:0},{value:"scale",paraId:42,tocIndex:0},{value:" Controls mapping rules from data to visual channels. Includes various scale types such as continuous, categorical, and temporal",paraId:40,tocIndex:0},{value:"Graphic Generation",paraId:43,tocIndex:0},{value:"transform",paraId:44,tocIndex:0},{value:" Data transformation. Supports data stacking (stack), grouping (dodge), jittering (jitter), symmetry (symmetric) and other adjustment methods to solve graphic overlap problems",paraId:45,tocIndex:0},{value:"coordinate",paraId:46,tocIndex:0},{value:" Coordinate system transformation. Supports Cartesian coordinates, polar coordinates, spiral coordinates, etc. The same geometric mark presents different forms under different coordinate systems",paraId:45,tocIndex:0},{value:"Visual Appearance",paraId:47,tocIndex:0},{value:"style",paraId:48,tocIndex:0},{value:" Visual styles of graphic elements. Supports configuring fill color, stroke, opacity and other properties",paraId:49,tocIndex:0},{value:"viewStyle",paraId:50,tocIndex:0},{value:" Style configuration for view container background, margins, etc.",paraId:49,tocIndex:0},{value:"Interactive Dynamics",paraId:51,tocIndex:0},{value:"animate",paraId:52,tocIndex:0},{value:" Controls three types of animations:\nenter: New element animation\nupdate: Data update animation\nexit: Element destruction animation",paraId:53,tocIndex:0},{value:"state",paraId:54,tocIndex:0},{value:" Defines style changes for elements in different interactive states (active/inactive/selected/unselected)",paraId:53,tocIndex:0},{value:"Chart Components",paraId:55,tocIndex:0},{value:"title",paraId:56,tocIndex:0},{value:" Chart title. Supports configuring title and subtitle",paraId:57,tocIndex:0},{value:"label",paraId:58,tocIndex:0},{value:" Data label system. Supports anti-overlap layout, custom content, connector lines and other features, adapting to different mark types",paraId:57,tocIndex:0},{value:"axis",paraId:59,tocIndex:0},{value:" Coordinate axis. Supports custom configuration of ticks, grid lines, and labels",paraId:57,tocIndex:0},{value:"legend",paraId:60,tocIndex:0},{value:" Legend. Supports continuous/categorical legend interactions",paraId:57,tocIndex:0},{value:"tooltip",paraId:61,tocIndex:0},{value:" Tooltip information. Supports field mapping, formatting, and custom content",paraId:57,tocIndex:0},{value:"scrollbar",paraId:62,tocIndex:0},{value:" Scrollbar component. Scrollbars are disabled by default. Solves the problem of too dense chart information that cannot be fully displayed",paraId:57,tocIndex:0},{value:"slider",paraId:63,tocIndex:0},{value:" Thumbnail axis component. Can be used to filter data, allowing users to focus on local data when data volume is large, serving as an auxiliary data viewing component",paraId:57,tocIndex:0},{value:"Extension Control",paraId:64,tocIndex:0},{value:"theme",paraId:65,tocIndex:0},{value:" Theme configuration system. Can modify default color palettes, fonts, component styles and other visual specifications, supporting theme switching",paraId:66,tocIndex:0},{value:"interaction",paraId:67,tocIndex:0},{value:" Interaction behavior library. Built-in element selection, view zooming, tooltip linking and other interaction modes",paraId:66,tocIndex:0},{value:"({\n  type: 'mark',\n  data: [],\n  encode: {},\n  scale: {},\n  transform: [],\n  coordinate: {},\n  style: {},\n  viewStyle: {},\n  animate: {},\n  state: {},\n  label: {},\n  title: {},\n  axis: {},\n  legend: {},\n  tooltip: {},\n  scrollbar: {},\n  slider: {},\n  interaction: {},\n  theme: {},\n});\n",paraId:68,tocIndex:0},{value:"Marks can be declared as top-level types as follows:",paraId:69,tocIndex:1},{value:"({\n  type: 'interval',\n  encode: {\n    x: 'name',\n    y: 'value',\n  },\n});\n",paraId:70,tocIndex:1},{value:"They can also be placed inside a View to add multiple marks to the view:",paraId:71,tocIndex:1},{value:"({\n  type: 'view',\n  children: [{ type: 'line' }, { type: 'point' }],\n});\n",paraId:72,tocIndex:1},{value:"Marks in G2 have many features, including templating, stackability, composability, etc. Proper use of these features allows for quick definition and use of various graphic styles, combining multiple marks to display richer graphic effects. These flexible and highly customizable features enable marks to meet multi-level needs from basic charts to complex visualizations.",paraId:73,tocIndex:2},{value:"Each built-in mark is a graphic template that generates a series of ",paraId:74,tocIndex:3},{value:"data-driven",paraId:74,tocIndex:3},{value:" graphics, where each graphic corresponds to one or more ",paraId:74,tocIndex:3},{value:"data items",paraId:74,tocIndex:3},{value:". For example, in the scatter plot below, there is only one Point mark, and this mark generates multiple circles, each circle corresponding to one data item.",paraId:74,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  },\n  encode: { x: 'height', y: 'weight', color: 'gender' },\n});\n\nchart.render();\n",paraId:75,tocIndex:3},{value:"In the line chart below, one line corresponds to multiple data items.",paraId:76,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  width: 900,\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  },\n  encode: { x: 'date', y: 'close' },\n});\n\nchart.render();\n",paraId:77,tocIndex:3},{value:"G2's marks are stackable, in other words: multiple marks can be added to one view to enrich chart display effects.",paraId:78,tocIndex:4},{value:"The following example adds both line and point marks to the chart:",paraId:79,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  children: [\n    {\n      type: 'line',\n      encode: { x: 'year', y: 'value' },\n    },\n    {\n      type: 'point',\n      encode: { x: 'year', y: 'value' },\n      tooltip: false, // If you don't want to show tooltip for a specific mark, you can disable it individually\n    },\n  ],\n});\nchart.render();\n",paraId:80,tocIndex:4},{value:"Of course, we can also combine more marks to draw a complex interval curve area chart with graphic meaning.",paraId:81,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/range-spline-area.json',\n    transform: [\n      {\n        type: 'map',\n        callback: ([x, low, high, v2, v3]) => ({\n          x,\n          low,\n          high,\n          v2,\n          v3,\n        }),\n      },\n    ],\n  },\n  scale: { x: { type: 'linear', tickCount: 10 } },\n  axis: { y: { title: false } },\n  children: [\n    {\n      type: 'area',\n      encode: { x: 'x', y: ['low', 'high'], shape: 'smooth' },\n      style: { fillOpacity: 0.65, fill: '#64b5f6', lineWidth: 1 },\n    },\n    {\n      type: 'point',\n      encode: { x: 'x', y: 'v2', size: 2, shape: 'point' },\n      tooltip: { items: ['v2'] },\n    },\n    {\n      type: 'line',\n      encode: { x: 'x', y: 'v3', color: '#FF6B3B', shape: 'smooth' },\n    },\n  ],\n});\nchart.render();\n",paraId:82,tocIndex:4},{value:"Marks in G2 can be composed into one mark through a mechanism and then used, for example, the point line chart above:",paraId:83,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\n// Define a composite mark\nfunction PointLine({ encode, data } = {}) {\n  return [\n    { type: 'line', data, encode },\n    { type: 'point', data, encode },\n  ];\n}\n\nconst data = [\n  { year: '1991', value: 3 },\n  { year: '1992', value: 4 },\n  { year: '1993', value: 3.5 },\n  { year: '1994', value: 5 },\n  { year: '1995', value: 4.9 },\n  { year: '1996', value: 6 },\n  { year: '1997', value: 7 },\n  { year: '1998', value: 9 },\n  { year: '1999', value: 13 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// Use the composite mark in Options\nchart.mark(PointLine).data(data).encode('x', 'year').encode('y', 'value');\n\n// Use the composite mark in Spec\nchart.options({\n  type: PointLine,\n  data,\n  encode: { x: 'year', y: 'value' },\n});\n\nchart.render();\n",paraId:84,tocIndex:5},{value:"The composability feature of marks provides a simple yet powerful way to extend the capabilities of G2. G2 also uses this mechanism to implement some rather complex marks, such as Sankey diagrams: using two Polygon marks for composition.",paraId:85,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 900,\n  height: 600,\n});\n\n// Sankey mark\nchart.options({\n  type: 'sankey',\n  layout: { nodeAlign: 'center', nodePadding: 0.03 },\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/energy.json',\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => ({\n          links: data,\n        }),\n      },\n    ],\n  },\n  style: {\n    labelSpacing: 3,\n    labelFontWeight: 'bold',\n    nodeStrokeWidth: 1.2,\n    linkFillOpacity: 0.4,\n  },\n});\n\nchart.render();\n",paraId:86,tocIndex:5},{value:"G2 marks support multiple ",paraId:87,tocIndex:6},{value:"transforms",paraId:88,tocIndex:6},{value:", allowing flexible adjustment of the geometric shape, style, or spatial layout of marks to achieve rich visual presentation effects. These transforms can not only be used for basic graphic transformations such as grouping, stacking, and binning, but can also be combined with data-driven dynamic adjustments to adapt to complex visualization scenario requirements. Through simple configuration, users can achieve intuitive mapping between data and visual elements in charts, improving chart expressiveness and readability.",paraId:87,tocIndex:6},{value:"Below is a color-categorized histogram after ",paraId:89,tocIndex:6},{value:"binX",paraId:90,tocIndex:6},{value:" and ",paraId:89,tocIndex:6},{value:"stackY",paraId:91,tocIndex:6},{value:" transforms.",paraId:89,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'rect',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n  },\n  encode: { x: 'weight', color: 'sex' },\n  transform: [\n    { type: 'binX', y: 'count' },\n    { type: 'stackY', orderBy: 'series' },\n  ],\n  style: { inset: 0.5 },\n});\n\nchart.render();\n",paraId:92,tocIndex:6},{value:"By configuring multiple transforms, we can obtain complex charts with specific representation forms. Below is an aggregated normalized stacked bar chart obtained after multiple transforms including ",paraId:93,tocIndex:6},{value:"normalizeY",paraId:94,tocIndex:6},{value:" and ",paraId:93,tocIndex:6},{value:"stackY",paraId:95,tocIndex:6},{value:".",paraId:93,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/87b2ff47-2a33-4509-869c-dae4cdd81163.csv',\n    transform: [{ type: 'filter', callback: (d) => d.year === 2000 }],\n  },\n  encode: { x: 'age', y: 'people', color: 'sex' },\n  transform: [\n    { type: 'groupX', y: 'sum' },\n    { type: 'stackY' },\n    { type: 'normalizeY' },\n  ],\n  scale: { color: { type: 'ordinal', range: ['#ca8861', '#675193'] } },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  axis: { y: { labelFormatter: '.0%' } },\n  labels: [{ text: 'people', position: 'inside', fill: 'white' }],\n  tooltip: { items: [{ channel: 'y', valueFormatter: '.0%' }] },\n});\n\nchart.render();\n",paraId:96,tocIndex:6},{value:"Annotations",paraId:97,tocIndex:7},{value:" are graphic elements used to explain and emphasize areas or information that need focused attention in visualization charts. In G2 5.0, dedicated annotation components are not provided separately. Instead, annotation functionality is achieved through flexible mark configuration. In other words, annotations are actually a form of mark expression, where some marks (such as Text, Image, etc.) can be used in annotation scenarios. This design approach unifies the usage logic of marks and annotations, giving users greater freedom and flexibility to easily meet various annotation needs.",paraId:97,tocIndex:7},{value:"Since annotations are also a type of mark, they can also perform transforms. For example, the ",paraId:98,tocIndex:8},{value:"Select",paraId:99,tocIndex:8},{value:" transform below.",paraId:98,tocIndex:8},{value:"The Select mark transform provides the ability to select data from a group of graphics based on specified channels and selectors. For example, in the following example, the country with the largest GDP in each continent is annotated.",paraId:100,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/1ecf85d2-8279-46a1-898d-d2e1814617f9.json',\n  },\n  children: [\n    {\n      type: 'point',\n      encode: { x: 'GDP', y: 'LifeExpectancy', color: 'Continent' },\n    },\n    {\n      type: 'text',\n      encode: {\n        text: 'Country',\n        x: 'GDP',\n        y: 'LifeExpectancy',\n        series: 'Continent',\n      },\n      // Group graphics by series, which is Continent\n      // Select through x channel, select the maximum, which is the largest GDP\n      transform: [{ type: 'select', channel: 'x', selector: 'max' }],\n      style: { textAlign: 'end' },\n    },\n  ],\n});\n\nchart.render();\n",paraId:101,tocIndex:8},{value:"For simple text marks that don't require grouping, you can use ",paraId:102,tocIndex:8},{value:"Data Labels",paraId:103,tocIndex:8},{value:", otherwise consider the above approach.",paraId:102,tocIndex:8},{value:"In grammar of graphics, the core of annotations lies in accurate positioning to appropriate locations for effective communication of key information. In G2, annotation positioning supports the following three methods:",paraId:104,tocIndex:9},{value:"Data-driven positioning",paraId:105,tocIndex:9},{value:": Based on data values, bind annotations to specific chart data points or data ranges. This method can dynamically adapt to data changes, for example, when data updates or animation interactions occur, annotation positions will adjust accordingly.",paraId:105,tocIndex:9},{value:"Absolute positioning",paraId:106,tocIndex:9},{value:": Place annotations at specific positions on the canvas through fixed pixel coordinates, with no direct relationship to data. This method is suitable for adding titles, descriptions, or other annotation content unrelated to data logic.",paraId:106,tocIndex:9},{value:"Relative positioning",paraId:107,tocIndex:9},{value:": Define annotation positions through percentage or relative position parameters with reference to coordinate systems or graphic areas. This method is suitable for providing flexible layout when emphasizing or annotating areas of the overall chart.",paraId:107,tocIndex:9},{value:"In G2, you can specify data-driven positioning through ",paraId:108,tocIndex:10},{value:"data",paraId:108,tocIndex:10},{value:". For example, in the following example where we want to annotate the safe daily intake of sugar and fat, it can be implemented as follows.",paraId:108,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  children: [\n    {\n      type: 'point',\n      data: [\n        { x: 95, y: 95, z: 13.8, name: 'BE', country: 'Belgium' },\n        { x: 86.5, y: 102.9, z: 14.7, name: 'DE', country: 'Germany' },\n        { x: 80.8, y: 91.5, z: 15.8, name: 'FI', country: 'Finland' },\n        { x: 80.4, y: 102.5, z: 12, name: 'NL', country: 'Netherlands' },\n        { x: 80.3, y: 86.1, z: 11.8, name: 'SE', country: 'Sweden' },\n        { x: 78.4, y: 70.1, z: 16.6, name: 'ES', country: 'Spain' },\n        { x: 74.2, y: 68.5, z: 14.5, name: 'FR', country: 'France' },\n        { x: 73.5, y: 83.1, z: 10, name: 'NO', country: 'Norway' },\n        { x: 71, y: 93.2, z: 24.7, name: 'UK', country: 'United Kingdom' },\n        { x: 69.2, y: 57.6, z: 10.4, name: 'IT', country: 'Italy' },\n        { x: 68.6, y: 20, z: 16, name: 'RU', country: 'Russia' },\n        { x: 65.5, y: 126.4, z: 35.3, name: 'US', country: 'United States' },\n        { x: 65.4, y: 50.8, z: 28.5, name: 'HU', country: 'Hungary' },\n        { x: 63.4, y: 51.8, z: 15.4, name: 'PT', country: 'Portugal' },\n        { x: 64, y: 82.9, z: 31.3, name: 'NZ', country: 'New Zealand' },\n      ],\n      encode: { x: 'x', y: 'y', size: 'z', shape: 'point' },\n      scale: {\n        x: { nice: true },\n        y: { nice: true, domainMax: 165, zero: true },\n        size: { range: [10, 40] },\n      },\n      style: { stroke: '#1890ff', fillOpacity: 0.3, fill: '#1890ff' },\n      legend: false,\n      labels: [\n        { text: 'name', position: 'inside', fill: '#1890ff', stroke: '#fff' },\n      ],\n    },\n    {\n      type: 'lineY',\n      data: [50],\n      style: { stroke: '#000', strokeOpacity: 0.45, lineDash: [3, 3] },\n      labels: [\n        {\n          text: 'Safe sugar intake 50g/day',\n          position: 'right',\n          textBaseline: 'bottom',\n          fill: '#000',\n          fillOpacity: 0.45,\n          background: true,\n          backgroundFill: '#000',\n          backgroundOpacity: 0.15,\n        },\n      ],\n    },\n    {\n      type: 'lineX',\n      data: [65],\n      style: { stroke: '#000', strokeOpacity: 0.45, lineDash: [3, 3] },\n      labels: [\n        {\n          text: 'Safe fat intake 65g/day',\n          position: 'top-left',\n          textBaseline: 'bottom',\n          fill: '#000',\n          fillOpacity: 0.45,\n          background: true,\n          backgroundFill: '#000',\n          backgroundOpacity: 0.15,\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:109,tocIndex:10},{value:"In addition to data-driven positioning, G2 also provides non-data-driven positioning methods. By specifying x and y properties through ",paraId:110,tocIndex:10},{value:"style",paraId:110,tocIndex:10},{value:", x and y have the following two types, corresponding to ",paraId:110,tocIndex:10},{value:"absolute positioning",paraId:110,tocIndex:10},{value:" and ",paraId:110,tocIndex:10},{value:"relative positioning",paraId:110,tocIndex:10},{value:" of annotations.",paraId:110,tocIndex:10},{value:"x and y as numbers",paraId:111,tocIndex:11},{value:": Coordinates in pixel units.",paraId:111,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  children: [\n    {\n      type: 'interval',\n      data: [\n        { genre: 'Sports', sold: 275 },\n        { genre: 'Strategy', sold: 115 },\n        { genre: 'Action', sold: 120 },\n        { genre: 'Shooter', sold: 350 },\n        { genre: 'Other', sold: 150 },\n      ],\n      encode: { y: 'sold', color: 'genre' },\n      transform: [{ type: 'stackY' }],\n      coordinate: { type: 'theta', innerRadius: 0.5 },\n    },\n    {\n      type: 'text',\n      style: {\n        x: 290, // Configure specific pixel coordinates\n        y: 200,\n        text: 'hello',\n        textAlign: 'center',\n        fontSize: 60,\n        textBaseline: 'middle',\n      },\n    },\n  ],\n});\nchart.render();\n",paraId:112,tocIndex:11},{value:"x and y as percentages",paraId:113,tocIndex:12},{value:": Percentage of content area.",paraId:113,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  children: [\n    {\n      type: 'interval',\n      data: [\n        { genre: 'Sports', sold: 275 },\n        { genre: 'Strategy', sold: 115 },\n        { genre: 'Action', sold: 120 },\n        { genre: 'Shooter', sold: 350 },\n        { genre: 'Other', sold: 150 },\n      ],\n      encode: { y: 'sold', color: 'genre' },\n      transform: [{ type: 'stackY' }],\n      coordinate: { type: 'theta', innerRadius: 0.5 },\n    },\n    {\n      type: 'text',\n      style: {\n        x: '50%', // Configure percentage coordinates\n        y: '50%',\n        text: 'hello',\n        textAlign: 'center',\n        fontSize: 60,\n        textBaseline: 'middle',\n      },\n    },\n  ],\n});\nchart.render();\n",paraId:114,tocIndex:12},{value:"How to customize mark shapes?",paraId:115,tocIndex:13},{value:"Each mark can customize shapes, and shapes determine the final presentation form of marks. Customizing shapes mainly involves three steps:",paraId:116,tocIndex:13},{value:"Define shape component.",paraId:117,tocIndex:13},{value:"Register shape.",paraId:117,tocIndex:13},{value:"Use shape.",paraId:117,tocIndex:13},{value:"First, let's see how to define a shape component. A shape component is a function that takes the graphic style ",paraId:118,tocIndex:13},{value:"style",paraId:118,tocIndex:13},{value:" and context ",paraId:118,tocIndex:13},{value:"context",paraId:118,tocIndex:13},{value:", and returns a render function ",paraId:118,tocIndex:13},{value:"render",paraId:118,tocIndex:13},{value:". Where ",paraId:118,tocIndex:13},{value:"style",paraId:118,tocIndex:13},{value:" is the processed options specified through ",paraId:118,tocIndex:13},{value:"mark.style",paraId:118,tocIndex:13},{value:", and ",paraId:118,tocIndex:13},{value:"context",paraId:118,tocIndex:13},{value:" contains the ",paraId:118,tocIndex:13},{value:"document",paraId:118,tocIndex:13},{value:" for creating graphics with ",paraId:118,tocIndex:13},{value:"@antv/g",paraId:118,tocIndex:13},{value:".",paraId:118,tocIndex:13},{value:"The returned ",paraId:119,tocIndex:13},{value:"render",paraId:119,tocIndex:13},{value:" function takes the graphic control points ",paraId:119,tocIndex:13},{value:"P",paraId:119,tocIndex:13},{value:", mapped values ",paraId:119,tocIndex:13},{value:"value",paraId:119,tocIndex:13},{value:", and default values ",paraId:119,tocIndex:13},{value:"defaults",paraId:119,tocIndex:13},{value:", and returns @antv/g graphics. Where ",paraId:119,tocIndex:13},{value:"P",paraId:119,tocIndex:13},{value:" is an array of canvas coordinates, ",paraId:119,tocIndex:13},{value:"value",paraId:119,tocIndex:13},{value:" is the value processed through ",paraId:119,tocIndex:13},{value:"mark.encode",paraId:119,tocIndex:13},{value:", and ",paraId:119,tocIndex:13},{value:"defaults",paraId:119,tocIndex:13},{value:" is the value specified in the theme's ",paraId:119,tocIndex:13},{value:"theme.mark.shape",paraId:119,tocIndex:13},{value:". A shape component definition looks roughly like this:",paraId:119,tocIndex:13},{value:"function ShapeTriangle(style, context) {\n  const { document } = context;\n  return (P, value, defaults) => {\n    return document.createElement('rect', {\n      //...\n    });\n  };\n}\n",paraId:120,tocIndex:13},{value:"Next is registering the shape, which is completed by calling ",paraId:121,tocIndex:13},{value:"G2.register('shape.${mark}.${shape}', Shape)",paraId:121,tocIndex:13},{value:". Where ",paraId:121,tocIndex:13},{value:"mark",paraId:121,tocIndex:13},{value:" is the name of the mark, ",paraId:121,tocIndex:13},{value:"shape",paraId:121,tocIndex:13},{value:" is the name of the shape, and ",paraId:121,tocIndex:13},{value:"Shape",paraId:121,tocIndex:13},{value:" is the defined shape component. For example, registering a triangle shape for the Interval mark:",paraId:121,tocIndex:13},{value:"import { register } from '@antv/g2';\n\nregister('shape.interval.triangle', ShapeTriangle);\n",paraId:122,tocIndex:13},{value:"Finally, using the shape can be done through ",paraId:123,tocIndex:13},{value:"mark.encode",paraId:123,tocIndex:13},{value:" or ",paraId:123,tocIndex:13},{value:"mark.style",paraId:123,tocIndex:13},{value:".",paraId:123,tocIndex:13},{value:"({\n  type: 'interval',\n  encode: { shape: 'triangle' },\n  // or\n  style: { shape: 'triangle' },\n});\n",paraId:124,tocIndex:13},{value:"Below is a complete example showing how to customize shapes.",paraId:125,tocIndex:13},{value:"import { register, Chart } from '@antv/g2';\n\n// Define graphic component\nfunction ShapeTriangle(style, context) {\n  const { document } = context;\n  return (P, value, defaults) => {\n    const { color: defaultColor } = defaults;\n    const [p0, p1, p2, p3] = P;\n    const pm = [(p0[0] + p1[0]) / 2, p0[1]];\n    const { color = defaultColor } = value;\n    return document.createElement('polygon', {\n      style: {\n        ...style,\n        fill: color,\n        points: [pm, p2, p3],\n      },\n    });\n  };\n}\n\n// Register the triangle\nregister('shape.interval.triangle', ShapeTriangle);\n\n// Initialize chart\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    color: 'genre',\n    shape: 'triangle', // Use this shape\n  },\n});\n\nchart.render();\n",paraId:126,tocIndex:13}]},52034:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(63358);const t=[{value:"The ",paraId:0},{value:"point",paraId:0},{value:" mark is primarily used for drawing ",paraId:0},{value:"scatter plots",paraId:0},{value:', also known as point plots or scatter diagrams. A scatter plot is a statistical chart that displays all data as points on a Cartesian coordinate system. It requires at least two different variables, one plotted along the x-axis and another along the y-axis. Each point has a definite position on both the X and Y axis. The overlay of numerous scatter points helps reveal the "overall landscape" of the dataset, thereby helping us analyze the correlation between two variables or discover trends and patterns. Additionally, we can add additional variables to group, color, set transparency, etc., for the scatter points.',paraId:0},{value:"When we encode the ",paraId:1},{value:"size",paraId:1},{value:" channel of a scatter plot, we can create a ",paraId:1},{value:"bubble chart",paraId:1},{value:". In a bubble chart, generally, each bubble represents a set of three-dimensional data (x, y, size). Two of these dimensions determine the position of the bubble in the Cartesian coordinate system (i.e., the values on the x and y axis), while the third is represented by the size of the bubble.",paraId:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n  },\n  encode: {\n    x: 'GDP',\n    y: 'LifeExpectancy',\n    size: 'Population',\n    color: 'continent',\n    shape: 'point',\n  },\n  scale: { size: { type: 'log', range: [4, 20] } }, // Population data varies greatly, using log scale for size channel mapping makes display more friendly\n  legend: { size: false }, // Turn off legend for size channel\n  style: { fillOpacity: 0.3, lineWidth: 1 },\n});\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"For more examples, check out the ",paraId:3,tocIndex:0},{value:"Chart Examples - Scatter Plot",paraId:4,tocIndex:0},{value:" page.",paraId:3,tocIndex:0},{value:"Property",paraId:5,tocIndex:1},{value:"Description",paraId:5,tocIndex:1},{value:"Type",paraId:5,tocIndex:1},{value:"Default",paraId:5,tocIndex:1},{value:"Required",paraId:5,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"Configure visual channels for the ",paraId:5,tocIndex:1},{value:"point",paraId:5,tocIndex:1},{value:" mark, including ",paraId:5,tocIndex:1},{value:"x",paraId:5,tocIndex:1},{value:", ",paraId:5,tocIndex:1},{value:"y",paraId:5,tocIndex:1},{value:", ",paraId:5,tocIndex:1},{value:"color",paraId:5,tocIndex:1},{value:", ",paraId:5,tocIndex:1},{value:"shape",paraId:5,tocIndex:1},{value:", ",paraId:5,tocIndex:1},{value:"size",paraId:5,tocIndex:1},{value:", etc., to specify the relationship between visual element properties and data",paraId:5,tocIndex:1},{value:"encode",paraId:6,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"✓",paraId:5,tocIndex:1},{value:"style",paraId:5,tocIndex:1},{value:"Configure graphic style for the ",paraId:5,tocIndex:1},{value:"point",paraId:5,tocIndex:1},{value:" mark",paraId:5,tocIndex:1},{value:"style",paraId:7,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"Configure visual channels for the ",paraId:8,tocIndex:2},{value:"point",paraId:8,tocIndex:2},{value:" mark.",paraId:8,tocIndex:2},{value:"Property",paraId:9,tocIndex:2},{value:"Description",paraId:9,tocIndex:2},{value:"Type",paraId:9,tocIndex:2},{value:"Default",paraId:9,tocIndex:2},{value:"Required",paraId:9,tocIndex:2},{value:"x",paraId:9,tocIndex:2},{value:"Bind the ",paraId:9,tocIndex:2},{value:"x",paraId:9,tocIndex:2},{value:" property channel for the ",paraId:9,tocIndex:2},{value:"point",paraId:9,tocIndex:2},{value:" mark, can be numeric fields, ordered nominal, or unordered nominal in ",paraId:9,tocIndex:2},{value:"data",paraId:9,tocIndex:2},{value:"encode",paraId:10,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"✓",paraId:9,tocIndex:2},{value:"y",paraId:9,tocIndex:2},{value:"Bind the ",paraId:9,tocIndex:2},{value:"y",paraId:9,tocIndex:2},{value:" property channel for the ",paraId:9,tocIndex:2},{value:"point",paraId:9,tocIndex:2},{value:" mark, generally numeric fields in ",paraId:9,tocIndex:2},{value:"data",paraId:9,tocIndex:2},{value:", used to draw one-dimensional scatter plots when empty",paraId:9,tocIndex:2},{value:"encode",paraId:11,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"color",paraId:9,tocIndex:2},{value:"Bind the ",paraId:9,tocIndex:2},{value:"color",paraId:9,tocIndex:2},{value:" property channel for the ",paraId:9,tocIndex:2},{value:"point",paraId:9,tocIndex:2},{value:" mark, generally used to distinguish different data types, mapped to categorical fields",paraId:9,tocIndex:2},{value:"encode",paraId:12,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"shape",paraId:9,tocIndex:2},{value:"Bind the ",paraId:9,tocIndex:2},{value:"shape",paraId:9,tocIndex:2},{value:" property channel for the ",paraId:9,tocIndex:2},{value:"point",paraId:9,tocIndex:2},{value:" mark, changes the drawing shape of the graphic mark",paraId:9,tocIndex:2},{value:"hollow",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"hollowDiamond",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"hollowHexagon",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"hollowSquare",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"hollowTriangleDown",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"hollowTriangle",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"hollowBowtie",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"point",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"plus",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"diamond",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"square",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"triangle",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"triangleDown",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"hexagon",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"cross",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"bowtie",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"hyphen",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"line",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"tick",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"circle",paraId:9,tocIndex:2},{value:"hollow",paraId:9,tocIndex:2},{value:"size",paraId:9,tocIndex:2},{value:"Bind the ",paraId:9,tocIndex:2},{value:"size",paraId:9,tocIndex:2},{value:" property channel for the ",paraId:9,tocIndex:2},{value:"point",paraId:9,tocIndex:2},{value:" mark, data field size maps to graphic radius (or 1/2 side length for squares)",paraId:9,tocIndex:2},{value:"encode",paraId:13,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"The position visual channels for the ",paraId:14,tocIndex:3},{value:"point",paraId:14,tocIndex:3},{value:" mark require values from both ",paraId:14,tocIndex:3},{value:"x",paraId:14,tocIndex:3},{value:" and ",paraId:14,tocIndex:3},{value:"y",paraId:14,tocIndex:3},{value:" fields, supporting the following data formats:",paraId:14,tocIndex:3},{value:"Both ",paraId:15,tocIndex:3},{value:"x",paraId:15,tocIndex:3},{value:" and ",paraId:15,tocIndex:3},{value:"y",paraId:15,tocIndex:3},{value:" are numeric values, typical scatter plot.",paraId:15,tocIndex:3},{value:'{\n  type: "point",\n  data: [{ month: \'January\', temperature: 8 }],\n  encode: { x: "month", y: "temperature" },\n}\n',paraId:16,tocIndex:3},{value:"x",paraId:17,tocIndex:3},{value:" is numeric, ",paraId:17,tocIndex:3},{value:"y",paraId:17,tocIndex:3},{value:" is empty, generally used to draw one-dimensional scatter plots. In this case, points with the same x value will overlap, usually requiring combination with data ",paraId:17,tocIndex:3},{value:"transform",paraId:18,tocIndex:3},{value:", such as ",paraId:17,tocIndex:3},{value:"stackY",paraId:17,tocIndex:3},{value:" to make the visualization result clearer.",paraId:17,tocIndex:3},{value:'{\n  type: "point",\n  data: [{ value: 10 }],\n  encode: { x: "value"},\n}\n',paraId:19,tocIndex:3},{value:"The ",paraId:20,tocIndex:4},{value:"color",paraId:20,tocIndex:4},{value:" visual channel affects the ",paraId:20,tocIndex:4},{value:"fill color",paraId:20,tocIndex:4},{value:" of the ",paraId:20,tocIndex:4},{value:"point",paraId:20,tocIndex:4},{value:" mark (when applying certain hollow shapes, such as ",paraId:20,tocIndex:4},{value:"hollow",paraId:20,tocIndex:4},{value:", it changes the ",paraId:20,tocIndex:4},{value:"stroke color",paraId:20,tocIndex:4},{value:" of the graphic). When applied to point plots, it's generally mapped to categorical fields to group data.",paraId:20,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  },\n  encode: {\n    x: 'height',\n    y: 'weight',\n    color: 'gender', // color channel maps to gender field, grouping by different genders\n  },\n});\n\nchart.render();\n",paraId:21,tocIndex:4},{value:"However, in some special cases, it may also be mapped to continuous fields, using different colors for graphics corresponding to values in different intervals:",paraId:22,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  children: [\n    {\n      type: 'point',\n      data: {\n        type: 'fetch',\n        value:\n          'https://gw.alipayobjects.com/os/bmw-prod/56b6b137-e04e-4757-8af5-d75bafaef886.csv',\n      },\n      encode: { x: 'date', y: 'value', color: 'value', shape: 'point' },\n      scale: { color: { palette: 'rdBu', offset: (t) => 1 - t } }, // Configure color channel scale, adjust palette and offset\n      style: { stroke: '#000', strokeOpacity: 0.2 }, // Configure point mark style\n      // Customize tooltip items\n      tooltip: {\n        items: [\n          {\n            channel: 'x',\n            name: 'year',\n            valueFormatter: (d) => d.getFullYear(),\n          },\n          { channel: 'y' },\n        ],\n      },\n    },\n    // Add lineY mark as auxiliary line annotation\n    {\n      type: 'lineY',\n      data: [0],\n      style: { stroke: '#000', strokeOpacity: 0.2 },\n    },\n  ],\n});\n\nchart.render();\n",paraId:23,tocIndex:4},{value:"The built-in shape graphics for ",paraId:24,tocIndex:5},{value:"point",paraId:24,tocIndex:5},{value:" marks are as follows, with ",paraId:24,tocIndex:5},{value:"hollow",paraId:24,tocIndex:5},{value:" as the default.",paraId:24,tocIndex:5},{value:"Shape",paraId:25,tocIndex:5},{value:"Description",paraId:25,tocIndex:5},{value:"hollow",paraId:25,tocIndex:5},{value:"Hollow circle",paraId:25,tocIndex:5},{value:"hollowDiamond",paraId:25,tocIndex:5},{value:"Hollow diamond",paraId:25,tocIndex:5},{value:"hollowHexagon",paraId:25,tocIndex:5},{value:"Hollow hexagon",paraId:25,tocIndex:5},{value:"hollowSquare",paraId:25,tocIndex:5},{value:"Hollow square",paraId:25,tocIndex:5},{value:"hollowTriangleDown",paraId:25,tocIndex:5},{value:"Hollow inverted triangle",paraId:25,tocIndex:5},{value:"hollowTriangle",paraId:25,tocIndex:5},{value:"Hollow triangle",paraId:25,tocIndex:5},{value:"hollowBowtie",paraId:25,tocIndex:5},{value:"Hollow bowtie",paraId:25,tocIndex:5},{value:"point",paraId:25,tocIndex:5},{value:"Solid circle",paraId:25,tocIndex:5},{value:"plus",paraId:25,tocIndex:5},{value:"Plus symbol",paraId:25,tocIndex:5},{value:"diamond",paraId:25,tocIndex:5},{value:"Solid diamond",paraId:25,tocIndex:5},{value:"square",paraId:25,tocIndex:5},{value:"Solid square",paraId:25,tocIndex:5},{value:"triangle",paraId:25,tocIndex:5},{value:"Solid triangle",paraId:25,tocIndex:5},{value:"triangleDown",paraId:25,tocIndex:5},{value:"Solid inverted triangle",paraId:25,tocIndex:5},{value:"hexagon",paraId:25,tocIndex:5},{value:"Solid hexagon",paraId:25,tocIndex:5},{value:"cross",paraId:25,tocIndex:5},{value:"Cross symbol",paraId:25,tocIndex:5},{value:"bowtie",paraId:25,tocIndex:5},{value:"Solid bowtie",paraId:25,tocIndex:5},{value:"hyphen",paraId:25,tocIndex:5},{value:"Hyphen (short dash)",paraId:25,tocIndex:5},{value:"line",paraId:25,tocIndex:5},{value:"Vertical line symbol",paraId:25,tocIndex:5},{value:"tick",paraId:25,tocIndex:5},{value:"Short vertical line (tick symbol)",paraId:25,tocIndex:5},{value:"circle",paraId:25,tocIndex:5},{value:"Circle symbol",paraId:25,tocIndex:5},{value:"Try it out:",paraId:26,tocIndex:5},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\n// Available itemMarker shapes\nconst shapeList = [\n  'hollow',\n  'hollowDiamond',\n  'hollowHexagon',\n  'hollowSquare',\n  'hollowTriangleDown',\n  'hollowTriangle',\n  'hollowBowtie',\n  'point',\n  'plus',\n  'diamond',\n  'square',\n  'triangle',\n  'triangleDown',\n  'hexagon',\n  'cross',\n  'bowtie',\n  'hyphen',\n  'line',\n  'tick',\n  'circle',\n];\nconst shapeMap = shapeList.map((p) => {\n  return {\n    label: p,\n    value: p,\n  };\n});\n\nchart.options({\n  type: 'point',\n  height: 150,\n  data: [{ x: 0.5, y: 0.5 }],\n  encode: {\n    x: 'x',\n    y: 'y',\n    size: 10,\n  },\n  scale: {\n    x: { domain: [0, 1], nice: true },\n    y: { domain: [0, 1], nice: true },\n  },\n});\n\nconst handleSetShape = (shape) => {\n  chart.options({\n    encode: {\n      x: 'x',\n      y: 'y',\n      size: 10,\n      shape,\n    },\n  });\n  chart.render(); // Re-render the chart\n};\n\nconst selectorContainer = document.createElement('div');\nselectorContainer.textContent = 'Select point mark shape ';\nconst selector = document.createElement('select');\nselector.innerHTML = shapeMap.map(\n  (shape, index) =>\n    `<option value=\"${shape.value}\" ${index === 0 ? 'selected' : ''}>${\n      shape.label\n    }</option>`,\n);\nselector.onchange = (e) => {\n  handleSetShape(e.target.value);\n};\nselectorContainer.appendChild(selector);\ncontainer.insertBefore(selectorContainer, container.childNodes[0]);\n\nchart.render();\n",paraId:27,tocIndex:5},{value:"Binding the ",paraId:28,tocIndex:6},{value:"size",paraId:28,tocIndex:6},{value:" property channel for the ",paraId:28,tocIndex:6},{value:"point",paraId:28,tocIndex:6},{value:" mark creates a ",paraId:28,tocIndex:6},{value:"bubble chart",paraId:28,tocIndex:6},{value:", where the size of data fields maps to the radius of the graphic (or 1/2 side length for squares).",paraId:28,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2b48887c-56fb-437e-a91c-6f48e80e5a91.csv',\n    transform: [\n      {\n        type: 'filter',\n        callback: (d) => d.Entity !== 'All natural disasters',\n      },\n    ],\n  },\n  encode: {\n    x: 'Year',\n    y: 'Entity',\n    size: 'Deaths',\n    color: 'Entity',\n    shape: 'point',\n  },\n  scale: { size: { rangeMax: 35 } }, // Configure size channel scale, set maximum range to 35\n  style: { stroke: 'black', strokeOpacity: 0.1, opacity: 0.8, lineWidth: 1 }, // Configure point mark style\n  legend: { color: false }, // Turn off color channel legend\n});\n\nchart.render();\n",paraId:29,tocIndex:6},{value:"Property",paraId:30,tocIndex:7},{value:"Description",paraId:30,tocIndex:7},{value:"Type",paraId:30,tocIndex:7},{value:"Default",paraId:30,tocIndex:7},{value:"Required",paraId:30,tocIndex:7},{value:"fill",paraId:30,tocIndex:7},{value:"point",paraId:30,tocIndex:7},{value:" mark fill color",paraId:30,tocIndex:7},{value:"string | (datum, index, data) => string",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"fillOpacity",paraId:30,tocIndex:7},{value:"point",paraId:30,tocIndex:7},{value:" mark fill opacity",paraId:30,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:30,tocIndex:7},{value:"point: ",paraId:30,tocIndex:7},{value:"0.95",paraId:30,tocIndex:7},{value:"stroke",paraId:30,tocIndex:7},{value:"point",paraId:30,tocIndex:7},{value:" mark stroke color",paraId:30,tocIndex:7},{value:"string | (datum, index, data) => string",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"strokeOpacity",paraId:30,tocIndex:7},{value:"point",paraId:30,tocIndex:7},{value:" mark stroke opacity",paraId:30,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:30,tocIndex:7},{value:"hollow, plus, diamond : ",paraId:30,tocIndex:7},{value:"0.95",paraId:30,tocIndex:7},{value:"lineWidth",paraId:30,tocIndex:7},{value:"point",paraId:30,tocIndex:7},{value:" mark stroke width",paraId:30,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:30,tocIndex:7},{value:"hollow, diamond: ",paraId:30,tocIndex:7},{value:"1",paraId:30,tocIndex:7},{value:" point: ",paraId:30,tocIndex:7},{value:"0",paraId:30,tocIndex:7},{value:"plus: ",paraId:30,tocIndex:7},{value:"3",paraId:30,tocIndex:7},{value:"lineDash",paraId:30,tocIndex:7},{value:"point",paraId:30,tocIndex:7},{value:" mark stroke dash configuration",paraId:30,tocIndex:7},{value:"[number,number] | (datum, index, data) => [number , number]",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"opacity",paraId:30,tocIndex:7},{value:"point",paraId:30,tocIndex:7},{value:" mark overall opacity",paraId:30,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"shadowColor",paraId:30,tocIndex:7},{value:"point",paraId:30,tocIndex:7},{value:" mark shadow color",paraId:30,tocIndex:7},{value:"string | (datum, index, data) => string",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"shadowBlur",paraId:30,tocIndex:7},{value:"point",paraId:30,tocIndex:7},{value:" mark shadow blur factor",paraId:30,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"shadowOffsetX",paraId:30,tocIndex:7},{value:"point",paraId:30,tocIndex:7},{value:" mark shadow horizontal offset",paraId:30,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"shadowOffsetY",paraId:30,tocIndex:7},{value:"point",paraId:30,tocIndex:7},{value:" mark shadow vertical offset",paraId:30,tocIndex:7},{value:"number | (datum, index, data) => number",paraId:30,tocIndex:7},{value:"-",paraId:30,tocIndex:7},{value:"cursor",paraId:30,tocIndex:7},{value:"point",paraId:30,tocIndex:7},{value:" mark mouse cursor style",paraId:30,tocIndex:7},{value:"string | (datum, index, data) => string",paraId:30,tocIndex:7},{value:"default",paraId:30,tocIndex:7},{value:"Try it out:",paraId:31,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'point',\n  style: {\n    fill: 'skyblue', // 图形填充颜色，支持颜色字符串，优先级高于color通道\n    fillOpacity: 0.9, // 填充颜色透明度，范围 0-1\n    stroke: '#FADC7C', // 图形描边颜色\n    lineWidth: 3, // 描边宽度（像素）\n    lineDash: [1, 2], // 虚线配置[实线长度, 间隔长度]，[0,0]表示无描边\n    strokeOpacity: 0.95, // 描边透明度，范围 0-1\n    opacity: 0.9, // 整体透明度，影响填充和描边\n    shadowColor: 'black', // 阴影颜色\n    shadowBlur: 10, // 阴影模糊程度（像素）\n    shadowOffsetX: 5, // 阴影水平偏移量（像素）\n    shadowOffsetY: 5, // 阴影垂直偏移量（像素）\n    cursor: 'pointer', // 鼠标悬停样式（同CSS cursor属性）\n  },\n  height: 350,\n  data: [{ x: 0.5, y: 0.5 }],\n  encode: {\n    x: 'x',\n    y: 'y',\n    size: 10,\n    shape: 'point',\n  },\n  scale: {\n    x: { domain: [0, 1], nice: true },\n    y: { domain: [0, 1], nice: true },\n  },\n});\n\nchart.render();\n",paraId:32,tocIndex:7},{value:"How to visualize a set of linear regression data?",paraId:33,tocIndex:8},{value:"Thanks to the composability of marks in G2, you can combine the ",paraId:34,tocIndex:8},{value:"point",paraId:34,tocIndex:8},{value:" mark with other marks like the ",paraId:34,tocIndex:8},{value:"line",paraId:34,tocIndex:8},{value:" mark to enhance chart expressiveness or create special charts like linear regression.",paraId:34,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nconst d3Regression = window.d3Regression;\n\nchart.options({\n  type: 'view',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/linear-regression.json',\n  },\n  children: [\n    {\n      type: 'point',\n      encode: { x: (d) => d[0], y: (d) => d[1], shape: 'point' },\n      scale: { x: { domain: [0, 1] }, y: { domain: [0, 5] } },\n      style: { fillOpacity: 0.75 },\n    },\n    {\n      type: 'line',\n      // Use d3Regression's regressionLinear method to process data and draw regression line\n      data: {\n        transform: [\n          {\n            type: 'custom',\n            callback: d3Regression.regressionLinear(),\n          },\n        ],\n      },\n      encode: { x: (d) => d[0], y: (d) => d[1] },\n      style: { stroke: '#30BF78', lineWidth: 2 },\n      labels: [\n        {\n          text: 'y = 1.7x+3.01',\n          selector: 'last',\n          position: 'right',\n          textAlign: 'end',\n          dy: -8,\n        },\n      ],\n      tooltip: false,\n    },\n  ],\n});\n\nchart.render();\n",paraId:35,tocIndex:8},{value:"Here's another example of combining the ",paraId:36,tocIndex:8},{value:"point",paraId:36,tocIndex:8},{value:" mark with other marks (in this case, the ",paraId:36,tocIndex:8},{value:"link",paraId:36,tocIndex:8},{value:" mark):",paraId:36,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  width: 800,\n  height: 1200,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/b6f2ff26-b232-447d-a613-0df5e30104a0.csv',\n  },\n  coordinate: { transform: [{ type: 'transpose' }] }, // Configure coordinate system transpose transformation\n  interaction: { tooltip: { shared: true } }, // Elements with the same x share tooltip\n  children: [\n    {\n      type: 'link',\n      encode: { x: 'state', y: 'population' },\n      transform: [{ type: 'groupX', y: 'min', y1: 'max' }],\n      scale: { y: { labelFormatter: '.0%' } },\n      style: { stroke: '#000' },\n      tooltip: false,\n    },\n    {\n      type: 'point',\n      encode: { x: 'state', y: 'population', shape: 'point', color: 'age' },\n      scale: { color: { palette: 'spectral' } },\n      tooltip: { title: 'state', items: ['population'] },\n    },\n  ],\n});\n\nchart.render();\n",paraId:37,tocIndex:8},{value:"What to do when points with the same x coordinate in a one-dimensional scatter plot all overlap?",paraId:38,tocIndex:8},{value:"Configure the ",paraId:39,tocIndex:8},{value:"y",paraId:39,tocIndex:8},{value:" channel to a constant ",paraId:39,tocIndex:8},{value:"1",paraId:39,tocIndex:8},{value:", then configure the ",paraId:39,tocIndex:8},{value:"stackY",paraId:40,tocIndex:8},{value:" data transformation to stack points with the same x coordinate.",paraId:39,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  height: 200,\n  data: [\n    { x: 1 },\n    { x: 1 },\n    { x: 1 },\n    { x: 2 },\n    { x: 2 },\n    { x: 2 },\n    { x: 2 },\n    { x: 2 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 4 },\n    { x: 5 },\n  ],\n  encode: {\n    x: 'x',\n    y: () => 1,\n    shape: 'point',\n  },\n  transform: [\n    {\n      type: 'stackY', // Group by specified channels, stack y and y1 channels for each group to achieve stacking effect\n    },\n  ],\n  scale: { x: { nice: true } },\n  tooltip: { items: [{ channel: 'x', name: 'x' }] },\n});\n\nchart.render();\n",paraId:41,tocIndex:8},{value:"Or configure the ",paraId:42,tocIndex:8},{value:"groupX",paraId:43,tocIndex:8},{value:" data transformation to sum points with the same x coordinate, then map to the ",paraId:42,tocIndex:8},{value:"size",paraId:42,tocIndex:8},{value:" channel.",paraId:42,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  height: 200,\n  data: [\n    { x: 1 },\n    { x: 1 },\n    { x: 1 },\n    { x: 2 },\n    { x: 2 },\n    { x: 2 },\n    { x: 2 },\n    { x: 2 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 3 },\n    { x: 4 },\n    { x: 5 },\n  ],\n  encode: {\n    x: 'x',\n    y: () => 1,\n    shape: 'point',\n    size: () => 1,\n  },\n  transform: [{ type: 'groupX', size: 'sum' }], // Group by discrete x channel and sum then map to size channel\n  scale: {\n    x: { nice: true },\n    size: { rangeMin: 5 }, // Set minimum range of size channel scale to 5\n  },\n  axis: {\n    y: false,\n  },\n  tooltip: { items: [{ channel: 'size', name: 'Count' }] },\n});\nchart.render();\n",paraId:44,tocIndex:8}]},84240:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(42255);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"polygon",paraId:0,tocIndex:0},{value:" mark (polygon) uses a set of (x, y) data points to connect and form a closed shape, generally used for data visualization after calculation with community visualization layout algorithms. It plays an important role in data visualization, computer graphics, and geographic information systems, commonly used for treemap matrices or block mapping on maps.",paraId:0,tocIndex:0},{value:"For example, in war sandbox scenarios, multiple irregular shapes can be divided on a map to display and distinguish occupied and unoccupied areas, friendly and enemy territories, rivers and land regions, making the battlefield situation more intuitive.",paraId:1,tocIndex:0},{value:"It is an indispensable tool in data visualization, graphics, and geographic information systems.",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// Generate coordinates for regular polygons\nfunction generatePolygon(sides, centerX, centerY, radius, rotation = 0) {\n  const points = [];\n  for (let i = 0; i < sides; i++) {\n    const angle = (2 * Math.PI * i) / sides + rotation;\n    const x = centerX + radius * Math.cos(angle);\n    const y = centerY + radius * Math.sin(angle);\n    points.push([x, y]);\n  }\n  return points;\n}\n\n// Create data for various regular polygons\nconst polygonData = [\n  {\n    name: 'Triangle',\n    sides: 3,\n    color: '#FF6B6B',\n    position: [2, 4],\n    size: 0.8,\n    rotation: Math.PI / 6,\n  },\n  {\n    name: 'Square',\n    sides: 4,\n    color: '#4ECDC4',\n    position: [4, 4],\n    size: 0.7,\n    rotation: Math.PI / 4,\n  },\n  {\n    name: 'Pentagon',\n    sides: 5,\n    color: '#45B7D1',\n    position: [6, 4],\n    size: 0.8,\n    rotation: 0,\n  },\n  {\n    name: 'Hexagon',\n    sides: 6,\n    color: '#96CEB4',\n    position: [8, 4],\n    size: 0.8,\n    rotation: 0,\n  },\n  {\n    name: 'Octagon',\n    sides: 8,\n    color: '#FFEAA7',\n    position: [2, 2],\n    size: 0.8,\n    rotation: Math.PI / 8,\n  },\n  {\n    name: 'Decagon',\n    sides: 10,\n    color: '#DDA0DD',\n    position: [4, 2],\n    size: 0.8,\n    rotation: 0,\n  },\n  {\n    name: 'Dodecagon',\n    sides: 12,\n    color: '#98D8C8',\n    position: [6, 2],\n    size: 0.8,\n    rotation: 0,\n  },\n  {\n    name: 'Star',\n    sides: 5,\n    color: '#F7DC6F',\n    position: [8, 2],\n    size: 0.9,\n    rotation: 0,\n    star: true,\n  },\n];\n\n// Convert to data format required by G2\nconst data = polygonData.map((poly) => {\n  let coordinates;\n\n  if (poly.star) {\n    // Generate five-pointed star\n    const outerPoints = generatePolygon(\n      5,\n      poly.position[0],\n      poly.position[1],\n      poly.size,\n      poly.rotation,\n    );\n    const innerPoints = generatePolygon(\n      5,\n      poly.position[0],\n      poly.position[1],\n      poly.size * 0.4,\n      poly.rotation + Math.PI / 5,\n    );\n    coordinates = [];\n    for (let i = 0; i < 5; i++) {\n      coordinates.push(outerPoints[i]);\n      coordinates.push(innerPoints[i]);\n    }\n  } else {\n    coordinates = generatePolygon(\n      poly.sides,\n      poly.position[0],\n      poly.position[1],\n      poly.size,\n      poly.rotation,\n    );\n  }\n\n  return {\n    x: coordinates.map((point) => point[0]),\n    y: coordinates.map((point) => point[1]),\n    name: poly.name,\n    color: poly.color,\n    sides: poly.sides,\n  };\n});\n\nchart.options({\n  type: 'polygon',\n  data: data,\n  encode: {\n    x: 'x',\n    y: 'y',\n    color: 'color',\n    series: 'name',\n  },\n  scale: {\n    x: { domain: [0, 10] },\n    y: { domain: [0, 6] },\n    color: { type: 'identity' },\n  },\n  style: {\n    stroke: '#fff',\n    lineWidth: 2,\n    fillOpacity: 0.8,\n  },\n  labels: [\n    {\n      text: 'name',\n      position: 'inside',\n      style: {\n        fontSize: 12,\n        fontWeight: 'bold',\n        fill: '#333',\n        textAlign: 'center',\n      },\n    },\n  ],\n  tooltip: false,\n});\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"For more examples, please check the ",paraId:4,tocIndex:0},{value:"Chart Examples - Polygon",paraId:5,tocIndex:0},{value:" page.",paraId:4,tocIndex:0},{value:"Property",paraId:6,tocIndex:1},{value:"Description",paraId:6,tocIndex:1},{value:"Type",paraId:6,tocIndex:1},{value:"Default Value",paraId:6,tocIndex:1},{value:"Required",paraId:6,tocIndex:1},{value:"encode",paraId:6,tocIndex:1},{value:"Configure visual channels for ",paraId:6,tocIndex:1},{value:"polygon",paraId:6,tocIndex:1},{value:" mark, including ",paraId:6,tocIndex:1},{value:"x",paraId:6,tocIndex:1},{value:", ",paraId:6,tocIndex:1},{value:"y",paraId:6,tocIndex:1},{value:", ",paraId:6,tocIndex:1},{value:"color",paraId:6,tocIndex:1},{value:", ",paraId:6,tocIndex:1},{value:"shape",paraId:6,tocIndex:1},{value:", etc., to specify relationships between visual element properties and data",paraId:6,tocIndex:1},{value:"encode",paraId:7,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"✓",paraId:6,tocIndex:1},{value:"coordinate",paraId:6,tocIndex:1},{value:"Configure coordinate system for ",paraId:6,tocIndex:1},{value:"polygon",paraId:6,tocIndex:1},{value:" mark, which performs a series of point transformations to change the spatial display form of the mark",paraId:6,tocIndex:1},{value:"coordinate",paraId:8,tocIndex:1},{value:"{type: 'cartesian' }",paraId:6,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:"Configure graphic styles for ",paraId:6,tocIndex:1},{value:"polygon",paraId:6,tocIndex:1},{value:" mark",paraId:6,tocIndex:1},{value:"style",paraId:9,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"Configure visual channels for ",paraId:10,tocIndex:2},{value:"polygon",paraId:10,tocIndex:2},{value:" mark.",paraId:10,tocIndex:2},{value:"Property",paraId:11,tocIndex:2},{value:"Description",paraId:11,tocIndex:2},{value:"Type",paraId:11,tocIndex:2},{value:"Default Value",paraId:11,tocIndex:2},{value:"Required",paraId:11,tocIndex:2},{value:"x",paraId:11,tocIndex:2},{value:"Bind the ",paraId:11,tocIndex:2},{value:"x",paraId:11,tocIndex:2},{value:" property channel of ",paraId:11,tocIndex:2},{value:"polygon",paraId:11,tocIndex:2},{value:" mark, generally a time or ordered categorical field in ",paraId:11,tocIndex:2},{value:"data",paraId:11,tocIndex:2},{value:"encode",paraId:12,tocIndex:2},{value:"-",paraId:11,tocIndex:2},{value:"✓",paraId:11,tocIndex:2},{value:"y",paraId:11,tocIndex:2},{value:"Bind the ",paraId:11,tocIndex:2},{value:"y",paraId:11,tocIndex:2},{value:" property channel of ",paraId:11,tocIndex:2},{value:"polygon",paraId:11,tocIndex:2},{value:" mark, generally a numeric or array field in ",paraId:11,tocIndex:2},{value:"data",paraId:11,tocIndex:2},{value:"encode",paraId:13,tocIndex:2},{value:"-",paraId:11,tocIndex:2},{value:"✓",paraId:11,tocIndex:2},{value:"color",paraId:11,tocIndex:2},{value:"Bind the ",paraId:11,tocIndex:2},{value:"color",paraId:11,tocIndex:2},{value:" property channel of ",paraId:11,tocIndex:2},{value:"polygon",paraId:11,tocIndex:2},{value:" mark. If data fields are mapped to color channels, each ",paraId:11,tocIndex:2},{value:"polygon",paraId:11,tocIndex:2},{value:" area will be color-differentiated, can be numeric types like temperature or grouping",paraId:11,tocIndex:2},{value:"encode",paraId:14,tocIndex:2},{value:"-",paraId:11,tocIndex:2},{value:"shape",paraId:11,tocIndex:2},{value:"Bind the ",paraId:11,tocIndex:2},{value:"shape",paraId:11,tocIndex:2},{value:" property channel of ",paraId:11,tocIndex:2},{value:"polygon",paraId:11,tocIndex:2},{value:" mark, changes the drawing shape of the graphic mark. Supported properties: ",paraId:11,tocIndex:2},{value:"polygon",paraId:11,tocIndex:2},{value:" | ",paraId:11,tocIndex:2},{value:"ribbon",paraId:11,tocIndex:2},{value:"string",paraId:11,tocIndex:2},{value:"polygon",paraId:11,tocIndex:2},{value:"The ",paraId:15,tocIndex:3},{value:"color",paraId:15,tocIndex:3},{value:" visual channel affects the fill color of ",paraId:15,tocIndex:3},{value:"polygon",paraId:15,tocIndex:3},{value:" mark areas. A single area in a ",paraId:15,tocIndex:3},{value:"polygon",paraId:15,tocIndex:3},{value:" mark can only use one color (or gradient color), but if data fields are mapped to color channels, data will be grouped and split into multiple areas:",paraId:15,tocIndex:3},{value:"color",paraId:16,tocIndex:3},{value:" channel with ",paraId:16,tocIndex:3},{value:"string",paraId:16,tocIndex:3},{value:" type grouping",paraId:16,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'polygon',\n  width: 200,\n  height: 200,\n  paddingTop: 0,\n  paddingLeft: 0,\n  paddingBottom: 0,\n  paddingRight: 0,\n  data: [\n    { id: 'Big Triangle 1', x: [0, 2, 0], y: [0, 0, 2] },\n    { id: 'Big Triangle 2', x: [0, -2, 0], y: [0, 0, 2] },\n    { id: 'Medium Triangle', x: [1, 0, -1], y: [-1, -2, -1] },\n    { id: 'Small Triangle 1', x: [-2, -1, -1], y: [0, 0, -1] },\n    { id: 'Small Triangle 2', x: [0, 1, 0], y: [0, 0, -1] },\n    { id: 'Square', x: [0, 0, -1, -1], y: [0, -1, -1, 0] },\n    { id: 'Parallelogram', x: [0, 1, 2, 1], y: [-1, 0, 0, -1] },\n  ],\n  encode: { x: 'x', y: 'y', color: 'id' },\n  scale: { x: { domain: [-2, 2] }, y: { domain: [-2, 2] } },\n  style: { stroke: '#fff', lineWidth: 2 },\n  axis: false,\n});\n\nchart.render();\n",paraId:17,tocIndex:3},{value:"color",paraId:18,tocIndex:3},{value:" channel with ",paraId:18,tocIndex:3},{value:"number",paraId:18,tocIndex:3},{value:" type grouping",paraId:18,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'polygon',\n  width: 200,\n  height: 200,\n  paddingTop: 0,\n  paddingLeft: 0,\n  paddingBottom: 0,\n  paddingRight: 0,\n  data: [\n    { id: 'Big Triangle 1', x: [0, 2, 0], y: [0, 0, 2], area: 2 },\n    { id: 'Big Triangle 2', x: [0, -2, 0], y: [0, 0, 2], area: 2 },\n    { id: 'Medium Triangle', x: [1, 0, -1], y: [-1, -2, -1], area: 1 },\n    { id: 'Small Triangle 1', x: [-2, -1, -1], y: [0, 0, -1], area: 0.5 },\n    { id: 'Small Triangle 2', x: [0, 1, 0], y: [0, 0, -1], area: 0.5 },\n    { id: 'Square', x: [0, 0, -1, -1], y: [0, -1, -1, 0], area: 1 },\n    { id: 'Parallelogram', x: [0, 1, 2, 1], y: [-1, 0, 0, -1], area: 1 },\n  ],\n  encode: { x: 'x', y: 'y', color: 'area' },\n  scale: { x: { domain: [-2, 2] }, y: { domain: [-2, 2] } },\n  style: { stroke: '#fff', lineWidth: 2 },\n  axis: false,\n});\n\nchart.render();\n",paraId:19,tocIndex:3},{value:"Currently, ",paraId:20,tocIndex:4},{value:"polygon",paraId:20,tocIndex:4},{value:" has 2 built-in shape graphics, with ",paraId:20,tocIndex:4},{value:"polygon",paraId:20,tocIndex:4},{value:" as the default.",paraId:20,tocIndex:4},{value:"Shape",paraId:21,tocIndex:4},{value:"Description",paraId:21,tocIndex:4},{value:"Example",paraId:21,tocIndex:4},{value:"polygon",paraId:21,tocIndex:4},{value:"Draws a closed polygon",paraId:21,tocIndex:4},{value:"ribbon",paraId:21,tocIndex:4},{value:"Draws a ribbon, requiring four points p0, p1, p2, p3, where p0 p1 are start points, p2 p3 are end points",paraId:21,tocIndex:4},{value:"For ",paraId:22,tocIndex:4},{value:"ribbon",paraId:22,tocIndex:4},{value:" implementation examples, you can check chord diagrams and sankey diagrams in the ",paraId:22,tocIndex:4},{value:"Chart Examples - Network",paraId:23,tocIndex:4},{value:" page.",paraId:22,tocIndex:4},{value:"Property",paraId:24,tocIndex:5},{value:"Description",paraId:24,tocIndex:5},{value:"Type",paraId:24,tocIndex:5},{value:"Default Value",paraId:24,tocIndex:5},{value:"fill",paraId:24,tocIndex:5},{value:"Fill color of the graphic",paraId:24,tocIndex:5},{value:"string",paraId:24,tocIndex:5},{value:" | ",paraId:24,tocIndex:5},{value:"Function<string>",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"fillOpacity",paraId:24,tocIndex:5},{value:"Fill opacity of the graphic",paraId:24,tocIndex:5},{value:"number",paraId:24,tocIndex:5},{value:" | ",paraId:24,tocIndex:5},{value:"Function<number>",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"stroke",paraId:24,tocIndex:5},{value:"Stroke of the graphic",paraId:24,tocIndex:5},{value:"string",paraId:24,tocIndex:5},{value:" | ",paraId:24,tocIndex:5},{value:"Function<string>",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"strokeOpacity",paraId:24,tocIndex:5},{value:"Stroke opacity",paraId:24,tocIndex:5},{value:"number",paraId:24,tocIndex:5},{value:" | ",paraId:24,tocIndex:5},{value:"Function<number>",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"lineWidth",paraId:24,tocIndex:5},{value:"Width of the graphic stroke",paraId:24,tocIndex:5},{value:"number",paraId:24,tocIndex:5},{value:" | ",paraId:24,tocIndex:5},{value:"Function<number>",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"lineDash",paraId:24,tocIndex:5},{value:"Dashed line configuration for stroke. First value is the length of each dash segment, second value is the spacing distance between segments. Setting lineDash to [0, 0] results in no stroke.",paraId:24,tocIndex:5},{value:"[number,number]",paraId:24,tocIndex:5},{value:" | ",paraId:24,tocIndex:5},{value:"Function<[number, number]>",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"opacity",paraId:24,tocIndex:5},{value:"Overall opacity of the graphic",paraId:24,tocIndex:5},{value:"number",paraId:24,tocIndex:5},{value:" | ",paraId:24,tocIndex:5},{value:"Function<number>",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"shadowColor",paraId:24,tocIndex:5},{value:"Shadow color of the graphic",paraId:24,tocIndex:5},{value:"string",paraId:24,tocIndex:5},{value:" | ",paraId:24,tocIndex:5},{value:"Function<string>",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"shadowBlur",paraId:24,tocIndex:5},{value:"Gaussian blur coefficient for graphic shadow",paraId:24,tocIndex:5},{value:"number",paraId:24,tocIndex:5},{value:" | ",paraId:24,tocIndex:5},{value:"Function<number>",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"shadowOffsetX",paraId:24,tocIndex:5},{value:"Sets the horizontal distance of shadow from the graphic",paraId:24,tocIndex:5},{value:"number",paraId:24,tocIndex:5},{value:" | ",paraId:24,tocIndex:5},{value:"Function<number>",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"shadowOffsetY",paraId:24,tocIndex:5},{value:"Sets the vertical distance of shadow from the graphic",paraId:24,tocIndex:5},{value:"number",paraId:24,tocIndex:5},{value:" | ",paraId:24,tocIndex:5},{value:"Function<number>",paraId:24,tocIndex:5},{value:"-",paraId:24,tocIndex:5},{value:"cursor",paraId:24,tocIndex:5},{value:"Mouse cursor style. Same as CSS cursor style, defaults to 'default'.",paraId:24,tocIndex:5},{value:"string",paraId:24,tocIndex:5},{value:" | ",paraId:24,tocIndex:5},{value:"Function<string>",paraId:24,tocIndex:5},{value:"'default'",paraId:24,tocIndex:5}]},48080:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(91461);const t=[{value:"range",paraId:0,tocIndex:0},{value:" is a tool used to define a rectangular area. The position and size of this rectangle can be determined by two sets of numbers: one for the horizontal direction (x1, x2) and another for the vertical direction (y1, y2). It is commonly used for drawing auxiliary background areas or marking certain regions.",paraId:0,tocIndex:0},{value:"Horizontal direction (x1, x2):",paraId:1,tocIndex:0},{value:"x1",paraId:2,tocIndex:0},{value:": Where the rectangle starts in the horizontal direction.",paraId:2,tocIndex:0},{value:"x2",paraId:2,tocIndex:0},{value:": Where the rectangle ends in the horizontal direction.",paraId:2,tocIndex:0},{value:"Vertical direction (y1, y2):",paraId:3,tocIndex:0},{value:"y1",paraId:4,tocIndex:0},{value:": Where the rectangle starts in the vertical direction.",paraId:4,tocIndex:0},{value:"y2",paraId:4,tocIndex:0},{value:": Where the rectangle ends in the vertical direction.",paraId:4,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/0b37279d-1674-42b4-b285-29683747ad9a.json',\n  },\n  children: [\n    { type: 'lineX', data: [0] },\n    { type: 'lineY', data: [0] },\n    {\n      type: 'range',\n      // Area chart data\n      data: [\n        { x: [-25, 0], y: [-30, 0], region: '1' },\n        { x: [-25, 0], y: [0, 20], region: '2' },\n        { x: [0, 5], y: [-30, 0], region: '2' },\n        { x: [0, 5], y: [0, 20], region: '1' },\n      ],\n      // Encoding rules, x and y correspond to fields in data, color corresponds to region field\n      encode: { x: 'x', y: 'y', color: 'region' },\n      scale: {\n        color: {\n          range: ['#d8d0c0', '#a3dda1'],\n          independent: true,\n          guide: null,\n        },\n      },\n\n      style: {\n        fillOpacity: 0.2,\n      },\n    },\n    {\n      type: 'point',\n      encode: {\n        x: 'change in female rate',\n        y: 'change in male rate',\n        size: 'pop',\n        color: 'continent',\n        shape: 'point',\n      },\n      scale: {\n        color: {\n          range: ['#ffd500', '#82cab2', '#193442', '#d18768', '#7e827a'],\n        },\n        x: { domain: [-25, 5] },\n        y: { domain: [-30, 20] },\n        size: { range: [4, 30] },\n      },\n      style: { stroke: '#bbb', fillOpacity: 0.8 },\n      axis: { x: { title: false }, y: { title: false } },\n    },\n  ],\n});\n\nchart.render();\n",paraId:5,tocIndex:0},{value:"Property",paraId:6,tocIndex:1},{value:"Description",paraId:6,tocIndex:1},{value:"Type",paraId:6,tocIndex:1},{value:"Default",paraId:6,tocIndex:1},{value:"Required",paraId:6,tocIndex:1},{value:"encode",paraId:6,tocIndex:1},{value:"Configure the visual channels of the ",paraId:6,tocIndex:1},{value:"range",paraId:6,tocIndex:1},{value:" mark, including ",paraId:6,tocIndex:1},{value:"x",paraId:6,tocIndex:1},{value:", ",paraId:6,tocIndex:1},{value:"y",paraId:6,tocIndex:1},{value:", ",paraId:6,tocIndex:1},{value:"color",paraId:6,tocIndex:1},{value:", ",paraId:6,tocIndex:1},{value:"shape",paraId:6,tocIndex:1},{value:", etc., to specify the relationship between visual element properties and data",paraId:6,tocIndex:1},{value:"encode",paraId:7,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"✓",paraId:6,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:"Configure the graphic style of the ",paraId:6,tocIndex:1},{value:"range",paraId:6,tocIndex:1},{value:" mark",paraId:6,tocIndex:1},{value:"style",paraId:8,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"Configure the visual channels of the ",paraId:9,tocIndex:2},{value:"range",paraId:9,tocIndex:2},{value:" mark.",paraId:9,tocIndex:2},{value:"Property",paraId:10,tocIndex:2},{value:"Description",paraId:10,tocIndex:2},{value:"Type",paraId:10,tocIndex:2},{value:"Default",paraId:10,tocIndex:2},{value:"Required",paraId:10,tocIndex:2},{value:"x",paraId:10,tocIndex:2},{value:"Bind the ",paraId:10,tocIndex:2},{value:"x",paraId:10,tocIndex:2},{value:" property channel of the ",paraId:10,tocIndex:2},{value:"range",paraId:10,tocIndex:2},{value:" mark, usually a time or ordinal field from ",paraId:10,tocIndex:2},{value:"data",paraId:10,tocIndex:2},{value:"string",paraId:10,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"✓",paraId:10,tocIndex:2},{value:"y",paraId:10,tocIndex:2},{value:"Bind the ",paraId:10,tocIndex:2},{value:"y",paraId:10,tocIndex:2},{value:" property channel of the ",paraId:10,tocIndex:2},{value:"range",paraId:10,tocIndex:2},{value:" mark, usually a numeric or array field from ",paraId:10,tocIndex:2},{value:"data",paraId:10,tocIndex:2},{value:"string",paraId:10,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"✓",paraId:10,tocIndex:2},{value:"For more ",paraId:11,tocIndex:2},{value:"encode",paraId:11,tocIndex:2},{value:" configurations, you can check the ",paraId:11,tocIndex:2},{value:"Encode",paraId:12,tocIndex:2},{value:" introduction page.",paraId:11,tocIndex:2},{value:"Configure the style of the ",paraId:13,tocIndex:3},{value:"range",paraId:13,tocIndex:3},{value:" mark.",paraId:13,tocIndex:3},{value:"Property",paraId:14,tocIndex:3},{value:"Description",paraId:14,tocIndex:3},{value:"Type",paraId:14,tocIndex:3},{value:"Default",paraId:14,tocIndex:3},{value:"Required",paraId:14,tocIndex:3},{value:"fill",paraId:14,tocIndex:3},{value:"Fill color of the graphic",paraId:14,tocIndex:3},{value:"string",paraId:14,tocIndex:3},{value:" | ",paraId:14,tocIndex:3},{value:"Function<string>",paraId:14,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"fillOpacity",paraId:14,tocIndex:3},{value:"Fill opacity of the graphic",paraId:14,tocIndex:3},{value:"number",paraId:14,tocIndex:3},{value:" | ",paraId:14,tocIndex:3},{value:"Function<number>",paraId:14,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"stroke",paraId:14,tocIndex:3},{value:"Stroke of the graphic",paraId:14,tocIndex:3},{value:"string",paraId:14,tocIndex:3},{value:" | ",paraId:14,tocIndex:3},{value:"Function<string>",paraId:14,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"strokeOpacity",paraId:14,tocIndex:3},{value:"Stroke opacity",paraId:14,tocIndex:3},{value:"number",paraId:14,tocIndex:3},{value:" | ",paraId:14,tocIndex:3},{value:"Function<number>",paraId:14,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"lineWidth",paraId:14,tocIndex:3},{value:"Width of the graphic stroke",paraId:14,tocIndex:3},{value:"number",paraId:14,tocIndex:3},{value:" | ",paraId:14,tocIndex:3},{value:"Function<number>",paraId:14,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"lineDash",paraId:14,tocIndex:3},{value:"Dashed stroke configuration. The first value is the length of each dash segment, the second value is the distance between segments. Setting lineDash to [0, 0] results in no stroke",paraId:14,tocIndex:3},{value:"[number,number]",paraId:14,tocIndex:3},{value:" | ",paraId:14,tocIndex:3},{value:"Function<[number, number]>",paraId:14,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"opacity",paraId:14,tocIndex:3},{value:"Overall opacity of the graphic",paraId:14,tocIndex:3},{value:"number",paraId:14,tocIndex:3},{value:" | ",paraId:14,tocIndex:3},{value:"Function<number>",paraId:14,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"shadowColor",paraId:14,tocIndex:3},{value:"Shadow color of the graphic",paraId:14,tocIndex:3},{value:"string",paraId:14,tocIndex:3},{value:" | ",paraId:14,tocIndex:3},{value:"Function<string>",paraId:14,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"shadowBlur",paraId:14,tocIndex:3},{value:"Gaussian blur coefficient of the graphic shadow",paraId:14,tocIndex:3},{value:"number",paraId:14,tocIndex:3},{value:" | ",paraId:14,tocIndex:3},{value:"Function<number>",paraId:14,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"shadowOffsetX",paraId:14,tocIndex:3},{value:"Horizontal distance of the shadow from the graphic",paraId:14,tocIndex:3},{value:"number",paraId:14,tocIndex:3},{value:" | ",paraId:14,tocIndex:3},{value:"Function<number>",paraId:14,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"shadowOffsetY",paraId:14,tocIndex:3},{value:"Vertical distance of the shadow from the graphic",paraId:14,tocIndex:3},{value:"number",paraId:14,tocIndex:3},{value:" | ",paraId:14,tocIndex:3},{value:"Function<number>",paraId:14,tocIndex:3},{value:"-",paraId:14,tocIndex:3},{value:"cursor",paraId:14,tocIndex:3},{value:"Mouse cursor style. Same as CSS cursor style, default 'default'",paraId:14,tocIndex:3},{value:"string",paraId:14,tocIndex:3},{value:" | ",paraId:14,tocIndex:3},{value:"Function<string>",paraId:14,tocIndex:3},{value:"'default'",paraId:14,tocIndex:3},{value:"For more ",paraId:15,tocIndex:3},{value:"style",paraId:15,tocIndex:3},{value:" configurations, you can check the ",paraId:15,tocIndex:3},{value:"Style",paraId:16,tocIndex:3},{value:" introduction page.",paraId:15,tocIndex:3},{value:"For more examples, you can visit the ",paraId:17,tocIndex:4},{value:"Chart Examples - Data Annotation",paraId:18,tocIndex:4},{value:" page.",paraId:17,tocIndex:4}]},48809:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(93936);const t=[{value:"Uses a set of ",paraId:0,tocIndex:0},{value:"x",paraId:0,tocIndex:0},{value:" values (x1, x2) to position a rectangular area drawn on the x-axis, commonly used for highlighting specific areas.",paraId:0,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\n/**\n * A recreation of this demo: https://vega.github.io/vega-lite/examples/layer_falkensee.html\n */\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  width: 600,\n  height: 360,\n  paddingLeft: 60,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/year-population.json',\n  },\n  children: [\n    {\n      type: 'rangeX',\n      data: [\n        { year: [new Date('1933'), new Date('1945')], event: 'Nazi Rule' },\n        {\n          year: [new Date('1948'), new Date('1989')],\n          event: 'GDR (East Germany)',\n        },\n      ],\n      encode: { x: 'year', color: 'event' },\n      scale: { color: { independent: true, range: ['#FAAD14', '#30BF78'] } },\n      style: { fillOpacity: 0.75 },\n    },\n    {\n      type: 'line',\n      encode: { x: (d) => new Date(d.year), y: 'population', color: '#333' },\n    },\n    {\n      type: 'point',\n      encode: { x: (d) => new Date(d.year), y: 'population', color: '#333' },\n      style: { lineWidth: 1.5 },\n    },\n  ],\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"Additionally, rangeX provides a simplified syntax:",paraId:2,tocIndex:0},{value:"chart\n  .rangeX()\n  .data([[new Date('2010'), new Date('2011')]])\n  .encode('x', (d) => d);\n\n// it can be simplified as follows:\nchart.rangeX().data([new Date('2010'), new Date('2011')]);\n",paraId:3,tocIndex:0},{value:"Property",paraId:4,tocIndex:1},{value:"Description",paraId:4,tocIndex:1},{value:"Type",paraId:4,tocIndex:1},{value:"Default",paraId:4,tocIndex:1},{value:"Required",paraId:4,tocIndex:1},{value:"encode",paraId:4,tocIndex:1},{value:"Configure the visual channels of the ",paraId:4,tocIndex:1},{value:"rangeX",paraId:4,tocIndex:1},{value:" mark, including ",paraId:4,tocIndex:1},{value:"x",paraId:4,tocIndex:1},{value:", ",paraId:4,tocIndex:1},{value:"y",paraId:4,tocIndex:1},{value:", ",paraId:4,tocIndex:1},{value:"color",paraId:4,tocIndex:1},{value:", ",paraId:4,tocIndex:1},{value:"shape",paraId:4,tocIndex:1},{value:", etc., to specify the relationship between visual element properties and data",paraId:4,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"✓",paraId:4,tocIndex:1},{value:"style",paraId:4,tocIndex:1},{value:"Configure the graphic style of the ",paraId:4,tocIndex:1},{value:"rangeX",paraId:4,tocIndex:1},{value:" mark",paraId:4,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"Configure the visual channels of the ",paraId:7,tocIndex:2},{value:"rangeX",paraId:7,tocIndex:2},{value:" mark.",paraId:7,tocIndex:2},{value:"Property",paraId:8,tocIndex:2},{value:"Description",paraId:8,tocIndex:2},{value:"Type",paraId:8,tocIndex:2},{value:"Default",paraId:8,tocIndex:2},{value:"Required",paraId:8,tocIndex:2},{value:"x",paraId:8,tocIndex:2},{value:"Bind the ",paraId:8,tocIndex:2},{value:"x",paraId:8,tocIndex:2},{value:" property channel of the ",paraId:8,tocIndex:2},{value:"rangeX",paraId:8,tocIndex:2},{value:" mark, usually a time or ordinal field from ",paraId:8,tocIndex:2},{value:"data",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"✓",paraId:8,tocIndex:2},{value:"For more ",paraId:9,tocIndex:2},{value:"encode",paraId:9,tocIndex:2},{value:" configurations, you can check the ",paraId:9,tocIndex:2},{value:"Encode",paraId:10,tocIndex:2},{value:" introduction page.",paraId:9,tocIndex:2},{value:"Property",paraId:11,tocIndex:3},{value:"Description",paraId:11,tocIndex:3},{value:"Type",paraId:11,tocIndex:3},{value:"Default",paraId:11,tocIndex:3},{value:"Required",paraId:11,tocIndex:3},{value:"fill",paraId:11,tocIndex:3},{value:"Fill color of the graphic",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<string>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"fillOpacity",paraId:11,tocIndex:3},{value:"Fill opacity of the graphic",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"stroke",paraId:11,tocIndex:3},{value:"Stroke of the graphic",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<string>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"strokeOpacity",paraId:11,tocIndex:3},{value:"Stroke opacity",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"lineWidth",paraId:11,tocIndex:3},{value:"Width of the graphic stroke",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"lineDash",paraId:11,tocIndex:3},{value:"Dashed stroke configuration. The first value is the length of each dash segment, the second value is the distance between segments. Setting lineDash to [0, 0] results in no stroke",paraId:11,tocIndex:3},{value:"[number,number]",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<[number, number]>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"opacity",paraId:11,tocIndex:3},{value:"Overall opacity of the graphic",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"shadowColor",paraId:11,tocIndex:3},{value:"Shadow color of the graphic",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<string>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"shadowBlur",paraId:11,tocIndex:3},{value:"Gaussian blur coefficient of the graphic shadow",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"shadowOffsetX",paraId:11,tocIndex:3},{value:"Horizontal distance of the shadow from the graphic",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"shadowOffsetY",paraId:11,tocIndex:3},{value:"Vertical distance of the shadow from the graphic",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"cursor",paraId:11,tocIndex:3},{value:"Mouse cursor style. Same as CSS cursor style, default 'default'",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<string>",paraId:11,tocIndex:3},{value:"'default'",paraId:11,tocIndex:3},{value:"For more ",paraId:12,tocIndex:3},{value:"style",paraId:12,tocIndex:3},{value:" configurations, you can check the ",paraId:12,tocIndex:3},{value:"Style",paraId:13,tocIndex:3},{value:" introduction page.",paraId:12,tocIndex:3},{value:"For more examples, you can visit the ",paraId:14,tocIndex:4},{value:"Chart Examples - Data Annotation",paraId:15,tocIndex:4},{value:" page.",paraId:14,tocIndex:4}]},76676:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(26145);const t=[{value:"Uses a set of ",paraId:0,tocIndex:0},{value:"y",paraId:0,tocIndex:0},{value:" values (y1, y2) to position a rectangular area drawn on the y-axis, commonly used for highlighting specific areas.",paraId:0,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  width: 600,\n  height: 470,\n  type: 'view',\n  children: [\n    {\n      type: 'point',\n      data: {\n        type: 'fetch',\n        value:\n          'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n      },\n      encode: { x: 'height', y: 'weight', color: 'gender' },\n    },\n    { type: 'rangeY', data: [{ y: [54, 72] }], encode: { y: 'y' } },\n  ],\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"Additionally, rangeY provides a simplified syntax:",paraId:2,tocIndex:0},{value:"chart\n  .rangeY()\n  .data([\n    [54, 60],\n    [65, 72],\n  ])\n  .encode('y', (d) => d);\n\n// it can be simplified as follows:\nchart.rangeY().data([\n  [54, 60],\n  [65, 72],\n]);\n",paraId:3,tocIndex:0},{value:"Property",paraId:4,tocIndex:1},{value:"Description",paraId:4,tocIndex:1},{value:"Type",paraId:4,tocIndex:1},{value:"Default",paraId:4,tocIndex:1},{value:"Required",paraId:4,tocIndex:1},{value:"encode",paraId:4,tocIndex:1},{value:"Configure the visual channels of the ",paraId:4,tocIndex:1},{value:"rangeY",paraId:4,tocIndex:1},{value:" mark, including ",paraId:4,tocIndex:1},{value:"x",paraId:4,tocIndex:1},{value:", ",paraId:4,tocIndex:1},{value:"y",paraId:4,tocIndex:1},{value:", ",paraId:4,tocIndex:1},{value:"color",paraId:4,tocIndex:1},{value:", ",paraId:4,tocIndex:1},{value:"shape",paraId:4,tocIndex:1},{value:", etc., to specify the relationship between visual element properties and data",paraId:4,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"✓",paraId:4,tocIndex:1},{value:"style",paraId:4,tocIndex:1},{value:"Configure the graphic style of the ",paraId:4,tocIndex:1},{value:"rangeY",paraId:4,tocIndex:1},{value:" mark",paraId:4,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"Configure the visual channels of the ",paraId:7,tocIndex:2},{value:"rangeY",paraId:7,tocIndex:2},{value:" mark.",paraId:7,tocIndex:2},{value:"Property",paraId:8,tocIndex:2},{value:"Description",paraId:8,tocIndex:2},{value:"Type",paraId:8,tocIndex:2},{value:"Default",paraId:8,tocIndex:2},{value:"Required",paraId:8,tocIndex:2},{value:"y",paraId:8,tocIndex:2},{value:"Bind the ",paraId:8,tocIndex:2},{value:"y",paraId:8,tocIndex:2},{value:" property channel of the ",paraId:8,tocIndex:2},{value:"rangeY",paraId:8,tocIndex:2},{value:" mark, usually a time or ordinal field from ",paraId:8,tocIndex:2},{value:"data",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"✓",paraId:8,tocIndex:2},{value:"For more ",paraId:9,tocIndex:2},{value:"encode",paraId:9,tocIndex:2},{value:" configurations, you can check the ",paraId:9,tocIndex:2},{value:"Encode",paraId:10,tocIndex:2},{value:" introduction page.",paraId:9,tocIndex:2},{value:"Property",paraId:11,tocIndex:3},{value:"Description",paraId:11,tocIndex:3},{value:"Type",paraId:11,tocIndex:3},{value:"Default",paraId:11,tocIndex:3},{value:"Required",paraId:11,tocIndex:3},{value:"fill",paraId:11,tocIndex:3},{value:"Fill color of the graphic",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<string>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"fillOpacity",paraId:11,tocIndex:3},{value:"Fill opacity of the graphic",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"stroke",paraId:11,tocIndex:3},{value:"Stroke of the graphic",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<string>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"strokeOpacity",paraId:11,tocIndex:3},{value:"Stroke opacity",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"lineWidth",paraId:11,tocIndex:3},{value:"Width of the graphic stroke",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"lineDash",paraId:11,tocIndex:3},{value:"Dashed stroke configuration. The first value is the length of each dash segment, the second value is the distance between segments. Setting lineDash to [0, 0] results in no stroke",paraId:11,tocIndex:3},{value:"[number,number]",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<[number, number]>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"opacity",paraId:11,tocIndex:3},{value:"Overall opacity of the graphic",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"shadowColor",paraId:11,tocIndex:3},{value:"Shadow color of the graphic",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<string>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"shadowBlur",paraId:11,tocIndex:3},{value:"Gaussian blur coefficient of the graphic shadow",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"shadowOffsetX",paraId:11,tocIndex:3},{value:"Horizontal distance of the shadow from the graphic",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"shadowOffsetY",paraId:11,tocIndex:3},{value:"Vertical distance of the shadow from the graphic",paraId:11,tocIndex:3},{value:"number",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<number>",paraId:11,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"cursor",paraId:11,tocIndex:3},{value:"Mouse cursor style. Same as CSS cursor style, default 'default'",paraId:11,tocIndex:3},{value:"string",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"Function<string>",paraId:11,tocIndex:3},{value:"'default'",paraId:11,tocIndex:3},{value:"For more ",paraId:12,tocIndex:3},{value:"style",paraId:12,tocIndex:3},{value:" configurations, you can check the ",paraId:12,tocIndex:3},{value:"Style",paraId:13,tocIndex:3},{value:" introduction page.",paraId:12,tocIndex:3},{value:"For more examples, you can visit the ",paraId:14,tocIndex:4},{value:"Chart Examples - Data Annotation",paraId:15,tocIndex:4},{value:" page.",paraId:14,tocIndex:4}]},51866:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(78773);const t=[{value:"rect",paraId:0,tocIndex:0},{value:" is a core chart element used to draw rectangular marks. It implements different visualization requirements by defining the starting point, ending point, width, height, and other graphic properties (such as color and style) of rectangles. ",paraId:0,tocIndex:0},{value:"rect",paraId:0,tocIndex:0},{value:" can dynamically adjust the position, size, and style of rectangles based on bound data, thus intuitively displaying data distribution, comparison relationships, or density information. ",paraId:0,tocIndex:0},{value:"rect",paraId:0,tocIndex:0},{value:" is widely used in scenarios such as bar charts, heatmaps, and matrix charts.",paraId:0,tocIndex:0},{value:"Core functional features of ",paraId:1,tocIndex:0},{value:"rect",paraId:1,tocIndex:0},{value:":",paraId:1,tocIndex:0},{value:"Drawing rectangular shapes",paraId:2,tocIndex:0},{value:": rect is the fundamental unit for building rectangular charts, which can be used to construct bar, block, heatmap and other charts.\nEach rectangular unit displays specific data content by mapping numerical or categorical information from the data.",paraId:2,tocIndex:0},{value:"Rich encoding mapping",paraId:2,tocIndex:0},{value:": Users can freely map data fields to visual attributes such as X-axis, Y-axis, size, color, etc. of rectangles.\nProvides flexible customization capabilities, generating various styles of rectangular graphics through the combination of fields and styles.",paraId:2,tocIndex:0},{value:"High extensibility and interactivity",paraId:2,tocIndex:0},{value:": Supports interactive functions (such as click, highlight, zoom, etc.), enhancing dynamic interaction between graphics and users.\nSuitable for rectangular visualization needs in different fields, such as grid charts (heatmap), data density distribution charts, etc.",paraId:2,tocIndex:0},{value:"Seamless integration with G2 ecosystem",paraId:2,tocIndex:0},{value:": As part of the G2 Mark system, rect can be freely combined with other components (such as line, point, etc.) to meet complex data visualization requirements.",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'rect',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n  },\n  encode: { x: 'weight', y: 'height', color: 'sex' },\n  transform: [{ type: 'bin', opacity: 'count' }],\n  style: { inset: 0.5 },\n});\n\nchart.render(); // Render chart\n",paraId:3,tocIndex:1},{value:"For more examples, please visit the ",paraId:4,tocIndex:1},{value:"Chart Examples",paraId:5,tocIndex:1},{value:" page.",paraId:4,tocIndex:1},{value:"Property",paraId:6,tocIndex:2},{value:"Description",paraId:6,tocIndex:2},{value:"Type",paraId:6,tocIndex:2},{value:"Default",paraId:6,tocIndex:2},{value:"Required",paraId:6,tocIndex:2},{value:"encode",paraId:6,tocIndex:2},{value:"Configure visual channels for ",paraId:6,tocIndex:2},{value:"rect",paraId:6,tocIndex:2},{value:" mark, including ",paraId:6,tocIndex:2},{value:"x",paraId:6,tocIndex:2},{value:", ",paraId:6,tocIndex:2},{value:"y",paraId:6,tocIndex:2},{value:", ",paraId:6,tocIndex:2},{value:"color",paraId:6,tocIndex:2},{value:", etc., used to specify relationships between visual element properties and data",paraId:6,tocIndex:2},{value:"encode",paraId:7,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"✓",paraId:6,tocIndex:2},{value:"transform",paraId:6,tocIndex:2},{value:"Configure data transformation operations for ",paraId:6,tocIndex:2},{value:"rect",paraId:6,tocIndex:2},{value:" (such as binning, sorting, filtering, etc.).",paraId:6,tocIndex:2},{value:"transform",paraId:8,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"style",paraId:6,tocIndex:2},{value:"Configure graphic styles for ",paraId:6,tocIndex:2},{value:"rect",paraId:6,tocIndex:2},{value:"style",paraId:9,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"Configure visual channels for ",paraId:10,tocIndex:3},{value:"rect",paraId:10,tocIndex:3},{value:" mark, an important configuration that defines the mapping relationship between data fields and visual properties, determining how data is transformed into visual representation.",paraId:10,tocIndex:3},{value:"Property",paraId:11,tocIndex:3},{value:"Description",paraId:11,tocIndex:3},{value:"Type",paraId:11,tocIndex:3},{value:"Default",paraId:11,tocIndex:3},{value:"Required",paraId:11,tocIndex:3},{value:"color",paraId:11,tocIndex:3},{value:"Bind the ",paraId:11,tocIndex:3},{value:"color",paraId:11,tocIndex:3},{value:" property channel of ",paraId:11,tocIndex:3},{value:"rect",paraId:11,tocIndex:3},{value:" mark. If a data field is mapped to the color channel, the data will be grouped and split into multiple areas of different colors",paraId:11,tocIndex:3},{value:"encode",paraId:12,tocIndex:3},{value:"-",paraId:11,tocIndex:3},{value:"shape",paraId:11,tocIndex:3},{value:"Bind the ",paraId:11,tocIndex:3},{value:"shape",paraId:11,tocIndex:3},{value:" property channel of ",paraId:11,tocIndex:3},{value:"rect",paraId:11,tocIndex:3},{value:" mark, changing the drawing shape of the graphic mark",paraId:11,tocIndex:3},{value:"encode",paraId:13,tocIndex:3},{value:"'rect'",paraId:11,tocIndex:3},{value:"color",paraId:14,tocIndex:3},{value:"The color visual channel affects the fill color of ",paraId:15,tocIndex:3},{value:"rect",paraId:15,tocIndex:3},{value:" graphic marks (when applying certain hollow shapes, such as hollow, it will change the stroke color of the graphic). When applied to point charts, it generally maps categorical fields and groups the data.",paraId:15,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'rect',\n  data: [\n    { x: 1, y: 1, type: 'type1' },\n    { x: 1, y: 2, type: 'type2' },\n    { x: 2, y: 1, type: 'type3' },\n    { x: 2, y: 2, type: 'type1' },\n  ],\n  transform: [{ type: 'bin' }],\n  encode: { shape: 'rect', x: 'x', y: 'y', color: 'type' },\n  style: { inset: 0.5 },\n});\n\nchart.render(); // Render chart\n",paraId:16,tocIndex:3},{value:"shape",paraId:17,tocIndex:3},{value:"Through the ",paraId:18,tocIndex:3},{value:"shape",paraId:18,tocIndex:3},{value:" property of ",paraId:18,tocIndex:3},{value:"encode",paraId:18,tocIndex:3},{value:", you can specify the geometric shape of cells. Shape determines what shape each cell is rendered as on the canvas. The supported shapes for ",paraId:18,tocIndex:3},{value:"shape",paraId:18,tocIndex:3},{value:" mark are as follows:",paraId:18,tocIndex:3},{value:"Shape",paraId:19,tocIndex:3},{value:"Description",paraId:19,tocIndex:3},{value:"rect",paraId:19,tocIndex:3},{value:"Rectangle",paraId:19,tocIndex:3},{value:"hollow",paraId:19,tocIndex:3},{value:"Hollow rectangle",paraId:19,tocIndex:3},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\nconst shapeMap = [\n  {\n    shape: 'rect',\n    label: 'Rectangle',\n  },\n  {\n    shape: 'hollow',\n    label: 'Hollow Rectangle',\n  },\n];\n\nchart.options({\n  type: 'rect',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n  },\n  encode: { shape: 'rect', x: 'weight', y: 'height', color: 'sex' },\n  transform: [{ type: 'bin', opacity: 'count' }],\n  style: { inset: 0.5 },\n});\n\nconst handleSetShape = (shape) => {\n  // Set the selected coordinate system\n  chart.options({\n    encode: { shape },\n  });\n  chart.render(); // Re-render chart\n};\n\n// Insert Encode-Color selector\nconst selectorContainer = document.createElement('div');\nselectorContainer.textContent = 'Select Shape ';\nconst selector = document.createElement('select');\nselector.innerHTML = shapeMap.map(\n  (shape, index) =>\n    `<option value=\"${shape.shape}\" ${index === 0 ? 'selected' : ''}>${\n      shape.label\n    }</option>`,\n);\nselector.onchange = (e) => {\n  handleSetShape(e.target.value);\n};\nselectorContainer.appendChild(selector);\ncontainer.insertBefore(selectorContainer, container.childNodes[0]);\n\nchart.render();\n",paraId:20,tocIndex:3},{value:"For more ",paraId:21,tocIndex:3},{value:"encode",paraId:21,tocIndex:3},{value:" configurations, please check the ",paraId:21,tocIndex:3},{value:"encode",paraId:22,tocIndex:3},{value:" introduction page.",paraId:21,tocIndex:3},{value:"transform",paraId:23,tocIndex:4},{value:" is a core configuration item for data transformation, allowing preprocessing of raw data before it's bound to graphic marks. By processing data, it generates structured data more suitable for visualization, thus more clearly expressing data distribution, density, or statistical characteristics.",paraId:23,tocIndex:4},{value:"Common transformation types include:",paraId:24,tocIndex:4},{value:"bin",paraId:25,tocIndex:4},{value:": Bin continuous data to generate histogram rectangles",paraId:25,tocIndex:4},{value:"stackY",paraId:25,tocIndex:4},{value:": Stack rectangles vertically, automatically calculating stacked height for each category",paraId:25,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'rect',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n  },\n  encode: { x: 'weight', color: 'sex' },\n  transform: [\n    { type: 'binX', y: 'count' },\n    { type: 'stackY', orderBy: 'series' },\n  ],\n});\n\nchart.render();\n",paraId:26,tocIndex:4},{value:"For more ",paraId:27,tocIndex:4},{value:"transform",paraId:27,tocIndex:4},{value:" configurations, please check the ",paraId:27,tocIndex:4},{value:"transform",paraId:28,tocIndex:4},{value:" introduction page.",paraId:27,tocIndex:4},{value:"style",paraId:29,tocIndex:5},{value:" is used to set the appearance styles of chart elements, including fill color, border style, shadow effects, etc.",paraId:29,tocIndex:5},{value:"Property",paraId:30,tocIndex:5},{value:"Description",paraId:30,tocIndex:5},{value:"Type",paraId:30,tocIndex:5},{value:"Default",paraId:30,tocIndex:5},{value:"radius",paraId:30,tocIndex:5},{value:"Border radius for all four corners of the rectangle",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"0",paraId:30,tocIndex:5},{value:"radiusTopLeft",paraId:30,tocIndex:5},{value:"Border radius for top-left corner",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"0",paraId:30,tocIndex:5},{value:"radiusTopRight",paraId:30,tocIndex:5},{value:"Border radius for top-right corner",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"0",paraId:30,tocIndex:5},{value:"radiusBottomRight",paraId:30,tocIndex:5},{value:"Border radius for bottom-right corner",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"0",paraId:30,tocIndex:5},{value:"radiusBottomLeft",paraId:30,tocIndex:5},{value:"Border radius for bottom-left corner",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"0",paraId:30,tocIndex:5},{value:"inset",paraId:30,tocIndex:5},{value:"Inner padding for all four directions of the rectangle",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"0",paraId:30,tocIndex:5},{value:"insetLeft",paraId:30,tocIndex:5},{value:"Left inner spacing",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"0",paraId:30,tocIndex:5},{value:"insetRight",paraId:30,tocIndex:5},{value:"Right inner spacing",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"0",paraId:30,tocIndex:5},{value:"insetBottom",paraId:30,tocIndex:5},{value:"Bottom inner spacing",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"0",paraId:30,tocIndex:5},{value:"insetTop",paraId:30,tocIndex:5},{value:"Top inner spacing",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"0",paraId:30,tocIndex:5},{value:"fill",paraId:30,tocIndex:5},{value:"Fill color of the graphic",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => string",paraId:30,tocIndex:5},{value:"-",paraId:30,tocIndex:5},{value:"fillOpacity",paraId:30,tocIndex:5},{value:"Fill opacity of the graphic",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"-",paraId:30,tocIndex:5},{value:"stroke",paraId:30,tocIndex:5},{value:"Stroke of the graphic",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => string",paraId:30,tocIndex:5},{value:"-",paraId:30,tocIndex:5},{value:"strokeOpacity",paraId:30,tocIndex:5},{value:"Stroke opacity",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"-",paraId:30,tocIndex:5},{value:"lineWidth",paraId:30,tocIndex:5},{value:"Width of the graphic stroke",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"-",paraId:30,tocIndex:5},{value:"lineDash",paraId:30,tocIndex:5},{value:"Dashed line configuration for stroke. First value is the length of each dash segment, second value is the gap distance. Setting lineDash to [0, 0] results in no stroke.",paraId:30,tocIndex:5},{value:"[number,number] |(datum, index, data, column) => [number, number]",paraId:30,tocIndex:5},{value:"-",paraId:30,tocIndex:5},{value:"opacity",paraId:30,tocIndex:5},{value:"Overall opacity of the graphic",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"-",paraId:30,tocIndex:5},{value:"shadowColor",paraId:30,tocIndex:5},{value:"Shadow color of the graphic",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => string",paraId:30,tocIndex:5},{value:"-",paraId:30,tocIndex:5},{value:"shadowBlur",paraId:30,tocIndex:5},{value:"Gaussian blur coefficient for the graphic shadow",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"-",paraId:30,tocIndex:5},{value:"shadowOffsetX",paraId:30,tocIndex:5},{value:"Horizontal distance of shadow from the graphic",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"-",paraId:30,tocIndex:5},{value:"shadowOffsetY",paraId:30,tocIndex:5},{value:"Vertical distance of shadow from the graphic",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => number",paraId:30,tocIndex:5},{value:"-",paraId:30,tocIndex:5},{value:"cursor",paraId:30,tocIndex:5},{value:"Mouse cursor style. Same as CSS cursor style, default 'default'.",paraId:30,tocIndex:5},{value:"number | (datum, index, data, column) => string",paraId:30,tocIndex:5},{value:"'default'",paraId:30,tocIndex:5},{value:"Try it out",paraId:31,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart\n  .rect()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n  })\n  .encode('x', 'weight')\n  .encode('color', 'sex')\n  .transform({ type: 'binX', y: 'count' })\n  .transform({ type: 'stackY', orderBy: 'series' })\n  .style('inset', 0.5);\n\nchart.render();\n\n",paraId:32,tocIndex:5},{value:"For more ",paraId:33,tocIndex:5},{value:"style",paraId:33,tocIndex:5},{value:" configurations, please check the ",paraId:33,tocIndex:5},{value:"style",paraId:34,tocIndex:5},{value:" introduction page.",paraId:33,tocIndex:5}]},44685:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(38302);const t=[{value:"The shape mark is a special ",paraId:0,tocIndex:0},{value:"Mark",paraId:0,tocIndex:0},{value:" type in G2, typically used to draw static custom graphics on charts. It has high flexibility and freedom. The ",paraId:0,tocIndex:0},{value:"shape",paraId:0,tocIndex:0},{value:" mark can be used for adding custom annotations, watermarks, badges, and other scenarios, making it an important tool for personalizing charts. When using ",paraId:0,tocIndex:0},{value:"shape",paraId:0,tocIndex:0},{value:" to draw graphics, you can obtain the ",paraId:0,tocIndex:0},{value:"document",paraId:0,tocIndex:0},{value:" object from the chart context, and then use ",paraId:0,tocIndex:0},{value:"document.createElement",paraId:0,tocIndex:0},{value:" to create registered graphics. For more complex scenarios, developers may need to understand concepts related to ",paraId:0,tocIndex:0},{value:"G custom graphics",paraId:0,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:"For example, sometimes you need to add markers at specific data points in a chart to highlight important information. The following example shows how to use the ",paraId:1,tocIndex:0},{value:"shape",paraId:1,tocIndex:0},{value:" mark to add custom annotations at key points on a line chart. We create basic graphics ",paraId:1,tocIndex:0},{value:"Circle",paraId:1,tocIndex:0},{value:" and basic graphics ",paraId:1,tocIndex:0},{value:"Text",paraId:1,tocIndex:0},{value:", combined with ",paraId:1,tocIndex:0},{value:"scene graph",paraId:1,tocIndex:0},{value:" capabilities to implement a custom annotation.",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst notes = (style, context) => {\n  const { x, y } = style;\n  const { document } = context;\n  const g = document.createElement('g', {});\n  const c1 = document.createElement('circle', {\n    style: {\n      cx: x,\n      cy: y,\n      r: 3,\n      fill: 'red',\n    },\n  });\n  const c2 = document.createElement('circle', {\n    style: {\n      cx: x,\n      cy: y,\n      r: 5,\n      lineWidth: 8,\n      stroke: 'red',\n      opacity: 0.3,\n    },\n  });\n  const text = document.createElement('text', {\n    style: {\n      x: x + 12,\n      y,\n      text: 'Highest Rainfall',\n      fontSize: 12,\n      textAlign: 'left',\n      textBaseline: 'middle',\n    },\n  });\n  g.appendChild(c1);\n  g.appendChild(c2);\n  g.appendChild(text);\n  return g;\n};\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  children: [\n    {\n      type: 'line',\n      data: [\n        { month: 'Jan.', rainfall: 18.9 },\n        { month: 'Feb.', rainfall: 28.8 },\n        { month: 'Mar.', rainfall: 39.3 },\n        { month: 'Apr.', rainfall: 81.4 },\n        { month: 'May', rainfall: 47 },\n        { month: 'Jun.', rainfall: 20.3 },\n      ],\n      encode: {\n        x: 'month',\n        y: 'rainfall',\n      },\n    },\n    {\n      type: 'shape',\n      data: [{ month: 'Apr.', rainfall: 81.4 }],\n      encode: {\n        x: 'month',\n        y: 'rainfall',\n      },\n      style: {\n        render: (style, context) => notes(style, context),\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"For more examples, you can visit the ",paraId:3,tocIndex:0},{value:"Graphic Annotation - Badge Watermark",paraId:4,tocIndex:0},{value:" page.",paraId:3,tocIndex:0},{value:"Property",paraId:5,tocIndex:1},{value:"Description",paraId:5,tocIndex:1},{value:"Type",paraId:5,tocIndex:1},{value:"Default",paraId:5,tocIndex:1},{value:"Required",paraId:5,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"Configure the visual channels of the ",paraId:5,tocIndex:1},{value:"shape",paraId:5,tocIndex:1},{value:" mark, including ",paraId:5,tocIndex:1},{value:"x",paraId:5,tocIndex:1},{value:", ",paraId:5,tocIndex:1},{value:"y",paraId:5,tocIndex:1},{value:", to specify the relationship between visual element properties and data",paraId:5,tocIndex:1},{value:"encode",paraId:6,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"style",paraId:5,tocIndex:1},{value:"Configure the graphic style of the ",paraId:5,tocIndex:1},{value:"shape",paraId:5,tocIndex:1},{value:" mark, including ",paraId:5,tocIndex:1},{value:"x",paraId:5,tocIndex:1},{value:", ",paraId:5,tocIndex:1},{value:"y",paraId:5,tocIndex:1},{value:", ",paraId:5,tocIndex:1},{value:"render",paraId:5,tocIndex:1},{value:", etc.",paraId:5,tocIndex:1},{value:"style",paraId:7,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"✓",paraId:5,tocIndex:1},{value:"Configure the visual channels of the ",paraId:8,tocIndex:2},{value:"shape",paraId:8,tocIndex:2},{value:" mark, including ",paraId:8,tocIndex:2},{value:"x",paraId:8,tocIndex:2},{value:", ",paraId:8,tocIndex:2},{value:"y",paraId:8,tocIndex:2},{value:", to specify the relationship between visual element properties and data.",paraId:8,tocIndex:2},{value:"Property",paraId:9,tocIndex:2},{value:"Description",paraId:9,tocIndex:2},{value:"Type",paraId:9,tocIndex:2},{value:"Default",paraId:9,tocIndex:2},{value:"Required",paraId:9,tocIndex:2},{value:"x",paraId:9,tocIndex:2},{value:"Bind the ",paraId:9,tocIndex:2},{value:"x",paraId:9,tocIndex:2},{value:" property channel of the ",paraId:9,tocIndex:2},{value:"shape",paraId:9,tocIndex:2},{value:" mark, usually a numeric or character value from ",paraId:9,tocIndex:2},{value:"data",paraId:9,tocIndex:2},{value:" to set the ",paraId:9,tocIndex:2},{value:"x",paraId:9,tocIndex:2},{value:" position of the mark",paraId:9,tocIndex:2},{value:"encode",paraId:10,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"✓ if not configured in ",paraId:9,tocIndex:2},{value:"style",paraId:11,tocIndex:2},{value:"y",paraId:9,tocIndex:2},{value:"Bind the ",paraId:9,tocIndex:2},{value:"y",paraId:9,tocIndex:2},{value:" property channel of the ",paraId:9,tocIndex:2},{value:"shape",paraId:9,tocIndex:2},{value:" mark, usually a numeric or character value from ",paraId:9,tocIndex:2},{value:"data",paraId:9,tocIndex:2},{value:" to set the ",paraId:9,tocIndex:2},{value:"y",paraId:9,tocIndex:2},{value:" position of the mark",paraId:9,tocIndex:2},{value:"encode",paraId:12,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"✓ if not configured in ",paraId:9,tocIndex:2},{value:"style",paraId:13,tocIndex:2},{value:"Configure the graphic style of the ",paraId:14,tocIndex:3},{value:"shape",paraId:14,tocIndex:3},{value:" mark.",paraId:14,tocIndex:3},{value:"Property",paraId:15,tocIndex:3},{value:"Description",paraId:15,tocIndex:3},{value:"Type",paraId:15,tocIndex:3},{value:"Default",paraId:15,tocIndex:3},{value:"Required",paraId:15,tocIndex:3},{value:"x",paraId:15,tocIndex:3},{value:"Uniformly set the x position of the ",paraId:15,tocIndex:3},{value:"shape",paraId:15,tocIndex:3},{value:" mark (relative positioning percentage | absolute positioning pixel value), highest priority",paraId:15,tocIndex:3},{value:"(string | number)",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"✓ if not configured in ",paraId:15,tocIndex:3},{value:"encode",paraId:16,tocIndex:3},{value:"y",paraId:15,tocIndex:3},{value:"Uniformly set the y position of the ",paraId:15,tocIndex:3},{value:"shape",paraId:15,tocIndex:3},{value:" mark (relative positioning percentage | absolute positioning pixel value), highest priority",paraId:15,tocIndex:3},{value:"(string | number)",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"✓ if not configured in ",paraId:15,tocIndex:3},{value:"encode",paraId:17,tocIndex:3},{value:"render",paraId:15,tocIndex:3},{value:"Custom graphic rendering function that receives style and context parameters and returns G's DisplayObject",paraId:15,tocIndex:3},{value:"(style, context) => DisplayObject",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"✓",paraId:15,tocIndex:3},{value:"{ ...rest }",paraId:15,tocIndex:3},{value:"Additional parameters for custom graphics, all passed as style parameters to the ",paraId:15,tocIndex:3},{value:"render",paraId:15,tocIndex:3},{value:" function",paraId:15,tocIndex:3},{value:"object",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"Adding watermarks to charts can protect data security and intellectual property. The following example shows how to use the ",paraId:18,tocIndex:5},{value:"shape",paraId:18,tocIndex:5},{value:" mark to add watermarks to a chart.",paraId:18,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// Define watermark rendering method\nconst watermark = (style, context) => {\n  const { document, canvas } = context;\n  const { width, height } = canvas.context.config;\n  const g = document.createElement('g', {});\n  // Create repeating watermark text\n  const spacing = 120; // Watermark spacing\n  for (let x = 0; x < width; x += spacing) {\n    for (let y = 0; y < height; y += spacing) {\n      const text = document.createElement('text', {\n        style: {\n          x: x,\n          y: y,\n          text: 'AntV G2',\n          transformOrigin: 'center',\n          transform: 'rotate(-30)',\n          fontSize: 16,\n          fill: '#000',\n          textAlign: 'center',\n          textBaseline: 'middle',\n          fillOpacity: 0.2,\n        },\n      });\n      g.appendChild(text);\n    }\n  }\n  return g;\n};\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  children: [\n    // Create pie chart\n    {\n      type: 'interval',\n      zIndex: 2,\n      data: [\n        { item: 'Category 1', count: 40 },\n        { item: 'Category 2', count: 21 },\n        { item: 'Category 3', count: 17 },\n        { item: 'Category 4', count: 13 },\n        { item: 'Category 5', count: 9 },\n      ],\n      encode: { y: 'count', color: 'item' },\n      transform: [{ type: 'stackY' }],\n      coordinate: {\n        type: 'theta',\n        outerRadius: 0.8,\n      },\n    },\n    // Add full chart watermark\n    {\n      type: 'shape',\n      zIndex: 1,\n      style: {\n        x: 0,\n        y: 0,\n        render: (style, context) => watermark(style, context),\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:19,tocIndex:5}]},73677:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(18501);const t=[{value:"The sunburst chart (",paraId:0,tocIndex:0},{value:"sunburst",paraId:0,tocIndex:0},{value:") serves as a powerful and intuitive data visualization tool with applications and advantages across various fields. Through its circular layout, the sunburst chart effectively displays hierarchical relationships and proportional allocation between data points, particularly suitable for datasets with clear parent-child relationships. Despite some limitations, its unique design makes it an indispensable tool in business analysis, geographical research, and other fields. Combining the advantages of pie charts and tree diagrams, it uses circular segmentation to display multi-level nested information structures. This chart type not only clearly reflects the relative sizes between different groups but also maintains excellent visual effects. Compared to tree maps, it offers advantages such as space efficiency and more intuitive overall visualization.",paraId:0,tocIndex:0},{value:"sunburst",paraId:1,tocIndex:0},{value:" is implemented through ",paraId:1,tocIndex:0},{value:"g2ExtensionPlot",paraId:1,tocIndex:0},{value:" based on ",paraId:1,tocIndex:0},{value:"rect",paraId:1,tocIndex:0},{value:", with internal implementation of drill-down events, polar coordinates, data transformation, style optimization, and more.",paraId:1,tocIndex:0},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'sunburst',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  },\n  encode: {\n    value: 'sum',\n  },\n  labels: [\n    {\n      text: 'name',\n      transform: [\n        {\n          type: 'overflowHide',\n        },\n      ],\n    },\n  ],\n});\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"For more examples, please check the ",paraId:3,tocIndex:0},{value:"Chart Examples - Sunburst",paraId:4,tocIndex:0},{value:" page.",paraId:3,tocIndex:0},{value:"Property",paraId:5,tocIndex:1},{value:"Description",paraId:5,tocIndex:1},{value:"Type",paraId:5,tocIndex:1},{value:"Default Value",paraId:5,tocIndex:1},{value:"Required",paraId:5,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"Configure visual channels for ",paraId:5,tocIndex:1},{value:"sunburst",paraId:5,tocIndex:1},{value:" mark, including ",paraId:5,tocIndex:1},{value:"value",paraId:5,tocIndex:1},{value:", etc., to specify relationships between visual element properties and data",paraId:5,tocIndex:1},{value:"encode",paraId:6,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"✓",paraId:5,tocIndex:1},{value:"coordinate",paraId:5,tocIndex:1},{value:"Configure coordinate system for ",paraId:5,tocIndex:1},{value:"sunburst",paraId:5,tocIndex:1},{value:" mark, which performs a series of point transformations to change the spatial display form of the mark",paraId:5,tocIndex:1},{value:"coordinate",paraId:7,tocIndex:1},{value:"{type: 'polar' }",paraId:5,tocIndex:1},{value:"interaction",paraId:5,tocIndex:1},{value:"Configure interaction settings for ",paraId:5,tocIndex:1},{value:"sunburst",paraId:5,tocIndex:1},{value:" mark, with built-in ",paraId:5,tocIndex:1},{value:"drillDown",paraId:5,tocIndex:1},{value:" drill-down configuration",paraId:5,tocIndex:1},{value:"interaction",paraId:8,tocIndex:1},{value:"{ drillDown: true }",paraId:5,tocIndex:1},{value:"style",paraId:5,tocIndex:1},{value:"Configure graphic styles for ",paraId:5,tocIndex:1},{value:"sunburst",paraId:5,tocIndex:1},{value:" mark",paraId:5,tocIndex:1},{value:"style",paraId:9,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"Configure visual channels for ",paraId:10,tocIndex:2},{value:"sunburst",paraId:10,tocIndex:2},{value:" mark.",paraId:10,tocIndex:2},{value:"Property",paraId:11,tocIndex:2},{value:"Description",paraId:11,tocIndex:2},{value:"Type",paraId:11,tocIndex:2},{value:"Default Value",paraId:11,tocIndex:2},{value:"Required",paraId:11,tocIndex:2},{value:"value",paraId:11,tocIndex:2},{value:"Bind the ",paraId:11,tocIndex:2},{value:"value",paraId:11,tocIndex:2},{value:" property channel of ",paraId:11,tocIndex:2},{value:"sunburst",paraId:11,tocIndex:2},{value:" mark, used for numeric fields in data ",paraId:11,tocIndex:2},{value:"data",paraId:11,tocIndex:2},{value:"encode",paraId:12,tocIndex:2},{value:"-",paraId:11,tocIndex:2},{value:"✓",paraId:11,tocIndex:2},{value:"color",paraId:11,tocIndex:2},{value:"Bind the ",paraId:11,tocIndex:2},{value:"color",paraId:11,tocIndex:2},{value:" property channel of ",paraId:11,tocIndex:2},{value:"sunburst",paraId:11,tocIndex:2},{value:" mark. If data fields are mapped to color channels, data will be grouped and split into multiple graphics with different colors, generally used for configuring stacked bar charts, etc. Built-in configuration is ",paraId:11,tocIndex:2},{value:"ancestor-node",paraId:11,tocIndex:2},{value:", used to distinguish different path groups",paraId:11,tocIndex:2},{value:"encode",paraId:13,tocIndex:2},{value:"ancestor-node",paraId:11,tocIndex:2},{value:"The position visual channel of ",paraId:14,tocIndex:3},{value:"sunburst",paraId:14,tocIndex:3},{value:" mark requires values from the ",paraId:14,tocIndex:3},{value:"value",paraId:14,tocIndex:3},{value:" field. In ",paraId:14,tocIndex:3},{value:"data",paraId:14,tocIndex:3},{value:", values in each group are calculated through fields. Internally, tree structure data is transformed into flattened data required by ",paraId:14,tocIndex:3},{value:"rect",paraId:14,tocIndex:3},{value:".",paraId:14,tocIndex:3},{value:"{\n  type: 'sunburst',\n  data: {\n    value: {\n      name: 'root',\n      children: [\n        {\n          name: 'Group 1', // Automatically calculated value as 220\n          children: [\n            { name: 'Group 1-1', count: 100 },\n            { name: 'Group 1-2', count: '120' },\n          ],\n        },\n        {\n          name: 'Group 2', // Automatically calculated value as 190\n          count: 220, // For reasonable mapping, own value won't be used\n          children: [\n            { name: 'Group 2-1', count: 'aaa' }, // Non-numeric parameter\n            { name: 'Group 2-2', count: '190' },\n          ],\n        },\n      ],\n    },\n  },\n  encode: { value: 'count' },\n}\n",paraId:15,tocIndex:3},{value:"Tree structure data internally transformed to flattened data:",paraId:16,tocIndex:3},{value:"{\n  data: [\n    { 'ancestor-node': 'Group 1', path: 'Group 1', value: 220, x: [0, 0.536...], y: [0.333.., 0.666...], depth: 1, ... },\n    { 'ancestor-node': 'Group 2', path: 'Group 2', value: 190, x: [0.536..., 1], y: [0.333.., 0.666...], depth: 1, ... },\n    { 'ancestor-node': 'Group 1', path: 'Group 1 / Group 1-2', value: 120, x: [0, 0.292...],y: [0.666..., 1], depth: 2, ... },\n    { 'ancestor-node': 'Group 1', path: 'Group 1 / Group 1-1', value: 100, ... },\n    { 'ancestor-node': 'Group 2', path: 'Group 2 / Group 2-2', value: 190, ... },\n    { 'ancestor-node': 'Group 2', path: 'Group 2 / Group 2-1', value: 0, ... }, // Non-numeric defaults to 0\n  ],\n}\n",paraId:17,tocIndex:3},{value:"The ",paraId:18,tocIndex:4},{value:"color",paraId:18,tocIndex:4},{value:" visual channel affects the fill color of ",paraId:18,tocIndex:4},{value:"sunburst",paraId:18,tocIndex:4},{value:" graphic marks. When applied to interval charts, it generally maps categorical fields to group data, defaulting to the built-in ",paraId:18,tocIndex:4},{value:"ancestor-node",paraId:18,tocIndex:4},{value:" path grouping.",paraId:18,tocIndex:4},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'sunburst',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  },\n  encode: {\n    value: 'sum',\n    color: 'name',\n  },\n});\n\nchart.render();\n",paraId:19,tocIndex:4},{value:"Try using callback for grouping:",paraId:20,tocIndex:4},{value:"import { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...g2ExtensionPlot.plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'sunburst',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  },\n  encode: {\n    value: 'sum',\n    color: (data) => {\n      const paths = data.path.split(' / ');\n      return [paths[0], paths[1]].join('/');\n    },\n  },\n});\n\nchart.render();\n",paraId:21,tocIndex:4},{value:"sunburst",paraId:22,tocIndex:5},{value:" has polar coordinates configured by default:",paraId:22,tocIndex:5},{value:"{\n  coordinate: {\n    type: 'polar',\n    innerRadius: 0.2,\n  }\n}\n",paraId:23,tocIndex:5},{value:"External configuration of polar coordinate ",paraId:24,tocIndex:5},{value:"polar",paraId:24,tocIndex:5},{value:":",paraId:24,tocIndex:5},{value:"import { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...g2ExtensionPlot.plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'sunburst',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  },\n  encode: { value: 'sum' },\n  coordinate: {\n    type: 'polar',\n    innerRadius: 0.3,\n    outerRadius: 0.9,\n  },\n});\n\nchart.render();\n",paraId:25,tocIndex:5},{value:"Restore to Cartesian coordinate system ",paraId:26,tocIndex:5},{value:"cartesian",paraId:26,tocIndex:5},{value:":",paraId:26,tocIndex:5},{value:"import { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...g2ExtensionPlot.plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'sunburst',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  },\n  encode: { value: 'sum' },\n  coordinate: { type: 'cartesian' },\n});\n\nchart.render();\n",paraId:27,tocIndex:5},{value:"sunburst",paraId:28,tocIndex:6},{value:" has built-in ",paraId:28,tocIndex:6},{value:"drillDown",paraId:28,tocIndex:6},{value:" interaction events configured by default:",paraId:28,tocIndex:6},{value:"import { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...g2ExtensionPlot.plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'sunburst',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  },\n  encode: { value: 'sum' },\n  interaction: {\n    drillDown: {\n      // Breadcrumb style\n      breadCrumb: {\n        rootText: 'Total Name',\n        style: {\n          fontSize: '18px',\n          fill: '#333',\n        },\n        active: {\n          fill: 'red',\n        },\n      },\n      // Whether to maintain original color after drill-down\n      isFixedColor: true,\n    },\n  },\n});\n\nchart.render();\n",paraId:29,tocIndex:6},{value:"style",paraId:30,tocIndex:7},{value:" is used to set the appearance style of chart elements, including fill color, border style, shadow effects, etc.",paraId:30,tocIndex:7},{value:"Property",paraId:31,tocIndex:7},{value:"Description",paraId:31,tocIndex:7},{value:"Type",paraId:31,tocIndex:7},{value:"Default Value",paraId:31,tocIndex:7},{value:"radius",paraId:31,tocIndex:7},{value:"Corner radius size for all four corners of the rectangle",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"0",paraId:31,tocIndex:7},{value:"radiusTopLeft",paraId:31,tocIndex:7},{value:"Top-left corner radius",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"0",paraId:31,tocIndex:7},{value:"radiusTopRight",paraId:31,tocIndex:7},{value:"Top-right corner radius",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"0",paraId:31,tocIndex:7},{value:"radiusBottomRight",paraId:31,tocIndex:7},{value:"Bottom-right corner radius",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"0",paraId:31,tocIndex:7},{value:"radiusBottomLeft",paraId:31,tocIndex:7},{value:"Bottom-left corner radius",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"0",paraId:31,tocIndex:7},{value:"inset",paraId:31,tocIndex:7},{value:"Inner padding in all four directions of the rectangle",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"0",paraId:31,tocIndex:7},{value:"insetLeft",paraId:31,tocIndex:7},{value:"Left inner spacing",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"0",paraId:31,tocIndex:7},{value:"insetRight",paraId:31,tocIndex:7},{value:"Right inner spacing",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"0",paraId:31,tocIndex:7},{value:"insetBottom",paraId:31,tocIndex:7},{value:"Bottom inner spacing",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"0",paraId:31,tocIndex:7},{value:"insetTop",paraId:31,tocIndex:7},{value:"Top inner spacing",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"0",paraId:31,tocIndex:7},{value:"fill",paraId:31,tocIndex:7},{value:"Fill color of the graphic",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => string",paraId:31,tocIndex:7},{value:"-",paraId:31,tocIndex:7},{value:"fillOpacity",paraId:31,tocIndex:7},{value:"Fill opacity of the graphic",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"-",paraId:31,tocIndex:7},{value:"stroke",paraId:31,tocIndex:7},{value:"Stroke of the graphic",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => string",paraId:31,tocIndex:7},{value:"-",paraId:31,tocIndex:7},{value:"strokeOpacity",paraId:31,tocIndex:7},{value:"Stroke opacity",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"-",paraId:31,tocIndex:7},{value:"lineWidth",paraId:31,tocIndex:7},{value:"Width of the graphic stroke",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"-",paraId:31,tocIndex:7},{value:"lineDash",paraId:31,tocIndex:7},{value:"Dashed line configuration for stroke. First value is the length of each dash segment, second value is the spacing distance between segments. Setting lineDash to [0, 0] results in no stroke.",paraId:31,tocIndex:7},{value:"[number,number] |(datum, index, data, column) => [number, number]",paraId:31,tocIndex:7},{value:"-",paraId:31,tocIndex:7},{value:"opacity",paraId:31,tocIndex:7},{value:"Overall opacity of the graphic",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"-",paraId:31,tocIndex:7},{value:"shadowColor",paraId:31,tocIndex:7},{value:"Shadow color of the graphic",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => string",paraId:31,tocIndex:7},{value:"-",paraId:31,tocIndex:7},{value:"shadowBlur",paraId:31,tocIndex:7},{value:"Gaussian blur coefficient for graphic shadow",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"-",paraId:31,tocIndex:7},{value:"shadowOffsetX",paraId:31,tocIndex:7},{value:"Sets the horizontal distance of shadow from the graphic",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"-",paraId:31,tocIndex:7},{value:"shadowOffsetY",paraId:31,tocIndex:7},{value:"Sets the vertical distance of shadow from the graphic",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:31,tocIndex:7},{value:"-",paraId:31,tocIndex:7},{value:"cursor",paraId:31,tocIndex:7},{value:"Mouse cursor style. Same as CSS cursor style, defaults to 'default'.",paraId:31,tocIndex:7},{value:"number | (datum, index, data, column) => string",paraId:31,tocIndex:7},{value:"'default'",paraId:31,tocIndex:7},{value:"Try it out",paraId:32,tocIndex:7},{value:"import { plotlib } from '@antv/g2-extension-plot';\nimport { Runtime, corelib, extend } from '@antv/g2';\n\nconst Chart = extend(Runtime, { ...corelib(), ...plotlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart\n  .sunburst()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/sunburst.json',\n  })\n  .encode('value', 'sum')\n  .style({\n    radius: 8,\n    // 内置透明度 fillOpacity ，根据 0.85 ** depth 层级计算,\n    fillOpacity: (v) => v['fillOpacity'],\n    fill: (v) => {\n      if (v['path'] === '类别 3') return 'red';\n      if (v['name'] === '类别 2.1.1') return 'red';\n    },\n  });\n\nchart.render();\n\n",paraId:33,tocIndex:7},{value:"For more ",paraId:34,tocIndex:7},{value:"style",paraId:34,tocIndex:7},{value:" configurations, please check the ",paraId:34,tocIndex:7},{value:"style",paraId:35,tocIndex:7},{value:" introduction page.",paraId:34,tocIndex:7}]},21778:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(91748);const t=[{value:"Text",paraId:0,tocIndex:0},{value:" is a graphic element used to draw text marks in charts. It allows users to directly add textual annotations, labels, or other explanatory content to charts, thereby enhancing the effectiveness and readability of data visualization. ",paraId:0,tocIndex:0},{value:"Text",paraId:0,tocIndex:0},{value:" marks have numerous visual mapping channels: ",paraId:0,tocIndex:0},{value:"x",paraId:0,tocIndex:0},{value:", ",paraId:0,tocIndex:0},{value:"y",paraId:0,tocIndex:0},{value:", ",paraId:0,tocIndex:0},{value:"color",paraId:0,tocIndex:0},{value:", ",paraId:0,tocIndex:0},{value:"fontSize",paraId:0,tocIndex:0},{value:", ",paraId:0,tocIndex:0},{value:"rotate",paraId:0,tocIndex:0},{value:", etc. In addition, there are numerous text style-related configurations that can provide stronger expressiveness to text visualization through visual mapping. It is generally used in several scenarios:",paraId:0,tocIndex:0},{value:"Text visualization",paraId:1,tocIndex:0},{value:"Data annotation and assistance",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view', // Chart type is 'view'\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  },\n  children: [\n    // Configure bar chart\n    {\n      type: 'interval',\n      encode: { x: 'letter', y: 'frequency' },\n      axis: { y: { labelFormatter: '.0%' } },\n    },\n    {\n      type: 'text', // Child view type is 'text', representing text labels\n      encode: { x: 'letter', y: 'frequency', text: 'frequency' }, // Data encoding configuration: x-axis corresponds to 'letter' field, y-axis corresponds to 'frequency' field, text content is the value of 'frequency' field\n      style: { fill: 'black', textAlign: 'center', dy: -5 }, // Text style configuration: fill color is black, text horizontally centered, y-direction offset -5 pixels\n    },\n  ],\n});\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"For more examples, please check the ",paraId:3,tocIndex:0},{value:"Chart Examples",paraId:4,tocIndex:0},{value:" page.",paraId:3,tocIndex:0},{value:"Property",paraId:5,tocIndex:1},{value:"Description",paraId:5,tocIndex:1},{value:"Type",paraId:5,tocIndex:1},{value:"Default",paraId:5,tocIndex:1},{value:"Required",paraId:5,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"Configure visual channels for ",paraId:5,tocIndex:1},{value:"text",paraId:5,tocIndex:1},{value:" marks, including ",paraId:5,tocIndex:1},{value:"x",paraId:5,tocIndex:1},{value:", ",paraId:5,tocIndex:1},{value:"y",paraId:5,tocIndex:1},{value:", ",paraId:5,tocIndex:1},{value:"color",paraId:5,tocIndex:1},{value:", ",paraId:5,tocIndex:1},{value:"shape",paraId:5,tocIndex:1},{value:", etc., to specify the relationship between visual element properties and data",paraId:5,tocIndex:1},{value:"encode",paraId:6,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"style",paraId:5,tocIndex:1},{value:"Configure ",paraId:5,tocIndex:1},{value:"text",paraId:5,tocIndex:1},{value:" graphic styles",paraId:5,tocIndex:1},{value:"style",paraId:7,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"scale",paraId:5,tocIndex:1},{value:"Configure graphic scaling for ",paraId:5,tocIndex:1},{value:"text",paraId:5,tocIndex:1},{value:" marks, including ",paraId:5,tocIndex:1},{value:"text",paraId:5,tocIndex:1},{value:", ",paraId:5,tocIndex:1},{value:"fontSize",paraId:5,tocIndex:1},{value:", etc.",paraId:5,tocIndex:1},{value:"scale",paraId:8,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"Configure visual channels for ",paraId:9,tocIndex:2},{value:"text",paraId:9,tocIndex:2},{value:" marks, an important configuration that defines the mapping relationship between data fields and visual attributes, determining how data is transformed into visual representation.",paraId:9,tocIndex:2},{value:"Property",paraId:10,tocIndex:2},{value:"Description",paraId:10,tocIndex:2},{value:"Type",paraId:10,tocIndex:2},{value:"Default",paraId:10,tocIndex:2},{value:"x",paraId:10,tocIndex:2},{value:"Bind the ",paraId:10,tocIndex:2},{value:"x",paraId:10,tocIndex:2},{value:" property channel for ",paraId:10,tocIndex:2},{value:"text",paraId:10,tocIndex:2},{value:" marks",paraId:10,tocIndex:2},{value:"encode",paraId:11,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"y",paraId:10,tocIndex:2},{value:"Bind the ",paraId:10,tocIndex:2},{value:"y",paraId:10,tocIndex:2},{value:" property channel for ",paraId:10,tocIndex:2},{value:"text",paraId:10,tocIndex:2},{value:" marks",paraId:10,tocIndex:2},{value:"encode",paraId:12,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"text",paraId:10,tocIndex:2},{value:"Bind the ",paraId:10,tocIndex:2},{value:"text",paraId:10,tocIndex:2},{value:" property channel for ",paraId:10,tocIndex:2},{value:"text",paraId:10,tocIndex:2},{value:" marks",paraId:10,tocIndex:2},{value:"encode",paraId:13,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"shape",paraId:10,tocIndex:2},{value:"Bind the ",paraId:10,tocIndex:2},{value:"shape",paraId:10,tocIndex:2},{value:" property channel for ",paraId:10,tocIndex:2},{value:"text",paraId:10,tocIndex:2},{value:" marks",paraId:10,tocIndex:2},{value:"encode",paraId:14,tocIndex:2},{value:"-",paraId:10,tocIndex:2},{value:"shape",paraId:15,tocIndex:2},{value:"Configure the shape of the text container",paraId:16,tocIndex:2},{value:"Shape",paraId:17,tocIndex:2},{value:"Description",paraId:17,tocIndex:2},{value:"Example",paraId:17,tocIndex:2},{value:"text",paraId:17,tocIndex:2},{value:"Draw text",paraId:17,tocIndex:2},{value:"badge",paraId:17,tocIndex:2},{value:"Draw text with markers, shaped like a balloon",paraId:17,tocIndex:2},{value:"For more ",paraId:18,tocIndex:2},{value:"encode",paraId:18,tocIndex:2},{value:" configurations, please check the ",paraId:18,tocIndex:2},{value:"encode",paraId:19,tocIndex:2},{value:" introduction page.",paraId:18,tocIndex:2},{value:"scale",paraId:20,tocIndex:3},{value:" is used to define how data maps to visual properties.",paraId:20,tocIndex:3},{value:"Property",paraId:21,tocIndex:3},{value:"Description",paraId:21,tocIndex:3},{value:"Type",paraId:21,tocIndex:3},{value:"Default",paraId:21,tocIndex:3},{value:"text",paraId:21,tocIndex:3},{value:"Define text mapping rules",paraId:21,tocIndex:3},{value:"scale",paraId:22,tocIndex:3},{value:">",paraId:21,tocIndex:3},{value:"{type: identity}",paraId:21,tocIndex:3},{value:"fontSize",paraId:21,tocIndex:3},{value:"Define font size mapping rules for text",paraId:21,tocIndex:3},{value:"scale",paraId:23,tocIndex:3},{value:">",paraId:21,tocIndex:3},{value:"{type: identity}",paraId:21,tocIndex:3},{value:"rotate",paraId:21,tocIndex:3},{value:"Define rotation mapping rules for text",paraId:21,tocIndex:3},{value:"scale",paraId:24,tocIndex:3},{value:">",paraId:21,tocIndex:3},{value:"{type: identity}",paraId:21,tocIndex:3},{value:"For more ",paraId:25,tocIndex:3},{value:"scale",paraId:25,tocIndex:3},{value:" configurations, please check the ",paraId:25,tocIndex:3},{value:"scale",paraId:26,tocIndex:3},{value:" introduction page.",paraId:25,tocIndex:3},{value:"style",paraId:27,tocIndex:4},{value:" is used to set the appearance styles of text, including fill color, border styles, shadow effects, etc.",paraId:27,tocIndex:4},{value:"Property",paraId:28,tocIndex:4},{value:"Description",paraId:28,tocIndex:4},{value:"Type",paraId:28,tocIndex:4},{value:"Default",paraId:28,tocIndex:4},{value:"shape",paraId:28,tocIndex:4},{value:"Modify text container graphics, consistent with ",paraId:28,tocIndex:4},{value:"shape",paraId:28,tocIndex:4},{value:" property channel configuration in ",paraId:28,tocIndex:4},{value:"encode",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<string>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"fontSize",paraId:28,tocIndex:4},{value:"Text size",paraId:28,tocIndex:4},{value:"number",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<number>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"fontFamily",paraId:28,tocIndex:4},{value:"Text font",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<string>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"fontWeight",paraId:28,tocIndex:4},{value:"Font weight",paraId:28,tocIndex:4},{value:"number",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<number>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"lineHeight",paraId:28,tocIndex:4},{value:"Line height of text",paraId:28,tocIndex:4},{value:"number",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<number>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"textAlign",paraId:28,tocIndex:4},{value:"Set current alignment of text content, supported properties: ",paraId:28,tocIndex:4},{value:"center",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"end",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"left",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"right",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"start",paraId:28,tocIndex:4},{value:", default is ",paraId:28,tocIndex:4},{value:"start",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<string>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"textBaseline",paraId:28,tocIndex:4},{value:"Set current text baseline used when drawing text, supported properties: ",paraId:28,tocIndex:4},{value:"top",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"middle",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"bottom",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"alphabetic",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"hanging",paraId:28,tocIndex:4},{value:". Default is ",paraId:28,tocIndex:4},{value:"bottom",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<string>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"fill",paraId:28,tocIndex:4},{value:"Fill color of the graphic",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<string>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"fillOpacity",paraId:28,tocIndex:4},{value:"Fill opacity of the graphic",paraId:28,tocIndex:4},{value:"number",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<number>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"stroke",paraId:28,tocIndex:4},{value:"Stroke of the graphic",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<string>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"strokeOpacity",paraId:28,tocIndex:4},{value:"Stroke opacity",paraId:28,tocIndex:4},{value:"number",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<number>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"lineWidth",paraId:28,tocIndex:4},{value:"Width of the graphic stroke",paraId:28,tocIndex:4},{value:"number",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<number>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"lineDash",paraId:28,tocIndex:4},{value:"Dashed stroke configuration. First value is the length of each dash segment, second value is the distance between segments. Setting lineDash to [0, 0] results in no stroke.",paraId:28,tocIndex:4},{value:"[number,number]",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<[number, number]>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"opacity",paraId:28,tocIndex:4},{value:"Overall opacity of the graphic",paraId:28,tocIndex:4},{value:"number",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<number>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"shadowColor",paraId:28,tocIndex:4},{value:"Shadow color of the graphic",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<string>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"shadowBlur",paraId:28,tocIndex:4},{value:"Gaussian blur coefficient of the graphic shadow",paraId:28,tocIndex:4},{value:"number",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<number>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"shadowOffsetX",paraId:28,tocIndex:4},{value:"Horizontal distance of shadow from the graphic",paraId:28,tocIndex:4},{value:"number",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<number>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"shadowOffsetY",paraId:28,tocIndex:4},{value:"Vertical distance of shadow from the graphic",paraId:28,tocIndex:4},{value:"number",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<number>",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"cursor",paraId:28,tocIndex:4},{value:"Mouse cursor style. Same as CSS cursor style, default 'default'.",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:" | ",paraId:28,tocIndex:4},{value:"Function<string>",paraId:28,tocIndex:4},{value:"'default'",paraId:28,tocIndex:4},{value:"dx",paraId:28,tocIndex:4},{value:"Offset of text in x direction",paraId:28,tocIndex:4},{value:"number",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"dy",paraId:28,tocIndex:4},{value:"Offset of text in y direction",paraId:28,tocIndex:4},{value:"number",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"text",paraId:28,tocIndex:4},{value:"Text content to be drawn",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"x",paraId:28,tocIndex:4},{value:"X coordinate of text",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"y",paraId:28,tocIndex:4},{value:"Y coordinate of text",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"wordWrap",paraId:28,tocIndex:4},{value:"Whether to enable text wrapping",paraId:28,tocIndex:4},{value:"boolean",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"wordWrapWidth",paraId:28,tocIndex:4},{value:"Maximum width for text wrapping",paraId:28,tocIndex:4},{value:"number",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"background",paraId:28,tocIndex:4},{value:"Background color of text",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"backgroundRadius",paraId:28,tocIndex:4},{value:"Border radius of text background",paraId:28,tocIndex:4},{value:"boolean",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"mark",paraId:28,tocIndex:4},{value:"Properties of link markers",paraId:28,tocIndex:4},{value:"mark",paraId:29,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"transform",paraId:28,tocIndex:4},{value:"Configure text transformation properties",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"color",paraId:28,tocIndex:4},{value:"Text color",paraId:28,tocIndex:4},{value:"string",paraId:28,tocIndex:4},{value:"-",paraId:28,tocIndex:4},{value:"mark",paraId:30,tocIndex:4},{value:"When ",paraId:31,tocIndex:4},{value:"shape",paraId:31,tocIndex:4},{value:" is ",paraId:31,tocIndex:4},{value:"badge",paraId:31,tocIndex:4},{value:", ",paraId:31,tocIndex:4},{value:"style",paraId:31,tocIndex:4},{value:" also has the following configurations.",paraId:31,tocIndex:4},{value:"Property",paraId:32,tocIndex:4},{value:"Description",paraId:32,tocIndex:4},{value:"Type",paraId:32,tocIndex:4},{value:"Default",paraId:32,tocIndex:4},{value:"markerSize",paraId:32,tocIndex:4},{value:"Marker size",paraId:32,tocIndex:4},{value:"number",paraId:32,tocIndex:4},{value:"24",paraId:32,tocIndex:4},{value:"markerFill",paraId:32,tocIndex:4},{value:"Marker fill color",paraId:32,tocIndex:4},{value:"string",paraId:32,tocIndex:4},{value:"markerFillOpacity",paraId:32,tocIndex:4},{value:"Marker fill opacity",paraId:32,tocIndex:4},{value:"number",paraId:32,tocIndex:4},{value:"markerStroke",paraId:32,tocIndex:4},{value:"Marker stroke color",paraId:32,tocIndex:4},{value:"string",paraId:32,tocIndex:4},{value:"markerStrokeOpacity",paraId:32,tocIndex:4},{value:"Marker stroke opacity",paraId:32,tocIndex:4},{value:"number",paraId:32,tocIndex:4},{value:"For more ",paraId:33,tocIndex:4},{value:"style",paraId:33,tocIndex:4},{value:" configurations, please check the ",paraId:33,tocIndex:4},{value:"style",paraId:34,tocIndex:4},{value:" introduction page.",paraId:33,tocIndex:4},{value:"Try it out:",paraId:35,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/antvdemo/assets/data/blockchain.json',\n    transform: [\n      {\n        type: 'fold',\n        fields: ['blockchain', 'nlp'],\n        key: 'type',\n        value: 'value',\n      },\n    ],\n  })\n  .axis('x', { labelAutoHide: 'greedy' });\n\nchart\n  .line()\n  .encode('x', (d) => new Date(d.date))\n  .encode('y', 'value')\n  .encode('color', 'type');\n\nchart\n  .text()\n  .data([new Date('2017-12-17'), 100])\n  .style({\n    text: `2017-12-17, 受比特币影响，blockchain 搜索热度达到峰值：100`,\n    wordWrap: true,\n    wordWrapWidth: 164,\n    dx: -174,\n    dy: 30,\n    fill: '#2C3542',\n    fillOpacity: 0.65,\n    fontSize: 10,\n    background: true,\n    backgroundRadius: 2,\n    connector: true,\n    startMarker: true,\n    startMarkerFill: '#2C3542',\n    startMarkerFillOpacity: 0.65,\n  })\n  .tooltip(false);\n\nchart.render();\n\n",paraId:36,tocIndex:4},{value:"How to specify arrow icon length?",paraId:37,tocIndex:5},{value:"There are two ways to specify arrow icon length: one is by filling in pixel values, such as ",paraId:38,tocIndex:5},{value:"40",paraId:38,tocIndex:5},{value:", to specify a fixed length; another is by specifying a percentage, such as ",paraId:38,tocIndex:5},{value:"30%",paraId:38,tocIndex:5},{value:", to specify the relative length referring to the arrow length. The default value is ",paraId:38,tocIndex:5},{value:"40%",paraId:38,tocIndex:5},{value:". Example:",paraId:38,tocIndex:5},{value:"chart\n  .vector()\n  // ...\n  .shape('vector')\n  .style({\n    arrowSize: 40,\n    // arrowSize: '30%',\n  });\n",paraId:39,tocIndex:5},{value:"How to draw peak value markers?",paraId:40,tocIndex:5},{value:"Configure ",paraId:41,tocIndex:5},{value:"selectY",paraId:42,tocIndex:5},{value:" data transformation, set grouping ",paraId:41,tocIndex:5},{value:"groupBy: 'color'",paraId:41,tocIndex:5},{value:" to group by color channel, and set maximum value selector ",paraId:41,tocIndex:5},{value:"selector: 'max'",paraId:41,tocIndex:5},{value:" to use the max selector for specified data extraction, outputting to the y channel. This way you can draw text marks at the maximum value of each line.",paraId:41,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  data: [\n    { month: 'Jan', city: 'Tokyo', temperature: 7 },\n    { month: 'Jan', city: 'London', temperature: 3.9 },\n    { month: 'Feb', city: 'Tokyo', temperature: 6.9 },\n    { month: 'Feb', city: 'London', temperature: 4.2 },\n    { month: 'Mar', city: 'Tokyo', temperature: 9.5 },\n    { month: 'Mar', city: 'London', temperature: 5.7 },\n    { month: 'Apr', city: 'Tokyo', temperature: 14.5 },\n    { month: 'Apr', city: 'London', temperature: 8.5 },\n    { month: 'May', city: 'Tokyo', temperature: 18.4 },\n    { month: 'May', city: 'London', temperature: 11.9 },\n    { month: 'Jun', city: 'Tokyo', temperature: 21.5 },\n    { month: 'Jun', city: 'London', temperature: 15.2 },\n    { month: 'Jul', city: 'Tokyo', temperature: 25.2 },\n    { month: 'Jul', city: 'London', temperature: 17 },\n    { month: 'Aug', city: 'Tokyo', temperature: 26.5 },\n    { month: 'Aug', city: 'London', temperature: 16.6 },\n    { month: 'Sep', city: 'Tokyo', temperature: 23.3 },\n    { month: 'Sep', city: 'London', temperature: 14.2 },\n    { month: 'Oct', city: 'Tokyo', temperature: 18.3 },\n    { month: 'Oct', city: 'London', temperature: 10.3 },\n    { month: 'Nov', city: 'Tokyo', temperature: 13.9 },\n    { month: 'Nov', city: 'London', temperature: 6.6 },\n    { month: 'Dec', city: 'Tokyo', temperature: 9.6 },\n    { month: 'Dec', city: 'London', temperature: 4.8 },\n  ],\n  encode: { x: 'month', y: 'temperature', color: 'city' },\n  scale: { x: { range: [0, 1] }, y: { nice: true } },\n  axis: { y: { labelFormatter: (d) => d + '°C' } },\n  children: [\n    { type: 'line', encode: { shape: 'smooth' } },\n    {\n      type: 'text',\n      encode: {\n        x: 'month',\n        y: 'temperature',\n        text: (d) => `Peak: ${d.temperature}`,\n      },\n      transform: [\n        {\n          type: 'selectY',\n          groupBy: 'color',\n          selector: 'max',\n        },\n      ],\n      style: {\n        fill: 'orange',\n        fontSize: 16,\n        dy: -15,\n      },\n      tooltip: false,\n    },\n    {\n      type: 'point',\n      encode: { x: 'month', y: 'temperature' },\n      transform: [\n        {\n          type: 'selectY',\n          groupBy: 'color',\n          selector: 'max',\n        },\n      ],\n      tooltip: false,\n    },\n  ],\n});\n\nchart.render();\n",paraId:43,tocIndex:5}]},18062:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(26379);const t=[{value:"Vector graphics map data into ",paraId:0,tocIndex:0},{value:"arrow",paraId:0,tocIndex:0},{value:" styles for visualization display, by controlling the position, size, color, angle and other information of arrows to visualize vector field data. It has the following visual channels:",paraId:0,tocIndex:0},{value:"x",paraId:1,tocIndex:0},{value:": Horizontal position, corresponding to x-axis scale",paraId:1,tocIndex:0},{value:"y",paraId:1,tocIndex:0},{value:": Vertical position, corresponding to y-axis scale, position anchor is positioned at the center of the arrow",paraId:1,tocIndex:0},{value:"color",paraId:1,tocIndex:0},{value:": Color of the arrow",paraId:1,tocIndex:0},{value:"size",paraId:1,tocIndex:0},{value:": Length of the arrow",paraId:1,tocIndex:0},{value:"rotate",paraId:1,tocIndex:0},{value:": Rotation angle of the arrow, starting angle is ",paraId:1,tocIndex:0},{value:"right",paraId:1,tocIndex:0},{value:" in Cartesian coordinate system, rotation direction is ",paraId:1,tocIndex:0},{value:"clockwise",paraId:1,tocIndex:0},{value:"Vector graphic marks map data into vector data through the above channels: ",paraId:2,tocIndex:0},{value:"[start, end]",paraId:2,tocIndex:0},{value:".",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'vector',\n  data: [\n    { longitude: 3.375, latitude: 45.625, u: -1.3287959, v: -2.6778967 },\n    { longitude: 3.625, latitude: 45.625, u: -1.012322, v: -2.8640392 },\n    { longitude: 3.875, latitude: 45.625, u: -0.7947747, v: -3.0722558 },\n    { longitude: 4.125, latitude: 45.625, u: -0.70024896, v: -3.311115 },\n    { longitude: 4.375, latitude: 45.625, u: -0.62092346, v: -3.5720115 },\n    { longitude: 4.625, latitude: 45.625, u: -0.54210645, v: -3.798527 },\n    { longitude: 4.875, latitude: 45.625, u: -0.531152, v: -3.6907976 },\n    { longitude: 5.125, latitude: 45.625, u: -0.58284736, v: -3.2739944 },\n    { longitude: 5.375, latitude: 45.625, u: -0.6388908, v: -2.8400586 },\n    { longitude: 5.625, latitude: 45.625, u: -0.68683237, v: -2.4499083 },\n    { longitude: 5.875, latitude: 45.625, u: -0.6949226, v: -2.2482452 },\n    { longitude: 6.125, latitude: 45.625, u: -0.67617714, v: -2.189318 },\n    { longitude: 6.375, latitude: 45.625, u: -0.6690367, v: -2.1100578 },\n    { longitude: 6.625, latitude: 45.625, u: -0.6749189, v: -2.0985062 },\n    { longitude: 6.875, latitude: 45.625, u: -0.61023676, v: -2.067676 },\n    { longitude: 7.125, latitude: 45.625, u: -0.46769565, v: -1.9350243 },\n    { longitude: 7.375, latitude: 45.625, u: -0.31841764, v: -1.7978805 },\n    { longitude: 7.625, latitude: 45.625, u: -0.296789, v: -1.6545589 },\n    { longitude: 7.875, latitude: 45.625, u: -0.49164182, v: -1.6660733 },\n    { longitude: 8.125, latitude: 45.625, u: -0.7730643, v: -1.8458021 },\n    { longitude: 8.375, latitude: 45.625, u: -1.0214152, v: -2.0177982 },\n    { longitude: 8.625, latitude: 45.625, u: -1.131555, v: -2.0604942 },\n    { longitude: 8.875, latitude: 45.625, u: -1.143751, v: -1.9134171 },\n    { longitude: 9.125, latitude: 45.625, u: -1.1628431, v: -1.6859006 },\n    { longitude: 9.375, latitude: 45.625, u: -1.1996219, v: -1.4945693 },\n    { longitude: 9.625, latitude: 45.625, u: -1.2651129, v: -1.385864 },\n    { longitude: 9.875, latitude: 45.625, u: -1.340052, v: -1.3189282 },\n  ],\n  encode: {\n    x: 'longitude',\n    y: 'latitude',\n    rotate: ({ u, v }) => (Math.atan2(v, u) * 180) / Math.PI,\n    size: 30,\n    color: ({ u, v }) => Math.hypot(v, u),\n  },\n  scales: {\n    size: { range: [6, 20] },\n    color: { type: 'sequential', palette: 'viridis' },\n  },\n  axis: {\n    x: { grid: false },\n    y: { grid: false },\n  },\n  style: {\n    arrowSize: 10,\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"Property",paraId:4,tocIndex:1},{value:"Description",paraId:4,tocIndex:1},{value:"Type",paraId:4,tocIndex:1},{value:"Default",paraId:4,tocIndex:1},{value:"Required",paraId:4,tocIndex:1},{value:"encode",paraId:4,tocIndex:1},{value:"Configure the visual channels of the ",paraId:4,tocIndex:1},{value:"vector",paraId:4,tocIndex:1},{value:" mark, including ",paraId:4,tocIndex:1},{value:"x",paraId:4,tocIndex:1},{value:", ",paraId:4,tocIndex:1},{value:"y",paraId:4,tocIndex:1},{value:", ",paraId:4,tocIndex:1},{value:"rotate",paraId:4,tocIndex:1},{value:", ",paraId:4,tocIndex:1},{value:"size",paraId:4,tocIndex:1},{value:", etc., to specify the relationship between visual element properties and data",paraId:4,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"✓",paraId:4,tocIndex:1},{value:"style",paraId:4,tocIndex:1},{value:"Configure the graphic style of the ",paraId:4,tocIndex:1},{value:"vector",paraId:4,tocIndex:1},{value:" mark",paraId:4,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"Property",paraId:7,tocIndex:2},{value:"Description",paraId:7,tocIndex:2},{value:"Type",paraId:7,tocIndex:2},{value:"Default",paraId:7,tocIndex:2},{value:"Required",paraId:7,tocIndex:2},{value:"x",paraId:7,tocIndex:2},{value:"Bind the ",paraId:7,tocIndex:2},{value:"x",paraId:7,tocIndex:2},{value:" property channel of the ",paraId:7,tocIndex:2},{value:"vector",paraId:7,tocIndex:2},{value:" mark, binding the horizontal position corresponding to the x-axis scale",paraId:7,tocIndex:2},{value:"encode",paraId:8,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"✓",paraId:7,tocIndex:2},{value:"y",paraId:7,tocIndex:2},{value:"Bind the ",paraId:7,tocIndex:2},{value:"y",paraId:7,tocIndex:2},{value:" property channel of the ",paraId:7,tocIndex:2},{value:"vector",paraId:7,tocIndex:2},{value:" mark, binding the vertical position corresponding to the y-axis scale, position anchor is positioned at the center of the arrow",paraId:7,tocIndex:2},{value:"encode",paraId:9,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"✓",paraId:7,tocIndex:2},{value:"size",paraId:7,tocIndex:2},{value:"Bind the ",paraId:7,tocIndex:2},{value:"size",paraId:7,tocIndex:2},{value:" property channel of the ",paraId:7,tocIndex:2},{value:"vector",paraId:7,tocIndex:2},{value:" mark, changing the size of the graphic mark, the ",paraId:7,tocIndex:2},{value:"size",paraId:7,tocIndex:2},{value:" visual channel is mapped to the length of the arrow",paraId:7,tocIndex:2},{value:"encode",paraId:10,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"✓",paraId:7,tocIndex:2},{value:"rotate",paraId:7,tocIndex:2},{value:"Bind the ",paraId:7,tocIndex:2},{value:"rotate",paraId:7,tocIndex:2},{value:" property channel of the ",paraId:7,tocIndex:2},{value:"vector",paraId:7,tocIndex:2},{value:" mark, used to map data fields to the rotation angle of the arrow",paraId:7,tocIndex:2},{value:"encode",paraId:11,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"✓",paraId:7,tocIndex:2},{value:"color",paraId:7,tocIndex:2},{value:"Bind the ",paraId:7,tocIndex:2},{value:"color",paraId:7,tocIndex:2},{value:" property channel of the ",paraId:7,tocIndex:2},{value:"vector",paraId:7,tocIndex:2},{value:" mark. If a data field is mapped to the color channel, the data will be grouped, with different colors corresponding to different groups. The ",paraId:7,tocIndex:2},{value:"color",paraId:7,tocIndex:2},{value:" visual channel is mapped to the color of the arrow.",paraId:7,tocIndex:2},{value:"encode",paraId:12,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"Property",paraId:13,tocIndex:3},{value:"Description",paraId:13,tocIndex:3},{value:"Type",paraId:13,tocIndex:3},{value:"Default",paraId:13,tocIndex:3},{value:"Required",paraId:13,tocIndex:3},{value:"arrowSize",paraId:13,tocIndex:3},{value:"Size of the arrow icon, can specify pixel values or relative values of arrow length",paraId:13,tocIndex:3},{value:"string",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"number",paraId:13,tocIndex:3},{value:"'40%'",paraId:13,tocIndex:3},{value:"fill",paraId:13,tocIndex:3},{value:"Fill color of the graphic",paraId:13,tocIndex:3},{value:"string",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"Function<string>",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"fillOpacity",paraId:13,tocIndex:3},{value:"Fill opacity of the graphic",paraId:13,tocIndex:3},{value:"number",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"Function<number>",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"stroke",paraId:13,tocIndex:3},{value:"Stroke of the graphic",paraId:13,tocIndex:3},{value:"string",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"Function<string>",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"strokeOpacity",paraId:13,tocIndex:3},{value:"Stroke opacity",paraId:13,tocIndex:3},{value:"number",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"Function<number>",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"lineWidth",paraId:13,tocIndex:3},{value:"Width of the graphic stroke",paraId:13,tocIndex:3},{value:"number",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"Function<number>",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"lineDash",paraId:13,tocIndex:3},{value:"Dashed stroke configuration. The first value is the length of each dash segment, the second value is the distance between segments. Setting lineDash to [0, 0] results in no stroke",paraId:13,tocIndex:3},{value:"[number,number]",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"Function<[number, number]>",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"opacity",paraId:13,tocIndex:3},{value:"Overall opacity of the graphic",paraId:13,tocIndex:3},{value:"number",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"Function<number>",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"shadowColor",paraId:13,tocIndex:3},{value:"Shadow color of the graphic",paraId:13,tocIndex:3},{value:"string",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"Function<string>",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"shadowBlur",paraId:13,tocIndex:3},{value:"Gaussian blur coefficient of the graphic shadow",paraId:13,tocIndex:3},{value:"number",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"Function<number>",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"shadowOffsetX",paraId:13,tocIndex:3},{value:"Horizontal distance of the shadow from the graphic",paraId:13,tocIndex:3},{value:"number",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"Function<number>",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"shadowOffsetY",paraId:13,tocIndex:3},{value:"Vertical distance of the shadow from the graphic",paraId:13,tocIndex:3},{value:"number",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"Function<number>",paraId:13,tocIndex:3},{value:"-",paraId:13,tocIndex:3},{value:"cursor",paraId:13,tocIndex:3},{value:"Mouse cursor style. Same as CSS cursor style, default 'default'",paraId:13,tocIndex:3},{value:"string",paraId:13,tocIndex:3},{value:" | ",paraId:13,tocIndex:3},{value:"Function<string>",paraId:13,tocIndex:3},{value:"'default'",paraId:13,tocIndex:3},{value:"How to specify the length of arrow icons?",paraId:14,tocIndex:4},{value:"There are two ways to specify the length of arrow icons. One is by filling in pixel values, such as ",paraId:15,tocIndex:4},{value:"4",paraId:15,tocIndex:4},{value:", to specify a fixed length; the other is by specifying a percentage, such as ",paraId:15,tocIndex:4},{value:"30%",paraId:15,tocIndex:4},{value:", to specify the relative length with reference to the arrow length. The default value is ",paraId:15,tocIndex:4},{value:"40%",paraId:15,tocIndex:4},{value:". Example as follows:",paraId:15,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'vector',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antfincdn/F5VcgnqRku/wind.json',\n  },\n  encode: {\n    x: 'longitude',\n    y: 'latitude',\n    rotate: ({ u, v }) => (Math.atan2(v, u) * 180) / Math.PI,\n    size: ({ u, v }) => Math.hypot(v, u),\n    color: ({ u, v }) => Math.hypot(v, u),\n  },\n  scales: {\n    size: { range: [6, 20] },\n    color: { type: 'sequential', palette: 'viridis' },\n  },\n  axis: {\n    x: { grid: false },\n    y: { grid: false },\n  },\n  style: {\n    arrowSize: 4,\n    // arrowSize: '30%',\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:16,tocIndex:4},{value:"For more examples, you can visit the ",paraId:17,tocIndex:4},{value:"Chart Examples",paraId:18,tocIndex:4},{value:" page.",paraId:17,tocIndex:4}]},29475:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(6127);const t=[{value:"wordCloud",paraId:0,tocIndex:0},{value:" is a specialized tool for generating word cloud visualizations. Word clouds are a visual representation that intuitively displays the frequency of keywords in text data through words of different sizes, colors, and positions to reflect the importance or weight of words.",paraId:0,tocIndex:0},{value:"When using the ",paraId:1,tocIndex:0},{value:"wordCloud",paraId:1,tocIndex:0},{value:" component, users can easily transform text data into visual word clouds. It supports highly customizable configuration options, including word size ranges, color mapping, rotation angles, and layout algorithms, thereby meeting diverse visualization needs. Additionally, ",paraId:1,tocIndex:0},{value:"wordCloud",paraId:1,tocIndex:0},{value:" can seamlessly integrate with other G2 features, such as data filtering, interactive event binding, etc., further enhancing user experience.",paraId:1,tocIndex:0},{value:"Whether used to display trending topics on social media, analyze user comment sentiment, or present keyword distribution, ",paraId:2,tocIndex:0},{value:"wordCloud",paraId:2,tocIndex:0},{value:" can elegantly help users quickly gain insights into trends and patterns behind the data. ",paraId:2,tocIndex:0},{value:"wordCloud",paraId:2,tocIndex:0},{value:" is not only simple to use but also delivers excellent performance, making it an ideal choice in the field of data visualization.",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'wordCloud', // Specify chart type as word cloud\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/philosophy-word.json',\n  },\n  layout: {\n    spiral: 'rectangular', // Word cloud layout mode: rectangular spiral layout\n  },\n  encode: { color: 'text' }, // Map data field `text` to word cloud color\n  legend: false,\n  axis: false,\n  tooltip: false,\n});\n\nchart.render();\n",paraId:3,tocIndex:1},{value:"For more examples, please visit the ",paraId:4,tocIndex:1},{value:"Chart Examples - Text",paraId:5,tocIndex:1},{value:" page.",paraId:4,tocIndex:1},{value:"Property",paraId:6,tocIndex:2},{value:"Description",paraId:6,tocIndex:2},{value:"Type",paraId:6,tocIndex:2},{value:"Default",paraId:6,tocIndex:2},{value:"Required",paraId:6,tocIndex:2},{value:"encode",paraId:6,tocIndex:2},{value:"Configure visual channels for ",paraId:6,tocIndex:2},{value:"wordCloud",paraId:6,tocIndex:2},{value:" mark, including ",paraId:6,tocIndex:2},{value:"x",paraId:6,tocIndex:2},{value:", ",paraId:6,tocIndex:2},{value:"y",paraId:6,tocIndex:2},{value:", ",paraId:6,tocIndex:2},{value:"color",paraId:6,tocIndex:2},{value:", ",paraId:6,tocIndex:2},{value:"size",paraId:6,tocIndex:2},{value:", etc., to specify relationships between visual element properties and data",paraId:6,tocIndex:2},{value:"encode",paraId:7,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"✓",paraId:6,tocIndex:2},{value:"labels",paraId:6,tocIndex:2},{value:"Configure custom node data labels for ",paraId:6,tocIndex:2},{value:"wordCloud",paraId:6,tocIndex:2},{value:"label[]",paraId:6,tocIndex:2},{value:"[]",paraId:6,tocIndex:2},{value:"layout",paraId:6,tocIndex:2},{value:"Configure ",paraId:6,tocIndex:2},{value:"wordCloud",paraId:6,tocIndex:2},{value:" layout, including ",paraId:6,tocIndex:2},{value:"padding",paraId:6,tocIndex:2},{value:", ",paraId:6,tocIndex:2},{value:"rotate",paraId:6,tocIndex:2},{value:", etc.",paraId:6,tocIndex:2},{value:"layout",paraId:8,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"padding",paraId:6,tocIndex:2},{value:"Configure margin of ",paraId:6,tocIndex:2},{value:"wordCloud",paraId:6,tocIndex:2},{value:" container",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"scale",paraId:6,tocIndex:2},{value:"Configure graphic scaling for ",paraId:6,tocIndex:2},{value:"wordCloud",paraId:6,tocIndex:2},{value:" mark, including ",paraId:6,tocIndex:2},{value:"x",paraId:6,tocIndex:2},{value:", ",paraId:6,tocIndex:2},{value:"y",paraId:6,tocIndex:2},{value:", ",paraId:6,tocIndex:2},{value:"series",paraId:6,tocIndex:2},{value:", ",paraId:6,tocIndex:2},{value:"size",paraId:6,tocIndex:2},{value:", etc.",paraId:6,tocIndex:2},{value:"scale",paraId:9,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"style",paraId:6,tocIndex:2},{value:"Configure ",paraId:6,tocIndex:2},{value:"wordCloud",paraId:6,tocIndex:2},{value:" graphic style",paraId:6,tocIndex:2},{value:"style",paraId:10,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"Configure visual channels for ",paraId:11,tocIndex:3},{value:"wordCloud",paraId:11,tocIndex:3},{value:" mark, an important configuration that defines the mapping relationship between data fields and visual properties, determining how data is transformed into visual representation.",paraId:11,tocIndex:3},{value:"Property",paraId:12,tocIndex:3},{value:"Description",paraId:12,tocIndex:3},{value:"Type",paraId:12,tocIndex:3},{value:"Default",paraId:12,tocIndex:3},{value:"Required",paraId:12,tocIndex:3},{value:"text",paraId:12,tocIndex:3},{value:"Bind the ",paraId:12,tocIndex:3},{value:"text",paraId:12,tocIndex:3},{value:" property channel of ",paraId:12,tocIndex:3},{value:"wordCloud",paraId:12,tocIndex:3},{value:" mark",paraId:12,tocIndex:3},{value:"encode",paraId:13,tocIndex:3},{value:"'text'",paraId:12,tocIndex:3},{value:"rotate",paraId:12,tocIndex:3},{value:"Bind the ",paraId:12,tocIndex:3},{value:"rotate",paraId:12,tocIndex:3},{value:" property channel of ",paraId:12,tocIndex:3},{value:"wordCloud",paraId:12,tocIndex:3},{value:" mark, used to map data fields to font rotation of graphic elements",paraId:12,tocIndex:3},{value:"encode",paraId:14,tocIndex:3},{value:"'rotate'",paraId:12,tocIndex:3},{value:"fontSize",paraId:12,tocIndex:3},{value:"Bind the ",paraId:12,tocIndex:3},{value:"fontSize",paraId:12,tocIndex:3},{value:" property channel of ",paraId:12,tocIndex:3},{value:"wordCloud",paraId:12,tocIndex:3},{value:" mark, used to map data fields to font size of graphic elements",paraId:12,tocIndex:3},{value:"encode",paraId:15,tocIndex:3},{value:"'size'",paraId:12,tocIndex:3},{value:"color",paraId:12,tocIndex:3},{value:"Bind the ",paraId:12,tocIndex:3},{value:"color",paraId:12,tocIndex:3},{value:" property channel of ",paraId:12,tocIndex:3},{value:"wordCloud",paraId:12,tocIndex:3},{value:" mark, mapping data fields to color channel",paraId:12,tocIndex:3},{value:"encode",paraId:16,tocIndex:3},{value:"-",paraId:12,tocIndex:3},{value:"For more ",paraId:17,tocIndex:3},{value:"encode",paraId:17,tocIndex:3},{value:" configurations, please visit the ",paraId:17,tocIndex:3},{value:"encode",paraId:18,tocIndex:3},{value:" introduction page.",paraId:17,tocIndex:3},{value:"scale",paraId:19,tocIndex:4},{value:" is used to define how data maps to visual properties (such as color, size, shape, etc.). In the context of ",paraId:19,tocIndex:4},{value:"cell",paraId:19,tocIndex:4},{value:" usage, the common role of scale is to provide mapping rules for each visual channel (such as color, size, position, etc.), enabling data points to be accurately represented.",paraId:19,tocIndex:4},{value:"Property",paraId:20,tocIndex:4},{value:"Description",paraId:20,tocIndex:4},{value:"Type",paraId:20,tocIndex:4},{value:"Default",paraId:20,tocIndex:4},{value:"Required",paraId:20,tocIndex:4},{value:"x",paraId:20,tocIndex:4},{value:"Define mapping rules from data fields to X-axis visual position",paraId:20,tocIndex:4},{value:"Record<string, ",paraId:20,tocIndex:4},{value:"scale",paraId:21,tocIndex:4},{value:">",paraId:20,tocIndex:4},{value:"{ range: [0, 1] }",paraId:20,tocIndex:4},{value:"y",paraId:20,tocIndex:4},{value:"Define mapping rules from data fields to Y-axis visual position",paraId:20,tocIndex:4},{value:"Record<string, ",paraId:20,tocIndex:4},{value:"scale",paraId:22,tocIndex:4},{value:">",paraId:20,tocIndex:4},{value:"{ range: [0, 1] }",paraId:20,tocIndex:4},{value:"For more ",paraId:23,tocIndex:4},{value:"scale",paraId:23,tocIndex:4},{value:" configurations, please visit the ",paraId:23,tocIndex:4},{value:"scale",paraId:24,tocIndex:4},{value:" introduction page.",paraId:23,tocIndex:4},{value:"Configure margins of ",paraId:25,tocIndex:5},{value:"wordCloud",paraId:25,tocIndex:5},{value:" container, you can configure margins in different directions through ",paraId:25,tocIndex:5},{value:"padding{Position}",paraId:25,tocIndex:5},{value:"type Position = 'Top' | 'Bottom' | 'left' | 'right';\n",paraId:26,tocIndex:5},{value:"Comparison with ",paraId:27,tocIndex:5},{value:"padding",paraId:27,tocIndex:5},{value:" configuration in layout",paraId:27,tocIndex:5},{value:"Property",paraId:28,tocIndex:5},{value:"Description",paraId:28,tocIndex:5},{value:"Type",paraId:28,tocIndex:5},{value:"Example",paraId:28,tocIndex:5},{value:"option.padding",paraId:28,tocIndex:5},{value:"Configure margin of ",paraId:28,tocIndex:5},{value:"wordCloud",paraId:28,tocIndex:5},{value:" container",paraId:28,tocIndex:5},{value:"number",paraId:28,tocIndex:5},{value:"option.layout.padding",paraId:28,tocIndex:5},{value:"Set spacing between words in pixels, can be a specific value or dynamic function",paraId:28,tocIndex:5},{value:"number | (word: any) => number",paraId:28,tocIndex:5},{value:"Property",paraId:29,tocIndex:6},{value:"Description",paraId:29,tocIndex:6},{value:"Type",paraId:29,tocIndex:6},{value:"Default",paraId:29,tocIndex:6},{value:"font",paraId:29,tocIndex:6},{value:"Set font style, can be string or function, function returns font based on word, modifies d3 word cloud configuration",paraId:29,tocIndex:6},{value:"string | (word: any) => string",paraId:29,tocIndex:6},{value:"'Impact'",paraId:29,tocIndex:6},{value:"fontSize",paraId:29,tocIndex:6},{value:"Set font size, can be specific value, range [min, max] or function, modifies d3 word cloud configuration",paraId:29,tocIndex:6},{value:"number | [number, number] | (word: any) => number",paraId:29,tocIndex:6},{value:"-",paraId:29,tocIndex:6},{value:"imageMask",paraId:29,tocIndex:6},{value:"Set image as mask for word layout, can be HTML image element or image path string",paraId:29,tocIndex:6},{value:"'HTMLImageElement | string",paraId:29,tocIndex:6},{value:"-",paraId:29,tocIndex:6},{value:"on",paraId:29,tocIndex:6},{value:"Configure event listener functions, can listen to layout completion (end) or word update (word)",paraId:29,tocIndex:6},{value:"((type: 'end', details?: { cloud; words; bounds }) => void) | ((type: 'word', details?: { cloud; word }) => void)",paraId:29,tocIndex:6},{value:"-",paraId:29,tocIndex:6},{value:"padding",paraId:29,tocIndex:6},{value:"Set spacing between words in pixels, can be specific value or dynamic function",paraId:29,tocIndex:6},{value:"number | (word: any) => number",paraId:29,tocIndex:6},{value:"2",paraId:29,tocIndex:6},{value:"rotate",paraId:29,tocIndex:6},{value:"Set rotation angle of words, can be specific value or dynamic function",paraId:29,tocIndex:6},{value:"number | word => number",paraId:29,tocIndex:6},{value:"() => (~~(Math.random() * 6) - 3) * 30",paraId:29,tocIndex:6},{value:"random",paraId:29,tocIndex:6},{value:"Set random number generator, can be specific value or function",paraId:29,tocIndex:6},{value:"number | (word => number)",paraId:29,tocIndex:6},{value:"-",paraId:29,tocIndex:6},{value:"size",paraId:29,tocIndex:6},{value:"Set rectangular width and height of layout, format is [width, height]",paraId:29,tocIndex:6},{value:"[number, number]",paraId:29,tocIndex:6},{value:"[20, 60]",paraId:29,tocIndex:6},{value:"spiral",paraId:29,tocIndex:6},{value:'Set word arrangement mode, can choose "archimedean" or "rectangular" built-in spiral types, or implement custom through function',paraId:29,tocIndex:6},{value:"'archimedean' | 'rectangular'",paraId:29,tocIndex:6},{value:"-",paraId:29,tocIndex:6},{value:"text",paraId:29,tocIndex:6},{value:"Set word text accessor function, used to return word text based on word data",paraId:29,tocIndex:6},{value:"(word: any) => string",paraId:29,tocIndex:6},{value:"(d) => d.text",paraId:29,tocIndex:6},{value:"timeInterval",paraId:29,tocIndex:6},{value:"Set time interval of layout algorithm, controls runtime",paraId:29,tocIndex:6},{value:"number",paraId:29,tocIndex:6},{value:"-",paraId:29,tocIndex:6},{value:"spiral",paraId:30,tocIndex:6},{value:"spiral",paraId:31,tocIndex:6},{value:" is a parameter that controls the word cloud layout algorithm, determining how words are arranged on the canvas and their path patterns. By adjusting spiral, you can optimize the visual effect, layout density, and performance of the word cloud.",paraId:31,tocIndex:6},{value:"Parameter Value",paraId:32,tocIndex:6},{value:"Description",paraId:32,tocIndex:6},{value:"Use Case",paraId:32,tocIndex:6},{value:"archimedean",paraId:32,tocIndex:6},{value:"Archimedean spiral (default), words arrange from center outward in spiral path, more compact layout.",paraId:32,tocIndex:6},{value:"General scenarios, pursuing natural compact layout",paraId:32,tocIndex:6},{value:"rectangular",paraId:32,tocIndex:6},{value:"Rectangular spiral, words arrange in rectangular path, faster computation but relatively sparse layout.",paraId:32,tocIndex:6},{value:"Optimizing performance when data volume is large",paraId:32,tocIndex:6},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\nconst spiralMap = [\n  {\n    label: 'Archimedean Spiral',\n    spiral: 'archimedean',\n  },\n  {\n    label: 'Rectangular Spiral',\n    spiral: 'rectangular',\n  },\n];\n\nchart.options({\n  type: 'wordCloud',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/philosophy-word.json',\n  },\n  layout: {\n    spiral: 'rectangular',\n  },\n  encode: { color: 'text' },\n});\n\nconst handleSetSpiral = (spiral) => {\n  // Set selected coordinate system\n  chart.options({\n    layout: { spiral },\n  });\n  chart.render(); // Re-render chart\n};\n\n// layout-spiral selector\nconst selectorContainer = document.createElement('div');\nselectorContainer.textContent = 'Choose spiral ';\nconst selector = document.createElement('select');\nselector.innerHTML = spiralMap.map(\n  (spiral, index) =>\n    `<option value=\"${spiral.spiral}\" ${index === 0 ? 'selected' : ''}>${\n      spiral.label\n    }</option>`,\n);\nselector.onchange = (e) => {\n  handleSetSpiral(e.target.value);\n};\nselectorContainer.appendChild(selector);\ncontainer.insertBefore(selectorContainer, container.childNodes[0]);\n\nchart.render();\n",paraId:33,tocIndex:6},{value:"imageMask",paraId:34,tocIndex:6},{value:"imageMask",paraId:35,tocIndex:6},{value:" is a key configuration item for controlling word cloud shape. Its function is to limit the word cloud layout within the contour range of a specified image mask, thereby generating word cloud effects that match the image shape.",paraId:35,tocIndex:6},{value:"imageMask",paraId:36,tocIndex:6},{value:" receives a mask image, and the WordCloud layout algorithm analyzes the pixel information of the imageMask image, treating non-transparent areas of the image as areas where words can be placed, while transparent areas prohibit word placement. Words dynamically adjust their size and position within non-transparent areas based on weight (such as word frequency).",paraId:36,tocIndex:6},{value:"Notes:",paraId:37,tocIndex:6},{value:"Image quality: Mask images should typically be monochrome (black and white) images. Generally, word clouds define shapes based on non-white areas.",paraId:38,tocIndex:6},{value:"Image loading: When using image masks, ensure that image resources are fully loaded, otherwise rendering issues may occur.",paraId:38,tocIndex:6},{value:"Performance impact: Complex shapes (such as high-resolution images) may affect word cloud construction speed.",paraId:38,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'wordCloud',\n  layout: {\n    imageMask:\n      'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*LKU4TYEiB-4AAAAAAAAAAAAADmJ7AQ/original',\n    fontSize: 12,\n  },\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/antvdemo/assets/data/antv-keywords.json',\n  },\n  encode: { color: 'name', text: 'name' },\n  legend: false,\n});\n\nchart.render();\n",paraId:39,tocIndex:6},{value:"Composite graphic marks need to distinguish graphic configurations through different prefixes.",paraId:40,tocIndex:7},{value:"Property",paraId:41,tocIndex:7},{value:"Description",paraId:41,tocIndex:7},{value:"Type",paraId:41,tocIndex:7},{value:"Default",paraId:41,tocIndex:7},{value:"fontStyle",paraId:41,tocIndex:7},{value:"Set text style, calls G drawing for rendering",paraId:41,tocIndex:7},{value:"FontStyle | (datum, index, data, column) => FontStyle",paraId:41,tocIndex:7},{value:"'normal'",paraId:41,tocIndex:7},{value:"fontSize",paraId:41,tocIndex:7},{value:"Set text font size, calls G drawing for rendering",paraId:41,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"fontWeight",paraId:41,tocIndex:7},{value:"Set text font weight, calls G drawing for rendering",paraId:41,tocIndex:7},{value:"FontWeight | number | (datum, index, data, column) => number |FontWeight",paraId:41,tocIndex:7},{value:"'normal'",paraId:41,tocIndex:7},{value:"fill",paraId:41,tocIndex:7},{value:"Fill color of graphic",paraId:41,tocIndex:7},{value:"number | (datum, index, data, column) => string",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"fillOpacity",paraId:41,tocIndex:7},{value:"Fill opacity of graphic",paraId:41,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"stroke",paraId:41,tocIndex:7},{value:"Stroke of graphic",paraId:41,tocIndex:7},{value:"number | (datum, index, data, column) => string",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"strokeOpacity",paraId:41,tocIndex:7},{value:"Stroke opacity",paraId:41,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"text",paraId:41,tocIndex:7},{value:"Text content",paraId:41,tocIndex:7},{value:"number | (datum, index, data, column) => string",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"textAlign",paraId:41,tocIndex:7},{value:"Set text alignment",paraId:41,tocIndex:7},{value:"TextAlign | (datum, index, data, column) => TextAlign",paraId:41,tocIndex:7},{value:"'center'",paraId:41,tocIndex:7},{value:"textBaseline",paraId:41,tocIndex:7},{value:"Set text baseline position",paraId:41,tocIndex:7},{value:"TextBaseline | (datum, index, data, column) => TextBaseline",paraId:41,tocIndex:7},{value:"'middle'",paraId:41,tocIndex:7},{value:"lineWidth",paraId:41,tocIndex:7},{value:"Width of graphic stroke",paraId:41,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"lineDash",paraId:41,tocIndex:7},{value:"Dashed line configuration for stroke, first value is length of each dash segment, second value is distance between segments. Setting lineDash to [0, 0] results in no stroke.",paraId:41,tocIndex:7},{value:"[number,number] |(datum, index, data, column) => [number, number]",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"opacity",paraId:41,tocIndex:7},{value:"Overall opacity of graphic",paraId:41,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"shadowColor",paraId:41,tocIndex:7},{value:"Shadow color of graphic",paraId:41,tocIndex:7},{value:"number | (datum, index, data, column) => string",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"shadowBlur",paraId:41,tocIndex:7},{value:"Gaussian blur coefficient of graphic shadow",paraId:41,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"shadowOffsetX",paraId:41,tocIndex:7},{value:"Set horizontal distance of shadow from graphic",paraId:41,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"shadowOffsetY",paraId:41,tocIndex:7},{value:"Set vertical distance of shadow from graphic",paraId:41,tocIndex:7},{value:"number | (datum, index, data, column) => number",paraId:41,tocIndex:7},{value:"-",paraId:41,tocIndex:7},{value:"cursor",paraId:41,tocIndex:7},{value:"Mouse style. Same as CSS mouse style, default 'default'.",paraId:41,tocIndex:7},{value:"number | (datum, index, data, column) => string",paraId:41,tocIndex:7},{value:"'default'",paraId:41,tocIndex:7},{value:"type FontStyle = 'normal' | 'italic' | 'oblique';\n\ntype FontWeight = 'normal' | 'bold' | 'lighter';\n\ntype TextAlign = 'left' | 'center' | 'right';\n\ntype TextBaseline = 'top' | 'middle' | 'bottom';\n",paraId:42,tocIndex:7},{value:"Try it out:",paraId:43,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  paddingTop: 40,\n});\n\nchart\n  .wordCloud()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/philosophy-word.json',\n  })\n  .layout({\n    spiral: 'rectangular',\n    fontSize: [20, 100],\n  })\n  .encode('color', 'text');\n\nchart.render();\n\n",paraId:44,tocIndex:7}]},86179:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(42616);const t=[{value:"The band scale is a special type of ordinal scale that maps discrete domains (such as categories, names, etc.) to continuous numerical ranges, allocating equal-width intervals (bands) for each category. Unlike regular ",paraId:0,tocIndex:0},{value:"ordinal",paraId:1,tocIndex:0},{value:" scales, band scales not only focus on point positions but also consider the interval width occupied by each category.",paraId:0,tocIndex:0},{value:"Key characteristics of band scales:",paraId:2,tocIndex:0},{value:"Maps discrete data (such as categories) to continuous intervals",paraId:3,tocIndex:0},{value:"Allocates equal-width intervals (bands) for each category",paraId:3,tocIndex:0},{value:"Supports setting inner spacing between categories (paddingInner) and outer spacing (paddingOuter)",paraId:3,tocIndex:0},{value:"Commonly used in visualizations that need to represent categorical data, such as bar charts and column charts",paraId:3,tocIndex:0},{value:"In G2, the band scale is the default x-axis scale for bar charts (interval marks), automatically handling the mapping and layout of categorical data.",paraId:4,tocIndex:0},{value:"Property",paraId:5,tocIndex:1},{value:"Description",paraId:5,tocIndex:1},{value:"Type",paraId:5,tocIndex:1},{value:"Default",paraId:5,tocIndex:1},{value:"Required",paraId:5,tocIndex:1},{value:"domain",paraId:5,tocIndex:1},{value:"Sets the domain array, i.e., possible values of input data",paraId:5,tocIndex:1},{value:"number[] | string[] | Date[]",paraId:5,tocIndex:1},{value:"[]",paraId:5,tocIndex:1},{value:"range",paraId:5,tocIndex:1},{value:"Sets the range of data mapping, i.e., the output range",paraId:5,tocIndex:1},{value:"number[]",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"string[]",paraId:5,tocIndex:1},{value:"[0, 1]",paraId:5,tocIndex:1},{value:"unknown",paraId:5,tocIndex:1},{value:"Return value for ",paraId:5,tocIndex:1},{value:"undefined",paraId:5,tocIndex:1},{value:", ",paraId:5,tocIndex:1},{value:"NaN",paraId:5,tocIndex:1},{value:", ",paraId:5,tocIndex:1},{value:"null",paraId:5,tocIndex:1},{value:" empty values",paraId:5,tocIndex:1},{value:"any",paraId:5,tocIndex:1},{value:"undefined",paraId:5,tocIndex:1},{value:"round",paraId:5,tocIndex:1},{value:"Whether to round the output values",paraId:5,tocIndex:1},{value:"boolean",paraId:5,tocIndex:1},{value:"false",paraId:5,tocIndex:1},{value:"paddingInner",paraId:5,tocIndex:1},{value:"Sets inner spacing between categories, in range [0, 1], larger values mean larger spacing",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingOuter",paraId:5,tocIndex:1},{value:"Sets outer spacing at both ends, in range [0, 1], larger values mean larger spacing",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"padding",paraId:5,tocIndex:1},{value:"Shortcut to set both ",paraId:5,tocIndex:1},{value:"paddingInner",paraId:5,tocIndex:1},{value:" and ",paraId:5,tocIndex:1},{value:"paddingOuter",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"align",paraId:5,tocIndex:1},{value:"Alignment, in range [0, 1], 0 means left-aligned, 0.5 means centered, 1 means right-aligned",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0.5",paraId:5,tocIndex:1},{value:"compare",paraId:5,tocIndex:1},{value:"Sorting function for domain mapping",paraId:5,tocIndex:1},{value:"(a: string or number, b: string or number) => number",paraId:5,tocIndex:1},{value:"undefined",paraId:5,tocIndex:1},{value:"flex",paraId:5,tocIndex:1},{value:"Sets width allocation ratio for each category",paraId:5,tocIndex:1},{value:"number[]",paraId:5,tocIndex:1},{value:"[]",paraId:5,tocIndex:1},{value:"The band scale divides the continuous range into equal-width intervals, with each interval corresponding to a discrete value in the domain. The following diagram illustrates the layout principles of the band scale:",paraId:6,tocIndex:2},{value:"|<------------------------------------------- range -------------------------------------------\x3e|\n|             |                   |             |                   |             |             |\n|<--step*PO--\x3e|<----bandWidth----\x3e|<--step*PI--\x3e|<----bandWidth----\x3e|<--step*PI--\x3e|<--step*PO--\x3e|\n|             | ***************** |             | ***************** |             |             |\n|             | ******* A ******* |             | ******* B ******* |             |             |\n|             | ***************** |             | ***************** |             |             |\n|             |<--------------step-------------\x3e|                                               |\n|-----------------------------------------------------------------------------------------------|\n",paraId:7,tocIndex:2},{value:"Where:",paraId:8,tocIndex:2},{value:"range",paraId:9,tocIndex:2},{value:": The entire range of the scale",paraId:9,tocIndex:2},{value:"bandWidth",paraId:9,tocIndex:2},{value:": The width occupied by each category",paraId:9,tocIndex:2},{value:"step",paraId:9,tocIndex:2},{value:": The distance between the center points of adjacent categories",paraId:9,tocIndex:2},{value:"step*PI (paddingInner)",paraId:9,tocIndex:2},{value:": Inner spacing between categories",paraId:9,tocIndex:2},{value:"step*PO (paddingOuter)",paraId:9,tocIndex:2},{value:": Outer spacing at both ends",paraId:9,tocIndex:2},{value:"Bandwidth is the actual width occupied by each category in a band scale. It determines the width of bars in bar charts, the height of bars in horizontal bar charts, etc. Bandwidth is the core concept that distinguishes band scales from other scales.",paraId:10,tocIndex:4},{value:"The bandwidth calculation involves multiple parameters, with the specific formula as follows:",paraId:11,tocIndex:5},{value:"step = rangeLength / (domain.length - paddingInner + paddingOuter * 2)\nbandWidth = step * (1 - paddingInner)\n",paraId:12,tocIndex:5},{value:"Where:",paraId:13,tocIndex:5},{value:"rangeLength",paraId:14,tocIndex:5},{value:": The length of the range (range[1] - range[0])",paraId:14,tocIndex:5},{value:"domain.length",paraId:14,tocIndex:5},{value:": The number of categories in the domain",paraId:14,tocIndex:5},{value:"paddingInner",paraId:14,tocIndex:5},{value:": Inner spacing ratio [0, 1]",paraId:14,tocIndex:5},{value:"paddingOuter",paraId:14,tocIndex:5},{value:": Outer spacing ratio [0, 1]",paraId:14,tocIndex:5},{value:"paddingInner",paraId:15,tocIndex:7},{value:" controls the spacing between categories and directly affects bandwidth size:",paraId:15,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { category: 'A', value: 100 },\n  { category: 'B', value: 80 },\n  { category: 'C', value: 120 },\n  { category: 'D', value: 90 },\n];\n\n// Create three charts showing different paddingInner effects\nconst charts = [\n  { paddingInner: 0, title: 'paddingInner: 0 (Maximum bandwidth)' },\n  { paddingInner: 0.3, title: 'paddingInner: 0.3 (Medium bandwidth)' },\n  { paddingInner: 0.8, title: 'paddingInner: 0.8 (Minimum bandwidth)' },\n];\n\ncharts.forEach((config, index) => {\n  const container = document.createElement('div');\n  container.style.width = '300px';\n  container.style.height = '200px';\n  container.style.display = 'inline-block';\n  container.style.margin = '10px';\n  document.getElementById('container').appendChild(container);\n\n  const chart = new Chart({\n    container,\n    autoFit: true,\n  });\n\n  chart.options({\n    type: 'interval',\n    data,\n    encode: {\n      x: 'category',\n      y: 'value',\n      color: 'category',\n    },\n    scale: {\n      x: {\n        type: 'band',\n        paddingInner: config.paddingInner,\n        paddingOuter: 0.1,\n      },\n    },\n    axis: {\n      x: { title: config.title },\n      y: { title: null },\n    },\n  });\n\n  chart.render();\n});\n",paraId:16,tocIndex:7},{value:"paddingOuter",paraId:17,tocIndex:8},{value:" controls the spacing at both ends and indirectly affects bandwidth:",paraId:17,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { category: 'A', value: 100 },\n  { category: 'B', value: 80 },\n  { category: 'C', value: 120 },\n  { category: 'D', value: 90 },\n];\n\nconst charts = [\n  { paddingOuter: 0, title: 'paddingOuter: 0' },\n  { paddingOuter: 0.3, title: 'paddingOuter: 0.3' },\n  { paddingOuter: 0.6, title: 'paddingOuter: 0.6' },\n];\n\ncharts.forEach((config, index) => {\n  const container = document.createElement('div');\n  container.style.width = '300px';\n  container.style.height = '200px';\n  container.style.display = 'inline-block';\n  container.style.margin = '10px';\n  document.getElementById('container').appendChild(container);\n\n  const chart = new Chart({\n    container,\n    autoFit: true,\n  });\n\n  chart.options({\n    type: 'interval',\n    data,\n    encode: {\n      x: 'category',\n      y: 'value',\n      color: 'category',\n    },\n    scale: {\n      x: {\n        type: 'band',\n        paddingInner: 0.2,\n        paddingOuter: config.paddingOuter,\n      },\n    },\n    axis: {\n      x: { title: config.title },\n      y: { title: null },\n    },\n  });\n\n  chart.render();\n});\n",paraId:18,tocIndex:8},{value:"The more categories there are, the smaller the bandwidth for each category:",paraId:19,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst datasets = [\n  {\n    data: [\n      { category: 'A', value: 100 },\n      { category: 'B', value: 80 },\n    ],\n    title: '2 Categories',\n  },\n  {\n    data: [\n      { category: 'A', value: 100 },\n      { category: 'B', value: 80 },\n      { category: 'C', value: 120 },\n      { category: 'D', value: 90 },\n    ],\n    title: '4 Categories',\n  },\n  {\n    data: [\n      { category: 'A', value: 100 },\n      { category: 'B', value: 80 },\n      { category: 'C', value: 120 },\n      { category: 'D', value: 90 },\n      { category: 'E', value: 110 },\n      { category: 'F', value: 95 },\n    ],\n    title: '6 Categories',\n  },\n];\n\ndatasets.forEach((dataset, index) => {\n  const container = document.createElement('div');\n  container.style.width = '300px';\n  container.style.height = '200px';\n  container.style.display = 'inline-block';\n  container.style.margin = '10px';\n  document.getElementById('container').appendChild(container);\n\n  const chart = new Chart({\n    container,\n    autoFit: true,\n  });\n\n  chart.options({\n    type: 'interval',\n    data: dataset.data,\n    encode: {\n      x: 'category',\n      y: 'value',\n      color: 'category',\n    },\n    scale: {\n      x: {\n        type: 'band',\n        padding: 0.3, // Fixed spacing ratio\n      },\n    },\n    axis: {\n      x: { title: dataset.title },\n      y: { title: null },\n    },\n  });\n\n  chart.render();\n});\n",paraId:20,tocIndex:9},{value:"In actual development, sometimes you need to get the calculated bandwidth value, which can be done in the following way:",paraId:21,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { category: 'A', value: 100 },\n    { category: 'B', value: 80 },\n    { category: 'C', value: 120 },\n    { category: 'D', value: 90 },\n  ],\n  encode: {\n    x: 'category',\n    y: 'value',\n    color: 'category',\n  },\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.3,\n    },\n  },\n});\n\nchart.render().then(() => {\n  // Get x-axis scale\n  const xScale = chart.getScale().x;\n\n  // Get bandwidth value - use no-parameter call\n  const bandWidth = xScale.getBandWidth?.() ?? 0;\n  console.log('Current bandwidth value:', bandWidth);\n\n  // You can also get bandwidth for specific category (if needed)\n  const categoryABandWidth = xScale.getBandWidth?.(xScale.invert('A')) ?? 0;\n  console.log('Category A bandwidth value:', categoryABandWidth);\n\n  // Calculate step value (distance between adjacent category centers)\n  const domain = xScale.getOptions()?.domain || [];\n  const range = xScale.getOptions()?.range || [0, 1];\n  const rangeLength = range[1] - range[0];\n  const paddingInner = xScale.getOptions()?.paddingInner || 0;\n  const paddingOuter = xScale.getOptions()?.paddingOuter || 0;\n  const step = rangeLength / (domain.length - paddingInner + paddingOuter * 2);\n  console.log('Current step value:', step);\n\n  // Display bandwidth information on the chart\n  const container = chart.getContainer();\n  const info = document.createElement('div');\n  info.style.position = 'absolute';\n  info.style.top = '10px';\n  info.style.left = '10px';\n  info.style.background = 'rgba(0,0,0,0.8)';\n  info.style.color = 'white';\n  info.style.padding = '5px 10px';\n  info.style.borderRadius = '4px';\n  info.style.fontSize = '12px';\n  info.innerHTML = `Bandwidth: ${bandWidth.toFixed(2)}<br>Step: ${step.toFixed(2)}`;\n  container.appendChild(info);\n});\n",paraId:22,tocIndex:10},{value:"In bar charts, bandwidth directly determines the width of bars:",paraId:23,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { month: 'Jan', sales: 1200 },\n    { month: 'Feb', sales: 1100 },\n    { month: 'Mar', sales: 1350 },\n    { month: 'Apr', sales: 1280 },\n  ],\n  encode: {\n    x: 'month',\n    y: 'sales',\n    color: 'month',\n  },\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.2, // Smaller spacing, wider bars\n    },\n  },\n  style: {\n    stroke: '#fff',\n    strokeWidth: 2,\n  },\n});\n\nchart.render();\n",paraId:24,tocIndex:12},{value:"In horizontal bar charts, bandwidth determines the height of bars:",paraId:25,tocIndex:13},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  coordinate: { transform: [{ type: 'transpose' }] },\n  data: [\n    { department: 'Sales', count: 45 },\n    { department: 'Marketing', count: 32 },\n    { department: 'Technology', count: 28 },\n    { department: 'HR', count: 15 },\n  ],\n  encode: {\n    x: 'department',\n    y: 'count',\n    color: 'department',\n  },\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.4, // Larger spacing between bars\n    },\n  },\n});\n\nchart.render();\n",paraId:26,tocIndex:13},{value:"In grouped bar charts, the overall bandwidth is divided equally among the sub-groups:",paraId:27,tocIndex:14},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { quarter: 'Q1', type: 'Actual', value: 120 },\n    { quarter: 'Q1', type: 'Budget', value: 100 },\n    { quarter: 'Q2', type: 'Actual', value: 140 },\n    { quarter: 'Q2', type: 'Budget', value: 130 },\n    { quarter: 'Q3', type: 'Actual', value: 160 },\n    { quarter: 'Q3', type: 'Budget', value: 150 },\n  ],\n  encode: {\n    x: 'quarter',\n    y: 'value',\n    color: 'type',\n  },\n  transform: [{ type: 'dodgeX' }],\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.3, // Overall bandwidth for each quarter\n    },\n  },\n});\n\nchart.render();\n",paraId:28,tocIndex:14},{value:"Small data (< 5 categories)",paraId:29,tocIndex:16},{value:": Use smaller padding (0.1-0.3) to make bars wider and more prominent",paraId:29,tocIndex:16},{value:"Medium data (5-10 categories)",paraId:29,tocIndex:16},{value:": Use medium padding (0.3-0.5) to balance readability and visual effect",paraId:29,tocIndex:16},{value:"Large data (> 10 categories)",paraId:29,tocIndex:16},{value:": Use larger padding (0.5-0.8) or consider paginated display",paraId:29,tocIndex:16},{value:"import { Chart } from '@antv/g2';\n\n// Simulate bandwidth effects under different container widths\nconst widths = [300, 600, 900];\nconst data = Array.from({ length: 8 }, (_, i) => ({\n  category: `Category ${String.fromCharCode(65 + i)}`,\n  value: Math.random() * 100 + 50,\n}));\n\nwidths.forEach((width, index) => {\n  const container = document.createElement('div');\n  container.style.width = `${width}px`;\n  container.style.height = '200px';\n  container.style.display = 'inline-block';\n  container.style.margin = '10px';\n  container.style.border = '1px solid #ccc';\n  document.getElementById('container').appendChild(container);\n\n  const chart = new Chart({\n    container,\n    width,\n    height: 200,\n  });\n\n  chart.options({\n    type: 'interval',\n    data,\n    encode: {\n      x: 'category',\n      y: 'value',\n      color: 'category',\n    },\n    scale: {\n      x: {\n        type: 'band',\n        padding: 0.2, // Fixed spacing ratio\n      },\n    },\n    axis: {\n      x: { title: `Container width: ${width}px` },\n      y: { title: null },\n    },\n  });\n\n  chart.render();\n});\n",paraId:30,tocIndex:17},{value:"For charts that need to adapt to different screen sizes, you can dynamically adjust padding:",paraId:31,tocIndex:18},{value:"// Dynamically adjust padding based on container width\nfunction getResponsivePadding(containerWidth, dataLength) {\n  const baseWidth = containerWidth / dataLength;\n\n  if (baseWidth > 100) {\n    return 0.6; // Increase spacing when container is very wide\n  } else if (baseWidth > 50) {\n    return 0.4; // Medium width\n  } else {\n    return 0.2; // Reduce spacing when container is narrow\n  }\n}\n",paraId:32,tocIndex:18},{value:"By deeply understanding the bandwidth concept, you can better control the visual effects of charts and create both beautiful and practical data visualizations.",paraId:33,tocIndex:18},{value:"The most common application of band scales is in bar charts. By setting ",paraId:34,tocIndex:20},{value:"padding",paraId:34,tocIndex:20},{value:", you can control the spacing between bars:",paraId:34,tocIndex:20},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    color: 'genre',\n  },\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.5, // Set spacing between bars\n    },\n  },\n});\n\nchart.render();\n",paraId:35,tocIndex:20},{value:"In grouped bar charts, band scales work together with dodgeX transform to create grouping effects:",paraId:36,tocIndex:21},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { month: 'Jan', value: 86.5, type: 'Precipitation' },\n    { month: 'Feb', value: 86.5, type: 'Precipitation' },\n    { month: 'Mar', value: 86.5, type: 'Precipitation' },\n    { month: 'Apr', value: 86.5, type: 'Precipitation' },\n    { month: 'May', value: 86.5, type: 'Precipitation' },\n    { month: 'Jun', value: 86.5, type: 'Precipitation' },\n    { month: 'Jan', value: 30.5, type: 'Evaporation' },\n    { month: 'Feb', value: 30.5, type: 'Evaporation' },\n    { month: 'Mar', value: 30.5, type: 'Evaporation' },\n    { month: 'Apr', value: 30.5, type: 'Evaporation' },\n    { month: 'May', value: 30.5, type: 'Evaporation' },\n    { month: 'Jun', value: 30.5, type: 'Evaporation' },\n  ],\n  encode: {\n    x: 'month',\n    y: 'value',\n    color: 'type',\n  },\n  transform: [{ type: 'dodgeX' }],\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.2, // Set spacing between groups\n    },\n  },\n});\n\nchart.render();\n",paraId:37,tocIndex:21},{value:"Using the ",paraId:38,tocIndex:22},{value:"flex",paraId:38,tocIndex:22},{value:" property allows setting different width ratios for different categories:",paraId:38,tocIndex:22},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { country: 'USA', value: 12394, gdp: 21.4 },\n    { country: 'China', value: 9608, gdp: 14.7 },\n    { country: 'Japan', value: 4731, gdp: 5.0 },\n    { country: 'Germany', value: 3861, gdp: 4.2 },\n    { country: 'UK', value: 2678, gdp: 2.9 },\n  ],\n  encode: {\n    x: 'country',\n    y: 'value',\n    color: 'country',\n  },\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.4,\n      flex: [2.14, 1.47, 0.5, 0.42, 0.29], // Set different widths based on GDP\n    },\n  },\n});\n\nchart.render();\n",paraId:39,tocIndex:22},{value:"By transposing the coordinate system, you can create horizontal bar charts where band scales still apply:",paraId:40,tocIndex:23},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  coordinate: { transform: [{ type: 'transpose' }] },\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    color: 'genre',\n  },\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.5,\n    },\n  },\n});\n\nchart.render();\n",paraId:41,tocIndex:23},{value:"Using ",paraId:42,tocIndex:24},{value:"stackY",paraId:42,tocIndex:24},{value:" transform can create stacked bar charts showing cumulative effects of each part:",paraId:42,tocIndex:24},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { quarter: 'Q1', department: 'Sales', value: 120 },\n    { quarter: 'Q1', department: 'Marketing', value: 100 },\n    { quarter: 'Q1', department: 'Technology', value: 80 },\n    { quarter: 'Q2', department: 'Sales', value: 140 },\n    { quarter: 'Q2', department: 'Marketing', value: 110 },\n    { quarter: 'Q2', department: 'Technology', value: 90 },\n    { quarter: 'Q3', department: 'Sales', value: 160 },\n    { quarter: 'Q3', department: 'Marketing', value: 95 },\n    { quarter: 'Q3', department: 'Technology', value: 120 },\n    { quarter: 'Q4', department: 'Sales', value: 180 },\n    { quarter: 'Q4', department: 'Marketing', value: 100 },\n    { quarter: 'Q4', department: 'Technology', value: 130 },\n  ],\n  encode: {\n    x: 'quarter',\n    y: 'value',\n    color: 'department',\n  },\n  transform: [{ type: 'stackY' }],\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.3,\n    },\n  },\n});\n\nchart.render();\n",paraId:43,tocIndex:24},{value:"Automatically adjust bar width based on specified field values, suitable for representing weight or proportional relationships:",paraId:44,tocIndex:25},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { region: 'East', sales: 8500, population: 2.4 },\n    { region: 'South', sales: 6200, population: 1.8 },\n    { region: 'North', sales: 7800, population: 2.1 },\n    { region: 'Southwest', sales: 4500, population: 1.2 },\n    { region: 'Northeast', sales: 3200, population: 0.9 },\n    { region: 'Northwest', sales: 2800, population: 0.7 },\n  ],\n  encode: {\n    x: 'region',\n    y: 'sales',\n    color: 'region',\n  },\n  transform: [{ type: 'flexX', field: 'population' }], // Adjust bar width based on population data\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.2,\n    },\n  },\n});\n\nchart.render();\n",paraId:45,tocIndex:25},{value:"When handling time data, band scales can well handle the visualization of time intervals:",paraId:46,tocIndex:26},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { month: '2024-01', sales: 1200 },\n    { month: '2024-02', sales: 1100 },\n    { month: '2024-03', sales: 1350 },\n    { month: '2024-04', sales: 1280 },\n    { month: '2024-05', sales: 1400 },\n    { month: '2024-06', sales: 1520 },\n    { month: '2024-07', sales: 1680 },\n    { month: '2024-08', sales: 1590 },\n    { month: '2024-09', sales: 1450 },\n    { month: '2024-10', sales: 1380 },\n    { month: '2024-11', sales: 1250 },\n    { month: '2024-12', sales: 1600 },\n  ],\n  encode: {\n    x: 'month',\n    y: 'sales',\n    color: (d) => (d.sales > 1500 ? 'high' : d.sales > 1300 ? 'medium' : 'low'),\n  },\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.1,\n    },\n    color: {\n      domain: ['low', 'medium', 'high'],\n      range: ['#faad14', '#1890ff', '#52c41a'],\n    },\n  },\n});\n\nchart.render();\n",paraId:47,tocIndex:26},{value:"Displaying categorical data with hierarchical structure:",paraId:48,tocIndex:27},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { category: 'Clothing-Men', subcategory: 'Shirts', value: 850 },\n    { category: 'Clothing-Men', subcategory: 'Pants', value: 750 },\n    { category: 'Clothing-Men', subcategory: 'Jackets', value: 650 },\n    { category: 'Clothing-Women', subcategory: 'Dresses', value: 950 },\n    { category: 'Clothing-Women', subcategory: 'Tops', value: 800 },\n    { category: 'Clothing-Women', subcategory: 'Skirts', value: 700 },\n    { category: 'Electronics-Phones', subcategory: 'iPhone', value: 1200 },\n    { category: 'Electronics-Phones', subcategory: 'Huawei', value: 1100 },\n    { category: 'Electronics-Phones', subcategory: 'Xiaomi', value: 900 },\n    { category: 'Electronics-Computers', subcategory: 'Laptops', value: 1500 },\n    { category: 'Electronics-Computers', subcategory: 'Desktops', value: 800 },\n    { category: 'Electronics-Computers', subcategory: 'Tablets', value: 600 },\n  ],\n  encode: {\n    x: 'category',\n    y: 'value',\n    color: 'subcategory',\n  },\n  transform: [{ type: 'dodgeX' }],\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.4, // Larger spacing to distinguish different main categories\n      paddingInner: 0.3, // Inner spacing\n      paddingOuter: 0.1, // Outer spacing\n    },\n  },\n});\n\nchart.render();\n",paraId:49,tocIndex:27},{value:"Using paddingInner and paddingOuter to precisely control spacing, suitable for comparative analysis:",paraId:50,tocIndex:28},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { product: 'Product A', current: 320, target: 400 },\n    { product: 'Product B', current: 280, target: 350 },\n    { product: 'Product C', current: 410, target: 450 },\n    { product: 'Product D', current: 180, target: 250 },\n    { product: 'Product E', current: 350, target: 380 },\n  ].flatMap((d) => [\n    { product: d.product, type: 'Current Sales', value: d.current },\n    { product: d.product, type: 'Target Sales', value: d.target },\n  ]),\n  encode: {\n    x: 'product',\n    y: 'value',\n    color: 'type',\n  },\n  transform: [{ type: 'dodgeX' }],\n  scale: {\n    x: {\n      type: 'band',\n      paddingInner: 0.2, // Smaller intra-group spacing\n      paddingOuter: 0.3, // Larger inter-group spacing\n    },\n    color: {\n      domain: ['Current Sales', 'Target Sales'],\n      range: ['#1890ff', '#52c41a'],\n    },\n  },\n});\n\nchart.render();\n",paraId:51,tocIndex:28},{value:"Combine compare function to sort data and use different bar width strategies:",paraId:52,tocIndex:29},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { brand: 'Apple', market_share: 23.4, revenue: 365 },\n  { brand: 'Samsung', market_share: 20.1, revenue: 220 },\n  { brand: 'Huawei', market_share: 15.8, revenue: 180 },\n  { brand: 'Xiaomi', market_share: 12.3, revenue: 120 },\n  { brand: 'OPPO', market_share: 8.9, revenue: 95 },\n  { brand: 'vivo', market_share: 7.2, revenue: 85 },\n  { brand: 'Others', market_share: 12.3, revenue: 150 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data,\n  encode: {\n    x: 'brand',\n    y: 'market_share',\n    color: 'brand',\n  },\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.2,\n      compare: (a, b) => {\n        // Sort by market share in descending order\n        const dataA = data.find((d) => d.brand === a);\n        const dataB = data.find((d) => d.brand === b);\n        return (dataB?.market_share || 0) - (dataA?.market_share || 0);\n      },\n      flex: [2.34, 2.01, 1.58, 1.23, 0.89, 0.72, 1.23], // Set width based on market share\n    },\n  },\n});\n\nchart.render();\n",paraId:53,tocIndex:29},{value:"Displaying step-by-step cumulative changes in values:",paraId:54,tocIndex:31},{value:"import { Chart } from '@antv/g2';\n\n// Waterfall chart data processing\nconst rawData = [\n  { name: 'Initial Balance', value: 1000, type: 'start' },\n  { name: 'Revenue Increase', value: 500, type: 'positive' },\n  { name: 'Cost Expense', value: -200, type: 'negative' },\n  { name: 'Tax Expense', value: -150, type: 'negative' },\n  { name: 'Other Income', value: 100, type: 'positive' },\n  { name: 'Final Balance', value: 1250, type: 'end' },\n];\n\n// Calculate cumulative values\nlet cumulative = 0;\nconst data = rawData.map((d, i) => {\n  if (d.type === 'start' || d.type === 'end') {\n    const result = { ...d, start: 0, end: d.value };\n    cumulative = d.value;\n    return result;\n  } else {\n    const start = cumulative;\n    cumulative += d.value;\n    return { ...d, start, end: cumulative };\n  }\n});\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data: data.flatMap((d) => [\n    { name: d.name, value: d.end - d.start, position: d.start, type: d.type },\n  ]),\n  encode: {\n    x: 'name',\n    y: ['position', (d) => d.position + d.value],\n    color: 'type',\n  },\n  scale: {\n    x: {\n      type: 'band',\n      padding: 0.4,\n    },\n    color: {\n      domain: ['start', 'positive', 'negative', 'end'],\n      range: ['#722ed1', '#52c41a', '#ff4d4f', '#1890ff'],\n    },\n  },\n});\n\nchart.render();\n",paraId:55,tocIndex:31},{value:"Using band scales with faceted layout to display multi-dimensional data:",paraId:56,tocIndex:32},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'facetRect',\n  data: [\n    { region: 'North', quarter: 'Q1', product: 'Product A', sales: 120 },\n    { region: 'North', quarter: 'Q1', product: 'Product B', sales: 100 },\n    { region: 'North', quarter: 'Q1', product: 'Product C', sales: 80 },\n    { region: 'North', quarter: 'Q2', product: 'Product A', sales: 140 },\n    { region: 'North', quarter: 'Q2', product: 'Product B', sales: 110 },\n    { region: 'North', quarter: 'Q2', product: 'Product C', sales: 90 },\n    { region: 'South', quarter: 'Q1', product: 'Product A', sales: 150 },\n    { region: 'South', quarter: 'Q1', product: 'Product B', sales: 130 },\n    { region: 'South', quarter: 'Q1', product: 'Product C', sales: 110 },\n    { region: 'South', quarter: 'Q2', product: 'Product A', sales: 170 },\n    { region: 'South', quarter: 'Q2', product: 'Product B', sales: 140 },\n    { region: 'South', quarter: 'Q2', product: 'Product C', sales: 120 },\n  ],\n  encode: { x: 'region', y: 'quarter' },\n  children: [\n    {\n      type: 'interval',\n      encode: {\n        x: 'product',\n        y: 'sales',\n        color: 'product',\n      },\n      scale: {\n        x: {\n          type: 'band',\n          padding: 0.3,\n        },\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:57,tocIndex:32},{value:"You can adjust the spacing between bars by setting the ",paraId:58,tocIndex:34},{value:"padding",paraId:58,tocIndex:34},{value:" property, which indirectly adjusts the width of the bars. The larger the ",paraId:58,tocIndex:34},{value:"padding",paraId:58,tocIndex:34},{value:" value, the narrower the bars; the smaller the value, the wider the bars.",paraId:58,tocIndex:34},{value:"chart.interval().encode('x', 'type').encode('y', 'sale').scale('x', {\n  type: 'band',\n  padding: 0.5, // Value range is [0, 1]\n});\n",paraId:59,tocIndex:34},{value:"Band Scale",paraId:60,tocIndex:35},{value:": Allocates an interval (bandwidth) for each category, suitable for bar charts and other charts that need to occupy width",paraId:60,tocIndex:35},{value:"Point Scale",paraId:60,tocIndex:35},{value:": Allocates a point for each category, equivalent to a band scale with ",paraId:60,tocIndex:35},{value:"bandWidth = 0",paraId:60,tocIndex:35},{value:", suitable for scatter plots and other charts that only need point positions",paraId:60,tocIndex:35},{value:"There are two methods:",paraId:61,tocIndex:36},{value:"Use the ",paraId:62,tocIndex:36},{value:"flex",paraId:62,tocIndex:36},{value:" property to set different width ratios for different categories",paraId:62,tocIndex:36},{value:"Use the ",paraId:62,tocIndex:36},{value:"flexX",paraId:62,tocIndex:36},{value:" transform to automatically set bar width based on specified field values",paraId:62,tocIndex:36},{value:"// Method 1: Using flex property\nchart\n  .interval()\n  .encode('x', 'country')\n  .encode('y', 'value')\n  .scale('x', {\n    type: 'band',\n    flex: [2, 1, 3, 1.5], // Manually set width ratios\n  });\n\n// Method 2: Using flexX transform\nchart\n  .interval()\n  .encode('x', 'country')\n  .encode('y', 'value')\n  .transform({ type: 'flexX', field: 'gdp' }); // Automatically set width based on gdp field\n",paraId:63,tocIndex:36}]},29741:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(70919);const t=[{value:"Linear is the base class for continuous scales. Its core function is to linearly map data from the data domain to the visual range while preserving the proportional relationships between data points. Each output value y can be expressed as a linear function of the input value x: ",paraId:0,tocIndex:0},{value:"y = mx + b",paraId:0,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:"When no scale type is explicitly declared, G2 applies the linear scale by default to numeric fields (such as temperature, sales).",paraId:1,tocIndex:0},{value:"Linear scales are commonly used to map data to normalized coordinates. In this example, the scale for the y channel is configured to affect how graphics are positioned on the canvas.",paraId:2,tocIndex:1},{value:"chart\n  .line()\n  .encode('x', 'year')\n  .encode('y', 'sale')\n  .scale('y', {\n    type: 'linear',\n    range: [0.2, 0.8],\n    /* other configuration options */\n  });\n",paraId:3,tocIndex:1},{value:"It can be used not only with continuous numeric data types but also when proportional relationships need to be maintained.",paraId:4,tocIndex:1},{value:"chart\n  .interval()\n  .data([\n    { time: '2023-01', sales: '100' },\n    { time: '2023-01', sales: '300' },\n  ])\n  .encode('x', 'time')\n  .encode('y', 'sales')\n  .scale('y', {\n    type: 'linear', // When sales values are strings, they may be incorrectly inferred as categorical data, requiring explicit setting\n  });\n",paraId:5,tocIndex:1},{value:"Scales can be configured at the Mark level:",paraId:6,tocIndex:2},{value:"({\n  type: 'line',\n  scale: {\n    x: { padding: 0.5 },\n    y: {\n      type: 'linear', // Specify type\n      domain: [10, 100], // Specify domain\n      range: [0, 1], // Specify range\n    },\n  },\n});\n",paraId:7,tocIndex:2},{value:"They can also be configured at the View level:",paraId:8,tocIndex:2},{value:"({\n  type: 'view',\n  scale: {\n    x: { padding: 0.5 },\n    y: {\n      type: 'linear', // Specify type\n      domain: [10, 100], // Specify domain\n      range: [0, 1], // Specify range\n    },\n  },\n});\n",paraId:9,tocIndex:2},{value:"Property",paraId:10,tocIndex:3},{value:"Description",paraId:10,tocIndex:3},{value:"Type",paraId:10,tocIndex:3},{value:"Default Value",paraId:10,tocIndex:3},{value:"domain",paraId:10,tocIndex:3},{value:"Set the domain range of the data",paraId:10,tocIndex:3},{value:"number[]",paraId:10,tocIndex:3},{value:"Min-max range of input data",paraId:10,tocIndex:3},{value:"domainMin",paraId:10,tocIndex:3},{value:"Set the minimum value of the data domain",paraId:10,tocIndex:3},{value:"number",paraId:10,tocIndex:3},{value:"Minimum value of input data",paraId:10,tocIndex:3},{value:"domainMax",paraId:10,tocIndex:3},{value:"Set the maximum value of the data domain",paraId:10,tocIndex:3},{value:"number",paraId:10,tocIndex:3},{value:"Maximum value of input data",paraId:10,tocIndex:3},{value:"range",paraId:10,tocIndex:3},{value:"Set the range of data mapping",paraId:10,tocIndex:3},{value:"number[]",paraId:10,tocIndex:3},{value:" | ",paraId:10,tocIndex:3},{value:"string[]",paraId:10,tocIndex:3},{value:"[0, 1]",paraId:10,tocIndex:3},{value:"rangeMin",paraId:10,tocIndex:3},{value:"Set the minimum value of the data mapping range",paraId:10,tocIndex:3},{value:"number | string",paraId:10,tocIndex:3},{value:"0",paraId:10,tocIndex:3},{value:"rangeMax",paraId:10,tocIndex:3},{value:"Set the maximum value of the data mapping range",paraId:10,tocIndex:3},{value:"number | string",paraId:10,tocIndex:3},{value:"1",paraId:10,tocIndex:3},{value:"unknown",paraId:10,tocIndex:3},{value:"Return value for ",paraId:10,tocIndex:3},{value:"undefined",paraId:10,tocIndex:3},{value:", ",paraId:10,tocIndex:3},{value:"NaN",paraId:10,tocIndex:3},{value:", ",paraId:10,tocIndex:3},{value:"null",paraId:10,tocIndex:3},{value:" values",paraId:10,tocIndex:3},{value:"any",paraId:10,tocIndex:3},{value:"undefined",paraId:10,tocIndex:3},{value:"tickCount",paraId:10,tocIndex:3},{value:"Set the recommended number of ticks to generate; tickCount is only a suggestion",paraId:10,tocIndex:3},{value:"number",paraId:10,tocIndex:3},{value:"5",paraId:10,tocIndex:3},{value:"tickMethod",paraId:10,tocIndex:3},{value:"Set the method for generating ticks, commonly used for custom ticks",paraId:10,tocIndex:3},{value:"(min: number, max: number, count: number) => number[]",paraId:10,tocIndex:3},{value:"d3-ticks",paraId:10,tocIndex:3},{value:"round",paraId:10,tocIndex:3},{value:"Round output values",paraId:10,tocIndex:3},{value:"boolean",paraId:10,tocIndex:3},{value:"false",paraId:10,tocIndex:3},{value:"clamp",paraId:10,tocIndex:3},{value:"Limit mapped values to the range",paraId:10,tocIndex:3},{value:"boolean",paraId:10,tocIndex:3},{value:"false",paraId:10,tocIndex:3},{value:"nice",paraId:10,tocIndex:3},{value:"Extend domain range to make tick display more friendly",paraId:10,tocIndex:3},{value:"boolean",paraId:10,tocIndex:3},{value:"false",paraId:10,tocIndex:3},{value:"interpolate",paraId:10,tocIndex:3},{value:"Custom interpolation function",paraId:10,tocIndex:3},{value:"(a: number, b: number) => (t: number) => T",paraId:10,tocIndex:3},{value:"(a, b) => (t) => a * (1 - t) + b * t",paraId:10,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  { time: '2023-01', sales: 100 },\n  { time: '2023-02', sales: 200 },\n  { time: '2023-03', sales: 150 },\n  { time: '2023-04', sales: 300 },\n  { time: '2023-05', sales: 400 },\n];\n\nchart\n  .interval()\n  .data(data)\n  .encode('x', 'time')\n  .encode('y', 'sales')\n  .scale('y', {\n    type: 'linear', // Use linear scale\n    nice: true,\n    domain: [0, 300], // Custom scale range setting, needs to be explicitly set\n  });\n\nchart.render();\n",paraId:11,tocIndex:4},{value:"How to customize y-axis ticks?",paraId:12,tocIndex:5},{value:"For example, if you only need to display 0, 100, 600 on the ticks, set the y scale as follows:",paraId:13,tocIndex:5},{value:"chart\n  .line()\n  // ...\n  .scale('y', {\n    type: 'linear',\n    domain: [0, 700],\n    tickMethod: () => [0, 100, 600],\n  });\n",paraId:14,tocIndex:5}]},87037:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(15283);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"logarithmic scale (log scale)",paraId:0,tocIndex:0},{value:" in G2 uses logarithmic functions for data mapping, based on exponential relationships with non-linear distribution, specifically designed for data showing exponential growth. When the numerical range in ",paraId:0,tocIndex:0},{value:"data",paraId:0,tocIndex:0},{value:" spans a very large range and causes parts of the chart to be too dense or have too much blank space, logarithmic scale should be prioritized.",paraId:0,tocIndex:0},{value:"Based on the mathematical formula ",paraId:1,tocIndex:0},{value:"y = log(base) + b",paraId:1,tocIndex:0},{value:".",paraId:1,tocIndex:0},{value:"Linear Scale",paraId:2,tocIndex:0},{value:"Logarithmic Scale (log scale)",paraId:3,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  height: 300,\n  data: [\n    { year: '1991', value: 1 },\n    { year: '1992', value: 10 },\n    { year: '1993', value: 100 },\n    { year: '1994', value: 1000 },\n    { year: '1995', value: 10000 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: {\n    y: {\n      type: 'log',\n      // Tick count\n      tickCount: 5,\n      // Generate uniform ticks\n      tickMethod: (min, max, count, base) => {\n        // Calculate logarithmic range\n        const logMin = Math.log(min) / Math.log(base);\n        const logMax = Math.log(max) / Math.log(base);\n\n        // Calculate logarithmic step\n        const logStep = (logMax - logMin) / (count - 1);\n\n        // Generate tick array\n        const ticks = [];\n        for (let i = 0; i < count; i++) {\n          const logValue = logMin + i * logStep;\n          const value = Math.pow(base, logValue);\n          // Filter values outside the range\n          if (value >= min && value <= max) {\n            ticks.push(Math.round(value));\n          }\n        }\n        return ticks;\n      },\n    },\n  },\n  children: [\n    { type: 'line', labels: [{ text: 'value', style: { dx: -10, dy: -12 } }] },\n    { type: 'point', style: { fill: 'white' }, tooltip: false },\n  ],\n});\n\nchart.render(); // Render chart\n",paraId:4,tocIndex:1},{value:"Property",paraId:5,tocIndex:2},{value:"Description",paraId:5,tocIndex:2},{value:"Type",paraId:5,tocIndex:2},{value:"Default Value",paraId:5,tocIndex:2},{value:"Required",paraId:5,tocIndex:2},{value:"domain",paraId:5,tocIndex:2},{value:"Set the domain range of the data",paraId:5,tocIndex:2},{value:"number[]",paraId:5,tocIndex:2},{value:"Min and max range of input data",paraId:5,tocIndex:2},{value:"domainMin",paraId:5,tocIndex:2},{value:"Set the minimum value of the data domain",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:"Minimum value of input data",paraId:5,tocIndex:2},{value:"domainMax",paraId:5,tocIndex:2},{value:"Set the maximum value of the data domain",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:"Maximum value of input data",paraId:5,tocIndex:2},{value:"range",paraId:5,tocIndex:2},{value:"Set the range of mapped values",paraId:5,tocIndex:2},{value:"number[]",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"string[]",paraId:5,tocIndex:2},{value:"[0, 1]",paraId:5,tocIndex:2},{value:"rangeMin",paraId:5,tocIndex:2},{value:"Set the minimum value of the mapped range",paraId:5,tocIndex:2},{value:"number | string",paraId:5,tocIndex:2},{value:"0",paraId:5,tocIndex:2},{value:"rangeMax",paraId:5,tocIndex:2},{value:"Set the maximum value of the mapped range",paraId:5,tocIndex:2},{value:"number | string",paraId:5,tocIndex:2},{value:"1",paraId:5,tocIndex:2},{value:"unknown",paraId:5,tocIndex:2},{value:"Return value for ",paraId:5,tocIndex:2},{value:"undefined",paraId:5,tocIndex:2},{value:", ",paraId:5,tocIndex:2},{value:"NaN",paraId:5,tocIndex:2},{value:", ",paraId:5,tocIndex:2},{value:"null",paraId:5,tocIndex:2},{value:" empty values",paraId:5,tocIndex:2},{value:"any",paraId:5,tocIndex:2},{value:"undefined",paraId:5,tocIndex:2},{value:"tickCount",paraId:5,tocIndex:2},{value:"Set the recommended number of ticks to generate; tickCount is only a suggestion",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:"5",paraId:5,tocIndex:2},{value:"tickMethod",paraId:5,tocIndex:2},{value:"Set the method for generating ticks, commonly used for custom ticks",paraId:5,tocIndex:2},{value:"(min: number, max: number, count: number) => number[]",paraId:5,tocIndex:2},{value:"calculateLogTicks",paraId:5,tocIndex:2},{value:"round",paraId:5,tocIndex:2},{value:"Round output values",paraId:5,tocIndex:2},{value:"boolean",paraId:5,tocIndex:2},{value:"false",paraId:5,tocIndex:2},{value:"clamp",paraId:5,tocIndex:2},{value:"Limit mapped values to the range",paraId:5,tocIndex:2},{value:"boolean",paraId:5,tocIndex:2},{value:"false",paraId:5,tocIndex:2},{value:"nice",paraId:5,tocIndex:2},{value:"Extend domain range to make output ticks display more friendly",paraId:5,tocIndex:2},{value:"boolean",paraId:5,tocIndex:2},{value:"false",paraId:5,tocIndex:2},{value:"interpolate",paraId:5,tocIndex:2},{value:"Custom interpolation function",paraId:5,tocIndex:2},{value:"(a: number, b: number) => (t: number) => T",paraId:5,tocIndex:2},{value:"(a, b) => (t) => a * (1 - t) + b * t",paraId:5,tocIndex:2},{value:"base",paraId:5,tocIndex:2},{value:"Set the logarithmic base",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:"10",paraId:5,tocIndex:2},{value:"Configuration and notes:",paraId:6,tocIndex:2},{value:"{\n  scale: {\n    y: {\n      type: 'log', // Note: Do not use log when data returns both positive and negative values.\n      domainMin: 10,\n      domainMax: 1000,\n      base: 100, // Set base to 100,\n    }\n  }\n}\n",paraId:7,tocIndex:2},{value:"If you need a minimum value ",paraId:8,tocIndex:2},{value:"domainMin: 0",paraId:8,tocIndex:2},{value:", please refer to the ",paraId:8,tocIndex:2},{value:"Chart Examples - Logarithmic Column Chart",paraId:9,tocIndex:2},{value:" page.",paraId:8,tocIndex:2},{value:"linear",paraId:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  height: 300,\n  data: [\n    { year: '1991', value: 1 },\n    { year: '1992', value: 10 },\n    { year: '1993', value: 1000 },\n    { year: '1994', value: 0.1 },\n    { year: '1995', value: 100 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: { x: { range: [0, 1] }, y: { type: 'log', tickCount: 4 } },\n  axis: {\n    y: {\n      labelFormatter: (v) => {\n        return Math.log10(v) + 1;\n      },\n    },\n  },\n  children: [\n    {\n      type: 'line',\n      labels: [\n        {\n          text: 'value',\n          formatter: (v) => {\n            return Math.log10(v) + 1;\n          },\n          style: { dx: -10, dy: -12 },\n        },\n      ],\n    },\n    { type: 'point', style: { fill: 'white' }, tooltip: false },\n  ],\n});\n\nchart.render(); // Render chart\n",paraId:11,tocIndex:4}]},71709:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(16696);const t=[{value:"The ordinal scale is a categorical scale that maps discrete domains to discrete ranges. Unlike continuous scales, ordinal scales handle discrete, categorical data such as product categories, classes, gender, etc.",paraId:0,tocIndex:0},{value:"The core characteristics of ordinal scales are:",paraId:1,tocIndex:0},{value:"Input values must be discrete (usually strings or other non-numeric types)",paraId:2,tocIndex:0},{value:"Output values are also discrete (can be any type, such as colors, shapes, etc.)",paraId:2,tocIndex:0},{value:"Preserves the order of input data but not the proportional relationships between data points",paraId:2,tocIndex:0},{value:"In G2, ordinal scales are most commonly used to map categorical data to visual attributes such as colors and shapes. When no scale type is explicitly declared, G2 applies ordinal scales by default for categorical data.",paraId:3,tocIndex:0},{value:"The working principle of ordinal scales is:",paraId:4,tocIndex:1},{value:"Map each discrete value in the input domain (e.g., 'A', 'B', 'C') to corresponding values in the output domain (e.g., 'red', 'green', 'blue') in order",paraId:5,tocIndex:1},{value:"The mapping is one-to-one: the first input value maps to the first output value, the second input value maps to the second output value, and so on",paraId:5,tocIndex:1},{value:"If an input value is not in the domain, it returns an unknown value (default is undefined)",paraId:5,tocIndex:1},{value:"For example, with domain ['A', 'B', 'C'] and range ['red', 'green', 'blue']:",paraId:6,tocIndex:1},{value:"Input 'A' maps to 'red'",paraId:7,tocIndex:1},{value:"Input 'B' maps to 'green'",paraId:7,tocIndex:1},{value:"Input 'C' maps to 'blue'",paraId:7,tocIndex:1},{value:"Input 'D' (not in domain) maps to undefined",paraId:7,tocIndex:1},{value:"Difference from band/point scales",paraId:8,tocIndex:2},{value:": Band and point scales also handle categorical data, but they map categorical data to continuous numeric ranges, primarily used for position encoding (such as x, y coordinates)",paraId:8,tocIndex:2},{value:"Difference from continuous scales",paraId:8,tocIndex:2},{value:": Linear, log, and other continuous scales handle continuous numeric data and preserve proportional relationships between data points",paraId:8,tocIndex:2},{value:"Difference from discretizing scales",paraId:8,tocIndex:2},{value:": Quantize, threshold, and other discretizing scales discretize continuous data, while ordinal scales directly handle discrete data",paraId:8,tocIndex:2},{value:"Ordinal scales are suitable for the following scenarios:",paraId:9,tocIndex:3},{value:"Mapping categorical data to colors (e.g., different product categories using different colors)",paraId:10,tocIndex:3},{value:"Mapping categorical data to shapes (e.g., different genders using different shapes)",paraId:10,tocIndex:3},{value:"Mapping categorical data to other visual channels (such as size, opacity, etc.)",paraId:10,tocIndex:3},{value:"Need to customize the display order of categorical data",paraId:10,tocIndex:3},{value:"Here's a basic usage example that maps categorical data to the color channel:",paraId:11,tocIndex:4},{value:"chart\n  .interval()\n  .encode('x', 'category')\n  .encode('y', 'value')\n  .encode('color', 'category')\n  .scale('color', {\n    type: 'ordinal',\n    range: ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#c564be'],\n  });\n",paraId:12,tocIndex:4},{value:"In this example, we map the 'category' field to the color channel and use an ordinal scale to specify a set of custom colors.",paraId:13,tocIndex:4},{value:"The ordinal scale provides the following configuration options:",paraId:14,tocIndex:5},{value:"Parameter",paraId:15,tocIndex:5},{value:"Description",paraId:15,tocIndex:5},{value:"Type",paraId:15,tocIndex:5},{value:"Default Value",paraId:15,tocIndex:5},{value:"Required",paraId:15,tocIndex:5},{value:"domain",paraId:15,tocIndex:5},{value:"Set the domain range of the data",paraId:15,tocIndex:5},{value:"any[]",paraId:15,tocIndex:5},{value:"[]",paraId:15,tocIndex:5},{value:"range",paraId:15,tocIndex:5},{value:"Set the range of data mapping values",paraId:15,tocIndex:5},{value:"any[]",paraId:15,tocIndex:5},{value:"[]",paraId:15,tocIndex:5},{value:"unknown",paraId:15,tocIndex:5},{value:"Return value for ",paraId:15,tocIndex:5},{value:"undefined",paraId:15,tocIndex:5},{value:", ",paraId:15,tocIndex:5},{value:"NaN",paraId:15,tocIndex:5},{value:", ",paraId:15,tocIndex:5},{value:"null",paraId:15,tocIndex:5},{value:" empty values",paraId:15,tocIndex:5},{value:"any",paraId:15,tocIndex:5},{value:"undefined",paraId:15,tocIndex:5},{value:"compare",paraId:15,tocIndex:5},{value:"Comparator for comparing two values, used for sorting",paraId:15,tocIndex:5},{value:"(a: number | string, b: number | string) => number",paraId:15,tocIndex:5},{value:"undefined",paraId:15,tocIndex:5},{value:"The ",paraId:16,tocIndex:6},{value:"domain",paraId:16,tocIndex:6},{value:" parameter defines the input domain of the scale, i.e., the set of possible values in the original data. For ordinal scales, the domain is usually an array of strings representing all possible categorical values.",paraId:16,tocIndex:6},{value:"If domain is not set, G2 will automatically infer it from the data. However, in some cases, explicitly setting the domain can:",paraId:17,tocIndex:6},{value:"Control the order of categories",paraId:18,tocIndex:6},{value:"Include categories that may not exist in the data but need to be displayed in the legend",paraId:18,tocIndex:6},{value:"Limit to display only partial categories",paraId:18,tocIndex:6},{value:"chart.scale('color', {\n  type: 'ordinal',\n  domain: ['Category A', 'Category B', 'Category C'], // Explicitly specify categories and their order\n});\n",paraId:19,tocIndex:6},{value:"The ",paraId:20,tocIndex:7},{value:"range",paraId:20,tocIndex:7},{value:" parameter defines the output domain of the scale, i.e., the set of mapped values. For ordinal scales, the range can be an array of any type, most commonly an array of colors.",paraId:20,tocIndex:7},{value:"chart.scale('color', {\n  type: 'ordinal',\n  range: ['#1f77b4', '#ff7f0e', '#2ca02c'], // Custom colors\n});\n",paraId:21,tocIndex:7},{value:"If range is not set, G2 will use default values based on the channel type:",paraId:22,tocIndex:7},{value:"For color channels, use the default categorical color scheme",paraId:23,tocIndex:7},{value:"For shape channels, use the default shape set",paraId:23,tocIndex:7},{value:"For other channels, determined based on specific circumstances",paraId:23,tocIndex:7},{value:"The ",paraId:24,tocIndex:8},{value:"compare",paraId:24,tocIndex:8},{value:" parameter is a comparison function used to sort values in the domain. This is very useful for controlling the display order of categorical data.",paraId:24,tocIndex:8},{value:"chart.scale('color', {\n  type: 'ordinal',\n  // Sort alphabetically\n  compare: (a, b) => a.localeCompare(b),\n});\n",paraId:25,tocIndex:8},{value:"If no compare function is provided, values in the domain will maintain their original order.",paraId:26,tocIndex:8},{value:"Below is a basic example using ordinal scales to map categorical data to colors:",paraId:27,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    color: 'genre', // Map genre to color channel\n  },\n  scale: {\n    color: {\n      type: 'ordinal',\n      // Custom color range\n      range: ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#c564be'],\n    },\n  },\n});\n\nchart.render();\n",paraId:28,tocIndex:10},{value:"In this example, we use an ordinal scale to map game genres to different colors. Each category corresponds to a color in the range array.",paraId:29,tocIndex:10},{value:"The following example shows basic categorical data visualization:",paraId:30,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\n// Create chart instance\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\n// Prepare data - intentionally using unordered categories\nconst data = [\n  { category: 'C', value: 20 },\n  { category: 'A', value: 40 },\n  { category: 'B', value: 30 },\n  { category: 'E', value: 10 },\n  { category: 'D', value: 25 },\n];\n\n// Configure chart\nchart.options({\n  type: 'interval',\n  data,\n  encode: {\n    x: 'category',\n    y: 'value',\n    color: 'category',\n  },\n});\n\n// Render chart\nchart.render();\n",paraId:31,tocIndex:11},{value:"In this example, we can see that G2 uses ordinal scales by default to handle categorical data. By default, categories are displayed in their original order from the data (C, A, B, E, D).",paraId:32,tocIndex:11},{value:"If you need custom sorting, you can add the following configuration:",paraId:33,tocIndex:11},{value:"scale: {\n  x: {\n    type: 'ordinal',\n    compare: (a, b) => a.localeCompare(b), // Sort alphabetically\n  },\n  color: {\n    type: 'ordinal',\n    compare: (a, b) => a.localeCompare(b), // Keep color mapping consistent\n  },\n}\n",paraId:34,tocIndex:11},{value:"This ensures categories are arranged alphabetically (A, B, C, D, E) rather than in the original order from the data.",paraId:35,tocIndex:11},{value:"Here's a complete example using G2 declarative syntax (G2Spec) to configure ordinal scales:",paraId:36,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst spec = {\n  type: 'interval',\n  data: [\n    { category: 'A', value: 40 },\n    { category: 'B', value: 30 },\n    { category: 'C', value: 20 },\n    { category: 'D', value: 10 },\n    { category: 'E', value: 25 },\n  ],\n  scale: {\n    color: {\n      type: 'ordinal',\n      domain: ['A', 'B', 'C', 'D', 'E'], // Explicitly specify category order\n      range: ['#5B8FF9', '#5AD8A6', '#5D7092', '#F6BD16', '#E8684A'], // Custom colors\n    },\n  },\n  encode: {\n    x: 'category',\n    y: 'value',\n    color: 'category',\n  },\n};\n\n// Render using Chart\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\nchart.options(spec);\nchart.render();\n",paraId:37,tocIndex:12},{value:"This example demonstrates how to create a bar chart using ordinal scales with G2 declarative syntax, including the following features:",paraId:38,tocIndex:12},{value:"Using ordinal scales to map categorical data to colors",paraId:39,tocIndex:12},{value:"Explicitly specifying category order",paraId:39,tocIndex:12},{value:"Customizing color range",paraId:39,tocIndex:12},{value:"When using ordinal scales, pay attention to the following:",paraId:40,tocIndex:13},{value:"Number of categories vs. number of colors",paraId:41,tocIndex:13},{value:": If the number of categories exceeds the number of colors provided in the range, G2 will cycle through these colors. For optimal visual effect, it's recommended that the range length be at least equal to the number of different categories.",paraId:41,tocIndex:13},{value:"Color selection",paraId:42,tocIndex:13},{value:": Choose colors with good contrast to ensure different categories can be clearly distinguished. For large numbers of categories, consider using professional color schemes like ColorBrewer.",paraId:42,tocIndex:13},{value:"Coordination with other scales",paraId:43,tocIndex:13},{value:": In the same chart, ordinal scales are usually used together with band or point scales, where the former is used for color encoding and the latter for position encoding.",paraId:43,tocIndex:13},{value:"Sorting considerations",paraId:44,tocIndex:13},{value:": Choose appropriate sorting methods based on the semantics of the data. Sometimes sorting by numeric values is more meaningful than sorting by category names.",paraId:44,tocIndex:13}]},22996:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(54114);const t=[{value:"Scale",paraId:0},{value:" in G2 is a very important abstraction in visualization: it maps abstract data to visual data, serving as a bridge between abstract data and visual data. If encoding determines which channels of a mark need to be visualized, then scales determine how these channels should be visualized.",paraId:0},{value:"G2 provides a rich variety of scale types, which can be classified according to data type and use case:",paraId:1,tocIndex:0},{value:"Handle ",paraId:2,tocIndex:2},{value:"continuous",paraId:2,tocIndex:2},{value:" numerical data while preserving proportional relationships between data points:",paraId:2,tocIndex:2},{value:"linear (Linear Scale)",paraId:3,tocIndex:2},{value:": The most basic continuous scale, using the linear function y = mx + b for mapping",paraId:3,tocIndex:2},{value:"log (Logarithmic Scale)",paraId:3,tocIndex:2},{value:": Uses the logarithmic function y = log",paraId:3,tocIndex:2},{value:"base",paraId:3,tocIndex:2},{value:"(x) + b for mapping, suitable for exponentially growing data with large spans",paraId:3,tocIndex:2},{value:"pow (Power Scale)",paraId:3,tocIndex:2},{value:": Uses the power function y = x",paraId:3,tocIndex:2},{value:"k",paraId:3,tocIndex:2},{value:" + b for mapping, adjustable exponent to emphasize data differences",paraId:3,tocIndex:2},{value:"sqrt (Square Root Scale)",paraId:3,tocIndex:2},{value:": A special case of pow scale (k=0.5), suitable for compressing large numerical differences",paraId:3,tocIndex:2},{value:"time (Time Scale)",paraId:3,tocIndex:2},{value:": A continuous scale specifically for handling time series data, supports automatic calculation of appropriate time intervals (tickInterval) and tick counts, can handle both UTC and local time",paraId:3,tocIndex:2},{value:"For example, both x and y channels in the scatter plot below use ",paraId:4,tocIndex:2},{value:"linear",paraId:4,tocIndex:2},{value:" scales.",paraId:4,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  },\n  encode: { x: 'weight', y: 'height', color: 'gender' },\n});\n\nchart.render();\n",paraId:5,tocIndex:2},{value:"When we try to change the scales of the x and y channels:",paraId:6,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  },\n  encode: { x: 'weight', y: 'height', color: 'gender' },\n  scale: {\n    x: {\n      type: 'point',\n    },\n    y: {\n      type: 'point',\n      range: [1, 0],\n    },\n  },\n});\n\nchart.render();\n",paraId:7,tocIndex:2},{value:"For dense data, continuous scales are more recommended than categorical scales.",paraId:8,tocIndex:2},{value:"Handle ",paraId:9,tocIndex:3},{value:"discrete",paraId:9,tocIndex:3},{value:" categorical data:",paraId:9,tocIndex:3},{value:"ordinal (Ordinal Scale)",paraId:10,tocIndex:3},{value:": Maps discrete data to discrete value ranges, commonly used for color and shape mapping",paraId:10,tocIndex:3},{value:"band (Band Scale)",paraId:10,tocIndex:3},{value:": Allocates equal-width intervals for each category, commonly used for x-axis in bar charts",paraId:10,tocIndex:3},{value:"point (Point Scale)",paraId:10,tocIndex:3},{value:": A special case of band scale (bandWidth=0), used for point position mapping",paraId:10,tocIndex:3},{value:"For example, the color channel in the bar chart below uses an ",paraId:11,tocIndex:3},{value:"ordinal",paraId:11,tocIndex:3},{value:" scale.",paraId:11,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n  scale: {\n    color: { range: ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#c564be'] },\n  },\n});\n\nchart.render();\n",paraId:12,tocIndex:3},{value:"We can see the difference between ",paraId:13,tocIndex:3},{value:"band",paraId:13,tocIndex:3},{value:" scale and ",paraId:13,tocIndex:3},{value:"point",paraId:13,tocIndex:3},{value:" scale through the following examples:",paraId:13,tocIndex:3},{value:"point",paraId:14,tocIndex:3},{value:" scale",paraId:14,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\nchart.options({\n  type: 'cell',\n  height: 640,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/bd287f2c-3e2b-4d0a-8428-6a85211dce33.json',\n  },\n  encode: { x: 'x', y: 'y', color: 'index' },\n  scale: { x: { type: 'point' } },\n  style: { stroke: '#000', inset: 2 },\n  animate: { enter: { type: 'fadeIn' } },\n});\n\nchart.render();\n",paraId:15,tocIndex:3},{value:"band",paraId:16,tocIndex:3},{value:" scale",paraId:16,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\nchart.options({\n  type: 'cell',\n  height: 640,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/bd287f2c-3e2b-4d0a-8428-6a85211dce33.json',\n  },\n  encode: { x: 'x', y: 'y', color: 'index' },\n  scale: { x: { type: 'band' } },\n  style: { stroke: '#000', inset: 2 },\n  animate: { enter: { type: 'fadeIn' } },\n});\n\nchart.render();\n",paraId:17,tocIndex:3},{value:"Discretize",paraId:18,tocIndex:4},{value:" ",paraId:18,tocIndex:4},{value:"continuous",paraId:18,tocIndex:4},{value:" data into finite categories:",paraId:18,tocIndex:4},{value:"quantize (Quantize Scale)",paraId:19,tocIndex:4},{value:": Segments by equal-width numerical ranges",paraId:19,tocIndex:4},{value:"quantile (Quantile Scale)",paraId:19,tocIndex:4},{value:": Segments by data distribution quantiles, equal data count in each segment",paraId:19,tocIndex:4},{value:"threshold (Threshold Scale)",paraId:19,tocIndex:4},{value:": Segments by manually specified thresholds",paraId:19,tocIndex:4},{value:"The following shows the effect of applying ",paraId:20,tocIndex:4},{value:"quantile",paraId:20,tocIndex:4},{value:" scale and ",paraId:20,tocIndex:4},{value:"quantize",paraId:20,tocIndex:4},{value:" scale to the same data respectively. The former segments by data distribution quantiles with equal data count in each segment, while the latter segments by equal-width numerical ranges.",paraId:20,tocIndex:4},{value:"quantile",paraId:21,tocIndex:4},{value:" scale",paraId:21,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\nchart.options({\n  type: 'cell',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/89c20fe8-0c6f-46c8-b36b-4cb653dba8ed.json',\n    transform: [\n      {\n        type: 'map',\n        callback: (d) => ({\n          salary: d,\n        }),\n      },\n    ],\n  },\n  encode: {\n    y: (_, i) => (i % 5) + 1,\n    x: (_, i) => ((i / 5) | 0) + 1,\n    color: 'salary',\n  },\n  scale: { color: { type: 'quantile', range: ['#eee', 'pink', 'red'] } },\n  style: { stroke: '#000', inset: 2 },\n  animate: { enter: { type: 'fadeIn' } },\n  legend: { color: { length: 400, labelFormatter: '.0s' } },\n});\n\nchart.render();\n",paraId:22,tocIndex:4},{value:"quantize",paraId:23,tocIndex:4},{value:" scale",paraId:23,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\nchart.options({\n  type: 'cell',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/89c20fe8-0c6f-46c8-b36b-4cb653dba8ed.json',\n    transform: [\n      {\n        type: 'map',\n        callback: (d) => ({\n          salary: d,\n        }),\n      },\n    ],\n  },\n  encode: {\n    y: (_, i) => (i % 5) + 1,\n    x: (_, i) => ((i / 5) | 0) + 1,\n    color: 'salary',\n  },\n  scale: { color: { type: 'quantize', range: ['#eee', 'pink', 'red'] } },\n  style: { stroke: '#000', inset: 2 },\n  animate: { enter: { type: 'fadeIn' } },\n  legend: { color: { length: 400, labelFormatter: '.0s' } },\n});\n\nchart.render();\n",paraId:24,tocIndex:4},{value:"Mainly used for x, y coordinate axis:",paraId:25,tocIndex:6},{value:"linear",paraId:26,tocIndex:6},{value:": Numerical coordinate axis",paraId:26,tocIndex:6},{value:"time",paraId:26,tocIndex:6},{value:": Time axis",paraId:26,tocIndex:6},{value:"band",paraId:26,tocIndex:6},{value:": Categorical coordinate axis",paraId:26,tocIndex:6},{value:"point",paraId:26,tocIndex:6},{value:": Categorical coordinate axis",paraId:26,tocIndex:6},{value:"Mainly used for visual channels like color, size, shape:",paraId:27,tocIndex:7},{value:"ordinal",paraId:28,tocIndex:7},{value:": Color and shape mapping for categorical data",paraId:28,tocIndex:7},{value:"linear/log/pow/sqrt",paraId:28,tocIndex:7},{value:": Color gradients and numerical size mapping for continuous data",paraId:28,tocIndex:7},{value:"quantize/quantile/threshold",paraId:28,tocIndex:7},{value:": Segmented color mapping for continuous data",paraId:28,tocIndex:7},{value:"For example, in a basic bar chart, the x channel scale defaults to ",paraId:29,tocIndex:7},{value:"band",paraId:29,tocIndex:7},{value:" for implementing categorical coordinate axis in bar charts, while the y channel scale defaults to ",paraId:29,tocIndex:7},{value:"linear",paraId:29,tocIndex:7},{value:", mapping continuous data from the y channel's corresponding data column to bar lengths with visual properties.",paraId:29,tocIndex:7},{value:"Summary:",paraId:30,tocIndex:7},{value:"Scale Type",paraId:31,tocIndex:7},{value:"Data Type",paraId:31,tocIndex:7},{value:"Mapping Function",paraId:31,tocIndex:7},{value:"Main Use",paraId:31,tocIndex:7},{value:"Use Cases",paraId:31,tocIndex:7},{value:"linear",paraId:31,tocIndex:7},{value:"Continuous",paraId:31,tocIndex:7},{value:"y = mx + b",paraId:31,tocIndex:7},{value:"Position, color, size",paraId:31,tocIndex:7},{value:"Basic mapping for numerical data",paraId:31,tocIndex:7},{value:"log",paraId:31,tocIndex:7},{value:"Continuous",paraId:31,tocIndex:7},{value:"y = log",paraId:31,tocIndex:7},{value:"base",paraId:31,tocIndex:7},{value:"(x) + b",paraId:31,tocIndex:7},{value:"Position, color",paraId:31,tocIndex:7},{value:"Exponentially growing data with large spans",paraId:31,tocIndex:7},{value:"pow",paraId:31,tocIndex:7},{value:"Continuous",paraId:31,tocIndex:7},{value:"y = x",paraId:31,tocIndex:7},{value:"k",paraId:31,tocIndex:7},{value:" + b",paraId:31,tocIndex:7},{value:"Position, color, size",paraId:31,tocIndex:7},{value:"When data difference intensity needs adjustment",paraId:31,tocIndex:7},{value:"sqrt",paraId:31,tocIndex:7},{value:"Continuous",paraId:31,tocIndex:7},{value:"y = x",paraId:31,tocIndex:7},{value:"0.5",paraId:31,tocIndex:7},{value:" + b",paraId:31,tocIndex:7},{value:"Size, color",paraId:31,tocIndex:7},{value:"Compressing large value differences (e.g., area mapping)",paraId:31,tocIndex:7},{value:"time",paraId:31,tocIndex:7},{value:"Time data",paraId:31,tocIndex:7},{value:"Auto-calculated time intervals and ticks",paraId:31,tocIndex:7},{value:"Time axis",paraId:31,tocIndex:7},{value:"Time series data visualization, supports UTC and local time",paraId:31,tocIndex:7},{value:"ordinal",paraId:31,tocIndex:7},{value:"Categorical",paraId:31,tocIndex:7},{value:"One-to-one mapping",paraId:31,tocIndex:7},{value:"Color, shape",paraId:31,tocIndex:7},{value:"Visual attribute mapping for categorical data",paraId:31,tocIndex:7},{value:"band",paraId:31,tocIndex:7},{value:"Categorical",paraId:31,tocIndex:7},{value:"Equal-width interval allocation",paraId:31,tocIndex:7},{value:"x/y axis position",paraId:31,tocIndex:7},{value:"Bar charts, column charts",paraId:31,tocIndex:7},{value:"point",paraId:31,tocIndex:7},{value:"Categorical",paraId:31,tocIndex:7},{value:"Point position allocation",paraId:31,tocIndex:7},{value:"x/y axis position",paraId:31,tocIndex:7},{value:"Point charts, line charts",paraId:31,tocIndex:7},{value:"quantize",paraId:31,tocIndex:7},{value:"Continuous",paraId:31,tocIndex:7},{value:"Equal-width segmentation",paraId:31,tocIndex:7},{value:"Color segmentation",paraId:31,tocIndex:7},{value:"Segmented coloring for evenly distributed data",paraId:31,tocIndex:7},{value:"quantile",paraId:31,tocIndex:7},{value:"Continuous",paraId:31,tocIndex:7},{value:"Equal-frequency segmentation",paraId:31,tocIndex:7},{value:"Color segmentation",paraId:31,tocIndex:7},{value:"Segmented coloring for unevenly distributed data",paraId:31,tocIndex:7},{value:"threshold",paraId:31,tocIndex:7},{value:"Continuous",paraId:31,tocIndex:7},{value:"Custom threshold segmentation",paraId:31,tocIndex:7},{value:"Color segmentation",paraId:31,tocIndex:7},{value:"Grouping by specific thresholds (e.g., pass line)",paraId:31,tocIndex:7},{value:"Numerical Data",paraId:32,tocIndex:8},{value:"Normal distribution → ",paraId:33,tocIndex:8},{value:"linear",paraId:33,tocIndex:8},{value:"Exponential growth/large span → ",paraId:33,tocIndex:8},{value:"log",paraId:33,tocIndex:8},{value:"Need to emphasize small value differences → ",paraId:33,tocIndex:8},{value:"pow",paraId:33,tocIndex:8},{value:" (exponent > 1)",paraId:33,tocIndex:8},{value:"Need to compress large value differences → ",paraId:33,tocIndex:8},{value:"sqrt",paraId:33,tocIndex:8},{value:" or ",paraId:33,tocIndex:8},{value:"pow",paraId:33,tocIndex:8},{value:" (exponent < 1)",paraId:33,tocIndex:8},{value:"Time Data",paraId:34,tocIndex:8},{value:"Time series → ",paraId:35,tocIndex:8},{value:"time",paraId:35,tocIndex:8},{value:"Categorical Data",paraId:36,tocIndex:8},{value:"Color/shape mapping → ",paraId:37,tocIndex:8},{value:"ordinal",paraId:37,tocIndex:8},{value:"Bar chart x-axis → ",paraId:37,tocIndex:8},{value:"band",paraId:37,tocIndex:8},{value:"Point chart x-axis → ",paraId:37,tocIndex:8},{value:"point",paraId:37,tocIndex:8},{value:"Continuous Data Discretization",paraId:38,tocIndex:8},{value:"Evenly distributed data → ",paraId:39,tocIndex:8},{value:"quantize",paraId:39,tocIndex:8},{value:"Unevenly distributed data → ",paraId:39,tocIndex:8},{value:"quantile",paraId:39,tocIndex:8},{value:"Clear threshold requirements → ",paraId:39,tocIndex:8},{value:"threshold",paraId:39,tocIndex:8},{value:"{\n  type: 'linear', // or log, pow, sqrt, time\n  domain: [min, max], // Domain\n  range: [0, 1], // Range\n  unknown: undefined, // Mapping value for unknown values\n  tickMethod: (min, max, count) => [1,2,3,4], // Tick calculation method\n  round: false, // Whether to round output values\n  interpolate: (a, b) => (t) => a * (1 - t) + b * t, // Interpolation method\n  nice: true, // Whether to optimize tick display\n}\n",paraId:40,tocIndex:10},{value:"{\n  type: 'ordinal', // or band, point\n  domain: ['A', 'B', 'C'], // Category list\n  range: ['red', 'green', 'blue'], // Mapping value list\n  unknown: undefined, // Mapping value for unknown values\n  compare: (a, b) => a.localeCompare(b), // Sorting method\n}\n",paraId:41,tocIndex:11},{value:"{\n  type: 'quantize', // or quantile, threshold\n  domain: [0, 100], // Continuous data range\n  range: ['low', 'medium', 'high'], // Discrete categories\n  unknown: undefined, // Mapping value for unknown values\n}\n",paraId:42,tocIndex:12},{value:"G2 internally infers scale type, domain, and range based on data type and mark type, but corresponding configurations can still be specified. Scales can be configured at the Mark level:",paraId:43,tocIndex:13},{value:"({\n  type: 'interval',\n  scale: {\n    x: { padding: 0.5 },\n    y: {\n      type: 'log', // Specify type\n      domain: [10, 100], // Specify domain\n      range: [0, 1], // Specify range\n    },\n  },\n});\n",paraId:44,tocIndex:13},{value:"// API\n// First approach\nchart\n  .interval()\n  .scale('x', { padding: 0.5 })\n  .scale('y', {\n    type: 'log', // Specify type\n    domain: [10, 100], // Specify domain\n    range: [0, 1], // Specify range\n  });\n\n// Second approach\nchart.interval().scale({\n  x: { padding: 0.5 },\n  y: {\n    type: 'log', // Specify type\n    domain: [10, 100], // Specify domain\n    range: [0, 1], // Specify range\n  },\n});\n",paraId:45,tocIndex:13},{value:"Scales can also be configured at the View level:",paraId:46,tocIndex:13},{value:"({\n  type: 'view',\n  scale: {\n    x: { padding: 0.5 },\n    y: {\n      type: 'log', // Specify type\n      domain: [10, 100], // Specify domain\n      range: [0, 1], // Specify range\n    },\n  },\n});\n",paraId:47,tocIndex:13},{value:"// API form\n// First approach\nchart.scale('x', { padding: 0.5 }).scale('y', {\n  type: 'log', // Specify type\n  domain: [10, 100], // Specify domain\n  range: [0, 1], // Specify range\n});\n\n// Second approach\nchart.scale({\n  x: { padding: 0.5 },\n  y: {\n    type: 'log', // Specify type\n    domain: [10, 100], // Specify domain\n    range: [0, 1], // Specify range\n  },\n});\n",paraId:48,tocIndex:13},{value:"Each channel of a mark is bound to a scale. This scale transforms the column data bound to that channel, converting it from the data range: ",paraId:49,tocIndex:14},{value:"Domain",paraId:49,tocIndex:14},{value:" to the visual range: ",paraId:49,tocIndex:14},{value:"Range",paraId:49,tocIndex:14},{value:". Different types of scales are designed for different types of data and use cases.",paraId:49,tocIndex:14},{value:"Scales for the same channel across marks in the same view are synchronized by default: they synchronize scale type, domain, range, and other configurations. This means all marks in a view are drawn according to the same scale. For example, in the figure below, although the LineX mark doesn't have complete data, it's still drawn at the accurate position due to scale synchronization.",paraId:50,tocIndex:15},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  children: [\n    {\n      type: 'line',\n      data: [\n        { year: '1991', value: 3 },\n        { year: '1992', value: 4 },\n        { year: '1993', value: 3.5 },\n        { year: '1994', value: 5 },\n        { year: '1995', value: 4.9 },\n        { year: '1996', value: 6 },\n        { year: '1997', value: 7 },\n        { year: '1998', value: 9 },\n        { year: '1999', value: 13 },\n      ],\n      encode: { x: 'year', y: 'value' },\n    },\n    { type: 'lineX', data: ['1996'], style: { stroke: 'red', strokeWidth: 2 } },\n  ],\n});\n\nchart.render();\n",paraId:51,tocIndex:15},{value:"If you want to disable synchronization (e.g., when drawing dual-axis charts), you need to set ",paraId:52,tocIndex:16},{value:"scale.independent",paraId:52,tocIndex:16},{value:" to ",paraId:52,tocIndex:16},{value:"true",paraId:52,tocIndex:16},{value:". Scales with this property won't synchronize with any other scales. In the example below, the y channels of interval and line will use two different scales, generating two different coordinate axis.",paraId:52,tocIndex:16},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  data: [\n    { time: '10:10', call: 4, waiting: 2, people: 2 },\n    { time: '10:15', call: 2, waiting: 6, people: 3 },\n    { time: '10:20', call: 13, waiting: 2, people: 5 },\n    { time: '10:25', call: 9, waiting: 9, people: 1 },\n    { time: '10:30', call: 5, waiting: 2, people: 3 },\n    { time: '10:35', call: 8, waiting: 2, people: 1 },\n    { time: '10:40', call: 13, waiting: 1, people: 2 },\n  ],\n  children: [\n    {\n      type: 'interval',\n      encode: { x: 'time', y: 'waiting' },\n      axis: { y: { title: 'Waiting', titleFill: '#5B8FF9' } },\n    },\n    {\n      type: 'line',\n      encode: { x: 'time', y: 'people', shape: 'smooth' },\n      scale: { y: { independent: true } }, // Set y direction scale non-synchronized\n      style: { stroke: '#fdae6b', lineWidth: 2 },\n      axis: {\n        y: {\n          position: 'right',\n          grid: null,\n          title: 'People',\n          titleFill: '#fdae6b',\n        },\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:53,tocIndex:16},{value:"If you want scales to synchronize in groups, you can declare ",paraId:54,tocIndex:16},{value:"scale.key",paraId:54,tocIndex:16},{value:". Scales with the same key will synchronize. For example, below, the y channel scales of Line and Point marks synchronize because their keys are both 'line'.",paraId:54,tocIndex:16},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  data: [\n    { time: '10:10', call: 4, waiting: 2, people: 2 },\n    { time: '10:15', call: 2, waiting: 6, people: 3 },\n    { time: '10:20', call: 13, waiting: 2, people: 5 },\n    { time: '10:25', call: 9, waiting: 9, people: 1 },\n    { time: '10:30', call: 5, waiting: 2, people: 3 },\n    { time: '10:35', call: 8, waiting: 2, people: 1 },\n    { time: '10:40', call: 13, waiting: 1, people: 2 },\n  ],\n  children: [\n    {\n      type: 'interval',\n      encode: { x: 'time', y: 'waiting' },\n      axis: { y: { title: 'Waiting', titleFill: '#5B8FF9' } },\n    },\n    {\n      type: 'line',\n      encode: { x: 'time', y: 'people', shape: 'smooth' },\n      scale: { y: { key: 'line' } }, // Set key to 'line'\n      style: { stroke: '#fdae6b', lineWidth: 2 },\n      axis: {\n        y: {\n          position: 'right',\n          grid: null,\n          title: 'People',\n          titleFill: '#fdae6b',\n        },\n      },\n    },\n    {\n      type: 'point',\n      encode: { x: 'time', y: 'people' },\n      scale: { y: { key: 'line' } }, // Set key to 'line'\n      style: { stroke: '#fdae6b', lineWidth: 2 },\n    },\n  ],\n});\n\nchart.render();\n",paraId:55,tocIndex:16},{value:"Scales can be configured at the view level and will be passed to marks specified in ",paraId:56,tocIndex:17},{value:"children",paraId:56,tocIndex:17},{value:". If the corresponding channel of that mark doesn't have a scale set, it will be set; otherwise, there's no effect. When not drawing multi-axis charts, scales can be set at the view level.",paraId:56,tocIndex:17},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  theme: 'classic',\n});\n\nchart.options({\n  type: 'view',\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: { y: { nice: true } },\n  children: [{ type: 'line' }, { type: 'point' }],\n});\n\nchart.render();\n",paraId:57,tocIndex:17},{value:"G2 has intelligent scale type inference capabilities. When users don't explicitly specify a scale type, it automatically selects the most suitable scale type based on data characteristics and channel properties. The inference mechanism follows the following priority rules:",paraId:58,tocIndex:18},{value:"1. Explicit specification has highest priority",paraId:59,tocIndex:19},{value:"If the user explicitly specifies the ",paraId:60,tocIndex:19},{value:"type",paraId:60,tocIndex:19},{value:" property in the scale configuration, G2 will directly use that type, skipping all automatic inference logic.",paraId:60,tocIndex:19},{value:"2. Special data type judgment",paraId:61,tocIndex:19},{value:"G2 first checks the special properties of data:",paraId:62,tocIndex:19},{value:"Object type data",paraId:63,tocIndex:19},{value:": If data contains strict objects (objects that are not Date, not null, not arrays), use ",paraId:63,tocIndex:19},{value:"identity",paraId:63,tocIndex:19},{value:" scale.",paraId:63,tocIndex:19},{value:"export function isStrictObject(d: any): boolean {\n  return (\n    typeof d === 'object' &&\n    !(d instanceof Date) &&\n    d !== null &&\n    !Array.isArray(d)\n  );\n}\n",paraId:64,tocIndex:19},{value:"String type range",paraId:65,tocIndex:19},{value:": When the range parameter is a string, use ",paraId:65,tocIndex:19},{value:"linear",paraId:65,tocIndex:19},{value:" scale.",paraId:65,tocIndex:19},{value:"Multi-range/domain",paraId:65,tocIndex:19},{value:": When domain or range array length exceeds 2, infer as categorical scale.",paraId:65,tocIndex:19},{value:"3. Inference based on domain",paraId:66,tocIndex:19},{value:"When domain parameter is provided:",paraId:67,tocIndex:19},{value:"If domain contains strings or boolean values, infer as categorical scale.",paraId:68,tocIndex:19},{value:"If data contains Date objects, use ",paraId:68,tocIndex:19},{value:"time",paraId:68,tocIndex:19},{value:" scale.",paraId:68,tocIndex:19},{value:"Other cases infer as continuous scale.",paraId:68,tocIndex:19},{value:"4. Automatic inference based on data values",paraId:69,tocIndex:19},{value:"When there's no domain parameter, G2 analyzes actual data:",paraId:70,tocIndex:19},{value:"Categorical detection",paraId:71,tocIndex:19},{value:": When data contains strings or boolean values, infer as categorical scale.",paraId:71,tocIndex:19},{value:"Time type detection",paraId:71,tocIndex:19},{value:": When data contains Date objects, use ",paraId:71,tocIndex:19},{value:"time",paraId:71,tocIndex:19},{value:" scale.",paraId:71,tocIndex:19},{value:"Other cases",paraId:71,tocIndex:19},{value:": Infer as continuous scale.",paraId:71,tocIndex:19},{value:"When inferred as categorical scale, G2 further subdivides based on channel names:",paraId:72,tocIndex:20},{value:"For quantitative channels (x, y, position, channels starting with size), use ",paraId:73,tocIndex:20},{value:"point",paraId:73,tocIndex:20},{value:" scale.",paraId:73,tocIndex:20},{value:"Other channels use ",paraId:73,tocIndex:20},{value:"ordinal",paraId:73,tocIndex:20},{value:" scale.",paraId:73,tocIndex:20},{value:"When inferred as continuous scale:",paraId:74,tocIndex:20},{value:"For non-color channels, use ",paraId:75,tocIndex:20},{value:"linear",paraId:75,tocIndex:20},{value:" scale.",paraId:75,tocIndex:20},{value:"For color channels:\n",paraId:75,tocIndex:20},{value:"Use ",paraId:76,tocIndex:20},{value:"linear",paraId:76,tocIndex:20},{value:" scale when range parameter exists.",paraId:76,tocIndex:20},{value:"Use ",paraId:76,tocIndex:20},{value:"sequential",paraId:76,tocIndex:20},{value:" scale when no range parameter exists. (Sequential scale construction can create a scale that transforms between input and output through interpolation function, used internally during scale processing)",paraId:76,tocIndex:20},{value:"// String data → ordinal scale\nchart.interval().encode('x', 'category'); // category: ['A', 'B', 'C']\n\n// Numerical data → linear scale\nchart.line().encode('y', 'value'); // value: [10, 20, 30]\n\n// Time data → time scale\nchart.line().encode('x', 'date'); // date: [new Date('2023-01-01'), ...]\n\n// String data for quantitative channels → point scale\nchart.interval().encode('x', 'month'); // month: ['Jan', 'Feb', 'Mar']\n\n// Explicit specification has highest priority\nchart.interval().scale('y', { type: 'log' }); // Force use of log scale\n\n// Multi-value range → infer as categorical\nchart.point().scale('color', {\n  range: ['red', 'green', 'blue', 'yellow'], // 4 values, infer as ordinal\n});\n",paraId:77,tocIndex:21}]},70723:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(32957);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"point",paraId:0,tocIndex:0},{value:" scale belongs to the ",paraId:0,tocIndex:0},{value:"categorical scale",paraId:0,tocIndex:0},{value:" category and is a special case of the ",paraId:0,tocIndex:0},{value:"band",paraId:1,tocIndex:0},{value:" scale with a fixed ",paraId:0,tocIndex:0},{value:"bandWidth",paraId:0,tocIndex:0},{value:" of 0. It is used to evenly distribute a set of discrete categories (such as strings, numbers, dates, etc.) across a specified continuous range.",paraId:0,tocIndex:0},{value:"Even distribution of discrete data (such as categorical axis, grouped point distribution, etc.)",paraId:2,tocIndex:1},{value:"Scenarios where categorical data needs to be mapped to a continuous range",paraId:3,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  height: 500,\n  data: [\n    1.2, 3.4, 3.7, 4.3, 5.2, 5.8, 6.1, 6.5, 6.8, 7.1, 7.3, 7.7, 8.3, 8.6, 8.8,\n    9.1, 9.2, 9.4, 9.5, 9.7, 10.5, 10.7, 10.8, 11, 11, 11.1, 11.2, 11.3, 11.4,\n    11.4, 11.7, 12, 12.9, 12.9, 13.3, 13.7, 13.8, 13.9, 14, 14.2, 14.5, 15,\n    15.2, 15.6, 16, 16.3, 17.3, 17.5, 17.9, 18, 18, 20.6, 21, 23.4,\n  ],\n  encode: { x: (d) => d, y: 'count' },\n  transform: [{ type: 'binX', y: 'count', thresholds: 10 }],\n  scale: { x: { type: 'point' } },\n  style: { columnWidthRatio: 1, inset: 0.5 },\n});\n\nchart.render();\n",paraId:4,tocIndex:2},{value:"Property",paraId:5,tocIndex:3},{value:"Description",paraId:5,tocIndex:3},{value:"Type",paraId:5,tocIndex:3},{value:"Default Value",paraId:5,tocIndex:3},{value:"Required",paraId:5,tocIndex:3},{value:"type",paraId:5,tocIndex:3},{value:"Scale type, must be 'point'",paraId:5,tocIndex:3},{value:"string",paraId:5,tocIndex:3},{value:"None",paraId:5,tocIndex:3},{value:"✓",paraId:5,tocIndex:3},{value:"domain",paraId:5,tocIndex:3},{value:"Domain array, collection of categories",paraId:5,tocIndex:3},{value:"number[]",paraId:5,tocIndex:3},{value:" | ",paraId:5,tocIndex:3},{value:"string[]",paraId:5,tocIndex:3},{value:" | ",paraId:5,tocIndex:3},{value:"Date[]",paraId:5,tocIndex:3},{value:"[]",paraId:5,tocIndex:3},{value:"range",paraId:5,tocIndex:3},{value:"Range, the continuous interval for mapping",paraId:5,tocIndex:3},{value:"number[]",paraId:5,tocIndex:3},{value:" | ",paraId:5,tocIndex:3},{value:"string[]",paraId:5,tocIndex:3},{value:"[0, 1]",paraId:5,tocIndex:3},{value:"unknown",paraId:5,tocIndex:3},{value:"Value returned when input is ",paraId:5,tocIndex:3},{value:"undefined",paraId:5,tocIndex:3},{value:", ",paraId:5,tocIndex:3},{value:"NaN",paraId:5,tocIndex:3},{value:", or ",paraId:5,tocIndex:3},{value:"null",paraId:5,tocIndex:3},{value:"any",paraId:5,tocIndex:3},{value:"undefined",paraId:5,tocIndex:3},{value:"round",paraId:5,tocIndex:3},{value:"Whether to round the output values",paraId:5,tocIndex:3},{value:"boolean",paraId:5,tocIndex:3},{value:"false",paraId:5,tocIndex:3},{value:"align",paraId:5,tocIndex:3},{value:"Alignment, within the range [0, 1]",paraId:5,tocIndex:3},{value:"number",paraId:5,tocIndex:3},{value:"0.5",paraId:5,tocIndex:3},{value:"compare",paraId:5,tocIndex:3},{value:"Sort the domain",paraId:5,tocIndex:3},{value:"(a: string | number, b: string | number) => number",paraId:5,tocIndex:3},{value:"undefined",paraId:5,tocIndex:3},{value:"Complex Type Descriptions:",paraId:6,tocIndex:3},{value:"domain",paraId:7,tocIndex:3},{value:": An array of categories, which can be strings, numbers, or dates.",paraId:7,tocIndex:3},{value:"range",paraId:7,tocIndex:3},{value:": The continuous interval for mapping, typically ",paraId:7,tocIndex:3},{value:"[0, 1]",paraId:7,tocIndex:3},{value:" or pixel intervals.",paraId:7,tocIndex:3},{value:"compare",paraId:7,tocIndex:3},{value:": Custom sorting function that determines the order of the domain.",paraId:7,tocIndex:3},{value:"Note:",paraId:8,tocIndex:3},{value:" The point scale is a band scale with a constant bandWidth of 0. The following properties are internally fixed:",paraId:8,tocIndex:3},{value:"padding: 0.5, // internally assigned\npaddingInner: 1, // cannot be modified\npaddingOuter: 0.5 // internally assigned\n",paraId:9,tocIndex:3},{value:"If you want to customize the ",paraId:10,tocIndex:3},{value:"paddingOuter",paraId:10,tocIndex:3},{value:" value, you can modify it through the ",paraId:10,tocIndex:3},{value:"padding",paraId:10,tocIndex:3},{value:" property. For example:",paraId:10,tocIndex:3},{value:"(scale: {\n  x: {\n    type: 'point',\n    padding: 0, // only affects paddingOuter, paddingInner is always 1\n  },\n});\n",paraId:11,tocIndex:3},{value:"|<------------------------------------------- range -------------------------------------------\x3e|\n|             |                                 |                                 |             |\n|<--step*PO--\x3e|<--------------step-------------\x3e|<--------------step-------------\x3e|<--step*PO--\x3e|\n|             |                                 |                                 |             |\n|             A                                 B                                 C             |\n|-----------------------------------------------------------------------------------------------|\n\n",paraId:12,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  },\n  encode: { x: 'height', y: 'weight', color: 'gender' },\n  scale: { x: { type: 'point' } },\n});\n\nchart.render();\n",paraId:13,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'cell',\n  height: 640,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/bd287f2c-3e2b-4d0a-8428-6a85211dce33.json',\n  },\n  encode: { x: 'x', y: 'y', color: 'index' },\n  scale: { x: { type: 'point' } },\n  style: { stroke: '#000', inset: 2 },\n  animate: { enter: { type: 'fadeIn' } },\n});\n\nchart.render();\n",paraId:14,tocIndex:6}]},66519:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(86230);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"pow",paraId:0,tocIndex:0},{value:" (power scale) is a type of continuous scale, similar to linear scales. The ",paraId:0,tocIndex:0},{value:"pow",paraId:0,tocIndex:0},{value:" scale applies an exponential transformation to the input data before mapping it to the output range. Its mapping formula is: ",paraId:0,tocIndex:0},{value:"y = x ^ k",paraId:0,tocIndex:0},{value:"Where ",paraId:1,tocIndex:0},{value:"k",paraId:1,tocIndex:0},{value:" is the exponent parameter, which can be any real number. When ",paraId:1,tocIndex:0},{value:"k = 1",paraId:1,tocIndex:0},{value:", the ",paraId:1,tocIndex:0},{value:"pow",paraId:1,tocIndex:0},{value:" scale becomes equivalent to a ",paraId:1,tocIndex:0},{value:"linear",paraId:1,tocIndex:0},{value:" scale.",paraId:1,tocIndex:0},{value:"The ",paraId:2,tocIndex:0},{value:"pow",paraId:2,tocIndex:0},{value:" scale is particularly useful for scenarios where you need to emphasize relative differences between data points, such as:",paraId:2,tocIndex:0},{value:"When data distribution shows exponential growth/decay characteristics",paraId:3,tocIndex:0},{value:"When you need to amplify/reduce differences between data points",paraId:3,tocIndex:0},{value:"When data has a large range but you want to display it more evenly",paraId:3,tocIndex:0},{value:"Property",paraId:4,tocIndex:1},{value:"Description",paraId:4,tocIndex:1},{value:"Type",paraId:4,tocIndex:1},{value:"Default",paraId:4,tocIndex:1},{value:"Required",paraId:4,tocIndex:1},{value:"type",paraId:4,tocIndex:1},{value:"Scale type, must be 'pow'",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"None",paraId:4,tocIndex:1},{value:"✓",paraId:4,tocIndex:1},{value:"domain",paraId:4,tocIndex:1},{value:"Domain, representing the original range of input data",paraId:4,tocIndex:1},{value:"(number | string)[]",paraId:4,tocIndex:1},{value:"[0, 1]",paraId:4,tocIndex:1},{value:"range",paraId:4,tocIndex:1},{value:"Range, representing the visual range after mapping",paraId:4,tocIndex:1},{value:"number[]",paraId:4,tocIndex:1},{value:"[0, 1]",paraId:4,tocIndex:1},{value:"exponent",paraId:4,tocIndex:1},{value:"Exponent value, determining the strength of exponential transformation",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:"2",paraId:4,tocIndex:1},{value:"nice",paraId:4,tocIndex:1},{value:"Whether to optimize the domain range",paraId:4,tocIndex:1},{value:"boolean",paraId:4,tocIndex:1},{value:"false",paraId:4,tocIndex:1},{value:"clamp",paraId:4,tocIndex:1},{value:"Whether to limit values outside the domain to the range",paraId:4,tocIndex:1},{value:"boolean",paraId:4,tocIndex:1},{value:"false",paraId:4,tocIndex:1},{value:"round",paraId:4,tocIndex:1},{value:"Whether to round the output values",paraId:4,tocIndex:1},{value:"boolean",paraId:4,tocIndex:1},{value:"false",paraId:4,tocIndex:1},{value:"tickMethod",paraId:4,tocIndex:1},{value:"Method for calculating ticks",paraId:4,tocIndex:1},{value:"(min: number, max: number, count: number) => number[]",paraId:4,tocIndex:1},{value:"d3Ticks",paraId:4,tocIndex:1},{value:"tickCount",paraId:4,tocIndex:1},{value:"Number of ticks",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:"5",paraId:4,tocIndex:1},{value:"interpolate",paraId:4,tocIndex:1},{value:"Custom interpolator, supports numeric and color values",paraId:4,tocIndex:1},{value:"(a: number | string, b: number | string) => (t: number) => number | string",paraId:4,tocIndex:1},{value:"Numbers: linear interpolation; Colors: RGBA interpolation",paraId:4,tocIndex:1},{value:"When ",paraId:5,tocIndex:2},{value:"domain",paraId:5,tocIndex:2},{value:" contains negative values, ",paraId:5,tocIndex:2},{value:"exponent",paraId:5,tocIndex:2},{value:" must be an integer, otherwise it will produce complex number results",paraId:5,tocIndex:2},{value:"Excessively large ",paraId:5,tocIndex:2},{value:"exponent",paraId:5,tocIndex:2},{value:" values may cause differences between small values to be over-compressed",paraId:5,tocIndex:2},{value:"When ",paraId:5,tocIndex:2},{value:"exponent=1",paraId:5,tocIndex:2},{value:", consider using ",paraId:5,tocIndex:2},{value:"linear",paraId:5,tocIndex:2},{value:" scale for better performance",paraId:5,tocIndex:2},{value:"tickMethod",paraId:5,tocIndex:2},{value:" defaults to using ",paraId:5,tocIndex:2},{value:"d3.js",paraId:5,tocIndex:2},{value:"'s ",paraId:5,tocIndex:2},{value:"d3Ticks",paraId:5,tocIndex:2},{value:" algorithm, which automatically generates aesthetically pleasing and readable tick values (e.g., 0,5,10 instead of 0,3.33,6.66,10)",paraId:5,tocIndex:2},{value:"When the value to be mapped is invalid, returns ",paraId:5,tocIndex:2},{value:"unknown",paraId:5,tocIndex:2},{value:"interpolate",paraId:5,tocIndex:2},{value:" receives two parameters (a,b) representing the range (numbers or colors), and returns an interpolation function (t => value), where t∈[0,1] represents the interpolation ratio. The default implementation automatically selects based on input type: Numbers: uses linear interpolation y = a*(1-t) + b*t; Colors: generates an rgba color value",paraId:5,tocIndex:2},{value:"When ",paraId:6,tocIndex:4},{value:"exponent=1",paraId:6,tocIndex:4},{value:", the ",paraId:6,tocIndex:4},{value:"pow",paraId:6,tocIndex:4},{value:" scale is equivalent to a linear scale. In this case, data mapping is linear, suitable for displaying evenly distributed data.",paraId:6,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  { month: 'Jan', sales: 0.1 },\n  { month: 'Feb', sales: 0.2 },\n  { month: 'Mar', sales: 0.3 },\n  { month: 'Apr', sales: 0.4 },\n  { month: 'May', sales: 0.5 },\n];\n\nchart\n  .interval()\n  .data(data)\n  .encode('x', 'month')\n  .encode('y', 'sales')\n  .scale('y', {\n    type: 'pow',\n    domain: [0, 0.5], // Input range\n    range: [0, 1], // Output range, [0, 1] means y-axis direction from top to bottom, [1, 0] means y-axis direction from bottom to top\n    exponent: 1,\n  });\n\nchart.render();\n",paraId:7,tocIndex:4},{value:"When data has a large range, you can use a ",paraId:8,tocIndex:5},{value:"pow",paraId:8,tocIndex:5},{value:" scale with ",paraId:8,tocIndex:5},{value:"exponent < 1",paraId:8,tocIndex:5},{value:" to compress data differences. Square root scales are suitable for displaying data with large ranges but wanting more even distribution.",paraId:8,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  { city: 'Beijing', population: 2171 },\n  { city: 'Shanghai', population: 2418 },\n  { city: 'Guangzhou', population: 1490 },\n  { city: 'Shenzhen', population: 1303 },\n  { city: 'Hangzhou', population: 1000 },\n  { city: 'Chengdu', population: 800 },\n  { city: 'Tianjin', population: 600 },\n];\n\nchart\n  .interval()\n  .data(data)\n  .encode('x', 'city')\n  .encode('y', 'population')\n  .scale('x')\n  .scale('y', {\n    type: 'pow',\n    exponent: 0.5,\n    nice: true,\n  });\n\nchart.render();\n",paraId:9,tocIndex:5},{value:"When you need to emphasize differences between small values, you can use a ",paraId:10,tocIndex:6},{value:"pow",paraId:10,tocIndex:6},{value:" scale with ",paraId:10,tocIndex:6},{value:"exponent > 1",paraId:10,tocIndex:6},{value:". Exponential scales amplify differences between small values, suitable for displaying subtle but important changes.",paraId:10,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  { day: 'Mon', rate: 0.01 },\n  { day: 'Tue', rate: 0.02 },\n  { day: 'Wed', rate: 0.05 },\n  { day: 'Thu', rate: 0.1 },\n  { day: 'Fri', rate: 0.2 },\n];\n\nchart\n  .interval()\n  .data(data)\n  .encode('x', 'day')\n  .encode('y', 'rate')\n  .scale('y', {\n    type: 'pow',\n    domain: [0, 0.2], // Input range\n    range: [1, 0], // Output range, [0, 1] means y-axis direction from top to bottom, [1, 0] means y-axis direction from bottom to top\n    exponent: 2,\n  });\n\nchart.render();\n",paraId:11,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  { time: '2025-01', value: 0.1 },\n  { time: '2025-02', value: 0.4 },\n  { time: '2025-03', value: 0.9 },\n];\n\nchart\n  .line()\n  .data(data)\n  .encode('x', 'time')\n  .encode('y', 'value')\n  .scale('y', {\n    type: 'pow',\n    domain: [0, 1],\n    range: [0, 1],\n    exponent: 1,\n    interpolate: (a, b) => (t) => a + (b - a) * t * t, // Quadratic easing interpolation\n  });\n\nchart.render();\n",paraId:12,tocIndex:7}]},938:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(91910);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"quantile",paraId:0,tocIndex:0},{value:" scale belongs to the ",paraId:0,tocIndex:0},{value:"discretizing scale",paraId:0,tocIndex:0},{value:" category, primarily used to group continuous data by quantiles and map them to a specified range. It is a ",paraId:0,tocIndex:0},{value:"measurement that automatically segments based on data density",paraId:0,tocIndex:0},{value:", similar to ",paraId:0,tocIndex:0},{value:"threshold",paraId:1,tocIndex:0},{value:", but quantile automatically segments based on the sorted data indices rather than manually specified thresholds. It automatically determines segment points (ticks) based on data distribution density, where these segment points are determined by data quantiles rather than uniform distribution. During scaling, it performs segmented mapping based on these ticks, with tick calculation using the ",paraId:0,tocIndex:0},{value:"tickMethod: quantile",paraId:0,tocIndex:0},{value:" approach. This characteristic makes the quantile scale particularly suitable for displaying datasets with non-uniform distributions, providing more accurate reflection of data density changes and suitable for scenarios requiring discretization based on data characteristics.",paraId:0,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4 },\n    { year: '1996', value: 5 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 7 },\n    { year: '1999', value: 13 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: {\n    y: {\n      type: 'quantile',\n      range: [1, 0.5, 0],\n    },\n  },\n  children: [\n    { type: 'line', labels: [{ text: 'value', style: { dx: -10, dy: -12 } }] },\n    { type: 'point', style: { fill: 'white' }, tooltip: false },\n  ],\n});\n\nchart.render();\n",paraId:2,tocIndex:1},{value:"The above chart shows that more values around 4-5 are mapped to 0.5, indicating the highest data density is between 4-5.",paraId:3,tocIndex:1},{value:"Property",paraId:4,tocIndex:2},{value:"Description",paraId:4,tocIndex:2},{value:"Type",paraId:4,tocIndex:2},{value:"Default Value",paraId:4,tocIndex:2},{value:"Required",paraId:4,tocIndex:2},{value:"domain",paraId:4,tocIndex:2},{value:"Sets the domain range of the data",paraId:4,tocIndex:2},{value:"number[]",paraId:4,tocIndex:2},{value:"[]",paraId:4,tocIndex:2},{value:"range",paraId:4,tocIndex:2},{value:"Sets the range for data mapping",paraId:4,tocIndex:2},{value:"any[]",paraId:4,tocIndex:2},{value:"[]",paraId:4,tocIndex:2},{value:"✔",paraId:4,tocIndex:2},{value:"unknown",paraId:4,tocIndex:2},{value:"Return value for ",paraId:4,tocIndex:2},{value:"undefined",paraId:4,tocIndex:2},{value:", ",paraId:4,tocIndex:2},{value:"NaN",paraId:4,tocIndex:2},{value:", ",paraId:4,tocIndex:2},{value:"null",paraId:4,tocIndex:2},{value:" empty values",paraId:4,tocIndex:2},{value:"any",paraId:4,tocIndex:2},{value:"undefined",paraId:4,tocIndex:2},{value:"tickCount",paraId:4,tocIndex:2},{value:"Sets the recommended number of ticks to generate, tickCount is only a suggestion and not guaranteed to be fully effective",paraId:4,tocIndex:2},{value:"number",paraId:4,tocIndex:2},{value:"5",paraId:4,tocIndex:2},{value:"tickMethod",paraId:4,tocIndex:2},{value:"Sets the method for generating ticks, commonly used for custom ticks",paraId:4,tocIndex:2},{value:"(min: number, max: number, count: number) => number[]",paraId:4,tocIndex:2},{value:"wilkinson-extended",paraId:4,tocIndex:2},{value:"nice",paraId:4,tocIndex:2},{value:"Extends the domain range to make output ticks display more friendly",paraId:4,tocIndex:2},{value:"boolean",paraId:4,tocIndex:2},{value:"false",paraId:4,tocIndex:2},{value:"tickMethod",paraId:5,tocIndex:3},{value:":\n",paraId:5,tocIndex:3},{value:"Type: ",paraId:6,tocIndex:3},{value:"(min: number, max: number, count: number) => number[]",paraId:6,tocIndex:3},{value:"Description: Function used to generate tick values, receiving the domain's minimum value, maximum value, and desired tick count as parameters. In quantile scales, while actual data segmentation is obtained through quantile-calculated thresholds, generating tick values for display is accomplished through tickMethod. The default uses the ",paraId:6,tocIndex:3},{value:"wilkinson-extended",paraId:6,tocIndex:3},{value:" algorithm, which generates aesthetically pleasing, uniformly distributed ticks. Customizing this method allows control over the tick positions and quantities displayed on the axis.",paraId:6,tocIndex:3},{value:"Example: ",paraId:6,tocIndex:3},{value:"tickMethod: (min, max, count) => [min, (min+max)/2, max]",paraId:6,tocIndex:3},{value:" will only generate ticks at minimum value, middle value, and maximum value.",paraId:6,tocIndex:3},{value:"The following example shows how to use quantile scale to divide salary data into three groups and map them to different colors:",paraId:7,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'cell',\n  height: 640,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/bd287f2c-3e2b-4d0a-8428-6a85211dce33.json',\n  },\n  encode: { x: 'x', y: 'y', color: 'index' },\n  scale: {\n    color: { type: 'quantile', range: ['#eeeeee', '#ffc3ce', '#ff0d0d'] },\n  },\n  style: { stroke: '#000', inset: 2 },\n  animate: { enter: { type: 'fadeIn' } },\n});\n\nchart.render();\n",paraId:8,tocIndex:5},{value:"In the above example, the quantile scale automatically divides salaries into three groups based on data distribution and maps them to three different colors, suitable for displaying the layered effect of data distribution.",paraId:9,tocIndex:5}]},76201:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(92784);const t=[{value:"The quantize scale is a discretization scale that divides a continuous data domain into several equal-width intervals and maps these intervals to discrete values in the range. It belongs to a type of segmented scale, primarily used for discretizing continuous data.",paraId:0,tocIndex:0},{value:"Similar to the ",paraId:1,tocIndex:0},{value:"threshold",paraId:2,tocIndex:0},{value:" scale, quantize also maps continuous data to discrete values, but with the following differences:",paraId:1,tocIndex:0},{value:"The threshold scale requires manually specifying split points (thresholds)",paraId:3,tocIndex:0},{value:"The quantize scale automatically calculates equal-width intervals based on the data domain and the number of range values",paraId:3,tocIndex:0},{value:"The difference from the ",paraId:4,tocIndex:0},{value:"quantile",paraId:5,tocIndex:0},{value:" scale is:",paraId:4,tocIndex:0},{value:"The quantile scale segments based on data distribution quantiles, ensuring each interval contains the same number of data points",paraId:6,tocIndex:0},{value:"The quantize scale segments based on equal-width intervals of data value ranges, without considering data distribution",paraId:6,tocIndex:0},{value:"The quantize scale works as follows:",paraId:7,tocIndex:1},{value:"Divide the data domain [min, max] into n equal intervals, where n is the length of the range array",paraId:8,tocIndex:1},{value:"For input value x, determine which interval it falls into",paraId:8,tocIndex:1},{value:"Return the range element corresponding to that interval",paraId:8,tocIndex:1},{value:"For example, with data domain [0, 100] and range ['Small', 'Medium', 'Large']:",paraId:9,tocIndex:1},{value:"Input values 0-33.33 map to 'Small'",paraId:10,tocIndex:1},{value:"Input values 33.33-66.67 map to 'Medium'",paraId:10,tocIndex:1},{value:"Input values 66.67-100 map to 'Large'",paraId:10,tocIndex:1},{value:"The quantize scale is suitable for the following scenarios:",paraId:11,tocIndex:2},{value:"Need to group continuous data (such as temperature, income, ratings) into a limited number of categories",paraId:12,tocIndex:2},{value:"Creating heatmaps, contour maps, and other visualizations that require mapping numerical data to discrete colors",paraId:12,tocIndex:2},{value:"Data distribution is relatively uniform, suitable for equal-width segmentation",paraId:12,tocIndex:2},{value:"chart.options({\n  type: 'cell',\n  data: salaryData,\n  encode: {\n    color: 'salary',\n  },\n  scale: {\n    color: {\n      type: 'quantize',\n      range: ['#eee', 'pink', 'red'], // Divide data into three groups, each corresponding to a color\n    },\n  },\n});\n",paraId:13,tocIndex:3},{value:"The quantize scale is primarily responsible for mapping continuous data domains to discrete ranges. Here are the configuration options for the quantize scale:",paraId:14,tocIndex:4},{value:"Property",paraId:15,tocIndex:4},{value:"Description",paraId:15,tocIndex:4},{value:"Type",paraId:15,tocIndex:4},{value:"Default Value",paraId:15,tocIndex:4},{value:"Required",paraId:15,tocIndex:4},{value:"type",paraId:15,tocIndex:4},{value:"Scale type, must be 'quantize'",paraId:15,tocIndex:4},{value:"string",paraId:15,tocIndex:4},{value:"None",paraId:15,tocIndex:4},{value:"✓",paraId:15,tocIndex:4},{value:"domain",paraId:15,tocIndex:4},{value:"Set the domain range of the data",paraId:15,tocIndex:4},{value:"number[]",paraId:15,tocIndex:4},{value:"[0, 1]",paraId:15,tocIndex:4},{value:"range",paraId:15,tocIndex:4},{value:"Set the range of data mapping values",paraId:15,tocIndex:4},{value:"any[]",paraId:15,tocIndex:4},{value:"[0.5]",paraId:15,tocIndex:4},{value:"unknown",paraId:15,tocIndex:4},{value:"Return value for ",paraId:15,tocIndex:4},{value:"undefined",paraId:15,tocIndex:4},{value:", ",paraId:15,tocIndex:4},{value:"NaN",paraId:15,tocIndex:4},{value:", ",paraId:15,tocIndex:4},{value:"null",paraId:15,tocIndex:4},{value:" empty values",paraId:15,tocIndex:4},{value:"any",paraId:15,tocIndex:4},{value:"undefined",paraId:15,tocIndex:4},{value:"tickCount",paraId:15,tocIndex:4},{value:"Set the recommended number of ticks to generate, tickCount is only a suggestion value",paraId:15,tocIndex:4},{value:"number",paraId:15,tocIndex:4},{value:"5",paraId:15,tocIndex:4},{value:"tickMethod",paraId:15,tocIndex:4},{value:"Set the method for generating ticks, commonly used for custom ticks",paraId:15,tocIndex:4},{value:"(min: number, max: number, count: number) => number[]",paraId:15,tocIndex:4},{value:"wilkinson-extended",paraId:15,tocIndex:4},{value:"nice",paraId:15,tocIndex:4},{value:"Extend the domain range to make the output ticks display more friendly",paraId:15,tocIndex:4},{value:"boolean",paraId:15,tocIndex:4},{value:"false",paraId:15,tocIndex:4},{value:"Below is an example of creating a heatmap using the quantize scale, dividing salary data into three equal-width intervals based on numerical values and mapping them to different colors:",paraId:16,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\n// Create a container element\nconst container = document.createElement('div');\n\nconst chart = new Chart({\n  container: 'container',\n  container,\n  height: 340,\n});\n\nchart.options({\n  type: 'cell',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/89c20fe8-0c6f-46c8-b36b-4cb653dba8ed.json',\n    transform: [{ type: 'map', callback: (d) => ({ salary: d }) }],\n  },\n  scale: {\n    color: {\n      type: 'quantize',\n      range: ['#eee', 'pink', 'red'], // Divide data into three groups, corresponding to three colors\n    },\n  },\n  legend: {\n    color: {\n      length: 400,\n      labelFormatter: '.0s', // Format legend labels using abbreviations (e.g., 10K instead of 10000)\n    },\n  },\n  encode: {\n    y: (_, i) => (i % 5) + 1, // Set the row position of the cell\n    x: (_, i) => ((i / 5) | 0) + 1, // Set the column position of the cell\n    color: 'salary', // Map salary data to the color channel\n  },\n  style: {\n    stroke: '#000', // Set cell border color\n    inset: 2, // Set cell padding\n  },\n  animate: {\n    enter: { type: 'fadeIn' }, // Add fade-in animation effect\n  },\n});\n\nchart.render();\n",paraId:17,tocIndex:6},{value:"In the above example:",paraId:18,tocIndex:7},{value:"We created a cell chart (similar to a heatmap)",paraId:19,tocIndex:7},{value:"Used the quantize scale to map salary data (continuous numerical values) to three color intervals",paraId:19,tocIndex:7},{value:"The scale automatically divides the data range into three equal-width intervals, each corresponding to a color",paraId:19,tocIndex:7},{value:"The legend uses the ",paraId:19,tocIndex:7},{value:".0s",paraId:19,tocIndex:7},{value:" formatter to display large numbers in a more readable form (e.g., 10K)",paraId:19,tocIndex:7},{value:"Scale Type",paraId:20,tocIndex:8},{value:"Data Type",paraId:20,tocIndex:8},{value:"Segmentation Method",paraId:20,tocIndex:8},{value:"Use Case",paraId:20,tocIndex:8},{value:"quantize",paraId:20,tocIndex:8},{value:"Continuous",paraId:20,tocIndex:8},{value:"Equal-width",paraId:20,tocIndex:8},{value:"Uniform data distribution, need to group by range",paraId:20,tocIndex:8},{value:"quantile",paraId:20,tocIndex:8},{value:"Continuous",paraId:20,tocIndex:8},{value:"Equal-frequency",paraId:20,tocIndex:8},{value:"Uneven data distribution, need equal data per group",paraId:20,tocIndex:8},{value:"threshold",paraId:20,tocIndex:8},{value:"Continuous",paraId:20,tocIndex:8},{value:"Custom thresholds",paraId:20,tocIndex:8},{value:"Need to group by specific thresholds (e.g., pass/fail)",paraId:20,tocIndex:8},{value:"The following example shows the difference between quantize and quantile scales when handling skewed data:",paraId:21,tocIndex:9},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\n// Create a skewed distribution dataset using integer values\nconst generateSkewedData = () => {\n  const data = [];\n  // Most data concentrated in low value area\n  for (let i = 0; i < 60; i++) {\n    // Use integer values to avoid decimal overlap\n    data.push({\n      value: Math.floor(5 + Math.random() * 25),\n      type: 'Skewed Data',\n    });\n  }\n  // Few data points distributed in high value area, more scattered\n  for (let i = 0; i < 15; i++) {\n    data.push({\n      value: Math.floor(60 + Math.random() * 20),\n      type: 'Skewed Data',\n    });\n  }\n  // Add some middle values to make distribution more obvious\n  for (let i = 0; i < 10; i++) {\n    data.push({\n      value: Math.floor(40 + Math.random() * 15),\n      type: 'Skewed Data',\n    });\n  }\n  return data;\n};\n\nconst data = generateSkewedData();\n\n// Create two charts for comparison\ncontainer.style.display = 'flex';\ncontainer.style.flexDirection = 'column';\ncontainer.style.gap = '40px'; // Increase spacing\ncontainer.style.width = '100%';\ncontainer.style.maxWidth = '800px';\ncontainer.style.margin = '0 auto'; // Center display\n\n// Add title\nconst title = document.createElement('h3');\ntitle.textContent = 'quantize vs quantile Scale Comparison';\ntitle.style.textAlign = 'center';\ntitle.style.marginBottom = '10px';\ncontainer.appendChild(title);\n\n// quantize scale chart\nconst chart1Container = document.createElement('div');\nchart1Container.style.width = '100%';\nchart1Container.style.height = '220px'; // Increase height\ncontainer.appendChild(chart1Container);\n\nconst chart1 = new G2.Chart({\n  container: chart1Container,\n  height: 220,\n  autoFit: true, // Auto-fit container size\n  padding: [50, 100, 70, 100], // Increase padding, leave more space for labels\n});\n\nchart1.options({\n  type: 'point',\n  data,\n  title: {\n    text: 'quantize Scale (Equal-width Segmentation)',\n    style: {\n      fontSize: 14,\n      fontWeight: 'bold',\n    },\n  },\n  scale: {\n    color: {\n      type: 'quantize',\n      range: ['#e8f4f8', '#a8d5e5', '#4ba3c3', '#0a6c93'], // 4 color segments\n    },\n    value: {\n      nice: true,\n      tickCount: 5, // Reduce tick count\n      formatter: '.0f', // Use G2 built-in formatter to display integers\n    },\n  },\n  encode: {\n    x: 'value',\n    y: 'type',\n    color: 'value',\n    shape: 'circle',\n    size: 8,\n  },\n  style: {\n    fillOpacity: 0.8,\n    stroke: '#fff',\n    lineWidth: 1,\n  },\n  legend: {\n    color: {\n      position: 'top',\n      length: 200, // Set legend length\n      labelFormatter: '.0f', // Use G2 built-in formatter to display integers\n    },\n  },\n  axis: {\n    y: false,\n    x: {\n      labelSpacing: 10, // Increase label spacing\n      labelFormatter: '.0f', // Use G2 built-in formatter to display integers\n      tickCount: 5, // Reduce tick count\n    },\n  },\n});\n\nchart1.render();\n\n// quantile scale chart\nconst chart2Container = document.createElement('div');\nchart2Container.style.width = '100%';\nchart2Container.style.height = '220px'; // Increase height\ncontainer.appendChild(chart2Container);\n\nconst chart2 = new G2.Chart({\n  container: 'container',\n  container: chart2Container,\n  height: 220,\n  autoFit: true, // Auto-fit container size\n  padding: [50, 100, 70, 100], // Increase padding, leave more space for labels\n});\n\nchart2.options({\n  type: 'point',\n  data,\n  title: {\n    text: 'quantile Scale (Equal-frequency Segmentation)',\n    style: {\n      fontSize: 14,\n      fontWeight: 'bold',\n    },\n  },\n  scale: {\n    color: {\n      type: 'quantile',\n      range: ['#e8f4f8', '#a8d5e5', '#4ba3c3', '#0a6c93'], // 4 color segments\n    },\n    value: {\n      nice: true,\n      tickCount: 5, // Reduce tick count\n      formatter: '.0f', // Use G2 built-in formatter to display integers\n    },\n  },\n  encode: {\n    x: 'value',\n    y: 'type',\n    color: 'value',\n    shape: 'circle',\n    size: 8,\n  },\n  style: {\n    fillOpacity: 0.8,\n    stroke: '#fff',\n    lineWidth: 1,\n  },\n  legend: {\n    color: {\n      position: 'top',\n      length: 200, // Set legend length\n      labelFormatter: '.0f', // Use G2 built-in formatter to display integers\n    },\n  },\n  axis: {\n    y: false,\n    x: {\n      labelSpacing: 10, // Increase label spacing\n      labelFormatter: '.0f', // Use G2 built-in formatter to display integers\n      tickCount: 5, // Reduce tick count\n    },\n  },\n});\n\nchart2.render();\n",paraId:22,tocIndex:9},{value:"In the above comparison example:",paraId:23,tocIndex:9},{value:"We created a skewed distribution dataset with most data concentrated in the low value area and few data points in the high value area",paraId:24,tocIndex:9},{value:"When using the quantize scale (equal-width segmentation), data is evenly segmented by value range, resulting in some color intervals having very few points",paraId:24,tocIndex:9},{value:"When using the quantile scale (equal-frequency segmentation), each color interval contains the same number of data points, better showing the data distribution",paraId:24,tocIndex:9},{value:"Below is a more complex example showing how to use the quantize scale to create multiple segments and customize the data domain:",paraId:25,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\n// Create a container element\nconst container = document.createElement('div');\n\nconst chart = new Chart({\n  container: 'container',\n  container,\n  height: 300,\n});\n\n// Generate test data\nconst data = Array.from({ length: 100 }, (_, i) => ({\n  value: Math.random() * 100,\n  id: i + 1,\n}));\n\nchart.options({\n  type: 'point',\n  data,\n  scale: {\n    color: {\n      type: 'quantize',\n      domain: [0, 100], // Custom data domain\n      range: [\n        '#e8f4f8',\n        '#d1e6f0',\n        '#a8d5e5',\n        '#7ec2da',\n        '#4ba3c3',\n        '#2385ab',\n        '#0a6c93',\n      ], // 7 colors corresponding to 6 equal-width intervals\n    },\n    y: {\n      nice: true,\n    },\n  },\n  encode: {\n    x: 'id',\n    y: 'value',\n    color: 'value', // Map values to color channel\n    shape: 'circle',\n    size: 10,\n  },\n  style: {\n    fillOpacity: 0.8,\n    stroke: '#fff',\n    lineWidth: 1,\n  },\n  legend: {\n    color: {\n      length: 300,\n      labelFormatter: '.0f', // Format legend labels as integers\n    },\n  },\n  axis: {\n    y: {\n      title: 'Value',\n    },\n    x: {\n      title: 'ID',\n    },\n  },\n});\n\nchart.render();\n",paraId:26,tocIndex:10},{value:"Here is a complete example using G2 declarative syntax (G2Spec) to configure the quantize scale:",paraId:27,tocIndex:11},{value:"const spec = {\n  type: 'cell',\n  width: 900,\n  height: 300,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/89c20fe8-0c6f-46c8-b36b-4cb653dba8ed.json',\n    transform: [{ type: 'map', callback: (d) => ({ salary: d }) }],\n  },\n  scale: {\n    color: {\n      type: 'quantize',\n      range: ['#eeeeee', '#ffc3ce', '#ff0d0d'], // Define three color intervals\n    },\n  },\n  legend: {\n    color: {\n      labelFormatter: '.0s', // Format legend labels\n    },\n  },\n  encode: {\n    y: (_, i) => (i % 5) + 1,\n    x: (_, i) => ((i / 5) | 0) + 1,\n    color: 'salary', // Map salary data to color channel\n  },\n  style: {\n    stroke: '#000',\n    inset: 2,\n  },\n};\n\n// Create a container element\nconst container = document.createElement('div');\n\n// Render using Chart\nconst chart = new G2.Chart(container);\nchart.options(spec);\nchart.render();\n",paraId:28,tocIndex:11},{value:"This example demonstrates how to use G2 declarative syntax to create a heatmap using the quantize scale, including the following features:",paraId:29,tocIndex:11},{value:"Use quantize scale to map continuous salary data to three discrete color intervals",paraId:30,tocIndex:11},{value:"Custom legend formatting, displaying values in abbreviated form (e.g., 10K instead of 10000)",paraId:30,tocIndex:11},{value:"Use functions to calculate cell row and column positions, creating a grid layout",paraId:30,tocIndex:11},{value:"Set cell borders and padding to improve readability",paraId:30,tocIndex:11},{value:"When using the quantize scale, pay attention to the following points:",paraId:31,tocIndex:12},{value:"Segment Boundary Calculation",paraId:32,tocIndex:12},{value:": Segment boundaries are determined by the minimum and maximum values of the data domain and the length of the range array. For example, for data domain [0, 100] and range length of 3, the boundary points are 33.33 and 66.67.",paraId:32,tocIndex:12},{value:"Scale Selection",paraId:33,tocIndex:12},{value:": Choose quantize if you want to segment evenly by value range; choose quantile if you want each segment to contain the same number of data points.",paraId:33,tocIndex:12},{value:"Data Domain Setting",paraId:34,tocIndex:12},{value:": You can customize the data domain by setting the ",paraId:34,tocIndex:12},{value:"domain",paraId:34,tocIndex:12},{value:" property, for example ",paraId:34,tocIndex:12},{value:"domain: [0, 100]",paraId:34,tocIndex:12},{value:". If not set, G2 will automatically calculate an appropriate data domain based on the data.",paraId:34,tocIndex:12},{value:"Data Distribution Consideration",paraId:35,tocIndex:12},{value:": The quantize scale is suitable for processing continuous numerical data with relatively uniform distribution. If the data distribution is very uneven (such as long-tail distribution), the quantile scale might be more appropriate.",paraId:35,tocIndex:12},{value:"Nice Ticks",paraId:36,tocIndex:12},{value:": When the ",paraId:36,tocIndex:12},{value:"nice",paraId:36,tocIndex:12},{value:" parameter is set to ",paraId:36,tocIndex:12},{value:"true",paraId:36,tocIndex:12},{value:', it extends the range of the data domain to make boundary values more "friendly" (usually integers or easily understandable values), which helps generate more readable tick marks and legend labels.',paraId:36,tocIndex:12}]},1344:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(82691);const t=[{value:"sqrt is a continuous non-linear scale that is essentially a ",paraId:0,tocIndex:0},{value:"pow",paraId:1,tocIndex:0},{value:" scale with a fixed exponent of ",paraId:0,tocIndex:0},{value:"0.5",paraId:0,tocIndex:0},{value:". The mapping function of the sqrt scale is ",paraId:0,tocIndex:0},{value:"y = x ^ 0.5 + b",paraId:0,tocIndex:0},{value:", where ",paraId:0,tocIndex:0},{value:"x",paraId:0,tocIndex:0},{value:" is the input data and ",paraId:0,tocIndex:0},{value:"b",paraId:0,tocIndex:0},{value:" is the offset.",paraId:0,tocIndex:0},{value:"The sqrt scale is a type of ",paraId:2,tocIndex:0},{value:"continuous scale",paraId:2,tocIndex:0},{value:" that is suitable for:",paraId:2,tocIndex:0},{value:"Data with large numerical range differences that need compression",paraId:3,tocIndex:0},{value:"Visualization scenarios that emphasize smaller numerical differences",paraId:3,tocIndex:0},{value:"Visual channels that require square root transformation, such as area mapping",paraId:3,tocIndex:0},{value:"Compared to linear scales, sqrt scales have a higher compression degree for large values and are suitable for handling data with large variation ranges.",paraId:4,tocIndex:0},{value:"The sqrt scale can make data more evenly distributed visually, especially for datasets with large numerical ranges.",paraId:5,tocIndex:1},{value:"Using sqrt scale effect",paraId:6,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { year: '1991', value: 1 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 9 },\n    { year: '1994', value: 16 },\n    { year: '1995', value: 25 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: { y: { type: 'sqrt' } },\n  children: [\n    { type: 'line', labels: [{ text: 'value', style: { dx: -10, dy: -12 } }] },\n    { type: 'point', style: { fill: 'white' }, tooltip: false },\n  ],\n});\n\nchart.render();\n",paraId:7,tocIndex:1},{value:"Without sqrt scale effect",paraId:8,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { year: '1991', value: 1 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 9 },\n    { year: '1994', value: 16 },\n    { year: '1995', value: 25 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  children: [\n    { type: 'line', labels: [{ text: 'value', style: { dx: -10, dy: -12 } }] },\n    { type: 'point', style: { fill: 'white' }, tooltip: false },\n  ],\n});\n\nchart.render();\n",paraId:9,tocIndex:1},{value:"Property",paraId:10,tocIndex:2},{value:"Description",paraId:10,tocIndex:2},{value:"Type",paraId:10,tocIndex:2},{value:"Default Value",paraId:10,tocIndex:2},{value:"Required",paraId:10,tocIndex:2},{value:"domain",paraId:10,tocIndex:2},{value:"Set the domain range of the data",paraId:10,tocIndex:2},{value:"number[]",paraId:10,tocIndex:2},{value:"Min-max range of input data",paraId:10,tocIndex:2},{value:"domainMin",paraId:10,tocIndex:2},{value:"Set the minimum value of the data domain",paraId:10,tocIndex:2},{value:"number",paraId:10,tocIndex:2},{value:"Minimum value of input data",paraId:10,tocIndex:2},{value:"domainMax",paraId:10,tocIndex:2},{value:"Set the maximum value of the data domain",paraId:10,tocIndex:2},{value:"number",paraId:10,tocIndex:2},{value:"Maximum value of input data",paraId:10,tocIndex:2},{value:"range",paraId:10,tocIndex:2},{value:"Set the value range for data mapping",paraId:10,tocIndex:2},{value:"number[]",paraId:10,tocIndex:2},{value:" | ",paraId:10,tocIndex:2},{value:"string[]",paraId:10,tocIndex:2},{value:"[0, 1]",paraId:10,tocIndex:2},{value:"rangeMin",paraId:10,tocIndex:2},{value:"Set the minimum value of the data mapping range",paraId:10,tocIndex:2},{value:"number | string",paraId:10,tocIndex:2},{value:"0",paraId:10,tocIndex:2},{value:"rangeMax",paraId:10,tocIndex:2},{value:"Set the maximum value of the data mapping range",paraId:10,tocIndex:2},{value:"number | string",paraId:10,tocIndex:2},{value:"1",paraId:10,tocIndex:2},{value:"unknown",paraId:10,tocIndex:2},{value:"The returned data for null values like ",paraId:10,tocIndex:2},{value:"undefined",paraId:10,tocIndex:2},{value:", ",paraId:10,tocIndex:2},{value:"NaN",paraId:10,tocIndex:2},{value:", ",paraId:10,tocIndex:2},{value:"null",paraId:10,tocIndex:2},{value:"any",paraId:10,tocIndex:2},{value:"undefined",paraId:10,tocIndex:2},{value:"tickCount",paraId:10,tocIndex:2},{value:"Set the recommended number of ticks to generate, tickCount is only a suggested value, not absolute",paraId:10,tocIndex:2},{value:"number",paraId:10,tocIndex:2},{value:"5",paraId:10,tocIndex:2},{value:"tickMethod",paraId:10,tocIndex:2},{value:"Set the method for generating ticks, commonly used for custom ticks",paraId:10,tocIndex:2},{value:"(min: number, max: number, count: number) => number[]",paraId:10,tocIndex:2},{value:"d3-ticks",paraId:10,tocIndex:2},{value:"round",paraId:10,tocIndex:2},{value:"Round the output values",paraId:10,tocIndex:2},{value:"boolean",paraId:10,tocIndex:2},{value:"false",paraId:10,tocIndex:2},{value:"clamp",paraId:10,tocIndex:2},{value:"Limit the mapped values to the range",paraId:10,tocIndex:2},{value:"boolean",paraId:10,tocIndex:2},{value:"false",paraId:10,tocIndex:2},{value:"nice",paraId:10,tocIndex:2},{value:"Extend the domain range to make the output ticks display more nicely",paraId:10,tocIndex:2},{value:"boolean",paraId:10,tocIndex:2},{value:"false",paraId:10,tocIndex:2},{value:"interpolate",paraId:10,tocIndex:2},{value:"Custom interpolation function",paraId:10,tocIndex:2},{value:"(a: number, b: number) => (t: number) => T",paraId:10,tocIndex:2},{value:"(a, b) => (t) => a * (1 - t) + b * t",paraId:10,tocIndex:2},{value:"exponent",paraId:10,tocIndex:2},{value:"Set the exponent, for sqrt scale, this value is fixed at ",paraId:10,tocIndex:2},{value:"0.5",paraId:10,tocIndex:2},{value:"number",paraId:10,tocIndex:2},{value:"0.5",paraId:10,tocIndex:2},{value:"Use sqrt scale to map point sizes in a scatter plot to make numerical differences more apparent.",paraId:11,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n  },\n  encode: {\n    x: 'GDP',\n    y: 'LifeExpectancy',\n    size: 'Population',\n    color: 'continent',\n    shape: 'point',\n  },\n  scale: { size: { type: 'sqrt', range: [4, 50] } },\n  style: { fillOpacity: 0.3, lineWidth: 1 },\n  legend: { size: false },\n});\n\nchart.render();\n",paraId:12,tocIndex:4},{value:"This is a bubble chart (point chart), where each point represents a country.",paraId:13,tocIndex:5},{value:"Data is fetched remotely and includes fields like GDP, life expectancy, population, etc.",paraId:13,tocIndex:5},{value:"The ",paraId:13,tocIndex:5},{value:"encode",paraId:13,tocIndex:5},{value:" section maps GDP to the x-axis, life expectancy to the y-axis, population to point size, and continent to color.",paraId:13,tocIndex:5},{value:"scale.size",paraId:13,tocIndex:5},{value:" uses ",paraId:13,tocIndex:5},{value:"sqrt",paraId:13,tocIndex:5},{value:" to map population through power transformation to point radius, with ",paraId:13,tocIndex:5},{value:"range: [4, 20]",paraId:13,tocIndex:5},{value:" controlling the minimum and maximum point sizes.",paraId:13,tocIndex:5},{value:"Visual styles set transparency and stroke width, with size legend disabled.",paraId:13,tocIndex:5},{value:"The chart is rendered with ",paraId:13,tocIndex:5},{value:"chart.render()",paraId:13,tocIndex:5},{value:".",paraId:13,tocIndex:5},{value:"Using sqrt scale for color gradient mapping",paraId:14,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  children: [\n    {\n      type: 'point',\n      data: {\n        type: 'fetch',\n        value:\n          'https://gw.alipayobjects.com/os/bmw-prod/56b6b137-e04e-4757-8af5-d75bafaef886.csv',\n      },\n      encode: { x: 'date', y: 'value', color: 'value', shape: 'point' },\n      scale: {\n        color: { type: 'sqrt', domain: [0, 1], range: ['#1689F1', '#1AC07D'] },\n      },\n      style: { stroke: '#000', strokeOpacity: 0.2 },\n      tooltip: {\n        items: [\n          {\n            channel: 'x',\n            name: 'year',\n            valueFormatter: (d) => d.getFullYear(),\n          },\n          { channel: 'y' },\n        ],\n      },\n    },\n    { type: 'lineY', data: [0], style: { stroke: '#000', strokeOpacity: 0.2 } },\n  ],\n});\nchart.render();\n",paraId:15,tocIndex:6},{value:"This is a point chart (scatter plot) with auxiliary lines.",paraId:16,tocIndex:7},{value:"The main component is a point chart with data also fetched remotely, including date and value fields.",paraId:16,tocIndex:7},{value:"The ",paraId:16,tocIndex:7},{value:"encode",paraId:16,tocIndex:7},{value:" section maps date to the x-axis, value to the y-axis, and value is also mapped to color.",paraId:16,tocIndex:7},{value:"scale.color",paraId:16,tocIndex:7},{value:" uses ",paraId:16,tocIndex:7},{value:"sqrt",paraId:16,tocIndex:7},{value:" to map value through power transformation to color gradient (blue to green), with ",paraId:16,tocIndex:7},{value:"domain: [0, 1]",paraId:16,tocIndex:7},{value:" specifying the input data range.",paraId:16,tocIndex:7},{value:"Points have black strokes with some transparency.",paraId:16,tocIndex:7},{value:"Tooltip is configured with custom year formatting.",paraId:16,tocIndex:7},{value:"A y=0 auxiliary line (lineY) is also added.",paraId:16,tocIndex:7},{value:"The chart is rendered with ",paraId:16,tocIndex:7},{value:"chart.render()",paraId:16,tocIndex:7},{value:".",paraId:16,tocIndex:7},{value:"In this example, data is mapped to color through the sqrt scale, which can better display regional differences compared to linear mapping.",paraId:17,tocIndex:7}]},78315:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(58471);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"threshold",paraId:0,tocIndex:0},{value:" scale is a ",paraId:0,tocIndex:0},{value:"discretizing scale",paraId:0,tocIndex:0},{value:" that divides a continuous numeric domain into intervals according to specified thresholds, mapping each interval to a discrete value in the range. It's commonly used for grouping, grading, and classifying continuous data for display.",paraId:0,tocIndex:0},{value:"Similar to the ",paraId:1,tocIndex:0},{value:"quantize",paraId:2,tocIndex:0},{value:" scale, threshold also maps continuous data to discrete values, but the difference is:",paraId:1,tocIndex:0},{value:"threshold scale requires manually specified split points (thresholds)",paraId:3,tocIndex:0},{value:"quantize scale automatically calculates equal-width intervals based on the data domain and range count",paraId:3,tocIndex:0},{value:"The difference from the ",paraId:4,tocIndex:0},{value:"quantile",paraId:5,tocIndex:0},{value:" scale is:",paraId:4,tocIndex:0},{value:"quantile scale segments based on quantiles of the data distribution, ensuring each interval contains the same number of data points",paraId:6,tocIndex:0},{value:"threshold scale segments based on manually specified split points, without considering data distribution",paraId:6,tocIndex:0},{value:"Using ",paraId:7,tocIndex:1},{value:"threshold",paraId:7,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: {\n    y: {\n      type: 'threshold',\n      range: [1, 0.5, 0],\n    },\n  },\n  children: [\n    { type: 'line', labels: [{ text: 'value', style: { dx: -10, dy: -12 } }] },\n    { type: 'point', style: { fill: 'white' }, tooltip: false },\n  ],\n});\n\nchart.render();\n",paraId:8,tocIndex:1},{value:"Without using ",paraId:9,tocIndex:1},{value:"threshold",paraId:9,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: { x: { range: [0, 1] }, y: { domainMin: 0, nice: true } },\n  children: [\n    { type: 'line', labels: [{ text: 'value', style: { dx: -10, dy: -12 } }] },\n    { type: 'point', style: { fill: 'white' }, tooltip: false },\n  ],\n});\n\nchart.render();\n",paraId:10,tocIndex:1},{value:"When continuous data needs to be segmented and categorized (such as grading, rating, interval coloring, etc.)",paraId:11,tocIndex:2},{value:"When numeric data needs to be discretized into a finite number of categories",paraId:11,tocIndex:2},{value:"Property",paraId:12,tocIndex:3},{value:"Description",paraId:12,tocIndex:3},{value:"Type",paraId:12,tocIndex:3},{value:"Default Value",paraId:12,tocIndex:3},{value:"Required",paraId:12,tocIndex:3},{value:"type",paraId:12,tocIndex:3},{value:"Scale type, must be 'threshold'",paraId:12,tocIndex:3},{value:"string",paraId:12,tocIndex:3},{value:"'threshold'",paraId:12,tocIndex:3},{value:"✓",paraId:12,tocIndex:3},{value:"domain",paraId:12,tocIndex:3},{value:"Array of threshold values for the domain",paraId:12,tocIndex:3},{value:"number[]",paraId:12,tocIndex:3},{value:"[0.5]",paraId:12,tocIndex:3},{value:"range",paraId:12,tocIndex:3},{value:"Array of values for the range (one more than domain length)",paraId:12,tocIndex:3},{value:"any[]",paraId:12,tocIndex:3},{value:"[0, 1]",paraId:12,tocIndex:3},{value:"unknown",paraId:12,tocIndex:3},{value:"Value returned when input is ",paraId:12,tocIndex:3},{value:"undefined",paraId:12,tocIndex:3},{value:", ",paraId:12,tocIndex:3},{value:"NaN",paraId:12,tocIndex:3},{value:", or ",paraId:12,tocIndex:3},{value:"null",paraId:12,tocIndex:3},{value:"any",paraId:12,tocIndex:3},{value:"undefined",paraId:12,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: {\n    y: {\n      type: 'threshold',\n      range: [1, 0.5, 0],\n    },\n  },\n  children: [\n    { type: 'line', labels: [{ text: 'value', style: { dx: -10, dy: -12 } }] },\n    { type: 'point', style: { fill: 'white' }, tooltip: false },\n  ],\n});\n\nchart.render();\n",paraId:13,tocIndex:5}]},87344:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(47881);const t=[{value:"The Time scale is a special type of continuous scale designed specifically for handling time series data. It maps time data (Date objects) to a continuous numerical range. The Time scale's mapping function is ",paraId:0},{value:"y = x.getTime() + b",paraId:0},{value:", where ",paraId:0},{value:"x",paraId:0},{value:" is the time value and ",paraId:0},{value:"b",paraId:0},{value:" is the offset.",paraId:0},{value:"The Time scale is a type of continuous scale primarily used for visualizing time series data. It can:",paraId:1,tocIndex:0},{value:"Automatically handle time data formatting and parsing",paraId:2,tocIndex:0},{value:"Provide flexible time tick generation mechanisms",paraId:2,tocIndex:0},{value:"Property",paraId:3,tocIndex:1},{value:"Description",paraId:3,tocIndex:1},{value:"Type",paraId:3,tocIndex:1},{value:"Default Value",paraId:3,tocIndex:1},{value:"Required",paraId:3,tocIndex:1},{value:"domain",paraId:3,tocIndex:1},{value:"Set the domain range of the data",paraId:3,tocIndex:1},{value:"Date[]",paraId:3,tocIndex:1},{value:"Min-max range of input data",paraId:3,tocIndex:1},{value:"domainMin",paraId:3,tocIndex:1},{value:"Set the minimum value of the data domain",paraId:3,tocIndex:1},{value:"Date",paraId:3,tocIndex:1},{value:"Minimum value of input data",paraId:3,tocIndex:1},{value:"domainMax",paraId:3,tocIndex:1},{value:"Set the maximum value of the data domain",paraId:3,tocIndex:1},{value:"Date",paraId:3,tocIndex:1},{value:"Maximum value of input data",paraId:3,tocIndex:1},{value:"range",paraId:3,tocIndex:1},{value:"Set the range of data mapping values",paraId:3,tocIndex:1},{value:"number[]",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"string[]",paraId:3,tocIndex:1},{value:"[0, 1]",paraId:3,tocIndex:1},{value:"rangeMin",paraId:3,tocIndex:1},{value:"Set the minimum value of the data mapping range",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"| ",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"0",paraId:3,tocIndex:1},{value:"rangeMax",paraId:3,tocIndex:1},{value:"Set the maximum value of the data mapping range",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"| ",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"1",paraId:3,tocIndex:1},{value:"unknown",paraId:3,tocIndex:1},{value:"Return value for ",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:", ",paraId:3,tocIndex:1},{value:"NaN",paraId:3,tocIndex:1},{value:", ",paraId:3,tocIndex:1},{value:"null",paraId:3,tocIndex:1},{value:" empty values",paraId:3,tocIndex:1},{value:"any",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"tickCount",paraId:3,tocIndex:1},{value:"Set recommended number of ticks to generate, tickCount is only a suggestion value",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"5",paraId:3,tocIndex:1},{value:"tickInterval",paraId:3,tocIndex:1},{value:"Set recommended interval between ticks, tickInterval has higher priority than tickCount",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"tickMethod",paraId:3,tocIndex:1},{value:"Set the method for generating ticks, commonly used for custom ticks",paraId:3,tocIndex:1},{value:"(min: number, max: number, count: number) => number[]",paraId:3,tocIndex:1},{value:"d3Time",paraId:3,tocIndex:1},{value:"round",paraId:3,tocIndex:1},{value:"Round output values",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"clamp",paraId:3,tocIndex:1},{value:"Limit mapping values to the range",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"nice",paraId:3,tocIndex:1},{value:"Extend domain range to make tick display more friendly",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"mask",paraId:3,tocIndex:1},{value:"Set time display format, using ",paraId:3,tocIndex:1},{value:"fetcha",paraId:3,tocIndex:1},{value:" under the hood",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"utc",paraId:3,tocIndex:1},{value:"Whether to use UTC time",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"interpolate",paraId:3,tocIndex:1},{value:"Custom interpolation function",paraId:3,tocIndex:1},{value:"(a: number, b: number) => (t: number) => T",paraId:3,tocIndex:1},{value:"(a, b) => (t) => a * (1 - t) + b * t",paraId:3,tocIndex:1},{value:"type TickMethod = (min: number, max: number, count: number) => number[];\n",paraId:4,tocIndex:3},{value:"Used to customize time tick generation method, receives minimum value, maximum value, and expected number of ticks, returns an array of times.",paraId:5,tocIndex:3},{value:"type Interpolate = (a: number, b: number) => (t: number) => T;\n",paraId:6,tocIndex:4},{value:"Used to customize interpolation method between two time values, defaults to linear interpolation.",paraId:7,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  {\n    time: '2015-11-19',\n    start: 8.18,\n    max: 8.33,\n    min: 7.98,\n    end: 8.32,\n    volumn: 1810,\n    money: 14723.56,\n  },\n  {\n    time: '2015-11-18',\n    start: 8.37,\n    max: 8.6,\n    min: 8.03,\n    end: 8.09,\n    volumn: 2790.37,\n    money: 23309.19,\n  },\n  {\n    time: '2015-11-17',\n    start: 8.7,\n    max: 8.78,\n    min: 8.32,\n    end: 8.37,\n    volumn: 3729.04,\n    money: 31709.71,\n  },\n  {\n    time: '2015-11-16',\n    start: 8.18,\n    max: 8.69,\n    min: 8.05,\n    end: 8.62,\n    volumn: 3095.44,\n    money: 26100.69,\n  },\n  {\n    time: '2015-11-13',\n    start: 8.01,\n    max: 8.75,\n    min: 7.97,\n    end: 8.41,\n    volumn: 5815.58,\n    money: 48562.37,\n  },\n  {\n    time: '2015-11-12',\n    start: 7.76,\n    max: 8.18,\n    min: 7.61,\n    end: 8.15,\n    volumn: 4742.6,\n    money: 37565.36,\n  },\n  {\n    time: '2015-11-11',\n    start: 7.55,\n    max: 7.81,\n    min: 7.49,\n    end: 7.8,\n    volumn: 3133.82,\n    money: 24065.42,\n  },\n  {\n    time: '2015-11-10',\n    start: 7.5,\n    max: 7.68,\n    min: 7.44,\n    end: 7.57,\n    volumn: 2670.35,\n    money: 20210.58,\n  },\n  {\n    time: '2015-11-09',\n    start: 7.65,\n    max: 7.66,\n    min: 7.3,\n    end: 7.58,\n    volumn: 2841.79,\n    money: 21344.36,\n  },\n  {\n    time: '2015-11-06',\n    start: 7.52,\n    max: 7.71,\n    min: 7.48,\n    end: 7.64,\n    volumn: 2725.44,\n    money: 20721.51,\n  },\n  {\n    time: '2015-11-05',\n    start: 7.48,\n    max: 7.57,\n    min: 7.29,\n    end: 7.48,\n    volumn: 3520.85,\n    money: 26140.83,\n  },\n  {\n    time: '2015-11-04',\n    start: 7.01,\n    max: 7.5,\n    min: 7.01,\n    end: 7.46,\n    volumn: 3591.47,\n    money: 26285.52,\n  },\n  {\n    time: '2015-11-03',\n    start: 7.1,\n    max: 7.17,\n    min: 6.82,\n    end: 7,\n    volumn: 2029.21,\n    money: 14202.33,\n  },\n  {\n    time: '2015-11-02',\n    start: 7.09,\n    max: 7.44,\n    min: 6.93,\n    end: 7.17,\n    volumn: 3191.31,\n    money: 23205.11,\n  },\n  {\n    time: '2015-10-30',\n    start: 6.98,\n    max: 7.27,\n    min: 6.84,\n    end: 7.18,\n    volumn: 3522.61,\n    money: 25083.44,\n  },\n  {\n    time: '2015-10-29',\n    start: 6.94,\n    max: 7.2,\n    min: 6.8,\n    end: 7.05,\n    volumn: 2752.27,\n    money: 19328.44,\n  },\n  {\n    time: '2015-10-28',\n    start: 7.01,\n    max: 7.14,\n    min: 6.8,\n    end: 6.85,\n    volumn: 2311.11,\n    money: 16137.32,\n  },\n  {\n    time: '2015-10-27',\n    start: 6.91,\n    max: 7.31,\n    min: 6.48,\n    end: 7.18,\n    volumn: 3172.9,\n    money: 21827.3,\n  },\n  {\n    time: '2015-10-26',\n    start: 6.9,\n    max: 7.08,\n    min: 6.87,\n    end: 6.95,\n    volumn: 2769.31,\n    money: 19337.44,\n  },\n  {\n    time: '2015-10-23',\n    start: 6.71,\n    max: 6.85,\n    min: 6.58,\n    end: 6.79,\n    volumn: 2483.18,\n    money: 16714.31,\n  },\n  {\n    time: '2015-10-22',\n    start: 6.38,\n    max: 6.67,\n    min: 6.34,\n    end: 6.65,\n    volumn: 2225.88,\n    money: 14465.56,\n  },\n];\n\nchart\n  .data(data)\n  .encode('x', 'time')\n  .encode('color', (d) => {\n    const trend = Math.sign(d.start - d.end);\n    return trend > 0 ? 'Decline' : trend === 0 ? 'Unchanged' : 'Rise';\n  })\n  .scale('x', {\n    compare: (a, b) => new Date(a).getTime() - new Date(b).getTime(),\n  })\n  .scale('color', {\n    domain: ['Decline', 'Unchanged', 'Rise'],\n    range: ['#4daf4a', '#999999', '#e41a1c'],\n  });\n\nchart\n  .link()\n  .encode('y', ['min', 'max'])\n  .tooltip({\n    title: 'time',\n    items: [\n      { field: 'start', name: 'Open Price' },\n      { field: 'end', name: 'Close Price' },\n      { field: 'min', name: 'Low Price' },\n      { field: 'max', name: 'High Price' },\n    ],\n  });\n\nchart\n  .interval()\n  .encode('y', ['start', 'end'])\n  .style('fillOpacity', 1)\n  .style('stroke', (d) => {\n    if (d.start === d.end) return '#999999';\n  })\n  .axis('y', {\n    title: false,\n  })\n  .tooltip({\n    title: 'time',\n    items: [\n      { field: 'start', name: 'Open Price' },\n      { field: 'end', name: 'Close Price' },\n      { field: 'min', name: 'Low Price' },\n      { field: 'max', name: 'High Price' },\n    ],\n  });\n\nchart.render();\n",paraId:8,tocIndex:6},{value:"The above example demonstrates the implementation of a stock candlestick chart, which fully utilizes the characteristics of the Time scale. Here are explanations of the key parts:",paraId:9,tocIndex:7},{value:"Each data point contains multiple fields: ",paraId:10,tocIndex:8},{value:"time",paraId:10,tocIndex:8},{value:" (date), ",paraId:10,tocIndex:8},{value:"start",paraId:10,tocIndex:8},{value:" (opening price), ",paraId:10,tocIndex:8},{value:"max",paraId:10,tocIndex:8},{value:" (highest price), ",paraId:10,tocIndex:8},{value:"min",paraId:10,tocIndex:8},{value:" (lowest price), ",paraId:10,tocIndex:8},{value:"end",paraId:10,tocIndex:8},{value:" (closing price), as well as volume and amount. The data is arranged chronologically from October 22, 2015, to November 19, 2015.",paraId:10,tocIndex:8},{value:"chart.scale('x', {\n  compare: (a, b) => new Date(a).getTime() - new Date(b).getTime(),\n});\n",paraId:11,tocIndex:9},{value:"The key to this code is the custom comparison function, which converts string times to timestamps for comparison, ensuring data can be properly sorted. This is an important application of the Time scale, enabling it to handle date data in string format.",paraId:12,tocIndex:9},{value:"chart.encode('color', (d) => {\n  const trend = Math.sign(d.start - d.end);\n  return trend > 0 ? 'Decline' : trend === 0 ? 'Unchanged' : 'Rise';\n});\n",paraId:13,tocIndex:10},{value:"This function determines the color of each data point based on the relationship between opening and closing prices:",paraId:14,tocIndex:10},{value:"When opening price is greater than closing price (decline), use green",paraId:15,tocIndex:10},{value:"When opening price equals closing price (unchanged), use gray",paraId:15,tocIndex:10},{value:"When opening price is less than closing price (rise), use red",paraId:15,tocIndex:10},{value:"This example uses two chart elements to build a complete candlestick chart:",paraId:16,tocIndex:11},{value:"chart.link()",paraId:17,tocIndex:11},{value:": Draws lines from lowest to highest price (shadow lines of the candlestick chart)",paraId:17,tocIndex:11},{value:"chart.interval()",paraId:17,tocIndex:11},{value:": Draws rectangles from opening to closing price (body part of the candlestick chart)",paraId:17,tocIndex:11},{value:"Both chart elements share the same tooltip configuration, displaying complete price information when hovering with the mouse.",paraId:18,tocIndex:11},{value:"This example demonstrates typical applications of the Time scale in financial data visualization:",paraId:19,tocIndex:12},{value:"Handle sorting and formatting of time series data",paraId:20,tocIndex:12},{value:"Handle conversion from date strings to visual positions",paraId:20,tocIndex:12},{value:"Combine multiple chart elements to display complex time-related data",paraId:20,tocIndex:12},{value:"Through this approach, the Time scale makes creating stock analysis, economic trends, and other financial data visualizations simple and efficient.",paraId:21,tocIndex:12}]},50303:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(17059);const t=[{value:"In data visualization, ",paraId:0},{value:"State",paraId:0},{value:" is the core mechanism for implementing interactive feedback, highlighting, selection, and other effects. G2 provides a flexible and powerful state system that allows developers to configure different state styles for each mark in the chart, enabling various interactive scenarios such as mouse hover highlighting and click selection, greatly enhancing chart usability and expressiveness.",paraId:0},{value:"State style properties are consistent with the style properties supported by ",paraId:1},{value:"@antv/g",paraId:1},{value:", commonly including ",paraId:1},{value:"fill",paraId:1},{value:" (fill color), ",paraId:1},{value:"stroke",paraId:1},{value:" (stroke color), ",paraId:1},{value:"strokeWidth",paraId:1},{value:" (stroke width), ",paraId:1},{value:"opacity",paraId:1},{value:" (transparency), etc. For details, see ",paraId:1},{value:"Style",paraId:2},{value:".",paraId:1},{value:"Mouse hover highlighting data",paraId:3,tocIndex:0},{value:"Click to select/deselect data",paraId:3,tocIndex:0},{value:"Multi-dimensional interactive feedback (e.g., hover + select overlay)",paraId:3,tocIndex:0},{value:"Dynamic effects with animations for state transitions",paraId:3,tocIndex:0},{value:"Important Note: State Configuration Propagation Mechanism",paraId:4,tocIndex:1},{value:"In G2, state configuration propagation follows these rules:",paraId:5,tocIndex:1},{value:"When there is only one mark under a view, configuring state at the view level ",paraId:6,tocIndex:2},{value:"will take effect",paraId:6,tocIndex:2},{value:", and the state will automatically propagate to the child mark:",paraId:6,tocIndex:2},{value:"// ✅ With a single mark, view-level state configuration will take effect\nchart.options({\n  type: 'view',\n  state: { active: { backgroundFill: 'red', backgroundOpacity: 0.5 } }, // Will propagate to child mark\n  children: [\n    { type: 'line' }, // Will inherit the view's state configuration\n  ],\n});\n",paraId:7,tocIndex:2},{value:"When there are multiple marks under a view, view-level state ",paraId:8,tocIndex:3},{value:"will not take effect",paraId:8,tocIndex:3},{value:", and each mark needs to be configured individually:",paraId:8,tocIndex:3},{value:"// ❌ With multiple marks, view-level state will not propagate\nchart.options({\n  type: 'view',\n  state: { active: { fill: 'red' } }, // This configuration will not propagate to child marks\n  children: [{ type: 'line' }, { type: 'point' }],\n});\n\n// ✅ Correct: Configure state at each mark level individually\nchart.options({\n  type: 'view',\n  children: [\n    {\n      type: 'line',\n      state: { active: { stroke: 'red', strokeWidth: 2 } },\n    },\n    {\n      type: 'point',\n      state: { active: { fill: 'red', r: 6 } },\n    },\n  ],\n});\n",paraId:9,tocIndex:3},{value:"When using mark APIs directly (such as ",paraId:10,tocIndex:4},{value:"chart.line()",paraId:10,tocIndex:4},{value:"), state configuration takes effect at the mark level:",paraId:10,tocIndex:4},{value:"// ✅ Direct mark-level configuration\nchart.options({\n  type: 'line',\n  state: { active: { stroke: 'red', strokeWidth: 2 } },\n});\n",paraId:11,tocIndex:4},{value:"G2 supports configuring styles for different states at the mark level through the ",paraId:12,tocIndex:5},{value:"state",paraId:12,tocIndex:5},{value:" field. Common states include:",paraId:12,tocIndex:5},{value:"State Name",paraId:13,tocIndex:5},{value:"Description",paraId:13,tocIndex:5},{value:"Typical Scenario",paraId:13,tocIndex:5},{value:"active",paraId:13,tocIndex:5},{value:"Style when highlighted",paraId:13,tocIndex:5},{value:"Mouse hover",paraId:13,tocIndex:5},{value:"inactive",paraId:13,tocIndex:5},{value:"Style when not highlighted",paraId:13,tocIndex:5},{value:"Other non-highlighted elements",paraId:13,tocIndex:5},{value:"selected",paraId:13,tocIndex:5},{value:"Style when selected",paraId:13,tocIndex:5},{value:"Mouse click",paraId:13,tocIndex:5},{value:"unselected",paraId:13,tocIndex:5},{value:"Style when not selected",paraId:13,tocIndex:5},{value:"Other non-selected elements",paraId:13,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nconst state = {\n  selected: { fill: 'red' },\n  active: { fill: 'green', stroke: 'black', lineWidth: 1 },\n};\nchart.options({\n  type: 'interval',\n  data: [\n    { type: 'A', value: 30 },\n    { type: 'B', value: 50 },\n    { type: 'C', value: 20 },\n  ],\n  encode: { x: 'type', y: 'value' },\n  state: {\n    active: { fill: 'red', stroke: 'blue', strokeWidth: 2 },\n    inactive: { fill: '#aaa' },\n    selected: { fill: 'orange', stroke: 'black', strokeWidth: 2 },\n    unselected: { fill: '#eee' },\n  },\n  interaction: { elementHighlight: true, elementSelect: true },\n});\nchart.render();\n",paraId:14,tocIndex:7},{value:"State style properties support functions that dynamically return styles based on data:",paraId:15,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { type: 'A', value: 30 },\n    { type: 'B', value: 50 },\n    { type: 'C', value: 20 },\n  ],\n  encode: { x: 'type', y: 'value' },\n  state: {\n    active: {\n      fill: (d) => (d.value > 40 ? 'red' : 'blue'),\n    },\n  },\n  interaction: { elementHighlight: true },\n});\n\nchart.render();\n",paraId:16,tocIndex:8},{value:"G2 supports ",paraId:17,tocIndex:9},{value:"multiple states being active simultaneously",paraId:17,tocIndex:9},{value:". When the same property is configured by multiple states, the final effective style is chosen based on priority.",paraId:17,tocIndex:9},{value:"Priority order:",paraId:18,tocIndex:9},{value:"selected:   3\nunselected: 3\nactive:     2\ninactive:   2\ndefault:    1\n",paraId:19,tocIndex:9},{value:"selected",paraId:20,tocIndex:9},{value:"/",paraId:20,tocIndex:9},{value:"unselected",paraId:20,tocIndex:9},{value:" have higher priority, commonly used for click selection",paraId:20,tocIndex:9},{value:"active",paraId:20,tocIndex:9},{value:"/",paraId:20,tocIndex:9},{value:"inactive",paraId:20,tocIndex:9},{value:" have secondary priority, commonly used for hover highlighting",paraId:20,tocIndex:9},{value:"default",paraId:20,tocIndex:9},{value:" is the default style",paraId:20,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  data: [\n    { letter: 'A', frequency: 0.08167 },\n    { letter: 'B', frequency: 0.01492 },\n    { letter: 'C', frequency: 0.02782 },\n  ],\n  encode: { x: 'letter', y: 'frequency' },\n  state: {\n    selected: { fill: 'red' },\n    active: { fill: 'green', stroke: 'black', lineWidth: 1 },\n  },\n  interaction: { elementHighlight: true, elementSelect: true },\n});\n\nchart.render();\n",paraId:21,tocIndex:9},{value:"When hovering, the ",paraId:22,tocIndex:9},{value:"active",paraId:22,tocIndex:9},{value:" state takes effect, showing green color and black stroke",paraId:22,tocIndex:9},{value:"When clicked, both ",paraId:22,tocIndex:9},{value:"selected",paraId:22,tocIndex:9},{value:" and ",paraId:22,tocIndex:9},{value:"active",paraId:22,tocIndex:9},{value:" states are active, but ",paraId:22,tocIndex:9},{value:"selected",paraId:22,tocIndex:9},{value:" has higher priority, so the final fill color is red",paraId:22,tocIndex:9},{value:"G2 provides rich interactions that, combined with state styles, can achieve various interactive effects:",paraId:23,tocIndex:10},{value:"Name",paraId:24,tocIndex:10},{value:"Description",paraId:24,tocIndex:10},{value:"Typical States",paraId:24,tocIndex:10},{value:"brushAxisHighlight",paraId:24,tocIndex:10},{value:"Axis brush highlight",paraId:24,tocIndex:10},{value:"active/inactive",paraId:24,tocIndex:10},{value:"brushHighlight",paraId:24,tocIndex:10},{value:"Area brush highlight",paraId:24,tocIndex:10},{value:"active/inactive",paraId:24,tocIndex:10},{value:"brushXHighlight",paraId:24,tocIndex:10},{value:"X-axis brush highlight",paraId:24,tocIndex:10},{value:"active/inactive",paraId:24,tocIndex:10},{value:"brushYHighlight",paraId:24,tocIndex:10},{value:"Y-axis brush highlight",paraId:24,tocIndex:10},{value:"active/inactive",paraId:24,tocIndex:10},{value:"elementHighlight",paraId:24,tocIndex:10},{value:"Hover highlight",paraId:24,tocIndex:10},{value:"active/inactive",paraId:24,tocIndex:10},{value:"elementHighlightByColor",paraId:24,tocIndex:10},{value:"Highlight by color",paraId:24,tocIndex:10},{value:"active/inactive",paraId:24,tocIndex:10},{value:"elementHighlightByX",paraId:24,tocIndex:10},{value:"Highlight by X",paraId:24,tocIndex:10},{value:"active/inactive",paraId:24,tocIndex:10},{value:"legendHighlight",paraId:24,tocIndex:10},{value:"Legend highlight",paraId:24,tocIndex:10},{value:"active/inactive",paraId:24,tocIndex:10},{value:"elementSelect",paraId:24,tocIndex:10},{value:"Click selection",paraId:24,tocIndex:10},{value:"selected/unselected",paraId:24,tocIndex:10},{value:"elementSelectByColor",paraId:24,tocIndex:10},{value:"Select by color",paraId:24,tocIndex:10},{value:"selected/unselected",paraId:24,tocIndex:10},{value:"elementSelectByX",paraId:24,tocIndex:10},{value:"Select by X",paraId:24,tocIndex:10},{value:"selected/unselected",paraId:24,tocIndex:10},{value:"Using the ",paraId:25,tocIndex:12},{value:"elementHighlight",paraId:25,tocIndex:12},{value:" interaction plugin with ",paraId:25,tocIndex:12},{value:"active",paraId:25,tocIndex:12},{value:" and ",paraId:25,tocIndex:12},{value:"inactive",paraId:25,tocIndex:12},{value:" state styles to achieve mouse hover highlighting:",paraId:25,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { letter: 'A', frequency: 0.08167 },\n    { letter: 'B', frequency: 0.01492 },\n    { letter: 'C', frequency: 0.02782 },\n  ],\n  encode: { x: 'letter', y: 'frequency' },\n  state: {\n    active: { fill: 'red' },\n    inactive: { fill: '#aaa' },\n  },\n  interaction: { elementHighlight: true },\n});\n\nchart.render();\n",paraId:26,tocIndex:12},{value:"Effect Description",paraId:27,tocIndex:12},{value:":",paraId:27,tocIndex:12},{value:"When hovering over a bar, it applies the ",paraId:28,tocIndex:12},{value:"active",paraId:28,tocIndex:12},{value:" style, while other bars apply the ",paraId:28,tocIndex:12},{value:"inactive",paraId:28,tocIndex:12},{value:" style.",paraId:28,tocIndex:12},{value:"Using the ",paraId:29,tocIndex:13},{value:"elementSelect",paraId:29,tocIndex:13},{value:" interaction plugin with ",paraId:29,tocIndex:13},{value:"selected",paraId:29,tocIndex:13},{value:" and ",paraId:29,tocIndex:13},{value:"unselected",paraId:29,tocIndex:13},{value:" state styles to achieve click selection:",paraId:29,tocIndex:13},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  data: [\n    { letter: 'A', frequency: 0.08167 },\n    { letter: 'B', frequency: 0.01492 },\n    { letter: 'C', frequency: 0.02782 },\n  ],\n  encode: { x: 'letter', y: 'frequency' },\n  state: {\n    selected: { fill: 'orange', stroke: 'black', strokeWidth: 2 },\n    unselected: { fill: '#eee' },\n  },\n  interaction: { elementSelect: true },\n});\nchart.render();\n",paraId:30,tocIndex:13},{value:"Effect Description",paraId:31,tocIndex:13},{value:":",paraId:31,tocIndex:13},{value:"When clicking a bar, it applies the ",paraId:32,tocIndex:13},{value:"selected",paraId:32,tocIndex:13},{value:" style, while other bars apply the ",paraId:32,tocIndex:13},{value:"unselected",paraId:32,tocIndex:13},{value:" style.",paraId:32,tocIndex:13},{value:"Supports simultaneous highlighting and selection, commonly used in dashboards and BI reports:",paraId:33,tocIndex:14},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { type: 'A', value: 30 },\n    { type: 'B', value: 50 },\n    { type: 'C', value: 20 },\n  ],\n  encode: { x: 'type', y: 'value' },\n  state: {\n    active: { fill: 'yellow' },\n    inactive: { fill: '#eee' },\n    selected: { fill: 'orange', stroke: 'black', strokeWidth: 2 },\n    unselected: { fill: '#ccc' },\n  },\n  interaction: { elementHighlight: true, elementSelect: true },\n});\n\nchart.render();\n",paraId:34,tocIndex:14},{value:"State transitions can be combined with animations (such as fade in/out, scaling, etc.) to enhance the interactive experience. For details, see ",paraId:35,tocIndex:15},{value:"Animation System",paraId:36,tocIndex:15},{value:".",paraId:35,tocIndex:15},{value:"chart.options({\n  type: 'interval',\n  state: {\n    active: {\n      fill: 'red',\n      opacity: (d) => (d.value > 40 ? 1 : 0.5),\n    },\n  },\n  // Other configurations...\n});\n",paraId:37,tocIndex:15},{value:"Supports setting style properties as functions that dynamically return styles based on data:",paraId:38,tocIndex:17},{value:"chart.options({\n  type: 'interval',\n  state: {\n    active: {\n      fill: (d) => (d.value > 40 ? 'red' : 'blue'),\n    },\n  },\n  // Other configurations...\n});\n",paraId:39,tocIndex:17},{value:"State styles not taking effect?",paraId:40,tocIndex:18},{value:"\nCheck if interaction plugins (such as ",paraId:40,tocIndex:18},{value:"elementHighlight",paraId:40,tocIndex:18},{value:", ",paraId:40,tocIndex:18},{value:"elementSelect",paraId:40,tocIndex:18},{value:") are correctly configured, and ensure the ",paraId:40,tocIndex:18},{value:"state",paraId:40,tocIndex:18},{value:" configuration is correct.",paraId:40,tocIndex:18},{value:"Multiple state conflicts?",paraId:41,tocIndex:18},{value:"\nMake good use of the priority mechanism to avoid repeatedly configuring the same property in multiple high-priority states.",paraId:41,tocIndex:18},{value:"State styles conflicting with animations?",paraId:42,tocIndex:18},{value:"\nPay attention to animation configuration during state transitions to avoid visual anomalies caused by overlapping styles and animations.",paraId:42,tocIndex:18}]},16219:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(20459);const t=[{value:"Style",paraId:0},{value:" in G2 is primarily used to control the visual styling of marks, views, and components.",paraId:0},{value:"Marks can set their own styles as well as view styles:",paraId:1,tocIndex:0},{value:"({\n  type: 'interval',\n  style: {\n    // Own style\n    stroke: 'black',\n    strokeWidth: 2,\n  },\n  viewStyle: {\n    // View style\n    viewFill: 'red',\n    contentFill: 'yellow',\n  },\n});\n",paraId:2,tocIndex:0},{value:"// API\n// First approach\nchart\n  .interval()\n  .style('stroke', 'black')\n  .style('strokeWidth', 2)\n  .viewStyle('viewFill', 'red')\n  .viewStyle('contentFill', 'yellow');\n\n// Second approach\nchart\n  .interval()\n  .style({\n    stroke: 'black',\n    strokeWidth: 2,\n  })\n  .viewStyle({\n    viewFill: 'red',\n    contentFill: 'yellow',\n  });\n",paraId:3,tocIndex:0},{value:"Views can set their own styles:",paraId:4,tocIndex:0},{value:"({\n  type: 'view',\n  style: {\n    viewFill: 'red',\n    contentFill: 'yellow',\n  },\n});\n",paraId:5,tocIndex:0},{value:"// API\n// First approach\nchart.style('viewFill', 'red').style('contentFill', 'yellow');\n\n// Second approach\nchart.style({\n  viewFill: 'red',\n  contentFill: 'yellow',\n});\n",paraId:6,tocIndex:0},{value:"All chart components can also set styles, for example legends:",paraId:7,tocIndex:0},{value:"({\n  type: 'interval',\n  legend: {\n    color: {\n      // Legend item marker styles (categorical legend)\n      itemMarkerFill: '#5B8FF9',\n      itemMarkerStroke: '#333',\n      itemMarkerStrokeOpacity: 0.8,\n      \n      // Legend item label styles (categorical legend)\n      itemLabelFontSize: 12,\n      itemLabelFill: '#666',\n      itemLabelFontFamily: 'sans-serif',\n    },\n  },\n});\n",paraId:8,tocIndex:0},{value:"In addition to setting visual properties through ",paraId:9,tocIndex:1},{value:"mark.encode",paraId:9,tocIndex:1},{value:", they can also be set through ",paraId:9,tocIndex:1},{value:"mark.style",paraId:9,tocIndex:1},{value:". The main differences between the two are:",paraId:9,tocIndex:1},{value:"Channels set by ",paraId:10,tocIndex:1},{value:"mark.encode",paraId:10,tocIndex:1},{value:" are special - either unique to the mark (like the ",paraId:10,tocIndex:1},{value:"src",paraId:10,tocIndex:1},{value:" channel for images) or have special logic (like the ",paraId:10,tocIndex:1},{value:"x",paraId:10,tocIndex:1},{value:" channel affecting x-axis generation).",paraId:10,tocIndex:1},{value:"mark.encode",paraId:10,tocIndex:1},{value:" tends to set data-related channels, while ",paraId:10,tocIndex:1},{value:"mark.style",paraId:10,tocIndex:1},{value:" tends to set data-independent channels. However, ",paraId:10,tocIndex:1},{value:"mark.style",paraId:10,tocIndex:1},{value:" also supports callbacks for data-driven channels.",paraId:10,tocIndex:1},{value:"For the ",paraId:11,tocIndex:2},{value:"shape",paraId:11,tocIndex:2},{value:" property, it can be configured through either ",paraId:11,tocIndex:2},{value:"encode.shape",paraId:11,tocIndex:2},{value:" or ",paraId:11,tocIndex:2},{value:"style.shape",paraId:11,tocIndex:2},{value:". The difference is:",paraId:11,tocIndex:2},{value:"Configure through ",paraId:12,tocIndex:2},{value:"encode.shape",paraId:12,tocIndex:2},{value:" (Recommended)",paraId:12,tocIndex:2},{value:":",paraId:12,tocIndex:2},{value:"Supports data-driven configuration, allowing dynamic selection of different shapes based on data",paraId:13,tocIndex:2},{value:"Participates in scale creation and can interact through legends",paraId:13,tocIndex:2},{value:"Has higher priority and will override ",paraId:13,tocIndex:2},{value:"style.shape",paraId:13,tocIndex:2},{value:" settings",paraId:13,tocIndex:2},{value:"Configure through ",paraId:14,tocIndex:2},{value:"style.shape",paraId:14,tocIndex:2},{value:":",paraId:14,tocIndex:2},{value:"Supports static values or callback functions for data-driven implementation",paraId:15,tocIndex:2},{value:"Does not participate in scale creation and will not generate legends",paraId:15,tocIndex:2},{value:"Takes effect when ",paraId:15,tocIndex:2},{value:"encode.shape",paraId:15,tocIndex:2},{value:" is not set",paraId:15,tocIndex:2},{value:"Configure hollow bar chart",paraId:16,tocIndex:3},{value:":",paraId:16,tocIndex:3},{value:"// Method 1: Through encode.shape\nchart.options({\n  type: 'interval',\n  encode: {\n    x: 'category',\n    y: 'value',\n    shape: 'hollow', // Configure as hollow rectangle\n  },\n});\n\n// Method 2: Through style.shape\nchart.options({\n  type: 'interval',\n  encode: {\n    x: 'category',\n    y: 'value',\n  },\n  style: {\n    shape: 'hollow', // Configure as hollow rectangle\n  },\n});\n",paraId:17,tocIndex:3},{value:"Shape types supported by different marks:",paraId:18,tocIndex:3},{value:"interval",paraId:19,tocIndex:3},{value:": ",paraId:19,tocIndex:3},{value:"rect",paraId:19,tocIndex:3},{value:" (solid rectangle), ",paraId:19,tocIndex:3},{value:"hollow",paraId:19,tocIndex:3},{value:" (hollow rectangle), ",paraId:19,tocIndex:3},{value:"funnel",paraId:19,tocIndex:3},{value:" (funnel shape), ",paraId:19,tocIndex:3},{value:"pyramid",paraId:19,tocIndex:3},{value:" (pyramid shape)",paraId:19,tocIndex:3},{value:"point",paraId:19,tocIndex:3},{value:": ",paraId:19,tocIndex:3},{value:"hollow",paraId:19,tocIndex:3},{value:" (hollow circle), ",paraId:19,tocIndex:3},{value:"point",paraId:19,tocIndex:3},{value:" (solid circle), ",paraId:19,tocIndex:3},{value:"hollowSquare",paraId:19,tocIndex:3},{value:" (hollow square), etc.",paraId:19,tocIndex:3},{value:"rect",paraId:19,tocIndex:3},{value:": ",paraId:19,tocIndex:3},{value:"rect",paraId:19,tocIndex:3},{value:" (solid rectangle), ",paraId:19,tocIndex:3},{value:"hollow",paraId:19,tocIndex:3},{value:" (hollow rectangle)",paraId:19,tocIndex:3},{value:"line",paraId:19,tocIndex:3},{value:": ",paraId:19,tocIndex:3},{value:"line",paraId:19,tocIndex:3},{value:" (straight line), ",paraId:19,tocIndex:3},{value:"smooth",paraId:19,tocIndex:3},{value:" (smooth curve), ",paraId:19,tocIndex:3},{value:"vh",paraId:19,tocIndex:3},{value:" (step line, vertical then horizontal connection), etc.",paraId:19,tocIndex:3},{value:"Here's a complete example of a hollow bar chart:",paraId:20,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    shape: 'hollow', // Configure as hollow rectangle\n  },\n  style: {\n    stroke: '#1890ff', // Set stroke color\n    strokeWidth: 2, // Set stroke width\n  },\n});\n\nchart.render();\n",paraId:21,tocIndex:3},{value:"You can also achieve the same effect through ",paraId:22,tocIndex:3},{value:"style.shape",paraId:22,tocIndex:3},{value:" configuration:",paraId:22,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre',\n    y: 'sold',\n  },\n  style: {\n    shape: 'hollow', // Configure as hollow rectangle through style\n    stroke: '#52c41a', // Set stroke color\n    strokeWidth: 2, // Set stroke width\n  },\n});\n\nchart.render();\n",paraId:23,tocIndex:3},{value:"Styles for different areas can be set using the ",paraId:24,tocIndex:4},{value:"${name}${Style}",paraId:24,tocIndex:4},{value:" format, where ",paraId:24,tocIndex:4},{value:"Style",paraId:24,tocIndex:4},{value:" represents all styles supported by G's rectangle, such as ",paraId:24,tocIndex:4},{value:"fill",paraId:24,tocIndex:4},{value:", ",paraId:24,tocIndex:4},{value:"stroke",paraId:24,tocIndex:4},{value:", etc. Note that the first letter should be capitalized to form camelCase.",paraId:24,tocIndex:4},{value:"view${Style}",paraId:25,tocIndex:4},{value:" - Set the style of the view area",paraId:25,tocIndex:4},{value:"plot${Style}",paraId:25,tocIndex:4},{value:" - Set the style of the plot area",paraId:25,tocIndex:4},{value:"main${Style}",paraId:25,tocIndex:4},{value:" - Set the style of the main area",paraId:25,tocIndex:4},{value:"content${Style}",paraId:25,tocIndex:4},{value:" - Set the style of the content area",paraId:25,tocIndex:4},{value:"For example, coloring different areas in the chart below:",paraId:26,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  height: 280,\n  inset: 10,\n  marginTop: 30,\n  marginLeft: 40,\n  marginBottom: 10,\n  marginRight: 20,\n  style: {\n    // Set view styles\n    viewFill: '#4e79a7',\n    plotFill: '#f28e2c',\n    mainFill: '#e15759',\n    contentFill: '#76b7b2',\n  },\n  children: [\n    {\n      type: 'point',\n      data: {\n        type: 'fetch',\n        value: 'https://assets.antv.antgroup.com/g2/commits.json',\n      },\n      encode: {\n        x: (d) => new Date(d.time).getUTCHours(),\n        y: (d) => new Date(d.time).getUTCDay(),\n        size: 'count',\n        shape: 'point',\n      },\n      transform: [{ type: 'group', size: 'sum' }, { type: 'sortY' }],\n      scale: { y: { type: 'point' } },\n      style: { shape: 'point', fill: '#59a14f' },\n      axis: {\n        x: { title: 'time (hours)', tickCount: 24 },\n        y: { title: 'time (day)', grid: true },\n      },\n      legend: false,\n    },\n  ],\n});\n\nchart.render();\n",paraId:27,tocIndex:4},{value:"Component styles refer to the visual styling configurations for various chart components such as axes, legends, labels, titles, etc. Each component provides rich styling configuration options, supporting fine-grained style control over component sub-elements.",paraId:28,tocIndex:5},{value:"Axes consist of multiple elements including title, axis line, ticks, tick labels, and grid lines, each of which can be styled independently:",paraId:29,tocIndex:6},{value:"({\n  type: 'interval',\n  axis: {\n    x: {\n      // Title styles\n      title: 'X Axis Title',\n      titleFontSize: 16,\n      titleFontFamily: 'Arial',\n      titleFontWeight: 'bold',\n      titleFill: '#333',\n      \n      // Axis line styles\n      line: true,\n      lineStroke: '#666',\n      lineLineWidth: 2,\n      \n      // Tick styles\n      tick: true,\n      tickStroke: '#999',\n      tickLineWidth: 1,\n      \n      // Tick label styles\n      labelFontSize: 12,\n      labelFill: '#666',\n      labelFontFamily: 'sans-serif',\n      \n      // Grid line styles\n      grid: true,\n      gridStroke: '#e6e6e6',\n      gridStrokeOpacity: 0.7,\n    },\n    y: {\n      // Y-axis style configuration similar...\n    },\n  },\n});\n",paraId:30,tocIndex:6},{value:"For more configuration on axis styles, see ",paraId:31,tocIndex:6},{value:"Axis",paraId:32,tocIndex:6},{value:".",paraId:31,tocIndex:6},{value:"Legends support both categorical and continuous legend types, both offering rich styling properties:",paraId:33,tocIndex:7},{value:"({\n  type: 'interval',\n  legend: {\n    color: {\n      // Title styles\n      title: 'Legend Title',\n      titleFontSize: 14,\n      titleFontFamily: 'Arial',\n      titleFill: '#333',\n      titleFontWeight: 'bold',\n      \n      // Legend item marker styles (categorical legend)\n      itemMarkerFill: '#5B8FF9',\n      itemMarkerStroke: '#333',\n      itemMarkerStrokeOpacity: 0.8,\n      \n      // Legend item label styles (categorical legend)\n      itemLabelFontSize: 12,\n      itemLabelFill: '#666',\n      itemLabelFontFamily: 'sans-serif',\n      \n      // Continuous legend styles\n      ribbon: {\n        fill: '#5B8FF9',\n        stroke: '#333',\n      },\n    },\n  },\n});\n",paraId:34,tocIndex:7},{value:"For more configuration on legend styles, see ",paraId:35,tocIndex:7},{value:"Legend",paraId:36,tocIndex:7},{value:".",paraId:35,tocIndex:7},{value:"Data labels support rich text styling configurations:",paraId:37,tocIndex:8},{value:"({\n  type: 'interval',\n  labels: [\n    {\n      text: 'value',\n      style: {\n        fontSize: 12,\n        fontFamily: 'Arial',\n        fontWeight: 'normal',\n        fill: '#333',\n        stroke: '#fff',\n        strokeOpacity: 0.8,\n        textAlign: 'center',\n        textBaseline: 'middle',\n        shadowColor: 'rgba(0,0,0,0.3)',\n        shadowBlur: 3,\n        dx: 0,\n        dy: -10,\n      },\n    },\n  ],\n});\n",paraId:38,tocIndex:8},{value:"For more configuration on label styles, see ",paraId:39,tocIndex:8},{value:"Label",paraId:40,tocIndex:8},{value:".",paraId:39,tocIndex:8},{value:"Chart titles include both main title and subtitle, both supporting detailed style configuration:",paraId:41,tocIndex:9},{value:"({\n  type: 'interval',\n  title: {\n    // Main title\n    title: 'Chart Main Title',\n    titleFontSize: 20,\n    titleFontFamily: 'Arial',\n    titleFontWeight: 'bold',\n    titleFill: '#333',\n    titleStroke: '#000',\n    titleLineWidth: 1,\n    \n    // Subtitle\n    subtitle: 'Chart Subtitle',\n    subtitleFontSize: 14,\n    subtitleFontFamily: 'Arial',\n    subtitleFontWeight: 'normal',\n    subtitleFill: '#666',\n    \n    // Layout configuration\n    align: 'center',\n    spacing: 8,\n  },\n});\n",paraId:42,tocIndex:9},{value:"For more configuration on title styles, see ",paraId:43,tocIndex:9},{value:"Title",paraId:44,tocIndex:9},{value:".",paraId:43,tocIndex:9},{value:"Tooltip styles are mainly customized through interaction configuration, supporting CSS styles, marker styles, and crosshair styles:",paraId:45,tocIndex:10},{value:"({\n  type: 'interval',\n  tooltip: {\n    title: 'name',\n    items: ['value'],\n  },\n  interaction: {\n    tooltip: {\n      // CSS style configuration\n      css: {\n        '.g2-tooltip': {\n          background: 'rgba(0,0,0,0.8)',\n          color: '#fff',\n          'font-size': '12px',\n          padding: '8px 12px',\n          'border-radius': '4px',\n          border: '1px solid #ccc',\n        },\n        '.g2-tooltip-title': {\n          'font-weight': 'bold',\n          'font-size': '14px',\n        },\n        '.g2-tooltip-list-item-value': {\n          'font-weight': 'normal',\n        },\n      },\n      \n      // Marker styles\n      marker: true,\n      markerFill: '#5B8FF9',\n      markerStroke: '#fff',\n      markerLineWidth: 2,\n      \n      // Crosshair styles\n      crosshairs: true,\n      crosshairsStroke: '#999',\n      crosshairsLineDash: [4, 4],\n    },\n  },\n});\n",paraId:46,tocIndex:10},{value:"For more configuration on tooltip styles, see ",paraId:47,tocIndex:10},{value:"Tooltip",paraId:48,tocIndex:10},{value:".",paraId:47,tocIndex:10},{value:"All component style configurations follow the same naming conventions:",paraId:49,tocIndex:11},{value:"Text styles",paraId:50,tocIndex:11},{value:": ",paraId:50,tocIndex:11},{value:"fontSize",paraId:50,tocIndex:11},{value:", ",paraId:50,tocIndex:11},{value:"fontFamily",paraId:50,tocIndex:11},{value:", ",paraId:50,tocIndex:11},{value:"fontWeight",paraId:50,tocIndex:11},{value:", ",paraId:50,tocIndex:11},{value:"fill",paraId:50,tocIndex:11},{value:", ",paraId:50,tocIndex:11},{value:"stroke",paraId:50,tocIndex:11},{value:", etc.",paraId:50,tocIndex:11},{value:"Shadow styles",paraId:50,tocIndex:11},{value:": ",paraId:50,tocIndex:11},{value:"shadowColor",paraId:50,tocIndex:11},{value:", ",paraId:50,tocIndex:11},{value:"shadowBlur",paraId:50,tocIndex:11},{value:", ",paraId:50,tocIndex:11},{value:"shadowOffsetX",paraId:50,tocIndex:11},{value:", ",paraId:50,tocIndex:11},{value:"shadowOffsetY",paraId:50,tocIndex:11},{value:"Opacity",paraId:50,tocIndex:11},{value:": ",paraId:50,tocIndex:11},{value:"opacity",paraId:50,tocIndex:11},{value:", ",paraId:50,tocIndex:11},{value:"fillOpacity",paraId:50,tocIndex:11},{value:", ",paraId:50,tocIndex:11},{value:"strokeOpacity",paraId:50,tocIndex:11},{value:"Position offset",paraId:50,tocIndex:11},{value:": ",paraId:50,tocIndex:11},{value:"dx",paraId:50,tocIndex:11},{value:", ",paraId:50,tocIndex:11},{value:"dy",paraId:50,tocIndex:11},{value:"Mouse interaction",paraId:50,tocIndex:11},{value:": ",paraId:50,tocIndex:11},{value:"cursor",paraId:50,tocIndex:11},{value:"This unified naming convention provides a consistent experience when configuring styles across different components.",paraId:51,tocIndex:11},{value:"G2 uses ",paraId:52,tocIndex:12},{value:"G",paraId:52,tocIndex:12},{value:" as its drawing engine. Style configurations for various graphics, such as ",paraId:52,tocIndex:12},{value:"line.style",paraId:52,tocIndex:12},{value:" for line charts and ",paraId:52,tocIndex:12},{value:"interval.style",paraId:52,tocIndex:12},{value:" for bar charts, as well as some component style configurations like ",paraId:52,tocIndex:12},{value:"label.style",paraId:52,tocIndex:12},{value:" and ",paraId:52,tocIndex:12},{value:"axis.line${style}",paraId:52,tocIndex:12},{value:", are directly passed through to G's drawing properties.",paraId:52,tocIndex:12},{value:"For user convenience, here's a brief introduction to commonly used drawing properties in G2:",paraId:53,tocIndex:12},{value:"Property",paraId:54,tocIndex:13},{value:"Description",paraId:54,tocIndex:13},{value:"Type",paraId:54,tocIndex:13},{value:"Default",paraId:54,tocIndex:13},{value:"Required",paraId:54,tocIndex:13},{value:"fill",paraId:54,tocIndex:13},{value:"Fill color of the graphic",paraId:54,tocIndex:13},{value:"string",paraId:54,tocIndex:13},{value:"fillOpacity",paraId:54,tocIndex:13},{value:"Fill transparency of the graphic",paraId:54,tocIndex:13},{value:"number",paraId:54,tocIndex:13},{value:"stroke",paraId:54,tocIndex:13},{value:"Stroke color of the graphic",paraId:54,tocIndex:13},{value:"string",paraId:54,tocIndex:13},{value:"strokeOpacity",paraId:54,tocIndex:13},{value:"Stroke transparency of the graphic",paraId:54,tocIndex:13},{value:"number",paraId:54,tocIndex:13},{value:"lineWidth",paraId:54,tocIndex:13},{value:"Width of the graphic's stroke",paraId:54,tocIndex:13},{value:"number",paraId:54,tocIndex:13},{value:"lineDash",paraId:54,tocIndex:13},{value:"Dashed stroke configuration. First value is the length of each dash, second is the gap. [0,0] means no stroke.",paraId:54,tocIndex:13},{value:"[number,number]",paraId:54,tocIndex:13},{value:"opacity",paraId:54,tocIndex:13},{value:"Overall transparency of the graphic",paraId:54,tocIndex:13},{value:"number",paraId:54,tocIndex:13},{value:"shadowColor",paraId:54,tocIndex:13},{value:"Shadow color of the graphic",paraId:54,tocIndex:13},{value:"string",paraId:54,tocIndex:13},{value:"shadowBlur",paraId:54,tocIndex:13},{value:"Gaussian blur coefficient for the graphic's shadow",paraId:54,tocIndex:13},{value:"number",paraId:54,tocIndex:13},{value:"shadowOffsetX",paraId:54,tocIndex:13},{value:"Horizontal distance of shadow from the graphic",paraId:54,tocIndex:13},{value:"number",paraId:54,tocIndex:13},{value:"shadowOffsetY",paraId:54,tocIndex:13},{value:"Vertical distance of shadow from the graphic",paraId:54,tocIndex:13},{value:"number",paraId:54,tocIndex:13},{value:"cursor",paraId:54,tocIndex:13},{value:"Mouse cursor style. Same as CSS cursor",paraId:54,tocIndex:13},{value:"string",paraId:54,tocIndex:13},{value:"default",paraId:54,tocIndex:13},{value:"Try using the full range of graphic style properties to configure the ",paraId:55,tocIndex:13},{value:"interval",paraId:55,tocIndex:13},{value:" graphic style of a basic bar chart in the code editor below:",paraId:55,tocIndex:13},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', height: 350 });\n\nchart.options({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 30 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold' },\n  style: {\n    fill: 'skyblue',\n    fillOpacity: 0.5,\n    stroke: 'black',\n    lineWidth: 1,\n    lineDash: [4, 5],\n    strokeOpacity: 0.7,\n    opacity: 0.9,\n    shadowColor: 'black',\n    shadowBlur: 10,\n    shadowOffsetX: 5,\n    shadowOffsetY: 5,\n    cursor: 'pointer',\n  },\n});\n\nchart.render();\n",paraId:56,tocIndex:13},{value:"Property",paraId:57,tocIndex:14},{value:"Description",paraId:57,tocIndex:14},{value:"Type",paraId:57,tocIndex:14},{value:"Default",paraId:57,tocIndex:14},{value:"Required",paraId:57,tocIndex:14},{value:"stroke",paraId:57,tocIndex:14},{value:"Line color",paraId:57,tocIndex:14},{value:"string",paraId:57,tocIndex:14},{value:"strokeOpacity",paraId:57,tocIndex:14},{value:"Line transparency",paraId:57,tocIndex:14},{value:"number",paraId:57,tocIndex:14},{value:"lineWidth",paraId:57,tocIndex:14},{value:"Line width",paraId:57,tocIndex:14},{value:"number",paraId:57,tocIndex:14},{value:"lineDash",paraId:57,tocIndex:14},{value:"Dashed line configuration. First value is dash length, second is gap length. [0,0] means no stroke.",paraId:57,tocIndex:14},{value:"[number,number]",paraId:57,tocIndex:14},{value:"opacity",paraId:57,tocIndex:14},{value:"Overall transparency",paraId:57,tocIndex:14},{value:"number",paraId:57,tocIndex:14},{value:"shadowColor",paraId:57,tocIndex:14},{value:"Shadow color",paraId:57,tocIndex:14},{value:"string",paraId:57,tocIndex:14},{value:"shadowBlur",paraId:57,tocIndex:14},{value:"Gaussian blur coefficient",paraId:57,tocIndex:14},{value:"number",paraId:57,tocIndex:14},{value:"shadowOffsetX",paraId:57,tocIndex:14},{value:"Horizontal distance of shadow from the graphic",paraId:57,tocIndex:14},{value:"number",paraId:57,tocIndex:14},{value:"shadowOffsetY",paraId:57,tocIndex:14},{value:"Vertical distance of shadow from the graphic",paraId:57,tocIndex:14},{value:"number",paraId:57,tocIndex:14},{value:"cursor",paraId:57,tocIndex:14},{value:"Mouse cursor style. Same as CSS cursor",paraId:57,tocIndex:14},{value:"string",paraId:57,tocIndex:14},{value:"default",paraId:57,tocIndex:14},{value:"Try using the full range of line style properties to configure the ",paraId:58,tocIndex:14},{value:"line",paraId:58,tocIndex:14},{value:" style of a basic line chart in the code editor below:",paraId:58,tocIndex:14},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', height: 350 });\n\nchart.options({\n  type: 'line',\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: { x: { range: [0, 1] }, y: { domainMin: 0, nice: true } },\n  style: {\n    stroke: 'skyblue',\n    strokeOpacity: 0.9,\n    lineWidth: 4,\n    lineDash: [4, 8],\n    opacity: 0.9,\n    shadowColor: '#d3d3d3',\n    shadowBlur: 10,\n    shadowOffsetX: 10,\n    shadowOffsetY: 10,\n    cursor: 'pointer',\n  },\n});\n\nchart.render();\n",paraId:59,tocIndex:14},{value:"Similarly, we can configure axis grid lines in the same way:",paraId:60,tocIndex:14},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: { x: { range: [0, 1] }, y: { domainMin: 0, nice: true } },\n  axis: {\n    y: {\n      grid: true,\n      gridStroke: 'red',\n      gridStrokeOpacity: 0.5,\n      gridLineWidth: 2,\n      gridLineDash: [2, 4],\n    },\n  },\n});\n\nchart.render();\n",paraId:61,tocIndex:14},{value:"Property",paraId:62,tocIndex:15},{value:"Description",paraId:62,tocIndex:15},{value:"Type",paraId:62,tocIndex:15},{value:"Default",paraId:62,tocIndex:15},{value:"Required",paraId:62,tocIndex:15},{value:"fontSize",paraId:62,tocIndex:15},{value:"Font size",paraId:62,tocIndex:15},{value:"number",paraId:62,tocIndex:15},{value:"fontFamily",paraId:62,tocIndex:15},{value:"Font family",paraId:62,tocIndex:15},{value:"string",paraId:62,tocIndex:15},{value:"fontWeight",paraId:62,tocIndex:15},{value:"Font weight",paraId:62,tocIndex:15},{value:"number",paraId:62,tocIndex:15},{value:"lineHeight",paraId:62,tocIndex:15},{value:"Line height of text",paraId:62,tocIndex:15},{value:"number",paraId:62,tocIndex:15},{value:"textAlign",paraId:62,tocIndex:15},{value:"Text alignment",paraId:62,tocIndex:15},{value:"center",paraId:62,tocIndex:15},{value:" | ",paraId:62,tocIndex:15},{value:"end",paraId:62,tocIndex:15},{value:" | ",paraId:62,tocIndex:15},{value:"left",paraId:62,tocIndex:15},{value:" | ",paraId:62,tocIndex:15},{value:"right",paraId:62,tocIndex:15},{value:" | ",paraId:62,tocIndex:15},{value:"start",paraId:62,tocIndex:15},{value:"start",paraId:62,tocIndex:15},{value:"textBaseline",paraId:62,tocIndex:15},{value:"Text baseline when drawing text",paraId:62,tocIndex:15},{value:"top",paraId:62,tocIndex:15},{value:" | ",paraId:62,tocIndex:15},{value:"middle",paraId:62,tocIndex:15},{value:" | ",paraId:62,tocIndex:15},{value:"bottom",paraId:62,tocIndex:15},{value:" | ",paraId:62,tocIndex:15},{value:"alphabetic",paraId:62,tocIndex:15},{value:" | ",paraId:62,tocIndex:15},{value:"hanging",paraId:62,tocIndex:15},{value:"bottom",paraId:62,tocIndex:15},{value:"fill",paraId:62,tocIndex:15},{value:"Text fill color",paraId:62,tocIndex:15},{value:"string",paraId:62,tocIndex:15},{value:"fillOpacity",paraId:62,tocIndex:15},{value:"Text fill transparency",paraId:62,tocIndex:15},{value:"number",paraId:62,tocIndex:15},{value:"stroke",paraId:62,tocIndex:15},{value:"Text stroke color",paraId:62,tocIndex:15},{value:"string",paraId:62,tocIndex:15},{value:"lineWidth",paraId:62,tocIndex:15},{value:"Text stroke width",paraId:62,tocIndex:15},{value:"number",paraId:62,tocIndex:15},{value:"lineDash",paraId:62,tocIndex:15},{value:"Dashed stroke configuration. First value is dash length, second is gap length. [0,0] means no stroke.",paraId:62,tocIndex:15},{value:"[number,number]",paraId:62,tocIndex:15},{value:"strokeOpacity",paraId:62,tocIndex:15},{value:"Stroke transparency",paraId:62,tocIndex:15},{value:"number",paraId:62,tocIndex:15},{value:"opacity",paraId:62,tocIndex:15},{value:"Overall text transparency",paraId:62,tocIndex:15},{value:"number",paraId:62,tocIndex:15},{value:"shadowColor",paraId:62,tocIndex:15},{value:"Text shadow color",paraId:62,tocIndex:15},{value:"string",paraId:62,tocIndex:15},{value:"shadowBlur",paraId:62,tocIndex:15},{value:"Gaussian blur coefficient for text shadow",paraId:62,tocIndex:15},{value:"number",paraId:62,tocIndex:15},{value:"shadowOffsetX",paraId:62,tocIndex:15},{value:"Horizontal distance of shadow from text",paraId:62,tocIndex:15},{value:"number",paraId:62,tocIndex:15},{value:"shadowOffsetY",paraId:62,tocIndex:15},{value:"Vertical distance of shadow from text",paraId:62,tocIndex:15},{value:"number",paraId:62,tocIndex:15},{value:"cursor",paraId:62,tocIndex:15},{value:"Mouse cursor style. Same as CSS cursor",paraId:62,tocIndex:15},{value:"string",paraId:62,tocIndex:15},{value:"default",paraId:62,tocIndex:15},{value:"dx",paraId:62,tocIndex:15},{value:"Horizontal offset of text",paraId:62,tocIndex:15},{value:"number",paraId:62,tocIndex:15},{value:"0",paraId:62,tocIndex:15},{value:"dy",paraId:62,tocIndex:15},{value:"Vertical offset of text",paraId:62,tocIndex:15},{value:"number",paraId:62,tocIndex:15},{value:"0",paraId:62,tocIndex:15},{value:"Try using the full range of text style properties to configure the center text style of a liquid chart in the code editor below:",paraId:63,tocIndex:15},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 350,\n});\n\nchart.options({\n  type: 'liquid',\n  autoFit: true,\n  data: 0.581,\n  style: {\n    waveLength: 50,\n    contentText: 'center text',\n    outlineBorder: 4,\n    outlineDistance: 8,\n    // Drawing properties\n    contentFontSize: 30,\n    contentFontFamily: 'sans-serif',\n    contentFontWeight: 500,\n    contentLineHeight: 20,\n    contentTextAlign: 'center',\n    contentTextBaseline: 'middle',\n    contentFill: '#fff',\n    contentFillOpacity: 0.9,\n    contentStroke: 'yellow',\n    contentStrokeOpacity: 0.9,\n    contentLineWidth: 2,\n    contentLineDash: [4, 8],\n    contentOpacity: 1,\n    contentShadowColor: '#d3d3d3',\n    contentShadowBlur: 10,\n    contentShadowOffsetX: 10,\n    contentShadowOffsetY: 10,\n    contentCursor: 'pointer',\n    contentDx: 10,\n    contentDy: 10,\n  },\n});\n\nchart.render();\n",paraId:64,tocIndex:15},{value:"Similarly, we can configure title text styles in the same way:",paraId:65,tocIndex:15},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'line',\n  data: [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  scale: { x: { range: [0, 1] }, y: { domainMin: 0, nice: true } },\n  title: {\n    size: 30,\n    title: \"I am a title\",\n    align: 'center',\n    spacing: 4,\n\n    // Drawing properties\n    titleFontSize: 30,\n    titleFontFamily: 'sans-serif',\n    titleFontWeight: 500,\n    titleLineHeight: 30,\n    titleTextAlign: 'center',\n    titleTextBaseline: 'middle',\n    titleFill: '#fff',\n    titleFillOpacity: 0.9,\n    titleStroke: 'yellow',\n    titleStrokeOpacity: 0.9,\n    titleLineWidth: 1,\n    titleLineDash: [1, 2],\n    titleOpacity: 1,\n    titleShadowColor: '#d3d3d3',\n    titleShadowBlur: 10,\n    titleShadowOffsetX: 10,\n    titleShadowOffsetY: 10,\n    titleCursor: 'pointer',\n    titleDx: 10,\n    titleDy: 10,\n  },\n});\n\nchart.render();\n",paraId:66,tocIndex:15},{value:"Note: ",paraId:67,tocIndex:16},{value:"l",paraId:67,tocIndex:16},{value:" indicates linear gradient usage. Green text represents variables that users can customize.",paraId:67,tocIndex:16},{value:"// Using gradient stroke, gradient angle 0, starting color #ffffff, midpoint color #7ec2f3, ending color #1890ff\nstroke: 'l(0) 0:#ffffff 0.5:#7ec2f3 1:#1890ff';\n// The following syntax is also supported\nstroke: 'linear-gradient(270deg, #ffffff 0%, #7ec2f3 50%, #1890ff 100%)';\n",paraId:68,tocIndex:16},{value:"Try configuring the fill color of an area chart as a linear gradient in the code editor below:",paraId:69,tocIndex:16},{value:"/**\n * A recreation of this demo: https://vega.github.io/vega-lite/examples/area_gradient.html\n */\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 350,\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/stocks.json',\n    transform: [{ type: 'filter', callback: (d) => d.symbol === 'GOOG' }],\n  },\n  children: [\n    {\n      type: 'area',\n      encode: { x: (d) => new Date(d.date), y: 'price' },\n      style: { fill: 'l(270) 0:#ffffff 0.5:#7ec2f3 1:#1890ff' },\n      // style: { fill: \"linear-gradient(270deg, #ffffff 0%, #7ec2f3 50%, #1890ff 100%)\" },\n    },\n  ],\n});\n\nchart.render();\n",paraId:70,tocIndex:16},{value:"You can also create a gradient gauge by configuring the ",paraId:71,tocIndex:16},{value:"color",paraId:71,tocIndex:16},{value:" channel scale in the code editor below:",paraId:71,tocIndex:16},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 350,\n});\n\nchart.options({\n  type: 'gauge',\n  data: {\n    value: { target: 159, total: 400, name: 'score', thresholds: [200, 400] },\n  },\n  scale: {\n    color: { range: ['l(0):0:#37b38e 1:#D9C652', 'l(0):0:#D9C652 1:#f96e3e'] },\n  },\n  style: {\n    textContent: (target, total) => `Score: ${target}\nRatio: ${(target / total) * 100}%`,\n  },\n  legend: false,\n});\n\nchart.render();\n",paraId:72,tocIndex:16},{value:"Note: ",paraId:73,tocIndex:17},{value:"r",paraId:73,tocIndex:17},{value:" indicates radial gradient usage. Green text represents variables that users can customize. The x, y, r values of the starting circle are all relative values in the 0-1 range.",paraId:73,tocIndex:17},{value:"// Using gradient fill, gradient starting circle center at the bounding box center of the filled object, radius 0.1 times (bounding box diagonal length / 2), starting color #ffffff, ending color #1890ff\nfill: 'r(0.5, 0.5, 0.1) 0:#ffffff 1:#1890ff';\n",paraId:74,tocIndex:17},{value:"Try configuring the fill color of a bar chart as a radial gradient in the code editor below:",paraId:75,tocIndex:17},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', height: 350 });\n\nchart.options({\n  type: 'interval',\n  height: 350,\n  data: [\n    { genre: 'Sports', sold: 30 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold' },\n  style: {\n    fill: 'r(0.5, 0.5, 0.1) 0:#ffffff 1:#1890ff',\n  },\n});\n\nchart.render();\n",paraId:76,tocIndex:17},{value:"Fill graphics with specific patterns. Pattern content can be images or Data URLs.",paraId:77,tocIndex:18},{value:"Note: ",paraId:78,tocIndex:18},{value:"p",paraId:78,tocIndex:18},{value:" indicates pattern usage. Green text represents variables that users can customize.",paraId:78,tocIndex:18},{value:"a",paraId:79,tocIndex:18},{value:": The pattern repeats in both horizontal and vertical directions",paraId:79,tocIndex:18},{value:"x",paraId:79,tocIndex:18},{value:": The pattern repeats only horizontally",paraId:79,tocIndex:18},{value:"y",paraId:79,tocIndex:18},{value:": The pattern repeats only vertically",paraId:79,tocIndex:18},{value:"n",paraId:79,tocIndex:18},{value:": The pattern displays only once (no repeat)",paraId:79,tocIndex:18},{value:"style: {\n  fill: 'p(a)https://gw.alipayobjects.com/mdn/rms_d314dd/afts/img/A*58XjQY1tO7gAAAAAAAAAAABkARQnAQ',\n}\n",paraId:80,tocIndex:18},{value:"Try configuring the fill color of a bar chart as a pattern in the code editor below:",paraId:81,tocIndex:18},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container', height: 350 });\n\nchart.options({\n  type: 'interval',\n  height: 350,\n  data: [\n    { genre: 'Sports', sold: 30 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold' },\n  style: {\n    fill: 'p(a)https://gw.alipayobjects.com/mdn/rms_d314dd/afts/img/A*58XjQY1tO7gAAAAAAAAAAABkARQnAQ',\n  },\n});\n\nchart.render();\n",paraId:82,tocIndex:18},{value:"In addition, G2 provides multiple ways to set patterns including ",paraId:83,tocIndex:18},{value:"built-in patterns",paraId:83,tocIndex:18},{value:" and ",paraId:83,tocIndex:18},{value:"G API custom patterns",paraId:83,tocIndex:18},{value:". For details, see ",paraId:83,tocIndex:18},{value:"Setting Patterns",paraId:84,tocIndex:18},{value:".",paraId:83,tocIndex:18}]},70316:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(67073);const t=[{value:"Academic style theme.",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  theme: 'academy',\n  paddingLeft: 80,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'sortX', by: 'y', reverse: true, slice: 6 },\n    { type: 'dodgeX' },\n  ],\n  axis: { y: { labelFormatter: '~s' }, x: { zIndex: 1 } },\n  interaction: {\n    tooltip: { shared: true },\n    elementHighlight: { background: true },\n  },\n});\n\nchart.render();\n",paraId:1,tocIndex:0}]},95775:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(6935);const t=[{value:"Classic theme.",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  paddingLeft: 80,\n  theme: 'classic',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'sortX', by: 'y', reverse: true, slice: 6 },\n    { type: 'dodgeX' },\n  ],\n  axis: { y: { labelFormatter: '~s' }, x: { zIndex: 1 } },\n  interaction: {\n    tooltip: { shared: true },\n    elementHighlight: { background: true },\n  },\n});\n\nchart.render();\n",paraId:1,tocIndex:0}]},63703:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(32948);const t=[{value:"Classic dark theme. When using a dark theme, it's usually necessary to configure additional view styles to ensure the chart has better visual effects on dark backgrounds.",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  theme: { type: 'classicDark', view: { viewFill: '#141414' } },\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Role-playing', sold: 120 },\n    { genre: 'Action', sold: 350 },\n    { genre: 'Simulation', sold: 150 },\n  ],\n  encode: { x: 'genre', y: 'sold', color: 'genre' },\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  theme: 'classicDark',\n  data: [\n    { category: 'A', value: 23 },\n    { category: 'B', value: 45 },\n    { category: 'C', value: 56 },\n    { category: 'D', value: 78 },\n    { category: 'E', value: 32 },\n  ],\n  encode: { x: 'category', y: 'value', color: 'category' },\n  axis: {\n    x: { grid: true, gridStroke: '#404040' },\n    y: { grid: true, gridStroke: '#404040' },\n  },\n  viewStyle: {\n    viewFill: '#1f1f1f',\n    plotFill: '#2a2a2a',\n    plotStroke: '#404040',\n    plotLineWidth: 1,\n  },\n});\n\nchart.render();\n",paraId:2,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'line',\n  theme: {\n    type: 'classicDark',\n    view: { viewFill: '#0f0f0f', plotFill: '#1a1a1a' },\n  },\n  data: [\n    { year: '2018', value: 30 },\n    { year: '2019', value: 40 },\n    { year: '2020', value: 35 },\n    { year: '2021', value: 50 },\n    { year: '2022', value: 49 },\n    { year: '2023', value: 70 },\n  ],\n  encode: { x: 'year', y: 'value' },\n  style: { stroke: '#60a5fa', lineWidth: 3 },\n  axis: {\n    x: {\n      grid: true,\n      gridStroke: '#fff',\n      gridLineWidth: 2,\n      labelFill: '#d1d5db',\n    },\n    y: {\n      grid: true,\n      gridStroke: '#fff',\n      gridLineWidth: 2,\n      labelFill: '#d1d5db',\n    },\n  },\n});\n\nchart.render();\n",paraId:3,tocIndex:2},{value:"If your webpage or application uses a dark theme, it's recommended to ensure the chart's background color coordinates with the container background color:",paraId:4,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\n// Simulate dark container background\nconst container = document.getElementById('container');\nif (container) {\n  container.style.backgroundColor = '#111827';\n  container.style.padding = '20px';\n  container.style.borderRadius = '8px';\n}\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  theme: { type: 'classicDark', view: { viewFill: '#111827' } },\n  data: [\n    { month: 'Jan', sales: 120 },\n    { month: 'Feb', sales: 140 },\n    { month: 'Mar', sales: 110 },\n    { month: 'Apr', sales: 180 },\n    { month: 'May', sales: 160 },\n    { month: 'Jun', sales: 200 },\n  ],\n  encode: { x: 'month', y: 'sales' },\n  style: {\n    fill: 'linear-gradient(to top, rgba(59, 130, 246, 0.3), rgba(59, 130, 246, 0.1))',\n    stroke: '#3b82f6',\n    lineWidth: 2,\n  },\n});\n\nchart.render();\n",paraId:5,tocIndex:3}]},47110:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(87751);const t=[{value:"In G2, ",paraId:0,tocIndex:0},{value:"Theme",paraId:0,tocIndex:0},{value:" is a set of predefined style configurations used to control the overall appearance of charts, including visual attributes such as colors, fonts, and margins. The theme system enables charts to maintain consistent visual style while providing flexible customization capabilities to meet design requirements in different scenarios.",paraId:0,tocIndex:0},{value:"The role of themes in G2 is mainly reflected in the following aspects:",paraId:1,tocIndex:0},{value:"Unified Visual Style",paraId:2,tocIndex:0},{value:": Provides consistent visual language for charts, ensuring that multiple charts within the same application maintain style consistency",paraId:2,tocIndex:0},{value:"Adaptation to Different Scenarios",paraId:2,tocIndex:0},{value:": Provides light and dark basic themes to adapt to different application backgrounds and usage environments",paraId:2,tocIndex:0},{value:"Simplified Configuration",paraId:2,tocIndex:0},{value:": Reduces repetitive style definition work through preset style configurations",paraId:2,tocIndex:0},{value:"Enhanced Readability",paraId:2,tocIndex:0},{value:": Improves chart readability and aesthetics through carefully designed color schemes and layouts",paraId:2,tocIndex:0},{value:"G2's theme system supports multi-level configuration, can be set at the view level or mark level, and supports partial overrides and complete customization.",paraId:3,tocIndex:0},{value:"G2 themes can be configured at different levels:",paraId:4,tocIndex:1},{value:"View Level",paraId:5,tocIndex:1},{value:": Applied to the entire chart or view",paraId:5,tocIndex:1},{value:"chart.options({\n  theme: { type: 'dark' },\n});\n\n// Or use API form\nchart.theme({ type: 'dark' });\n",paraId:6,tocIndex:1},{value:"Mark Level",paraId:7,tocIndex:1},{value:": Applied to specific graphic marks",paraId:7,tocIndex:1},{value:"chart.options({\n  type: 'interval',\n  theme: { color: 'steelblue' },\n});\n\n// Or use API form\nchart.interval().theme({ color: 'steelblue' });\n",paraId:8,tocIndex:1},{value:"When multiple levels of theme configuration exist simultaneously, mark-level configuration will override view-level configuration.",paraId:9,tocIndex:1},{value:"G2 has multiple built-in themes that can be switched using the ",paraId:10,tocIndex:2},{value:"type",paraId:10,tocIndex:2},{value:" property:",paraId:10,tocIndex:2},{value:"Theme Name",paraId:11,tocIndex:2},{value:"Description",paraId:11,tocIndex:2},{value:"Applicable Scenarios",paraId:11,tocIndex:2},{value:"light",paraId:11,tocIndex:2},{value:"Default light theme",paraId:11,tocIndex:2},{value:"Suitable for application interfaces with light backgrounds",paraId:11,tocIndex:2},{value:"dark",paraId:11,tocIndex:2},{value:"Dark theme",paraId:11,tocIndex:2},{value:"Suitable for application interfaces with dark backgrounds",paraId:11,tocIndex:2},{value:"classic",paraId:11,tocIndex:2},{value:"Classic theme",paraId:11,tocIndex:2},{value:"A variant based on light theme with classic color scheme",paraId:11,tocIndex:2},{value:"classicDark",paraId:11,tocIndex:2},{value:"Classic dark theme",paraId:11,tocIndex:2},{value:"A variant based on dark theme with classic color scheme",paraId:11,tocIndex:2},{value:"academy",paraId:11,tocIndex:2},{value:"Academic theme",paraId:11,tocIndex:2},{value:"Suitable for academic papers, reports and other scenarios",paraId:11,tocIndex:2},{value:"How to use built-in themes:",paraId:12,tocIndex:2},{value:"// Spec form\nchart.options({\n  theme: { type: 'dark' },\n});\n\n// API form\nchart.theme({ type: 'classicDark' });\n",paraId:13,tocIndex:2},{value:"Theme configuration options can be divided into four parts: basic configuration, view configuration, component configuration, and mark configuration.",paraId:14,tocIndex:3},{value:"Property",paraId:15,tocIndex:3},{value:"Description",paraId:15,tocIndex:3},{value:"Type",paraId:15,tocIndex:3},{value:"Default",paraId:15,tocIndex:3},{value:"Required",paraId:15,tocIndex:3},{value:"type",paraId:15,tocIndex:3},{value:"Specifies the theme type to use",paraId:15,tocIndex:3},{value:"'light'",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"'dark'",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"'classic'",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"'classicDark'",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"'academy'",paraId:15,tocIndex:3},{value:"'light'",paraId:15,tocIndex:3},{value:"padding",paraId:15,tocIndex:3},{value:"Chart inner padding",paraId:15,tocIndex:3},{value:"'auto'",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:"'auto'",paraId:15,tocIndex:3},{value:"margin",paraId:15,tocIndex:3},{value:"Chart outer margin",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:"16",paraId:15,tocIndex:3},{value:"inset",paraId:15,tocIndex:3},{value:"Spacing between chart graphics and axis",paraId:15,tocIndex:3},{value:"'auto'",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:"'auto'",paraId:15,tocIndex:3},{value:"color",paraId:15,tocIndex:3},{value:"Default color",paraId:15,tocIndex:3},{value:"string",paraId:15,tocIndex:3},{value:"Theme dependent",paraId:15,tocIndex:3},{value:"size",paraId:15,tocIndex:3},{value:"Default size",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:"1",paraId:15,tocIndex:3},{value:"category10",paraId:15,tocIndex:3},{value:"Categorical color scheme (10 colors)",paraId:15,tocIndex:3},{value:"string",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"string[]",paraId:15,tocIndex:3},{value:"Theme dependent",paraId:15,tocIndex:3},{value:"category20",paraId:15,tocIndex:3},{value:"Categorical color scheme (20 colors)",paraId:15,tocIndex:3},{value:"string",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"string[]",paraId:15,tocIndex:3},{value:"Theme dependent",paraId:15,tocIndex:3},{value:"view",paraId:15,tocIndex:3},{value:"View area configuration",paraId:15,tocIndex:3},{value:"view",paraId:16,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"enter",paraId:15,tocIndex:3},{value:"Enter animation configuration",paraId:15,tocIndex:3},{value:"animation",paraId:17,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"update",paraId:15,tocIndex:3},{value:"Update animation configuration",paraId:15,tocIndex:3},{value:"animation",paraId:18,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"exit",paraId:15,tocIndex:3},{value:"Exit animation configuration",paraId:15,tocIndex:3},{value:"animation",paraId:19,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"View area configuration options.",paraId:20,tocIndex:4},{value:"Property",paraId:21,tocIndex:4},{value:"Description",paraId:21,tocIndex:4},{value:"Type",paraId:21,tocIndex:4},{value:"Default",paraId:21,tocIndex:4},{value:"Required",paraId:21,tocIndex:4},{value:"viewFill",paraId:21,tocIndex:4},{value:"Fill color of entire view area",paraId:21,tocIndex:4},{value:"string",paraId:21,tocIndex:4},{value:"'transparent'",paraId:21,tocIndex:4},{value:"plotFill",paraId:21,tocIndex:4},{value:"Fill color of plot area",paraId:21,tocIndex:4},{value:"string",paraId:21,tocIndex:4},{value:"'transparent'",paraId:21,tocIndex:4},{value:"mainFill",paraId:21,tocIndex:4},{value:"Fill color of main area",paraId:21,tocIndex:4},{value:"string",paraId:21,tocIndex:4},{value:"'transparent'",paraId:21,tocIndex:4},{value:"contentFill",paraId:21,tocIndex:4},{value:"Fill color of content area",paraId:21,tocIndex:4},{value:"string",paraId:21,tocIndex:4},{value:"'transparent'",paraId:21,tocIndex:4},{value:"Animation configuration options.",paraId:22,tocIndex:5},{value:"Property",paraId:23,tocIndex:5},{value:"Description",paraId:23,tocIndex:5},{value:"Type",paraId:23,tocIndex:5},{value:"Default",paraId:23,tocIndex:5},{value:"Required",paraId:23,tocIndex:5},{value:"duration",paraId:23,tocIndex:5},{value:"Animation duration (milliseconds)",paraId:23,tocIndex:5},{value:"number",paraId:23,tocIndex:5},{value:"300",paraId:23,tocIndex:5},{value:"fill",paraId:23,tocIndex:5},{value:"Animation fill mode",paraId:23,tocIndex:5},{value:"'none'",paraId:23,tocIndex:5},{value:" | ",paraId:23,tocIndex:5},{value:"'forwards'",paraId:23,tocIndex:5},{value:" | ",paraId:23,tocIndex:5},{value:"'backwards'",paraId:23,tocIndex:5},{value:" | ",paraId:23,tocIndex:5},{value:"'both'",paraId:23,tocIndex:5},{value:"'both'",paraId:23,tocIndex:5},{value:"delay",paraId:23,tocIndex:5},{value:"Animation delay time (milliseconds)",paraId:23,tocIndex:5},{value:"number",paraId:23,tocIndex:5},{value:"0",paraId:23,tocIndex:5},{value:"G2 provides two ways to customize themes: partial override and complete customization.",paraId:24,tocIndex:6},{value:"The simplest customization approach is to override some configuration options when using a theme:",paraId:25,tocIndex:7},{value:"// Spec form\nchart.options({\n  theme: {\n    type: 'light', // Based on light theme\n    color: 'steelblue', // Override default color\n    margin: 20, // Override default margin\n  },\n});\n\n// API form\nchart.theme({\n  type: 'dark', // Based on dark theme\n  category10: ['#ff0000', '#00ff00', '#0000ff'], // Custom color scheme\n});\n",paraId:26,tocIndex:7},{value:"This approach is suitable for scenarios where only a small amount of style adjustment is needed, simple and direct.",paraId:27,tocIndex:7},{value:"For scenarios that require complete control over themes, you can create custom theme functions, then register and use them:",paraId:28,tocIndex:8},{value:"// 1. Define theme function\nfunction CustomTheme() {\n  // Can modify based on existing themes\n  const light = G2.Light();\n\n  // Return modified theme configuration\n  return {\n    ...light,\n    color: '#3366cc',\n    category10: [\n      '#3366cc',\n      '#dc3912',\n      '#ff9900',\n      '#109618',\n      '#990099',\n      '#0099c6',\n      '#dd4477',\n      '#66aa00',\n      '#b82e2e',\n      '#316395',\n    ],\n    // Other custom configurations...\n  };\n}\n\n// 2. Register theme\nG2.register('theme.custom', CustomTheme);\n\n// 3. Use custom theme\nchart.options({\n  theme: { type: 'custom' },\n});\n",paraId:29,tocIndex:8},{value:"This approach is suitable for scenarios that require comprehensive control over theme styles, providing maximum flexibility.",paraId:30,tocIndex:8},{value:"The following example shows how to use the built-in dark theme:",paraId:31,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  theme: {\n    type: 'dark',\n    view: {\n      viewFill: '#1f1f1f', // Set dark background\n    },\n  },\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'RPG', sold: 120 },\n    { genre: 'Action', sold: 350 },\n    { genre: 'Simulation', sold: 150 },\n  ],\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    color: 'genre',\n  },\n});\n\nchart.render();\n",paraId:32,tocIndex:10},{value:"The following example shows how to customize the default color:",paraId:33,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  theme: { color: '#8a2be2' }, // Set default color to purple\n  type: 'line',\n  data: [\n    { year: '2018', value: 30 },\n    { year: '2019', value: 40 },\n    { year: '2020', value: 45 },\n    { year: '2021', value: 50 },\n    { year: '2022', value: 56 },\n    { year: '2023', value: 70 },\n  ],\n  encode: {\n    x: 'year',\n    y: 'value',\n  },\n});\n\nchart.render();\n",paraId:34,tocIndex:11},{value:"The following example shows how to customize categorical color schemes:",paraId:35,tocIndex:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  theme: {\n    // Custom categorical color scheme\n    category10: [\n      '#ff9999',\n      '#99ff99',\n      '#9999ff',\n      '#ffff99',\n      '#ff99ff',\n      '#99ffff',\n      '#ffcc99',\n      '#99ccff',\n      '#ff9966',\n      '#66ff99',\n    ],\n  },\n  type: 'interval',\n  data: [\n    { category: 'A', value: 10 },\n    { category: 'B', value: 20 },\n    { category: 'C', value: 15 },\n    { category: 'D', value: 25 },\n    { category: 'E', value: 18 },\n  ],\n  encode: {\n    x: 'category',\n    y: 'value',\n    color: 'category',\n  },\n});\n\nchart.render();\n",paraId:36,tocIndex:12},{value:"The following example shows how to customize view area styles:",paraId:37,tocIndex:13},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  theme: {\n    view: {\n      viewFill: '#f5f5f5', // Set view background color\n      plotFill: '#ffffff', // Set plot area background color\n    },\n  },\n  type: 'point',\n  data: [\n    { x: 1, y: 4 },\n    { x: 2, y: 5 },\n    { x: 3, y: 7 },\n    { x: 4, y: 3 },\n    { x: 5, y: 6 },\n    { x: 6, y: 8 },\n    { x: 7, y: 5 },\n    { x: 8, y: 9 },\n    { x: 9, y: 6 },\n  ],\n  encode: {\n    x: 'x',\n    y: 'y',\n    shape: 'point',\n    size: 10,\n  },\n});\n\nchart.render();\n",paraId:38,tocIndex:13},{value:"For more theme-related examples, you can visit the ",paraId:39,tocIndex:13},{value:"Chart Examples - Theme",paraId:40,tocIndex:13},{value:" page.",paraId:39,tocIndex:13}]},32368:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(36154);const t=[{value:"bin",paraId:0,tocIndex:0},{value:" is an important function for data processing, whose main purpose is to divide continuous numerical data into discrete intervals (i.e., binning), thereby grouping the data. This operation is commonly used in data analysis and visualization to facilitate statistical analysis or display data distribution.",paraId:0,tocIndex:0},{value:"The core purpose of ",paraId:1,tocIndex:0},{value:"bin",paraId:1,tocIndex:0},{value:" is to perform binning operations on raw data according to specified rules, converting continuous data into categorical data with multiple discrete intervals. This is particularly important in data processing and building views like histograms. For example, when you need to generate multiple intervals based on data value ranges and count their frequencies, you can use ",paraId:1,tocIndex:0},{value:"bin",paraId:1,tocIndex:0},{value:".",paraId:1,tocIndex:0},{value:"Data binning for counting data frequency by intervals.",paraId:2,tocIndex:1},{value:"Building histogram views.",paraId:2,tocIndex:1},{value:"Converting continuous data to discrete data for easier analysis.",paraId:2,tocIndex:1},{value:"The following example shows how to create a binning chart, displaying the distribution of two rating systems' scores across different score intervals, allowing you to intuitively observe which intervals have more ratings and which have fewer.",paraId:3,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'rect', // Chart type is rectangle (histogram)\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/movies.json',\n  },\n  encode: {\n    x: 'IMDB Rating', // X-axis encodes IMDB Rating\n    y: 'Rotten Tomatoes Rating', // Y-axis encodes Rotten Tomatoes Rating\n  },\n  transform: [\n    {\n      type: 'bin', // Data transform type is binning\n      color: 'count', // Color encoding represents the number of data points in each bin\n    },\n  ],\n});\n\nchart.render();\n",paraId:4,tocIndex:1},{value:"Property",paraId:5,tocIndex:2},{value:"Description",paraId:5,tocIndex:2},{value:"Type",paraId:5,tocIndex:2},{value:"Default",paraId:5,tocIndex:2},{value:"thresholdsX",paraId:5,tocIndex:2},{value:"Number of bins for x-axis",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:"d3.thresholdScott",paraId:5,tocIndex:2},{value:"thresholdsY",paraId:5,tocIndex:2},{value:"Number of bins for y-axis",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:"d3.thresholdScott",paraId:5,tocIndex:2},{value:"[channel]",paraId:5,tocIndex:2},{value:"Aggregation method for channel data output to specific marks",paraId:5,tocIndex:2},{value:"channel",paraId:6,tocIndex:2},{value:"thresholdsX",paraId:7,tocIndex:3},{value:" and ",paraId:7,tocIndex:3},{value:"thresholdsY",paraId:7,tocIndex:3},{value:" are two very important configuration options for defining data binning, mainly used in two-dimensional data binning (such as grid charts or heatmaps). They control the binning (interval division) rules or quantities in the X and Y directions respectively, used to divide two-dimensional continuous data into discrete grids.",paraId:7,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nlet thresholdsX;\nlet thresholdsY;\nchart.options({\n  type: 'rect', // Chart type is rectangle (histogram)\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/movies.json',\n  },\n  encode: {\n    x: 'IMDB Rating', // X-axis encodes IMDB Rating\n    y: 'Rotten Tomatoes Rating', // Y-axis encodes Rotten Tomatoes Rating\n  },\n  transform: [\n    {\n      type: 'bin', // Data transform type is binning\n      color: 'count', // Color encoding represents the number of data points in each bin\n    },\n  ],\n});\n\n// Insert input boxes for thresholdsX and thresholdsY\nconst container = document.createElement('div');\nconst thresholdsX_Text = document.createElement('span');\nthresholdsX_Text.textContent = 'thresholdsX: ';\nconst thresholdsX_Input = document.createElement('input');\nthresholdsX_Input.setAttribute('type', 'number');\nthresholdsX_Input.addEventListener('input', (e) => {\n  thresholdsX = e.target.value;\n  chart.options({\n    transform: [\n      {\n        type: 'bin',\n        color: 'count',\n        thresholdsX,\n        thresholdsY,\n      },\n    ],\n  });\n  chart.render();\n});\n\nconst thresholdsY_Text = document.createElement('span');\nthresholdsY_Text.textContent = '　　thresholdsY: ';\nconst thresholdsY_Input = document.createElement('input');\nthresholdsY_Input.setAttribute('type', 'number');\nthresholdsY_Input.addEventListener('input', (e) => {\n  thresholdsY = e.target.value;\n  chart.options({\n    transform: [\n      {\n        type: 'bin',\n        color: 'count',\n        thresholdsX,\n        thresholdsY,\n      },\n    ],\n  });\n  chart.render();\n});\n\ncontainer.appendChild(thresholdsX_Text);\ncontainer.appendChild(thresholdsX_Input);\ncontainer.appendChild(thresholdsY_Text);\ncontainer.appendChild(thresholdsY_Input);\n\nconst node = chart.getContainer();\nnode.insertBefore(container, node.childNodes[0]);\n\nchart.render();\n",paraId:8,tocIndex:3},{value:"Theoretically, ",paraId:9,tocIndex:4},{value:"channel",paraId:9,tocIndex:4},{value:" can be set to all channel values. For details, please refer to the ",paraId:9,tocIndex:4},{value:"encode",paraId:10,tocIndex:4},{value:" documentation. All enumeration values are as follows:",paraId:9,tocIndex:4},{value:"type Channel =\n  | 'x'\n  | 'y'\n  | 'z'\n  | 'x1'\n  | 'y1'\n  | 'series'\n  | 'color'\n  | 'opacity'\n  | 'shape'\n  | 'size'\n  | 'key'\n  | 'groupKey'\n  | 'position'\n  | 'series'\n  | 'enterType'\n  | 'enterEasing'\n  | 'enterDuration'\n  | 'enterDelay'\n  | 'updateType'\n  | 'updateEasing'\n  | 'updateDuration'\n  | 'updateDelay'\n  | 'exitType'\n  | 'exitEasing'\n  | 'exitDuration'\n  | 'exitDelay'\n  | `position${number}`;\n",paraId:11,tocIndex:4},{value:"bin",paraId:12},{value:"opacity",paraId:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'rect',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/movies.json',\n  },\n  encode: {\n    x: 'IMDB Rating',\n    y: 'Rotten Tomatoes Rating',\n  },\n  transform: [\n    {\n      type: 'bin', // Data transform type is binning\n      opacity: 'count', // Opacity encoding represents the number of data points in each bin\n      thresholdsX: 10,\n      thresholdsY: 10,\n    },\n  ],\n});\n\nchart.render();\n",paraId:13,tocIndex:6},{value:"bin",paraId:12},{value:"size",paraId:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point', // Chart type is point\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/movies.json',\n  },\n  encode: {\n    x: 'IMDB Rating',\n    y: 'Rotten Tomatoes Rating',\n  },\n  transform: [\n    {\n      type: 'bin', // Data transform type is binning\n      size: 'count', // Size encoding represents the number of data points in each bin\n      thresholdsX: 10,\n      thresholdsY: 10,\n    },\n  ],\n});\n\nchart.render();\n",paraId:14,tocIndex:7}]},26389:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(37287);const t=[{value:"binX is an important function for binning data in the X channel. It is primarily used to divide continuous data into discrete intervals or groups according to specified rules, making the data easier to analyze and suitable for specific visualization scenarios (such as heatmaps, bar charts, grid charts, etc.).",paraId:0,tocIndex:0},{value:"Similar to bin, binX is specifically used for data binning in the X-axis direction, while bin typically handles two-dimensional (X and Y) or single-dimensional data. binX can be applied independently, binning only the data in the X channel without needing to process data in other dimensions.",paraId:1,tocIndex:0},{value:"Divide continuous X channel data into multiple discrete intervals: Based on the data range, generate discrete intervals (such as [0-10), [10-20), etc.) by specifying binning rules.",paraId:2,tocIndex:1},{value:"Transform original data format: Through binning processing, generate new fields (such as specifying output field names) to represent the interval to which the data belongs.",paraId:2,tocIndex:1},{value:"Facilitate statistical data distribution: Binned data can be directly used for visualization processing (such as counting the frequency or values within each interval).",paraId:2,tocIndex:1},{value:"Process X channel data dimension independently: When the Y channel does not need binning, binX can bin only the X channel data, flexibly adjusting data processing logic.",paraId:2,tocIndex:1},{value:"To bin the Y channel, use binX + transpose coordinate system.",paraId:3,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'rect',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/unemployment2.json',\n  },\n  encode: { x: 'rate' },\n  transform: [{ type: 'binX', y: 'count' }],\n});\n\nchart.render();\n",paraId:4,tocIndex:1},{value:"Property",paraId:5,tocIndex:2},{value:"Description",paraId:5,tocIndex:2},{value:"Type",paraId:5,tocIndex:2},{value:"Default",paraId:5,tocIndex:2},{value:"thresholds",paraId:5,tocIndex:2},{value:"Number of bins for x binning",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:"d3.thresholdScott",paraId:5,tocIndex:2},{value:"[channel]",paraId:5,tocIndex:2},{value:"Aggregation method for outputting data to mark channel",paraId:5,tocIndex:2},{value:"channel",paraId:6,tocIndex:2},{value:"binX",paraId:7,tocIndex:3},{value:" is a transformation operation specifically designed for binning (discretizing) continuous data in the X-axis direction. By configuring ",paraId:7,tocIndex:3},{value:"thresholdsX",paraId:7,tocIndex:3},{value:", you can explicitly specify the binning boundaries in the X-axis direction, enabling fine-grained control over the data.",paraId:7,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nlet thresholdsX;\nchart.options({\n  type: 'rect', // Chart type is rectangle (histogram)\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/movies.json',\n  },\n  encode: {\n    x: 'IMDB Rating', // X-axis encodes IMDB rating\n    y: 'Rotten Tomatoes Rating', // Y-axis encodes Rotten Tomatoes rating\n  },\n  transform: [\n    {\n      type: 'bin', // Data transformation type is binning\n      color: 'count', // Use color encoding to represent the number of data points in each bin\n    },\n  ],\n});\n\n// Insert thresholdsX input box\nconst container = document.createElement('div');\nconst thresholdsX_Text = document.createElement('span');\nthresholdsX_Text.textContent = 'thresholdsX: ';\nconst thresholdsX_Input = document.createElement('input');\nthresholdsX_Input.setAttribute('type', 'number');\nthresholdsX_Input.addEventListener('input', (e) => {\n  thresholdsX = e.target.value;\n  chart.options({\n    transform: [\n      {\n        type: 'bin',\n        color: 'count',\n        thresholdsX,\n        thresholdsY,\n      },\n    ],\n  });\n  chart.render();\n});\n\ncontainer.appendChild(thresholdsX_Text);\ncontainer.appendChild(thresholdsX_Input);\n\nconst node = chart.getContainer();\nnode.insertBefore(container, node.childNodes[0]);\n\nchart.render();\n",paraId:8,tocIndex:3},{value:"Theoretically, ",paraId:9,tocIndex:4},{value:"channel",paraId:9,tocIndex:4},{value:" can be set to all channel values. For details, please refer to the ",paraId:9,tocIndex:4},{value:"encode",paraId:10,tocIndex:4},{value:" documentation. All enumeration values are as follows:",paraId:9,tocIndex:4},{value:"type Channel =\n  | 'x'\n  | 'y'\n  | 'z'\n  | 'x1'\n  | 'y1'\n  | 'series'\n  | 'color'\n  | 'opacity'\n  | 'shape'\n  | 'size'\n  | 'key'\n  | 'groupKey'\n  | 'position'\n  | 'series'\n  | 'enterType'\n  | 'enterEasing'\n  | 'enterDuration'\n  | 'enterDelay'\n  | 'updateType'\n  | 'updateEasing'\n  | 'updateDuration'\n  | 'updateDelay'\n  | 'exitType'\n  | 'exitEasing'\n  | 'exitDuration'\n  | 'exitDelay'\n  | `position${number}`;\n",paraId:11,tocIndex:4},{value:"bin",paraId:12},{value:"opacity",paraId:12},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'rect',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n  },\n  encode: { x: 'weight', color: 'sex' },\n  transform: [\n    { type: 'binX', y: 'count' },\n    { type: 'stackY', orderBy: 'series' },\n  ],\n  style: { inset: 0.5 },\n});\n\nchart.render();\n",paraId:13,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst random = d3Random.randomPoisson(Math.pow(10, 2.6));\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'rect',\n  autoFit: true,\n  data: new Array(5000).fill(0).map(random),\n  encode: { x: (d) => d },\n  transform: [{ type: 'binX', y: 'count' }],\n  style: { stroke: 'white' },\n  tooltip: {\n    title: (d, i, data, column) => ({\n      value: `${column.x.value[i]} ~ ${column.x1.value[i]}`,\n    }),\n  },\n});\n\nchart.render();\n",paraId:14,tocIndex:7}]},31752:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(32250);const t=[{value:"diffY",paraId:0,tocIndex:0},{value:" is a special channel transformation that primarily operates on the y1 in encode.y. For area charts, which have both y and y1 channels representing the upper and lower boundaries of the area shape respectively, ",paraId:0,tocIndex:0},{value:"diffY",paraId:0,tocIndex:0},{value:" processes the y1 of each area shape as follows:",paraId:0,tocIndex:0},{value:"Calculate the maximum value y1max of y1 corresponding to each x",paraId:1,tocIndex:0},{value:"For each shape's y, compare it with y1max. If y1max > y, remove this data; otherwise, set y1 = y1max",paraId:1,tocIndex:0},{value:"Commonly used for marks with y1 such as area charts and bar charts. Visually, the final effect displays only the overlapping areas of two bars or area shapes, hence the name ",paraId:2,tocIndex:0},{value:"diffY",paraId:2,tocIndex:0},{value:".",paraId:2,tocIndex:0},{value:"diffY",paraId:3,tocIndex:1},{value:" is primarily designed for area charts to highlight the maximum values in comparison scenarios, and is less commonly used with other marks.",paraId:3,tocIndex:1},{value:"For example, the following case shows the weather trend comparison between ",paraId:4,tocIndex:1},{value:"New York",paraId:4,tocIndex:1},{value:" and ",paraId:4,tocIndex:1},{value:"San Francisco",paraId:4,tocIndex:1},{value:". Using ",paraId:4,tocIndex:1},{value:"diffY",paraId:4,tocIndex:1},{value:" highlights which city has higher temperature at the same time x.",paraId:4,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/temperature-compare.json',\n  },\n  children: [\n    {\n      type: 'area',\n      data: {\n        transform: [\n          // Fold the two cities into two fields: city + temperature.\n          {\n            type: 'fold',\n            fields: ['New York', 'San Francisco'],\n            key: 'city',\n            value: 'temperature',\n          },\n        ],\n      },\n      encode: {\n        x: (d) => new Date(d.date),\n        y: 'temperature',\n        color: 'city',\n        shape: 'hvh',\n      },\n      transform: [{ type: 'diffY' }], // Perform difference calculation on grouped y values here.\n      style: { opacity: 0.5 },\n    },\n    {\n      type: 'line',\n      encode: { x: (d) => new Date(d.date), y: 'San Francisco', shape: 'hvh' },\n      style: { stroke: '#000' },\n    },\n  ],\n});\n\nchart.render();\n",paraId:5,tocIndex:1},{value:"Property",paraId:6,tocIndex:2},{value:"Description",paraId:6,tocIndex:2},{value:"Type",paraId:6,tocIndex:2},{value:"Default Value",paraId:6,tocIndex:2},{value:"groupBy",paraId:6,tocIndex:2},{value:"Which channel to group data by",paraId:6,tocIndex:2},{value:"ChannelTypes",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"ChannelTypes[]",paraId:6,tocIndex:2},{value:"x",paraId:6,tocIndex:2},{value:"When ",paraId:7,tocIndex:3},{value:"diffY",paraId:7,tocIndex:3},{value:" executes, it needs to group the data and perform the ",paraId:7,tocIndex:3},{value:"diffY",paraId:7,tocIndex:3},{value:" calculation logic within each group. For area charts, y data under the same x value needs to be grouped together, then the max-min processing logic is applied within the group, so ",paraId:7,tocIndex:3},{value:"groupBy",paraId:7,tocIndex:3},{value:" is set to the ",paraId:7,tocIndex:3},{value:"x",paraId:7,tocIndex:3},{value:" channel.",paraId:7,tocIndex:3},{value:"Theoretically, ",paraId:8,tocIndex:3},{value:"groupBy",paraId:8,tocIndex:3},{value:" can be set to any channel value. For details, refer to the ",paraId:8,tocIndex:3},{value:"encode",paraId:9,tocIndex:3},{value:" documentation. All enumerated values are as follows:",paraId:8,tocIndex:3},{value:"export type ChannelTypes =\n  | 'x'\n  | 'y'\n  | 'z'\n  | 'x1'\n  | 'y1'\n  | 'series'\n  | 'color'\n  | 'opacity'\n  | 'shape'\n  | 'size'\n  | 'key'\n  | 'groupKey'\n  | 'position'\n  | 'series'\n  | 'enterType'\n  | 'enterEasing'\n  | 'enterDuration'\n  | 'enterDelay'\n  | 'updateType'\n  | 'updateEasing'\n  | 'updateDuration'\n  | 'updateDelay'\n  | 'exitType'\n  | 'exitEasing'\n  | 'exitDuration'\n  | 'exitDelay'\n  | `position${number}`;\n",paraId:10,tocIndex:3},{value:"See the ",paraId:11,tocIndex:4},{value:"Usage Scenarios",paraId:11,tocIndex:4},{value:" section above.",paraId:11,tocIndex:4}]},82476:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(52921);const t=[{value:"dodgeX",paraId:0,tocIndex:0},{value:" is a grouping layout transform that enables chart elements to be grouped and displayed by series through generating and applying ",paraId:0,tocIndex:0},{value:"series",paraId:0,tocIndex:0},{value:" channel values. The ",paraId:0,tocIndex:0},{value:"dodgeX",paraId:0,tocIndex:0},{value:" transform works primarily through the following steps:",paraId:0,tocIndex:0},{value:"Group data by grouping conditions (defaults to the ",paraId:1,tocIndex:0},{value:"x",paraId:1,tocIndex:0},{value:" channel)",paraId:1,tocIndex:0},{value:"Generate ",paraId:1,tocIndex:0},{value:"series",paraId:1,tocIndex:0},{value:" channel values using the values from the ",paraId:1,tocIndex:0},{value:"color",paraId:1,tocIndex:0},{value:" channel",paraId:1,tocIndex:0},{value:"Adjust the coordinate positions of different series within the same group according to order and spacing, forming a side-by-side structure",paraId:1,tocIndex:0},{value:"The ",paraId:2,tocIndex:1},{value:"dodgeX",paraId:2,tocIndex:1},{value:" transform is primarily used for scenarios where data within the same group needs to be arranged side by side by series on the coordinate system, to highlight data differences and distribution characteristics between different series.",paraId:2,tocIndex:1},{value:"For example, the following case shows the population distribution of different age groups across US states.",paraId:3,tocIndex:1},{value:"Before using the ",paraId:4,tocIndex:1},{value:"dodgeX",paraId:4,tocIndex:1},{value:" transform",paraId:4,tocIndex:1},{value:": Data will be stacked together, making it difficult to clearly see comparisons between age groups.",paraId:4,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  axis: { y: { labelFormatter: '~s' } },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'sortX', by: 'y', reverse: true, slice: 6 },\n    // Note: No dodgeX transform is used here\n  ],\n});\n\nchart.render();\n",paraId:5,tocIndex:1},{value:"After using the ",paraId:6,tocIndex:1},{value:"dodgeX",paraId:6,tocIndex:1},{value:" transform",paraId:6,tocIndex:1},{value:": Through the ",paraId:6,tocIndex:1},{value:"dodgeX",paraId:6,tocIndex:1},{value:" transform, data from different age groups are displayed side by side within each state, making it easy to visually compare them.",paraId:6,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  axis: { y: { labelFormatter: '~s' } },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [\n    { type: 'sortX', by: 'y', reverse: true, slice: 6 },\n    { type: 'dodgeX' }, // Apply dodgeX transform to achieve side-by-side grouping effect\n  ],\n});\n\nchart.render();\n",paraId:7,tocIndex:1},{value:"Property",paraId:8,tocIndex:2},{value:"Description",paraId:8,tocIndex:2},{value:"Type",paraId:8,tocIndex:2},{value:"Default Value",paraId:8,tocIndex:2},{value:"Required",paraId:8,tocIndex:2},{value:"groupBy",paraId:8,tocIndex:2},{value:"Channel or channel combination for data grouping",paraId:8,tocIndex:2},{value:"string | string[]",paraId:8,tocIndex:2},{value:"x",paraId:8,tocIndex:2},{value:"orderBy",paraId:8,tocIndex:2},{value:"Sorting rule for elements within groups",paraId:8,tocIndex:2},{value:"TransformOrder",paraId:8,tocIndex:2},{value:"() => null",paraId:8,tocIndex:2},{value:"reverse",paraId:8,tocIndex:2},{value:"Whether to reverse the order of elements in groups",paraId:8,tocIndex:2},{value:"boolean",paraId:8,tocIndex:2},{value:"false",paraId:8,tocIndex:2},{value:"padding",paraId:8,tocIndex:2},{value:"Spacing between elements within groups (0 ~ 1)",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:"0",paraId:8,tocIndex:2},{value:"groupBy",paraId:9,tocIndex:3},{value:" is used to specify the channel or channel combination for data grouping. By default, it groups by the ",paraId:9,tocIndex:3},{value:"x",paraId:9,tocIndex:3},{value:" channel, but it can also be specified as other channels or combinations of multiple channels.",paraId:9,tocIndex:3},{value:"orderBy",paraId:10,tocIndex:4},{value:" is used to specify the sorting rule for elements within groups, supporting multiple sorting strategies:",paraId:10,tocIndex:4},{value:"type Primitive = number | string | boolean | Date;\n\ntype TransformOrder =\n  | 'value'\n  | 'sum'\n  | 'series'\n  | 'maxIndex'\n  | string[]\n  | null\n  | ((data: Record<string, Primitive>) => Primitive);\n",paraId:11,tocIndex:4},{value:"reverse",paraId:12,tocIndex:5},{value:" is used to control whether to reverse the order of elements within groups. When set to true, elements within groups will be arranged in the opposite order to the default.",paraId:12,tocIndex:5},{value:"padding",paraId:13,tocIndex:6},{value:" is used to control the spacing between elements within groups, with a value range from 0 to 1. The larger the value, the greater the spacing between elements; when the value is 0, there is no spacing between elements.",paraId:13,tocIndex:6},{value:"The following examples demonstrate the functionality of various configuration options for the ",paraId:14,tocIndex:7},{value:"dodgeX",paraId:14,tocIndex:7},{value:" transform. We can see the differences by comparing before and after the transformation:",paraId:14,tocIndex:7},{value:"Before transformation",paraId:15,tocIndex:7},{value:": Data from different departments will be stacked, making horizontal comparison difficult.",paraId:15,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  { Quarter: 'Q1', Department: 'Sales', Performance: 90, Year: '2024' },\n  { Quarter: 'Q1', Department: 'Marketing', Performance: 80, Year: '2024' },\n  { Quarter: 'Q1', Department: 'R&D', Performance: 70, Year: '2024' },\n  { Quarter: 'Q2', Department: 'Sales', Performance: 90, Year: '2024' },\n  { Quarter: 'Q2', Department: 'Marketing', Performance: 70, Year: '2024' },\n  { Quarter: 'Q2', Department: 'R&D', Performance: 80, Year: '2024' },\n  { Quarter: 'Q3', Department: 'Sales', Performance: 70, Year: '2024' },\n  { Quarter: 'Q3', Department: 'Marketing', Performance: 80, Year: '2024' },\n  { Quarter: 'Q3', Department: 'R&D', Performance: 90, Year: '2024' },\n  { Quarter: 'Q4', Department: 'Sales', Performance: 80, Year: '2024' },\n  { Quarter: 'Q4', Department: 'Marketing', Performance: 70, Year: '2024' },\n  { Quarter: 'Q4', Department: 'R&D', Performance: 90, Year: '2024' },\n];\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data,\n  encode: {\n    x: 'Quarter',\n    y: 'Performance',\n    color: 'Department',\n  },\n  // Note: No transform is used here\n});\n\nchart.render();\n",paraId:16,tocIndex:7},{value:"After transformation",paraId:17,tocIndex:7},{value:": The effect after applying the ",paraId:17,tocIndex:7},{value:"dodgeX",paraId:17,tocIndex:7},{value:" transform, demonstrating the functionality of various configuration options:",paraId:17,tocIndex:7},{value:"groupBy",paraId:18,tocIndex:7},{value:": Group and display department data by ",paraId:18,tocIndex:7},{value:"x",paraId:18,tocIndex:7},{value:" channel (Quarter)",paraId:18,tocIndex:7},{value:"orderBy",paraId:18,tocIndex:7},{value:": Set to ",paraId:18,tocIndex:7},{value:"value",paraId:18,tocIndex:7},{value:" to sort elements within groups by performance value",paraId:18,tocIndex:7},{value:"reverse",paraId:18,tocIndex:7},{value:": Set to true to arrange elements within groups from high to low performance values",paraId:18,tocIndex:7},{value:"padding",paraId:18,tocIndex:7},{value:": Set spacing between elements within groups to 0.1",paraId:18,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = [\n  { Quarter: 'Q1', Department: 'Sales', Performance: 90, Year: '2024' },\n  { Quarter: 'Q1', Department: 'Marketing', Performance: 80, Year: '2024' },\n  { Quarter: 'Q1', Department: 'R&D', Performance: 70, Year: '2024' },\n  { Quarter: 'Q2', Department: 'Sales', Performance: 90, Year: '2024' },\n  { Quarter: 'Q2', Department: 'Marketing', Performance: 70, Year: '2024' },\n  { Quarter: 'Q2', Department: 'R&D', Performance: 80, Year: '2024' },\n  { Quarter: 'Q3', Department: 'Sales', Performance: 70, Year: '2024' },\n  { Quarter: 'Q3', Department: 'Marketing', Performance: 80, Year: '2024' },\n  { Quarter: 'Q3', Department: 'R&D', Performance: 90, Year: '2024' },\n  { Quarter: 'Q4', Department: 'Sales', Performance: 80, Year: '2024' },\n  { Quarter: 'Q4', Department: 'Marketing', Performance: 70, Year: '2024' },\n  { Quarter: 'Q4', Department: 'R&D', Performance: 90, Year: '2024' },\n];\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data,\n  encode: {\n    x: 'Quarter',\n    y: 'Performance',\n    color: 'Department',\n  },\n  transform: [\n    {\n      type: 'dodgeX', // Apply dodgeX transform\n      groupBy: 'x',\n      orderBy: 'value',\n      reverse: true,\n      padding: 0.1,\n    },\n  ],\n});\n\nchart.render();\n",paraId:19,tocIndex:7}]},41652:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(92255);const t=[{value:"flexX is a transform method used to adjust the width of bar charts. It allows for dynamic adjustment of bar widths based on data values, enabling the bar width to reflect another data dimension, thus displaying more information dimensions in visualizations. This transform is particularly suitable for:",paraId:0,tocIndex:0},{value:"Scenarios that need to show two quantitative variables simultaneously, such as the relationship between country GDP (width) and GDP per capita (height)",paraId:1,tocIndex:0},{value:"Business analysis charts displaying market share and segmentation structure",paraId:1,tocIndex:0},{value:"Multi-dimensional visualization of demographic data, such as total population (width) and age distribution (height)",paraId:1,tocIndex:0},{value:"Sales data analysis, such as the relationship between total sales (width) and profit margin (height)",paraId:1,tocIndex:0},{value:"Through the flexX transform, we can add an additional data dimension on top of traditional bar charts, making charts more information-rich.",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  width: 800,\n  height: 400,\n  paddingLeft: 60,\n});\n\nchart\n  .interval()\n  .data([\n    { category: 'Electronics', sales: 1200000, profitRate: 0.15 },\n    { category: 'Clothing', sales: 800000, profitRate: 0.25 },\n    { category: 'Food', sales: 600000, profitRate: 0.12 },\n    { category: 'Furniture', sales: 400000, profitRate: 0.18 },\n    { category: 'Books', sales: 200000, profitRate: 0.3 },\n  ])\n  .transform({ type: 'flexX', field: 'sales' })\n  .encode('x', 'category')\n  .encode('y', 'profitRate')\n  .encode('color', 'category')\n  .scale('y', { nice: true })\n  .axis('y', {\n    title: 'Profit Rate',\n    labelFormatter: '.0%',\n  });\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"Variable-width Bar Charts",paraId:4,tocIndex:1},{value:": When you need the bar width to reflect a certain dimension of data, for example, country GDP determines bar width while bar height shows GDP per capita.",paraId:4,tocIndex:1},{value:"Marimekko Charts",paraId:5,tocIndex:1},{value:": Combined with stackY and normalizeY transforms, you can create complex business analysis charts displaying market share and segmentation data.\n",paraId:5,tocIndex:1},{value:"\nUsing country GDP as bar width and GDP per capita as bar height:",paraId:5,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  width: 1000,\n  paddingBottom: 100,\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/90873879-09d7-4842-a493-03fb560267bc.csv',\n  })\n  .transform({ type: 'flexX', field: 'gdp' })\n  .encode('x', 'country')\n  .encode('y', 'value')\n  .encode('color', 'country')\n  .axis('y', { labelFormatter: '~s' });\nchart.render();\n",paraId:6,tocIndex:1},{value:"Property",paraId:7,tocIndex:2},{value:"Description",paraId:7,tocIndex:2},{value:"Type",paraId:7,tocIndex:2},{value:"Default",paraId:7,tocIndex:2},{value:"Required",paraId:7,tocIndex:2},{value:"field",paraId:7,tocIndex:2},{value:"Specifies the field for generating weight array",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"(d: any) => Primitive[]",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"No",paraId:7,tocIndex:2},{value:"channel",paraId:7,tocIndex:2},{value:"Specifies the channel for generating weight array",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:"y",paraId:7,tocIndex:2},{value:"No",paraId:7,tocIndex:2},{value:"reducer",paraId:7,tocIndex:2},{value:"Function to aggregate weights in each group",paraId:7,tocIndex:2},{value:"Reducer",paraId:7,tocIndex:2},{value:"sum",paraId:7,tocIndex:2},{value:"No",paraId:7,tocIndex:2},{value:"// Basic data types\ntype Primitive = number | string | boolean | Date;\n\n// Aggregation function type\ntype Reducer = 'sum' | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:8,tocIndex:3},{value:"field",paraId:9,tocIndex:4},{value:": Specifies the data field for bar width. When field is set, it takes priority over channel.",paraId:9,tocIndex:4},{value:"channel",paraId:9,tocIndex:4},{value:": Specifies the encoding channel used to calculate bar width, defaults to using 'y' channel values.",paraId:9,tocIndex:4},{value:"reducer",paraId:9,tocIndex:4},{value:": Aggregation function used to calculate the final width value. Defaults to 'sum'.",paraId:9,tocIndex:4},{value:"Creating market analysis charts by combining stackY and normalizeY transforms:",paraId:10,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  width: 900,\n  height: 800,\n  paddingLeft: 0,\n  paddingRight: 0,\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/3041da62-1bf4-4849-aac3-01a387544bf4.csv',\n  })\n  .transform({ type: 'flexX', reducer: 'sum' })\n  .transform({ type: 'stackY' })\n  .transform({ type: 'normalizeY' })\n  .encode('x', 'market')\n  .encode('y', 'value')\n  .encode('color', 'segment')\n  .scale('x', { paddingOuter: 0, paddingInner: 0.01 });\nchart.render();\n",paraId:11,tocIndex:6},{value:"In this example, the flexX transform makes the width of each market segment proportional to its total value. Combined with stacking and normalization processing, it clearly displays the distribution of market share.",paraId:12,tocIndex:6},{value:"This example demonstrates how to use flexX to visualize population data, where bar width represents the total population of states/provinces, height represents population density, and color distinguishes different regions.",paraId:13,tocIndex:6},{value:"Displaying monthly sales data using transaction volume as width and price change rate as height:",paraId:14,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  width: 800,\n  height: 400,\n  paddingLeft: 60,\n  data: [\n    { month: 'Jan', volume: 5000, priceChange: 0.08 },\n    { month: 'Feb', volume: 8000, priceChange: -0.05 },\n    { month: 'Mar', volume: 12000, priceChange: 0.12 },\n    { month: 'Apr', volume: 6000, priceChange: -0.03 },\n    { month: 'May', volume: 9000, priceChange: 0.15 },\n    { month: 'Jun', volume: 15000, priceChange: -0.08 },\n  ],\n  encode: {\n    x: 'month',\n    y: 'priceChange',\n    color: (d) => (d.priceChange > 0 ? 'red' : 'green'),\n  },\n  transform: [{ type: 'flexX', field: 'volume' }],\n  scale: { y: { nice: true } },\n  style: { radius: 4 },\n  axis: { y: { title: 'Price Change Rate', labelFormatter: '.0%' } },\n});\n\nchart.render();\n",paraId:15,tocIndex:7},{value:"This time series example demonstrates how to use flexX to visualize trading data, where bar width represents transaction volume size, height represents price change rate, and color distinguishes between gains and losses. Through this approach, we can simultaneously observe the relationship between trading activity and price trends.",paraId:16,tocIndex:7}]},38392:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(55483);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"group",paraId:0,tocIndex:0},{value:" function is an important tool for data processing, used to perform grouping operations on data, grouping discrete x and continuous y channels, and aggregating channels according to specified Reducers.\nIt can group datasets by specified fields or conditions, so that subsequent chart rendering or data analysis can be processed based on the grouped results.",paraId:0,tocIndex:0},{value:"At the same time, the ",paraId:1,tocIndex:0},{value:"group",paraId:1,tocIndex:0},{value:" function supports custom grouping logic, allowing users to flexibly group data according to business needs, usually used in combination with ",paraId:1,tocIndex:0},{value:"data",paraId:1,tocIndex:0},{value:" or ",paraId:1,tocIndex:0},{value:"transform",paraId:1,tocIndex:0},{value:" methods. The ",paraId:1,tocIndex:0},{value:"group",paraId:1,tocIndex:0},{value:" is a series of functions, which includes preset similar functions such as ",paraId:1,tocIndex:0},{value:"groupX",paraId:2,tocIndex:0},{value:", ",paraId:1,tocIndex:0},{value:"groupY",paraId:3,tocIndex:0},{value:", ",paraId:1,tocIndex:0},{value:"groupColor",paraId:4,tocIndex:0},{value:", etc., mainly for user convenience. Their functionality and usage are basically the same, but they are packaged for different channels, and you can refer to their usage respectively.",paraId:1,tocIndex:0},{value:"The ",paraId:5,tocIndex:1},{value:"group",paraId:5,tocIndex:1},{value:" function is suitable for the following scenarios:",paraId:5,tocIndex:1},{value:"When you need to group data by a certain dimension (such as time, category) and calculate summary values (such as sum, average).",paraId:6,tocIndex:2},{value:"When you need to group data by a certain field in a chart to draw grouped bar charts, stacked charts, etc.",paraId:7,tocIndex:3},{value:"Adjusting the structure of raw data to suit specific chart types (such as converting from flat data to nested data).",paraId:8,tocIndex:4},{value:"In multi-dimensional data analysis, grouping data by multiple fields for further analysis or visualization.",paraId:9,tocIndex:5},{value:"Property",paraId:10,tocIndex:6},{value:"Description",paraId:10,tocIndex:6},{value:"Type",paraId:10,tocIndex:6},{value:"Default",paraId:10,tocIndex:6},{value:"channels",paraId:10,tocIndex:6},{value:"Which channels to perform data grouping and aggregation on",paraId:10,tocIndex:6},{value:"string",paraId:10,tocIndex:6},{value:" | ",paraId:10,tocIndex:6},{value:"string[]",paraId:10,tocIndex:6},{value:"['x', 'y']",paraId:10,tocIndex:6},{value:"[channel]",paraId:10,tocIndex:6},{value:"Aggregation method for channel data output to specific marks",paraId:10,tocIndex:6},{value:"Reducer",paraId:10,tocIndex:6},{value:"Channel represents how data is mapped to visual attributes of graphics (such as position, color, size, etc.). In AntV, channel is the foundation for building visualization charts. By binding data fields to specific visual channels, corresponding graphic representations are generated. Theoretically, ",paraId:11,tocIndex:7},{value:"channel",paraId:11,tocIndex:7},{value:" can be set to all channel values. For details, please refer to the ",paraId:11,tocIndex:7},{value:"encode",paraId:12,tocIndex:7},{value:" documentation.",paraId:11,tocIndex:7},{value:"All enumeration values are as follows:",paraId:13,tocIndex:7},{value:"type Channel =\n  | 'x'\n  | 'y'\n  | 'z'\n  | 'x1'\n  | 'y1'\n  | 'series'\n  | 'color'\n  | 'opacity'\n  | 'shape'\n  | 'size'\n  | 'key'\n  | 'groupKey'\n  | 'position'\n  | 'series'\n  | 'enterType'\n  | 'enterEasing'\n  | 'enterDuration'\n  | 'enterDelay'\n  | 'updateType'\n  | 'updateEasing'\n  | 'updateDuration'\n  | 'updateDelay'\n  | 'exitType'\n  | 'exitEasing'\n  | 'exitDuration'\n  | 'exitDelay'\n  | `position${number}`;\n",paraId:14,tocIndex:7},{value:"Based on the above enumeration, we list the following channel types for reference. Commonly used ones include:",paraId:15,tocIndex:8},{value:"Position Channels:",paraId:16,tocIndex:8},{value:"x: x-axis position, usually mapping horizontal coordinate data.",paraId:17,tocIndex:8},{value:"y: y-axis position, usually mapping vertical coordinate data.",paraId:17,tocIndex:8},{value:"Geometric Channels:",paraId:18,tocIndex:8},{value:"size: The size of graphics (such as point size, line thickness).",paraId:19,tocIndex:8},{value:"shape: The shape of graphics (such as point shapes: circle, square).",paraId:19,tocIndex:8},{value:"Color Channels:",paraId:20,tocIndex:8},{value:"color: The color of graphics, used to distinguish categories or represent value ranges.",paraId:21,tocIndex:8},{value:"We provide corresponding preset functions such as ",paraId:22,tocIndex:8},{value:"groupX",paraId:23,tocIndex:8},{value:", ",paraId:22,tocIndex:8},{value:"groupY",paraId:24,tocIndex:8},{value:", and ",paraId:22,tocIndex:8},{value:"groupColor",paraId:25,tocIndex:8},{value:" for calling.",paraId:22,tocIndex:8},{value:"The ",paraId:26,tocIndex:9},{value:"channel",paraId:26,tocIndex:9},{value:" property of the ",paraId:26,tocIndex:9},{value:"group",paraId:26,tocIndex:9},{value:" function can be a string or a function. A string represents the field name to be aggregated, while a function is used for custom aggregation logic. The function receives two parameters:",paraId:26,tocIndex:9},{value:"I",paraId:27,tocIndex:9},{value:": An array representing the values to be aggregated",paraId:27,tocIndex:9},{value:"V",paraId:27,tocIndex:9},{value:": An array representing the original data corresponding to the values to be aggregated (can be objects or other types) ",paraId:27,tocIndex:9},{value:"type Primitive = number | string | boolean | Date;",paraId:27,tocIndex:9},{value:"Preset ",paraId:28,tocIndex:9},{value:"Reducer",paraId:28,tocIndex:9},{value:" can also be used directly, such as ",paraId:28,tocIndex:9},{value:"mean",paraId:28,tocIndex:9},{value:", ",paraId:28,tocIndex:9},{value:"max",paraId:28,tocIndex:9},{value:", ",paraId:28,tocIndex:9},{value:"count",paraId:28,tocIndex:9},{value:", etc. Here are some commonly used ",paraId:28,tocIndex:9},{value:"Reducer",paraId:28,tocIndex:9},{value:":",paraId:28,tocIndex:9},{value:"type Reducer =\n  | 'mean'\n  | 'max'\n  | 'count'\n  | 'min'\n  | 'median'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:29,tocIndex:9},{value:"The following is a simple example showing how to use the ",paraId:30,tocIndex:11},{value:"group",paraId:30,tocIndex:11},{value:" function to group data and draw a grouped bar chart.",paraId:30,tocIndex:11},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { year: '1951', sales: 38 },\n    { year: '1952', sales: 52 },\n    { year: '1956', sales: 61 },\n    { year: '1957', sales: 145 },\n    { year: '1958', sales: 48 },\n    { year: '1959', sales: 38 },\n    { year: '1960', sales: 38 },\n    { year: '1962', sales: 38 },\n    { year: '1951', sales: 38 },\n    { year: '1952', sales: 52 },\n    { year: '1956', sales: 61 },\n    { year: '1957', sales: 145 },\n    { year: '1958', sales: 48 },\n    { year: '1959', sales: 38 },\n    { year: '1960', sales: 38 },\n    { year: '1962', sales: 38 },\n  ],\n  encode: { x: 'year', y: 'sales' },\n  transform: [{ type: 'group', channels: ['x'], y: 'sum' }],\n});\n\nchart.render();\n",paraId:31,tocIndex:11},{value:"Example Explanation",paraId:32,tocIndex:11},{value:"In this example, we first define a set of sales data ",paraId:33,tocIndex:11},{value:"data",paraId:33,tocIndex:11},{value:", including year and sales amount.",paraId:33,tocIndex:11},{value:"In the above code, the ",paraId:33,tocIndex:11},{value:"transform",paraId:33,tocIndex:11},{value:" method uses a ",paraId:33,tocIndex:11},{value:"group",paraId:33,tocIndex:11},{value:" type data transformation to group data by the ",paraId:33,tocIndex:11},{value:"x",paraId:33,tocIndex:11},{value:" channel.",paraId:33,tocIndex:11},{value:"After grouping, the data will be aggregated according to the value of the ",paraId:33,tocIndex:11},{value:"x",paraId:33,tocIndex:11},{value:" channel, calculating the sum of ",paraId:33,tocIndex:11},{value:"sales",paraId:33,tocIndex:11},{value:" for each ",paraId:33,tocIndex:11},{value:"year",paraId:33,tocIndex:11},{value:".",paraId:33,tocIndex:11},{value:"Finally, the grouped data is mapped to the ",paraId:33,tocIndex:11},{value:"x",paraId:33,tocIndex:11},{value:" and ",paraId:33,tocIndex:11},{value:"y",paraId:33,tocIndex:11},{value:" axis of the chart through the ",paraId:33,tocIndex:11},{value:"encode",paraId:33,tocIndex:11},{value:" method for rendering.",paraId:33,tocIndex:11},{value:"group",paraId:34,tocIndex:12},{value:" is not just for grouping data, but can also perform aggregation calculations on data. For example, we can perform operations such as sum and average on data.",paraId:34,tocIndex:12},{value:"Below we group according to specific data, using the ",paraId:35,tocIndex:12},{value:"group",paraId:35,tocIndex:12},{value:" function to process data grouping and display different grouping results in the chart.\nThe following example shows how to use the ",paraId:35,tocIndex:12},{value:"group",paraId:35,tocIndex:12},{value:" function to group data and take the maximum value (",paraId:35,tocIndex:12},{value:"max",paraId:35,tocIndex:12},{value:"), and display different grouping results in the chart.",paraId:35,tocIndex:12},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'cell',\n  height: 300,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n  },\n  encode: {\n    x: (d) => new Date(d.date).getUTCDate(),\n    y: (d) => new Date(d.date).getUTCMonth(),\n    color: 'temp_max',\n  },\n  transform: [{ type: 'group', color: 'max' }],\n  scale: { color: { type: 'sequential', palette: 'gnBu' } },\n  style: { inset: 0.5 },\n});\n\nchart.render();\n",paraId:36,tocIndex:12}]},97735:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(2252);const t=[{value:"Groups discrete color channels and aggregates channels according to specified Reducers. Equivalent to ",paraId:0},{value:"group",paraId:1},{value:" with ",paraId:0},{value:"channels = ['color']",paraId:0},{value:".",paraId:0},{value:"groupColor",paraId:2},{value:" is a variant of the ",paraId:2},{value:"group",paraId:2},{value:" function family, specifically designed for grouping discrete ",paraId:2},{value:"color",paraId:2},{value:" channels and aggregating channels according to specified Reducers. It is equivalent to ",paraId:2},{value:"group",paraId:3},{value:" with ",paraId:2},{value:"channels = ['color']",paraId:2},{value:". The usage and configuration options are the same as the group function. Below, we'll explain the use cases and configuration options specific to the ",paraId:2},{value:"groupColor",paraId:2},{value:" function.",paraId:2},{value:"Property",paraId:4,tocIndex:0},{value:"Description",paraId:4,tocIndex:0},{value:"Type",paraId:4,tocIndex:0},{value:"Default",paraId:4,tocIndex:0},{value:"[channel]",paraId:4,tocIndex:0},{value:"Aggregation method for channel data output to specific marks",paraId:4,tocIndex:0},{value:"Reducer",paraId:4,tocIndex:0},{value:"For detailed information about ",paraId:5,tocIndex:0},{value:"Reducer",paraId:5,tocIndex:0},{value:", please refer to the configuration options of the ",paraId:5,tocIndex:0},{value:"group",paraId:6,tocIndex:0},{value:" function.",paraId:5,tocIndex:0},{value:"In the following example, we retrieve the ",paraId:7,tocIndex:1},{value:"species",paraId:7,tocIndex:1},{value:" and ",paraId:7,tocIndex:1},{value:"sex",paraId:7,tocIndex:1},{value:" fields from the ",paraId:7,tocIndex:1},{value:"penguins.json",paraId:7,tocIndex:1},{value:" dataset, group by the ",paraId:7,tocIndex:1},{value:"species",paraId:7,tocIndex:1},{value:" field, and perform count aggregation on the ",paraId:7,tocIndex:1},{value:"sex",paraId:7,tocIndex:1},{value:" field. Finally, we map the ",paraId:7,tocIndex:1},{value:"species",paraId:7,tocIndex:1},{value:" field to the ",paraId:7,tocIndex:1},{value:"color",paraId:7,tocIndex:1},{value:" channel. Note that the corresponding mark has transform methods available for data transformation.",paraId:7,tocIndex:1},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  height: 120,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n  },\n  encode: { color: 'sex' },\n  transform: [\n    { type: 'groupColor', y: 'count' },\n    { type: 'stackY' },\n    { type: 'normalizeY' },\n  ],\n  coordinate: { transform: [{ type: 'transpose' }] },\n  axis: { y: { labelFormatter: '.0%' } },\n  labels: [{ text: 'sex', position: 'inside' }],\n});\n\nchart.render();\n",paraId:8,tocIndex:1},{value:"Explanation:",paraId:9,tocIndex:1},{value:"The ",paraId:10,tocIndex:1},{value:"y",paraId:10,tocIndex:1},{value:" property of the ",paraId:10,tocIndex:1},{value:"groupColor",paraId:10,tocIndex:1},{value:" function specifies count aggregation on the ",paraId:10,tocIndex:1},{value:"sex",paraId:10,tocIndex:1},{value:" field;",paraId:10,tocIndex:1},{value:"The ",paraId:10,tocIndex:1},{value:"stackY",paraId:10,tocIndex:1},{value:" function stacks the ",paraId:10,tocIndex:1},{value:"y",paraId:10,tocIndex:1},{value:" channel;",paraId:10,tocIndex:1},{value:"The ",paraId:10,tocIndex:1},{value:"normalizeY",paraId:10,tocIndex:1},{value:" function normalizes the ",paraId:10,tocIndex:1},{value:"y",paraId:10,tocIndex:1},{value:" channel;",paraId:10,tocIndex:1},{value:"The ",paraId:10,tocIndex:1},{value:"transpose",paraId:10,tocIndex:1},{value:" function transposes the coordinate system;",paraId:10,tocIndex:1},{value:"Finally, labels are added to the chart through the ",paraId:10,tocIndex:1},{value:"labels",paraId:10,tocIndex:1},{value:" function.",paraId:10,tocIndex:1}]},3955:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(78096);const t=[{value:"groupX",paraId:0},{value:" is a variant of the ",paraId:0},{value:"group",paraId:0},{value:" function family, specifically designed for grouping discrete ",paraId:0},{value:"x",paraId:0},{value:" channels and aggregating channels according to specified Reducers. It is equivalent to ",paraId:0},{value:"group",paraId:1},{value:" with ",paraId:0},{value:"channels = ['x']",paraId:0},{value:". The usage and configuration options are the same as the group function. Below, we explain the use cases and configuration options specific to the ",paraId:0},{value:"groupX",paraId:0},{value:" function.",paraId:0},{value:"Property",paraId:2,tocIndex:0},{value:"Description",paraId:2,tocIndex:0},{value:"Type",paraId:2,tocIndex:0},{value:"Default",paraId:2,tocIndex:0},{value:"[channel]",paraId:2,tocIndex:0},{value:"Aggregation method for channel data output to specific mark",paraId:2,tocIndex:0},{value:"Reducer",paraId:2,tocIndex:0},{value:"For detailed information about ",paraId:3,tocIndex:0},{value:"Reducer",paraId:3,tocIndex:0},{value:", please refer to the configuration options of the ",paraId:3,tocIndex:0},{value:"group",paraId:4,tocIndex:0},{value:" function.",paraId:3,tocIndex:0},{value:"Below, we demonstrate the age distribution of different population groups. We use the ",paraId:5,tocIndex:1},{value:"groupX",paraId:5,tocIndex:1},{value:" function to group the data and aggregate the ",paraId:5,tocIndex:1},{value:"x",paraId:5,tocIndex:1},{value:" channel, calculating the line length and distribution of ",paraId:5,tocIndex:1},{value:"population",paraId:5,tocIndex:1},{value:" for each ",paraId:5,tocIndex:1},{value:"state",paraId:5,tocIndex:1},{value:". Note that the corresponding mark has transform methods available for data transformation.",paraId:5,tocIndex:1},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nchart.coordinate({ transform: [{ type: 'transpose' }] });\n\nchart.data({\n  type: 'fetch',\n  value:\n    'https://gw.alipayobjects.com/os/bmw-prod/b6f2ff26-b232-447d-a613-0df5e30104a0.csv',\n});\n\nchart\n  .link()\n  .scale('y', { formatter: '.0%' })\n  .transform({ type: 'groupX', y: 'min', y1: 'max' })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .style('stroke', '#000');\n\nchart\n  .point()\n  .scale('color', { palette: 'spectral' })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .encode('shape', 'point')\n  .encode('color', 'age');\n\nchart.render();\n",paraId:6,tocIndex:1},{value:"Explanation:",paraId:7,tocIndex:1},{value:"In this example, we first define a set of sales data ",paraId:8,tocIndex:1},{value:"data",paraId:8,tocIndex:1},{value:", including region, age, and population;",paraId:8,tocIndex:1},{value:"In the above code, the ",paraId:8,tocIndex:1},{value:"transform",paraId:8,tocIndex:1},{value:" method uses a ",paraId:8,tocIndex:1},{value:"groupX",paraId:8,tocIndex:1},{value:" type data transformation, grouping data by the ",paraId:8,tocIndex:1},{value:"x",paraId:8,tocIndex:1},{value:" channel, with 'y' and 'y1' taking the minimum and maximum values respectively;",paraId:8,tocIndex:1},{value:"After grouping, the data is aggregated according to the values of the ",paraId:8,tocIndex:1},{value:"x",paraId:8,tocIndex:1},{value:" channel, calculating the line length of ",paraId:8,tocIndex:1},{value:"population",paraId:8,tocIndex:1},{value:" for each ",paraId:8,tocIndex:1},{value:"state",paraId:8,tocIndex:1},{value:";",paraId:8,tocIndex:1},{value:"Finally, the ",paraId:8,tocIndex:1},{value:"encode",paraId:8,tocIndex:1},{value:" method maps the grouped data to the chart's ",paraId:8,tocIndex:1},{value:"x",paraId:8,tocIndex:1},{value:" and ",paraId:8,tocIndex:1},{value:"y",paraId:8,tocIndex:1},{value:" axis for point rendering.",paraId:8,tocIndex:1}]},52313:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(75350);const t=[{value:"groupY",paraId:0},{value:" is a variant of the ",paraId:0},{value:"group",paraId:0},{value:" function family, specifically designed for grouping discrete ",paraId:0},{value:"y",paraId:0},{value:" channels and aggregating channels according to specified Reducers. It is equivalent to ",paraId:0},{value:"group",paraId:1},{value:" with ",paraId:0},{value:"channels = ['y']",paraId:0},{value:". The usage and configuration options are the same as the group function. Below, we explain the use cases and configuration options specific to the groupY function.",paraId:0},{value:"Property",paraId:2,tocIndex:0},{value:"Description",paraId:2,tocIndex:0},{value:"Type",paraId:2,tocIndex:0},{value:"Default",paraId:2,tocIndex:0},{value:"[channel]",paraId:2,tocIndex:0},{value:"Aggregation method for channel data output to specific mark",paraId:2,tocIndex:0},{value:"Reducer",paraId:2,tocIndex:0},{value:"For detailed information about ",paraId:3,tocIndex:0},{value:"Reducer",paraId:3,tocIndex:0},{value:", please refer to the configuration options of the ",paraId:3,tocIndex:0},{value:"group",paraId:4,tocIndex:0},{value:" function.",paraId:3,tocIndex:0},{value:"For example, in corresponding marks, you can use the transform method to apply data transformations. We can use groupY to group and aggregate data. In the example below, we will group the y channel and calculate the minimum and maximum values for each group.",paraId:5,tocIndex:1},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'view',\n  height: 180,\n  paddingLeft: 80,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n    transform: [\n      {\n        type: 'map',\n        callback: (d) => ({\n          ...d,\n          body_mass_g: +d.body_mass_g,\n        }),\n      },\n    ],\n  },\n  children: [\n    {\n      type: 'point',\n      encode: { x: 'body_mass_g', y: 'species' },\n      style: { stroke: '#000' },\n    },\n    {\n      type: 'link',\n      encode: { x: 'body_mass_g', y: 'species' },\n      transform: [{ type: 'groupY', x: 'min', x1: 'max' }],\n      style: { stroke: '#000' },\n    },\n    {\n      type: 'point',\n      encode: { y: 'species', x: 'body_mass_g', shape: 'line', size: 12 },\n      transform: [{ type: 'groupY', x: 'median' }],\n      style: { stroke: 'red' },\n    },\n  ],\n});\n\nchart.render();\n",paraId:6,tocIndex:1},{value:"Explanation:",paraId:7,tocIndex:1},{value:"In this example, we first define a set of penguin data ",paraId:8,tocIndex:1},{value:"data",paraId:8,tocIndex:1},{value:", containing penguin body mass and species;",paraId:8,tocIndex:1},{value:"In the code above, the ",paraId:8,tocIndex:1},{value:"transform",paraId:8,tocIndex:1},{value:" method uses a ",paraId:8,tocIndex:1},{value:"groupY",paraId:8,tocIndex:1},{value:" type data transformation to group data by the ",paraId:8,tocIndex:1},{value:"y",paraId:8,tocIndex:1},{value:" channel;",paraId:8,tocIndex:1},{value:"After grouping, the data is aggregated according to the values of the ",paraId:8,tocIndex:1},{value:"y",paraId:8,tocIndex:1},{value:" channel, calculating the minimum and maximum values of ",paraId:8,tocIndex:1},{value:"body_mass_g",paraId:8,tocIndex:1},{value:" for each ",paraId:8,tocIndex:1},{value:"species",paraId:8,tocIndex:1},{value:";",paraId:8,tocIndex:1},{value:"Finally, through the ",paraId:8,tocIndex:1},{value:"encode",paraId:8,tocIndex:1},{value:" method, the grouped data is mapped to the chart's ",paraId:8,tocIndex:1},{value:"x",paraId:8,tocIndex:1},{value:" and ",paraId:8,tocIndex:1},{value:"y",paraId:8,tocIndex:1},{value:" axis for rendering.",paraId:8,tocIndex:1}]},45188:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(30269);const t=[{value:"Jitter is a data processing or adjustment method primarily used to solve the problem of overlapping data points, especially in visualization scenarios such as scatter plots. When multiple data points are located at the same or similar positions, it causes visual overlap that is difficult to distinguish. Jitter adds small random offsets to the x or y coordinates of data points, dispersing them to improve visualization effects and readability.",paraId:0,tocIndex:0},{value:"Avoid data point overlap: Through random offsets, separate overlapping points visually;",paraId:1,tocIndex:1},{value:"Improve data readability: In high-density data scenarios, clearly display the distribution of each data point;",paraId:1,tocIndex:1},{value:"Applicable to specific scenarios: Commonly used in scatter plots, bee swarm plots, and other charts that need to display individual data.",paraId:1,tocIndex:1},{value:"Note: Jitter is a visual adjustment method that may slightly change the precise position of data, so it is not suitable for scenarios that require extremely high positional accuracy.",paraId:2,tocIndex:1},{value:"Property",paraId:3,tocIndex:2},{value:"Description",paraId:3,tocIndex:2},{value:"Type",paraId:3,tocIndex:2},{value:"Default",paraId:3,tocIndex:2},{value:"padding",paraId:3,tocIndex:2},{value:"Spacing of groups in x,y directions [0 ~ 1]",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"0",paraId:3,tocIndex:2},{value:"paddingX",paraId:3,tocIndex:2},{value:"Spacing of groups in x direction [0 ~ 1]",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"0",paraId:3,tocIndex:2},{value:"paddingY",paraId:3,tocIndex:2},{value:"Spacing of groups in y direction [0 ~ 1]",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"0",paraId:3,tocIndex:2},{value:"random",paraId:3,tocIndex:2},{value:"Random function, returns value in [0, 1)",paraId:3,tocIndex:2},{value:"() => number",paraId:3,tocIndex:2},{value:"Math.random",paraId:3,tocIndex:2},{value:"Let's start with a simple example, drawing a scatter plot where data points overlap at certain positions:",paraId:4,tocIndex:3},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: [\n    { x: 1, y: 2 },\n    { x: 1, y: 2 },\n    { x: 2, y: 3 },\n    { x: 2, y: 3 },\n    { x: 3, y: 4 },\n  ],\n  encode: { x: 'clarity', color: 'clarity' },\n  transform: [{ type: 'jitter' }],\n  legend: false,\n});\n\nchart.render();\n",paraId:5,tocIndex:3},{value:"Please note that there are two points with identical values in the ",paraId:6,tocIndex:3},{value:"data",paraId:6,tocIndex:3},{value:". Without ",paraId:6,tocIndex:3},{value:"jitter",paraId:6,tocIndex:3},{value:", the data points (1, 2) and (2, 3) would completely overlap, visually showing only one point.\nAfter applying ",paraId:6,tocIndex:3},{value:"jitter",paraId:6,tocIndex:3},{value:", these points will be randomly offset by a small distance (usually a tiny horizontal or vertical offset) around their original positions, making each point visible.",paraId:6,tocIndex:3},{value:"Here's a more complex scatter plot example using ",paraId:7,tocIndex:4},{value:"jitter",paraId:7,tocIndex:4},{value:" to avoid data point overlap:",paraId:7,tocIndex:4},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/diamond.json',\n  },\n  encode: { x: 'clarity', color: 'clarity' },\n  transform: [{ type: 'jitter' }],\n  coordinate: { type: 'polar' },\n  legend: false,\n});\n\nchart.render();\n",paraId:8,tocIndex:4},{value:"In this example, we fetch data from a remote data source and use ",paraId:9,tocIndex:4},{value:"jitter",paraId:9,tocIndex:4},{value:" to handle data point overlap issues. Through the ",paraId:9,tocIndex:4},{value:"transform",paraId:9,tocIndex:4},{value:" property, we can easily apply ",paraId:9,tocIndex:4},{value:"jitter",paraId:9,tocIndex:4},{value:" to the data, thereby improving the visualization effect.",paraId:9,tocIndex:4}]},58387:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(28362);const t=[{value:"jitterX",paraId:0,tocIndex:0},{value:" is a shortcut function for ",paraId:0,tocIndex:0},{value:"jitter",paraId:1,tocIndex:0},{value:", specifically designed to handle discrete ",paraId:0,tocIndex:0},{value:"x",paraId:0,tocIndex:0},{value:" channel scales, generating a ",paraId:0,tocIndex:0},{value:"dx",paraId:0,tocIndex:0},{value:" channel to achieve the effect of spreading data points in the ",paraId:0,tocIndex:0},{value:"x",paraId:0,tocIndex:0},{value:" direction within a certain area.\nIt adds random offsets along the x-axis to visually disperse data points, thereby avoiding overlap and improving readability.",paraId:0,tocIndex:0},{value:"jitterX",paraId:2,tocIndex:1},{value:" is suitable for the same scenarios as ",paraId:2,tocIndex:1},{value:"jitter",paraId:2,tocIndex:1},{value:", mainly used in scatter plots, bee swarm plots, and other charts that need to display individual data points. It helps users better understand data distribution, especially when data points are densely packed.",paraId:2,tocIndex:1},{value:"Property",paraId:3,tocIndex:2},{value:"Description",paraId:3,tocIndex:2},{value:"Type",paraId:3,tocIndex:2},{value:"Default",paraId:3,tocIndex:2},{value:"padding",paraId:3,tocIndex:2},{value:"Spacing between each group [0 ~ 1]",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"0",paraId:3,tocIndex:2},{value:"random",paraId:3,tocIndex:2},{value:"Random function, returns value [0, 1)",paraId:3,tocIndex:2},{value:"() => number",paraId:3,tocIndex:2},{value:"Math.random",paraId:3,tocIndex:2},{value:"For simple examples, you can refer to the ",paraId:4,tocIndex:3},{value:"jitter",paraId:5,tocIndex:3},{value:" examples. Below are specific demonstrations for ",paraId:4,tocIndex:3},{value:"jitterX",paraId:4,tocIndex:3},{value:" function usage scenarios.",paraId:4,tocIndex:3},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  },\n  encode: {\n    y: 'Horsepower',\n    x: 'Cylinders',\n    shape: 'hollow',\n    color: 'Cylinders',\n  },\n  transform: [{ type: 'sortX', channel: 'x' }, { type: 'jitterX' }],\n  scale: { x: { type: 'point' }, color: { type: 'ordinal' } },\n});\n\nchart.render();\n",paraId:6,tocIndex:3},{value:"Additional note: Like the ",paraId:7,tocIndex:3},{value:"jitter",paraId:7,tocIndex:3},{value:" function, ",paraId:7,tocIndex:3},{value:"jitterX",paraId:7,tocIndex:3},{value:" is a visual adjustment method that may slightly alter the precise position of data, making it unsuitable for scenarios that require extremely high positional accuracy.\nWhen using ",paraId:7,tocIndex:3},{value:"jitterX",paraId:7,tocIndex:3},{value:", it's recommended to adjust parameters appropriately based on specific data and requirements to achieve the best visual effects and data presentation results.",paraId:7,tocIndex:3}]},55556:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(86719);const t=[{value:"jitterY",paraId:0,tocIndex:0},{value:" is a shortcut function for ",paraId:0,tocIndex:0},{value:"jitter",paraId:1,tocIndex:0},{value:", specifically designed to handle discrete ",paraId:0,tocIndex:0},{value:"y",paraId:0,tocIndex:0},{value:" channel scales, generating a ",paraId:0,tocIndex:0},{value:"dy",paraId:0,tocIndex:0},{value:" channel to achieve a scattered effect in the ",paraId:0,tocIndex:0},{value:"y",paraId:0,tocIndex:0},{value:" direction within a certain area.\nIt adds random offsets along the y-axis, visually dispersing data points to avoid overlap and improve readability.",paraId:0,tocIndex:0},{value:"jitterY",paraId:2,tocIndex:1},{value:" has the same applicable scenarios as ",paraId:2,tocIndex:1},{value:"jitter",paraId:2,tocIndex:1},{value:", mainly used for scatter plots, beeswarm plots, and other charts that need to display individual data. It helps users better understand data distribution, especially when data points are densely packed.",paraId:2,tocIndex:1},{value:"Property",paraId:3,tocIndex:2},{value:"Description",paraId:3,tocIndex:2},{value:"Type",paraId:3,tocIndex:2},{value:"Default Value",paraId:3,tocIndex:2},{value:"padding",paraId:3,tocIndex:2},{value:"Spacing between each group [0 ~ 1]",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"0",paraId:3,tocIndex:2},{value:"random",paraId:3,tocIndex:2},{value:"Random function that returns a value [0, 1)",paraId:3,tocIndex:2},{value:"() => number",paraId:3,tocIndex:2},{value:"Math.random",paraId:3,tocIndex:2},{value:"For simple examples, please refer to the ",paraId:4,tocIndex:3},{value:"jitter",paraId:5,tocIndex:3},{value:" examples. Below is a demonstration specific to the ",paraId:4,tocIndex:3},{value:"jitterY",paraId:4,tocIndex:3},{value:" function use case.",paraId:4,tocIndex:3},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  },\n  encode: { x: 'Horsepower', y: 'Cylinders', color: 'Cylinders' },\n  transform: [{ type: 'sortY' }, { type: 'jitterY' }],\n  scale: { y: { type: 'point' }, color: { type: 'ordinal' } },\n});\n\nchart.render();\n",paraId:6,tocIndex:3},{value:"Additional note: Like the ",paraId:7,tocIndex:3},{value:"jitter",paraId:7,tocIndex:3},{value:" function, ",paraId:7,tocIndex:3},{value:"jitterY",paraId:7,tocIndex:3},{value:" is a visual adjustment method that may slightly alter the precise position of data, making it unsuitable for scenarios that require extremely high positional accuracy.\nWhen using ",paraId:7,tocIndex:3},{value:"jitterY",paraId:7,tocIndex:3},{value:", it's recommended to make appropriate parameter adjustments based on specific data and requirements to achieve optimal visual effects and data presentation.",paraId:7,tocIndex:3}]},38154:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(28572);const t=[{value:"Normalizes y-related channels (such as y, y1, etc.) based on the specified basis. Normalization converts data to proportional values between 0 and 1, allowing data of different scales to be compared within the same coordinate system. This transformation preserves the relative relationships in the data while scaling all data according to the same standard.",paraId:0,tocIndex:0},{value:"The following example demonstrates how to create a percentage stacked bar chart showing gender proportions across different age groups.",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  coordinate: { transform: [{ type: 'transpose' }] },\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/87b2ff47-2a33-4509-869c-dae4cdd81163.csv',\n    transform: [\n      {\n        type: 'filter',\n        callback: (d) => d.year === 2000,\n      },\n    ],\n  },\n  transform: [{ type: 'stackY' }, { type: 'normalizeY' }],\n  encode: {\n    x: 'age',\n    y: 'people',\n    color: 'sex',\n  },\n  scale: {\n    color: { type: 'ordinal', range: ['#ca8861', '#675193'] },\n  },\n  axis: {\n    y: { labelFormatter: '.0%' },\n  },\n  labels: [\n    {\n      text: 'people',\n      position: 'inside',\n      style: { fill: 'white' },\n    },\n  ],\n});\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"Percentage Stacked Charts",paraId:3,tocIndex:1},{value:": When you need to show the percentage each part represents of the whole, often used together with stackY transform.",paraId:3,tocIndex:1},{value:"Data Standardization",paraId:3,tocIndex:1},{value:": When different groups have significantly different data magnitudes, but you're more interested in their distribution or proportions.",paraId:3,tocIndex:1},{value:"Relative Comparison",paraId:3,tocIndex:1},{value:": When you need to compare the relative sizes between different categories rather than absolute values.",paraId:3,tocIndex:1},{value:"Property",paraId:4,tocIndex:2},{value:"Type",paraId:4,tocIndex:2},{value:"Default",paraId:4,tocIndex:2},{value:"Description",paraId:4,tocIndex:2},{value:"groupBy",paraId:4,tocIndex:2},{value:"string | string[]",paraId:4,tocIndex:2},{value:"'x'",paraId:4,tocIndex:2},{value:"Specifies the field(s) to group data by. Each group will be normalized independently.",paraId:4,tocIndex:2},{value:"basis",paraId:4,tocIndex:2},{value:"'deviation' | 'first' | 'last' | 'max' | 'mean' | 'median' | 'min' | 'sum' | ((I, Y) => number)",paraId:4,tocIndex:2},{value:"'max'",paraId:4,tocIndex:2},{value:"Specifies the basis value for normalization calculation.",paraId:4,tocIndex:2},{value:"Specifies the field(s) to group data by. Each group will be normalized independently. The field names here refer to the visual channel names in the encode configuration, such as 'x', 'y', 'color', etc. For example, when setting ",paraId:5,tocIndex:3},{value:"groupBy: 'color'",paraId:5,tocIndex:3},{value:", the data will be grouped by the data field corresponding to encode.color.",paraId:5,tocIndex:3},{value:"Type: ",paraId:6,tocIndex:3},{value:"string | string[]",paraId:6,tocIndex:3},{value:"Default: ",paraId:6,tocIndex:3},{value:"'x'",paraId:6,tocIndex:3},{value:"'max'",paraId:7,tocIndex:4},{value:": Use the maximum value within the group as the basis",paraId:7,tocIndex:4},{value:"'min'",paraId:8,tocIndex:4},{value:": Use the minimum value within the group as the basis",paraId:8,tocIndex:4},{value:"'mean'",paraId:9,tocIndex:4},{value:": Use the average value within the group as the basis",paraId:9,tocIndex:4},{value:"'median'",paraId:10,tocIndex:4},{value:": Use the median value within the group as the basis",paraId:10,tocIndex:4},{value:"'sum'",paraId:11,tocIndex:4},{value:": Use the sum of values within the group as the basis",paraId:11,tocIndex:4},{value:"'first'",paraId:12,tocIndex:4},{value:": Use the first value within the group as the basis",paraId:12,tocIndex:4},{value:"'last'",paraId:13,tocIndex:4},{value:": Use the last value within the group as the basis",paraId:13,tocIndex:4},{value:"'deviation'",paraId:14,tocIndex:4},{value:": Use the standard deviation within the group as the basis",paraId:14,tocIndex:4},{value:"Custom function: You can pass a function to customize the basis value calculation. The function receives two parameters:",paraId:15,tocIndex:4},{value:"import { max, min } from '@antv/vendor/d3-array';\n\n// I: index array, Y: data value array\n// Use the range of values as the basis\n(I, Y) => max(I, (i) => Y[+i]) - min(I, (i) => Y[+i]);\n",paraId:16,tocIndex:4},{value:"The following example shows how to use different basis values for normalization:",paraId:17,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { category: 'A', value: 10, group: '1' },\n    { category: 'B', value: 20, group: '1' },\n    { category: 'C', value: 30, group: '1' },\n    { category: 'A', value: 40, group: '2' },\n    { category: 'B', value: 50, group: '2' },\n    { category: 'C', value: 60, group: '2' },\n  ],\n  encode: {\n    x: 'category',\n    y: 'value',\n    color: 'group',\n  },\n  transform: [\n    {\n      type: 'normalizeY',\n      basis: 'mean', // Use average value as the basis\n    },\n  ],\n});\n\nchart.render();\n",paraId:18,tocIndex:6},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\nconst valueList = [\n  'first',\n  'deviation',\n  'last',\n  'max',\n  'mean',\n  'median',\n  'min',\n  'sum',\n];\nconst valueMap = valueList.map((p) => {\n  return {\n    label: p,\n    value: p,\n  };\n});\n\nchart.options({\n  type: 'line',\n  width: 900,\n  height: 600,\n  insetRight: 20,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/indices.json',\n  },\n  encode: { x: (d) => new Date(d.Date), y: 'Close', color: 'Symbol' },\n  transform: [{ type: 'normalizeY', basis: 'first', groupBy: 'color' }],\n  scale: { y: { type: 'log' } },\n  axis: { y: { title: '↑ Change in price (%)' } },\n  labels: [{ text: 'Symbol', selector: 'last', fontSize: 10 }],\n  tooltip: { items: [{ channel: 'y', valueFormatter: '.1f' }] },\n});\n\nconst handleSetValue = (value) => {\n  chart.options({\n    transform: [{ type: 'normalizeY', basis: value, groupBy: 'color' }],\n  });\n  chart.render(); // Re-render the chart\n};\n\n// Insert Value selector\nconst selectorContainer = document.createElement('div');\nselectorContainer.textContent = 'Select basis ';\nconst selector = document.createElement('select');\nselector.innerHTML = valueMap.map(\n  (value, index) =>\n    `<option value=\"${value.value}\" ${index === 0 ? 'selected' : ''}>${\n      value.label\n    }</option>`,\n);\nselector.onchange = (e) => {\n  handleSetValue(e.target.value);\n};\nselectorContainer.appendChild(selector);\ncontainer.insertBefore(selectorContainer, container.childNodes[0]);\n\nchart.render();\n",paraId:19,tocIndex:7},{value:"You can specify how to group data using the groupBy option:",paraId:20,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { category: 'A', year: '2020', value: 100 },\n    { category: 'B', year: '2020', value: 200 },\n    { category: 'A', year: '2021', value: 150 },\n    { category: 'B', year: '2021', value: 300 },\n    { category: 'A', year: '2022', value: 180 },\n    { category: 'B', year: '2022', value: 360 },\n  ],\n  encode: {\n    x: 'year',\n    y: 'value',\n    color: 'category',\n  },\n  transform: [\n    {\n      type: 'normalizeY',\n      groupBy: 'color', // Normalize by color channel (corresponding to data field category)\n    },\n  ],\n  axis: {\n    y: { labelFormatter: '.0%' },\n  },\n});\n\nchart.render();\n",paraId:21,tocIndex:8}]},62298:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(66389);const t=[{value:"In G2, ",paraId:0},{value:"Mark Transform",paraId:0},{value:" provides a convenient mechanism for modifying data and mark options, primarily used to support data analysis. The essence of mark transform is a function that can ",paraId:0},{value:"filter",paraId:0},{value:", ",paraId:0},{value:"modify",paraId:0},{value:", ",paraId:0},{value:"aggregate",paraId:0},{value:", and ",paraId:0},{value:"generate",paraId:0},{value:" new channel values, thereby optimizing graphical displays and enhancing data interpretability.",paraId:0},{value:"Transform is an array, and declared transforms are ",paraId:1,tocIndex:0},{value:"executed in order",paraId:1,tocIndex:0},{value:". Transforms can be configured at the Mark level:",paraId:1,tocIndex:0},{value:"({\n  type: 'interval',\n  transform: [{ type: 'stackY' }, { type: 'sortX' }],\n});\n",paraId:2,tocIndex:0},{value:"Mark transforms modify the data bound to each channel, thereby changing the display form of the chart. For example, the StackY transform stacks the column data bound to the bar chart's y and y1 channels:",paraId:3,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { city: 'London', month: 'Jan.', rainfall: 18.9 },\n    { city: 'London', month: 'Feb.', rainfall: 28.8 },\n    { city: 'London', month: 'Mar.', rainfall: 39.3 },\n    { city: 'London', month: 'Apr.', rainfall: 81.4 },\n    { city: 'London', month: 'May', rainfall: 47 },\n    { city: 'London', month: 'Jun.', rainfall: 20.3 },\n    { city: 'London', month: 'Jul.', rainfall: 24 },\n    { city: 'London', month: 'Aug.', rainfall: 35.6 },\n    { city: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n    { city: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n    { city: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n    { city: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n    { city: 'Berlin', month: 'May', rainfall: 52.6 },\n    { city: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n    { city: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n    { city: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n  ],\n  encode: { x: 'month', y: 'rainfall', color: 'city' },\n  transform: [{ type: 'stackY' }],\n});\n\nchart.render();\n",paraId:4,tocIndex:0},{value:"Transforms can also be configured at the View level:",paraId:5,tocIndex:0},{value:"({\n  type: 'view',\n  transform: [{ type: 'stackY' }, { type: 'sortX' }],\n});\n",paraId:6,tocIndex:0},{value:"Transforms declared on the view will be passed to the marks declared in ",paraId:7,tocIndex:0},{value:"children",paraId:7,tocIndex:0},{value:". If the mark has no transform, it will be set; otherwise, it has no effect. For example, the following stacked area chart with transform:",paraId:7,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { city: 'London', month: 'Jan.', rainfall: 18.9 },\n    { city: 'London', month: 'Feb.', rainfall: 28.8 },\n    { city: 'London', month: 'Mar.', rainfall: 39.3 },\n    { city: 'London', month: 'Apr.', rainfall: 81.4 },\n    { city: 'London', month: 'May', rainfall: 47 },\n    { city: 'London', month: 'Jun.', rainfall: 20.3 },\n    { city: 'London', month: 'Jul.', rainfall: 24 },\n    { city: 'London', month: 'Aug.', rainfall: 35.6 },\n    { city: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n    { city: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n    { city: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n    { city: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n    { city: 'Berlin', month: 'May', rainfall: 52.6 },\n    { city: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n    { city: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n    { city: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n  ],\n  encode: { x: 'month', y: 'rainfall', color: 'city' },\n  transform: [{ type: 'stackY' }], // View-level transform\n  children: [\n    { type: 'area', style: { fillOpacity: 0.5 } },\n    { type: 'line', style: { strokeWidth: 2 }, tooltip: false },\n  ],\n});\n\nchart.render();\n",paraId:8,tocIndex:0},{value:"Common transform functions generally have three roles:",paraId:9,tocIndex:1},{value:"Prevent overlap",paraId:10,tocIndex:1},{value:"When mapping data to graphics, it must be achieved through visual encoding. Among all visual channels, position is the most distinguishable channel (x channel, y channel, etc.). However, in certain cases, positions in graphics may overlap, making data analysis difficult. To address this situation, it's usually necessary to perform certain transforms on the original graphics, such as dodgeX, stackY, jitterX, etc.",paraId:11,tocIndex:1},{value:"Data aggregation",paraId:12,tocIndex:1},{value:"Another type of mark transform is mainly used for data aggregation: such as bin and group. Unlike traditional data aggregation, mark aggregation occurs during rendering, not before rendering. This allows us to operate directly on channel values without needing to manipulate abstract raw data. This greatly improves our efficiency in exploring data.",paraId:13,tocIndex:1},{value:"Drawing graphic annotations",paraId:14,tocIndex:1},{value:"In G2, there are no separate dedicated annotation components. Instead, annotation functionality is achieved through flexible mark configuration. Since annotations are also a type of mark, they can also execute mark transforms.",paraId:15,tocIndex:1},{value:"One function of transforms is to prevent overlap, adjusting data so that graphics don't overlap on the canvas.",paraId:16,tocIndex:2},{value:"💡 ",paraId:17,tocIndex:2},{value:"Principles of Data Adjustment",paraId:17,tocIndex:2},{value:"The purpose of adjusting data is to prevent graphics from obscuring each other, making data understanding clearer. However, we must ensure correct understanding of the data, so the following principles must be followed:",paraId:18,tocIndex:2},{value:"Cannot change the meaning of data, causing user misunderstanding;",paraId:19,tocIndex:2},{value:"Data adjustment boundaries must be clear, cannot confuse different categories of data;",paraId:19,tocIndex:2},{value:"Quantitative (continuous) data can only be accumulated and symmetrized, categorical data can only be adjusted within the current category's range.",paraId:19,tocIndex:2},{value:"For example, in the scatter plot drawn from the following data, points with the same x channel completely overlap, making them difficult to distinguish.",paraId:20,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  },\n  encode: {\n    y: 'Horsepower',\n    x: 'Cylinders',\n    shape: 'hollow',\n    color: 'Cylinders',\n  },\n  scale: { x: { type: 'point' }, color: { type: 'ordinal' } },\n});\n\nchart.render();\n",paraId:21,tocIndex:2},{value:"You can configure the ",paraId:22,tocIndex:2},{value:"jitterX",paraId:23,tocIndex:2},{value:" transform to achieve a spreading effect in the x direction within a certain area.",paraId:22,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  },\n  encode: {\n    y: 'Horsepower',\n    x: 'Cylinders',\n    shape: 'hollow',\n    color: 'Cylinders',\n  },\n  scale: { x: { type: 'point' }, color: { type: 'ordinal' } },\n  transform: [{ type: 'jitterX' }], // Configure jitterX transform to achieve spreading effect in x direction within a certain area\n});\n\nchart.render();\n",paraId:24,tocIndex:2},{value:"This situation is also common in bar charts. For example, in the bar chart drawn from the following data, when the x channel is categorical, multiple records under the same category will overlap, making them difficult to distinguish.",paraId:25,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { city: 'London', month: 'Jan.', rainfall: 18.9 },\n    { city: 'London', month: 'Feb.', rainfall: 28.8 },\n    { city: 'London', month: 'Mar.', rainfall: 39.3 },\n    { city: 'London', month: 'Apr.', rainfall: 81.4 },\n    { city: 'London', month: 'May', rainfall: 47 },\n    { city: 'London', month: 'Jun.', rainfall: 20.3 },\n    { city: 'London', month: 'Jul.', rainfall: 24 },\n    { city: 'London', month: 'Aug.', rainfall: 35.6 },\n    { city: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n    { city: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n    { city: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n    { city: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n    { city: 'Berlin', month: 'May', rainfall: 52.6 },\n    { city: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n    { city: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n    { city: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n  ],\n  encode: { x: 'month', y: 'rainfall', color: 'city' },\n});\n\nchart.render();\n",paraId:26,tocIndex:2},{value:"At this time, you can declare a ",paraId:27,tocIndex:2},{value:"dodgeX",paraId:28,tocIndex:2},{value:" to draw a grouped bar chart:",paraId:27,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { city: 'London', month: 'Jan.', rainfall: 18.9 },\n    { city: 'London', month: 'Feb.', rainfall: 28.8 },\n    { city: 'London', month: 'Mar.', rainfall: 39.3 },\n    { city: 'London', month: 'Apr.', rainfall: 81.4 },\n    { city: 'London', month: 'May', rainfall: 47 },\n    { city: 'London', month: 'Jun.', rainfall: 20.3 },\n    { city: 'London', month: 'Jul.', rainfall: 24 },\n    { city: 'London', month: 'Aug.', rainfall: 35.6 },\n    { city: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n    { city: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n    { city: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n    { city: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n    { city: 'Berlin', month: 'May', rainfall: 52.6 },\n    { city: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n    { city: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n    { city: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n  ],\n  encode: { x: 'month', y: 'rainfall', color: 'city' },\n  transform: [{ type: 'dodgeX' }], // Configure dodgeX transform to achieve bar chart grouping\n});\n\nchart.render();\n",paraId:29,tocIndex:2},{value:"Or declare a ",paraId:30,tocIndex:2},{value:"stackY",paraId:31,tocIndex:2},{value:" to draw a stacked bar chart:",paraId:30,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { city: 'London', month: 'Jan.', rainfall: 18.9 },\n    { city: 'London', month: 'Feb.', rainfall: 28.8 },\n    { city: 'London', month: 'Mar.', rainfall: 39.3 },\n    { city: 'London', month: 'Apr.', rainfall: 81.4 },\n    { city: 'London', month: 'May', rainfall: 47 },\n    { city: 'London', month: 'Jun.', rainfall: 20.3 },\n    { city: 'London', month: 'Jul.', rainfall: 24 },\n    { city: 'London', month: 'Aug.', rainfall: 35.6 },\n    { city: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n    { city: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n    { city: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n    { city: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n    { city: 'Berlin', month: 'May', rainfall: 52.6 },\n    { city: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n    { city: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n    { city: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n  ],\n  encode: { x: 'month', y: 'rainfall', color: 'city' },\n  transform: [{ type: 'stackY' }], // Configure stackY transform to achieve bar chart stacking\n});\n\nchart.render();\n",paraId:32,tocIndex:2},{value:"The following are the built-in mark transforms in G2 for preventing overlap:",paraId:33,tocIndex:2},{value:"Transform",paraId:34,tocIndex:2},{value:"Detailed Description",paraId:34,tocIndex:2},{value:"Example",paraId:34,tocIndex:2},{value:"diffY",paraId:35,tocIndex:2},{value:"Compares y channel values and generates difference types, typically used for measuring changes between two value sets.",paraId:34,tocIndex:2},{value:"dodgeX",paraId:36,tocIndex:2},{value:"Groups and staggers elements in the x channel direction to avoid overlap and facilitate data point distinction.",paraId:34,tocIndex:2},{value:"jitter",paraId:37,tocIndex:2},{value:"Randomly generates slight jitter in both x and y channel directions to handle overlapping data points in graphics.",paraId:34,tocIndex:2},{value:"jitterX",paraId:38,tocIndex:2},{value:"Randomly generates slight jitter in the x channel direction to reduce data point overlap.",paraId:34,tocIndex:2},{value:"jitterY",paraId:39,tocIndex:2},{value:"Randomly generates slight jitter in the y channel direction to reduce data point overlap.",paraId:34,tocIndex:2},{value:"Similar to jitterX but in the y direction",paraId:34,tocIndex:2},{value:"pack",paraId:40,tocIndex:2},{value:"Arranges data points in a compact manner to optimize space utilization, suitable for dense distribution layouts.",paraId:34,tocIndex:2},{value:"sample",paraId:41,tocIndex:2},{value:"Samples data based on certain algorithms to select subsets from original datasets, commonly used for big data processing.",paraId:34,tocIndex:2},{value:"stackY",paraId:42,tocIndex:2},{value:"Stacks data in the y channel direction, typically used to show cumulative effects or distribution patterns.",paraId:34,tocIndex:2},{value:"Another type of mark transform is mainly used for data aggregation: such as ",paraId:43,tocIndex:3},{value:"bin",paraId:44,tocIndex:3},{value:" and ",paraId:43,tocIndex:3},{value:"group",paraId:45,tocIndex:3},{value:". Unlike traditional data aggregation, mark aggregation occurs during rendering, not before rendering. This allows us to operate directly on channel values without needing to manipulate abstract raw data. This greatly improves our efficiency in exploring data.",paraId:43,tocIndex:3},{value:"table({\n  url: 'https://assets.antv.antgroup.com/g2/penguins.json',\n});\n",paraId:46,tocIndex:3},{value:"The following is a dataset of penguin clusters. We'll use this as a case study to introduce some common data aggregation methods in G2.",paraId:47,tocIndex:3},{value:"First, let's draw a scatter plot as follows, showing the correlation between penguin ",paraId:48,tocIndex:3},{value:"culmen_depth_mm",paraId:48,tocIndex:3},{value:" and ",paraId:48,tocIndex:3},{value:"culmen_length_mm",paraId:48,tocIndex:3},{value:".",paraId:48,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n    transform: [\n      { type: 'filter', callback: (d) => d.culmen_depth_mm !== null },\n    ],\n  },\n  encode: { x: (d) => +d.culmen_depth_mm, y: (d) => +d.culmen_length_mm },\n});\n\nchart.render();\n",paraId:49,tocIndex:3},{value:"However, scatter plots cannot intuitively show the distribution of certain data in penguin populations, such as the specific distribution of ",paraId:50,tocIndex:3},{value:"culmen_depth_mm",paraId:50,tocIndex:3},{value:". At this time, you can use ",paraId:50,tocIndex:3},{value:"binX",paraId:51,tocIndex:3},{value:" to bin the data and conduct further data analysis through histograms.",paraId:50,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'rect',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n    transform: [\n      { type: 'filter', callback: (d) => d.culmen_depth_mm !== null },\n    ],\n  },\n  encode: { x: (d) => +d.culmen_depth_mm },\n  transform: [{ type: 'binX', y: 'count' }],\n  style: { insetLeft: 1 },\n});\n\nchart.render();\n",paraId:52,tocIndex:3},{value:"Bin is mainly used to aggregate numerical data, while group is mainly for discrete data. In the above example, if you want to analyze the number of different penguin species on different islands, you can use ",paraId:53,tocIndex:3},{value:"groupX",paraId:54,tocIndex:3},{value:" to group the x channel and aggregate the y channel using the count method.",paraId:53,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n    transform: [\n      { type: 'filter', callback: (d) => d.culmen_depth_mm !== null },\n    ],\n  },\n  encode: { x: 'island', color: 'species' },\n  transform: [\n    {\n      type: 'groupX',\n      y: 'count',\n    },\n    {\n      type: 'stackY',\n    },\n  ],\n});\n\nchart.render();\n",paraId:55,tocIndex:3},{value:"If we don't care about specific quantities but want to focus on the proportions of different penguin species, we can use ",paraId:56,tocIndex:3},{value:"normalizeY",paraId:57,tocIndex:3},{value:" for normalization.",paraId:56,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n    transform: [\n      { type: 'filter', callback: (d) => d.culmen_depth_mm !== null },\n    ],\n  },\n  encode: { x: 'island', color: 'species' },\n  transform: [\n    {\n      type: 'groupX',\n      y: 'count',\n    },\n    {\n      type: 'stackY',\n    },\n    {\n      type: 'normalizeY',\n    },\n  ],\n});\n\nchart.render();\n",paraId:58,tocIndex:3},{value:"The following are the built-in mark transforms in G2 for data aggregation:",paraId:59,tocIndex:3},{value:"Transform",paraId:60,tocIndex:3},{value:"Detailed Description",paraId:60,tocIndex:3},{value:"Example",paraId:60,tocIndex:3},{value:"bin",paraId:61,tocIndex:3},{value:"Groups data into fixed intervals (or bins), typically used for histogram construction.",paraId:60,tocIndex:3},{value:"binX",paraId:62,tocIndex:3},{value:"Groups data in the x channel direction, generating a series of intervals (or bins).",paraId:60,tocIndex:3},{value:"flexX",paraId:63,tocIndex:3},{value:"Flexibly arranges data on the x channel for adaptive layouts or special arrangement requirements.",paraId:60,tocIndex:3},{value:"group",paraId:64,tocIndex:3},{value:"Groups data based on certain conditions or attributes, dividing data into multiple subsets.",paraId:60,tocIndex:3},{value:"groupColor",paraId:65,tocIndex:3},{value:"Groups data colors based on data attributes, commonly used for categorical data visualization.",paraId:60,tocIndex:3},{value:"groupX",paraId:66,tocIndex:3},{value:"Groups based on x channel data attributes, commonly used for data visualization with categorical dimensions.",paraId:60,tocIndex:3},{value:"groupY",paraId:67,tocIndex:3},{value:"Groups based on y channel data attributes, commonly used for arranging data by category on the y channel.",paraId:60,tocIndex:3},{value:"normalizeY",paraId:68,tocIndex:3},{value:"Normalizes data on the y channel, typically adjusting data proportionally for comparison and visualization.",paraId:60,tocIndex:3},{value:"select",paraId:69,tocIndex:3},{value:"Filters data subsets based on specified conditions.",paraId:60,tocIndex:3},{value:"selectX",paraId:70,tocIndex:3},{value:"Filters based on x channel data, selecting data subsets that meet range or condition criteria.",paraId:60,tocIndex:3},{value:"selectY",paraId:71,tocIndex:3},{value:"Filters based on y channel data, selecting data subsets that meet range or condition criteria.",paraId:60,tocIndex:3},{value:"sortColor",paraId:72,tocIndex:3},{value:"Sorts data based on color priority to generate ordered visual structures by color.",paraId:60,tocIndex:3},{value:"sortX",paraId:73,tocIndex:3},{value:"Sorts data on the x channel to generate visual graphics with sequential relationships.",paraId:60,tocIndex:3},{value:"sortY",paraId:74,tocIndex:3},{value:"Sorts data on the y channel to generate visual graphics with sequential relationships.",paraId:60,tocIndex:3},{value:"stackEnter",paraId:75,tocIndex:3},{value:"Stacks enterDuration and enterDelay channels to achieve grouped animation effects.",paraId:60,tocIndex:3},{value:"symmetryY",paraId:76,tocIndex:3},{value:"Generates symmetric distribution in the y channel direction for constructing symmetrical data layouts.",paraId:60,tocIndex:3},{value:"As mentioned in the mark documentation, G2 does not provide separate dedicated annotation components. Instead, annotation functionality is achieved through flexible mark configuration. Since annotations are also a type of mark, they can also execute mark transforms.",paraId:77,tocIndex:4},{value:"Annotation data usually maintains consistency with the chart's data source. Based on this data source, annotation content is generated through mark transforms. During annotation construction, ",paraId:78,tocIndex:4},{value:"group",paraId:78,tocIndex:4},{value:" can be used to group data by specific categories or attributes, or ",paraId:78,tocIndex:4},{value:"select",paraId:78,tocIndex:4},{value:" can be used to filter subsets that meet specific conditions, thereby achieving focused and enhanced processing of key information. This flexible mark transform not only helps effectively construct annotations but also ensures that annotation content accurately fits the data's logic and visual needs, while improving chart readability and expression.",paraId:78,tocIndex:4},{value:"GroupX is a commonly used mark transform that groups data based on the ",paraId:79,tocIndex:5},{value:"x channel",paraId:79,tocIndex:5},{value:" and performs aggregation processing on specified channels. Specifically, it aggregates data according to the grouping dimension of the ",paraId:79,tocIndex:5},{value:"x channel",paraId:79,tocIndex:5},{value:" and further processes the data on the ",paraId:79,tocIndex:5},{value:"y channel",paraId:79,tocIndex:5},{value:". For example, it can calculate and take the average value (",paraId:79,tocIndex:5},{value:"mean",paraId:79,tocIndex:5},{value:") of each group's ",paraId:79,tocIndex:5},{value:"y data",paraId:79,tocIndex:5},{value:" as the aggregation result. Finally, the aggregated data is used to draw marks (such as lineY), generating a statistically meaningful average line. This method simplifies the grouping and aggregation process, allowing direct operation on aggregated data during graphic rendering, improving data processing efficiency and visualization expression accuracy.",paraId:79,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n  },\n  children: [\n    {\n      type: 'interval',\n      encode: {\n        x: (d) => new Date(d.date).getUTCMonth(),\n        y: 'precipitation',\n      },\n      transform: [{ type: 'groupX', y: 'mean' }],\n      scale: { y: { tickCount: 5, domainMax: 6 } },\n      tooltip: { items: [{ channel: 'y', valueFormatter: '.2f' }] },\n    },\n    {\n      type: 'lineY',\n      encode: { y: 'precipitation' },\n      transform: [{ type: 'groupX', y: 'mean' }],\n      style: {\n        stroke: '#F4664A',\n        strokeOpacity: 1,\n        lineWidth: 2,\n        lineDash: [3, 3],\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:80,tocIndex:5},{value:"Similarly, we can use the groupY transform to draw median lines for histograms.",paraId:81,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/movies.json',\n    transform: [{ type: 'filter', callback: (d) => d['IMDB Rating'] > 0 }],\n  },\n  children: [\n    {\n      type: 'rect',\n      encode: { x: 'IMDB Rating' },\n      transform: [{ type: 'binX', y: 'count', thresholds: 9 }],\n      scale: { y: { domainMax: 1000 } },\n      style: { inset: 1 },\n    },\n    {\n      type: 'lineX',\n      encode: { x: 'IMDB Rating' },\n      transform: [{ type: 'groupY', x: 'median' }],\n      style: {\n        stroke: '#F4664A',\n        strokeOpacity: 1,\n        lineWidth: 2,\n        lineDash: [4, 4],\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:82,tocIndex:5},{value:"In visualization, when you need to highlight certain special positions (such as start points, end points, or maximum values), the select mark transform is a very flexible and efficient choice. Through select transform, you can filter data based on conditions and mark specific positions. The following example demonstrates how to use selectY to filter ",paraId:83,tocIndex:6},{value:"line chart",paraId:83,tocIndex:6},{value:" data and mark ",paraId:83,tocIndex:6},{value:"peak positions",paraId:83,tocIndex:6},{value:" in the chart:",paraId:83,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: [\n    { month: 'Jan', city: 'Tokyo', temperature: 7 },\n    { month: 'Jan', city: 'London', temperature: 3.9 },\n    { month: 'Feb', city: 'Tokyo', temperature: 6.9 },\n    { month: 'Feb', city: 'London', temperature: 4.2 },\n    { month: 'Mar', city: 'Tokyo', temperature: 9.5 },\n    { month: 'Mar', city: 'London', temperature: 5.7 },\n    { month: 'Apr', city: 'Tokyo', temperature: 14.5 },\n    { month: 'Apr', city: 'London', temperature: 8.5 },\n    { month: 'May', city: 'Tokyo', temperature: 18.4 },\n    { month: 'May', city: 'London', temperature: 11.9 },\n    { month: 'Jun', city: 'Tokyo', temperature: 21.5 },\n    { month: 'Jun', city: 'London', temperature: 15.2 },\n    { month: 'Jul', city: 'Tokyo', temperature: 25.2 },\n    { month: 'Jul', city: 'London', temperature: 17 },\n    { month: 'Aug', city: 'Tokyo', temperature: 26.5 },\n    { month: 'Aug', city: 'London', temperature: 16.6 },\n    { month: 'Sep', city: 'Tokyo', temperature: 23.3 },\n    { month: 'Sep', city: 'London', temperature: 14.2 },\n    { month: 'Oct', city: 'Tokyo', temperature: 18.3 },\n    { month: 'Oct', city: 'London', temperature: 10.3 },\n    { month: 'Nov', city: 'Tokyo', temperature: 13.9 },\n    { month: 'Nov', city: 'London', temperature: 6.6 },\n    { month: 'Dec', city: 'Tokyo', temperature: 9.6 },\n    { month: 'Dec', city: 'London', temperature: 4.8 },\n  ],\n  encode: { x: 'month', y: 'temperature', color: 'city' },\n  scale: { x: { range: [0, 1] }, y: { nice: true } },\n  axis: { y: { labelFormatter: (d) => d + '°C' } },\n  children: [\n    { type: 'line', encode: { shape: 'smooth' } },\n    {\n      type: 'text',\n      encode: {\n        x: 'month',\n        y: 'temperature',\n        text: (d) => `Peak: ${d.temperature}`,\n      },\n      transform: [\n        {\n          type: 'selectY',\n          groupBy: 'color',\n          selector: 'max',\n        },\n      ],\n      style: {\n        fill: 'orange',\n        fontSize: 16,\n        dy: -15,\n      },\n      tooltip: false,\n    },\n    {\n      type: 'point',\n      encode: { x: 'month', y: 'temperature' },\n      transform: [\n        {\n          type: 'selectY',\n          groupBy: 'color',\n          selector: 'max',\n        },\n      ],\n      tooltip: false,\n    },\n  ],\n});\n\nchart.render();\n",paraId:84,tocIndex:6},{value:"We can also declare multiple transforms simultaneously. For example, in the penguin example above, if we consider one more data dimension: penguin gender, we can continuously declare binX and stackY transforms. Note that transforms in G2 are executed in order, so swapping the order of binX and stackY in the following example would cause an error.",paraId:85,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'rect',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n\n    transform: [\n      { type: 'filter', callback: (d) => d.culmen_depth_mm !== null },\n    ],\n  },\n  encode: { x: (d) => +d.culmen_depth_mm, color: 'sex' },\n  transform: [\n    { type: 'binX', y: 'count' }, // Declare binX transform\n    { type: 'stackY', orderBy: 'sum', reverse: true }, // Declare stackY transform\n  ],\n  style: { insetLeft: 1 },\n});\n\nchart.render();\n",paraId:86,tocIndex:8}]},61513:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(60295);const t=[{value:"pack",paraId:0,tocIndex:0},{value:" is a grid layout transform that allows graphical elements to be compactly arranged in a container space according to a row-column structure. The ",paraId:0,tocIndex:0},{value:"pack",paraId:0,tocIndex:0},{value:" transform works through the following main steps:",paraId:0,tocIndex:0},{value:"Calculate the optimal arrangement grid (number of rows and columns) based on the container's aspect ratio and number of elements",paraId:1,tocIndex:0},{value:"Arrange elements in the grid according to the specified direction (row-first or column-first)",paraId:1,tocIndex:0},{value:"Apply scaling and translation transforms to each element to fit the grid cells while maintaining appropriate spacing",paraId:1,tocIndex:0},{value:"The ",paraId:2,tocIndex:1},{value:"pack",paraId:2,tocIndex:1},{value:" transform is primarily used for Unit Visualization, effectively solving layout problems for large numbers of discrete elements. Common use cases include:",paraId:2,tocIndex:1},{value:"Displaying large numbers of discrete elements in limited space: such as scatter plots with dense data points that need to avoid overlap",paraId:3,tocIndex:1},{value:"Distribution display of categorical data: visualizations that highlight quantity differences between categories, such as demographic analysis",paraId:3,tocIndex:1},{value:"For example, the following case shows the distribution of Titanic passengers by cabin class and survival status. Through the ",paraId:4,tocIndex:1},{value:"pack",paraId:4,tocIndex:1},{value:" transform, each passenger point is arranged in an orderly manner, clearly showing the quantity distribution of each category.",paraId:4,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'facetRect',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/titanic.json',\n    transform: [\n      { type: 'sortBy', fields: ['survived'] },\n      {\n        type: 'map',\n        callback: ({ survived, ...d }) => ({\n          ...d,\n          survived: survived + '',\n        }),\n      },\n    ],\n  },\n  encode: { x: 'pclass' },\n  children: [\n    {\n      type: 'point',\n      encode: { color: 'survived', shape: 'point', size: 3 },\n      transform: [{ type: 'pack' }],\n      legend: {\n        color: { labelFormatter: (d) => (d === '1' ? 'Yes' : 'No') },\n      },\n      tooltip: { title: '', items: ['pclass', 'survived'] },\n    },\n  ],\n});\n\nchart.render();\n",paraId:5,tocIndex:1},{value:"For more examples, you can check the ",paraId:6,tocIndex:1},{value:"Unit Visualization",paraId:7,tocIndex:1},{value:" page.",paraId:6,tocIndex:1},{value:"Property",paraId:8,tocIndex:2},{value:"Description",paraId:8,tocIndex:2},{value:"Type",paraId:8,tocIndex:2},{value:"Default",paraId:8,tocIndex:2},{value:"Required",paraId:8,tocIndex:2},{value:"padding",paraId:8,tocIndex:2},{value:"Spacing between each element, in pixels",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:"0",paraId:8,tocIndex:2},{value:"direction",paraId:8,tocIndex:2},{value:"Stacking direction of elements",paraId:8,tocIndex:2},{value:"row",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"col",paraId:8,tocIndex:2},{value:"col",paraId:8,tocIndex:2},{value:"padding",paraId:9,tocIndex:3},{value:" controls the spacing between each element, measured in pixels. Increasing the ",paraId:9,tocIndex:3},{value:"padding",paraId:9,tocIndex:3},{value:" value creates more visible separation between elements. When the value is 0, elements are arranged closely together.",paraId:9,tocIndex:3},{value:"direction",paraId:10,tocIndex:4},{value:" determines the stacking direction of elements in the grid:",paraId:10,tocIndex:4},{value:"col",paraId:11,tocIndex:4},{value:": Column (vertical) stacking",paraId:11,tocIndex:4},{value:"row",paraId:11,tocIndex:4},{value:": Row (horizontal) stacking",paraId:11,tocIndex:4},{value:"By adjusting ",paraId:12,tocIndex:4},{value:"direction",paraId:12,tocIndex:4},{value:", you can change the layout direction of data points in the chart to suit different reading preferences and data characteristics.",paraId:12,tocIndex:4},{value:"The following case shows the distribution of Titanic passengers by gender and survival status. By configuring the ",paraId:13,tocIndex:5},{value:"padding",paraId:13,tocIndex:5},{value:" and ",paraId:13,tocIndex:5},{value:"direction",paraId:13,tocIndex:5},{value:" parameters of the ",paraId:13,tocIndex:5},{value:"pack",paraId:13,tocIndex:5},{value:" transform, the results are more intuitive.",paraId:13,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'facetRect',\n  autoFit: true,\n  shareData: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/titanic.json',\n    transform: [\n      { type: 'sortBy', fields: ['survived'] },\n      {\n        type: 'map',\n        callback: ({ survived, ...d }) => ({\n          ...d,\n          survived: survived + '',\n        }),\n      },\n    ],\n  },\n  encode: { x: 'sex' },\n  children: [\n    {\n      type: 'point',\n      encode: { color: 'survived', shape: 'point', size: 3 },\n      transform: [{ type: 'pack', padding: 5, direction: 'row' }],\n      legend: {\n        color: { labelFormatter: (d) => (d === '1' ? 'Yes' : 'No') },\n      },\n      tooltip: { title: '', items: ['sex', 'survived'] },\n    },\n  ],\n});\n\nchart.render();\n",paraId:14,tocIndex:5}]},62986:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(46445);const t=[{value:"For line, column, bar, and scatter plot charts, when the data volume is significantly larger than the screen pixels, enabling some built-in sampling strategies can effectively optimize chart rendering efficiency. This feature is disabled by default, meaning all original data is rendered.",paraId:0},{value:"Here's an example of using ",paraId:1,tocIndex:0},{value:"sample",paraId:1,tocIndex:0},{value:":",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.data(data);\n\nchart.line().encode('x', 'x').encode('y', 'y').transform({\n  type: 'sample',\n  thresholds: 500,\n  strategy: 'max',\n});\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"Property",paraId:3,tocIndex:1},{value:"Description",paraId:3,tocIndex:1},{value:"Type",paraId:3,tocIndex:1},{value:"Default",paraId:3,tocIndex:1},{value:"groupBy",paraId:3,tocIndex:1},{value:"Field for data grouping",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"string[]",paraId:3,tocIndex:1},{value:"series",paraId:3,tocIndex:1},{value:"thresholds",paraId:3,tocIndex:1},{value:"Data volume threshold for enabling sampling strategy",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"2000",paraId:3,tocIndex:1},{value:"strategy",paraId:3,tocIndex:1},{value:"Sampling strategy to use",paraId:3,tocIndex:1},{value:"Strategy",paraId:3,tocIndex:1},{value:"median",paraId:3,tocIndex:1},{value:"strategy",paraId:4,tocIndex:1},{value:" has 6 built-in strategies:",paraId:4,tocIndex:1},{value:"lttb",paraId:5,tocIndex:1},{value:" - Uses the Largest-Triangle-Three-Bucket algorithm, which can best preserve the trend, shape, and extreme values of the line after sampling.",paraId:5,tocIndex:1},{value:"median",paraId:5,tocIndex:1},{value:" - Takes the median of filtered points",paraId:5,tocIndex:1},{value:"max",paraId:5,tocIndex:1},{value:" - Takes the maximum value of filtered points",paraId:5,tocIndex:1},{value:"min",paraId:5,tocIndex:1},{value:" - Takes the minimum value of filtered points",paraId:5,tocIndex:1},{value:"first",paraId:5,tocIndex:1},{value:" - Takes the first value",paraId:5,tocIndex:1},{value:"last",paraId:5,tocIndex:1},{value:" - Takes the last value",paraId:5,tocIndex:1},{value:"(I: number[], X: number[], Y: number[], thresholds: number) => number[]",paraId:5,tocIndex:1},{value:" - Uses a custom function for sampling",paraId:5,tocIndex:1},{value:"How to implement a custom sampling strategy?",paraId:6,tocIndex:2},{value:"function strategy(I: number[], X: number[], Y: number[], thresholds: number) {\n  // Sample this group of data here and return an array of data indices\n  return [1, 101, 202 /*...*/];\n}\n\nchart\n  .line()\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .transform([{ type: 'sample', strategy }]);\n",paraId:7,tocIndex:2}]},75364:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(41038);const t=[{value:"The ",paraId:0,tocIndex:0},{value:"select",paraId:0,tocIndex:0},{value:" mark transform is a very flexible and efficient selection. It groups data by specified channels and selects data from each group according to specified channels and selectors. Through the select transform, you can filter data based on conditions and implement marking at specific positions.",paraId:0,tocIndex:0},{value:"Peak Annotation",paraId:1,tocIndex:1},{value:": Mark the highest/lowest points in line charts",paraId:1,tocIndex:1},{value:"Start/End Annotation",paraId:2,tocIndex:1},{value:": Highlight start/end points in time series",paraId:2,tocIndex:1},{value:"Category Annotation",paraId:3,tocIndex:1},{value:": Differentiate marks for different data categories",paraId:3,tocIndex:1},{value:"Trend Annotation",paraId:4,tocIndex:1},{value:": Mark statistical feature points like mean, median, etc.",paraId:4,tocIndex:1},{value:"Property",paraId:5,tocIndex:2},{value:"Description",paraId:5,tocIndex:2},{value:"Type",paraId:5,tocIndex:2},{value:"Default",paraId:5,tocIndex:2},{value:"groupBy",paraId:5,tocIndex:2},{value:"Group by specified channels",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"string[]",paraId:5,tocIndex:2},{value:"series",paraId:5,tocIndex:2},{value:"channel",paraId:5,tocIndex:2},{value:"For each group, use specified channel for data extraction",paraId:5,tocIndex:2},{value:"Channel",paraId:6,tocIndex:2},{value:"selector",paraId:5,tocIndex:2},{value:"For each group, specify the corresponding data extraction operation",paraId:5,tocIndex:2},{value:"Selector",paraId:7,tocIndex:2},{value:"first",paraId:5,tocIndex:2},{value:"Theoretically, ",paraId:8,tocIndex:3},{value:"channel",paraId:8,tocIndex:3},{value:" can be set to all channel values. For details, please refer to the ",paraId:8,tocIndex:3},{value:"encode",paraId:9,tocIndex:3},{value:" documentation. All enumeration values are as follows:",paraId:8,tocIndex:3},{value:"type Channel =\n  | 'x'\n  | 'y'\n  | 'z'\n  | 'x1'\n  | 'y1'\n  | 'series'\n  | 'color'\n  | 'opacity'\n  | 'shape'\n  | 'size'\n  | 'key'\n  | 'groupKey'\n  | 'position'\n  | 'series'\n  | 'enterType'\n  | 'enterEasing'\n  | 'enterDuration'\n  | 'enterDelay'\n  | 'updateType'\n  | 'updateEasing'\n  | 'updateDuration'\n  | 'updateDelay'\n  | 'exitType'\n  | 'exitEasing'\n  | 'exitDuration'\n  | 'exitDelay'\n  | `position${number}`;\n",paraId:10,tocIndex:3},{value:"type Selector =\n  | 'min' // Minimum value\n  | 'max' // Maximum value\n  | 'first' // First value\n  | 'last' // Last value\n  | 'mean' // Mean value\n  | 'median' // Median value\n  | ((I: number[], V: number[]) => number[]); // Custom selection function\n",paraId:11,tocIndex:4},{value:"As shown below, add value annotations to the top of bar charts:",paraId:12,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { letter: 'A', frequency: 0.08167 },\n  { letter: 'B', frequency: 0.01492 },\n  { letter: 'C', frequency: 0.02782 },\n  { letter: 'D', frequency: 0.04253 },\n  { letter: 'E', frequency: 0.12702 },\n  { letter: 'F', frequency: 0.02288 },\n  { letter: 'G', frequency: 0.02015 },\n  { letter: 'H', frequency: 0.06094 },\n  { letter: 'I', frequency: 0.06966 },\n  { letter: 'J', frequency: 0.00153 },\n  { letter: 'K', frequency: 0.00772 },\n  { letter: 'L', frequency: 0.04025 },\n  { letter: 'M', frequency: 0.02406 },\n  { letter: 'N', frequency: 0.06749 },\n  { letter: 'O', frequency: 0.07507 },\n  { letter: 'P', frequency: 0.01929 },\n  { letter: 'Q', frequency: 0.00095 },\n  { letter: 'R', frequency: 0.05987 },\n  { letter: 'S', frequency: 0.06327 },\n  { letter: 'T', frequency: 0.09056 },\n  { letter: 'U', frequency: 0.02758 },\n  { letter: 'V', frequency: 0.00978 },\n  { letter: 'W', frequency: 0.0236 },\n  { letter: 'X', frequency: 0.0015 },\n  { letter: 'Y', frequency: 0.01974 },\n  { letter: 'Z', frequency: 0.00074 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  width: 800,\n  paddingLeft: 50,\n  paddingRight: 100,\n  data,\n  children: [\n    // Bar chart mark configuration\n    {\n      type: 'interval',\n      encode: {\n        x: 'letter',\n        y: 'frequency',\n      },\n    },\n    // Text mark configuration\n    {\n      type: 'text',\n      encode: {\n        x: 'letter',\n        y: 'frequency',\n        text: 'frequency',\n        series: 'frequency',\n      },\n      transform: [\n        {\n          // Use select transform mark\n          type: 'select',\n          // Based on y channel\n          channel: 'y',\n          // Select the highest point\n          selector: 'max',\n        },\n      ],\n      style: {\n        // Annotation text offset 12 pixels to the left\n        dx: -12,\n        // Annotation text offset 12 pixels upward\n        dy: -12,\n      },\n    },\n  ],\n});\n\nchart.render();\n",paraId:13,tocIndex:5}]},49659:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(62e3);const t=[{value:"selectX",paraId:0,tocIndex:0},{value:" filters data based on the x channel, selecting a subset of data that meets the specified range or condition.",paraId:0,tocIndex:0},{value:"Peak annotation: Mark the highest/lowest points in line charts",paraId:1,tocIndex:1},{value:"Start/end annotation: Highlight start/end points in time series",paraId:2,tocIndex:1},{value:"Category annotation: Differentiate marks for different data categories",paraId:3,tocIndex:1},{value:"Trend annotation: Mark statistical feature points like mean, median, etc.",paraId:4,tocIndex:1},{value:"Property",paraId:5,tocIndex:2},{value:"Description",paraId:5,tocIndex:2},{value:"Type",paraId:5,tocIndex:2},{value:"Default",paraId:5,tocIndex:2},{value:"groupBy",paraId:5,tocIndex:2},{value:"Group by specified channels",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"string[]",paraId:5,tocIndex:2},{value:"series",paraId:5,tocIndex:2},{value:"selector",paraId:5,tocIndex:2},{value:"Specify data extraction operation for each group",paraId:5,tocIndex:2},{value:"Selector",paraId:6,tocIndex:2},{value:"first",paraId:5,tocIndex:2},{value:"type Selector =\n  | 'min' // Minimum value\n  | 'max' // Maximum value\n  | 'first' // First value\n  | 'last' // Last value\n  | 'mean' // Mean value\n  | 'median' // Median value\n  | ((I: number[], V: number[]) => number[]); // Custom selection function\n",paraId:7,tocIndex:3},{value:"As shown below, annotate different data types:",paraId:8,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  width: 800,\n  paddingLeft: 50,\n  paddingRight: 100,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/indices.json',\n  },\n  children: [\n    // Line mark configuration\n    {\n      type: 'line',\n      encode: {\n        x: (d) => new Date(d.Date),\n        y: 'Close',\n        color: 'Symbol',\n      },\n      axis: {\n        y: {\n          title: '↑ Change in price (%)',\n        },\n      },\n    },\n    // Text annotation configuration\n    {\n      type: 'text',\n      encode: {\n        x: (d) => new Date(d.Date),\n        y: 'Close',\n        series: 'Symbol',\n        color: 'Symbol',\n        text: 'Symbol',\n      },\n      transform: [\n        {\n          // Use selectX transform\n          type: 'selectX',\n          // Select the last data point\n          selector: 'last',\n        },\n      ],\n      style: {\n        // Offset annotation text 12 pixels to the right\n        dx: 12,\n      },\n      // Disable tooltip for text\n      tooltip: false,\n    },\n  ],\n});\n\nchart.render();\n",paraId:9,tocIndex:4}]},22973:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(50998);const t=[{value:"selectY",paraId:0,tocIndex:0},{value:" filters data based on the y channel, selecting a subset of data that meets specific ranges or conditions.",paraId:0,tocIndex:0},{value:"Peak annotation: Mark the highest/lowest points in line charts",paraId:1,tocIndex:1},{value:"Start/end annotation: Highlight start/end points in time series",paraId:2,tocIndex:1},{value:"Category annotation: Apply differentiated marking for different data categories",paraId:3,tocIndex:1},{value:"Trend annotation: Mark statistical features like mean, median values",paraId:4,tocIndex:1},{value:"Property",paraId:5,tocIndex:2},{value:"Description",paraId:5,tocIndex:2},{value:"Type",paraId:5,tocIndex:2},{value:"Default",paraId:5,tocIndex:2},{value:"groupBy",paraId:5,tocIndex:2},{value:"Group by specified channels",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"string[]",paraId:5,tocIndex:2},{value:"series",paraId:5,tocIndex:2},{value:"selector",paraId:5,tocIndex:2},{value:"Specify data extraction operation for each group",paraId:5,tocIndex:2},{value:"Selector",paraId:6,tocIndex:2},{value:"first",paraId:5,tocIndex:2},{value:"type Selector =\n  | 'min' // Minimum value\n  | 'max' // Maximum value\n  | 'first' // First value\n  | 'last' // Last value\n  | 'mean' // Mean value\n  | 'median' // Median value\n  | ((I: number[], V: number[]) => number[]); // Custom selection function\n",paraId:7,tocIndex:3},{value:"As shown below, annotate the highest temperature for each city in the chart:",paraId:8,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { month: 1, city: 'Tokyo', temperature: 7 },\n  { month: 1, city: 'London', temperature: 3.9 },\n  { month: 2, city: 'Tokyo', temperature: 6.9 },\n  { month: 2, city: 'London', temperature: 4.2 },\n  { month: 3, city: 'Tokyo', temperature: 9.5 },\n  { month: 3, city: 'London', temperature: 5.7 },\n  { month: 4, city: 'Tokyo', temperature: 14.5 },\n  { month: 4, city: 'London', temperature: 8.5 },\n  { month: 5, city: 'Tokyo', temperature: 18.4 },\n  { month: 5, city: 'London', temperature: 11.9 },\n  { month: 6, city: 'Tokyo', temperature: 21.5 },\n  { month: 6, city: 'London', temperature: 15.2 },\n  { month: 7, city: 'Tokyo', temperature: 25.2 },\n  { month: 7, city: 'London', temperature: 17 },\n  { month: 8, city: 'Tokyo', temperature: 26.5 },\n  { month: 8, city: 'London', temperature: 16.6 },\n  { month: 9, city: 'Tokyo', temperature: 23.3 },\n  { month: 9, city: 'London', temperature: 14.2 },\n  { month: 10, city: 'Tokyo', temperature: 18.3 },\n  { month: 10, city: 'London', temperature: 10.3 },\n  { month: 11, city: 'Tokyo', temperature: 13.9 },\n  { month: 11, city: 'London', temperature: 6.6 },\n  { month: 12, city: 'Tokyo', temperature: 9.6 },\n  { month: 12, city: 'London', temperature: 4.8 },\n];\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  width: 800,\n  paddingLeft: 50,\n  paddingRight: 100,\n  data,\n  children: [\n    // Line chart mark configuration\n    {\n      type: 'line',\n      encode: {\n        x: 'month',\n        y: 'temperature',\n        color: 'city',\n      },\n      axis: {\n        y: {\n          title: 'Temperature',\n        },\n      },\n    },\n    // Text mark configuration\n    {\n      type: 'text',\n      encode: {\n        x: 'month',\n        y: 'temperature',\n        series: 'city',\n        text: (d) => `Max Temperature: ${d.temperature}°C`,\n      },\n      transform: [\n        {\n          // Use selectY transform\n          type: 'selectY',\n          // Select maximum value\n          selector: 'max',\n        },\n      ],\n      style: {\n        // Offset annotation text by 12 pixels along y-axis\n        dy: -12,\n      },\n      // Disable tooltip for text mark\n      tooltip: false,\n    },\n    // Point mark configuration\n    {\n      type: 'point',\n      encode: {\n        x: 'month',\n        y: 'temperature',\n        color: 'city',\n        series: 'city',\n      },\n      transform: [\n        {\n          // Use selectY transform\n          type: 'selectY',\n          // Select maximum value\n          selector: 'max',\n        },\n      ],\n      // Disable tooltip for point mark\n      tooltip: false,\n    },\n  ],\n});\n\nchart.render();\n",paraId:9,tocIndex:4}]},9628:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(66259);const t=[{value:"sortColor",paraId:0,tocIndex:0},{value:" is a commonly used data transform provided by G2, used for sorting the domain of discrete color channels. By specifying sorting criteria, you can arrange color groups in a chart by certain measure values (such as y, x, etc.) in ascending or descending order, making it more intuitive to display the size relationships or distribution trends of grouped data.",paraId:0,tocIndex:0},{value:"sortColor",paraId:0,tocIndex:0},{value:" supports flexible configurations for sorting channels, aggregation methods, and slicing. It's commonly used in scenarios like highlighting key points, optimizing readability, and comparative analysis, especially suitable for grouped bar charts, grouped column charts, stacked charts, and more.",paraId:0,tocIndex:0},{value:"Grouped Bar/Column Chart Sorting",paraId:1,tocIndex:1},{value:": Arrange color groups (such as different categories or series) by values from high to low (or low to high) for easy comparison of data across groups.",paraId:1,tocIndex:1},{value:"Facet/Multi-series Sorting",paraId:1,tocIndex:1},{value:": In facet or multi-series scenarios, sort by certain metrics within groups to highlight differences between groups.",paraId:1,tocIndex:1},{value:"Combined with Other Transforms",paraId:1,tocIndex:1},{value:": Often used in combination with other transforms like ",paraId:1,tocIndex:1},{value:"sortX",paraId:1,tocIndex:1},{value:", ",paraId:1,tocIndex:1},{value:"dodgeX",paraId:1,tocIndex:1},{value:", etc., to achieve more complex data layouts and visual effects.",paraId:1,tocIndex:1},{value:"Property",paraId:2,tocIndex:2},{value:"Description",paraId:2,tocIndex:2},{value:"Type",paraId:2,tocIndex:2},{value:"Default",paraId:2,tocIndex:2},{value:"by",paraId:2,tocIndex:2},{value:"Specify the channel for sorting (e.g., 'y', 'x', etc.)",paraId:2,tocIndex:2},{value:"string",paraId:2,tocIndex:2},{value:"'y'",paraId:2,tocIndex:2},{value:"reverse",paraId:2,tocIndex:2},{value:"Whether to reverse the order",paraId:2,tocIndex:2},{value:"boolean",paraId:2,tocIndex:2},{value:"false",paraId:2,tocIndex:2},{value:"reducer",paraId:2,tocIndex:2},{value:"Aggregation method for multi-value comparison",paraId:2,tocIndex:2},{value:"Reducer",paraId:2,tocIndex:2},{value:"'max'",paraId:2,tocIndex:2},{value:"Specifies the channel used as the sorting criterion, commonly used values include ",paraId:3,tocIndex:3},{value:"'y'",paraId:3,tocIndex:3},{value:" (sort by y values), ",paraId:3,tocIndex:3},{value:"'x'",paraId:3,tocIndex:3},{value:" (sort by x values), etc.",paraId:3,tocIndex:3},{value:"\nFor available channels, see ",paraId:3,tocIndex:3},{value:"G2 Visual Channel Documentation",paraId:4,tocIndex:3},{value:".",paraId:3,tocIndex:3},{value:"Whether to reverse the sort order. ",paraId:5,tocIndex:4},{value:"true",paraId:5,tocIndex:4},{value:" means reverse the sorting result, ",paraId:5,tocIndex:4},{value:"false",paraId:5,tocIndex:4},{value:" means maintain the default order. The actual sorting direction is also related to the ",paraId:5,tocIndex:4},{value:"reducer",paraId:5,tocIndex:4},{value:" aggregation method (e.g., when ",paraId:5,tocIndex:4},{value:"reducer: 'max'",paraId:5,tocIndex:4},{value:", reverse: true means descending order; when ",paraId:5,tocIndex:4},{value:"reducer: 'min'",paraId:5,tocIndex:4},{value:", reverse: true means ascending order).",paraId:5,tocIndex:4},{value:"When the sorting criterion is an array or grouping, specifies the aggregation method. Supports ",paraId:6,tocIndex:5},{value:"'max'",paraId:6,tocIndex:5},{value:", ",paraId:6,tocIndex:5},{value:"'min'",paraId:6,tocIndex:5},{value:", ",paraId:6,tocIndex:5},{value:"'sum'",paraId:6,tocIndex:5},{value:", ",paraId:6,tocIndex:5},{value:"'mean'",paraId:6,tocIndex:5},{value:", ",paraId:6,tocIndex:5},{value:"'median'",paraId:6,tocIndex:5},{value:", ",paraId:6,tocIndex:5},{value:"'first'",paraId:6,tocIndex:5},{value:", ",paraId:6,tocIndex:5},{value:"'last'",paraId:6,tocIndex:5},{value:", and also allows custom functions.",paraId:6,tocIndex:5},{value:"type Primitive = number | string | boolean | Date;\n\ntype Reducer =\n  | 'max'\n  | 'min'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | 'mean'\n  | 'median'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:7,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { Category: 'A', Year: '2022', Value: 30 },\n    { Category: 'A', Year: '2023', Value: 50 },\n    { Category: 'B', Year: '2022', Value: 20 },\n    { Category: 'B', Year: '2023', Value: 40 },\n    { Category: 'C', Year: '2022', Value: 35 },\n    { Category: 'C', Year: '2023', Value: 25 },\n  ],\n  encode: { x: 'Category', y: 'Value', color: 'Year' },\n  transform: [\n    { type: 'sortColor', by: 'y', reverse: true },\n    { type: 'dodgeX' },\n  ],\n});\n\nchart.render();\n",paraId:8,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { Category: 'A', Year: '2022', Value: 30 },\n    { Category: 'A', Year: '2023', Value: 50 },\n    { Category: 'B', Year: '2022', Value: 20 },\n    { Category: 'B', Year: '2023', Value: 40 },\n    { Category: 'C', Year: '2022', Value: 35 },\n    { Category: 'C', Year: '2023', Value: 25 },\n  ],\n  encode: { x: 'Category', y: 'Value', color: 'Year' },\n  transform: [\n    { type: 'sortColor', by: 'y', reducer: 'min' }, // Sort by minimum value\n    { type: 'dodgeX' },\n  ],\n});\n\nchart.render();\n",paraId:9,tocIndex:8}]},2370:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(54725);const t=[{value:"sortX",paraId:0,tocIndex:0},{value:" is a common data transform provided by G2, used for sorting the domain of ",paraId:0,tocIndex:0},{value:"discrete x-axis",paraId:0,tocIndex:0},{value:". By specifying sorting criteria, you can arrange the chart's x-axis in ascending or descending order according to certain metrics (such as y, color, size, etc.), making it more intuitive to display data size relationships or distribution trends.",paraId:0,tocIndex:0},{value:"sortX",paraId:0,tocIndex:0},{value:" supports flexible sorting channels, aggregation methods, slicing configurations, and is commonly used for highlighting key points, optimizing readability, and comparative analysis. ",paraId:0,tocIndex:0},{value:"It is especially suitable for marks with discrete x channels (such as interval, rect, point, etc.)",paraId:0,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:"Bar/Column Chart Sorting",paraId:1,tocIndex:1},{value:": Arrange bars from high to low (or low to high) by values for easier data comparison.",paraId:1,tocIndex:1},{value:"Group/Facet Sorting",paraId:1,tocIndex:1},{value:": In grouped or faceted scenarios, sort by certain metrics within groups to highlight differences between groups.",paraId:1,tocIndex:1},{value:"Top N/Bottom N Filtering",paraId:1,tocIndex:1},{value:": Combined with ",paraId:1,tocIndex:1},{value:"slice",paraId:1,tocIndex:1},{value:" configuration, display only the top N or bottom N items to focus on key points.",paraId:1,tocIndex:1},{value:"Use with Other Transforms",paraId:1,tocIndex:1},{value:": Often used in combination with other transforms like ",paraId:1,tocIndex:1},{value:"dodgeX",paraId:1,tocIndex:1},{value:", ",paraId:1,tocIndex:1},{value:"diffY",paraId:1,tocIndex:1},{value:", etc., to achieve more complex data layouts and visual effects.",paraId:1,tocIndex:1},{value:"Property",paraId:2,tocIndex:2},{value:"Description",paraId:2,tocIndex:2},{value:"Type",paraId:2,tocIndex:2},{value:"Default",paraId:2,tocIndex:2},{value:"by",paraId:2,tocIndex:2},{value:"Specify the sorting channel (e.g., 'y', 'color', 'size', etc.)",paraId:2,tocIndex:2},{value:"string",paraId:2,tocIndex:2},{value:"'y'",paraId:2,tocIndex:2},{value:"reverse",paraId:2,tocIndex:2},{value:"Whether to reverse the order",paraId:2,tocIndex:2},{value:"boolean",paraId:2,tocIndex:2},{value:"false",paraId:2,tocIndex:2},{value:"slice",paraId:2,tocIndex:2},{value:"Select a slice range (e.g., top N items, interval)",paraId:2,tocIndex:2},{value:"number | [number, number]",paraId:2,tocIndex:2},{value:"reducer",paraId:2,tocIndex:2},{value:"Aggregation method for grouped comparisons",paraId:2,tocIndex:2},{value:"Reducer",paraId:2,tocIndex:2},{value:"'max'",paraId:2,tocIndex:2},{value:"ordinal",paraId:2,tocIndex:2},{value:"Whether to handle as categorical channel (set to false for continuous data)",paraId:2,tocIndex:2},{value:"boolean",paraId:2,tocIndex:2},{value:"true",paraId:2,tocIndex:2},{value:"Specifies the channel to sort by, commonly used values include ",paraId:3,tocIndex:3},{value:"'y'",paraId:3,tocIndex:3},{value:" (sort by y values), ",paraId:3,tocIndex:3},{value:"'color'",paraId:3,tocIndex:3},{value:" (sort by color groups), ",paraId:3,tocIndex:3},{value:"'size'",paraId:3,tocIndex:3},{value:" (sort by point size), etc.",paraId:3,tocIndex:3},{value:"Whether to reverse the sort order. ",paraId:4,tocIndex:4},{value:"true",paraId:4,tocIndex:4},{value:" means reverse the sorting result, ",paraId:4,tocIndex:4},{value:"false",paraId:4,tocIndex:4},{value:" means keep the default order. The actual sorting direction also relates to the ",paraId:4,tocIndex:4},{value:"reducer",paraId:4,tocIndex:4},{value:" aggregation method (e.g., when ",paraId:4,tocIndex:4},{value:"reducer: 'max'",paraId:4,tocIndex:4},{value:", reverse: true means descending; when ",paraId:4,tocIndex:4},{value:"reducer: 'min'",paraId:4,tocIndex:4},{value:", reverse: true means ascending).",paraId:4,tocIndex:4},{value:"Used to extract part of the sorted data. Can be a number (top N items) or an interval ",paraId:5,tocIndex:5},{value:"[start, end]",paraId:5,tocIndex:5},{value:".",paraId:5,tocIndex:5},{value:"When the sorting criterion is an array or grouped, specifies the aggregation method. Supports ",paraId:6,tocIndex:6},{value:"'max'",paraId:6,tocIndex:6},{value:", ",paraId:6,tocIndex:6},{value:"'min'",paraId:6,tocIndex:6},{value:", ",paraId:6,tocIndex:6},{value:"'sum'",paraId:6,tocIndex:6},{value:", ",paraId:6,tocIndex:6},{value:"'mean'",paraId:6,tocIndex:6},{value:", ",paraId:6,tocIndex:6},{value:"'median'",paraId:6,tocIndex:6},{value:", ",paraId:6,tocIndex:6},{value:"'first'",paraId:6,tocIndex:6},{value:", ",paraId:6,tocIndex:6},{value:"'last'",paraId:6,tocIndex:6},{value:", or custom functions.",paraId:6,tocIndex:6},{value:"Whether to handle as categorical channel. Can be set to ",paraId:7,tocIndex:7},{value:"false",paraId:7,tocIndex:7},{value:" if the sorting criterion is continuous data.",paraId:7,tocIndex:7},{value:"type Reducer =\n  | 'max'\n  | 'min'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | 'mean'\n  | 'median'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:8,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { Category: 'A', Value: 30 },\n    { Category: 'B', Value: 50 },\n    { Category: 'C', Value: 20 },\n    { Category: 'D', Value: 40 },\n  ],\n  encode: { x: 'Category', y: 'Value' },\n  transform: [{ type: 'sortX', by: 'y', reverse: true }],\n});\n\nchart.render();\n",paraId:9,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { Category: 'A', Value: 30 },\n    { Category: 'B', Value: 50 },\n    { Category: 'C', Value: 20 },\n    { Category: 'D', Value: 40 },\n  ],\n  encode: { x: 'Category', y: 'Value' },\n  transform: [{ type: 'sortX', by: 'y', reverse: true, slice: 3 }],\n});\n\nchart.render();\n",paraId:10,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { State: 'A', Age: 'Youth', Population: 30 },\n    { State: 'A', Age: 'Middle-aged', Population: 40 },\n    { State: 'A', Age: 'Elderly', Population: 20 },\n    { State: 'B', Age: 'Youth', Population: 50 },\n    { State: 'B', Age: 'Middle-aged', Population: 60 },\n    { State: 'B', Age: 'Elderly', Population: 30 },\n  ],\n  encode: { x: 'State', y: 'Population', color: 'Age' },\n  transform: [{ type: 'sortX', by: 'y', reverse: true }, { type: 'dodgeX' }],\n});\n\nchart.render();\n",paraId:11,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data: [\n    { Category: 'A', Value: 30 },\n    { Category: 'B', Value: 50 },\n    { Category: 'C', Value: 20 },\n    { Category: 'D', Value: 40 },\n  ],\n  encode: { x: 'Category', y: 'Value' },\n  transform: [\n    { type: 'sortX', by: 'y', reducer: 'min' }, // Sort by minimum value\n  ],\n});\n\nchart.render();\n",paraId:12,tocIndex:12}]},85315:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(48899);const t=[{value:"sortY",paraId:0,tocIndex:0},{value:" is a commonly used data transform provided by G2, used to sort the domain of ",paraId:0,tocIndex:0},{value:"discrete y-axis",paraId:0,tocIndex:0},{value:". By specifying sorting criteria, you can arrange the y-axis of a chart in ascending or descending order based on a measure (such as x, color, etc.), making the size relationships or distribution trends of data more intuitive.",paraId:0,tocIndex:0},{value:"sortY",paraId:0,tocIndex:0},{value:" supports flexible sorting channels, aggregation methods, slicing configurations, and is commonly used for highlighting key points, optimizing readability, and comparative analysis, ",paraId:0,tocIndex:0},{value:"especially suitable for marks with discrete y channels (such as scatter plots, word clouds, images, etc.)",paraId:0,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:"Scatter plot grouping and sorting",paraId:1,tocIndex:1},{value:": Sort scatter plots with y-axis as grouping field by a measure value.",paraId:1,tocIndex:1},{value:"Word cloud/image distribution sorting",paraId:1,tocIndex:1},{value:": Sort word clouds, images, and other marks with y-axis as categories.",paraId:1,tocIndex:1},{value:"Top N/Bottom N filtering",paraId:1,tocIndex:1},{value:": Combined with ",paraId:1,tocIndex:1},{value:"slice",paraId:1,tocIndex:1},{value:" configuration, display only the top N or bottom N data items to focus on key points.",paraId:1,tocIndex:1},{value:"Combination with other transforms",paraId:1,tocIndex:1},{value:": Often used in combination with transforms like ",paraId:1,tocIndex:1},{value:"dodgeY",paraId:1,tocIndex:1},{value:", ",paraId:1,tocIndex:1},{value:"diffX",paraId:1,tocIndex:1},{value:", etc., to achieve more complex data layouts and visual effects.",paraId:1,tocIndex:1},{value:"Property",paraId:2,tocIndex:2},{value:"Description",paraId:2,tocIndex:2},{value:"Type",paraId:2,tocIndex:2},{value:"Default",paraId:2,tocIndex:2},{value:"by",paraId:2,tocIndex:2},{value:"Specify the sorting channel (e.g., 'x', 'color', 'size', etc.)",paraId:2,tocIndex:2},{value:"string",paraId:2,tocIndex:2},{value:"'y'",paraId:2,tocIndex:2},{value:"reverse",paraId:2,tocIndex:2},{value:"Whether to reverse the order",paraId:2,tocIndex:2},{value:"boolean",paraId:2,tocIndex:2},{value:"false",paraId:2,tocIndex:2},{value:"slice",paraId:2,tocIndex:2},{value:"Select a slice range (e.g., first N items, interval)",paraId:2,tocIndex:2},{value:"number | [number, number]",paraId:2,tocIndex:2},{value:"reducer",paraId:2,tocIndex:2},{value:"Grouping aggregation method for multi-value comparison",paraId:2,tocIndex:2},{value:"Reducer",paraId:2,tocIndex:2},{value:"'max'",paraId:2,tocIndex:2},{value:"Specifies the channel for sorting criteria, commonly used like ",paraId:3,tocIndex:3},{value:"'x'",paraId:3,tocIndex:3},{value:" (sort by x values), ",paraId:3,tocIndex:3},{value:"'color'",paraId:3,tocIndex:3},{value:" (sort by color grouping), ",paraId:3,tocIndex:3},{value:"'size'",paraId:3,tocIndex:3},{value:" (sort by point size), etc.",paraId:3,tocIndex:3},{value:"Whether to reverse the order. ",paraId:4,tocIndex:4},{value:"true",paraId:4,tocIndex:4},{value:" means reverse the sorting result, ",paraId:4,tocIndex:4},{value:"false",paraId:4,tocIndex:4},{value:" means keep the default order. The actual sorting direction is also related to the ",paraId:4,tocIndex:4},{value:"reducer",paraId:4,tocIndex:4},{value:" aggregation method (e.g., when ",paraId:4,tocIndex:4},{value:"reducer: 'max'",paraId:4,tocIndex:4},{value:", reverse: true is descending; when ",paraId:4,tocIndex:4},{value:"reducer: 'min'",paraId:4,tocIndex:4},{value:", reverse: true is ascending).",paraId:4,tocIndex:4},{value:"Used to extract part of the sorted data. Can be a number (first N items) or an interval ",paraId:5,tocIndex:5},{value:"[start, end]",paraId:5,tocIndex:5},{value:".",paraId:5,tocIndex:5},{value:"When the sorting criterion is an array or grouping, specifies the aggregation method. Supports ",paraId:6,tocIndex:6},{value:"'max'",paraId:6,tocIndex:6},{value:", ",paraId:6,tocIndex:6},{value:"'min'",paraId:6,tocIndex:6},{value:", ",paraId:6,tocIndex:6},{value:"'sum'",paraId:6,tocIndex:6},{value:", ",paraId:6,tocIndex:6},{value:"'mean'",paraId:6,tocIndex:6},{value:", ",paraId:6,tocIndex:6},{value:"'median'",paraId:6,tocIndex:6},{value:", ",paraId:6,tocIndex:6},{value:"'first'",paraId:6,tocIndex:6},{value:", ",paraId:6,tocIndex:6},{value:"'last'",paraId:6,tocIndex:6},{value:", and can also be a custom function.",paraId:6,tocIndex:6},{value:"type Reducer =\n  | 'max'\n  | 'min'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | 'mean'\n  | 'median'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:7,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  data: [\n    { city: 'Beijing', year: '2020', value: 30 },\n    { city: 'Shanghai', year: '2020', value: 50 },\n    { city: 'Guangzhou', year: '2020', value: 20 },\n    { city: 'Shenzhen', year: '2020', value: 40 },\n    { city: 'Beijing', year: '2021', value: 35 },\n    { city: 'Shanghai', year: '2021', value: 55 },\n    { city: 'Guangzhou', year: '2021', value: 25 },\n    { city: 'Shenzhen', year: '2021', value: 45 },\n  ],\n  encode: { x: 'year', y: 'city', color: 'city', size: 'value' },\n  transform: [{ type: 'sortY', by: 'size', reverse: true }],\n});\n\nchart.render();\n",paraId:8,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'point',\n  data: [\n    { city: 'Beijing', year: '2020', value: 30 },\n    { city: 'Shanghai', year: '2020', value: 50 },\n    { city: 'Guangzhou', year: '2020', value: 20 },\n    { city: 'Shenzhen', year: '2020', value: 40 },\n    { city: 'Beijing', year: '2021', value: 35 },\n    { city: 'Shanghai', year: '2021', value: 55 },\n    { city: 'Guangzhou', year: '2021', value: 25 },\n    { city: 'Shenzhen', year: '2021', value: 45 },\n  ],\n  encode: { x: 'year', y: 'city', color: 'city', size: 'value' },\n  transform: [{ type: 'sortY', by: 'size', reverse: true, slice: 2 }],\n});\n\nchart.render();\n",paraId:9,tocIndex:9}]},93740:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(66128);const t=[{value:"stackEnter is an animation effect for stacked graphic elements, primarily used for entrance animations in stacked charts. Its core functionality is to present the layered and cumulative relationships of data in a more intuitive and visually appealing way through dynamic transitions.",paraId:0,tocIndex:0},{value:"Through ",paraId:1,tocIndex:0},{value:"stackEnter",paraId:1,tocIndex:0},{value:", AntV makes the initial rendering of stacked charts more expressive, enhancing the clarity of data presentation and user experience.",paraId:1,tocIndex:0},{value:"stackEnter",paraId:2,tocIndex:2},{value:" renders each data layer sequentially in stacking order (from bottom to top), creating a progressive layering animation effect.",paraId:2,tocIndex:2},{value:"For example: In a stacked bar chart, each category's bar starts from the baseline, first drawing the bottom data layer, then progressively stacking other layers upward until forming a complete stacked bar.",paraId:2,tocIndex:2},{value:'Highlights the "accumulation process" of stacking through animation, helping users understand each layer\'s contribution to the total.',paraId:3,tocIndex:3},{value:"Suitable for showing the relationship between parts and the whole (such as the proportion of different categories across various dimensions).",paraId:3,tocIndex:3},{value:"Animation is usually accompanied by easing effects, making transitions more natural and avoiding abrupt data changes.",paraId:4,tocIndex:4},{value:"Stacked bar/column charts: Each bar grows upward in segments.",paraId:5,tocIndex:5},{value:"Stacked area charts: Area regions expand layer by layer from the baseline.",paraId:5,tocIndex:5},{value:"Other stacked charts: Such as stacked forms in rose charts and radar charts.",paraId:5,tocIndex:5},{value:"Property",paraId:6,tocIndex:6},{value:"Description",paraId:6,tocIndex:6},{value:"Type",paraId:6,tocIndex:6},{value:"Default Value",paraId:6,tocIndex:6},{value:"groupBy",paraId:6,tocIndex:6},{value:"Select a grouping channel",paraId:6,tocIndex:6},{value:"string | string[]",paraId:6,tocIndex:6},{value:"x",paraId:6,tocIndex:6},{value:"reducer",paraId:6,tocIndex:6},{value:"Grouping value method",paraId:6,tocIndex:6},{value:"(I: number[], V: any[]) => any",paraId:6,tocIndex:6},{value:"(I, V) => V[I[0]]",paraId:6,tocIndex:6},{value:"orderBy",paraId:6,tocIndex:6},{value:"Sorting channel",paraId:6,tocIndex:6},{value:"string",paraId:6,tocIndex:6},{value:"null",paraId:6,tocIndex:6},{value:"reverse",paraId:6,tocIndex:6},{value:"Whether to reverse order",paraId:6,tocIndex:6},{value:"boolean",paraId:6,tocIndex:6},{value:"true",paraId:6,tocIndex:6},{value:"duration",paraId:6,tocIndex:6},{value:"Animation duration (in milliseconds)",paraId:6,tocIndex:6},{value:"number",paraId:6,tocIndex:6},{value:"3000",paraId:6,tocIndex:6},{value:"When ",paraId:7,tocIndex:7},{value:"stackEnter",paraId:7,tocIndex:7},{value:" executes, data needs to be grouped, and ",paraId:7,tocIndex:7},{value:"stackEnter",paraId:7,tocIndex:7},{value:" calculation logic is performed within each group. For example, for area charts, y data under the same x value needs to be grouped, then min-max processing logic is applied within the group, so ",paraId:7,tocIndex:7},{value:"stackEnter",paraId:7,tocIndex:7},{value:" is set to the ",paraId:7,tocIndex:7},{value:"x",paraId:7,tocIndex:7},{value:" channel.",paraId:7,tocIndex:7},{value:"Theoretically, ",paraId:8,tocIndex:7},{value:"stackEnter",paraId:8,tocIndex:7},{value:" can be set to all channel values. For details, refer to the ",paraId:8,tocIndex:7},{value:"encode",paraId:9,tocIndex:7},{value:" documentation. All enumerated values are as follows:",paraId:8,tocIndex:7},{value:"export type ChannelTypes =\n  | 'x'\n  | 'y'\n  | 'z'\n  | 'x1'\n  | 'y1'\n  | 'series'\n  | 'color'\n  | 'opacity'\n  | 'shape'\n  | 'size'\n  | 'key'\n  | 'groupKey'\n  | 'position'\n  | 'series'\n  | 'enterType'\n  | 'enterEasing'\n  | 'enterDuration'\n  | 'enterDelay'\n  | 'updateType'\n  | 'updateEasing'\n  | 'updateDuration'\n  | 'updateDelay'\n  | 'exitType'\n  | 'exitEasing'\n  | 'exitDuration'\n  | 'exitDelay'\n  | `position${number}`;\n",paraId:10,tocIndex:7},{value:"The reducer is a function used to process data after grouping. It receives two parameters:",paraId:11,tocIndex:8},{value:"I",paraId:12,tocIndex:8},{value:": Array of data indices, representing the index positions of each group's data in the original dataset",paraId:12,tocIndex:8},{value:"V",paraId:12,tocIndex:8},{value:": Array of original data values, containing all data items",paraId:12,tocIndex:8},{value:"By default, the reducer returns the first element value of each group: ",paraId:13,tocIndex:8},{value:"(I, V) => V[I[0]]",paraId:13,tocIndex:8},{value:", but you can customize this function to implement specific data processing logic, such as summing or averaging, to give charts a clearer organization. Here are simple examples for reference:",paraId:13,tocIndex:8},{value:"// Use custom reducer to calculate the sum of each group's data\nchart.options({\n  // ...\n  transform: [\n    {\n      type: 'stackEnter',\n      groupBy: 'x',\n      reducer: (indices, values) => {\n        // Calculate the sum of all values in the current group\n        return indices.reduce((sum, index) => sum + values[index].value, 0);\n      },\n    },\n  ],\n});\n\n// Use custom reducer to calculate the average of each group's data\nchart.options({\n  // ...\n  transform: [\n    {\n      type: 'stackEnter',\n      groupBy: 'x',\n      reducer: (indices, values) => {\n        const sum = indices.reduce(\n          (acc, index) => acc + values[index].value,\n          0,\n        );\n        return sum / indices.length; // Return average value\n      },\n    },\n  ],\n});\n",paraId:14,tocIndex:8},{value:"The following is a simple example code demonstrating how to use ",paraId:15,tocIndex:9},{value:"stackEnter",paraId:15,tocIndex:9},{value:" and its visual effects.",paraId:15,tocIndex:9},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  data: [\n    { type: 'Apple', year: '2001', value: 260 },\n    { type: 'Orange', year: '2001', value: 100 },\n    { type: 'Banana', year: '2001', value: 90 },\n    { type: 'Apple', year: '2002', value: 210 },\n    { type: 'Orange', year: '2002', value: 150 },\n    { type: 'Banana', year: '2002', value: 30 },\n  ],\n  encode: {\n    x: 'year',\n    y: 'value',\n    color: 'type',\n    series: 'type',\n    enterDuration: 1000,\n  },\n  transform: [{ type: 'stackEnter', groupBy: 'x' }],\n});\n\nchart.render();\n",paraId:16,tocIndex:9},{value:"Finally, the following effect is presented (dynamic effect):",paraId:17,tocIndex:9}]},29548:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(91313);const t=[{value:"The stackY function is a utility function for implementing stacked chart data processing, primarily used for stacked bar charts, stacked area charts, and similar scenarios. Its core purpose is to perform stacking calculations on data by accumulating values of multiple subcategories within each category along the Y-axis, creating a comparison between the whole and its parts.",paraId:0,tocIndex:0},{value:"The stackY function calculates the start and end positions of each data point on the Y-axis based on specified grouping fields and Y-axis fields, generating new data fields (typically y0 and y1) to ensure proper rendering of stacking effects in charts. Additionally, the stacking order is crucial for chart readability and information communication, so the stackY function provides various options to control stacking order and grouping methods.",paraId:1,tocIndex:1},{value:"Input: Raw data array, typically containing categorical fields (such as x-axis categories) and numeric fields (such as y-axis values), along with grouping fields (such as series fields).",paraId:2,tocIndex:1},{value:"Output: Processed data array with new fields representing stacking ranges (such as y0 for stack start value and y1 for stack end value).",paraId:2,tocIndex:1},{value:"stackY is commonly used for the following chart types:",paraId:3,tocIndex:1},{value:"Stacked bar charts",paraId:4,tocIndex:1},{value:"Stacked area charts",paraId:4,tocIndex:1},{value:"Other visualization forms requiring data stacking",paraId:4,tocIndex:1},{value:"Before using ",paraId:5,tocIndex:1},{value:"stackY",paraId:5,tocIndex:1},{value:" transform",paraId:5,tocIndex:1},{value:": Data will overlap without clear comparison between categories.",paraId:5,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/87b2ff47-2a33-4509-869c-dae4cdd81163.csv',\n    format: 'csv',\n    transform: [{ type: 'filter', callback: (d) => d.year === 2000 }],\n  },\n  encode: { x: 'age', y: 'people', color: 'sex' },\n  transform: [{ type: 'groupX', y: 'sum' }],\n  // Note: stackY transform is not used here\n  scale: { color: { type: 'ordinal', range: ['#ca8861', '#675193'] } },\n  style: { fillOpacity: 0.7 },\n  axis: { y: { labelFormatter: '~s' } },\n  tooltip: { items: [{ channel: 'y', valueFormatter: '~s' }] },\n});\n\nchart.render();\n",paraId:6,tocIndex:1},{value:"After using ",paraId:7,tocIndex:1},{value:"stackY",paraId:7,tocIndex:1},{value:" transform",paraId:7,tocIndex:1},{value:": Through ",paraId:7,tocIndex:1},{value:"stackY",paraId:7,tocIndex:1},{value:" transform, different categories are displayed in stacked manner, allowing you to see both totals and category comparisons.",paraId:7,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/87b2ff47-2a33-4509-869c-dae4cdd81163.csv',\n    format: 'csv',\n    transform: [{ type: 'filter', callback: (d) => d.year === 2000 }],\n  },\n  encode: { x: 'age', y: 'people', color: 'sex' },\n  transform: [{ type: 'groupX', y: 'sum' }, { type: 'stackY' }], // Apply stackY transform to achieve stacking effect\n  scale: { color: { type: 'ordinal', range: ['#ca8861', '#675193'] } },\n  style: { fillOpacity: 0.7 },\n  axis: { y: { labelFormatter: '~s' } },\n  tooltip: { items: [{ channel: 'y', valueFormatter: '~s' }] },\n});\n\nchart.render();\n",paraId:8,tocIndex:1},{value:"Property",paraId:9,tocIndex:2},{value:"Description",paraId:9,tocIndex:2},{value:"Type",paraId:9,tocIndex:2},{value:"Default",paraId:9,tocIndex:2},{value:"groupBy",paraId:9,tocIndex:2},{value:"Specifies the grouping channel",paraId:9,tocIndex:2},{value:"string | string[]",paraId:9,tocIndex:2},{value:"x",paraId:9,tocIndex:2},{value:"orderBy",paraId:9,tocIndex:2},{value:"Specifies the data for sorting",paraId:9,tocIndex:2},{value:"TransformOrder",paraId:9,tocIndex:2},{value:"null",paraId:9,tocIndex:2},{value:"y",paraId:9,tocIndex:2},{value:"Y channel data source selection",paraId:9,tocIndex:2},{value:"'y'|'y1'",paraId:9,tocIndex:2},{value:"y",paraId:9,tocIndex:2},{value:"y1",paraId:9,tocIndex:2},{value:"Y1 channel data source selection",paraId:9,tocIndex:2},{value:"'y'|'y1'",paraId:9,tocIndex:2},{value:"y1",paraId:9,tocIndex:2},{value:"reverse",paraId:9,tocIndex:2},{value:"Whether to reverse the order",paraId:9,tocIndex:2},{value:"boolean",paraId:9,tocIndex:2},{value:"false",paraId:9,tocIndex:2},{value:"series",paraId:9,tocIndex:2},{value:"Whether there is a grouping field",paraId:9,tocIndex:2},{value:"boolean",paraId:9,tocIndex:2},{value:"true",paraId:9,tocIndex:2},{value:"When ",paraId:10,tocIndex:3},{value:"stackY",paraId:10,tocIndex:3},{value:" is executed, data needs to be grouped, and the ",paraId:10,tocIndex:3},{value:"stackY",paraId:10,tocIndex:3},{value:" calculation logic is executed within each group. For example, for area charts, y data under the same x value needs to be grouped, and then min/max processing logic is performed within the group, so ",paraId:10,tocIndex:3},{value:"stackY",paraId:10,tocIndex:3},{value:" is set to the ",paraId:10,tocIndex:3},{value:"x",paraId:10,tocIndex:3},{value:" channel.",paraId:10,tocIndex:3},{value:"Theoretically, ",paraId:11,tocIndex:3},{value:"stackY",paraId:11,tocIndex:3},{value:" can be set to all channel values. For details, refer to the ",paraId:11,tocIndex:3},{value:"encode",paraId:12,tocIndex:3},{value:" documentation. All enumeration values are as follows:",paraId:11,tocIndex:3},{value:"export type ChannelTypes =\n  | 'x'\n  | 'y'\n  | 'z'\n  | 'x1'\n  | 'y1'\n  | 'series'\n  | 'color'\n  | 'opacity'\n  | 'shape'\n  | 'size'\n  | 'key'\n  | 'groupKey'\n  | 'position'\n  | 'series'\n  | 'enterType'\n  | 'enterEasing'\n  | 'enterDuration'\n  | 'enterDelay'\n  | 'updateType'\n  | 'updateEasing'\n  | 'updateDuration'\n  | 'updateDelay'\n  | 'exitType'\n  | 'exitEasing'\n  | 'exitDuration'\n  | 'exitDelay'\n  | `position${number}`;\n",paraId:13,tocIndex:3},{value:"orderBy",paraId:14,tocIndex:4},{value:" is used to specify the stacking order, which can be a string array or a function. The function parameter is a data object, and the return value is a numeric value used for sorting.",paraId:14,tocIndex:4},{value:"type Primitive = number | string | boolean | Date;\n\ntype TransformOrder =\n  | 'value'\n  | 'sum'\n  | 'series'\n  | 'maxIndex'\n  | string[]\n  | null\n  | ((data: Record<string, Primitive>) => Primitive);\n",paraId:15,tocIndex:4},{value:"Next, let's look at a relatively complex data presentation scenario. For example, data comes from a CSV file, and we need to sort and group the data:",paraId:16,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  },\n  encode: { x: 'state', y: 'population', color: 'age' },\n  transform: [{ type: 'stackY' }, { type: 'sortX', by: 'y', reverse: true }],\n  axis: { y: { labelFormatter: '~s' } },\n});\n\nchart.render();\n",paraId:17,tocIndex:6},{value:"The implemented effect is as follows:",paraId:18,tocIndex:6},{value:"In this example, we used ",paraId:19,tocIndex:6},{value:"fetch",paraId:19,tocIndex:6},{value:" to retrieve data and sorted and grouped the data. Through the ",paraId:19,tocIndex:6},{value:"stackY",paraId:19,tocIndex:6},{value:" method, we can easily implement data stacking effects.",paraId:19,tocIndex:6},{value:"Next, let's look at a relatively complex scenario - the normalized stacked area chart is a type of data visualization chart that is a variant of the stacked area chart.",paraId:20,tocIndex:7},{value:"It is used to show trends of multiple categories of data changing over time or other continuous variables, while emphasizing the relative proportions of each category in the total, rather than absolute values. For example, if we need a normalized stacked area chart, we can achieve the following effect. You can refer to the corresponding example code, and for details, check our online ",paraId:21,tocIndex:7},{value:"chart examples",paraId:21,tocIndex:7},{value:":",paraId:21,tocIndex:7},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'area',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/unemployment-by-industry.json',\n  },\n  encode: { x: (d) => new Date(d.date), y: 'unemployed', color: 'industry' },\n  transform: [{ type: 'stackY' }, { type: 'normalizeY' }],\n  tooltip: { items: [{ channel: 'y0', valueFormatter: '.3f' }] },\n});\n\nchart.render();\n",paraId:22,tocIndex:7},{value:'The Appearance Order Stacked Area Chart is a special variant of stacked area charts. Its core characteristic is that the stacking order is based on the "appearance order" or first occurrence time of each category in the data, rather than fixed category order or numeric size.',paraId:23,tocIndex:8},{value:"This type of chart is typically used to show the cumulative effect when categories are gradually introduced or appear over time, emphasizing dynamic changes in the time dimension and the contribution of newly added categories.",paraId:24,tocIndex:8},{value:"We can achieve this effect using the ",paraId:25,tocIndex:8},{value:"stackY",paraId:25,tocIndex:8},{value:" transform function. For example, if we need to implement the following effect:",paraId:25,tocIndex:8},{value:"The corresponding code is:",paraId:26,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'view',\n  autoFit: true,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f38a8ad0-6e1f-4bb3-894c-7db50781fdec.json',\n  },\n  interaction: { tooltip: { filter: (d) => parseInt(d.value) > 0 } },\n  children: [\n    {\n      type: 'area',\n      encode: {\n        x: (d) => new Date(d.year),\n        y: 'revenue',\n        series: 'format',\n        color: 'group',\n        shape: 'smooth',\n      },\n      transform: [{ type: 'stackY', orderBy: 'maxIndex', reverse: true }],\n      axis: { y: { labelFormatter: '~s' } },\n      tooltip: { items: [{ channel: 'y', valueFormatter: '.2f' }] },\n    },\n    {\n      type: 'line',\n      encode: {\n        x: (d) => new Date(d.year),\n        y: 'revenue',\n        series: 'format',\n        shape: 'smooth',\n        color: 'group',\n      },\n      transform: [\n        { type: 'stackY', orderBy: 'maxIndex', reverse: true, y: 'y1' },\n      ],\n      style: { stroke: 'white' },\n      tooltip: false,\n    },\n  ],\n});\n\nchart.render();\n",paraId:27,tocIndex:8},{value:"For detailed examples, refer to our online ",paraId:28,tocIndex:8},{value:"chart examples",paraId:28,tocIndex:8},{value:", and there are other stacking chart examples available online for reference. Finally, here's a simple stacked bar chart as the most intuitive demonstration of calling this function:",paraId:28,tocIndex:8},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { category: 'A', value: 10, type: 'X' },\n    { category: 'A', value: 20, type: 'Y' },\n    { category: 'B', value: 15, type: 'X' },\n    { category: 'B', value: 25, type: 'Y' },\n  ],\n  encode: { x: 'category', y: 'value', color: 'type' },\n  transform: [{ type: 'stackY' }],\n});\n\nchart.render();\n",paraId:29,tocIndex:8},{value:"In the chart, X and Y values are stacked together under the same category, forming an overall height.",paraId:30,tocIndex:8},{value:"Category A's X and Y are stacked (total height = 10 + 20 = 30).",paraId:31,tocIndex:8},{value:"Category B's X and Y are stacked (total height = 15 + 25 = 40).",paraId:31,tocIndex:8}]},9167:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(20900);const t=[{value:"Group by specified channel and add offset to the y and y1 channels of each group to achieve symmetry effect.",paraId:0,tocIndex:0},{value:"SymmetryY (Y-axis symmetry) is typically used to emphasize or highlight data symmetry, comparison, or mirror relationships. Here are common application scenarios with chart types and practical examples:",paraId:1,tocIndex:1},{value:"Scenario",paraId:2,tocIndex:1},{value:"Chart Type",paraId:2,tocIndex:1},{value:"Description",paraId:2,tocIndex:1},{value:"Example",paraId:2,tocIndex:1},{value:"Compare Two Groups",paraId:2,tocIndex:1},{value:"Bar Chart, Column Chart",paraId:2,tocIndex:1},{value:"Two groups of data displayed on both sides of the Y-axis, intuitively showing comparison differences (e.g., A/B test results).",paraId:2,tocIndex:1},{value:"Male vs Female Income Distribution",paraId:2,tocIndex:1},{value:"Mirror Relationship Analysis",paraId:2,tocIndex:1},{value:"Line Chart, Area Chart",paraId:2,tocIndex:1},{value:"Data symmetrically distributed around the Y-axis, showing positive and negative correlations (e.g., profit vs loss, import/export balance).",paraId:2,tocIndex:1},{value:"Company Monthly Profit vs Loss Comparison",paraId:2,tocIndex:1},{value:"Symmetry Distribution Verification",paraId:2,tocIndex:1},{value:"Box Plot, Violin Plot",paraId:2,tocIndex:1},{value:"Check if data follows symmetric distribution (e.g., normal distribution test).",paraId:2,tocIndex:1},{value:"Height/Weight Symmetry Analysis",paraId:2,tocIndex:1},{value:"Bidirectional Deviation Display",paraId:2,tocIndex:1},{value:"Error Bar Chart",paraId:2,tocIndex:1},{value:"Display both positive and negative deviations simultaneously (e.g., difference between predicted and actual values).",paraId:2,tocIndex:1},{value:"Weather Forecast Error Range",paraId:2,tocIndex:1},{value:"Comparative Analysis",paraId:3,tocIndex:2},{value:": Quickly identify differences or similarities between two groups of data.",paraId:3,tocIndex:2},{value:"Symmetry Verification",paraId:3,tocIndex:2},{value:": Test whether data follows symmetric distribution (e.g., normality).",paraId:3,tocIndex:2},{value:"Bidirectional Expression",paraId:3,tocIndex:2},{value:": Display both positive and negative trends simultaneously (e.g., profit/loss, errors).",paraId:3,tocIndex:2},{value:"Natural Law Visualization",paraId:3,tocIndex:2},{value:": Reveal symmetric phenomena in nature or science (e.g., physics, biology).",paraId:3,tocIndex:2},{value:"Property",paraId:4,tocIndex:3},{value:"Description",paraId:4,tocIndex:3},{value:"Type",paraId:4,tocIndex:3},{value:"Default",paraId:4,tocIndex:3},{value:"groupBy",paraId:4,tocIndex:3},{value:"Specify grouping channel, can be a single channel name or multiple channels (string array)",paraId:4,tocIndex:3},{value:"string | string[]",paraId:4,tocIndex:3},{value:"x",paraId:4,tocIndex:3},{value:"When ",paraId:5,tocIndex:4},{value:"symmetryY",paraId:5,tocIndex:4},{value:" is executed, the data needs to be grouped, and the calculation logic of ",paraId:5,tocIndex:4},{value:"symmetryY",paraId:5,tocIndex:4},{value:" is executed in each group. For example, for area charts, y data under the same x value needs to be grouped, and then the maximum and minimum value processing logic is applied within the group, so ",paraId:5,tocIndex:4},{value:"groupBy",paraId:5,tocIndex:4},{value:" is set to the ",paraId:5,tocIndex:4},{value:"x",paraId:5,tocIndex:4},{value:" channel.",paraId:5,tocIndex:4},{value:"Theoretically, ",paraId:6,tocIndex:4},{value:"groupBy",paraId:6,tocIndex:4},{value:" can be set to all channel values. For details, please refer to the ",paraId:6,tocIndex:4},{value:"encode",paraId:7,tocIndex:4},{value:" documentation. All enumeration values are as follows:",paraId:6,tocIndex:4},{value:"export type ChannelTypes =\n  | 'x'\n  | 'y'\n  | 'z'\n  | 'x1'\n  | 'y1'\n  | 'series'\n  | 'color'\n  | 'opacity'\n  | 'shape'\n  | 'size'\n  | 'key'\n  | 'groupKey'\n  | 'position'\n  | 'series'\n  | 'enterType'\n  | 'enterEasing'\n  | 'enterDuration'\n  | 'enterDelay'\n  | 'updateType'\n  | 'updateEasing'\n  | 'updateDuration'\n  | 'updateDelay'\n  | 'exitType'\n  | 'exitEasing'\n  | 'exitDuration'\n  | 'exitDelay'\n  | `position${number}`;\n",paraId:8,tocIndex:4},{value:"Here is a simple example code. Please note the ",paraId:9,tocIndex:5},{value:".transform({ type: 'symmetryY' })",paraId:9,tocIndex:5},{value:" transformation and compare the corresponding output:",paraId:9,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'area',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/unemployment-by-industry.json',\n    transform: [\n      {\n        type: 'map',\n        callback: (d) => ({\n          ...d,\n          date: new Date(d.date),\n        }),\n      },\n    ],\n  },\n  encode: { x: 'date', y: 'unemployed', color: 'industry' },\n  transform: [{ type: 'stackY' }, { type: 'symmetryY' }],\n});\n\nchart.render();\n",paraId:10,tocIndex:5},{value:"The above code will render the corresponding chart:",paraId:11,tocIndex:5},{value:"Similarly, how to draw a symmetric bar chart? Use this transform as well, as follows:",paraId:12,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  width: 800,\n  height: 300,\n  data: [\n    { x: 'A', y: 100 },\n    { x: 'B', y: 200 },\n    { x: 'C', y: 300 },\n    { x: 'D', y: 250 },\n  ],\n  encode: { x: 'x', y: 'y', color: 'x' },\n  transform: [{ type: 'stackY' }, { type: 'symmetryY' }],\n  scale: { x: { padding: 0.5 } },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  legend: false,\n});\n\nchart.render();\n",paraId:13,tocIndex:5},{value:"Please note the final ",paraId:14,tocIndex:5},{value:".transform({ type: 'symmetryY' })",paraId:14,tocIndex:5},{value:" transformation function.",paraId:14,tocIndex:5},{value:"SymmetryY has another important application scenario in ",paraId:15,tocIndex:6},{value:"funnel charts",paraId:15,tocIndex:6},{value:" (",paraId:15,tocIndex:6},{value:"comparison funnel charts",paraId:15,tocIndex:6},{value:", ",paraId:15,tocIndex:6},{value:"conversion funnel charts",paraId:15,tocIndex:6},{value:"), and ",paraId:15,tocIndex:6},{value:"pyramid charts",paraId:15,tocIndex:6},{value:", which are used to show data conversion and result presentation. For example, a typical funnel chart is shown as follows:",paraId:15,tocIndex:6},{value:"The corresponding example code is:",paraId:16,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'interval',\n  autoFit: true,\n  data: [\n    { action: 'Browse Website', pv: 50000 },\n    { action: 'Add to Cart', pv: 35000 },\n    { action: 'Generate Order', pv: 25000 },\n    { action: 'Pay Order', pv: 15000 },\n    { action: 'Complete Transaction', pv: 8000 },\n  ],\n  encode: { x: 'action', y: 'pv', color: 'action', shape: 'funnel' },\n  transform: [{ type: 'symmetryY' }],\n  scale: { x: { padding: 0 } },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  animate: { enter: { type: 'fadeIn' } },\n  axis: false,\n  labels: [\n    {\n      text: (d) => `${d.action}\\\n${d.pv}`,\n      position: 'inside',\n      transform: [{ type: 'contrastReverse' }],\n    },\n  ],\n});\n\nchart.render();\n",paraId:17,tocIndex:6},{value:"For more specific cases, please refer to the chart example page links provided above.",paraId:18,tocIndex:6}]},95767:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(43771);const t=[{value:"In G2, a ",paraId:0,tocIndex:0},{value:"View",paraId:0,tocIndex:0},{value:" is the core component unit of charts, used to host and organize multiple marks, and to uniformly manage data, coordinate systems, interactions, styles, etc. Each view has independent data, coordinate system, and interaction configurations, and serves as the smallest unit for applying interactions and styles. Through proper view decomposition, complex visualization layouts such as multi-layer, faceted, and nested compositions can be achieved.",paraId:0,tocIndex:0},{value:"Views not only support flexible data and encoding configurations but can also inherit and override configurations passed from parent levels (such as composite views, facets, etc.), enabling flexible composition and reuse.",paraId:1,tocIndex:0},{value:"Basic rendering of single charts (such as bar charts, line charts, etc.)",paraId:2,tocIndex:1},{value:"Multi-layer overlay (such as bar chart + line chart, scatter plot + heatmap, etc.)",paraId:2,tocIndex:1},{value:"Complex layouts like facets, small multiples, dashboards",paraId:2,tocIndex:1},{value:"Independent management of local interactions, local styles, and local data",paraId:2,tocIndex:1},{value:"Zoned application of advanced features like themes, animations, and states",paraId:2,tocIndex:1},{value:"Views support rich configuration options covering data, encoding, coordinates, styles, interactions, and other aspects. The configuration options are essentially the same as the top-level Chart, commonly used as follows:",paraId:3,tocIndex:2},{value:"Configuration",paraId:4,tocIndex:2},{value:"Description",paraId:4,tocIndex:2},{value:"Type",paraId:4,tocIndex:2},{value:"Scope/Inheritance",paraId:4,tocIndex:2},{value:"data",paraId:4,tocIndex:2},{value:"Data source",paraId:4,tocIndex:2},{value:"array/object",paraId:4,tocIndex:2},{value:"view and all its children",paraId:4,tocIndex:2},{value:"encode",paraId:4,tocIndex:2},{value:"Mapping from data to visual channels",paraId:4,tocIndex:2},{value:"object",paraId:4,tocIndex:2},{value:"view and all its children",paraId:4,tocIndex:2},{value:"scale",paraId:4,tocIndex:2},{value:"Scales for visual channels",paraId:4,tocIndex:2},{value:"object",paraId:4,tocIndex:2},{value:"Inheritable/Override (view/mark)",paraId:4,tocIndex:2},{value:"transform",paraId:4,tocIndex:2},{value:"Data transformation",paraId:4,tocIndex:2},{value:"array",paraId:4,tocIndex:2},{value:"Inheritable/Override (view/mark)",paraId:4,tocIndex:2},{value:"coordinate",paraId:4,tocIndex:2},{value:"Coordinate system configuration",paraId:4,tocIndex:2},{value:"object",paraId:4,tocIndex:2},{value:"Inheritable/Override (view/mark)",paraId:4,tocIndex:2},{value:"style",paraId:4,tocIndex:2},{value:"View area styles",paraId:4,tocIndex:2},{value:"object",paraId:4,tocIndex:2},{value:"This view only",paraId:4,tocIndex:2},{value:"axis",paraId:4,tocIndex:2},{value:"Axis configuration",paraId:4,tocIndex:2},{value:"object",paraId:4,tocIndex:2},{value:"Inheritable/Override (view/mark)",paraId:4,tocIndex:2},{value:"legend",paraId:4,tocIndex:2},{value:"Legend configuration",paraId:4,tocIndex:2},{value:"object",paraId:4,tocIndex:2},{value:"Inheritable/Override (view/mark)",paraId:4,tocIndex:2},{value:"tooltip",paraId:4,tocIndex:2},{value:"Tooltip configuration",paraId:4,tocIndex:2},{value:"object",paraId:4,tocIndex:2},{value:"This view only",paraId:4,tocIndex:2},{value:"interaction",paraId:4,tocIndex:2},{value:"Interaction configuration",paraId:4,tocIndex:2},{value:"object",paraId:4,tocIndex:2},{value:"Inheritable/Override (view/mark)",paraId:4,tocIndex:2},{value:"theme",paraId:4,tocIndex:2},{value:"Theme configuration",paraId:4,tocIndex:2},{value:"object",paraId:4,tocIndex:2},{value:"Inheritable/Override",paraId:4,tocIndex:2},{value:"children",paraId:4,tocIndex:2},{value:"Child marks or views",paraId:4,tocIndex:2},{value:"array",paraId:4,tocIndex:2},{value:"This view only",paraId:4,tocIndex:2},{value:"Notes:",paraId:5,tocIndex:2},{value:"Configurations like ",paraId:6,tocIndex:2},{value:"data",paraId:6,tocIndex:2},{value:", ",paraId:6,tocIndex:2},{value:"encode",paraId:6,tocIndex:2},{value:", ",paraId:6,tocIndex:2},{value:"scale",paraId:6,tocIndex:2},{value:", ",paraId:6,tocIndex:2},{value:"axis",paraId:6,tocIndex:2},{value:", ",paraId:6,tocIndex:2},{value:"legend",paraId:6,tocIndex:2},{value:", ",paraId:6,tocIndex:2},{value:"transform",paraId:6,tocIndex:2},{value:", ",paraId:6,tocIndex:2},{value:"coordinate",paraId:6,tocIndex:2},{value:", ",paraId:6,tocIndex:2},{value:"interaction",paraId:6,tocIndex:2},{value:" set at the view level will automatically apply to all children (marks), and can be individually overridden at the mark level.",paraId:6,tocIndex:2},{value:"Others like ",paraId:6,tocIndex:2},{value:"style",paraId:6,tocIndex:2},{value:", ",paraId:6,tocIndex:2},{value:"tooltip",paraId:6,tocIndex:2},{value:" only apply to the current view.",paraId:6,tocIndex:2},{value:"Complete configuration example:",paraId:7,tocIndex:2},{value:"({\n  type: 'view',\n  data: [\n    { type: 'A', value: 30 },\n    { type: 'B', value: 50 },\n    { type: 'C', value: 20 },\n  ],\n  encode: { x: 'type', y: 'value' },\n  scale: { y: { nice: true } },\n  coordinate: { type: 'rect' },\n  style: { viewFill: '#f5f5f5' },\n  axis: { y: { grid: true } },\n  legend: { color: { position: 'top' } },\n  tooltip: {\n    title: { field: 'type' },\n    items: [{ field: 'value' }],\n  },\n  interaction: { elementHighlight: true },\n  theme: { color: ['#5B8FF9', '#5AD8A6', '#5D7092'] },\n  children: [\n    { type: 'interval' },\n    { type: 'line', style: { stroke: '#faad14' } },\n  ],\n});\n",paraId:8,tocIndex:2},{value:"Directly declare views and their child elements in options:",paraId:9,tocIndex:4},{value:"({\n  type: 'view',\n  data: [...],\n  encode: {...},\n  children: [\n    { type: 'interval', encode: {...} },\n    { type: 'line', encode: {...} },\n  ],\n});\n",paraId:10,tocIndex:4},{value:"Create views and add marks through API:",paraId:11,tocIndex:5},{value:"const chart = new G2.Chart();\nconst view = chart.view({ data: [...] });\nview.interval().encode('x', 'type').encode('y', 'value');\nview.line().encode('x', 'type').encode('y', 'value');\nchart.render();\n",paraId:12,tocIndex:5},{value:"Views can serve as child nodes of composite nodes (such as facets, spatial layouts):",paraId:13,tocIndex:6},{value:"const facet = chart.facetRect();\nfacet.view().interval().encode('x', 'type').encode('y', 'value');\nfacet.view().line().encode('x', 'type').encode('y', 'value');\n",paraId:14,tocIndex:6},{value:"Views support setting styles for their own area (such as background color, borders, etc.) and can provide unified style management for child marks. For details, see ",paraId:15,tocIndex:7},{value:"Style",paraId:16,tocIndex:7},{value:".",paraId:15,tocIndex:7},{value:"({\n  type: 'view',\n  style: {\n    viewFill: '#e6f7ff',\n    plotFill: '#fffbe6',\n    mainFill: '#fff',\n    contentFill: '#f0f5ff',\n  },\n  children: [{ type: 'interval', style: { fill: '#5B8FF9' } }],\n});\n",paraId:17,tocIndex:7}]},50559:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(51331);const t=[{value:"G2 version 5.0.19 publishs the on-demand packaging function. You can leverage the ",paraId:0},{value:"Tree-Shaking",paraId:0},{value:" capability of bundling tools like ",paraId:0},{value:"Rollup",paraId:0},{value:",",paraId:0},{value:"Webpack",paraId:0},{value:" to use G2 features on demand, thereby reducing the packaged size. Although there is still a lot of room for optimization from the results, this function has the following significance:",paraId:0},{value:"Prevent the package size of existing G2 5.0 users from meaninglessly increasing.",paraId:1},{value:"It can more clearly analyze dependencies and organize the overall architecture of G2 5.0.",paraId:1},{value:"Provide an idea for expanding G2 5.0 capabilities.",paraId:1},{value:"For example, package the following web page, which uses G2 to draw a bar chart:",paraId:2,tocIndex:0},{value:"<html>\n  <div id=\"container\"></div>\n  <script type=\"module\">\n    import { corelib, extend, Runtime } from '@antv/g2';\n\n    //Extend corelib's capabilities based on Runtime\n    const Chart = extend(Runtime, corelib());\n\n    //Initialize the expanded chart instance\n    const chart = new Chart({\n      container: 'container',\n    });\n\n    // Declare visualization\n    chart.options({\n      type: 'interval',\n      data: [\n        { genre: 'Sports', sold: 275 },\n        { genre: 'Strategy', sold: 115 },\n        { genre: 'Action', sold: 120 },\n        { genre: 'Shooter', sold: 350 },\n        { genre: 'Other', sold: 150 },\n      ],\n      encode: {\n        x: 'genre',\n        y: 'sold',\n      },\n    });\n\n    // Render visualization\n    chart.render();\n  <\/script>\n</html>\n",paraId:3,tocIndex:0},{value:"and use Chart object which exposed from ",paraId:4,tocIndex:0},{value:"import { Chart } from '@antv/g2'",paraId:4,tocIndex:0},{value:" directly. The bundle package size is compared as follows:",paraId:4,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { lib: 'Chart', size: 957772, type: 'raw' },\n  { lib: 'Chart', size: 288753, type: 'gzip' },\n  { lib: 'Runtime', size: 855619, type: 'raw' },\n  { lib: 'Runtime', size: 252045, type: 'gzip' },\n];\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'interval',\n  data,\n  encode: {\n    x: 'lib',\n    y: 'size',\n    color: 'type',\n  },\n  transform: [{ type: 'dodgeX' }],\n  scale: {\n    y: { nice: true },\n  },\n  axis: {\n    y: { labelFormatter: (d) => d / 1000 + 'kb' },\n    x: { title: false },\n  },\n  legend: {\n    color: { title: false },\n  },\n  labels: [{ text: (d) => (d.size / 1000).toFixed(2) + 'kb' }],\n});\n\nchart.render();\n",paraId:5,tocIndex:0},{value:"It can be seen that the size has been reduced ",paraId:6,tocIndex:0},{value:"100kb",paraId:6,tocIndex:0},{value:" about.",paraId:6,tocIndex:0},{value:"The architecture of G2 is composed of Runtime + library. Runtime is responsible for the rendering process, and library is a JavaScript object composed of a series of visual components, used to process or draw data at different stages of the entire rendering.",paraId:7,tocIndex:1},{value:"const library = {\n  'mark.interval': Interval,\n  'mark.forceGraph': ForceGraph,\n  'mark.geoPath': GeoPath,\n  'scale.linear': Linear,\n  'scale.log': Log,\n  //...\n};\n",paraId:8,tocIndex:1},{value:"Therefore, the size of G2 after packaging is determined by the size of the runtime and the library. The size of the runtime is fixed, but the size of the library can change:",paraId:9,tocIndex:1},{value:"If I only use statistical charts in my project, I will not rely on geography or graph analysis-related capabilities, and the visualization components corresponding to these capabilities do not need to be included in the library I use.",paraId:9,tocIndex:1},{value:"Based on the above theory, we can control the final package size by controlling the visual components contained in the library.",paraId:10,tocIndex:1},{value:"The following is a brief introduction to the APIs related to on-demand packaging.",paraId:11,tocIndex:2},{value:"options",paraId:12},{value:"Returns a G2 runtime. This runtime does not contain any Library and requires cooperation with ",paraId:13,tocIndex:3},{value:"G2",paraId:14,tocIndex:3},{value:".extend",paraId:14,tocIndex:3},{value:".",paraId:13,tocIndex:3},{value:"You can use single library, for example using only core capabilities:",paraId:15,tocIndex:3},{value:"import { Runtime, extend, corelib } from '@antv/g2';\n\nconst Chart = extend(Runtime, corelib());\n",paraId:16,tocIndex:3},{value:"You can also use multiple libraries at the same time, such as using core and geographic capabilities:",paraId:17,tocIndex:3},{value:"import { Runtime, extend, corelib, geolib } from '@antv/g2';\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...geolib(),\n});\n",paraId:18,tocIndex:3},{value:"Runtime",paraId:12},{value:"library",paraId:12},{value:"Enhance ",paraId:19,tocIndex:4},{value:"Runtime",paraId:19,tocIndex:4},{value:" according to a specified ",paraId:19,tocIndex:4},{value:"library",paraId:19,tocIndex:4},{value:", including adding types and corresponding Chart APIs.",paraId:19,tocIndex:4},{value:"import { Runtime, extend, corelib } from '@antv/g2';\n\nconst Chart = extend(Runtime, corelib());\n",paraId:20,tocIndex:4},{value:"Returns the standard library, which contains all capabilities of G2 except 3D, that is, all visualization components of ",paraId:21,tocIndex:5},{value:"G2.corelib",paraId:22,tocIndex:5},{value:"，",paraId:21,tocIndex:5},{value:"G2.plotlib",paraId:23,tocIndex:5},{value:"，",paraId:21,tocIndex:5},{value:"G2.geolib",paraId:24,tocIndex:5},{value:", and ",paraId:21,tocIndex:5},{value:"G2.graphlib",paraId:25,tocIndex:5},{value:". ",paraId:21,tocIndex:5},{value:"G2.Chart",paraId:26,tocIndex:5},{value:" is using this library. (",paraId:21,tocIndex:5},{value:"Source code",paraId:21,tocIndex:5},{value:"·",paraId:21,tocIndex:5},{value:"Case",paraId:21,tocIndex:5},{value:")",paraId:21,tocIndex:5},{value:"import { Runtime, extend, stdlib } from '@antv/g2';\n\nconst Chart = extend(Runtime, stdlib());\n\nconst chart = new Chart();\n\nchart.interval(); // corelib\nchart.sankey(); // plotlib\nchart.geoPath(); // graphlib\nchart.forceGraph(); // graphlib\n",paraId:27,tocIndex:5},{value:"Return to the core library, containing only basic mark. You can view the included visual components through the source code. (",paraId:28,tocIndex:6},{value:"Source code",paraId:28,tocIndex:6},{value:"·",paraId:28,tocIndex:6},{value:"Case",paraId:28,tocIndex:6},{value:")",paraId:28,tocIndex:6},{value:"import { Runtime, extend, corelib } from '@antv/g2';\n\nconst Chart = extend(Runtime, corelib());\n",paraId:29,tocIndex:6},{value:"Return to an advanced statistical analysis library, including some sophisticated statistical tags (Snakey et al.) and transformations (Venn et al.). It cannot be used independently, must be used with ",paraId:30,tocIndex:7},{value:"G2.corelib",paraId:31,tocIndex:7},{value:". You can view the included visual components through the source code. (",paraId:30,tocIndex:7},{value:"Source code",paraId:30,tocIndex:7},{value:"·",paraId:30,tocIndex:7},{value:"Case",paraId:30,tocIndex:7},{value:")",paraId:30,tocIndex:7},{value:"import { Runtime, extend, corelib, plotlib } from '@antv/g2';\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...plotlib(),\n});\n\nconst chart = new Chart();\n\nchart.sankey();\n",paraId:32,tocIndex:7},{value:"Returns the geographical analysis library, including geographical tags (GeoPath, etc.) and projections (Projection). It cannot be used independently, must be used with ",paraId:33,tocIndex:8},{value:"G2.corelib",paraId:34,tocIndex:8},{value:". You can view the included visual components through the source code. (",paraId:33,tocIndex:8},{value:"Source code",paraId:33,tocIndex:8},{value:"·",paraId:33,tocIndex:8},{value:"Case",paraId:33,tocIndex:8},{value:")",paraId:33,tocIndex:8},{value:"import { Runtime, extend, corelib, geolib } from '@antv/g2';\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...geolib(),\n});\n\nconst chart = new Chart();\n\nchart.geoPath();\n",paraId:35,tocIndex:8},{value:"Returns a graph analysis library, containing graph markup (ForceGraph, etc.). It cannot be used independently, must be used with ",paraId:36,tocIndex:9},{value:"G2.corelib",paraId:37,tocIndex:9},{value:". You can view the included visual components through the source code. (",paraId:36,tocIndex:9},{value:"Source code",paraId:36,tocIndex:9},{value:"·",paraId:36,tocIndex:9},{value:"Case",paraId:36,tocIndex:9},{value:")",paraId:36,tocIndex:9},{value:"import { Runtime, extend, corelib, graphlib } from '@antv/g2';\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...graphlib(),\n});\n\nconst chart = new Chart();\n\nchart.forceGraph();\n",paraId:38,tocIndex:9},{value:"Returns the enhanced analysis library, providing enhanced analysis tags (Auto, etc.). This library will depend on ",paraId:39,tocIndex:10},{value:"@antv/ava",paraId:39,tocIndex:10},{value:", providing capabilities such as automatic chart drawing and automatic annotation. It cannot be used independently, must be used with ",paraId:39,tocIndex:10},{value:"G2.corelib",paraId:40,tocIndex:10},{value:".",paraId:39,tocIndex:10},{value:"import { Runtime, extend, corelib } from '@antv/g2';\nimport { autolib } from '@antv/g2-extension-ava';\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...autolib(),\n});\n\nconst chart = new Chart();\n\nchart.auto(); // Auto Mark\n",paraId:41,tocIndex:10},{value:"Under development, expected to be online by the end of October",paraId:42,tocIndex:11},{value:"Return to the 3D analysis library, providing capabilities for 3D visualization. This library will not be included in ",paraId:43,tocIndex:11},{value:"G2.stdlib",paraId:44,tocIndex:11},{value:". It cannot be used independently, it needs to be used with ",paraId:43,tocIndex:11},{value:"G2.corelib",paraId:45,tocIndex:11},{value:". ",paraId:43,tocIndex:11},{value:"Example",paraId:46,tocIndex:11},{value:"import { Runtime, extend, corelib } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\nimport { Renderer } from '@antv/g-webgl';\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...threedlib(),\n});\n\nconst chart = new Chart({\n  renderer: new Renderer(), //Use webgl renderer\n  depth: 400, // Set depth\n});\n\nchart.point3D();\n",paraId:47,tocIndex:11},{value:"At present, the ability to package on demand has been published, but it can be found that the effect is not very obvious, and the size is only reduced by about 10%. By analyzing the following dependency graph (G2 5.0.18 use ",paraId:48,tocIndex:12},{value:"G2.stdlib",paraId:49,tocIndex:12},{value:") can have the following ideas for further optimization:",paraId:48,tocIndex:12},{value:"Reduce the size of the runtime: put some capabilities in the library and use them on demand.",paraId:50,tocIndex:12},{value:"Dependency governance: remove some duplicate dependencies, such as",paraId:50,tocIndex:12},{value:"@antv/util",paraId:50,tocIndex:12},{value:";Reduce the size of some dependencies",paraId:50,tocIndex:12},{value:"@antv/component",paraId:50,tocIndex:12},{value:"。",paraId:50,tocIndex:12},{value:"Provide a smaller library than corelib: mark-level on-demand packaging can be achieved.",paraId:50,tocIndex:12},{value:"The current thinking for the third idea is: provide ",paraId:51,tocIndex:12},{value:"G2.litelib",paraId:51,tocIndex:12},{value:", mark can be imported on demand.",paraId:51,tocIndex:12},{value:"import { Runtime, extend, litelib, Interval } from '@antv/g2';\n\nconst Chart = extend(Runtime, {\n  ...litelib,\n  'mark.interval': Interval,\n});\n\nconst chart = new Chart();\n\nchart.interval();\n",paraId:52,tocIndex:12},{value:"Expected ",paraId:53,tocIndex:12},{value:"litelib",paraId:53,tocIndex:12},{value:" contains only the basic components needed to draw a visualization, all other components need to be used on demand through ",paraId:53,tocIndex:12},{value:"import",paraId:53,tocIndex:12},{value:", such as using tooltip interaction:",paraId:53,tocIndex:12},{value:"import { Runtime, extend, litelib, Interval, Tooltip } from '@antv/g2';\n\nconst Chart = extend(Runtime, {\n  ...litelib,\n  'mark.interval': Interval,\n  'interaction.tooltip': Tooltip,\n});\n\nconst chart = new Chart();\n\nchart.options({\n  type: 'interval',\n  interaction: { tooltip: true }, // 使用 tooltip 交互\n});\n",paraId:54,tocIndex:12},{value:"If you are interested in related things or have ideas for optimizing the package size of G2 5.0, you can provide relevant ",paraId:55,tocIndex:12},{value:"idea",paraId:55,tocIndex:12},{value:", or play around in the G2 5.0 ",paraId:55,tocIndex:12},{value:"test environment",paraId:55,tocIndex:12},{value:"!",paraId:55,tocIndex:12}]},75461:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(39619);const t=[{value:"G2 introduced the spec configuration method in version 5.0, which will become the mainstream usage method in the future. However, there is a key issue with the current spec:",paraId:0,tocIndex:0},{value:"To provide more flexible graphic style configuration capabilities, G2 supports numerous function callback methods that allow users to customize styles. However, this brings a hidden danger — ",paraId:1,tocIndex:0},{value:"function configurations in spec cannot be serialized",paraId:1,tocIndex:0},{value:". In SSR scenarios, users expect to be able to persistently store spec configurations, which requires a string expression to describe function behavior.",paraId:1,tocIndex:0},{value:"const spec = {\n  style: {\n    // Using callback functions for flexible customization, but cannot be persistently stored\n    fill: (d) => (d.value > 100 ? 'red' : 'green'),\n  },\n};\n",paraId:2,tocIndex:0},{value:"To solve this problem, we designed and open-sourced ",paraId:3,tocIndex:0},{value:"expr",paraId:3,tocIndex:0},{value:". The function above can be equivalently converted to a string expression: ",paraId:3,tocIndex:0},{value:"{d.value > 100 ? 'red' : 'green'}",paraId:3,tocIndex:0},{value:".",paraId:3,tocIndex:0},{value:"To use expressions in G2, you need to wrap the expression content with ",paraId:4,tocIndex:1},{value:"{",paraId:4,tocIndex:1},{value:" and ",paraId:4,tocIndex:1},{value:"}",paraId:4,tocIndex:1},{value:" so that G2 can recognize it as an expression to be parsed rather than an ordinary string. For example: ",paraId:4,tocIndex:1},{value:'{d.value > 100 ? "red" : "green"}',paraId:4,tocIndex:1},{value:".",paraId:4,tocIndex:1},{value:"As developers, we are most concerned with expression syntax. We have designed a concise and intuitive template syntax. For complete details, please refer to the ",paraId:5,tocIndex:2},{value:"expr documentation",paraId:5,tocIndex:2},{value:", which will not be repeated here.",paraId:5,tocIndex:2},{value:"Currently, G2 supports expr expressions wherever function callbacks are supported. The system will parse the expressions into functions that the renderer can understand before rendering.",paraId:6,tocIndex:3},{value:"This presents a challenge: different functions have different parameters with varying semantics. How can we support expressions uniformly?",paraId:7,tocIndex:3},{value:"The expr design requires that parameters in the template syntax strictly correspond to keys in the context. However, in G2, callback function parameters are diverse. If they were simply set as datum, i, data, options, etc., the semantics would not be clear enough and would be difficult to adapt to various scenarios.",paraId:8,tocIndex:3},{value:"After comprehensive consideration, we adopted a non-semantic variable naming scheme — using letter variable names like a, b, c, d to represent the position order of function parameters.",paraId:9,tocIndex:3},{value:"In different callback functions, the actual meanings of parameters ",paraId:10,tocIndex:4},{value:"a",paraId:10,tocIndex:4},{value:", ",paraId:10,tocIndex:4},{value:"b",paraId:10,tocIndex:4},{value:", ",paraId:10,tocIndex:4},{value:"c",paraId:10,tocIndex:4},{value:", ",paraId:10,tocIndex:4},{value:"d",paraId:10,tocIndex:4},{value:" will vary:",paraId:10,tocIndex:4},{value:"In most callbacks, such as ",paraId:11,tocIndex:4},{value:"fill",paraId:11,tocIndex:4},{value:" in ",paraId:11,tocIndex:4},{value:"style",paraId:11,tocIndex:4},{value:" and ",paraId:11,tocIndex:4},{value:"text",paraId:11,tocIndex:4},{value:" in ",paraId:11,tocIndex:4},{value:"labels",paraId:11,tocIndex:4},{value:", ",paraId:11,tocIndex:4},{value:"a",paraId:11,tocIndex:4},{value:" represents the data item, ",paraId:11,tocIndex:4},{value:"b",paraId:11,tocIndex:4},{value:" represents the index, ",paraId:11,tocIndex:4},{value:"c",paraId:11,tocIndex:4},{value:" represents the entire dataset, and ",paraId:11,tocIndex:4},{value:"d",paraId:11,tocIndex:4},{value:" represents options:",paraId:11,tocIndex:4},{value:"labels: [\n  {\n    // Function method\n    text: (datum, index, data, options) => `${datum.name}: ${datum.value}`,\n    // Expression method - a corresponds to datum, b corresponds to index, c corresponds to data\n    text: \"{ a.name + ': ' + a.value }\",\n  },\n];\n",paraId:12,tocIndex:4},{value:"In ",paraId:13,tocIndex:4},{value:"selector",paraId:13,tocIndex:4},{value:" of ",paraId:13,tocIndex:4},{value:"labels",paraId:13,tocIndex:4},{value:", ",paraId:13,tocIndex:4},{value:"a",paraId:13,tocIndex:4},{value:" represents the entire dataset:",paraId:13,tocIndex:4},{value:"labels: [\n  {\n    // Function method\n    selector: (data) => data,\n    // Expression method\n    selector: '{a}',\n  },\n];\n",paraId:14,tocIndex:4},{value:"Through this unified parameter naming convention, we can consistently use expressions in different scenarios without worrying about semantic differences in parameter names.",paraId:15,tocIndex:4},{value:"To help developers better understand how to use expressions, here are some comparison examples of function and expression approaches in common scenarios:",paraId:16,tocIndex:5},{value:"// Function approach\nstyle: {\n  fill: (datum) => (datum.value > 1000 ? 'red' : 'blue'),\n  opacity: (datum) => datum.value / 2000,\n  stroke: (datum) => (datum.category === 'A' ? 'black' : 'gray'),\n  lineWidth: (datum) => (datum.important ? 2 : 1),\n}\n\n// Expression approach\nstyle: {\n  fill: '{a.value > 1000 ? \"red\" : \"blue\"}',\n  opacity: '{a.value / 2000}',\n  stroke: '{a.category === \"A\" ? \"black\" : \"gray\"}',\n  lineWidth: '{a.important ? 2 : 1}',\n}\n",paraId:17,tocIndex:6},{value:"// Function approach\nencode: {\n  x: 'category',\n  y: 'value',\n  color: (datum) => (datum.value > 500 ? 'category1' : 'category2'),\n  opacity: (datum, index) => 1 - index * 0.1,\n}\n\n// Expression approach\nencode: {\n  x: 'category',\n  y: 'value',\n  color: '{a.value > 500 ? \"category1\" : \"category2\"}',\n  opacity: '{1 - b * 0.1}',\n}\n",paraId:18,tocIndex:7},{value:"// Function approach\nlabels: [\n  {\n    text: (datum) => `${datum.name}: ${datum.value}`,\n    position: (datum) => (datum.value > 1000 ? 'top' : 'bottom'),\n    style: {\n      fontSize: (datum) => 10 + datum.value / 200,\n    },\n    transform: [{ type: 'contrastReverse' }],\n  },\n];\n\n// Expression approach\nlabels: [\n  {\n    text: '{a.name + \": \" + a.value}',\n    position: '{a.value > 1000 ? \"top\" : \"bottom\"}',\n    style: {\n      fontSize: '{10 + a.value / 200}',\n    },\n    transform: [{ type: 'contrastReverse' }],\n  },\n];\n",paraId:19,tocIndex:8},{value:"Currently, G2 only supports expr expression writing for callback functions in the following APIs:",paraId:20,tocIndex:9},{value:"style",paraId:21,tocIndex:9},{value:"encode",paraId:21,tocIndex:9},{value:"labels",paraId:21,tocIndex:9},{value:"children",paraId:21,tocIndex:9},{value:"If you need to use expressions in other APIs, please submit an issue for feedback.",paraId:22,tocIndex:9},{value:"Here is a complete example demonstrating the powerful capabilities of expressions in practical applications:",paraId:23,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst spec = {\n  type: 'spaceLayer',\n  height: 840,\n  width: 640,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/79fd9317-d2af-4bc4-90fa-9d07357398fd.csv',\n    format: 'csv',\n  },\n  children: [\n    {\n      type: 'interval',\n      height: 360,\n      width: 360,\n      legend: false,\n      x: 280,\n      transform: [{ type: 'stackY' }],\n      coordinate: { type: 'theta' },\n      scale: {\n        color: { palette: 'spectral' },\n      },\n      encode: {\n        y: 'value',\n        color: 'name',\n        enterDelay: '{a.value>10000000 ? a.value>20000000 ? 2000 : 1000 : 0}',\n      },\n      style: {\n        stroke: '{ a.value>20000000 ? \"purple\" : null}',\n      },\n      labels: [\n        {\n          text: '{\"*\" + a.name}',\n          radius: '{a.value>15000000 ? a.value>20000000 ? 0.6 : 0.75 : 0.9}',\n          style: {\n            fontSize: '{a.value>15000000 ? a.value>20000000 ? 12 : 10 : 6}',\n            fontWeight: 'bold',\n          },\n          transform: [{ type: 'contrastReverse' }],\n        },\n        {\n          text: '{b < c.length - 3 ? a.value : \"\"}',\n          radius: '{a.value>15000000 ? a.value>20000000 ? 0.6 : 0.75 : 0.9}',\n          style: { fontSize: 9, dy: 12 },\n          transform: [{ type: 'contrastReverse' }],\n        },\n      ],\n      animate: { enter: { type: 'waveIn', duration: 600 } },\n    },\n    {\n      type: 'view',\n      height: 400,\n      width: 540,\n      y: 300,\n      children: [\n        {\n          type: 'interval',\n          height: 400,\n          width: 540,\n          legend: false,\n          y: 300,\n          scale: {\n            color: { palette: 'spectral' },\n          },\n          encode: {\n            y: 'value',\n            x: 'name',\n            color: 'name',\n            enterDelay:\n              '{a.value>10000000 ? a.value>20000000 ? 2000 : 1000 : 0}',\n          },\n        },\n        {\n          type: 'line',\n          height: 400,\n          width: 540,\n          legend: false,\n          y: 300,\n          encode: { x: 'name', y: 'value' },\n          scale: { y: { independent: true } },\n          labels: [\n            {\n              text: '{a.value}',\n              selector: '{a}',\n            },\n          ],\n          axis: {\n            y: {\n              position: 'right',\n              grid: null,\n            },\n          },\n        },\n      ],\n    },\n  ],\n};\n\nchart.options(spec);\n\nchart.render();\n",paraId:24,tocIndex:10}]},70598:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(2234);const t=[{value:"geoPath",paraId:0},{value:" can be used to draw maps in combination with geojson.",paraId:0},{value:"import { Chart } from '@antv/g2';\nimport { feature } from 'topojson-client';\n\nPromise.all([\n  fetch('https://assets.antv.antgroup.com/g2/us-10m.json').then((res) =>\n    res.json(),\n  ),\n  fetch('https://assets.antv.antgroup.com/g2/unemployment2.json').then((res) =>\n    res.json(),\n  ),\n]).then((values) => {\n  const [us, unemployment] = values;\n  const counties = feature(us, us.objects.counties).features;\n\n  const chart = new Chart({\n    container: 'container',\n  });\n\n  chart\n    .geoPath()\n    .coordinate({ type: 'albersUsa' })\n    .data({\n      value: counties,\n      transform: [\n        {\n          type: 'join',\n          join: unemployment,\n          on: ['id', 'id'],\n          select: ['rate'],\n        },\n      ],\n    })\n    .scale('color', {\n      type: 'sequential',\n      palette: 'ylGnBu',\n      unknown: '#fff',\n    })\n    .encode('color', 'rate');\n\n  chart.render();\n});\n",paraId:1,tocIndex:0},{value:"For more examples, please visit the ",paraId:2,tocIndex:0},{value:"Chart Examples",paraId:3,tocIndex:0},{value:" page.",paraId:2,tocIndex:0},{value:"Currently, in addition to the same API and configuration options as common marks, ",paraId:4,tocIndex:1},{value:"geoPath",paraId:4,tocIndex:1},{value:" has a special ",paraId:4,tocIndex:1},{value:"projection",paraId:4,tocIndex:1},{value:" mapping. G2 currently has all the mappings from ",paraId:4,tocIndex:1},{value:"d3-geo",paraId:4,tocIndex:1},{value:" built in.",paraId:4,tocIndex:1},{value:"The map is ultimately determined by geographic data, so you need to find a geoJson or topoJson data for a Chinese administrative map on the Internet and apply this data to the current sample DEMO.",paraId:5,tocIndex:3},{value:"import { Chart } from '@antv/g2';\nimport { feature } from 'topojson-client';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nfetch('xxx/china.topo.json').then(async (res) => {\n  const data = await res.json();\n  const features = feature(data, data.objects.default).features;\n\n  chart\n    .geoPath()\n    .coordinate({ type: 'mercator' })\n    .data(features)\n    .style('stroke', 'white');\n\n  chart.render();\n});\n",paraId:6,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nfetch('xxx/china.json').then(async (res) => {\n  const data = await res.json();\n  const features = data.features;\n\n  chart\n    .geoPath()\n    .coordinate({ type: 'mercator' })\n    .data(features)\n    .style('stroke', 'white');\n\n  chart.render();\n});\n",paraId:7,tocIndex:5}]},70493:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(39652);const t=[{value:"geoView",paraId:0},{value:" is a container for drawing maps, used for layering multiple geoPath layers.",paraId:0},{value:"/**\n * A recreation of this demo: https://vega.github.io/vega-lite/examples/geo_layer_line_london.html\n */\nimport { Chart } from '@antv/g2';\nimport { feature } from 'topojson-client';\n\nPromise.all([\n  fetch('https://assets.antv.antgroup.com/g2/londonBoroughs.json').then((res) =>\n    res.json(),\n  ),\n  fetch('https://assets.antv.antgroup.com/g2/londonCentroids.json').then(\n    (res) => res.json(),\n  ),\n  fetch('https://assets.antv.antgroup.com/g2/londonTubeLines.json').then(\n    (res) => res.json(),\n  ),\n]).then((values) => {\n  const [londonBoroughs, londonCentroids, londonTubeLines] = values;\n  const london = feature(\n    londonBoroughs,\n    londonBoroughs.objects.boroughs,\n  ).features;\n  const line = feature(londonTubeLines, londonTubeLines.objects.line).features;\n\n  const chart = new Chart({\n    container: 'container',\n    autoFit: true,\n  });\n\n  const geoView = chart.geoView();\n\n  geoView\n    .geoPath()\n    .data(london)\n    .style('fill', 'lightgray')\n    .style('stroke', 'white')\n    .style('strokeWidth', 2);\n\n  geoView\n    .text()\n    .data(londonCentroids)\n    .encode('x', 'cx')\n    .encode('y', 'cy')\n    .encode('text', (d) => d.name.split(/\\W/)[0])\n    .style('fontSize', 8)\n    .style('opacity', 0.6);\n\n  geoView\n    .geoPath()\n    .data(line)\n    .encode('color', 'id')\n    .encode('shape', 'hollow')\n    .scale('color', {\n      domain: [\n        'Bakerloo',\n        'Central',\n        'Circle',\n        'District',\n        'DLR',\n        'Hammersmith & City',\n        'Jubilee',\n        'Metropolitan',\n        'Northern',\n        'Piccadilly',\n        'Victoria',\n        'Waterloo & City',\n      ],\n      range: [\n        'rgb(137,78,36)',\n        'rgb(220,36,30)',\n        'rgb(255,206,0)',\n        'rgb(1,114,41)',\n        'rgb(0,175,173)',\n        'rgb(215,153,175)',\n        'rgb(106,114,120)',\n        'rgb(114,17,84)',\n        'rgb(0,0,0)',\n        'rgb(0,24,168)',\n        'rgb(0,160,226)',\n        'rgb(106,187,170)',\n      ],\n    });\n\n  chart.render();\n});\n",paraId:1,tocIndex:0},{value:"Currently, the ",paraId:2,tocIndex:1},{value:"geoView",paraId:2,tocIndex:1},{value:" container has all the properties of geoPath, except for the ",paraId:2,tocIndex:1},{value:"encode",paraId:2,tocIndex:1},{value:" method which is unique to geoPath as a mark.",paraId:2,tocIndex:1},{value:"Similarly, for ",paraId:3,tocIndex:1},{value:"projection",paraId:3,tocIndex:1},{value:" mapping, G2 currently has all the mappings from ",paraId:3,tocIndex:1},{value:"d3-geo",paraId:3,tocIndex:1},{value:" built-in.",paraId:3,tocIndex:1}]},15901:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(65714);const t=[{value:'Force-directed graph is a chart used to display complex relationship networks. In a force-directed graph, each node in the system can be viewed as a charged particle with repulsive forces between them. At the same time, these particles are connected by "edges" between them, creating attractive forces.',paraId:0},{value:"import { Chart } from '@antv/g2';\nimport { schemeTableau10 } from 'd3-scale-chromatic';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .forceGraph()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/miserable.json',\n  })\n  .scale('color', { range: schemeTableau10 });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"Property",paraId:2,tocIndex:1},{value:"Description",paraId:2,tocIndex:1},{value:"Type",paraId:2,tocIndex:1},{value:"Default",paraId:2,tocIndex:1},{value:"layout",paraId:2,tocIndex:1},{value:"Layout configuration",paraId:2,tocIndex:1},{value:"ForceTransform",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"style",paraId:2,tocIndex:1},{value:"Configure graphics style and label style",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"nodeLabels",paraId:2,tocIndex:1},{value:"Custom configuration for node data labels",paraId:2,tocIndex:1},{value:"label[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"linkLabels",paraId:2,tocIndex:1},{value:"Custom configuration for link data labels",paraId:2,tocIndex:1},{value:"label[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"Property",paraId:3,tocIndex:2},{value:"Description",paraId:3,tocIndex:2},{value:"Type",paraId:3,tocIndex:2},{value:"Default",paraId:3,tocIndex:2},{value:"joint",paraId:3,tocIndex:2},{value:"Discrete force layout or attraction layout",paraId:3,tocIndex:2},{value:"boolean",paraId:3,tocIndex:2},{value:"true",paraId:3,tocIndex:2},{value:"nodeStrength",paraId:3,tocIndex:2},{value:"Node attraction force",paraId:3,tocIndex:2},{value:"number | (d => number)",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"linkStrength",paraId:3,tocIndex:2},{value:"Link attraction force",paraId:3,tocIndex:2},{value:"number | (d => number)",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"Composite graphic marks need to be distinguished through different prefixes for graphic configuration.",paraId:4,tocIndex:3},{value:"<label>",paraId:5,tocIndex:3},{value:": Prefix for data labels, e.g., ",paraId:5,tocIndex:3},{value:"labelText",paraId:5,tocIndex:3},{value:" sets the text content of the label.",paraId:5,tocIndex:3},{value:"<node>",paraId:5,tocIndex:3},{value:": Prefix for node configuration, e.g., ",paraId:5,tocIndex:3},{value:"nodeFill",paraId:5,tocIndex:3},{value:" sets the fill color of nodes.",paraId:5,tocIndex:3},{value:"<link>",paraId:5,tocIndex:3},{value:": Prefix for link configuration, e.g., ",paraId:5,tocIndex:3},{value:"linkStrokeWidth",paraId:5,tocIndex:3},{value:" sets the width of links.",paraId:5,tocIndex:3}]},26378:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(90041);const t=[{value:"Circle Packing is a variant of tree structure diagrams that uses circles (instead of rectangles) to represent the entire hierarchy layer by layer. It is commonly used to describe containment relationships between data.",paraId:0},{value:"import { Chart } from '@antv/g2';\nimport { interpolateHcl } from 'd3-interpolate';\n\nconst chart = new Chart({\n  container: 'container',\n  padding: 20,\n});\n\nchart\n  .pack()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/flare.json',\n  })\n  .layout({\n    padding: 5,\n  })\n  .encode('value', 'value')\n  .encode('color', 'depth')\n  .scale('color', {\n    domain: [0, 5],\n    range: ['hsl(152,80%,80%)', 'hsl(228,30%,40%)'],\n    interpolate: interpolateHcl,\n  })\n  .style('labelText', (d) =>\n    d.r >= 10 && d.height === 0 ? `${d.data.name}` : '',\n  )\n  .axis(false)\n  .legend(false);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"Property",paraId:2,tocIndex:1},{value:"Description",paraId:2,tocIndex:1},{value:"Type",paraId:2,tocIndex:1},{value:"Default Value",paraId:2,tocIndex:1},{value:"layout",paraId:2,tocIndex:1},{value:"Layout configuration",paraId:2,tocIndex:1},{value:"TreeTransform",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"style",paraId:2,tocIndex:1},{value:"Configure graphic styles and labels",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"labels",paraId:2,tocIndex:1},{value:"Custom configuration for data labels",paraId:2,tocIndex:1},{value:"label[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"Property",paraId:3,tocIndex:2},{value:"Description",paraId:3,tocIndex:2},{value:"Type",paraId:3,tocIndex:2},{value:"Default Value",paraId:3,tocIndex:2},{value:"sort",paraId:3,tocIndex:2},{value:"Sorting mode",paraId:3,tocIndex:2},{value:"((a, b) => number)",paraId:3,tocIndex:2},{value:"(a, b) => b.value - a.value",paraId:3,tocIndex:2},{value:"padding",paraId:3,tocIndex:2},{value:"Inner spacing",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"0",paraId:3,tocIndex:2},{value:"Composite graphic marks need to use different prefixes to distinguish graphic configurations.",paraId:4,tocIndex:3},{value:"<label>",paraId:5,tocIndex:3},{value:": Prefix for data labels, for example: ",paraId:5,tocIndex:3},{value:"labelText",paraId:5,tocIndex:3},{value:" sets the text of the label.",paraId:5,tocIndex:3}]},12295:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(25254);const t=[{value:"A Sankey diagram is a specific type of flow diagram used to describe the flow from one set of values to another. Sankey diagrams have the following characteristics:",paraId:0},{value:"The starting flow and ending flow are the same, with the sum of all main branch widths equal to the sum of all split branch widths, maintaining energy balance;",paraId:1},{value:"Internally, different lines represent different flow distribution scenarios, with widths proportionally displaying the flow share of each branch;",paraId:1},{value:"Different node widths represent flow magnitudes under specific states.\nSankey diagrams are commonly used for visualization analysis of energy, material composition, financial, and other data.",paraId:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  padding: 10,\n});\n\nchart\n  .sankey()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/energy.json',\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => ({ links: data }),\n      },\n    ],\n  })\n  .layout({\n    nodeAlign: 'center',\n    nodePadding: 0.03,\n  })\n  .scale('color', { range: schemeTableau10 })\n  .style('labelSpacing', 3)\n  .style('labelFontWeight', 'bold')\n  .style('nodeStrokeWidth', 1.2)\n  .style('linkFillOpacity', 0.4);\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"In G2, ",paraId:3,tocIndex:0},{value:"Layout",paraId:3,tocIndex:0},{value:" is used to specify parameters for layout methods of marks with specific layout functions, such as Sankey, WordCloud, ForceGraph, etc.",paraId:3,tocIndex:0},{value:"({\n  type: 'sankey',\n  layout: {\n    nodeAlign: 'center',\n    nodePadding: 0.03,\n  },\n});\n",paraId:4,tocIndex:0},{value:"// API\nchart.sankey().layout({ nodeAlign: 'center', nodePadding: 0.03 });\n",paraId:5,tocIndex:0},{value:"Sankey diagrams support dynamic data updates using G2's built-in API ",paraId:6,tocIndex:1},{value:"changeData()",paraId:6,tocIndex:1},{value:":",paraId:6,tocIndex:1},{value:"const newData = {\n  links: [\n    { source: 'A', target: 'B', value: 10 },\n    { source: 'A', target: 'C', value: 15 },\n    { source: 'B', target: 'D', value: 8 },\n    { source: 'C', target: 'D', value: 12 },\n  ],\n};\nchart.changeData({ type: 'inline', value: newData });\n",paraId:7,tocIndex:1},{value:"Syntactic Sugar (Recommended)",paraId:8,tocIndex:1},{value:"G2 also provides convenient syntactic sugar, allowing you to pass array data directly like configuring other charts:",paraId:9,tocIndex:1},{value:"const newData = [\n  { source: 'A', target: 'X', value: 10 },\n  { source: 'A', target: 'Y', value: 15 },\n  { source: 'B', target: 'X', value: 20 },\n  { source: 'B', target: 'Y', value: 25 },\n];\n\n// Pass array directly\nchart.changeData(newData);\n",paraId:10,tocIndex:1},{value:"When passing an empty array or not providing ",paraId:11,tocIndex:2},{value:"links",paraId:11,tocIndex:2},{value:", the chart will display as blank:",paraId:11,tocIndex:2},{value:"// Clear chart - chart will display as blank\nchart.changeData([]);\n// or\nchart.changeData({ links: [] });\n",paraId:12,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nconst initialData = [\n  { source: 'A', target: 'X', value: 10 },\n  { source: 'A', target: 'Y', value: 15 },\n  { source: 'B', target: 'X', value: 20 },\n];\n\nchart.sankey().data({\n  type: 'inline',\n  value: initialData,\n});\n\nchart.render();\n\n// Click event: randomly update data\nchart.on('element:click', () => {\n  const randomData = initialData.map((d) => ({\n    ...d,\n    value: Math.random() * 30 + 5,\n  }));\n\n  // Use simplified syntax to update data\n  chart.changeData(randomData);\n});\n",paraId:13,tocIndex:3},{value:"Property",paraId:14,tocIndex:4},{value:"Description",paraId:14,tocIndex:4},{value:"Type",paraId:14,tocIndex:4},{value:"Default",paraId:14,tocIndex:4},{value:"tooltip",paraId:14,tocIndex:4},{value:"Configure Sankey diagram tooltip, see ",paraId:14,tocIndex:4},{value:"tooltip configuration",paraId:15,tocIndex:4},{value:"object",paraId:14,tocIndex:4},{value:"See ",paraId:14,tocIndex:4},{value:"tooltip configuration",paraId:16,tocIndex:4},{value:"layout",paraId:14,tocIndex:4},{value:"Configure Sankey diagram layout, see ",paraId:14,tocIndex:4},{value:"layout configuration",paraId:17,tocIndex:4},{value:"object",paraId:14,tocIndex:4},{value:"See ",paraId:14,tocIndex:4},{value:"layout configuration",paraId:18,tocIndex:4},{value:"style",paraId:14,tocIndex:4},{value:"Configure graphic and label styles, see ",paraId:14,tocIndex:4},{value:"style configuration",paraId:19,tocIndex:4},{value:"object",paraId:14,tocIndex:4},{value:"See ",paraId:14,tocIndex:4},{value:"style configuration",paraId:20,tocIndex:4},{value:"nodeLabels",paraId:14,tocIndex:4},{value:"Custom node data label configuration, see ",paraId:14,tocIndex:4},{value:"nodeLabels configuration",paraId:21,tocIndex:4},{value:"label[]",paraId:14,tocIndex:4},{value:"[]",paraId:14,tocIndex:4},{value:"linkLabels",paraId:14,tocIndex:4},{value:"Custom link data label configuration, see ",paraId:14,tocIndex:4},{value:"linkLabels configuration",paraId:22,tocIndex:4},{value:"label[]",paraId:14,tocIndex:4},{value:"[]",paraId:14,tocIndex:4},{value:"As a composite graphic, Sankey diagrams need to distinguish between nodes and links when configuring ",paraId:23,tocIndex:5},{value:"tooltip",paraId:23,tocIndex:5},{value:".",paraId:23,tocIndex:5},{value:"Unlike single mark ",paraId:24,tocIndex:6},{value:"title",paraId:24,tocIndex:6},{value:" configuration, Sankey diagrams need to configure ",paraId:24,tocIndex:6},{value:"nodeTitle",paraId:24,tocIndex:6},{value:" and ",paraId:24,tocIndex:6},{value:"linkTitle",paraId:24,tocIndex:6},{value:" separately.",paraId:24,tocIndex:6},{value:"({\n  tooltip: {\n    nodeTitle: (d) => d.key,\n    linkTitle: (d) => 'link',\n  },\n});\n",paraId:25,tocIndex:6},{value:"Unlike single mark ",paraId:26,tocIndex:7},{value:"items",paraId:26,tocIndex:7},{value:" configuration, Sankey diagrams need to configure both ",paraId:26,tocIndex:7},{value:"nodeItems",paraId:26,tocIndex:7},{value:" and ",paraId:26,tocIndex:7},{value:"linkItems",paraId:26,tocIndex:7},{value:".",paraId:26,tocIndex:7},{value:"Like regular ",paraId:27,tocIndex:7},{value:"items",paraId:27,tocIndex:7},{value:", ",paraId:27,tocIndex:7},{value:"nodeItems",paraId:27,tocIndex:7},{value:" and ",paraId:27,tocIndex:7},{value:"linkItems",paraId:27,tocIndex:7},{value:" also support custom configuration:",paraId:27,tocIndex:7},{value:"({\n  tooltip: {\n    nodeItems: [\n      (d, index, data, column) => {\n        return {\n          color: 'red', // Specify item color\n          name: 'Node', // Specify item name\n          value: d.key, // Use y channel value\n          content: 'Custom node property',\n        };\n      },\n    ],\n    linkItems: [\n      (d, index, data, column) => {\n        return {\n          color: 'red', // Specify item color\n          name: 'Link', // Specify item name\n          value: `${d.source.key}-${d.target.key}`, // Use y channel value\n          content: 'Custom link property',\n        };\n      },\n    ],\n  },\n});\n",paraId:28,tocIndex:7},{value:"Similar to general ",paraId:29,tocIndex:8},{value:"Mark",paraId:29,tocIndex:8},{value:" custom ",paraId:29,tocIndex:8},{value:"tooltip",paraId:29,tocIndex:8},{value:" interaction methods, first pass custom properties in the graphic's ",paraId:29,tocIndex:8},{value:"tooltip",paraId:29,tocIndex:8},{value:", then use them in ",paraId:29,tocIndex:8},{value:"interaction",paraId:29,tocIndex:8},{value:".",paraId:29,tocIndex:8},{value:"Example:",paraId:30,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = {\n  nodes: [\n    { id: 'a', key: 'Homepage', des: 'Custom node property' },\n    { id: 'b', key: 'Page 1', des: 'Custom node property' },\n    { id: 'b_1', key: 'Page 1', des: 'Custom node property' },\n    { id: 'c', key: 'Page 2', des: 'Custom node property' },\n    { id: 'c_1', key: 'Page 2', des: 'Custom node property' },\n    { id: 'd', key: 'Page 3', des: 'Custom node property' },\n    { id: 'd_1', key: 'Page 3', des: 'Custom node property' },\n  ],\n  links: [\n    { source: 'a', target: 'b', value: 100 },\n    { source: 'b', target: 'c', value: 80 },\n    { source: 'b', target: 'd', value: 20 },\n    { source: 'c', target: 'b_1', value: 80 },\n    { source: 'b_1', target: 'c_1', value: 40 },\n    { source: 'b_1', target: 'd_1', value: 40 },\n  ],\n};\n\nchart.options({\n  type: 'sankey',\n  width: 900,\n  height: 600,\n  data: {\n    value: data,\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => ({\n          nodes: data.nodes,\n          links: data.links,\n        }),\n      },\n    ],\n  },\n  tooltip: {\n    nodeItems: [\n      (d, index, data, column) => {\n        return {\n          content: d.des,\n        };\n      },\n    ],\n    linkItems: [\n      (d, index, data, column) => {\n        return {\n          color: 'red', // Specify item color\n          name: 'Link', // Specify item name\n          value: `${d.source.key}-${d.target.key}`, // Use y channel value\n          content: 'Custom link property',\n        };\n      },\n    ],\n  },\n  layout: {\n    nodeId: (d) => d.id,\n    nodeAlign: 'center',\n    nodePadding: 0.03,\n    iterations: 25,\n  },\n  style: {\n    labelSpacing: 3,\n    labelFontWeight: 'bold',\n    // linkFillOpacity: 0.2,\n    // linkFill: '#3F96FF',\n  },\n  interaction: {\n    tooltip: {\n      render: (e, { items, title }) => {\n        return `<div>${items[0].content}</div>`;\n      },\n    },\n  },\n});\n\nchart.render();\n",paraId:31,tocIndex:8},{value:"Sankey diagram layout configuration. Specific configuration options are as follows:",paraId:32,tocIndex:9},{value:"optional",paraId:33,tocIndex:10},{value:" ",paraId:33,tocIndex:10},{value:"function",paraId:33,tocIndex:10},{value:" ",paraId:33,tocIndex:10},{value:"Callback format: ",paraId:34,tocIndex:10},{value:"(node: any) => string",paraId:34,tocIndex:10},{value:". If ",paraId:34,tocIndex:10},{value:"nodeId",paraId:34,tocIndex:10},{value:" is not specified, defaults to ",paraId:34,tocIndex:10},{value:"(node) => node.key",paraId:34,tocIndex:10},{value:".",paraId:34,tocIndex:10},{value:"Node binding field, used as unique identifier in layout.",paraId:35,tocIndex:10},{value:"For nodes that appear multiple times, set an id as unique identifier and configure the ",paraId:36,tocIndex:11},{value:"nodeId",paraId:36,tocIndex:11},{value:" callback method as ",paraId:36,tocIndex:11},{value:"(node) => node.id",paraId:36,tocIndex:11},{value:".",paraId:36,tocIndex:11},{value:"Example:",paraId:37,tocIndex:11},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst data = {\n  nodes: [\n    { id: 'a', key: 'Homepage' },\n    { id: 'b', key: 'Page 1' },\n    { id: 'b_1', key: 'Page 1' },\n    { id: 'c', key: 'Page 2' },\n    { id: 'c_1', key: 'Page 2' },\n    { id: 'd', key: 'Page 3' },\n    { id: 'd_1', key: 'Page 3' },\n  ],\n  links: [\n    { source: 'a', target: 'b', value: 100 },\n    { source: 'b', target: 'c', value: 80 },\n    { source: 'b', target: 'd', value: 20 },\n    { source: 'c', target: 'b_1', value: 80 },\n    { source: 'b_1', target: 'c_1', value: 40 },\n    { source: 'b_1', target: 'd_1', value: 40 },\n  ],\n};\n\nchart.options({\n  type: 'sankey',\n  width: 900,\n  height: 600,\n  data: {\n    value: data,\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => ({\n          nodes: data.nodes,\n          links: data.links,\n        }),\n      },\n    ],\n  },\n  layout: {\n    nodeId: (d) => d.id,\n    nodeAlign: 'center',\n    nodePadding: 0.03,\n    iterations: 25,\n  },\n  style: {\n    labelSpacing: 3,\n    labelFontWeight: 'bold',\n    linkFillOpacity: 0.2,\n    linkFill: '#3F96FF',\n  },\n});\n\nchart.render();\n",paraId:38,tocIndex:11},{value:"optional",paraId:39,tocIndex:12},{value:" ",paraId:39,tocIndex:12},{value:"function",paraId:39,tocIndex:12},{value:" ",paraId:39,tocIndex:12},{value:"Callback format: ",paraId:40,tocIndex:12},{value:"((a: any, b: any) => number)",paraId:40,tocIndex:12},{value:"Node sorting method. If ",paraId:41,tocIndex:12},{value:"nodeSort",paraId:41,tocIndex:12},{value:" is not specified, returns the current node sorting method, defaulting to ",paraId:41,tocIndex:12},{value:"undefined",paraId:41,tocIndex:12},{value:", meaning the vertical order of nodes within each column will be automatically determined by the layout. If ",paraId:41,tocIndex:12},{value:"nodeSort",paraId:41,tocIndex:12},{value:" is ",paraId:41,tocIndex:12},{value:"null",paraId:41,tocIndex:12},{value:", the order is fixed by input. Otherwise, the order is determined by the specified sorting function; this function is passed two nodes and must return a value less than 0 if the first node should be above the second node, greater than 0 if the second node should be above the first node, or 0 if no order is specified.",paraId:41,tocIndex:12},{value:" ",paraId:42,tocIndex:13},{value:"optional",paraId:42,tocIndex:13},{value:" ",paraId:42,tocIndex:13},{value:"function",paraId:42,tocIndex:13},{value:" ",paraId:42,tocIndex:13},{value:"Callback format: ",paraId:43,tocIndex:13},{value:"((a: any, b: any) => number)",paraId:43,tocIndex:13},{value:"Link sorting method. If ",paraId:44,tocIndex:13},{value:"linkSort",paraId:44,tocIndex:13},{value:" is not specified, returns the current link sorting method, defaulting to ",paraId:44,tocIndex:13},{value:"undefined",paraId:44,tocIndex:13},{value:", meaning the vertical order of links within each node will be automatically determined by the layout. If ",paraId:44,tocIndex:13},{value:"linkSort",paraId:44,tocIndex:13},{value:" is ",paraId:44,tocIndex:13},{value:"null",paraId:44,tocIndex:13},{value:", the order is fixed by input. Otherwise, the order is determined by the specified sorting function; this function is passed two links and must return a value less than 0 if the first link should be above the second link, greater than 0 if the second link should be above the first link, or 0 if no order is specified.",paraId:44,tocIndex:13},{value:"optional",paraId:45,tocIndex:14},{value:" ",paraId:45,tocIndex:14},{value:"string",paraId:45,tocIndex:14},{value:" ｜ ",paraId:45,tocIndex:14},{value:"function",paraId:45,tocIndex:14},{value:" ",paraId:45,tocIndex:14},{value:"Built-in supported types: ",paraId:46,tocIndex:14},{value:"'left' | 'right' | 'center' | 'justify'",paraId:46,tocIndex:14},{value:"Callback format: ",paraId:47,tocIndex:14},{value:"((node: any, n: number) => number",paraId:47,tocIndex:14},{value:"Current node alignment method. Besides the built-in types, you can also pass the current node and the graph's total depth ",paraId:48,tocIndex:14},{value:"n",paraId:48,tocIndex:14},{value:" (maximum node depth + 1), and must return an integer between ",paraId:48,tocIndex:14},{value:"0",paraId:48,tocIndex:14},{value:" and ",paraId:48,tocIndex:14},{value:"n - 1",paraId:48,tocIndex:14},{value:", indicating the desired horizontal position of the node in the generated graph.",paraId:48,tocIndex:14},{value:"optional",paraId:49,tocIndex:15},{value:" ",paraId:49,tocIndex:15},{value:"number",paraId:49,tocIndex:15},{value:" ",paraId:49,tocIndex:15},{value:"Node width. Defaults to ",paraId:50,tocIndex:15},{value:"0.02",paraId:50,tocIndex:15},{value:".",paraId:50,tocIndex:15},{value:"optional",paraId:51,tocIndex:16},{value:" ",paraId:51,tocIndex:16},{value:"number",paraId:51,tocIndex:16},{value:" ",paraId:51,tocIndex:16},{value:"Node spacing. Defaults to ",paraId:52,tocIndex:16},{value:"0.02",paraId:52,tocIndex:16},{value:".",paraId:52,tocIndex:16},{value:"optional",paraId:53,tocIndex:17},{value:" ",paraId:53,tocIndex:17},{value:"function",paraId:53,tocIndex:17},{value:" ",paraId:53,tocIndex:17},{value:"Callback format: ",paraId:54,tocIndex:17},{value:"(datum: any, maxDepth: number) => number",paraId:54,tocIndex:17},{value:"Node depth.",paraId:55,tocIndex:17},{value:"optional",paraId:56,tocIndex:18},{value:" ",paraId:56,tocIndex:18},{value:"number",paraId:56,tocIndex:18},{value:" ",paraId:56,tocIndex:18},{value:"Layout calculation iteration count, defaults to ",paraId:57,tocIndex:18},{value:"6",paraId:57,tocIndex:18},{value:". More iterations result in more reasonable layout.",paraId:57,tocIndex:18},{value:"For more ",paraId:58,tocIndex:18},{value:"layout",paraId:58,tocIndex:18},{value:" configuration, see ",paraId:58,tocIndex:18},{value:"d3-sankey",paraId:58,tocIndex:18},{value:"Default style configuration:",paraId:59,tocIndex:19},{value:"({\n  // label\n  labelText: (d) => d.key,\n  labelSpacing: 5,\n  labelFontSize: 10,\n  // node\n  nodeStroke: '#000',\n  // link\n  linkFillOpacity: 0.5,\n  linkStroke: undefined,\n});\n",paraId:60,tocIndex:19},{value:"Composite graphic marks need to use different prefixes to distinguish graphic configurations.",paraId:61,tocIndex:19},{value:"<label>",paraId:62,tocIndex:19},{value:": Prefix for configuring data labels.",paraId:62,tocIndex:19},{value:"Property",paraId:63,tocIndex:19},{value:"Type",paraId:63,tocIndex:19},{value:"Description",paraId:63,tocIndex:19},{value:"labelText",paraId:63,tocIndex:19},{value:"(d: any) => string",paraId:63,tocIndex:19},{value:"Configure default data label value for Sankey diagram, defaults to ",paraId:63,tocIndex:19},{value:"(d) => d.key",paraId:63,tocIndex:19},{value:"labelSpacing",paraId:63,tocIndex:19},{value:"number",paraId:63,tocIndex:19},{value:"Configure data label spacing for Sankey diagram, defaults to ",paraId:63,tocIndex:19},{value:"5",paraId:63,tocIndex:19},{value:"labelFontSize",paraId:63,tocIndex:19},{value:"number",paraId:63,tocIndex:19},{value:"Sankey diagram data label font size",paraId:63,tocIndex:19},{value:"labelFontFamily",paraId:63,tocIndex:19},{value:"string",paraId:63,tocIndex:19},{value:"Sankey diagram data label font family",paraId:63,tocIndex:19},{value:"labelFontWeight",paraId:63,tocIndex:19},{value:"number",paraId:63,tocIndex:19},{value:"Sankey diagram data label font weight",paraId:63,tocIndex:19},{value:"labelLineHeight",paraId:63,tocIndex:19},{value:"number",paraId:63,tocIndex:19},{value:"Sankey diagram data label text line height",paraId:63,tocIndex:19},{value:"labelTextAlign",paraId:63,tocIndex:19},{value:"string",paraId:63,tocIndex:19},{value:"Set current alignment for Sankey diagram data label text content, supported values: ",paraId:63,tocIndex:19},{value:"center",paraId:63,tocIndex:19},{value:" | ",paraId:63,tocIndex:19},{value:"end",paraId:63,tocIndex:19},{value:" | ",paraId:63,tocIndex:19},{value:"left",paraId:63,tocIndex:19},{value:" | ",paraId:63,tocIndex:19},{value:"right",paraId:63,tocIndex:19},{value:" | ",paraId:63,tocIndex:19},{value:"start",paraId:63,tocIndex:19},{value:", defaults to ",paraId:63,tocIndex:19},{value:"start",paraId:63,tocIndex:19},{value:"labelTextBaseline",paraId:63,tocIndex:19},{value:"string",paraId:63,tocIndex:19},{value:"Set current text baseline used when drawing Sankey diagram data label text, supported values: ",paraId:63,tocIndex:19},{value:"top",paraId:63,tocIndex:19},{value:" | ",paraId:63,tocIndex:19},{value:"middle",paraId:63,tocIndex:19},{value:" | ",paraId:63,tocIndex:19},{value:"bottom",paraId:63,tocIndex:19},{value:" | ",paraId:63,tocIndex:19},{value:"alphabetic",paraId:63,tocIndex:19},{value:" | ",paraId:63,tocIndex:19},{value:"hanging",paraId:63,tocIndex:19},{value:". Defaults to ",paraId:63,tocIndex:19},{value:"bottom",paraId:63,tocIndex:19},{value:"labelFill",paraId:63,tocIndex:19},{value:"string",paraId:63,tocIndex:19},{value:"Sankey diagram data label text fill color",paraId:63,tocIndex:19},{value:"labelFillOpacity",paraId:63,tocIndex:19},{value:"number",paraId:63,tocIndex:19},{value:"Sankey diagram data label text fill opacity",paraId:63,tocIndex:19},{value:"labelStroke",paraId:63,tocIndex:19},{value:"string",paraId:63,tocIndex:19},{value:"Sankey diagram data label text stroke",paraId:63,tocIndex:19},{value:"labelLineWidth",paraId:63,tocIndex:19},{value:"number",paraId:63,tocIndex:19},{value:"Sankey diagram data label text stroke width",paraId:63,tocIndex:19},{value:"labelLineDash",paraId:63,tocIndex:19},{value:"[number,number]",paraId:63,tocIndex:19},{value:"Sankey diagram data label stroke dash configuration, first value is dash segment length, second value is gap distance. Setting lineDash to [0,0] results in no stroke.",paraId:63,tocIndex:19},{value:"labelStrokeOpacity",paraId:63,tocIndex:19},{value:"number",paraId:63,tocIndex:19},{value:"Sankey diagram data label stroke opacity",paraId:63,tocIndex:19},{value:"labelOpacity",paraId:63,tocIndex:19},{value:"number",paraId:63,tocIndex:19},{value:"Sankey diagram data label text overall opacity",paraId:63,tocIndex:19},{value:"labelShadowColor",paraId:63,tocIndex:19},{value:"string",paraId:63,tocIndex:19},{value:"Sankey diagram data label text shadow color",paraId:63,tocIndex:19},{value:"labelShadowBlur",paraId:63,tocIndex:19},{value:"number",paraId:63,tocIndex:19},{value:"Sankey diagram data label text shadow Gaussian blur coefficient",paraId:63,tocIndex:19},{value:"labelShadowOffsetX",paraId:63,tocIndex:19},{value:"number",paraId:63,tocIndex:19},{value:"Set horizontal distance of Sankey diagram data label shadow from text",paraId:63,tocIndex:19},{value:"labelShadowOffsetY",paraId:63,tocIndex:19},{value:"number",paraId:63,tocIndex:19},{value:"Set vertical distance of Sankey diagram data label shadow from text",paraId:63,tocIndex:19},{value:"labelCursor",paraId:63,tocIndex:19},{value:"string",paraId:63,tocIndex:19},{value:"Sankey diagram data label mouse cursor style. Same as CSS cursor style, defaults to 'default'.",paraId:63,tocIndex:19},{value:"<node>",paraId:64,tocIndex:19},{value:": Prefix for configuring nodes.",paraId:64,tocIndex:19},{value:"Property",paraId:65,tocIndex:19},{value:"Type",paraId:65,tocIndex:19},{value:"Description",paraId:65,tocIndex:19},{value:"nodeFill",paraId:65,tocIndex:19},{value:"string",paraId:65,tocIndex:19},{value:"Sankey diagram node fill color",paraId:65,tocIndex:19},{value:"nodeFillOpacity",paraId:65,tocIndex:19},{value:"number",paraId:65,tocIndex:19},{value:"Sankey diagram node fill opacity",paraId:65,tocIndex:19},{value:"nodeStroke",paraId:65,tocIndex:19},{value:"string",paraId:65,tocIndex:19},{value:"Sankey diagram node stroke",paraId:65,tocIndex:19},{value:"nodeStrokeOpacity",paraId:65,tocIndex:19},{value:"number",paraId:65,tocIndex:19},{value:"Sankey diagram node stroke opacity",paraId:65,tocIndex:19},{value:"nodeLineWidth",paraId:65,tocIndex:19},{value:"number",paraId:65,tocIndex:19},{value:"Sankey diagram node stroke width",paraId:65,tocIndex:19},{value:"nodeLineDash",paraId:65,tocIndex:19},{value:"[number,number]",paraId:65,tocIndex:19},{value:"Sankey diagram node stroke dash configuration, first value is dash segment length, second value is gap distance. Setting lineDash to [0,0] results in no stroke.",paraId:65,tocIndex:19},{value:"nodeOpacity",paraId:65,tocIndex:19},{value:"number",paraId:65,tocIndex:19},{value:"Sankey diagram node overall opacity",paraId:65,tocIndex:19},{value:"nodeShadowColor",paraId:65,tocIndex:19},{value:"string",paraId:65,tocIndex:19},{value:"Sankey diagram node shadow color",paraId:65,tocIndex:19},{value:"nodeShadowBlur",paraId:65,tocIndex:19},{value:"number",paraId:65,tocIndex:19},{value:"Sankey diagram node shadow Gaussian blur coefficient",paraId:65,tocIndex:19},{value:"nodeShadowOffsetX",paraId:65,tocIndex:19},{value:"number",paraId:65,tocIndex:19},{value:"Set horizontal distance of shadow from Sankey diagram node",paraId:65,tocIndex:19},{value:"nodeShadowOffsetY",paraId:65,tocIndex:19},{value:"number",paraId:65,tocIndex:19},{value:"Set vertical distance of shadow from Sankey diagram node",paraId:65,tocIndex:19},{value:"nodeCursor",paraId:65,tocIndex:19},{value:"string",paraId:65,tocIndex:19},{value:"Sankey diagram node mouse cursor style. Same as CSS cursor style, defaults to 'default'.",paraId:65,tocIndex:19},{value:"<link>",paraId:66,tocIndex:19},{value:": Prefix for configuring links.",paraId:66,tocIndex:19},{value:"Property",paraId:67,tocIndex:19},{value:"Type",paraId:67,tocIndex:19},{value:"Description",paraId:67,tocIndex:19},{value:"linkFill",paraId:67,tocIndex:19},{value:"string",paraId:67,tocIndex:19},{value:"Sankey diagram link fill color",paraId:67,tocIndex:19},{value:"linkFillOpacity",paraId:67,tocIndex:19},{value:"number",paraId:67,tocIndex:19},{value:"Sankey diagram link fill opacity",paraId:67,tocIndex:19},{value:"linkStroke",paraId:67,tocIndex:19},{value:"string",paraId:67,tocIndex:19},{value:"Sankey diagram link stroke",paraId:67,tocIndex:19},{value:"linkStrokeOpacity",paraId:67,tocIndex:19},{value:"number",paraId:67,tocIndex:19},{value:"Sankey diagram link stroke opacity",paraId:67,tocIndex:19},{value:"linkLineWidth",paraId:67,tocIndex:19},{value:"number",paraId:67,tocIndex:19},{value:"Sankey diagram link stroke width",paraId:67,tocIndex:19},{value:"linkLineDash",paraId:67,tocIndex:19},{value:"[number,number]",paraId:67,tocIndex:19},{value:"Sankey diagram link stroke dash configuration, first value is dash segment length, second value is gap distance. Setting lineDash to [0,0] results in no stroke.",paraId:67,tocIndex:19},{value:"linkOpacity",paraId:67,tocIndex:19},{value:"number",paraId:67,tocIndex:19},{value:"Sankey diagram link overall opacity",paraId:67,tocIndex:19},{value:"linkShadowColor",paraId:67,tocIndex:19},{value:"string",paraId:67,tocIndex:19},{value:"Sankey diagram link shadow color",paraId:67,tocIndex:19},{value:"linkShadowBlur",paraId:67,tocIndex:19},{value:"number",paraId:67,tocIndex:19},{value:"Sankey diagram link shadow Gaussian blur coefficient",paraId:67,tocIndex:19},{value:"linkShadowOffsetX",paraId:67,tocIndex:19},{value:"number",paraId:67,tocIndex:19},{value:"Set horizontal distance of shadow from Sankey diagram link",paraId:67,tocIndex:19},{value:"linkShadowOffsetY",paraId:67,tocIndex:19},{value:"number",paraId:67,tocIndex:19},{value:"Set vertical distance of shadow from Sankey diagram link",paraId:67,tocIndex:19},{value:"linkCursor",paraId:67,tocIndex:19},{value:"string",paraId:67,tocIndex:19},{value:"Sankey diagram link mouse cursor style. Same as CSS cursor style, defaults to 'default'.",paraId:67,tocIndex:19},{value:"optional",paraId:68,tocIndex:20},{value:" ",paraId:68,tocIndex:20},{value:"Label[]",paraId:68,tocIndex:20},{value:" ",paraId:68,tocIndex:20},{value:"Built-in data label configuration is as follows.",paraId:69,tocIndex:20},{value:"({\n  labels: [\n    {\n      text,\n      dx: (d) => (d.x[0] < 0.5 ? spacing : -spacing),\n      ...labelStyle, // User-provided custom data label styles\n    },\n    ...nodeLabels, // User-provided custom data labels\n  ],\n});\n",paraId:70,tocIndex:20},{value:"Besides the built-in node data labels, you can also customize node data label configuration.",paraId:71,tocIndex:20},{value:"({\n  nodeLabels: [\n    {\n      text: (d) => d.key,\n      fontSize: 10, // Note!!! Drawing properties here no longer need the label prefix\n      fill: 'red',\n    },\n  ],\n});\n",paraId:72,tocIndex:20},{value:"optional",paraId:73,tocIndex:21},{value:" ",paraId:73,tocIndex:21},{value:"Label[]",paraId:73,tocIndex:21},{value:" ",paraId:73,tocIndex:21},{value:"Links don't have built-in data labels, but you can customize link data label configuration.",paraId:74,tocIndex:21},{value:"({\n  linkLabels: [\n    {\n      text: (d) => d.key,\n      fontSize: 10, // Note!!! Drawing properties here no longer need the label prefix\n      fill: 'yellow',\n    },\n  ],\n});\n",paraId:75,tocIndex:21},{value:"State configuration is similar to style, using different prefixes to distinguish different graphic configurations. Configurations without prefixes will apply to both graphics.",paraId:76,tocIndex:22},{value:"Example:",paraId:77,tocIndex:22},{value:"(() => {\n  const chart = new G2.Chart();\n\n  const data = {\n    links: [\n      { source: 'a', target: 'b', value: 100 },\n      { source: 'b', target: 'c', value: 80 },\n      { source: 'b', target: 'd', value: 20 },\n      { source: 'c', target: 'b_1', value: 80 },\n      { source: 'b_1', target: 'c_1', value: 40 },\n      { source: 'b_1', target: 'd_1', value: 40 },\n    ],\n  };\n\n  chart.options({\n    type: 'sankey',\n    width: 900,\n    height: 600,\n    data: {\n      value: data,\n    },\n    style: {\n      labelSpacing: 3,\n      labelFontWeight: 'bold',\n      linkFillOpacity: 0.5,\n      nodeFillOpacity: 0.5, // Default opacity is 0.5\n    },\n    state: {\n      active: {\n        fillOpacity: 0.8, // Opacity is 0.8 on hover\n        linkFill: 'red', // Links turn red\n        nodeFill: 'blue', // Nodes turn blue\n      },\n      inactive: {\n        linkFillOpacity: 0.4,\n        nodeFillOpacity: 0.2, // Nodes are lighter than links\n      },\n    },\n    interaction: {\n      elementHighlight: true,\n    },\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:78,tocIndex:22}]},22905:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(6496);const t=[{value:"A tree chart (",paraId:0},{value:"Tree",paraId:0},{value:") can decompose things or phenomena into a tree-like structure, also known as a tree diagram or system diagram. In a tree structure, the root node has no predecessor nodes, and each of the remaining nodes has one and only one predecessor node. Leaf nodes have no successor nodes, while each of the remaining nodes can have one or more successor nodes.",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'tree',\n  width: 800,\n  height: 1500,\n  layout: { sortBy: (a, b) => a.value - b.value },\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/flare.json',\n  },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  style: {\n    nodeFill: (d) => (d.height === 0 ? '#999' : '#000'),\n    linkStroke: '#999',\n    labelText: (d) => d.data.name || '-',\n    labelFontSize: (d) => (d.height === 0 ? 7 : 12),\n    labelTextAlign: (d) => (d.height === 0 ? 'start' : 'end'),\n    labelPosition: (d) => (d.height !== 0 ? 'left' : 'right'),\n    labelDx: (d) => (d.height === 0 ? 5 : -5),\n    labelBackground: true,\n    labelBackgroundFill: '#fff',\n  },\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"Tree chart supports multiple data configuration methods:",paraId:2,tocIndex:1},{value:"Use ",paraId:3,tocIndex:2},{value:"type: 'fetch'",paraId:3,tocIndex:2},{value:" to fetch data from remote sources, supporting JSON, CSV and other formats:",paraId:3,tocIndex:2},{value:"chart.tree().data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/flare.json',\n});\n",paraId:4,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'tree',\n  data: {\n    type: 'inline',\n    value: {\n      name: 'root',\n      children: [\n        {\n          name: 'branch1',\n          value: 100,\n          children: [\n            { name: 'leaf1', value: 50 },\n            { name: 'leaf2', value: 30 },\n          ],\n        },\n        {\n          name: 'branch2',\n          value: 80,\n          children: [\n            { name: 'leaf3', value: 40 },\n            { name: 'leaf4', value: 40 },\n          ],\n        },\n      ],\n    },\n  },\n});\n\nchart.render();\n",paraId:5,tocIndex:4},{value:"Since G2's default data type is ",paraId:6,tocIndex:5},{value:"inline",paraId:6,tocIndex:5},{value:", you can pass data directly:",paraId:6,tocIndex:5},{value:"// Pass hierarchical data object directly\nchart.tree().data({\n  value: {\n    name: 'root',\n    children: [\n      {\n        name: 'branch1',\n        value: 100,\n        children: [\n          { name: 'leaf1', value: 50 },\n          { name: 'leaf2', value: 30 },\n        ],\n      },\n    ],\n  },\n});\n\n// Or pass flat data array (requires layout.path configuration)\nconst flatData = [\n  { name: 'root', value: 180 },\n  { name: 'root/branch1', value: 100 },\n  { name: 'root/branch1/leaf1', value: 50 },\n  { name: 'root/branch1/leaf2', value: 30 },\n  { name: 'root/branch2', value: 80 },\n  { name: 'root/branch2/leaf3', value: 40 },\n  { name: 'root/branch2/leaf4', value: 40 },\n];\n\nchart\n  .tree()\n  .data({ value: flatData })\n  .layout({\n    path: (d) => d.name, // Specify path field\n  });\n",paraId:7,tocIndex:5},{value:"Tree chart supports two data structures:",paraId:8,tocIndex:6},{value:"Hierarchical Data",paraId:9,tocIndex:6},{value:": JSON objects already in tree structure, each node contains a ",paraId:9,tocIndex:6},{value:"children",paraId:9,tocIndex:6},{value:" array",paraId:9,tocIndex:6},{value:"Flat Data",paraId:9,tocIndex:6},{value:": Arrays containing path information, requiring ",paraId:9,tocIndex:6},{value:"layout.path",paraId:9,tocIndex:6},{value:" configuration to build hierarchy",paraId:9,tocIndex:6},{value:"Hierarchical data example:",paraId:10,tocIndex:6},{value:'{\n  "name": "root",\n  "value": 180,\n  "children": [\n    {\n      "name": "branch1",\n      "value": 100,\n      "children": [\n        { "name": "leaf1", "value": 50 },\n        { "name": "leaf2", "value": 30 }\n      ]\n    }\n  ]\n}\n',paraId:11,tocIndex:6},{value:"Flat data example:",paraId:12,tocIndex:6},{value:'[\n  { "name": "root", "value": 180 },\n  { "name": "root/branch1", "value": 100 },\n  { "name": "root/branch1/leaf1", "value": 50 }\n]\n',paraId:13,tocIndex:6},{value:"Property",paraId:14,tocIndex:7},{value:"Description",paraId:14,tocIndex:7},{value:"Type",paraId:14,tocIndex:7},{value:"Default Value",paraId:14,tocIndex:7},{value:"layout",paraId:14,tocIndex:7},{value:"Layout configuration",paraId:14,tocIndex:7},{value:"TreeTransform",paraId:14,tocIndex:7},{value:"-",paraId:14,tocIndex:7},{value:"style",paraId:14,tocIndex:7},{value:"Configure graphics style and label style",paraId:14,tocIndex:7},{value:"-",paraId:14,tocIndex:7},{value:"-",paraId:14,tocIndex:7},{value:"nodeLabels",paraId:14,tocIndex:7},{value:"Custom node data label configuration",paraId:14,tocIndex:7},{value:"label[]",paraId:14,tocIndex:7},{value:"[]",paraId:14,tocIndex:7},{value:"linkLabels",paraId:14,tocIndex:7},{value:"Custom link data label configuration",paraId:14,tocIndex:7},{value:"label[]",paraId:14,tocIndex:7},{value:"[]",paraId:14,tocIndex:7},{value:"Property",paraId:15,tocIndex:8},{value:"Description",paraId:15,tocIndex:8},{value:"Type",paraId:15,tocIndex:8},{value:"Default Value",paraId:15,tocIndex:8},{value:"nodeSize",paraId:15,tocIndex:8},{value:"Node size",paraId:15,tocIndex:8},{value:"(node: any) => string",paraId:15,tocIndex:8},{value:"-",paraId:15,tocIndex:8},{value:"sortBy",paraId:15,tocIndex:8},{value:"Sort method",paraId:15,tocIndex:8},{value:"((a, b) => number)",paraId:15,tocIndex:8},{value:"(a, b) => b.value - a.value",paraId:15,tocIndex:8},{value:"separation",paraId:15,tocIndex:8},{value:"Distance between nodes",paraId:15,tocIndex:8},{value:"(a, b) => number",paraId:15,tocIndex:8},{value:"(a, b) => a.parent == b.parent ? 1 : 2",paraId:15,tocIndex:8},{value:"path",paraId:15,tocIndex:8},{value:"Path field configuration",paraId:15,tocIndex:8},{value:"(d: any) => string",paraId:15,tocIndex:8},{value:"-",paraId:15,tocIndex:8},{value:"Note",paraId:16,tocIndex:8},{value:": When using flat data, you must configure ",paraId:16,tocIndex:8},{value:"layout.path",paraId:16,tocIndex:8},{value:" to specify how to extract hierarchical path information from the data.",paraId:16,tocIndex:8},{value:"Composite mark components require different prefixes to distinguish graphic configurations.",paraId:17,tocIndex:9},{value:"<label>",paraId:18,tocIndex:9},{value:": Prefix for data labels, e.g., ",paraId:18,tocIndex:9},{value:"labelText",paraId:18,tocIndex:9},{value:" sets the label text.",paraId:18,tocIndex:9},{value:"<node>",paraId:18,tocIndex:9},{value:": Prefix for node configurations, e.g., ",paraId:18,tocIndex:9},{value:"nodeFill",paraId:18,tocIndex:9},{value:" sets the node fill color.",paraId:18,tocIndex:9},{value:"<link>",paraId:18,tocIndex:9},{value:": Prefix for link configurations, e.g., ",paraId:18,tocIndex:9},{value:"linkStrokeWidth",paraId:18,tocIndex:9},{value:" sets the link width.",paraId:18,tocIndex:9},{value:"How to draw a circular tree chart?\nYou need to specify ",paraId:19,tocIndex:10},{value:"coordinate: { type: 'polar' }",paraId:19,tocIndex:10},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.options({\n  type: 'tree',\n  layout: { sortBy: (a, b) => a.value - b.value },\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/flare.json',\n  },\n  coordinate: { type: 'polar' },\n  style: {\n    nodeFill: (d) => (d.height === 0 ? '#999' : '#000'),\n    linkStroke: '#999',\n    labelText: (d) => d.data.name || '-',\n    labelFontSize: (d) => (d.height === 0 ? 7 : 12),\n    labelTextAlign: (d) => (d.height === 0 ? 'start' : 'end'),\n    labelPosition: (d) => (d.height !== 0 ? 'left' : 'right'),\n    labelDx: (d) => (d.height === 0 ? 5 : -5),\n    labelBackground: true,\n    labelBackgroundFill: '#fff',\n  },\n});\n\nchart.render();\n",paraId:20,tocIndex:10}]},44865:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(49946);const t=[{value:"Treemap recursively divides space into rectangles based on the associated value of each node, suitable for displaying weighted tree data.\nTreemap is suitable for displaying data with hierarchical relationships and can intuitively reflect comparisons between peers. It transforms a tree structure into a state of planar space rectangles. The advantage of treemap is that compared with traditional tree structure diagrams, treemap can make more effective use of space and has the function of displaying proportions.",paraId:0,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nchart.options({\n  type: 'treemap',\n  data: {\n    type: 'custom',\n    callback: (data) => ({\n      name: 'Chart Types',\n      children: [\n        {\n          name: 'General Charts',\n          children: [\n            { name: 'Bar Chart', value: 300 },\n            { name: 'Line Chart', value: 600 },\n            { name: 'Scatter Plot', value: 160 },\n            { name: 'Area Chart', value: 160 },\n            { name: 'Others', value: 180 },\n          ],\n        },\n        {\n          name: 'Data Analysis',\n          children: [\n            { name: 'Binning', value: 280 },\n            { name: 'Grouping', value: 150 },\n            { name: 'Regression', value: 210 },\n            { name: 'Others', value: 40 },\n          ],\n        },\n      ],\n    }),\n  },\n  layout: {\n    tile: 'treemapBinary',\n    paddingInner: 1,\n  },\n  encode: { value: 'value' },\n  style: {\n    labelFill: '#000',\n    labelStroke: '#fff',\n    labelLineWidth: 1.5,\n    labelFontSize: 14,\n    labelPosition: 'top-left',\n    labelDx: 5,\n    labelDy: 5,\n  },\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"For more examples, you can check the ",paraId:2,tocIndex:0},{value:"Chart Examples - Graph",paraId:3,tocIndex:0},{value:" page.",paraId:2,tocIndex:0},{value:"Treemap supports two data formats:",paraId:4,tocIndex:1},{value:"For data that is already in hierarchical structure, it can be used directly without configuring ",paraId:5,tocIndex:2},{value:"path",paraId:5,tocIndex:2},{value:":",paraId:5,tocIndex:2},{value:"{\n  name: 'Root Node',\n  children: [\n    {\n      name: 'Child Node 1',\n      children: [\n        { name: 'Leaf Node 1', value: 100 },\n        { name: 'Leaf Node 2', value: 200 }\n      ]\n    },\n    { name: 'Child Node 2', value: 300 }\n  ]\n}\n",paraId:6,tocIndex:2},{value:"For flattened data that uses path strings to represent hierarchical relationships, ",paraId:7,tocIndex:3},{value:"you must configure the ",paraId:7,tocIndex:3},{value:"path",paraId:7,tocIndex:3},{value:" function",paraId:7,tocIndex:3},{value:":",paraId:7,tocIndex:3},{value:"name,size\nflare,\nflare.analytics,\nflare.analytics.cluster,\nflare.analytics.cluster.AgglomerativeCluster,3938\n",paraId:8,tocIndex:3},{value:"For this data format, you must use the ",paraId:9,tocIndex:3},{value:"path",paraId:9,tocIndex:3},{value:" configuration:",paraId:9,tocIndex:3},{value:"layout: {\n  path: (d) => d.name.replace(/\\./g, '/'), // Convert dot separation to slash separation\n}\n",paraId:10,tocIndex:3},{value:"Important Note",paraId:11,tocIndex:3},{value:": Using flattened data without configuring ",paraId:11,tocIndex:3},{value:"path",paraId:11,tocIndex:3},{value:' will result in a "multiple roots" error. This is because:',paraId:11,tocIndex:3},{value:"D3's stratify expects data to have ",paraId:12,tocIndex:3},{value:"id",paraId:12,tocIndex:3},{value:" and ",paraId:12,tocIndex:3},{value:"parentId",paraId:12,tocIndex:3},{value:" fields by default to establish hierarchical relationships",paraId:12,tocIndex:3},{value:"Flattened data typically only has path strings (like ",paraId:12,tocIndex:3},{value:"flare.analytics.cluster",paraId:12,tocIndex:3},{value:") without explicit parent-child relationship fields",paraId:12,tocIndex:3},{value:"Without ",paraId:12,tocIndex:3},{value:"path",paraId:12,tocIndex:3},{value:" configuration, D3 cannot recognize the hierarchical structure and treats all records as root nodes",paraId:12,tocIndex:3},{value:'When multiple root nodes exist, D3 throws a "multiple roots" error',paraId:12,tocIndex:3},{value:"The role of the ",paraId:13,tocIndex:3},{value:"path",paraId:13,tocIndex:3},{value:" configuration is to tell D3 how to parse hierarchical structure from path strings and automatically infer parent-child relationships.",paraId:13,tocIndex:3},{value:"Property",paraId:14,tocIndex:4},{value:"Description",paraId:14,tocIndex:4},{value:"Type",paraId:14,tocIndex:4},{value:"Default",paraId:14,tocIndex:4},{value:"Required",paraId:14,tocIndex:4},{value:"layout",paraId:14,tocIndex:4},{value:"Layout configuration",paraId:14,tocIndex:4},{value:"TreemapLayout",paraId:14,tocIndex:4},{value:"-",paraId:14,tocIndex:4},{value:"encode",paraId:14,tocIndex:4},{value:"Configure visual channels for ",paraId:14,tocIndex:4},{value:"treemap",paraId:14,tocIndex:4},{value:" mark, including ",paraId:14,tocIndex:4},{value:"x",paraId:14,tocIndex:4},{value:", ",paraId:14,tocIndex:4},{value:"y",paraId:14,tocIndex:4},{value:", ",paraId:14,tocIndex:4},{value:"color",paraId:14,tocIndex:4},{value:", ",paraId:14,tocIndex:4},{value:"value",paraId:14,tocIndex:4},{value:", etc., to specify the relationship between visual element properties and data",paraId:14,tocIndex:4},{value:"encode",paraId:15,tocIndex:4},{value:"-",paraId:14,tocIndex:4},{value:"style",paraId:14,tocIndex:4},{value:"Configure graphics style and label style",paraId:14,tocIndex:4},{value:"-",paraId:14,tocIndex:4},{value:"-",paraId:14,tocIndex:4},{value:"labels",paraId:14,tocIndex:4},{value:"Custom data label configuration",paraId:14,tocIndex:4},{value:"label[]",paraId:14,tocIndex:4},{value:"[]",paraId:14,tocIndex:4},{value:"interaction",paraId:14,tocIndex:4},{value:"Configure treemap interactions",paraId:14,tocIndex:4},{value:"Object",paraId:14,tocIndex:4},{value:"-",paraId:14,tocIndex:4},{value:"Property",paraId:16,tocIndex:5},{value:"Description",paraId:16,tocIndex:5},{value:"Type",paraId:16,tocIndex:5},{value:"Default",paraId:16,tocIndex:5},{value:"Required",paraId:16,tocIndex:5},{value:"tile",paraId:16,tocIndex:5},{value:"Layout method",paraId:16,tocIndex:5},{value:"'treemapBinary' | 'treemapDice' | 'treemapSlice' | 'treemapSliceDice' | 'treemapSquarify' | 'treemapResquarify'",paraId:16,tocIndex:5},{value:"'treemapSquarify'",paraId:16,tocIndex:5},{value:"padding",paraId:16,tocIndex:5},{value:"Outer margin, also includes ",paraId:16,tocIndex:5},{value:"paddingInner | paddingOuter | paddingTop | paddingBottom | paddingRight | paddingLeft",paraId:16,tocIndex:5},{value:"number",paraId:16,tocIndex:5},{value:"0",paraId:16,tocIndex:5},{value:"sort",paraId:16,tocIndex:5},{value:"Sorting rule",paraId:16,tocIndex:5},{value:"(a: any, b: any): number",paraId:16,tocIndex:5},{value:"(a, b) => b.value - a.value",paraId:16,tocIndex:5},{value:"layer",paraId:16,tocIndex:5},{value:"Render level",paraId:16,tocIndex:5},{value:"number | (d) => number",paraId:16,tocIndex:5},{value:"0",paraId:16,tocIndex:5},{value:"path",paraId:16,tocIndex:5},{value:"Path conversion function, used to parse hierarchical structure from flattened data. This configuration is required for flattened data using path strings",paraId:16,tocIndex:5},{value:"(d) => string",paraId:16,tocIndex:5},{value:"undefined",paraId:16,tocIndex:5},{value:"Configure visual channels for the ",paraId:17,tocIndex:6},{value:"treemap",paraId:17,tocIndex:6},{value:" mark.",paraId:17,tocIndex:6},{value:"Property",paraId:18,tocIndex:6},{value:"Description",paraId:18,tocIndex:6},{value:"Type",paraId:18,tocIndex:6},{value:"Default",paraId:18,tocIndex:6},{value:"Required",paraId:18,tocIndex:6},{value:"color",paraId:18,tocIndex:6},{value:"Bind the ",paraId:18,tocIndex:6},{value:"color",paraId:18,tocIndex:6},{value:" property channel of the ",paraId:18,tocIndex:6},{value:"treemap",paraId:18,tocIndex:6},{value:" mark. If data fields are mapped to the color channel, data will be grouped and split into multiple graphics with different colors",paraId:18,tocIndex:6},{value:"encode",paraId:19,tocIndex:6},{value:"-",paraId:18,tocIndex:6},{value:"value",paraId:18,tocIndex:6},{value:"Bind the value channel of the ",paraId:18,tocIndex:6},{value:"treemap",paraId:18,tocIndex:6},{value:" mark",paraId:18,tocIndex:6},{value:"encode",paraId:20,tocIndex:6},{value:"-",paraId:18,tocIndex:6},{value:"Composite graphic marks need to distinguish graphic configurations through different prefixes.",paraId:21,tocIndex:7},{value:"<label>",paraId:22,tocIndex:7},{value:": Data label prefix, for example: ",paraId:22,tocIndex:7},{value:"labelText",paraId:22,tocIndex:7},{value:" sets the text content of the label.",paraId:22,tocIndex:7},{value:"Property",paraId:23,tocIndex:7},{value:"Description",paraId:23,tocIndex:7},{value:"Type",paraId:23,tocIndex:7},{value:"Default",paraId:23,tocIndex:7},{value:"Required",paraId:23,tocIndex:7},{value:"labelFontSize",paraId:23,tocIndex:7},{value:"Label text size",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:"10",paraId:23,tocIndex:7},{value:"labelText",paraId:23,tocIndex:7},{value:"Label text content",paraId:23,tocIndex:7},{value:"(d) => last(d.path)",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelFontFamily",paraId:23,tocIndex:7},{value:"Label text font",paraId:23,tocIndex:7},{value:"string",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelFontWeight",paraId:23,tocIndex:7},{value:"Label text weight",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelLineHeight",paraId:23,tocIndex:7},{value:"Label text line height",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelTextAlign",paraId:23,tocIndex:7},{value:"Set the current alignment of label text content",paraId:23,tocIndex:7},{value:"center",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"end",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"left",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"right",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"start",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelTextBaseline",paraId:23,tocIndex:7},{value:"Set the current text baseline used when drawing label text",paraId:23,tocIndex:7},{value:"top",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"middle",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"bottom",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"alphabetic",paraId:23,tocIndex:7},{value:" | ",paraId:23,tocIndex:7},{value:"hanging",paraId:23,tocIndex:7},{value:"labelFill",paraId:23,tocIndex:7},{value:"Label text fill color",paraId:23,tocIndex:7},{value:"string",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelFillOpacity",paraId:23,tocIndex:7},{value:"Label text fill opacity",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelStroke",paraId:23,tocIndex:7},{value:"Label text stroke",paraId:23,tocIndex:7},{value:"string",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelLineWidth",paraId:23,tocIndex:7},{value:"Label text stroke width",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelLineDash",paraId:23,tocIndex:7},{value:"Label text stroke dash configuration, first value is the length of each dash segment, second value is the distance between segments. Setting labelLineDash to [0,0] has no stroke effect.",paraId:23,tocIndex:7},{value:"[number,number] ",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelStrokeOpacity",paraId:23,tocIndex:7},{value:"Label text stroke opacity",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelOpacity",paraId:23,tocIndex:7},{value:"Label text overall opacity",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelShadowColor",paraId:23,tocIndex:7},{value:"Label text shadow color",paraId:23,tocIndex:7},{value:"string",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelShadowBlur",paraId:23,tocIndex:7},{value:"Label text shadow Gaussian blur coefficient",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelShadowOffsetX",paraId:23,tocIndex:7},{value:"Label text shadow horizontal offset",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelShadowOffsetY",paraId:23,tocIndex:7},{value:"Label text shadow vertical offset",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelCursor",paraId:23,tocIndex:7},{value:"Label text cursor style",paraId:23,tocIndex:7},{value:"string",paraId:23,tocIndex:7},{value:"default",paraId:23,tocIndex:7},{value:"labelDx",paraId:23,tocIndex:7},{value:"Label text horizontal offset",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"labelDy",paraId:23,tocIndex:7},{value:"Label text vertical offset",paraId:23,tocIndex:7},{value:"number",paraId:23,tocIndex:7},{value:"-",paraId:23,tocIndex:7},{value:"For more styles, please check the ",paraId:24,tocIndex:7},{value:"Manual - Core Concepts - Style",paraId:25,tocIndex:7},{value:" page.",paraId:24,tocIndex:7},{value:"Common interactions for treemap are ",paraId:26,tocIndex:8},{value:"treemapDrillDown",paraId:26,tocIndex:8},{value:" and ",paraId:26,tocIndex:8},{value:"poptip",paraId:26,tocIndex:8},{value:".",paraId:26,tocIndex:8},{value:"treemapDrillDown is used to implement drill-down interaction for treemap. By clicking on a node in the treemap, you can display that node and its children on the canvas. Configuration is as follows:",paraId:27,tocIndex:8},{value:"Property",paraId:28,tocIndex:8},{value:"Description",paraId:28,tocIndex:8},{value:"Type",paraId:28,tocIndex:8},{value:"Default",paraId:28,tocIndex:8},{value:"Required",paraId:28,tocIndex:8},{value:"breadCrumbFill",paraId:28,tocIndex:8},{value:"Breadcrumb fill color",paraId:28,tocIndex:8},{value:"string",paraId:28,tocIndex:8},{value:"rgba(0, 0, 0, 0.85)",paraId:28,tocIndex:8},{value:"breadCrumbFontSize",paraId:28,tocIndex:8},{value:"Breadcrumb font size",paraId:28,tocIndex:8},{value:"number",paraId:28,tocIndex:8},{value:"12",paraId:28,tocIndex:8},{value:"breadCrumbY",paraId:28,tocIndex:8},{value:"Breadcrumb position on Y axis",paraId:28,tocIndex:8},{value:"number",paraId:28,tocIndex:8},{value:"12",paraId:28,tocIndex:8},{value:"activeFill",paraId:28,tocIndex:8},{value:"Fill color of currently active breadcrumb",paraId:28,tocIndex:8},{value:"number",paraId:28,tocIndex:8},{value:"rgba(0, 0, 0, 0.5)",paraId:28,tocIndex:8},{value:"chart.options({\n  // Other chart configurations...\n  interaction: {\n    treemapDrillDown: {\n      breadCrumbY: 12,\n      activeFill: '#873bf4',\n    },\n  },\n});\n",paraId:29,tocIndex:8},{value:"poptip",paraId:30,tocIndex:8},{value:" is used to display concise tooltip information during interaction.",paraId:31,tocIndex:8},{value:"chart.options({\n  // Other chart configurations...\n  interaction: {\n    poptip: {\n      // poptip configuration options\n      offsetX: 10,\n      offsetY: 10,\n      // tip style configuration\n      tipBackgroundColor: 'rgba(0, 0, 0, 0.75)',\n      tipColor: '#fff',\n    },\n  },\n});\n",paraId:32,tocIndex:8},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.options({\n  type: 'treemap',\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/flare-treemap.json',\n  },\n  layout: {\n    path: (d) => d.name.replace(/\\./g, '/'),\n    tile: 'treemapBinary',\n    paddingInner: 1,\n  },\n  encode: { value: 'size' },\n  style: {\n    labelText: (d) =>\n      d.data.name\n        .split('.')\n        .pop()\n        .split(/(?=[A-Z][a-z])/g)[0],\n    labelFill: '#000',\n    labelPosition: 'top-left',\n    fillOpacity: 0.5,\n  },\n});\n\nchart.render();\n",paraId:33,tocIndex:9}]},86079:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(10310);const t=[{value:"Compared with monotonous fill colors, using pattern fills can enrich expressiveness and it's also useful in accessibility and black-and-white printing scenarios. To achieve this, we offer three methods in increasing order of complexity and usage cost:",paraId:0},{value:"Use built-in patterns.",paraId:1},{value:"Custom pattern using the G API.",paraId:1},{value:"Use other pattern sources.",paraId:1},{value:"We have built three common patterns into the ",paraId:2,tocIndex:0},{value:"g-pattern",paraId:2,tocIndex:0},{value:", and the appearance can be easily adjusted through parameters. This is also the simplest way to use pattern:",paraId:2,tocIndex:0},{value:"Dots",paraId:3,tocIndex:0},{value:" made of dots",paraId:3,tocIndex:0},{value:"Lines",paraId:3,tocIndex:0},{value:" made of straight lines",paraId:3,tocIndex:0},{value:"Squares",paraId:3,tocIndex:0},{value:" made of squares",paraId:3,tocIndex:0},{value:"The usage is as follows, first install the dependencies:",paraId:4,tocIndex:0},{value:"$ npm install @antv/g-pattern  --save;\n",paraId:5,tocIndex:0},{value:"Then you can use the built-in patterns. In this ",paraId:6,tocIndex:0},{value:"example",paraId:7,tocIndex:0},{value:":",paraId:6,tocIndex:0},{value:"We used ",paraId:8,tocIndex:0},{value:"lines",paraId:8,tocIndex:0},{value:", and set attributes like background color, opacity, line color, and spacing.",paraId:8,tocIndex:0},{value:"Through ",paraId:8,tocIndex:0},{value:"repetition",paraId:8,tocIndex:0},{value:", the tiling mode is specified as horizontal and vertical directions",paraId:8,tocIndex:0},{value:"Through ",paraId:8,tocIndex:0},{value:"transform",paraId:8,tocIndex:0},{value:", the pattern is rotated 30 degrees clockwise",paraId:8,tocIndex:0},{value:"import { lines } from '@antv/g-pattern';\n\nchart\n  //... Omit other imperative calls\n  .style('fill', (_, idx) => {\n    return {\n      image: lines({\n        backgroundColor: colors[idx],\n        backgroundOpacity: 0.65,\n        stroke: colors[idx],\n        lineWidth: 4,\n        spacing: 5,\n      }),\n      repetition: 'repeat',\n      transform: 'rotate(30)',\n    };\n  });\n",paraId:9,tocIndex:0},{value:"The effect is as follows:",paraId:10,tocIndex:0},{value:"For more detailed parameter meanings and effects, see ",paraId:11,tocIndex:0},{value:"complete g-pattern API",paraId:11,tocIndex:0},{value:"。",paraId:11,tocIndex:0},{value:"When the above-mentioned built-in patterns do not meet the requirements, you can use ",paraId:12,tocIndex:1},{value:"G API",paraId:12,tocIndex:1},{value:" to customize, just like describing the scene.",paraId:12,tocIndex:1},{value:"In this ",paraId:13,tocIndex:1},{value:"example",paraId:14,tocIndex:1},{value:", we first get ",paraId:13,tocIndex:1},{value:"document",paraId:13,tocIndex:1},{value:" object from context, create a ",paraId:13,tocIndex:1},{value:"rect",paraId:13,tocIndex:1},{value:" and a ",paraId:13,tocIndex:1},{value:"path",paraId:13,tocIndex:1},{value:" by ",paraId:13,tocIndex:1},{value:"document.createElement",paraId:13,tocIndex:1},{value:", and using them as pattern sources:",paraId:13,tocIndex:1},{value:"mark.style('fill', ({ value }) => {\n  const { document } = chart.getContext().canvas;\n  const background = document.createElement('rect', {\n    style: {\n      width,\n      height,\n      fill: color,\n    },\n  });\n\n  const line = document.createElement('path', {\n    style: {\n      d: `\n                M 0 ${-height} L ${width * 2} ${height}\n                M ${-width} ${-height} L ${width} ${height}\n                M ${-width} 0 L ${width} ${height * 2}`,\n      stroke,\n      lineWidth: 1,\n      strokeOpacity: 0.9,\n    },\n  });\n  background.appendChild(line);\n\n  return {\n    image: background,\n    repetition: 'repeat',\n  };\n});\n",paraId:15,tocIndex:1},{value:"The effect is as follows:",paraId:16,tocIndex:1},{value:"For more usage, please refer to ",paraId:17,tocIndex:1},{value:"G API",paraId:17,tocIndex:1},{value:"。",paraId:17,tocIndex:1},{value:"Refer to ",paraId:18,tocIndex:2},{value:"G API",paraId:18,tocIndex:2},{value:", other available patterns sources include:",paraId:18,tocIndex:2},{value:"Image URL, e.g.",paraId:19,tocIndex:2},{value:"'http://example.png'",paraId:19,tocIndex:2},{value:"HTMLImageElement",paraId:19,tocIndex:2},{value:"HTMLCanvasElement",paraId:19,tocIndex:2},{value:"HTMLVideoElement",paraId:19,tocIndex:2},{value:"Among them, image URL, HTMLImageElement, and HTMLVideoElement are all static resources, while HTMLCanvasElement can be used to programmatically generate patterns, with the following results:",paraId:20,tocIndex:2},{value:"In this ",paraId:21,tocIndex:2},{value:"example",paraId:22,tocIndex:2},{value:", we used ",paraId:21,tocIndex:2},{value:"HTMLCanvasElement",paraId:21,tocIndex:2},{value:" with ",paraId:21,tocIndex:2},{value:"canvas API",paraId:21,tocIndex:2},{value:" to customize:",paraId:21,tocIndex:2},{value:"// 程序化生成\nconst canvas = createCanvas(width, height);\nconst ctx = canvas.getContext('2d');\ndrawRect(ctx, width, height, color);\ndrawLinePattern(ctx, stroke, width, height, cross);\n\n// 使用\nchart.style('fill', ({ value }) => {\n  return { image: canvas, repetition: 'repeat' };\n});\n",paraId:23,tocIndex:2},{value:"It is not difficult to see that this programmatic generation method requires the users to have deep understanding of ",paraId:24,tocIndex:2},{value:"canvas API",paraId:24,tocIndex:2},{value:", but it also offers the highest level of flexibility.",paraId:24,tocIndex:2}]},41690:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(75720);const t=[{value:'Canvas displays are often seen as a "black box," with content that cannot be textified for screen readers to read aloud. To cater to people with different disabilities, features such as text extraction and keyboard navigation can be provided.',paraId:0},{value:"The best practices in the charting field can be found at ",paraId:1},{value:"Highcharts",paraId:1},{value:", which offers a wealth of practical examples worth emulating.",paraId:1},{value:"In G2, the functionality of ",paraId:2},{value:"text search",paraId:2},{value:" can be implemented with the help of plugins.",paraId:2},{value:"First, install the ",paraId:3,tocIndex:0},{value:"@antv/g-plugin-a11y",paraId:3,tocIndex:0},{value:":",paraId:3,tocIndex:0},{value:"npm install @antv/g-plugin-rough-canvas-renderer --save\n",paraId:4,tocIndex:0},{value:"Then, import it into the plugin list:",paraId:5,tocIndex:0},{value:"import { Plugin } from '@antv/g-plugin-a11y';\n\nconst plugin = new Plugin({ enableExtractingText: true });\n\nconst chart = new Chart({\n  container: 'container',\n  plugins: [plugin],\n});\n",paraId:6,tocIndex:0},{value:"In some renderers (such as ",paraId:7,tocIndex:0},{value:"g-canvas",paraId:7,tocIndex:0},{value:" / ",paraId:7,tocIndex:0},{value:"g-webgl",paraId:7,tocIndex:0},{value:" / ",paraId:7,tocIndex:0},{value:"g-canvaskit",paraId:7,tocIndex:0},{value:"), once text is drawn, the browser's built-in search functionality (",paraId:7,tocIndex:0},{value:"Command + F",paraId:7,tocIndex:0},{value:") cannot be used to locate matches, which is also not favorable for SEO.",paraId:7,tocIndex:0},{value:"In this example, after enabling ",paraId:8,tocIndex:0},{value:"enableExtractingText",paraId:8,tocIndex:0},{value:", the text search functionality can be used:",paraId:8,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst plugin = new gPluginA11y.Plugin({ enableExtractingText: true });\n\nconst labelFormatter = (d) => Math.abs(d) + (d < 0 ? 'BC' : d > 0 ? 'AC' : '');\nconst left = (d) => d.end > -1500 && d.start > -3000;\n\nconst chart = new Chart({\n  container: 'container',\n  width: 900,\n  height: 1000,\n  plugins: [plugin],\n});\n\nchart.options({\n  type: 'interval',\n  width: 900,\n  height: 1000,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/world-history.json',\n  },\n  encode: { x: 'civilization', y: ['start', 'end'], color: 'region' },\n  transform: [\n    { type: 'sortX', by: 'y' },\n    { type: 'sortColor', by: 'y', reducer: 'min' },\n  ],\n  scale: { color: { palette: 'set2' } },\n  coordinate: { transform: [{ type: 'transpose' }] },\n  axis: { x: false },\n  labels: [\n    {\n      text: 'civilization',\n      position: (d) => (left(d) ? 'left' : 'right'),\n      textAlign: (d) => (left(d) ? 'end' : 'start'),\n      dx: (d) => (left(d) ? -5 : 5),\n      fontSize: 10,\n    },\n  ],\n  tooltip: {\n    items: [\n      {\n        name: 'start',\n        field: 'start',\n        valueFormatter: labelFormatter,\n      },\n      {\n        name: 'end',\n        field: 'end',\n        valueFormatter: labelFormatter,\n      },\n    ],\n  },\n});\nchart.render();\n",paraId:9,tocIndex:0},{value:"In the implementation, we added DOM elements within the canvas container to synchronize with the visible text in the canvas in real-time:",paraId:10,tocIndex:0},{value:'<div\n  id="g-a11y-text-extractor-mask"\n  style="position: absolute; inset: 0px; z-index: 99; pointer-events: none; user-select: none; overflow: hidden;"\n>\n  <div\n    id="g-a11y-text-extractor-text-507"\n    style="line-height: 1; position: absolute; white-space: pre; word-break: keep-all; color: transparent !important; font-family: sans-serif; font-size: 12px; transform-origin: 0px 0px; transform: translate(0px, 0px) translate(0px, -50%) matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 215.856, 24, 0, 1);"\n  >\n    East Asia\n  </div>\n</div>\n',paraId:11,tocIndex:0},{value:"Here are some considerations:",paraId:12,tocIndex:0},{value:"When using g-svg rendering, since SVG naturally supports ",paraId:13,tocIndex:0},{value:"<foreignObject>",paraId:13,tocIndex:0},{value:", the aforementioned DOM content will not be added.",paraId:13,tocIndex:0},{value:"Due to the minimum font size limit set by browsers (12px in Chrome), very small text may have inconsistent rendering effects.",paraId:13,tocIndex:0}]},21239:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(70811);const t=[{value:"Lottie",paraId:0},{value:" greatly enhances the descriptive capabilities of animations and has excellent use cases in data visualization storytelling.",paraId:0},{value:"In G2, you can integrate Lottie into the canvas through ",paraId:1},{value:"@antv/g-lottie-player",paraId:1},{value:". It also provides simple animation control methods such as play, pause, and jumping to specific moments or frames. Once added to the canvas, you can manipulate them like basic graphics.",paraId:1},{value:"First, install the ",paraId:2,tocIndex:0},{value:"@antv/g-lottie-player",paraId:2,tocIndex:0},{value:" player:",paraId:2,tocIndex:0},{value:"npm install @antv/g-lottie-player --save\n",paraId:3,tocIndex:0},{value:"After the canvas is initialized and the Lottie file is loaded, you can create a Lottie animation object and render it to the canvas to get a ",paraId:4,tocIndex:0},{value:"Group",paraId:4,tocIndex:0},{value:". You can then transform it arbitrarily, such as scaling or moving it to a specific location:",paraId:4,tocIndex:0},{value:"import { loadAnimation } from '@antv/g-lottie-player';\n\n(async () => {\n  // Get canvas from context\n  const { canvas } = chart.getContext();\n  await canvas.ready;\n\n  // Load Lottie file\n  const lottieJSON = await fetch(\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*C9f6TaadHikAAAAAAAAAAAAADmJ7AQ',\n  ).then((res) => res.json());\n\n  // Create animation\n  const animation = loadAnimation(lottieJSON, { loop: true, autoplay: true });\n  // Render to canvas to get Group container\n  const wrapper = animation.render(canvas);\n  // Manipulate the container arbitrarily, e.g., move to a specific position\n  wrapper.scale(0.5);\n  wrapper.translate(160, 100);\n})();\n",paraId:5,tocIndex:0},{value:"The effect is as follows:",paraId:6,tocIndex:0},{value:"For more animation control options, please refer to: ",paraId:7,tocIndex:0},{value:"Lottie Animation Documentation",paraId:7,tocIndex:0},{value:".",paraId:7,tocIndex:0}]},36156:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(15618);const t=[{value:"G2 is built on top of AntV ",paraId:0},{value:"G",paraId:0},{value:" for rendering, so it inherits G's rendering capabilities. Currently, it supports three major Web standards: Canvas, SVG, and WebGL, with Canvas renderer being the built-in default renderer for G2. For more renderers, see ",paraId:0},{value:"G documentation",paraId:0},{value:".",paraId:0},{value:"import { Chart } from '@antv/g2';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\n\nconst chart = new Chart({\n  container: 'container',\n  // Or choose WebGLRenderer, defaults to CanvasRenderer if not specified.\n  renderer: new SVGRenderer(),\n});\n",paraId:1,tocIndex:0},{value:"Of course, before using them, you need to install them first using npm, yarn, or other package managers. For the overall package size of G2, only the Canvas renderer is built-in. For specific examples, refer to ",paraId:2,tocIndex:0},{value:"Renderer",paraId:2,tocIndex:0},{value:".",paraId:2,tocIndex:0},{value:"All G renderers are used with:",paraId:3,tocIndex:1},{value:"new Renderer({ /_ options _/ });",paraId:4,tocIndex:1},{value:"Let's introduce the configuration options for creating each of the three renderers.",paraId:5,tocIndex:1},{value:"Property",paraId:6,tocIndex:2},{value:"Description",paraId:6,tocIndex:2},{value:"Type",paraId:6,tocIndex:2},{value:"Default",paraId:6,tocIndex:2},{value:"enableDirtyRectangleRendering",paraId:6,tocIndex:2},{value:'Whether to enable "dirty rectangle" rendering',paraId:6,tocIndex:2},{value:"boolean",paraId:6,tocIndex:2},{value:"true",paraId:6,tocIndex:2},{value:"enableDirtyRectangleRenderingDebug",paraId:6,tocIndex:2},{value:'Whether to enable "dirty rectangle" rendering debug mode',paraId:6,tocIndex:2},{value:"boolean",paraId:6,tocIndex:2},{value:"false",paraId:6,tocIndex:2},{value:"Property",paraId:7,tocIndex:3},{value:"Description",paraId:7,tocIndex:3},{value:"Type",paraId:7,tocIndex:3},{value:"Default",paraId:7,tocIndex:3},{value:"outputSVGElementId",paraId:7,tocIndex:3},{value:"Whether to add id attribute when generating SVGElement",paraId:7,tocIndex:3},{value:"boolean",paraId:7,tocIndex:3},{value:"true",paraId:7,tocIndex:3},{value:"Property",paraId:8,tocIndex:4},{value:"Description",paraId:8,tocIndex:4},{value:"Type",paraId:8,tocIndex:4},{value:"Default",paraId:8,tocIndex:4},{value:"targets",paraId:8,tocIndex:4},{value:"Select rendering environment and auto-downgrade in order",paraId:8,tocIndex:4},{value:"string[]",paraId:8,tocIndex:4},{value:"['webgl2', 'webgl1']",paraId:8,tocIndex:4},{value:"When you need to replace the built-in Canvas renderer, for example, switching to SVG, you need to include a specific version of the G2 UMD file.",paraId:9,tocIndex:5},{value:"Online Example",paraId:10,tocIndex:5},{value:"First, include the UMD versions of ",paraId:11,tocIndex:5},{value:"@antv/g",paraId:11,tocIndex:5},{value:" and ",paraId:11,tocIndex:5},{value:"@antv/g-svg",paraId:11,tocIndex:5},{value:":",paraId:11,tocIndex:5},{value:'<script src="https://unpkg.com/@antv/g"><\/script>\n<script src="https://unpkg.com/@antv/g-svg"><\/script>\n',paraId:12,tocIndex:5},{value:"Then include the G2 UMD version that excludes ",paraId:13,tocIndex:5},{value:"@antv/g",paraId:13,tocIndex:5},{value:" and ",paraId:13,tocIndex:5},{value:"@antv/g-svg",paraId:13,tocIndex:5},{value:", which we call the lite version:",paraId:13,tocIndex:5},{value:'<script src="https://unpkg.com/@antv/g2@5.0.5/dist/g2-lite.min.js"><\/script>\n',paraId:14,tocIndex:5},{value:"Find the ",paraId:15,tocIndex:5},{value:"Renderer",paraId:15,tocIndex:5},{value:" in the namespace ",paraId:15,tocIndex:5},{value:"window.G.SVG",paraId:15,tocIndex:5},{value:" and instantiate it:",paraId:15,tocIndex:5},{value:"const { Chart } = window.G2;\n\nconst chart = new Chart({\n  container: 'container',\n  renderer: new window.G.SVG.Renderer(), // Pass in SVG Renderer\n});\n",paraId:16,tocIndex:5},{value:"The lite version is provided mainly for the following considerations:",paraId:17,tocIndex:5},{value:"After removing ",paraId:18,tocIndex:5},{value:"@antv/g",paraId:18,tocIndex:5},{value:" and the built-in ",paraId:18,tocIndex:5},{value:"@antv/g-canvas",paraId:18,tocIndex:5},{value:" renderer, it's convenient to replace other renderers on demand without redundant built-in renderers",paraId:18,tocIndex:5},{value:"When used with other packages that use ",paraId:18,tocIndex:5},{value:"@antv/g",paraId:18,tocIndex:5},{value:", you can share the same core and renderer code, saving overall package size, for example:",paraId:18,tocIndex:5},{value:'<script src="https://unpkg.com/@antv/g"><\/script>\n<script src="https://unpkg.com/@antv/g-svg"><\/script>\n<script src="https://unpkg.com/@antv/g2@5.0.5/dist/g2-lite.min.js"><\/script>\n<script src="https://unpkg.com/@antv/g6-lite"><\/script>\n',paraId:19,tocIndex:5}]},82521:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(77184);const t=[{value:"Compared to regular square graphics, hand-drawn styles can bring a cute and relaxed feeling.",paraId:0},{value:"Many chart libraries based on ",paraId:1},{value:"rough.js",paraId:1},{value:" do exactly this, such as ",paraId:1},{value:"roughViz.js",paraId:1},{value:", ",paraId:1},{value:"rough-charts",paraId:1},{value:", and others.",paraId:1},{value:"With out-of-the-box rendering plugins, we can easily switch to hand-drawn styles in G2.",paraId:2},{value:"First install ",paraId:3,tocIndex:0},{value:"@antv/g-plugin-rough-canvas-renderer",paraId:3,tocIndex:0},{value:":",paraId:3,tocIndex:0},{value:"npm install @antv/g-plugin-rough-canvas-renderer --save\n",paraId:4,tocIndex:0},{value:"Then add it to the plugin list:",paraId:5,tocIndex:0},{value:"import { Plugin } from '@antv/g-plugin-rough-canvas-renderer';\n\nconst chart = new Chart({\n  container: 'container',\n  plugins: [new Plugin()],\n});\n",paraId:6,tocIndex:0},{value:"Just one line of change is needed to complete the style transformation. In this ",paraId:7,tocIndex:0},{value:"example",paraId:8,tocIndex:0},{value:", we specify the ",paraId:7,tocIndex:0},{value:"'zigzag'",paraId:7,tocIndex:0},{value:" fill style through ",paraId:7,tocIndex:0},{value:"fillStyle",paraId:7,tocIndex:0},{value:", which resembles continuous scribble strokes:",paraId:7,tocIndex:0},{value:"chart\n  .interval()\n  .data([\n    { month: 'Jan.', profit: 387264, start: 0, end: 387264 },\n    //...\n  ])\n  .encode('x', 'month')\n  .encode('y', ['end', 'start'])\n  .encode('color', (d) =>\n    d.month === 'Total' ? 'Total' : d.profit > 0 ? 'Increase' : 'Decrease',\n  )\n  .style('strokeWidth', 2)\n  .style('fillStyle', 'zigzag'); // Specify fill style\n\nchart.render();\n",paraId:9,tocIndex:0},{value:"The effect is shown below, you can see that the original fill color has become more lively!\n",paraId:10,tocIndex:0},{value:"Of course, ",paraId:11,tocIndex:0},{value:"fillStyle",paraId:11,tocIndex:0},{value:" has many fill methods. The image below shows all currently supported effects. For more options, see the ",paraId:11,tocIndex:0},{value:"@antv/g-plugin-rough-canvas-renderer documentation",paraId:11,tocIndex:0},{value:":",paraId:11,tocIndex:0},{value:"Finally, choosing a hand-drawn style font can make the overall style more unified. In the ",paraId:12,tocIndex:0},{value:"example",paraId:13,tocIndex:0},{value:" above, we chose ",paraId:12,tocIndex:0},{value:"'Gaegu'",paraId:12,tocIndex:0},{value:". You can refer to ",paraId:12,tocIndex:0},{value:"how to load external fonts",paraId:12,tocIndex:0},{value:".",paraId:12,tocIndex:0},{value:"G2 uses ",paraId:14,tocIndex:2},{value:"g-canvas",paraId:14,tocIndex:2},{value:" as the default renderer. If you switch to ",paraId:14,tocIndex:2},{value:"g-svg",paraId:14,tocIndex:2},{value:", there's also a corresponding hand-drawn style plugin available: ",paraId:14,tocIndex:2},{value:"@antv/plugin-rough-svg-renderer",paraId:14,tocIndex:2},{value:", with exactly the same usage.",paraId:14,tocIndex:2},{value:"Using ",paraId:15,tocIndex:3},{value:"fillStyle",paraId:15,tocIndex:3},{value:" instead of ",paraId:15,tocIndex:3},{value:"fill",paraId:15,tocIndex:3},{value:" can achieve pattern-like effects, making it suitable for accessibility scenarios, such as considering color-blind users and black-and-white printing.",paraId:15,tocIndex:3},{value:"In the ",paraId:16,tocIndex:3},{value:"example",paraId:17,tocIndex:3},{value:" below, we set both ",paraId:16,tocIndex:3},{value:"fill/stroke",paraId:16,tocIndex:3},{value:" to black and use ",paraId:16,tocIndex:3},{value:"fillStyle",paraId:16,tocIndex:3},{value:" as the color attribute:",paraId:16,tocIndex:3},{value:"chart\n  .interval()\n  //... omitting data, transform, etc.\n  .scale('color', {\n    range: [\n      'hachure',\n      'solid',\n      'zigzag',\n      'cross-hatch',\n      'dots',\n      'dashed',\n      'zigzag-line',\n    ],\n  })\n  .style('fill', 'black')\n  .style('stroke', 'black')\n  .style('strokeWidth', '4')\n  .style('colorAttribute', 'fillStyle');\n",paraId:18,tocIndex:3},{value:"The effect is shown below:",paraId:19,tocIndex:3}]},1502:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(15508);const t=[{value:"Server-Side Rendering (SSR) refers to rendering charts in non-browser environments, as opposed to Client-Side Rendering (CSR). This typically occurs in backend languages like Node.js, Python, Java, PHP, etc., producing static images without interactivity or animations. Common use cases include:",paraId:0},{value:"Pre-rendering images on the backend to improve page load speed",paraId:1},{value:"Batch processing scripts for easier distribution",paraId:1},{value:"Server-side visualization services",paraId:1},{value:"Generating images for screenshot comparison in unit testing",paraId:1},{value:"...",paraId:1},{value:"Frontend data visualization libraries are built upon browser DOM Canvas APIs. To render charts in Node.js, we need to replace the DOM Canvas with Node Canvas. In the Node.js ecosystem, ",paraId:2,tocIndex:0},{value:"node-canvas",paraId:2,tocIndex:0},{value:" provides a Cairo-based implementation of the Canvas2D API that aligns with browser standards.",paraId:2,tocIndex:0},{value:"By leveraging ",paraId:3,tocIndex:0},{value:"node-canvas",paraId:3,tocIndex:0},{value:" and AntV's G2 (which supports custom Canvas objects), we can switch to Node.js rendering engines for server-side chart generation.",paraId:3,tocIndex:0},{value:"Online Example",paraId:4,tocIndex:1},{value:" - Note: jsdom-based solutions can only generate SVG. For PNG-like formats, use ",paraId:4,tocIndex:1},{value:"node-canvas",paraId:4,tocIndex:1},{value:".",paraId:4,tocIndex:1},{value:"Firstly, create two node-canvases, one for rendering the scene and the other for measuring text width:",paraId:5,tocIndex:1},{value:"const { createCanvas } = require('canvas');\nconst nodeCanvas = createCanvas(width, height);\nconst offscreenNodeCanvas = createCanvas(1, 1);\n",paraId:6,tocIndex:1},{value:"Then create a canvas renderer and canvas:",paraId:7,tocIndex:1},{value:"import { Canvas } from '@antv/g';\nimport { Renderer } from '@antv/g-canvas';\n\nconst renderer = new Renderer();\n// Omitting the removal of DOM-related plugin code.\nconst gCanvas = new Canvas({\n  width,\n  height,\n  canvas: nodeCanvas,\n  renderer,\n  offscreenCanvas: offscreenNodeCanvas,\n});\n",paraId:8,tocIndex:1},{value:"Next, create a G2 Chart as usual and render it. After completion, use the ",paraId:9,tocIndex:1},{value:"createPNGStream",paraId:9,tocIndex:1},{value:" method provided by node-canvas to create a ",paraId:9,tocIndex:1},{value:"ReadableStream",paraId:9,tocIndex:1},{value:" containing the PNG encoding. Similarly, ",paraId:9,tocIndex:1},{value:"createJPEGStream",paraId:9,tocIndex:1},{value:" and ",paraId:9,tocIndex:1},{value:"createPDFStream",paraId:9,tocIndex:1},{value:" are also available for exporting JPEG and PDF, respectively.",paraId:9,tocIndex:1},{value:"function writePNG(nodeCanvas) {\n  return new Promise<string>((resolve, reject) => {\n    const f = path.join(os.tmpdir(), `${Math.random()}.png`);\n    const out = fs.createWriteStream(f);\n    const stream = nodeCanvas.createPNGStream();\n    stream.pipe(out);\n    out.on('finish', () => resolve(f)).on('error', reject);\n  });\n}\n",paraId:10,tocIndex:1},{value:"We've packaged the SSR solution into a ready-to-use library: ",paraId:11,tocIndex:2},{value:"@antv/g2-ssr",paraId:11,tocIndex:2},{value:".",paraId:11,tocIndex:2},{value:"const chart = await createChart({\n  width: 640,\n  height: 480,\n  imageType: 'png', // or 'jpeg'\n  // Other G2 configurations (refer to G2 docs)\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    color: 'genre',\n  },\n});\n\n// Export\nchart.exportToFile('chart'); // -> chart.png\nchart.toBuffer(); // -> get buffer\n",paraId:12,tocIndex:2},{value:"Renders in ~400ms with browser-equivalent quality:",paraId:13,tocIndex:2},{value:"We've open-sourced an AI-oriented visualization solution leveraging this SSR capability: ",paraId:14,tocIndex:3},{value:"mcp-server-chart",paraId:14,tocIndex:3},{value:". It interprets AI model outputs and user intent to generate visualizations, currently supporting 15+ chart types and relational diagrams.",paraId:14,tocIndex:3},{value:"Because the code of G2 is written and developed in JavaScript, it cannot be used directly in Python, Java, PHP and other language environments. However, you can install the Node.JS environment in the service and then use the corresponding back-end language command line API to drive the above-mentioned Node.JS code to perform SSR.",paraId:15,tocIndex:4},{value:"Refer to ",paraId:16,tocIndex:4},{value:"python calls node js",paraId:16,tocIndex:4},{value:", other languages ​​are similar.",paraId:16,tocIndex:4}]},19280:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(69084);const t=[{value:"Taking a 3D scatter plot as an example, creating the chart requires the following steps:",paraId:0},{value:"Create WebGL renderers and plugin.",paraId:1},{value:"Extend threedlib.",paraId:1},{value:"Set z-channel, scale and axis.",paraId:1},{value:"Set up the camera in the scene.",paraId:1},{value:"Add light source.",paraId:1},{value:"Add custom legend.",paraId:1},{value:"Using camera interaction and animation.",paraId:1},{value:"First install the dependencies:",paraId:2,tocIndex:0},{value:"$ npm install @antv/g-webgl @antv/g-plugin-3d @antv/g-plugin-control --save\n",paraId:3,tocIndex:0},{value:"and then use ",paraId:4,tocIndex:0},{value:"@antv/g-webgl",paraId:4,tocIndex:0},{value:" as a renderer and register the following two plugins:",paraId:4,tocIndex:0},{value:"g-plugin-3d",paraId:5,tocIndex:0},{value:" Provide geometry, materials and lighting in 3D scenes.",paraId:5,tocIndex:0},{value:"g-plugin-control",paraId:5,tocIndex:0},{value:" Provide camera interaction in 3D scenes.",paraId:5,tocIndex:0},{value:"import { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\n\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ThreeDPlugin());\nrenderer.registerPlugin(new ControlPlugin());\n",paraId:6,tocIndex:0},{value:"Due to the huge size of 3D-related functional code, we separated it into ",paraId:7,tocIndex:1},{value:"threedlib",paraId:8,tocIndex:1},{value:", extend it and customize the Chart object at runtime:",paraId:7,tocIndex:1},{value:"import { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\n\nconst Chart = extend(Runtime, { ...corelib(), ...threedlib() });\n",paraId:9,tocIndex:1},{value:"Using ",paraId:10,tocIndex:2},{value:"depth",paraId:10,tocIndex:2},{value:" to specified depth when creating the Chart",paraId:10,tocIndex:2},{value:"const chart = new Chart({\n  container: 'container',\n  renderer,\n  depth: 400,\n});\n",paraId:11,tocIndex:2},{value:"We use ",paraId:12,tocIndex:2},{value:"point3D",paraId:13,tocIndex:2},{value:" mark and select cube as the shape to draw.\nThen set the z channel, scale and axis.",paraId:12,tocIndex:2},{value:"chart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('color', 'Origin')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n",paraId:14,tocIndex:2},{value:"In a 3D scene we can use orthographic or perspective projection, and the camera can be get from the Chart context after the first rendering is completed. You can then use the ",paraId:15,tocIndex:3},{value:"camera API",paraId:15,tocIndex:3},{value:" provide by G to complete the settings of projection mode and camera type. In the example below, we use perspective projection,",paraId:15,tocIndex:3},{value:"chart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera(); // get camera\n\n  camera.setPerspective(0.1, 5000, 45, 500 / 500);\n  camera.setType(CameraType.ORBITING);\n});\n",paraId:16,tocIndex:3},{value:"The effect is as follows:",paraId:17,tocIndex:3},{value:"import { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\nimport { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\n\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ControlPlugin());\nrenderer.registerPlugin(new ThreeDPlugin());\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...threedlib(),\n});\n\n// initialize Chart instance\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  width: 500,\n  height: 500,\n  depth: 400,\n});\n\nchart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('color', 'Origin')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setPerspective(0.1, 5000, 45, 500 / 500);\n  camera.setType(CameraType.ORBITING);\n\n  // Add a directional light into scene.\n  const light = new DirectionalLight({\n    style: {\n      intensity: 3,\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n});\n",paraId:18,tocIndex:3},{value:"We can also let the camera fix the viewpoint and rotate it at a certain angle. Here we use ",paraId:19,tocIndex:3},{value:"rotate",paraId:19,tocIndex:3},{value:"：",paraId:19,tocIndex:3},{value:"camera.rotate(-20, -20, 0);\n",paraId:20,tocIndex:3},{value:"import { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\nimport { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\n\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ControlPlugin());\nrenderer.registerPlugin(new ThreeDPlugin());\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...threedlib(),\n});\n\n// initialize Chart instance\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  width: 500,\n  height: 500,\n  depth: 400,\n});\n\nchart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('color', 'Origin')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setType(CameraType.ORBITING);\n  camera.rotate(-20, -20, 0);\n\n  // Add a directional light into scene.\n  const light = new DirectionalLight({\n    style: {\n      intensity: 3,\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n});\n",paraId:21,tocIndex:3},{value:'The material needs to match the light source to present a certain "three-dimensional feeling". Here we use what G provides ',paraId:22,tocIndex:4},{value:"directional light source",paraId:22,tocIndex:4},{value:"：",paraId:22,tocIndex:4},{value:"import { DirectionalLight } from '@antv/g-plugin-3d';\n\nconst light = new DirectionalLight({\n  style: {\n    intensity: 3,\n    fill: 'white',\n    direction: [-1, 0, 1],\n  },\n});\ncanvas.appendChild(light);\n",paraId:23,tocIndex:4},{value:"we can use ",paraId:24,tocIndex:4},{value:"intensity",paraId:24,tocIndex:4},{value:" to increase the intensity of the light source:",paraId:24,tocIndex:4},{value:"import { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\nimport { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\n\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ControlPlugin());\nrenderer.registerPlugin(new ThreeDPlugin());\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...threedlib(),\n});\n\n// initialize Chart instance\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  width: 500,\n  height: 500,\n  depth: 400,\n});\n\nchart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('color', 'Origin')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setPerspective(0.1, 5000, 45, 500 / 500);\n  camera.setType(CameraType.ORBITING);\n\n  // Add a directional light into scene.\n  const light = new DirectionalLight({\n    style: {\n      intensity: 5,\n      fill: 'white',\n      direction: [0, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n});\n",paraId:25,tocIndex:4},{value:"You may notice that in the example above we intentionally turned off the legend:",paraId:26,tocIndex:5},{value:"chart.legend(false);\n",paraId:27,tocIndex:5},{value:"This is because graphics in a 3D scene are all affected by the camera, but HUD components like legends are better suited to being drawn independently. refer to ",paraId:28,tocIndex:5},{value:"Custom legend",paraId:29,tocIndex:5},{value:", we can customize the legend using HTML:",paraId:28,tocIndex:5},{value:"import { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\nimport { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\n\n// add legend\nfunction legendColor(chart) {\n  // create and mound legend\n  const node = chart.getContainer();\n  const legend = document.createElement('div');\n  legend.style.display = 'flex';\n  node.insertBefore(legend, node.childNodes[0]);\n\n  // create and mount Items\n  const { color: scale } = chart.getScale();\n  const { domain } = scale.getOptions();\n  const items = domain.map((value) => {\n    const item = document.createElement('div');\n    const color = scale.map(value);\n    item.style.marginLeft = '1em';\n    item.innerHTML = `\n    <span style=\"\n      background-color:${color};\n      display:inline-block;\n      width:10px;\n      height:10px;\"\n    ></span>\n    <span>${value}</span>\n    `;\n    return item;\n  });\n  items.forEach((d) => legend.append(d));\n\n  // event listener\n  const selectedValues = [...domain];\n  const options = chart.options();\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    const value = domain[i];\n    item.style.cursor = 'pointer';\n    item.onclick = () => {\n      const index = selectedValues.indexOf(value);\n      if (index !== -1) {\n        selectedValues.splice(index, 1);\n        item.style.opacity = 0.5;\n      } else {\n        selectedValues.push(value);\n        item.style.opacity = 1;\n      }\n      changeColor(selectedValues);\n    };\n  }\n\n  // rerender view\n  function changeColor(value) {\n    const { transform = [] } = options;\n    const newTransform = [{ type: 'filter', color: { value } }, ...transform];\n    chart.options({\n      ...options,\n      transform: newTransform, // set new transform\n      scale: { color: { domain } },\n    });\n    chart.render(); // rerender chart\n  }\n}\n\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ControlPlugin());\nrenderer.registerPlugin(new ThreeDPlugin());\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...threedlib(),\n});\n\n// initialize Chart instance\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  width: 500,\n  height: 500,\n  depth: 400,\n});\n\nchart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('color', 'Origin')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render().then(() => {\n  legendColor(chart);\n\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setPerspective(0.1, 5000, 45, 500 / 500);\n  camera.setType(CameraType.ORBITING);\n\n  // Add a directional light into scene.\n  const light = DirectionalLight({\n    style: {\n      intensity: 3,\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n});\n",paraId:30,tocIndex:5},{value:"Interaction in 3D scenes is very different from 2D scenes. ",paraId:31,tocIndex:6},{value:"g-plugin-control",paraId:31,tocIndex:6},{value:" provides camera-based interaction in 3D scenes. When we drag the canvas, the camera will be controlled to rotate around the viewpoint, and the zoom of the mouse wheel will cause the camera to perform a dolly operation. It should be noted that the scaling operation has no effect under orthogonal projection, but the rotation operation is still effective.",paraId:31,tocIndex:6},{value:"When users go through some camera operations, they sometimes want to return to the initial state, for example ",paraId:32,tocIndex:6},{value:"plot.ly",paraId:32,tocIndex:6},{value:" provides “Reset camera to default” button in the operation toolbar. Use what G provides ",paraId:32,tocIndex:6},{value:"Camera animation API",paraId:32,tocIndex:6},{value:", we can achieve smooth transition between any camera positions:",paraId:32,tocIndex:6},{value:"const camera = canvas.getCamera();\ncamera.createLandmark('default', {\n  position: [250, 250, 500],\n  focalPoint: [250, 250, 0],\n  zoom: 1,\n});\n\nbutton.onclick = () => {\n  camera.gotoLandmark('default', {\n    duration: 300,\n    easing: 'linear',\n  });\n};\n",paraId:33,tocIndex:6},{value:"import { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\nimport { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\n\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ControlPlugin());\nrenderer.registerPlugin(new ThreeDPlugin());\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...threedlib(),\n});\n\nfunction cameraButton(chart) {\n  const node = chart.getContainer();\n  const button = document.createElement('button');\n  button.textContent = 'Reset camera to default';\n  node.insertBefore(button, node.childNodes[0]);\n\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.createLandmark('default', {\n    position: [250, 250, 500],\n    focalPoint: [250, 250, 0],\n    zoom: 1,\n  });\n\n  button.onclick = () => {\n    camera.gotoLandmark('default', {\n      duration: 300,\n      easing: 'linear',\n    });\n  };\n}\n// add legend\nfunction legendColor(chart) {\n  // create and mount legend 并且挂在图例\n  const node = chart.getContainer();\n  const legend = document.createElement('div');\n  legend.style.display = 'flex';\n  node.insertBefore(legend, node.childNodes[0]);\n\n  // create and mount Items\n  const { color: scale } = chart.getScale();\n  const { domain } = scale.getOptions();\n  const items = domain.map((value) => {\n    const item = document.createElement('div');\n    const color = scale.map(value);\n    item.style.marginLeft = '1em';\n    item.innerHTML = `\n    <span style=\"\n      background-color:${color};\n      display:inline-block;\n      width:10px;\n      height:10px;\"\n    ></span>\n    <span>${value}</span>\n    `;\n    return item;\n  });\n  items.forEach((d) => legend.append(d));\n\n  // event listeners\n  const selectedValues = [...domain];\n  const options = chart.options();\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    const value = domain[i];\n    item.style.cursor = 'pointer';\n    item.onclick = () => {\n      const index = selectedValues.indexOf(value);\n      if (index !== -1) {\n        selectedValues.splice(index, 1);\n        item.style.opacity = 0.5;\n      } else {\n        selectedValues.push(value);\n        item.style.opacity = 1;\n      }\n      changeColor(selectedValues);\n    };\n  }\n\n  // rerender view\n  function changeColor(value) {\n    const { transform = [] } = options;\n    const newTransform = [{ type: 'filter', color: { value } }, ...transform];\n    chart.options({\n      ...options,\n      transform: newTransform, // set new transform\n      scale: { color: { domain } },\n    });\n    chart.render(); // rerender chart\n  }\n}\n\n// initialize Chart instance\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  width: 500,\n  height: 500,\n  depth: 400,\n});\n\nchart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('color', 'Origin')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render().then(() => {\n  legendColor(chart);\n  cameraButton(chart);\n\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setPerspective(0.1, 5000, 45, 500 / 500);\n  camera.setType(CameraType.ORBITING);\n\n  // Add a directional light into scene.\n  const light = new DirectionalLight({\n    style: {\n      intensity: 3,\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n});\n",paraId:34,tocIndex:6}]},46727:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(66031);const t=[{value:"Mainly used for drawing 3D bar charts.",paraId:0},{value:"First, you need to use ",paraId:1,tocIndex:0},{value:"@antv/g-webgl",paraId:1,tocIndex:0},{value:" as the renderer and register the following two plugins:",paraId:1,tocIndex:0},{value:"g-plugin-3d",paraId:2,tocIndex:0},{value:" provides geometry, materials, and lighting for 3D scenes",paraId:2,tocIndex:0},{value:"g-plugin-control",paraId:2,tocIndex:0},{value:" provides camera interaction for 3D scenes",paraId:2,tocIndex:0},{value:"Then set the z channel, scale, and z-axis, and finally add a light source to the scene.",paraId:3,tocIndex:0},{value:"import { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\nimport { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\n\n// Create a WebGL renderer.\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ControlPlugin());\nrenderer.registerPlugin(new ThreeDPlugin());\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...threedlib(),\n});\n\n// Initialize chart instance\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  width: 500,\n  height: 500,\n  depth: 400,\n});\n\nconst data = [];\nfor (let x = 0; x < 5; ++x) {\n  for (let z = 0; z < 5; ++z) {\n    data.push({\n      x: `x-${x}`,\n      z: `z-${z}`,\n      y: 10 - x - z,\n      color: Math.random() < 0.33 ? 0 : Math.random() < 0.67 ? 1 : 2,\n    });\n  }\n}\n\nchart\n  .interval3D()\n  .data({\n    type: 'inline',\n    value: data,\n  })\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('z', 'z')\n  .encode('color', 'color')\n  .encode('shape', 'cube')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 })\n  .style('opacity', 0.7);\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setPerspective(0.1, 5000, 50, 1280 / 960);\n  camera.setType(CameraType.ORBITING);\n  camera.rotate(-20, -20, 0);\n\n  // Add a directional light into scene.\n  const light = new DirectionalLight({\n    style: {\n      intensity: 2.5,\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n});\n",paraId:4,tocIndex:0},{value:"For more examples, you can check the ",paraId:5,tocIndex:0},{value:"Chart Examples",paraId:6,tocIndex:0},{value:" page.",paraId:5,tocIndex:0},{value:"Currently, interval3D has the following built-in shape types:",paraId:7,tocIndex:1},{value:"Shape",paraId:8,tocIndex:1},{value:"Description",paraId:8,tocIndex:1},{value:"Example",paraId:8,tocIndex:1},{value:"cube",paraId:8,tocIndex:1},{value:"Draw cube",paraId:8,tocIndex:1},{value:"cylinder",paraId:8,tocIndex:1},{value:"Draw cylinder",paraId:8,tocIndex:1},{value:"cone",paraId:8,tocIndex:1},{value:"Draw cone",paraId:8,tocIndex:1},{value:"Property",paraId:9,tocIndex:2},{value:"Description",paraId:9,tocIndex:2},{value:"Type",paraId:9,tocIndex:2},{value:"Default Value",paraId:9,tocIndex:2},{value:"fill",paraId:9,tocIndex:2},{value:"Fill color of the shape",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"Function<string>",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"opacity",paraId:9,tocIndex:2},{value:"Overall opacity of the shape",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"Function<number>",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"cursor",paraId:9,tocIndex:2},{value:"Mouse cursor style. Same as CSS cursor style, defaults to 'default'.",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"Function<string>",paraId:9,tocIndex:2},{value:"'default'",paraId:9,tocIndex:2}]},91583:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(87140);const t=[{value:"Primarily used for drawing 3D line charts.",paraId:0},{value:"First, you need to use ",paraId:1,tocIndex:0},{value:"@antv/g-webgl",paraId:1,tocIndex:0},{value:" as the renderer and register the following two plugins:",paraId:1,tocIndex:0},{value:"g-plugin-3d",paraId:2,tocIndex:0},{value:" provides geometry, materials, and lighting in 3D scenes",paraId:2,tocIndex:0},{value:"g-plugin-control",paraId:2,tocIndex:0},{value:" provides camera interaction in 3D scenes",paraId:2,tocIndex:0},{value:"Then set up the z channel, scale, and z-axis. There's no need to add light sources to the scene.",paraId:3,tocIndex:0},{value:"import { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\nimport { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\n\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ControlPlugin());\nrenderer.registerPlugin(new ThreeDPlugin());\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...threedlib(),\n});\n\n// Initialize chart instance\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  width: 500,\n  height: 500,\n  depth: 400,\n});\n\nconst pointCount = 31;\nlet r;\nconst data = [];\n\nfor (let i = 0; i < pointCount; i++) {\n  r = 10 * Math.cos(i / 10);\n  data.push({\n    x: r * Math.cos(i),\n    y: r * Math.sin(i),\n    z: i,\n  });\n}\n\nchart\n  .line3D()\n  .data(data)\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('z', 'z')\n  .encode('size', 4)\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setPerspective(0.1, 5000, 45, 500 / 500);\n  camera.setType(CameraType.ORBITING);\n});\n",paraId:4,tocIndex:0},{value:"For more examples, you can check the ",paraId:5,tocIndex:0},{value:"Chart Examples",paraId:6,tocIndex:0},{value:" page.",paraId:5,tocIndex:0}]},8626:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(71271);const t=[{value:"Primarily used for drawing 3D scatter plots, utilizing point granularity to analyze data distribution.",paraId:0},{value:"First, you need to use ",paraId:1,tocIndex:0},{value:"@antv/g-webgl",paraId:1,tocIndex:0},{value:" as the renderer and register the following two plugins:",paraId:1,tocIndex:0},{value:"g-plugin-3d",paraId:2,tocIndex:0},{value:" provides geometry, materials, and lighting for 3D scenes",paraId:2,tocIndex:0},{value:"g-plugin-control",paraId:2,tocIndex:0},{value:" provides camera interactions for 3D scenes",paraId:2,tocIndex:0},{value:"Then set the z channel, scale, and z-axis, and finally add light sources to the scene.",paraId:3,tocIndex:0},{value:"import { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\nimport { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\n\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ControlPlugin());\nrenderer.registerPlugin(new ThreeDPlugin());\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...threedlib(),\n});\n\n// Initialize chart instance\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  width: 500,\n  height: 500,\n  depth: 400,\n});\n\nchart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('color', 'Cylinders')\n  .encode('shape', 'cube')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setPerspective(0.1, 5000, 45, 500 / 500);\n  camera.setType(CameraType.ORBITING);\n\n  // Add a directional light into scene.\n  const light = new DirectionalLight({\n    style: {\n      intensity: 3,\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n});\n",paraId:4,tocIndex:0},{value:"For more examples, you can visit the ",paraId:5,tocIndex:0},{value:"Examples",paraId:6,tocIndex:0},{value:" page.",paraId:5,tocIndex:0},{value:"Currently, point3D has the following built-in shape graphics, including 3D and 2D:",paraId:7,tocIndex:1},{value:"Shape",paraId:8,tocIndex:1},{value:"Description",paraId:8,tocIndex:1},{value:"Example",paraId:8,tocIndex:1},{value:"cube",paraId:8,tocIndex:1},{value:"Draw cube",paraId:8,tocIndex:1},{value:"sphere",paraId:8,tocIndex:1},{value:"Draw sphere",paraId:8,tocIndex:1},{value:"hollow",paraId:8,tocIndex:1},{value:"Draw hollow circle",paraId:8,tocIndex:1},{value:"hollowDiamond",paraId:8,tocIndex:1},{value:"Draw hollow diamond",paraId:8,tocIndex:1},{value:"hollowHexagon",paraId:8,tocIndex:1},{value:"Draw hollow hexagon",paraId:8,tocIndex:1},{value:"hollowSquare",paraId:8,tocIndex:1},{value:"Draw hollow square",paraId:8,tocIndex:1},{value:"hollowTriangleDown",paraId:8,tocIndex:1},{value:"Draw hollow downward triangle",paraId:8,tocIndex:1},{value:"hollowTriangle",paraId:8,tocIndex:1},{value:"Draw hollow triangle",paraId:8,tocIndex:1},{value:"hollowBowtie",paraId:8,tocIndex:1},{value:"Draw hollow bowtie",paraId:8,tocIndex:1},{value:"point",paraId:8,tocIndex:1},{value:"Draw circle",paraId:8,tocIndex:1},{value:"plus",paraId:8,tocIndex:1},{value:"Draw plus sign",paraId:8,tocIndex:1},{value:"diamond",paraId:8,tocIndex:1},{value:"Draw diamond",paraId:8,tocIndex:1},{value:"square",paraId:8,tocIndex:1},{value:"Draw square",paraId:8,tocIndex:1},{value:"triangle",paraId:8,tocIndex:1},{value:"Draw triangle",paraId:8,tocIndex:1},{value:"triangleDown",paraId:8,tocIndex:1},{value:"Draw downward triangle",paraId:8,tocIndex:1},{value:"hexagon",paraId:8,tocIndex:1},{value:"Draw hexagon",paraId:8,tocIndex:1},{value:"cross",paraId:8,tocIndex:1},{value:"Draw cross symbol",paraId:8,tocIndex:1},{value:"bowtie",paraId:8,tocIndex:1},{value:"Draw bowtie",paraId:8,tocIndex:1},{value:"hyphen",paraId:8,tocIndex:1},{value:"Draw hyphen",paraId:8,tocIndex:1},{value:"line",paraId:8,tocIndex:1},{value:"Draw vertical line",paraId:8,tocIndex:1},{value:"tick",paraId:8,tocIndex:1},{value:"Draw tick",paraId:8,tocIndex:1},{value:"Using sphere shape effect as shown below:",paraId:9,tocIndex:1},{value:"import { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\nimport { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\n\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ControlPlugin());\nrenderer.registerPlugin(new ThreeDPlugin());\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...threedlib(),\n});\n\n// Initialize chart instance\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  width: 500,\n  height: 500,\n  depth: 400,\n});\n\nchart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('color', 'Cylinders')\n  .encode('shape', 'sphere')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setPerspective(0.1, 5000, 45, 500 / 500);\n  camera.setType(CameraType.ORBITING);\n\n  // Add a directional light into scene.\n  const light = new DirectionalLight({\n    style: {\n      intensity: 3,\n      fill: 'white',\n      direction: [-1, 0, 1],\n    },\n  });\n  canvas.appendChild(light);\n});\n",paraId:10,tocIndex:1},{value:"When using 2D shapes, no light source is needed:",paraId:11,tocIndex:1},{value:"import { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\nimport { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\n\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ControlPlugin());\nrenderer.registerPlugin(new ThreeDPlugin());\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...threedlib(),\n});\n\n// Initialize chart instance\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  width: 500,\n  height: 500,\n  depth: 400,\n});\n\nchart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('color', 'Cylinders')\n  .encode('shape', 'triangle')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setPerspective(0.1, 5000, 45, 500 / 500);\n  camera.setType(CameraType.ORBITING);\n});\n",paraId:12,tocIndex:1},{value:"Property",paraId:13,tocIndex:2},{value:"Description",paraId:13,tocIndex:2},{value:"Type",paraId:13,tocIndex:2},{value:"Default Value",paraId:13,tocIndex:2},{value:"fill",paraId:13,tocIndex:2},{value:"Fill color of the shape",paraId:13,tocIndex:2},{value:"string",paraId:13,tocIndex:2},{value:" | ",paraId:13,tocIndex:2},{value:"Function<string>",paraId:13,tocIndex:2},{value:"-",paraId:13,tocIndex:2},{value:"opacity",paraId:13,tocIndex:2},{value:"Overall opacity of the shape",paraId:13,tocIndex:2},{value:"number",paraId:13,tocIndex:2},{value:" | ",paraId:13,tocIndex:2},{value:"Function<number>",paraId:13,tocIndex:2},{value:"-",paraId:13,tocIndex:2},{value:"cursor",paraId:13,tocIndex:2},{value:"Mouse cursor style. Same as CSS cursor, default 'default'.",paraId:13,tocIndex:2},{value:"string",paraId:13,tocIndex:2},{value:" | ",paraId:13,tocIndex:2},{value:"Function<string>",paraId:13,tocIndex:2},{value:"'default'",paraId:13,tocIndex:2},{value:"Other point3D shape configuration options are consistent with ",paraId:14,tocIndex:2},{value:"cube",paraId:14,tocIndex:2},{value:".",paraId:14,tocIndex:2},{value:"Property",paraId:15,tocIndex:3},{value:"Description",paraId:15,tocIndex:3},{value:"Type",paraId:15,tocIndex:3},{value:"Default Value",paraId:15,tocIndex:3},{value:"fill",paraId:15,tocIndex:3},{value:"Fill color of the shape",paraId:15,tocIndex:3},{value:"string",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<string>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"fillOpacity",paraId:15,tocIndex:3},{value:"Fill opacity of the shape",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"stroke",paraId:15,tocIndex:3},{value:"Stroke color of the shape",paraId:15,tocIndex:3},{value:"string",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<string>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"strokeOpacity",paraId:15,tocIndex:3},{value:"Stroke opacity",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"lineWidth",paraId:15,tocIndex:3},{value:"Width of the shape stroke",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"lineDash",paraId:15,tocIndex:3},{value:"Dashed line configuration for stroke. First value is the length of each dash segment, second value is the distance between segments. Setting lineDash to [0, 0] results in no stroke.",paraId:15,tocIndex:3},{value:"[number,number]",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<[number, number]>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"opacity",paraId:15,tocIndex:3},{value:"Overall opacity of the shape",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"shadowColor",paraId:15,tocIndex:3},{value:"Shadow color of the shape",paraId:15,tocIndex:3},{value:"string",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<string>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"shadowBlur",paraId:15,tocIndex:3},{value:"Gaussian blur coefficient for the shape shadow",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"shadowOffsetX",paraId:15,tocIndex:3},{value:"Horizontal distance of shadow from the shape",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"shadowOffsetY",paraId:15,tocIndex:3},{value:"Vertical distance of shadow from the shape",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"cursor",paraId:15,tocIndex:3},{value:"Mouse cursor style. Same as CSS cursor, default 'default'.",paraId:15,tocIndex:3},{value:"string",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<string>",paraId:15,tocIndex:3},{value:"'default'",paraId:15,tocIndex:3}]},53992:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(72334);const t=[{value:"Primarily used for drawing 3D surface charts.",paraId:0},{value:"First, you need to use ",paraId:1,tocIndex:0},{value:"@antv/g-webgl",paraId:1,tocIndex:0},{value:" as the renderer and register the following two plugins:",paraId:1,tocIndex:0},{value:"g-plugin-3d",paraId:2,tocIndex:0},{value:" provides geometry, materials, and lighting for 3D scenes",paraId:2,tocIndex:0},{value:"g-plugin-control",paraId:2,tocIndex:0},{value:" provides camera interaction for 3D scenes",paraId:2,tocIndex:0},{value:"Then set up the z channel, scale, and z-axis. No need to add light sources to the scene.",paraId:3,tocIndex:0},{value:"import { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\nimport { CameraType } from '@antv/g';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\n\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ControlPlugin());\nrenderer.registerPlugin(new ThreeDPlugin());\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...threedlib(),\n});\n\n// Initialize chart instance\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  width: 500,\n  height: 500,\n  depth: 400,\n});\n\n// We set the width/height to 100;\nconst size = 100;\nconst points = [];\nfor (let i = 0; i <= 2 * size; ++i) {\n  const theta = (Math.PI * (i - size)) / size;\n  for (let j = 0; j <= 2 * size; ++j) {\n    var phi = (Math.PI * (j - size)) / size;\n\n    const x = (10.0 + Math.cos(theta)) * Math.cos(phi);\n    const y = (10.0 + Math.cos(theta)) * Math.sin(phi);\n\n    points.push({\n      x: i,\n      y: j,\n      z: Math.sin(theta) * x * y,\n    });\n  }\n}\n\nchart\n  .surface3D()\n  .data(points)\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('z', 'z')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 1 })\n  .axis('y', { gridLineWidth: 1, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 1 });\n\nchart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera();\n  camera.setPerspective(0.1, 2000, 45, 500 / 500);\n  camera.rotate(30, 30, 0);\n  camera.dolly(60);\n  camera.setType(CameraType.ORBITING);\n});\n",paraId:4,tocIndex:0},{value:"For more examples, please visit the ",paraId:5,tocIndex:0},{value:"Examples",paraId:6,tocIndex:0},{value:" page.",paraId:5,tocIndex:0}]},96508:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(7795);const t=[{value:"G2 5.0, like version 4.0, provides a set of imperative Functional APIs to declare charts. For example, the simplest bar chart is declared as follows.",paraId:0},{value:"import { Chart } from '@antv/g2';\n\n// Initialize chart instance\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// Declare visualization\nchart\n  .interval() // Create an Interval tag\n  .data([\n    // Bind data\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre') // Encode x channel\n  .encode('y', 'sold'); // Encode y channel\n\n// Render visualization\nchart.render();\n",paraId:1},{value:"In addition to this functional style, G2 5.0 also provides a new API: Spec API. The API declares visualizations through a JavaScript object.",paraId:2},{value:"Currently we declare the visualization through ",paraId:3,tocIndex:0},{value:"chart.options(spec)",paraId:3,tocIndex:0},{value:", the following example can achieve the same effect as above.",paraId:3,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\n// Initialize chart instance\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// Declare visualization\nchart.options({\n  type: 'interval', // Create an Interval tag\n  data: [\n    // Bind data\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre', // Encode x channel\n    y: 'sold', // Encode y channel\n  },\n});\n\n// Render visualization\nchart.render();\n",paraId:4,tocIndex:0},{value:"It can be found that the initialization of the chart instance and the final rendering of the two APIs are the same, but the way of declaring the visualization in between is different. Next, let's take a brief look at the similarities and differences between the two methods.",paraId:5,tocIndex:1},{value:"The Functional API is implemented based on Spec API. In simple terms, each Chart instance has an options object. Functional API generates this options object through a series of methods, while Spec API directly sets this options object. No matter which form of API it is, G2 will directly render the current options in the end, so the ability of the two to declare visualization is completely equivalent.",paraId:6,tocIndex:1},{value:"In most scenarios, the two are more of a stylistic choice, but there are some differences:",paraId:7,tocIndex:1},{value:"Ease of use",paraId:8,tocIndex:1},{value:': Spec API is superior in terms of ease of use and is more friendly to beginners or users who do not need to understand G2 in depth. JavaScript objects, which are more structural expressions, are naturally easier to understand than function expressions. And it is often a whole, making it easier to copy, paste and "adjust parameters".',paraId:8,tocIndex:1},{value:"Flexibility",paraId:8,tocIndex:1},{value:": The Functional API excels in flexibility and is better suited for users familiar with functional programming and ",paraId:8,tocIndex:1},{value:"D3",paraId:8,tocIndex:1},{value:". However, its flexibility does not necessarily result in the ability to create more complex visualizations; it is more about the flexibility in how visualizations are declared. One advantage is that it is easier to organize focus points.",paraId:8,tocIndex:1},{value:"For example, if you want the bars in the bar graph above to appear one by one, you need to add an encode and transform. The first Spec API below looks a little clearer than the second Functional API, but the latter can put animation-related properties (the same focus) together, while the former cannot.",paraId:9,tocIndex:1},{value:"chart.options({\n  type: 'interval',\n  data,\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    enterDuration: 1000,\n  },\n  transform: [{ type: 'stackEnter' }],\n});\n",paraId:10,tocIndex:1},{value:"chart\n  .interval()\n  .data(data)\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  // These two are related to animation and can be put together.\n  .encode('enterDuration', 1000)\n  .transform({ type: 'stackEnter' });\n",paraId:11,tocIndex:1},{value:"Of course, Spec API is not only simple, it also has more application scenarios:",paraId:12,tocIndex:2},{value:"Smart Visualization",paraId:13,tocIndex:2},{value:": Recommendations and error corrections can be made based on Spec.",paraId:13,tocIndex:2},{value:"Higher-Level Abstraction",paraId:13,tocIndex:2},{value:": Transforming the Options corresponding to Spec is easier than direct invocation.",paraId:13,tocIndex:2},{value:"Low Code Construction",paraId:13,tocIndex:2},{value:": You can directly generate a configuration panel based on Spec and build a BI tool.",paraId:13,tocIndex:2},{value:"Chart Operations",paraId:13,tocIndex:2},{value:": Spec can also be regarded as a data structure. If it is a data structure, it can perform a series of operations, such as adding pictures, etc.",paraId:13,tocIndex:2},{value:"Server-Side Rendering",paraId:13,tocIndex:2},{value:": You can directly render the Options corresponding to Spec into images.",paraId:13,tocIndex:2},{value:"......",paraId:13,tocIndex:2},{value:"Later, G2 will make a series of tools based on this new set of APIs for everyone to use. If you have ideas, you can discuss and participate here ",paraId:14,tocIndex:2},{value:"Build together",paraId:14,tocIndex:2},{value:".",paraId:14,tocIndex:2},{value:"The following uses some cases to show you how to use Spec API.",paraId:15,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\n// Initialize chart instance\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// Declare visualization\nchart.options({\n  type: 'interval',\n  height: 640,\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/79fd9317-d2af-4bc4-90fa-9d07357398fd.csv',\n  },\n  transform: [{ type: 'stackY' }],\n  coordinate: { type: 'theta' },\n  scale: {\n    color: { palette: 'spectral', offset: (t) => t * 0.8 + 0.1 },\n  },\n  legend: false,\n  encode: { y: 'value', color: 'name' },\n  style: { stroke: 'white' },\n  labels: [\n    {\n      text: 'name',\n      radius: 0.8,\n      style: { fontSize: 10, fontWeight: 'bold' },\n    },\n    {\n      text: (d, i, data) => (i < data.length - 3 ? d.value : ''),\n      radius: 0.8,\n      style: { fontSize: 9, dy: 12 },\n    },\n  ],\n  animate: { enter: { type: 'waveIn', duration: 1000 } },\n});\n\n// Render visualization\nchart.render();\n",paraId:16,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\n// Initialize chart instance\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// Declare visualization\nchart.options({\n  type: 'spaceFlex',\n  width: 900,\n  data: {\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n  },\n  direction: 'col',\n  ratio: [1, 2],\n  children: [\n    {\n      type: 'interval',\n      paddingBottom: 0,\n      paddingRight: 300,\n      transform: [{ type: 'groupX', y: 'max' }],\n      axis: { x: false },\n      encode: {\n        x: (d) => new Date(d.date).getUTCDate(),\n        y: 'temp_max',\n        color: 'steelblue',\n      },\n    },\n    {\n      type: 'spaceFlex',\n      ratio: [2, 1],\n      children: [\n        {\n          type: 'cell',\n          paddingRight: 0,\n          paddingBottom: 50,\n          transform: [{ type: 'group', color: 'max' }],\n          encode: {\n            x: (d) => new Date(d.date).getUTCDate(),\n            y: (d) => new Date(d.date).getUTCMonth(),\n            color: 'temp_max',\n          },\n          style: { inset: 0.5 },\n          axis: {\n            x: { title: 'Date' },\n            y: { title: 'Month' },\n          },\n          scale: { color: { palette: 'gnBu' } },\n          legend: false,\n        },\n        {\n          type: 'interval',\n          paddingBottom: 50,\n          transform: [{ type: 'groupX', y: 'max' }],\n          coordinate: { transform: [{ type: 'transpose' }] },\n          axis: { x: false },\n          encode: {\n            x: (d) => new Date(d.date).getUTCMonth(),\n            y: 'temp_max',\n            color: 'steelblue',\n          },\n        },\n      ],\n    },\n  ],\n});\n\n// Render\nchart.render();\n",paraId:17,tocIndex:5}]},28463:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(13215);const t=[{value:"Here's a brief introduction to using G2 in various frontend frameworks. We'll implement the following bar chart update effect using different frameworks.",paraId:0},{value:"This effect is mainly achieved through the following two functions.",paraId:1},{value:"// Render bar chart\nfunction renderBarChart(container) {\n  const chart = new Chart({\n    container,\n  });\n\n  // Prepare data\n  const data = [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ];\n\n  // Declare visualization\n  chart\n    .interval() // Create an Interval mark\n    .data(data) // Bind data\n    .encode('x', 'genre') // Encode x channel\n    .encode('y', 'sold') // Encode y channel\n    .encode('key', 'genre') // Specify key\n    .animate('update', { duration: 300 }); // Specify update animation duration\n\n  // Render visualization\n  chart.render();\n\n  return chart;\n}\n",paraId:2},{value:"// Update bar chart data\nfunction updateBarChart(chart) {\n  // Get the Interval Mark\n  const interval = chart.getNodesByType('interval')[0];\n\n  // Simulate and update Interval data\n  const newData = interval.data().map((d) => ({\n    ...d,\n    sold: Math.random() * 400 + 100,\n  }));\n\n  interval.data(newData);\n\n  // Re-render\n  chart.render();\n}\n",paraId:3},{value:"Note that in frameworks, it's not recommended to use ",paraId:4},{value:"new Chart({ container: 'id' })",paraId:4},{value:" to specify the container. Instead, use the HTML element directly as the container: ",paraId:4},{value:"new Chart({ container: HTMLContainer })",paraId:4},{value:". This prevents issues with different components having the same ID, which could lead to unexpected rendering problems.",paraId:4},{value:"Next, let's see how to use these two functions in frameworks.",paraId:5},{value:"In Vue, first import the defined ",paraId:6,tocIndex:0},{value:"G2Demo",paraId:6,tocIndex:0},{value:" component.",paraId:6,tocIndex:0},{value:"\x3c!-- App.vue --\x3e\n<template>\n  <div id=\"app\">\n    <G2Demo />\n  </div>\n</template>\n\n<script>\n  import G2Demo from './components/G2Demo';\n\n  export default {\n    name: 'App',\n    components: {\n      G2Demo,\n    },\n  };\n<\/script>\n",paraId:7,tocIndex:0},{value:"If you're using ",paraId:8,tocIndex:1},{value:"Vue2",paraId:8,tocIndex:1},{value:" or ",paraId:8,tocIndex:1},{value:"Vue3",paraId:8,tocIndex:1},{value:" Options API, you can define the ",paraId:8,tocIndex:1},{value:"G2Demo",paraId:8,tocIndex:1},{value:" component as follows. For complete code, refer to ",paraId:8,tocIndex:1},{value:"here",paraId:8,tocIndex:1},{value:".",paraId:8,tocIndex:1},{value:"\x3c!-- components/G2Demo.vue --\x3e\n<template>\n  <div>\n    <div ref=\"container\"></div>\n    <button @click=\"onClick\">Update Data</button>\n  </div>\n</template>\n\n<script>\n  import { Chart } from '@antv/g2';\n\n  function renderBarChart(container) {\n    // As above\n  }\n\n  function updateBarChart(chart) {\n    // As above\n  }\n\n  export default {\n    name: 'G2Demo',\n    props: {},\n    mounted() {\n      // Save chart instance\n      this.chart = renderBarChart(this.$refs.container);\n    },\n    unmounted() {\n      // Clean up chart instance\n      this.chart.destroy();\n    },\n    methods: {\n      onClick() {\n        updateBarChart(this.chart);\n      },\n    },\n  };\n<\/script>\n",paraId:9,tocIndex:1},{value:"If you're using Vue3 Composition API, the implementation is as follows. For complete code, refer to ",paraId:10,tocIndex:2},{value:"here",paraId:10,tocIndex:2},{value:".",paraId:10,tocIndex:2},{value:"<script setup>\n  import { onMounted, onUnmounted, ref } from 'vue';\n  import { Chart } from '@antv/g2';\n\n  let chart;\n  const container = ref(null);\n\n  onMounted(() => {\n    chart = renderBarChart(container.value);\n  });\n\n  onUnmounted(() => {\n    chart.destroy();\n    chart = null;\n  });\n\n  function onClick() {\n    updateBarChart(chart);\n  }\n\n  function renderBarChart(container) {\n    // As above\n  }\n\n  function updateBarChart(chart) {\n    // As above\n  }\n<\/script>\n\n<template>\n  <div>\n    <div ref=\"container\"></div>\n    <button @click=\"onClick\">Update Data</button>\n  </div>\n</template>\n",paraId:11,tocIndex:2},{value:"In ",paraId:12,tocIndex:3},{value:"React",paraId:12,tocIndex:3},{value:", first import the defined ",paraId:12,tocIndex:3},{value:"G2Demo",paraId:12,tocIndex:3},{value:" component.",paraId:12,tocIndex:3},{value:"import './styles.css';\nimport G2Demo from './components/G2Demo';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <G2Demo />\n    </div>\n  );\n}\n",paraId:13,tocIndex:3},{value:"Next, define the ",paraId:14,tocIndex:3},{value:"G2Demo",paraId:14,tocIndex:3},{value:" component. For complete code, refer to ",paraId:14,tocIndex:3},{value:"here",paraId:14,tocIndex:3},{value:".",paraId:14,tocIndex:3},{value:"import { Chart } from '@antv/g2';\nimport { useEffect, useRef } from 'react';\n\nexport default function G2Demo() {\n  const container = useRef(null);\n  const chart = useRef(null);\n\n  useEffect(() => {\n    if (!chart.current) {\n      chart.current = renderBarChart(container.current);\n    }\n\n    return () => {\n      chart.current.destroy();\n      chart.current = null;\n    };\n  }, []);\n\n  function renderBarChart(container) {\n    // As above\n  }\n\n  function updateBarChart(chart) {\n    // As above\n  }\n\n  return (\n    <div className=\"App\">\n      <div ref={container}></div>\n      <button onClick={() => updateBarChart(chart.current)}>Update Data</button>\n    </div>\n  );\n}\n",paraId:15,tocIndex:3}]},71575:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(58482);const t=[{value:"G2",paraId:0},{value:" is a concise and progressive grammar primarily for creating web-based visualizations. It provides a set of functional-style, declarative APIs and a component-based programming paradigm, aiming to help users quickly accomplish diverse needs such as ",paraId:0},{value:"report building",paraId:0},{value:", ",paraId:0},{value:"data exploration",paraId:0},{value:", and ",paraId:0},{value:"storytelling",paraId:0},{value:".",paraId:0},{value:"This article will briefly introduce the core concepts of G2:",paraId:1},{value:"Mark",paraId:2},{value:": Draw data-driven graphics",paraId:2},{value:"Transform",paraId:2},{value:": Derive data",paraId:2},{value:"Scale",paraId:2},{value:": Map abstract data to visual data",paraId:2},{value:"Coordinate",paraId:2},{value:": Apply point transformations to spatial channels",paraId:2},{value:"Composition",paraId:2},{value:": Manage and enhance views",paraId:2},{value:"Animation",paraId:2},{value:": Data-driven animations and continuous morphing animations",paraId:2},{value:"Interaction",paraId:2},{value:": Manipulate views and display detailed information",paraId:2},{value:'"Talk is cheap, show me the code" - let\'s see what visualizations G2 can create based on the simple dataset below.',paraId:3},{value:"table({\n  url: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n});\n",paraId:4},{value:"In the G2 official documentation, specific code blocks will mount their returned DOM and display it on the webpage.",paraId:5},{value:"(() => {\n  const chart = new G2.Chart();\n  // ...\n  return chart.getContainer(); // Mount the chart container\n})();\n",paraId:6},{value:"This is the syntax for G2's specific runtime environment on the official website. For using G2 in actual projects, please refer to ",paraId:7},{value:"Quick Start",paraId:8},{value:".",paraId:7},{value:"Mark",paraId:9,tocIndex:0},{value:" is the smallest visual unit in G2, and all charts in G2 are composed of different marks.",paraId:9,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  })\n  .encode('x', 'weight')\n  .encode('y', 'height')\n  .encode('color', 'gender');\n\nchart.render();\n",paraId:10,tocIndex:0},{value:"Transform",paraId:11,tocIndex:1},{value:" changes the presentation of data and marks, mainly used for data analysis.",paraId:11,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .rect()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  })\n  .encode('x', 'height')\n  .encode('color', 'gender')\n  .transform({ type: 'binX', y: 'count' })\n  .transform({ type: 'stackY' })\n  .style('insetLeft', 1);\n\nchart.render();\n",paraId:12,tocIndex:1},{value:"Scale",paraId:13,tocIndex:2},{value:" controls the visual style of marks.",paraId:13,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .rect()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  })\n  .encode('x', 'height')\n  .encode('color', 'gender')\n  .transform({ type: 'binX', y: 'count' })\n  .transform({ type: 'stackY' })\n  .scale('color', { range: ['steelblue', 'orange'] })\n  .scale('y', { nice: true })\n  .style('insetLeft', 1);\n\nchart.render();\n",paraId:14,tocIndex:2},{value:"Coordinate",paraId:15,tocIndex:3},{value:" changes the display form of charts.",paraId:15,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .rect()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  })\n  .encode('x', 'height')\n  .encode('color', 'gender')\n  .transform({ type: 'binX', y: 'count' })\n  .transform({ type: 'stackY' })\n  .scale('color', { range: ['steelblue', 'orange'] })\n  .scale('y', { type: 'sqrt', nice: true })\n  .coordinate({ type: 'polar' })\n  .axis('y', { title: false })\n  .style('insetLeft', 1);\n\nchart.render();\n",paraId:16,tocIndex:3},{value:"Composition",paraId:17,tocIndex:4},{value:" is used to create multi-view charts.",paraId:17,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 60,\n});\n\nconst facet = chart\n  .facetRect()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  })\n  .encode('y', 'gender');\n\nfacet\n  .rect()\n  .encode('x', 'height')\n  .encode('color', 'gender')\n  .transform({ type: 'binX', y: 'count' })\n  .transform({ type: 'stackY' })\n  .scale('y', { nice: true })\n  .attr('frame', false)\n  .style('insetLeft', 1);\n\nchart.render();\n",paraId:18,tocIndex:4},{value:"Animation",paraId:19,tocIndex:5},{value:" supports group animations and keyframe animations. You can click the run button on the left to see the effect.",paraId:19,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .rect()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  })\n  .encode('x', 'height')\n  .encode('color', 'gender')\n  .encode('enterDuration', 1000)\n  .transform({ type: 'stackEnter', groupBy: ['color'] })\n  .transform({ type: 'binX', y: 'count' })\n  .transform({ type: 'stackY' })\n  .style('insetLeft', 1);\n\nchart.render();\n",paraId:20,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/fbe4a8c1-ce04-4ba3-912a-0b26d6965333.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const chart = new Chart({\n      container: 'container',\n      paddingTop: 60,\n      paddingLeft: 100,\n    });\n\n    const keyframe = chart\n      .timingKeyframe()\n      .attr('direction', 'alternate')\n      .attr('iterationCount', 4);\n\n    keyframe\n      .interval()\n      .attr('padding', 'auto')\n      .data(data)\n      .encode('x', 'gender')\n      .encode('color', 'gender')\n      .encode('key', 'gender')\n      .transform({ type: 'groupX', y: 'count' });\n\n    keyframe\n      .point()\n      .attr('padding', 'auto')\n      .data(data)\n      .encode('x', 'weight')\n      .encode('y', 'height')\n      .encode('color', 'gender')\n      .encode('groupKey', 'gender')\n      .encode('shape', 'point');\n\n    chart.render();\n  });\n",paraId:21,tocIndex:5},{value:"Interaction allows for on-demand data exploration.",paraId:22,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  })\n  .encode('x', 'weight')\n  .encode('y', 'height')\n  .encode('color', 'gender')\n  .encode('shape', 'point')\n  .style({\n    fillOpacity: 0.7,\n    transform: 'scale(1, 1)',\n    transformOrigin: 'center center',\n  })\n  .state('inactive', {\n    fill: 'black',\n    fillOpacity: 0.5,\n    transform: 'scale(0.5, 0.5)',\n  })\n  .interaction('brushXHighlight', true);\n\nchart.render();\n",paraId:23,tocIndex:6},{value:"Because G2's marks are composable and provide ",paraId:24,tocIndex:7},{value:"composite mark",paraId:24,tocIndex:7},{value:" mechanisms to extend G2, you can basically quickly draw any visualization. On the ",paraId:24,tocIndex:7},{value:"examples page",paraId:25,tocIndex:7},{value:", you can get more inspiration and learn about G2's full capabilities through the documentation.",paraId:24,tocIndex:7}]},60778:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(35227);const t=[{value:"There are currently two ways to use G2:",paraId:0},{value:"Package manager",paraId:1},{value:"CDN",paraId:1},{value:"If you use Node-based packaging tools such as Webpack and Rollup, you can install G2 through package managers such as NPM or Yarn.",paraId:2,tocIndex:0},{value:"# Install via NPM\nnpm install @antv/g2\n",paraId:3,tocIndex:0},{value:"# Install via Yarn\nyarn add @antv/g2\n",paraId:4,tocIndex:0},{value:"After successful installation, provide a container for G2:",paraId:5,tocIndex:0},{value:'<div id="container"></div>\n',paraId:6,tocIndex:0},{value:"Then enter the following code:",paraId:7,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\n// Prepare data\nconst data = [\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\n// Initialize chart instance\nconst chart = new Chart({\n  container: 'container',\n});\n\n// Declare visualization\nchart\n  .interval() // Create an Interval mark\n  .data(data) // Bind data\n  .encode('x', 'genre') // Encode x channel\n  .encode('y', 'sold'); // Encode y channel\n\n// Render visualization\nchart.render();\n",paraId:8,tocIndex:0},{value:"G2 also provides a UMD version, which can be loaded directly through CDN and used directly. At this time, the ",paraId:9,tocIndex:1},{value:"Chart",paraId:9,tocIndex:1},{value:" object can be accessed through the namespace ",paraId:9,tocIndex:1},{value:"G2",paraId:9,tocIndex:1},{value:".",paraId:9,tocIndex:1},{value:"<script src=\"https://unpkg.com/@antv/g2/dist/g2.min.js\"><\/script>\n<script>\n  // Prepare data\n  const data = [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ];\n\n  // Initialize chart instance\n  const chart = new G2.Chart({\n    container: 'container',\n  });\n\n  // Declare visualization\n  chart\n    .interval() // Create an Interval mark\n    .data(data) // Bind data\n    .encode('x', 'genre') // Encode x channel\n    .encode('y', 'sold'); // Encode y channel\n\n  // Render visualization\n  chart.render();\n<\/script>\n",paraId:10,tocIndex:1},{value:"No matter which method you use, if you draw a bar chart like the following, it means that everything is going well and the journey of exploring visualization and G2 has officially begun.",paraId:11,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\n// Initialize chart instance\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data([\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold');\n\nchart.render();\n",paraId:12,tocIndex:2}]},5987:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(80351);const t=[{value:"The G2 stack team will continue to maintain the v4 version and release patch version fixes for bugs, but will no longer receive new Feature Requests until the end of 2023. The original v4 official website has been migrated to ",paraId:0},{value:"https://g2-v4.antv.vision/",paraId:0},{value:".",paraId:0},{value:"This article aims to help users already familiar with G24.0 understand the differences between versions 4.0 and 5.0. Readers can choose to read the new document directly instead of reading this article from beginning to end. This article will highlight the changes in the corresponding API for various concepts between the two versions.",paraId:1},{value:"In 4.0, the padding and appendPadding are an array, 5.0 splits it and modifies appendPadding to margin.",paraId:2,tocIndex:0},{value:"// 4.0\nconst chart = new Chart({\n  width: 600,\n  height: 400,\n  padding: [10, 20, 30, 40],\n  appendPadding: [10, 20, 30, 40],\n});\n\n// 5.0\nconst chart = new Chart({\n  width: 600,\n  height: 400,\n  paddingLeft: 10,\n  paddingTop: 20,\n  paddingRight: 30,\n  paddingBottom: 40,\n  marginLeft: 10,\n  marginTop: 20,\n  marginRight: 30,\n  marginBottom: 40,\n});\n",paraId:3,tocIndex:0},{value:"In 4.0, each view is bound to a single set of data, and the marks (visual elements) within that view share the same data. In 5.0 all markers in each view can have independent data, and scales are synchronized by default.",paraId:4,tocIndex:1},{value:"// 4.0\nchart.data(data);\nchart.line();\nchart.point();\n\n// 5.0\nchart.line().data(data1);\nchart.line().data(data2);\n",paraId:5,tocIndex:1},{value:"5.0 has the following differences from 4.0 in encoding methods:",paraId:6,tocIndex:2},{value:"4.0 uses top-level APIs such as ",paraId:7,tocIndex:3},{value:"geometry.position",paraId:7,tocIndex:3},{value:" and ",paraId:7,tocIndex:3},{value:"geometry.color",paraId:7,tocIndex:3},{value:" to encode channels. 5.0 uses ",paraId:7,tocIndex:3},{value:"mark.encode",paraId:7,tocIndex:3},{value:" to encode and does not support the * syntax.",paraId:7,tocIndex:3},{value:"// 4.0\nchart.interval().position('name*value').color('genre');\n\n// 5.0\nchart\n  .interval()\n  .encode('x', 'name')\n  .encode('y', 'value')\n  .encode('color', 'genre');\n",paraId:8,tocIndex:3},{value:"The callback of encode in 4.0 will provide the corresponding fields from the original data. In 5.0, the callback of encode only provide raw data.",paraId:9,tocIndex:4},{value:"// 4.0\nchart.interval().color('name*value', (name, value) => {});\n\n// 5.0\nchart\n  .interval()\n  // Need to deconstruct by yourself\n  .encode('color', ({ name, value }) => {});\n",paraId:10,tocIndex:4},{value:"In 4.0, the callbacks return visual data. In 5.0, the callbacks return abstract data by default.",paraId:11,tocIndex:5},{value:"// 4.0\nchart.interval().color('name', (name) => (name > 10 ? 'red' : 'yellow'));\n\n// 5.0\nchart\n  .interval()\n  .encode('color', (d) => (d.name > 10 ? 'high' : 'low')) // Abstract data\n  .scale('color', { range: ['red', 'yellow'] }); // Specify the domain\n\n// 5.0\nchart\n  .interval()\n  .encode('color', (d) => (d.name > 10 ? 'red' : 'yellow'))\n  .scale('color', { type: 'identity' });\n",paraId:12,tocIndex:5},{value:"4.0 declares the color domain via the second parameter of ",paraId:13,tocIndex:6},{value:"geometry.color",paraId:13,tocIndex:6},{value:", and 5.0 specifies via ",paraId:13,tocIndex:6},{value:"scale.color",paraId:13,tocIndex:6},{value:".",paraId:13,tocIndex:6},{value:"// 4.0\nchart.interval().color('name', ['red', 'blue']);\nchart.interval().color('name', '#fff-#000');\n\n// 5.0\nchart\n  .interval()\n  .encode('color', 'name') // Discrete\n  .scale('color', { range: ['red', 'blue'] });\n\nchart\n  .interval()\n  .encode('color', 'name') // Continuous\n  .scale('color', { range: '#fff-#000' });\n",paraId:14,tocIndex:6},{value:"In 4.0, it will try to parse the time string, but 5.0 will not try to parse it and you need to explicitly convert them into Date objects.",paraId:15,tocIndex:7},{value:"const data = [\n  { year: '2020-10-01', value: 1 },\n  { year: '2022-10-01', value: 2 },\n  { year: '2023-10-01', value: 3 },\n];\n\n// 4.0\nchart.line().position('year*value');\n\n// 5.0\nchart\n  .line()\n  .encode('x', (d) => new Date(d.year))\n  .encode('y', 'value');\n",paraId:16,tocIndex:7},{value:"In 4.0, the style callback applies to the entire object. In 5.0, it applies to each individual property.",paraId:17,tocIndex:8},{value:"// 4.0\nchart\n  .interval()\n  .style('a*b', (a, b) =>\n    a + b > 10\n      ? { stroke: 'red', strokeWidth: 10 }\n      : { stroke: 'black', strokeWidth: 5 },\n  );\n\n// 5.0\nchart\n  .interval()\n  .style('stroke', ({ a, b }) => (a + b > 10 ? 'red' : 'black'))\n  .style('strokeWidth', ({ a, b }) => (a + b > 10 ? 10 : 5));\n",paraId:18,tocIndex:8},{value:"5.0 has the following series of differences from 4.0 when using a scale:",paraId:19,tocIndex:9},{value:"The 4.0 scale is bound to the field, and the 5.0 scale is bound to the channel.",paraId:20,tocIndex:10},{value:"const data = [\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\n// 4.0\nchart.data(data);\nchart.scale('genre', {});\nchart.interval().color('genre');\n\n// 5.0\nchart\n  .interval()\n  .data(data)\n  .encode('color', 'genre')\n  // Set the color channel scale\n  .scale('color', {});\n",paraId:21,tocIndex:10},{value:"Some properties of the scale have changed as follows:",paraId:22,tocIndex:11},{value:"Domain: values ​​-> domain",paraId:23,tocIndex:11},{value:"Minimum value of domain: min -> domainMin",paraId:23,tocIndex:11},{value:"Maximum value of domain: max -> domainMax",paraId:23,tocIndex:11},{value:"// 4.0\nchart.scale('genre', { values: ['a', 'b', 'c'] });\n\n// 5.0\nchart.scale('color', { domain: ['a', 'b', 'c'] });\n",paraId:24,tocIndex:11},{value:"In 4.0, the discrete scales are ",paraId:25,tocIndex:12},{value:"cat",paraId:25,tocIndex:12},{value:" and ",paraId:25,tocIndex:12},{value:"timeCat",paraId:25,tocIndex:12},{value:". In 5.0, cat becomes ",paraId:25,tocIndex:12},{value:"band",paraId:25,tocIndex:12},{value:", ",paraId:25,tocIndex:12},{value:"point",paraId:25,tocIndex:12},{value:" and ",paraId:25,tocIndex:12},{value:"ordinal",paraId:25,tocIndex:12},{value:" scales, and ",paraId:25,tocIndex:12},{value:"timeCat",paraId:25,tocIndex:12},{value:" is removed.",paraId:25,tocIndex:12},{value:"// 4.0\nchart.scale('genre', { type: 'cat' });\n\n// 5.0\nchart\n  .interval()\n  .encode('x', 'name')\n  .encode('color', 'name')\n  // The x channel of interval defaults to band scale\n  .scale('x', { type: 'band', range: [0.1, 0.9] })\n  .scale('color', { type: 'ordinal', range: ['red', 'blue'] });\n\nchart\n  .point()\n  .encode('x', 'name')\n  // Point scale\n  .scale('point', {});\n",paraId:26,tocIndex:12},{value:"In 4.0, coordinate system properties are specified in the ",paraId:27,tocIndex:13},{value:"cfg",paraId:27,tocIndex:13},{value:" with coordinate transformations defined through ",paraId:27,tocIndex:13},{value:"actions",paraId:27,tocIndex:13},{value:". In 5.0, coordinate system properties are flattened and coordinate transformations are declared through ",paraId:27,tocIndex:13},{value:"transform",paraId:27,tocIndex:13},{value:".",paraId:27,tocIndex:13},{value:"// 4.0\nchart.coordinate({\n  type: 'polar',\n  cfg: {\n    radius: 0.85,\n  },\n  actions: [['transpose']],\n});\n\n// 5.0\nchart.coordinate({\n  type: 'polar',\n  outerRadius: 0.85,\n  transform: [{ type: 'transpose' }],\n});\n",paraId:28,tocIndex:13},{value:"In 4.0, each element can only declare one tag, and in 5.0 each element can declare multiple tags.",paraId:29,tocIndex:14},{value:"// 4.0\nchart.interval().label('field', (d) =>\n  d > 10\n    ? 'red'\n    : 'blue'\n    ? {\n        style: { color: 'red', stroke: 'red' },\n      }\n    : {\n        style: { color: 'black', stroke: 'black' },\n      },\n);\n\n// 5.0\nchart\n  .interval()\n  .label({\n    text: 'field', // Specify content\n    style: {\n      color: d > 10 ? 'red' : 'black', // Set properties\n      stroke: d > 10 ? 'red' : 'black',\n    },\n  })\n  .label({ text: (d) => d.value });\n",paraId:30,tocIndex:14},{value:"In 4.0, you can customize the prompt information through ",paraId:31,tocIndex:15},{value:"tooltip.containerTpl",paraId:31,tocIndex:15},{value:", and in 5.0, you can customize the prompt information through the render function.",paraId:31,tocIndex:15},{value:"// 4.0\nchart.tooltip({ containerTpl: `<div></div>` });\n\n// 5.0\nchart.interaction('tooltip', {\n  render: () => `<div></div>`,\n});\n",paraId:32,tocIndex:15},{value:"There is the appear animation in 4.0, and in version 5.0, it has been merged into the enter animation.",paraId:33,tocIndex:16},{value:"// 4.0\nchart.interval().animate({\n  appear: {\n    animation: 'fade-in',\n    easing: 'easeQuadIn',\n    delay: 100,\n    duration: 600,\n  },\n});\n\n// 5.0\nchart.interval().animate('enter', {\n  type: 'fadeIn',\n  easing: 'easeQuadIn',\n  delay: 100,\n  duration: 600,\n});\n",paraId:34,tocIndex:16},{value:"In 4.0, using ",paraId:35,tocIndex:17},{value:"chart.removeInteraction(name)",paraId:35,tocIndex:17},{value:" can remove the interactions. In 5.0, using ",paraId:35,tocIndex:17},{value:"chart.interaction(name, false)",paraId:35,tocIndex:17},{value:" to remove interaction.",paraId:35,tocIndex:17},{value:"// 4.0\nchart.removeInteraction('tooltip');\n\n// 5.0\nchart.interaction('tooltip', false);\n",paraId:36,tocIndex:17},{value:"In 4.0, the elements in the diagram are divided into geometry elements (Geometry) and annotations (Annotation). In 5.0, both are annotations (Marks).",paraId:37,tocIndex:18},{value:"In 4.0, annotations are declared through the annotation namespace, and the declaration method in 5.0 is consistent with marks.",paraId:38,tocIndex:19},{value:"// 4.0\nchart.annotation().line({});\n\n// 5.0\nchart.lineX();\n",paraId:39,tocIndex:19},{value:"In 4.0, start and end are used to mark specific values, and in 5.0, transform is used to mark specific values.",paraId:40,tocIndex:20},{value:"// 4.0\nchart.annotation().line({\n  start: ['min', 'mean'],\n  end: ['max', 'mean'],\n});\n\n// 5.0\nchart\n  .lineX()\n  .encode('y', 'value')\n  // Select the minimum value of the y channel\n  .transform({ type: 'selectY', y: 'mean' });\n",paraId:41,tocIndex:20},{value:"In 4.0, facets are declared through the facet namespace, and 5.0 facets are consistent with marks.",paraId:42,tocIndex:21},{value:"// 4.0\nchart.facet('rect', {\n  fields: ['cut', 'clarity'],\n  eachView(view) {\n    view\n      .point()\n      .position('carat*price')\n      .color('cut')\n      .shape('circle')\n      .style({ fillOpacity: 0.3, stroke: null })\n      .size(3);\n  },\n});\n\n// 5.0\nchart\n  .facetRect()\n  .encode('x', 'cut')\n  .encode('y', 'clarity')\n  .point()\n  .encode('x', 'carat')\n  .encode('y', 'price')\n  .encode('color', 'cut')\n  .encode('shape', 'point')\n  .encode('size', 3)\n  .style('fillOpacity', 0.3)\n  .style('stroke', null);\n",paraId:43,tocIndex:21}]},84350:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});n(93926);const t=[{value:'The name and design philosophy of G2 both derive from the Grammar of Graphics book "',paraId:0},{value:"The Grammar of Graphics",paraId:0},{value:'". The core of this theory is: reject chart classification, and use some basic marks and a series of visualization components (scales, coordinate systems, etc.) to describe a visualization.',paraId:0},{value:'Because of this, compared to low-level visualization tools like D3, G2 has lower usage and learning costs, helping to improve development efficiency. Compared to chart template libraries, G2 can create a richer variety of charts, and also changes how G2 users think about charts: charts are no longer an indivisible whole, but can be composed of marks with different purposes. This allows users to spend less time writing code or worrying about whether charts can be implemented, and instead spend more time on "visual thinking in the data world".',paraId:1},{value:"Of course, drawing more charts more easily is just our basic task. We hope to convey correct visualization thinking to everyone in this process. Language is the most direct way to convey thinking, so we pay great attention to simplicity and professionalism when designing syntax or APIs. For this reason, we have referenced a large number of academic research results and industrial best practices. Based on the original Grammar of Graphics, we have made enhancements including but not limited to the following aspects:",paraId:2},{value:"Simplified syntax for data exploration",paraId:3},{value:"Added animation syntax",paraId:3},{value:"Added unit visualization syntax",paraId:3},{value:"Added interaction syntax (still in design)",paraId:3},{value:"...",paraId:3},{value:"Simply put: ",paraId:4},{value:"Using G2, you can not only quickly obtain more professional visualization effects, but also cultivate and improve your visualization thinking ability",paraId:4},{value:".",paraId:4},{value:"You can draw a chart with one sentence. In addition to drawing the graphics themselves, it will also add coordinate axis, legends, and even interactive tooltips!",paraId:5,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// Declare visualization in one sentence\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  })\n  .encode('x', 'weight')\n  .encode('y', 'height')\n  .encode('color', 'gender');\n\nchart.render();\n",paraId:6,tocIndex:0},{value:"G2's conciseness comes from its built-in ",paraId:7,tocIndex:0},{value:"default values",paraId:7,tocIndex:0},{value:": you only need to provide the mark type, data, and encoding method, and G2 will automatically infer other parameters for you. It's worth mentioning that one of G2's great advantages is that these default settings can all be adjusted as needed. We hope that G2 can be beautiful and insightful by default, while also allowing you to optimize chart display based on specific scenarios and professional knowledge.",paraId:7,tocIndex:0},{value:"Let's see the following example. Does optimizing axis tick display make the chart more readable? Is changing to the following colors more to your liking?",paraId:8,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  })\n  .encode('x', 'weight')\n  .encode('y', 'height')\n  .encode('color', 'gender')\n  .scale('x', { nice: true }) // Optimize coordinate tick display\n  .scale('y', { nice: true }) // Optimize coordinate tick display\n  .scale('color', { range: ['steelblue', 'orange'] }); // Change colors\n\nchart.render();\n",paraId:9,tocIndex:0},{value:"You might think scatter plots are too simple, so let's see how G2 draws a Sankey diagram with one sentence!",paraId:10,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 900,\n  height: 600,\n});\n\n// Sankey mark\nchart\n  .sankey()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/energy.json',\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => ({ links: data }),\n      },\n    ],\n  })\n  .layout({\n    nodeAlign: 'center',\n    nodePadding: 0.03,\n  })\n  .style('labelSpacing', 3)\n  .style('labelFontWeight', 'bold')\n  .style('nodeStrokeWidth', 1.2)\n  .style('linkFillOpacity', 0.4);\n\nchart.render();\n",paraId:11,tocIndex:0},{value:"G2 can draw rich chart types. In addition to supporting basic line charts, bar charts, pie charts and other charts, it also supports slightly more complex charts such as vector fields and parallel coordinate systems, such as the link chart below:",paraId:12,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .link()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antfincdn/SM13%24lHuYH/metros.json',\n  })\n  .encode('x', ['POP_1980', 'POP_2015'])\n  .encode('y', ['R90_10_1980', 'R90_10_2015'])\n  .encode('color', (d) => d.R90_10_2015 - d.R90_10_1980)\n  .scale('x', { type: 'log' })\n  .style('arrow', true)\n  .style('arrowSize', 6)\n  .axis('x', { labelFormatter: '~s' })\n  .tooltip({ title: { channel: 'color', valueFormatter: '.1f' } })\n  .legend(false);\n\nchart.render();\n",paraId:13,tocIndex:1},{value:"The most wonderful thing about G2 is: you can ",paraId:14,tocIndex:1},{value:"combine",paraId:14,tocIndex:1},{value:" different charts (more accurately called marks) to get ",paraId:14,tocIndex:1},{value:"brand new charts",paraId:14,tocIndex:1},{value:"! For example, we add both Point marks from scatter plots and Link marks from link charts to a chart, and we can get an annotated point-line connection chart.",paraId:14,tocIndex:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 180,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n  transform: [\n    {\n      type: 'map',\n      callback: (d) => ({ ...d, body_mass_g: +d.body_mass_g }),\n    },\n  ],\n});\n\n// Point mark\nchart\n  .point()\n  .encode('x', 'body_mass_g')\n  .encode('y', 'species')\n  .style('stroke', '#000')\n  .tooltip({ channel: 'x' });\n\n// Link mark\nchart\n  .link()\n  .encode('x', 'body_mass_g')\n  .encode('y', 'species')\n  .transform({ type: 'groupY', x: 'min', x1: 'max' })\n  .style('stroke', '#000')\n  .tooltip(false);\n\n// Point mark draws median line\nchart\n  .point()\n  .encode('y', 'species')\n  .encode('x', 'body_mass_g')\n  .encode('shape', 'line')\n  .encode('size', 12)\n  .transform({ type: 'groupY', x: 'median' })\n  .style('stroke', 'red')\n  .tooltip({ channel: 'x' });\n\nchart.render();\n",paraId:15,tocIndex:1},{value:"In the data visualization workflow, data processing often takes up a lot of time and also requires a certain learning cost. To simplify this process, shorten data preprocessing time, and standardize common data analysis capabilities, G2 provides a series of ",paraId:16,tocIndex:2},{value:"transforms",paraId:16,tocIndex:2},{value:" for aggregating and generating new data.",paraId:16,tocIndex:2},{value:"Let's see how to visualize the weight distribution of athletes after obtaining raw athlete weight data through data transformation:",paraId:17,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .rect()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n  })\n  .encode('x', 'weight')\n  .transform({ type: 'binX', y: 'count' })\n  .style('inset', 0.5);\n\nchart.render();\n",paraId:18,tocIndex:2},{value:"Want to split the chart by gender?",paraId:19,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .rect()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n  })\n  .encode('x', 'weight')\n  .encode('color', 'sex') // Add color encoding\n  .transform({ type: 'binX', y: 'count' })\n  .transform({ type: 'stackY', orderBy: 'series' })\n  .style('inset', 0.5);\n\nchart.render();\n",paraId:20,tocIndex:2},{value:"Want to see the distribution of each gender separately through faceting?",paraId:21,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 50,\n  paddingBottom: 50,\n});\n\nconst facet = chart.facetRect().encode('y', 'sex').data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n});\n\nfacet\n  .rect()\n  .encode('x', 'weight')\n  .transform({ type: 'binX', y: 'count' })\n  .style('inset', 0.5);\n\nchart.render();\n",paraId:22,tocIndex:2},{value:"G2 can create data-driven animations to achieve visualization storytelling effects. First, all animation properties (animation type, delay and duration) can be bound to data, such as the data-driven Gantt chart animation below. You can click the run button on the left to see the effect.",paraId:23,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .coordinate({ transform: [{ type: 'transpose' }] })\n  .data([\n    { name: 'event planning', startTime: 1, endTime: 4 },\n    { name: 'layout logistics', startTime: 3, endTime: 13 },\n    { name: 'select vendors', startTime: 5, endTime: 8 },\n    { name: 'hire venue', startTime: 9, endTime: 13 },\n    { name: 'hire caterer', startTime: 10, endTime: 14 },\n    { name: 'hire event decorators', startTime: 12, endTime: 17 },\n    { name: 'rehearsal', startTime: 14, endTime: 16 },\n    { name: 'event celebration', startTime: 17, endTime: 18 },\n  ])\n  .encode('x', 'name')\n  .encode('y', ['endTime', 'startTime'])\n  .encode('color', 'name')\n  .encode('enterDuration', (d) => d.endTime - d.startTime) // Animation duration bound to durationTime\n  .encode('enterDelay', 'startTime') // Appearance time bound to startTime\n  .scale('enterDuration', { zero: true, range: [0, 3000] }); // Define scale for enterDuration channel, scale determines how these channels should be visualized\n\nchart.render();\n",paraId:24,tocIndex:3},{value:'At the same time, animation channels can be transformed to control the appearance order and timing of data elements. For example, in the rose chart below, each "petal" appears in sequence according to color and order, thanks to the built-in transforms provided by G2. For specific usage, see ',paraId:25,tocIndex:3},{value:"stackEnter",paraId:26,tocIndex:3},{value:".",paraId:25,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .coordinate({ type: 'polar' })\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/deaths.json',\n  })\n  .encode('x', 'Month')\n  .encode('y', 'Death')\n  .encode('color', 'Type')\n  .transform({ type: 'stackY' })\n  // Appear in sequence\n  .transform({ type: 'stackEnter', groupBy: ['color', 'x'], duration: 3000 }) // Try changing groupBy and duration to see what happens\n  .scale('y', { type: 'sqrt' })\n  .animate('enter', { type: 'waveIn' })\n  .axis('y', false);\n\nchart.render();\n",paraId:27,tocIndex:3},{value:"In addition to implementing animation effects within a single view, you can also create continuous morphing animations between different views: graphics are linked together through data association, such as the transition animation between scatter plots and aggregated bar charts below:",paraId:28,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/fbe4a8c1-ce04-4ba3-912a-0b26d6965333.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const chart = new Chart({\n      container: 'container',\n      paddingTop: 60,\n      paddingLeft: 100,\n    });\n\n    // Keyframe container, applies transition animations to views inside\n    const keyframe = chart\n      .timingKeyframe()\n      .attr('direction', 'alternate')\n      .attr('iterationCount', 4);\n\n    // First view: scatter plot\n    keyframe\n      .interval()\n      .attr('padding', 'auto')\n      .data(data)\n      .encode('x', 'gender')\n      .encode('color', 'gender')\n      .encode('key', 'gender')\n      .transform({ type: 'groupX', y: 'count' });\n\n    // Second view: aggregated bar chart\n    keyframe\n      .point()\n      .attr('padding', 'auto')\n      .data(data)\n      .encode('x', 'weight')\n      .encode('y', 'height')\n      .encode('color', 'gender')\n      .encode('groupKey', 'gender')\n      .encode('shape', 'point');\n\n    chart.render();\n  });\n",paraId:29,tocIndex:3},{value:"In addition to providing rich built-in interactions, G2 also provides the ability to link different views through ",paraId:30,tocIndex:4},{value:"chart.on",paraId:30,tocIndex:4},{value:" and ",paraId:30,tocIndex:4},{value:"chart.emit",paraId:30,tocIndex:4},{value:', such as the "Focus and Context" capability shown below:',paraId:30,tocIndex:4},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n});\nconst container = chart.getContainer();\nconst focusContainer = document.createElement('div');\nconst contextContainer = document.createElement('div');\ncontainer.append(focusContainer);\ncontainer.append(contextContainer);\n\n// Render focus view\n\nconst focus = new G2.Chart({\n  container: focusContainer,\n  height: 360,\n  paddingLeft: 50,\n});\n\nfocus\n  .area()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  })\n  .encode('x', 'date')\n  .encode('y', 'close')\n  .animate(false)\n  .axis('x', { grid: false, title: false, tickCount: 5 })\n  .axis('y', { grid: false, tickCount: 5 })\n  .interaction('tooltip', false)\n  .interaction('brushXFilter', true);\n\nfocus.render();\n\n// Render context view\n\nconst context = new G2.Chart({\n  container: contextContainer,\n  paddingLeft: 50,\n  paddingTop: 0,\n  paddingBottom: 0,\n  height: 60,\n});\n\ncontext\n  .area()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  })\n  .encode('x', 'date')\n  .encode('y', 'close')\n  .animate(false)\n  .axis(false)\n  .interaction('tooltip', false)\n  .interaction('brushXHighlight', { series: true });\n\ncontext.render();\n\n// Add event listeners to communicate between different charts\nfocus.on('brush:filter', (e) => {\n  const { nativeEvent } = e;\n  if (!nativeEvent) return;\n  const { selection } = e.data;\n  const { x: scaleX } = focus.getScale();\n  const [[x1, x2]] = selection;\n  const domainX = scaleX.getOptions().domain;\n  if (x1 === domainX[0] && x2 === domainX[1]) {\n    context.emit('brush:remove', {});\n  } else {\n    context.emit('brush:highlight', { data: { selection } });\n  }\n});\n\ncontext.on('brush:highlight', (e) => {\n  const { nativeEvent, data } = e;\n  if (!nativeEvent) return;\n  const { selection } = data;\n  focus.emit('brush:filter', { data: { selection } });\n});\n\ncontext.on('brush:remove', (e) => {\n  const { nativeEvent } = e;\n  if (!nativeEvent) return;\n  const { x: scaleX, y: scaleY } = context.getScale();\n  const selection = [scaleX.getOptions().domain, scaleY.getOptions().domain];\n  focus.emit('brush:filter', { data: { selection } });\n});\n",paraId:31,tocIndex:4},{value:"G2 provides two styles of APIs: ",paraId:32,tocIndex:5},{value:"Functional API",paraId:32,tocIndex:5},{value:" and ",paraId:32,tocIndex:5},{value:"Options API",paraId:32,tocIndex:5},{value:". The former declares charts through a series of chained function calls, while the latter declares charts through a JavaScript object. For example, the scatter plot in ",paraId:32,tocIndex:5},{value:"Concise Syntax",paraId:33,tocIndex:5},{value:" can be declared using the Options API as follows:",paraId:32,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// Declare chart through Options API\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  },\n  encode: {\n    x: 'weight',\n    y: 'height',\n    color: 'gender',\n  },\n});\n\nchart.render();\n",paraId:34,tocIndex:5},{value:"You can see that the two produce identical charts! In fact, this is true: the visualization expression capabilities of both APIs are the same. In other words, charts that can be drawn with the Functional API can also be drawn with the Options API, and vice versa. From an implementation perspective, the Functional API is built on top of the Options API and is converted to corresponding JavaScript before rendering.",paraId:35,tocIndex:5},{value:"The choice between the two is more a matter of style: if you are familiar with D3, or prefer functional programming, or are an old G2 user, you can choose the Functional API; if you are just starting to use G2 and getting into visualization, then the Options API is recommended. Of course, if you are building your own chart library based on G2, then the Options API is recommended. However, there is one best practice: use the Options API when initializing charts, and use the Functional API when updating charts.",paraId:36,tocIndex:5},{value:"For more content, please read ",paraId:37,tocIndex:5},{value:"Spec and API",paraId:38,tocIndex:5},{value:".",paraId:37,tocIndex:5},{value:"const { Chart } = G2;\nconst chart = new Chart({\n  container: 'container',\n  height: 150,\n  padding: 10,\n});\nconst container = chart.getContainer();\n\nconst mock = () => Array.from({ length: 20 }, () => Math.random());\n\n// Initialize chart\n// Use Options API\nchart.options({\n  type: 'interval',\n  data: mock(),\n  encode: { x: (_, i) => i, y: (d) => d, key: (_, i) => i },\n  axis: false,\n  tooltip: {\n    items: [{ channel: 'y', valueFormatter: '.0%' }],\n  },\n});\n\nchart.render();\n\n// Update chart\n// Use Functional API\nconst button = document.createElement('button');\nbutton.style.display = 'block';\nbutton.textContent = 'Update Data';\nbutton.onclick = () => {\n  const interval = chart.getNodeByType('interval'); // Get interval\n  interval.data(mock()); // Update interval data\n  chart.render(); // Render chart\n};\n\ncontainer.insertBefore(button, container.childNodes[0]);\n",paraId:39,tocIndex:5},{value:"G2 provides a simple composite mark mechanism for enhancing charts or customizing charts. For example, compositing Point, Line, and Area.",paraId:40,tocIndex:6},{value:"For more content, please read ",paraId:41,tocIndex:6},{value:"Composition",paraId:42,tocIndex:6},{value:".",paraId:41,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\n// Define composite mark\nfunction PointLineArea({ data, encode = {}, style = {} } = {}) {\n  const { fillOpacity = 0.1 } = style;\n  return [\n    {\n      type: 'area',\n      data,\n      encode,\n      style: { fillOpacity },\n    },\n    { type: 'line', data, encode },\n    { type: 'point', data, encode },\n  ];\n}\n\nconst chart = new Chart({\n  container: 'container',\n});\n\n// Use composite mark via API\nchart\n  .mark(PointLineArea)\n  .data([\n    { year: '1991', value: 15468 },\n    { year: '1992', value: 16100 },\n    { year: '1993', value: 15900 },\n    { year: '1994', value: 17409 },\n    { year: '1995', value: 17000 },\n    { year: '1996', value: 31056 },\n    { year: '1997', value: 31982 },\n    { year: '1998', value: 32040 },\n    { year: '1999', value: 33233 },\n  ])\n  .encode('x', 'year')\n  .encode('y', 'value');\n\n// Use composite mark via Spec\nchart.options({\n  type: PointLineArea,\n  data: [\n    { year: '1991', value: 15468 },\n    { year: '1992', value: 16100 },\n    { year: '1993', value: 15900 },\n    { year: '1994', value: 17409 },\n    { year: '1995', value: 17000 },\n    { year: '1996', value: 31056 },\n    { year: '1997', value: 31982 },\n    { year: '1998', value: 32040 },\n    { year: '1999', value: 33233 },\n  ],\n  encode: { x: 'year', y: 'value' },\n});\n\nchart.render();\n",paraId:43,tocIndex:6},{value:"Composite marks make it easier to add chart capabilities based on G2 and simpler to maintain, and some marks within G2 are also implemented based on this approach.",paraId:44,tocIndex:6},{value:"G2's architecture consists of a ",paraId:45,tocIndex:7},{value:"Runtime",paraId:45,tocIndex:7},{value:" and a series of ",paraId:45,tocIndex:7},{value:"visualization components",paraId:45,tocIndex:7},{value:". The runtime is mainly responsible for completing data mapping, scale creation and inference, etc., as well as connecting visualization components. Different visualization components have different functions, such as scales for mapping data and shapes for drawing mapped graphics. The following shows how to customize a triangular bar chart:",paraId:45,tocIndex:7},{value:"import { register, Chart } from '@antv/g2';\n\n// Custom triangle shape\nregister('shape.interval.triangle', (style, context) => {\n  const { document } = context;\n  return (P, value, defaults) => {\n    const { color: defaultColor } = defaults;\n    const [p0, p1, p2, p3] = P;\n    const pm = [(p0[0] + p1[0]) / 2, p0[1]];\n    const { color = defaultColor } = value;\n    return document.createElement('polygon', {\n      style: {\n        ...style,\n        fill: color,\n        points: [pm, p2, p3],\n      },\n    });\n  };\n});\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data([\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  .encode('color', 'genre')\n  .encode('shape', 'triangle'); // Use this shape\n\nchart.render();\n",paraId:46,tocIndex:7},{value:"Visualization components available to G2 Runtime are organized through libraries. A library is essentially a JavaScript object like the following:",paraId:47,tocIndex:8},{value:"const library = {\n  'mark.interval': Interval,\n  'scale.linear': Linear,\n  //...\n};\n",paraId:48,tocIndex:8},{value:"So you can achieve tree shaking by modifying the library and using the tree shaking capability of bundling tools, thereby reducing bundle size. For example, if your project only needs to draw some simple charts and doesn't need to draw geographic (GeoPath), graph (ForceGraph) or advanced statistical charts (Sankey), then you can customize your own Chart object as follows:",paraId:49,tocIndex:8},{value:"import { Runtime, corelib, extend } from '@antv/g2';\n\n// Extend Runtime based on corelib\n// 1. Add types (if using TypeScript)\n// 2. Add marks\nconst Chart = extend(Runtime, { ...corelib() });\n\nconst chart = new Chart({ container: 'container' });\n\nchart\n  .interval()\n  .data([\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  .encode('color', 'genre');\n\nchart.render();\n",paraId:50,tocIndex:8},{value:"If you want to draw geographic charts, you can do the following:",paraId:51,tocIndex:8},{value:"import { Runtime, corelib, geolib, extend } from '@antv/g2';\n\n// Use capabilities from both libraries\nconst Chart = extend(Runtime, { ...corelib, ...geolib });\n\nconst chart = new Chart({ container: 'container' });\n\n// ...\n",paraId:52,tocIndex:8}]}}]);